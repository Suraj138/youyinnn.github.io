<hr>
<p>title: Leetcode-71~75
categories:</p>
<ul>
<li>note</li>
<li>algorithm</li>
<li>leetcode
tags:</li>
<li>leetcode</li>
<li>mysqrt</li>
<li>binary-question
date: 2019-04-04 15:35:00 +8
series: leetcode</li>
</ul>
<hr>
<h3 id="71-simplifypathmedium">71. SimplifyPath(Medium)</h3>
<p>Given an <strong>absolute path</strong> for a file (Unix-style), simplify it. Or in other words, convert it to the <strong>canonical path</strong>.</p>
<p>In a UNIX-style file system, a period <code>.</code> refers to the current directory. Furthermore, a double period <code>..</code> moves the directory up a level. For more information, see: <a href="https://www.linuxnix.com/abslute-path-vs-relative-path-in-linuxunix/">Absolute path vs relative path in Linux/Unix</a></p>
<p>Note that the returned canonical path must always begin with a slash <code>/</code>, and there must be only a single slash <code>/</code> between two directory names. The last directory name (if it exists) <strong>must not</strong> end with a trailing <code>/</code>. Also, the canonical path must be the <strong>shortest</strong> string representing the absolute path.</p>
<p><strong>Example 1:</strong></p>
<pre><code>Input: &quot;/home/&quot;
Output: &quot;/home&quot;
Explanation: Note that there is no trailing slash after the last directory name.</code></pre><p><strong>Example 2:</strong></p>
<pre><code>Input: &quot;/../&quot;
Output: &quot;/&quot;
Explanation: Going one level up from the root directory is a no-op, as the root level is the highest level you can go.</code></pre><p><strong>Example 3:</strong></p>
<pre><code>Input: &quot;/home//foo/&quot;
Output: &quot;/home/foo&quot;
Explanation: In the canonical path, multiple consecutive slashes are replaced by a single one.</code></pre><p><strong>Example 4:</strong></p>
<pre><code>Input: &quot;/a/./b/../../c/&quot;
Output: &quot;/c&quot;</code></pre><p><strong>Example 5:</strong></p>
<pre><code>Input: &quot;/a/../../b/../c//.//&quot;
Output: &quot;/c&quot;</code></pre><p><strong>Example 6:</strong></p>
<pre><code>Input: &quot;/a//b////c/d//././/..&quot;
Output: &quot;/a/b/c&quot;</code></pre><h4 id="iterate">Iterate</h4>
<p>以<code>/</code>为单位截出name，然后如果碰到不是<code>..</code>也不是<code>.</code>也非空的name，就加入到队列中，如果碰到<code>..</code>，就退出中尾部的name，最后依次遍历队列，组成path</p>
<pre><code class="language-java">public String simplifyPath(String path) {
    StringBuilder sb = new StringBuilder(&quot;/&quot;);
    LinkedList&lt;String&gt; list = new LinkedList&lt;&gt;();
    int nowI = 0;
    while (nowI &lt; path.length()) {
        int nextI = path.indexOf(&#39;/&#39;, nowI + 1);
        String name;
        if (nextI &gt; nowI) {
            name = path.substring(nowI + 1, nextI);
            nowI = nextI;
        } else {
            name = path.substring(nowI + 1);
            nowI = path.length();
        }

        if (name.equals(&quot;..&quot;) &amp;&amp; !list.isEmpty()) {
            list.removeLast();
        } else if (!name.equals(&quot;.&quot;) &amp;&amp; !name.equals(&quot;..&quot;) &amp;&amp; !name.isEmpty()) {
            list.add(name);
        }
    }
    for (String name : list) {
        sb.append(name).append(&#39;/&#39;);
    }
    if (sb.length() &gt; 1) {
        sb.deleteCharAt(sb.lastIndexOf(&quot;/&quot;));
    }
    return sb.toString();
}</code></pre>
<h3 id="72-edit-distancehard">72. Edit Distance(Hard)</h3>
<p>Given two words <em>word1</em> and <em>word2</em>, find the minimum number of operations required to convert <em>word1</em> to <em>word2</em>.</p>
<p>You have the following 3 operations permitted on a word:</p>
<ol>
<li>Insert a character</li>
<li>Delete a character</li>
<li>Replace a character</li>
</ol>
<p><strong>Example 1:</strong></p>
<pre><code>Input: word1 = &quot;horse&quot;, word2 = &quot;ros&quot;
Output: 3
Explanation: 
horse -&gt; rorse (replace &#39;h&#39; with &#39;r&#39;)
rorse -&gt; rose (remove &#39;r&#39;)
rose -&gt; ros (remove &#39;e&#39;)</code></pre><p><strong>Example 2:</strong></p>
<pre><code>Input: word1 = &quot;intention&quot;, word2 = &quot;execution&quot;
Output: 5
Explanation: 
intention -&gt; inention (remove &#39;t&#39;)
inention -&gt; enention (replace &#39;i&#39; with &#39;e&#39;)
enention -&gt; exention (replace &#39;n&#39; with &#39;x&#39;)
exention -&gt; exection (replace &#39;n&#39; with &#39;c&#39;)
exection -&gt; execution (insert &#39;u&#39;)</code></pre><h4 id="dp">DP</h4>
<p>针对这题的分析在<a href="https://youyinnn.github.io/?to=post&amp;number=112">DP Again</a>中</p>
<pre><code class="language-java">public int minDistance(String word1, String word2) {
    int[][] dp = new int[word1.length() + 1][word2.length() + 1];
    for (int i = 0; i &lt;= word1.length(); i++) {
        dp[i][0] = i;
    }
    for (int j = 0; j &lt;= word2.length(); j++) {
        dp[0][j] = j;
    }
    for (int i = 1; i &lt;= word1.length(); i++) {
        for (int j = 1; j &lt;= word2.length(); j++) {
            if (word1.charAt(i - 1) == word2.charAt(j - 1)) {
                // same as before
                dp[i][j] = dp[i - 1][j - 1];
            } else {
                dp[i][j] = 1
                        + Math.min(
                                // replace
                                dp[i - 1][j - 1],
                        Math.min(
                                // delete
                                dp[i - 1][j],
                                // insert
                                dp[i][j - 1]));
            }
        }
    }
    return dp[word1.length()][word2.length()];
}</code></pre>
<h4 id="dfs">DFS</h4>
<pre><code class="language-java">public int minDistance2(String a, String b) {
    int[][] dp = new int[a.length() + 1][b.length() + 1];
    return dfs(a, b, a.length() - 1, b.length() - 1, dp);
}

private int dfs(String a, String b, int i, int j, int[][] dp) {
    if (i == -1) {
        return j + 1;
    }
    if (j == -1) {
        return i + 1;
    }
    if (dp[i][j] == 0) {
        if (a.charAt(i) == b.charAt(j)) {
            dp[i][j] = dfs(a, b, i - 1, j - 1, dp);
        } else {
            dp[i][j] = 1
                    + Math.min(
                            dfs(a, b, i - 1, j - 1, dp),
                    Math.min(
                            dfs(a, b, i - 1, j, dp),
                            dfs(a, b, i, j - 1, dp)));
        }
    }
    return dp[i][j];
}</code></pre>
<h3 id="73-set-matrix-zerosmedium">73. Set Matrix Zeros(Medium)</h3>
<p>Given a <em>m</em> x <em>n</em> matrix, if an element is 0, set its entire row and column to 0. Do it <a href="https://en.wikipedia.org/wiki/In-place_algorithm"><strong>in-place</strong></a>.</p>
<p><strong>Example 1:</strong></p>
<pre><code>Input: 
[
  [1,1,1],
  [1,0,1],
  [1,1,1]
]
Output: 
[
  [1,0,1],
  [0,0,0],
  [1,0,1]
]</code></pre><p><strong>Example 2:</strong></p>
<pre><code>Input: 
[
  [0,1,2,0],
  [3,4,5,2],
  [1,3,1,5]
]
Output: 
[
  [0,0,0,0],
  [0,4,5,0],
  [0,3,1,0]
]</code></pre><p><strong>Follow up:</strong></p>
<ul>
<li>A straight forward solution using O(<em>m**n</em>) space is probably a bad idea.</li>
<li>A simple improvement uses O(<em>m</em> + <em>n</em>) space, but still not the best solution.</li>
<li>Could you devise a constant space solution?</li>
</ul>
<h4 id="brute-force">Brute Force</h4>
<p>这题我觉得没必要想太多，暴力解复杂度也就O(mn)，然后这边空间复杂度就O(m + n)，虽然题目要求说要用常数空间去做</p>
<pre><code class="language-java">public void setZeroes(int[][] matrix) {
    boolean[] rowZ = new boolean[matrix.length];
    boolean[] colZ = new boolean[matrix[0].length];
    for (int i = 0; i &lt; matrix.length; i++) {
        for (int j = 0; j &lt; matrix[i].length; j++) {
            if (matrix[i][j] == 0) {
                rowZ[i] = colZ[j] = true;
            }
        }
    }
    for (int i = 0; i &lt; matrix.length; i++) {
        if (rowZ[i]) {
            Arrays.fill(matrix[i], 0);
        } else {
            for (int j = 0; j &lt; matrix[i].length; j++) {
                if (colZ[j]) {
                    matrix[i][j] = 0;
                }
            }
        }
    }
}</code></pre>
<h3 id="74-search-a-2d-matrixmedium">74. Search a 2D Matrix(Medium)</h3>
<p>Write an efficient algorithm that searches for a value in an <em>m</em> x <em>n</em> matrix. This matrix has the following properties:</p>
<ul>
<li>Integers in each row are sorted from left to right.</li>
<li>The first integer of each row is greater than the last integer of the previous row.</li>
</ul>
<p><strong>Example 1:</strong></p>
<pre><code>Input:
matrix = [
  [1,   3,  5,  7],
  [10, 11, 16, 20],
  [23, 30, 34, 50]
]
target = 3
Output: true</code></pre><p><strong>Example 2:</strong></p>
<pre><code>Input:
matrix = [
  [1,   3,  5,  7],
  [10, 11, 16, 20],
  [23, 30, 34, 50]
]
target = 13
Output: false</code></pre><h4 id="binary">Binary</h4>
<p>没什么好说的</p>
<pre><code class="language-java">public boolean searchMatrix(int[][] matrix, int target) {
    if (matrix.length == 0 || matrix[0].length == 0) {
        return false;
    }
    int m = matrix.length, n = matrix[0].length;
    int low = 0, high = m - 1, mid;
    while (low &lt;= high) {
        mid = (high + low) &gt;&gt;&gt; 1;
        int rowHead = matrix[mid][0];
        int rowTail = matrix[mid][n - 1];
        if (rowHead &lt;= target &amp;&amp; rowTail &gt;= target) {
            return Arrays.binarySearch(matrix[mid], target) &gt;= 0;
        }
        if (rowHead &gt; target) {
            high = mid - 1;
        } else {
            low = mid + 1;
        }
    }
    return false;
}</code></pre>
<h3 id="75-sort-colorsmedium">75. Sort Colors(Medium)</h3>
<p>Given an array with <em>n</em> objects colored red, white or blue, sort them <strong>in-place</strong> so that objects of the same color are adjacent, with the colors in the order red, white and blue.</p>
<p>Here, we will use the integers 0, 1, and 2 to represent the color red, white, and blue respectively.</p>
<p><strong>Note:</strong> You are not suppose to use the library&#39;s sort function for this problem.</p>
<p><strong>Example:</strong></p>
<pre><code>Input: [2,0,2,1,1,0]
Output: [0,0,1,1,2,2]</code></pre><p><strong>Follow up:</strong></p>
<ul>
<li>A rather straight forward solution is a two-pass algorithm using counting sort.
  First, iterate the array counting number of 0&#39;s, 1&#39;s, and 2&#39;s, then overwrite array with total number of 0&#39;s, then 1&#39;s and followed by 2&#39;s.</li>
<li>Could you come up with a one-pass algorithm using only constant space?</li>
</ul>
<h4 id="two-pass-counting-sort">Two-pass Counting Sort</h4>
<p>关于计数排序，<a href="https://youyinnn.github.io/?to=post&amp;number=42#_root-CountingSort">排序大礼包</a>的时候讲过的，但这是2n时间，题目要求1n时间，暂时就不先做了，因为我觉得盲目追求1n时间属于投机</p>
<pre><code class="language-java">public void sortColors(int[] nums) {
    int[] count = new int[3];
    for (int color : nums) {
        count[color]++;
    }
    int cur = 0;
    for(int i = 0; i &lt; nums.length;) {
        if (count[cur] != 0) {
            nums[i] = cur;
            count[cur]--;
            i++;
        } else {
            cur++;
        }
    }
}</code></pre>
