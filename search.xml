<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title><![CDATA[CentOS7下安装Pillow并使用osm-bundler生成图点模型]]></title>
      <url>/post/2f341c62.html</url>
      <content type="html"><![CDATA[<blockquote class="blockquote-center"><p>前言：之前留下的17大创项目总得做点什么，马上就要结题了，我们做的AR留影需要将用户照下来的照片生成点云然后合成模型。由此Escnqh[link:gayhub]找到了使用PIL+osm-bundler的解决方案。</p>
</blockquote>
<a id="more"></a>
<h3 id="Python-Photogrammetry-ToolKit（PPT）"><a href="#Python-Photogrammetry-ToolKit（PPT）" class="headerlink" title="Python Photogrammetry ToolKit（PPT）"></a>Python Photogrammetry ToolKit（PPT）</h3><p>这玩意是意大利的一个团队开发的一个Python图像处理工具包，正是这个工具包提供的osm-bundler加上PIL构成了一套解决方案。</p>
<p>官网：<a href="http://184.106.205.13/arcteam/ppt.php" target="_blank" rel="external">http://184.106.205.13/arcteam/ppt.php</a></p>
<h4 id="PIL"><a href="#PIL" class="headerlink" title="PIL"></a>PIL</h4><blockquote>
<p>The Python Imaging Library (PIL) adds image processing capabilities to your Python interpreter. This library supports many file formats, and provides powerful image processing and graphics capabilities.</p>
</blockquote>
<p>简单来说就是Python的图像处理库，osm-bundler基于这个库对图像进行分析。</p>
<p>官网：<a href="http://www.pythonware.com/products/pil/" target="_blank" rel="external">http://www.pythonware.com/products/pil/</a></p>
<p>但是很坑的一点是，这个项目09年就停止维护了，所以安装这个东西异常困难。</p>
<h4 id="Pillow"><a href="#Pillow" class="headerlink" title="Pillow"></a>Pillow</h4><p>由于PIL属于史前神物，无法触碰，安装过程中所需要的组件特别零散，其实这对于Debian系的Linux系统来说问题并不大，大部分的库使用apt就能获取到，但是我的服务器是CentOS7，属于Redhat系的，只有yum和rpm。而开发PPT的意大利团队是在Debian下开发的，Redhat下库的获取不一样，所以我还不能按照官方给的思路来进行PPT的部署- -///。</p>
<p>于是我找到了Pillow。</p>
<p>介绍：</p>
<blockquote>
<p>Pillow is the friendly PIL fork by Alex Clark and Contributors. PIL is the Python Imaging Library by Fredrik Lundh and Contributors.</p>
</blockquote>
<p>Pillow是PIL的一个友好的Fork，而且这个项目在GitHub上持续维护。</p>
<p>官网：<a href="http://pillow.readthedocs.io/en/latest/index.html" target="_blank" rel="external">http://pillow.readthedocs.io/en/latest/index.html</a></p>
<p>hub：<a href="https://github.com/python-pillow/Pillow" target="_blank" rel="external">https://github.com/python-pillow/Pillow</a></p>
<p>所以说，我可以使用Pillow来代替PIL，这是完全可行的！！</p>
<p>而且Pillow的安装异常简单，我们只需要使用python系的包管理工具PIP就可以一键安装！！！</p>
<h4 id="PIP"><a href="#PIP" class="headerlink" title="PIP"></a>PIP</h4><blockquote>
<p>The PyPA recommended tool for installing Python packages.</p>
</blockquote>
<p>官网：<a href="https://pip.pypa.io/en/stable/" target="_blank" rel="external">https://pip.pypa.io/en/stable/</a></p>
<hr>
<h3 id="安装PPT"><a href="#安装PPT" class="headerlink" title="安装PPT"></a>安装PPT</h3><h4 id="安装Python"><a href="#安装Python" class="headerlink" title="安装Python"></a>安装Python</h4><p>这是一切的大前提，你的系统里需要有python环境，但是一般的linux都会内置一个，只不过你不要使用版本太低的python就好，具体到多少我也不清楚，python的版本断代真的是傻的不行。</p>
<h4 id="安装pip"><a href="#安装pip" class="headerlink" title="安装pip"></a>安装pip</h4><p>自己看：<a href="https://packaging.python.org/guides/installing-using-linux-tools/#installing-pip-setuptools-wheel-with-linux-package-managers" target="_blank" rel="external">https://packaging.python.org/guides/installing-using-linux-tools/#installing-pip-setuptools-wheel-with-linux-package-managers</a></p>
<p>然后需要更新一下pip</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">pip install -U pip</div></pre></td></tr></table></figure>
<h4 id="安装Pillow"><a href="#安装Pillow" class="headerlink" title="安装Pillow"></a>安装Pillow</h4><p>Installation页：<a href="http://pillow.readthedocs.io/en/latest/installation.html" target="_blank" rel="external">http://pillow.readthedocs.io/en/latest/installation.html</a></p>
<p>大概浏览一下这个页面，不要急着一上来就安装Pillow。</p>
<p>在“External Libraries”一节，它提示我们，在安装Pillow之前我们需要安装完运行Pillow所需的库。</p>
<p>开发Pillow的团队在hub的depends文件夹下提供了这些库在各种系统下的安装脚本，我们选择fedora_23.sh的脚本(fedora是RedHat)，但是不要运行这个脚本，我们看它对应的package需要安装哪些就好。</p>
<p><img src="http://image.youyinnn.cn/3aef0a673e1639aec3272e205b934971.png" alt="fedora"></p>
<p>如图最下面一行，在centos下就可以执行：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">yum install libtiff-devel libjpeg-devel zlib-devel freetype-devel  lcms2-devel libwebp-devel openjpeg2-devel tkinter python3-tkinter  tcl-devel tk-devel harfbuzz-devel fribidi-devel libraqm-devel</div></pre></td></tr></table></figure>
<p><img src="http://image.youyinnn.cn/5e3b4f30ce74fefbc7e2ebfcccb76543.png" alt="yum"></p>
<p>这些我都安装过了，其中丢失的python3-tkinter在centos下没有那就不用管了。</p>
<p>这些库安装完之后，我们就可以安装Pillow了：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">pip install Pillow</div></pre></td></tr></table></figure>
<p>安装完Pillow我们来验证一下，我们写一个test.py脚本：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</div><div class="line">picPath = <span class="string">'./card.jpg'</span></div><div class="line"></div><div class="line">im = Image.open(picPath)</div><div class="line"><span class="keyword">print</span> im.getbbox()</div></pre></td></tr></table></figure></p>
<p>和脚本一起有一个card.jpg文件，我们使用Pillow来分析这个文件，执行：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">python test.py</div></pre></td></tr></table></figure>
<p>分析出了数据：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">[root@VM_16_214_centos youyinnn]<span class="comment"># python test.py</span></div><div class="line">(0, 0, 564, 738)</div><div class="line">[root@VM_16_214_centos youyinnn]<span class="comment">#</span></div></pre></td></tr></table></figure></p>
<p>说明已经安装成功！</p>
<h4 id="安装BLAS库"><a href="#安装BLAS库" class="headerlink" title="安装BLAS库"></a>安装BLAS库</h4><p>我们要使用PPT，除了PIL之外，还需要两个重要组件，其中一个便是 BLAS (libblas3gf, libblas-dev) 。</p>
<p>就不介绍了，直接开始安装，在centos下的安装比较奇葩，因为PPT官网给的包名什么的都是apt有的，有的可能yum下没有，所以我们需要选择合适的库：</p>
<p>首先把blas安装了：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">yum install blas</div></pre></td></tr></table></figure></p>
<p>以上命令在我的主机上会安装”blas-3.4.2-8.el7.x86_64”：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">[root@VM_16_214_centos youyinnn]<span class="comment"># yum install blas</span></div><div class="line">Loaded plugins: fastestmirror, langpacks</div><div class="line">Repository epel is listed more than once <span class="keyword">in</span> the configuration</div><div class="line">Loading mirror speeds from cached hostfile</div><div class="line">Package blas-3.4.2-8.el7.x86_64 already installed and latest version</div><div class="line">Nothing to <span class="keyword">do</span></div><div class="line">[root@VM_16_214_centos youyinnn]<span class="comment">#</span></div></pre></td></tr></table></figure></p>
<p>它主要提供一下三个lib：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">/usr/lib64/libblas.so.3</div><div class="line">/usr/lib64/libblas.so.3.4</div><div class="line">/usr/lib64/libblas.so.3.4.2</div></pre></td></tr></table></figure></p>
<p>然后search一下blas：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">[root@VM_16_214_centos youyinnn]<span class="comment"># yum search blas</span></div><div class="line">Loaded plugins: fastestmirror, langpacks</div><div class="line">Repository epel is listed more than once <span class="keyword">in</span> the configuration</div><div class="line">Loading mirror speeds from cached hostfile</div><div class="line">==================================================================================== N/S matched: blas ====================================================================================</div><div class="line">blas-devel.i686 : BLAS development libraries</div><div class="line">blas-devel.x86_64 : BLAS development libraries</div><div class="line">blas-static.i686 : BLAS static libraries</div><div class="line">blas-static.x86_64 : BLAS static libraries</div><div class="line">blas64-devel.x86_64 : BLAS development libraries</div><div class="line">blas64-static.x86_64 : BLAS static libraries (64bit INTEGER)</div><div class="line">...</div><div class="line"></div><div class="line">[root@VM_16_214_centos youyinnn]<span class="comment">#</span></div></pre></td></tr></table></figure></p>
<p>得出的结果比较多，我们需要选择安装“blas-devel”，至于是否是64位系统的选择，就看你自己的机子了。</p>
<p>安装的“blas-devel”提供下面这个lib：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">/usr/lib64/libblas.so</div></pre></td></tr></table></figure></p>
<p>PPT还需要安装的是“libblas3gf”，但是这个玩意centos没有，好在我找到了对应的一个rpm：<a href="https://altlinux.pkgs.org/sisyphus/classic-x86_64/libblas3gf-3.9.2-alt1.x86_64.rpm.html" target="_blank" rel="external">https://altlinux.pkgs.org/sisyphus/classic-x86_64/libblas3gf-3.9.2-alt1.x86_64.rpm.html</a></p>
<p>所以我们要下载这个文件，然后使用rpm来安装它！</p>
<p>安装完了之后我们可以得到这个关键的lib：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">/usr/lib64/libblas.so.3gf</div><div class="line">/usr/lib64/libblas.so.3gf.0</div></pre></td></tr></table></figure></p>
<p>然后我们BLAS就安装完成了！</p>
<h4 id="安装LAPACK库"><a href="#安装LAPACK库" class="headerlink" title="安装LAPACK库"></a>安装LAPACK库</h4><p>LAPACK库需要安装：LAPACK (liblapack3gf, liblapack-dev)</p>
<p>直接yum：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">yum install lapack</div></pre></td></tr></table></figure></p>
<p>会安装：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">[root@VM_16_214_centos linux]<span class="comment"># yum install lapack</span></div><div class="line">Loaded plugins: fastestmirror, langpacks</div><div class="line">Repository epel is listed more than once <span class="keyword">in</span> the configuration</div><div class="line">Loading mirror speeds from cached hostfile</div><div class="line">Package lapack-3.4.2-8.el7.x86_64 already installed and latest version</div><div class="line">Nothing to <span class="keyword">do</span></div><div class="line">[root@VM_16_214_centos linux]<span class="comment">#</span></div></pre></td></tr></table></figure></p>
<p>它提供了：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">/usr/lib64/liblapack.so.3</div><div class="line">/usr/lib64/liblapack.so.3.4</div><div class="line">/usr/lib64/liblapack.so.3.4.2</div><div class="line">/usr/lib64/liblapacke.so.3</div><div class="line">/usr/lib64/liblapacke.so.3.4</div><div class="line">/usr/lib64/liblapacke.so.3.4.2</div></pre></td></tr></table></figure>
<p>然后安装liblapack3gf，这里巨坑的是，liblapack3gf只有Debian系统有，连rpm都没有，开始是想把deb<br>文件转成rpm文件的，直到后来Escnqh输入了一行玄学指令：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ln -s /usr/lib64/liblapack.so.3 /usr/lib64/liblapack.so.3gf</div></pre></td></tr></table></figure>
<p>直接用liblapack.so.3伪装成liblapack.so.3gf（- -）…</p>
<p>最后liblapack-dev我反正没安装，后面好像也能跑出模型- -</p>
<p>支持LAPACK库也安装完毕。</p>
<hr>
]]></content>
      
        <categories>
            
            <category> note </category>
            
            <category> project </category>
            
            <category> 17y-CollagesStudent-Creative-Project </category>
            
        </categories>
        
        
        <tags>
            
            <tag> centos7 </tag>
            
            <tag> python </tag>
            
            <tag> Pillow </tag>
            
            <tag> osm-bundler </tag>
            
            <tag> pip </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Cron4j官方文档翻译]]></title>
      <url>/post/89ed1ae8.html</url>
      <content type="html"><![CDATA[<blockquote class="blockquote-center"><p>Cron4j：一个轻量级的定时任务调度工具</p>
</blockquote>
<a id="more"></a>
<h1 id="Cron4j"><a href="#Cron4j" class="headerlink" title="Cron4j"></a>Cron4j</h1><hr>
<p>一些必要的单词解释：</p>
<ol>
<li>schedule 安排、调度（安排在有主语的时候使用 调用在没主语的时候使用）</li>
<li>scheduler 调度器</li>
<li>scheduling pattern 调度模式</li>
<li>reschedule 重新调度、安排</li>
<li>action/task 动作/任务</li>
<li>deschedule 脱离调度、安排</li>
<li>Daemon threads 守护线程 （其实daemon本意就有守护进程的意思 加个threads应该是强调线程而非进程）</li>
<li>Predictor 先知（故意翻译为这个中二的名字哈哈）、预报器（这才是常规翻译）</li>
<li>Crontab/Cron 定时任务工具</li>
<li>status tracking 状态跟踪</li>
<li>executor 执行器</li>
<li>collector 收集器</li>
</ol>
<hr>
<p><span id="index"></span></p>
<h2 id="Index"><a href="#Index" class="headerlink" title="Index"></a>Index</h2><blockquote>
<ol>
<li><a href="#1快速开始">快速开始</a></li>
<li><a href="#2调度模式-scheduling-pattern">调度模式 scheduling pattern</a></li>
<li><a href="#3如何调度-schedule重新调度-reschedule脱离调度-deschedule一个任务task">如何调度 schedule、重新调度 reschedule、脱离调度 deschedule一个任务</a></li>
<li><a href="#4如何调度系统程序">如何调度系统程序</a></li>
<li><a href="#5如何从调度配置文件中调度程序">如何从调度配置文件中调度程序</a></li>
<li><a href="#6创建自定义的任务-task">创建自定义的任务 Task</a></li>
<li><a href="#7创建自定义的收集器-collector">创建自定义的收集器 Collector</a></li>
<li><a href="#8创建自定义的监听器来监控你的调度器">创建自定义的监听器来监控你的调度器</a></li>
<li><a href="#9执行器-executors">执行器 Executors</a></li>
<li><a href="#10手动启动任务">手动启动任务</a></li>
<li><a href="#11在指定时区下运行">在指定时区下运行</a></li>
<li><a href="#12守护线程-daemon-threads">守护线程 Daemon threads</a></li>
<li><a href="#13预报器-predictor">预报器 Predictor</a></li>
<li><a href="#14cron解析器">Cron解析器</a></li>
</ol>
</blockquote>
<hr>
<p><span id="1快速开始"></span></p>
<h3 id="1、快速开始："><a href="#1、快速开始：" class="headerlink" title="1、快速开始："></a>1、快速开始：</h3><p>cron4j的主要实体是‘scheduler’，实例化<code>it.sauronsoftware.cron4j.Scheduler</code>之后，你可以在一年当中任意的时间段执行任意的任务（Task）。</p>
<p>要使用cron4j scheduler 你需要做下面四步：</p>
<ol>
<li>new一个Scheduler实例</li>
<li>安排（schedule）你的动作（action）。你需要告诉scheduler对象你要做的事情是什么并且是在什么时候发生的。你可以指定（specify）一个实现了<code>java.lang.Runnable</code>接口的实例对象或者使用cron4j提供的<code>it.sauronsoftware.con4j.Task</code>类来实例一个对象来告诉它你要做什么事情，然后你可以使用一个<code>it.sauronsoftware.cron4j.SchedulingPattern</code>类的实例或者是一个字符串来代表指定的‘scheduling pattern’来告诉它你要在什么样的时间执行你的action。</li>
<li>开启（start）你的scheduler实例。</li>
<li>当你不再需要它的时候，停止（stop）它。</li>
</ol>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line">import it.sauronsoftware.cron4j.Scheduler;</div><div class="line"></div><div class="line">public class Quickstart &#123;</div><div class="line"></div><div class="line">    public static void main(String[] args) &#123;</div><div class="line">        // 第一步创建实例</div><div class="line">        Scheduler s = new Scheduler();</div><div class="line">        // 安排一个每分钟执行一次的任务</div><div class="line">        s.schedule(&quot;* * * * *&quot;, new Runnable() &#123;</div><div class="line">            public void run() &#123;</div><div class="line">                System.out.println(&quot;Another minute ticked away...&quot;);</div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line">        // 开启你的调度器</div><div class="line">        s.start();</div><div class="line">        // 10分钟后执行之后的代码</div><div class="line">        try &#123;</div><div class="line">            Thread.sleep(1000L * 60L * 10L);</div><div class="line">        &#125; catch (InterruptedException e) &#123;</div><div class="line">            ;</div><div class="line">        &#125;</div><div class="line">        // 10分钟后停止你的调度器</div><div class="line">        s.stop();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>上面的代码会每隔一分钟执行一次run方法并打印出”Another minute ticked away…”句子。</p>
<p>你需要知道一些关键的概念：</p>
<ul>
<li>你可以安排任意数量的任务。</li>
<li>你可以在任意时间安排任务，即使是在调度器（scheduler）已经被开启过之后。</li>
<li>你可以改变已经安排过的任务的‘scheduling pattern（调度模式）’，即使是当调度器正在运行的时候（reschedule operation 重新调度操作）。</li>
<li>你可以移除之前安排过的任务，即使是当调度器正在运行的时候（deschedule operation 脱离调度操作）。</li>
<li>你可以任意次开启或停止调度器。</li>
<li>你可以使用文件配置来安排任务。</li>
<li>你可以从任意文件源配置中安排任务。</li>
<li>你可以提供一个监听器（listener）给调度器，用来接收执行过的任务的事件。</li>
<li>你可以控制任何一个正在进行的任务。</li>
<li>你可以不使用任何的‘scheduling pattern’就可以手动启动任务。</li>
<li>你可以改变调度器工作的时区。</li>
<li>你可以在你的‘scheduling pattern’使用到调度器之前验证它的工作模式。</li>
<li>你可以预报出你的‘scheduling pattern’可能造成的任务异常。</li>
</ul>
<p><a href="#index">回到索引</a></p>
<hr>
<p><span id="2调度模式-scheduling-pattern"></span></p>
<h3 id="2、调度模式-scheduling-pattern"><a href="#2、调度模式-scheduling-pattern" class="headerlink" title="2、调度模式 scheduling pattern"></a>2、调度模式 scheduling pattern</h3><p>‘scheduling pattern’是一个 UNIX 的类定时任务模式，由一个以空格分隔为五个部分的字符串组成。每个部分代表着：</p>
<p>分钟子模式（Minutes sub-pattern）：</p>
<blockquote>
<p>规定一小时中的哪个分钟会执行任务，取值范围为0-59。</p>
</blockquote>
<p>小时子模式（Hour sub-pattern）：</p>
<blockquote>
<p>规定一天中的哪个小时会执行任务，取值范围为0-23。</p>
</blockquote>
<p>日期子模式（Days of mouth sub-pattern）：</p>
<blockquote>
<p>规定一个月中的哪一号会执行任务，取值范围为1-31，特殊值“L”可以代表当月的最后一天。</p>
</blockquote>
<p>月份子模式（Months sub-pattern）：</p>
<blockquote>
<p>规定一年中的哪一月会执行任务，取值范围从1（January）-12（December），这个子模式也允许月份英文缩写如：jan、feb、mar、…、dec。</p>
</blockquote>
<p>周几子模式（Days of week sub-pattern）：</p>
<blockquote>
<p>规定一周中的周几会执行任务，取值范围0（sunday）-6（monday），这个子模式同样允许英文缩写（是否忽略大小写 并未做考究 请按照官方举例 首字母大写）：sun、mon、…、sat。</p>
</blockquote>
<p>模式还允许使用星号通配符来代表：小时中的每分钟、日中的每小时、月中的每一天、年中的每一月、一周中的每一天。</p>
<p>一旦调度器被开启，任务会在每一个调度模式匹配为true的时候执行一次。</p>
<p>下面是一些举例：</p>
<blockquote>
<p>5 <em> </em> <em> </em></p>
<p>每小时的过五分执行一次（1：05、2：05 etc）</p>
<p>* <em> </em> <em> </em></p>
<p>每分钟执行一次</p>
<p>* 12 <em> </em> Mon</p>
<p>每周一的12时内的每分钟都执行一次</p>
<p>* 12 16 * Mon</p>
<p>每月的16号的12时内的每分钟都执行一次</p>
</blockquote>
<p>每个子模式都可以包含一个或多个逗号来分隔模式值</p>
<blockquote>
<p>59 11 <em> </em> 1,2,3,4,5</p>
<p>每周一、周二、周三、周四、周五的 11:59am 会执行一次</p>
</blockquote>
<p>取值间隔也可以使用“-”号</p>
<blockquote>
<p>59 11 <em> </em> 1-5</p>
<p>和上面的结果一样</p>
</blockquote>
<p>斜杠也可以运用到子模式当中，用来识别子模式取值范围内的分步值。</p>
<p>它有两种运用方式：</p>
<ul>
<li>*/c</li>
<li>a-b/c</li>
</ul>
<p>第一种会匹配到子模式范围0到最大值中的每个c增值 包含0值</p>
<p>第二种会匹配到范围a到b中的每个c增值 包含a值</p>
<blockquote>
<p>*/5 <em> </em> <em> </em></p>
<p>每小时内从0分开始每过5分钟就执行一次（0：00、0：05、0：10、…）</p>
<p>3-18/5 <em> </em> <em> </em></p>
<p>每小时中从3分到18分中每过5分钟就执行一次（0：03、0：08、0：13、0：18、1：03、…）</p>
<p>*/15 9-17 <em> </em> *</p>
<p>每天的9时到17时中从0分开始每过一刻钟就执行一次（9：00、9：15、…、最后一次执行会是在17：45分）</p>
</blockquote>
<p>上述所有规则都可以混合使用</p>
<blockquote>
<p>* 12 10-16/2 <em> </em></p>
<p>每月的10号到16号中每过两天中当天12时中的每分钟执行一次（也即10、12、14、16号中…）</p>
<p>* 12 1-15,17,20-25 <em> </em></p>
<p>每月的1到15号、17号、20到25号当天中的12时中的每分钟执行一次</p>
</blockquote>
<p>cron4j允许你使用“|”符号连接多个调度模式组成一个调度模式</p>
<blockquote>
<p>0 5 <em> </em> <em>|8 10 </em> <em> </em>|22 17 <em> </em> *</p>
<p>每天的5：00、10：08、17：22执行一次</p>
</blockquote>
<p><br></p>
<blockquote>
<p><em>译者文外补充：文后其他地方会使用到<code>SchedulingPattern</code>对象，这个对象的创建非常简单，只需要在它的构造函数中传入调度模式即可。</em></p>
</blockquote>
<p><a href="#index">回到索引</a></p>
<hr>
<p><span id="3如何调度-schedule重新调度-reschedule脱离调度-deschedule一个任务task"></span></p>
<h3 id="3、如何调度-schedule、重新调度-reschedule、脱离调度-deschedule一个任务（Task）"><a href="#3、如何调度-schedule、重新调度-reschedule、脱离调度-deschedule一个任务（Task）" class="headerlink" title="3、如何调度 schedule、重新调度 reschedule、脱离调度 deschedule一个任务（Task）"></a>3、如何调度 schedule、重新调度 reschedule、脱离调度 deschedule一个任务（Task）</h3><h5 id="（1）调度"><a href="#（1）调度" class="headerlink" title="（1）调度"></a>（1）调度</h5><p>创建Task的最简单最常用的方法就是实现<code>java.lang.Runnable</code>接口，任务创建好的时候，它可以被<code>it.sauronsoftware.cron4j.Scheduler.schedule(String, Runnable)</code>方法安排进调度器中，如果调度模式有格式异常，将会抛出<code>it.sauronsoftware.cron4j.InvalidPatternException</code>异常。</p>
<p>创建Task的另一种方法就是继承抽象方法<code>it.sauronsoftware.cron4j.Task</code>，这种方式比上一种方式更加强大，它可以使开发者访问一些cron4j提供的特性。你可以在“<a href="#6">建立自定义的任务 Task</a>”小节中了解到更多相关用法。Task的实例可以被<code>schedule(String, Task)</code>方法和<code>schedule(SchedulingPattern, Task)</code>方法安排进调度器中。</p>
<h5 id="（2）重新调度-脱离调度"><a href="#（2）重新调度-脱离调度" class="headerlink" title="（2）重新调度/脱离调度"></a>（2）重新调度/脱离调度</h5><p>在调度器对象的调度方法<code>schedule</code>会返回一个ID值（String类型）用来识别和检索已经安排过的操作。</p>
<p>这个ID可以被用来之后做：</p>
<ul>
<li>重新调度该任务（需要改变它的调度模式）</li>
<li>把该任务脱离调度（把任务从调度器中移除）</li>
</ul>
<p>可以调用这两个方法取重新调度该任务：</p>
<ul>
<li><code>reschedule(String, String)</code></li>
<li><code>reschedule(String, SchedulingPattern)</code></li>
</ul>
<p>可以调用这个方法让任务脱离调度：</p>
<ul>
<li><code>deschedule(String)</code></li>
</ul>
<p><a href="#index">回到索引</a></p>
<hr>
<p><span id="4如何调度系统程序"></span></p>
<h3 id="4、如何调度系统程序"><a href="#4、如何调度系统程序" class="headerlink" title="4、如何调度系统程序"></a>4、如何调度系统程序</h3><ul>
<li><p>使用类<code>ProcessTask</code>可以很简单的完成系统程序的调度</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">ProcessTask task = new ProcessTask(&quot;C:\\Windows\\System32\\notepad.exe&quot;);</div><div class="line">Scheduler scheduler = new Scheduler();</div><div class="line">scheduler.schedule(&quot;* * * * *&quot;, task);</div><div class="line">scheduler.start();</div><div class="line">// ...</div></pre></td></tr></table></figure>
</li>
<li><p>多个程序参数可以作为字符串数组去代替一条参数</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">String[] command = &#123; &quot;C:\\Windows\\System32\\notepad.exe&quot;, &quot;C:\\File.txt&quot; &#125;;</div><div class="line">ProcessTask task = new ProcessTask(command);</div><div class="line">// ...</div></pre></td></tr></table></figure>
</li>
<li><p>程序的环境变量可以作为第二组字符串数组参数传入，其中的对象必须是‘NAME=VALUE’的形式</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">String[] command = &#123; &quot;C:\\tomcat\\bin\\catalina.bat&quot;, &quot;start&quot; &#125;;</div><div class="line">String[] envs = &#123; &quot;CATALINA_HOME=C:\\tomcat&quot;, &quot;JAVA_HOME=C:\\jdks\\jdk5&quot; &#125;;</div><div class="line">ProcessTask task = new ProcessTask(command, envs);</div><div class="line">// ...</div></pre></td></tr></table></figure>
</li>
<li><p>默认工作目录可以通过传入第三组参数去改变</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">String[] command = &#123; &quot;C:\\tomcat\\bin\\catalina.bat&quot;, &quot;start&quot; &#125;;</div><div class="line">String[] envs = &#123; &quot;CATALINA_HOME=C:\\tomcat&quot;, &quot;JAVA_HOME=C:\\jdks\\jdk5&quot; &#125;;</div><div class="line">File directory = &quot;C:\\MyDirectory&quot;;</div><div class="line">ProcessTask task = new ProcessTask(command, envs, directory);</div><div class="line">// ...</div></pre></td></tr></table></figure>
</li>
<li><p>如果你只想改变工作目录而不想使用环境变量，你可以在envs位置传入null值</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ProcessTask task = new ProcessTask(command, null, directory);</div></pre></td></tr></table></figure>
</li>
</ul>
<p>当evns为null的时候，程序会继承当前JVM环境下工作的所有环境变量。</p>
<p>环境变量和工作目录也可以通过调用<code>setEnvs(String[])</code>和<code>setDirectory(java.io,File)</code>方法来设置</p>
<p>程序的标准输出和标准错误输出管道可以通过<code>setStdoutFile(java.io.File)</code>和<code>setStderrFile(java.io.File)</code>方法重定向到指定文件<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">ProcessTask task = new ProcessTask(command, envs, directory);</div><div class="line">task.setStdoutFile(new File(&quot;out.txt&quot;));</div><div class="line">task.setStderrFile(new File(&quot;err.txt&quot;));</div></pre></td></tr></table></figure></p>
<p>同样的标准输入管道可以从已存在的文件中读取，通过调用方法<code>setStdinFile(java.io.File)</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">ProcessTask task = new ProcessTask(command, envs, directory);</div><div class="line">task.setStdinFile(new File(&quot;in.txt&quot;));</div></pre></td></tr></table></figure></p>
<p><a href="#index">回到索引</a></p>
<hr>
<p><span id="5如何从调度配置文件中调度程序"></span></p>
<h3 id="5、如何从调度配置文件中调度程序"><a href="#5、如何从调度配置文件中调度程序" class="headerlink" title="5、如何从调度配置文件中调度程序"></a>5、如何从调度配置文件中调度程序</h3><p>cron4j调度器可以从调度配置文件中调度一系列的程序流程</p>
<p>你需要准备一个调度配置文件，这和UNIX中crontab的用法非常相似，并且把文件通过<code>scheduleFile(File)</code>方法注册到调度器里面。</p>
<p>调度配置文件也可以通过<code>deschedule(File)</code>方法来脱离调度。</p>
<p>已经调度过的调度配置文件可以调用<code>getScheduledFiles()</code>方法来检索到。</p>
<p>已经注册过的调度配置文件会每分钟都被解析一次，调度器会根据调度配置文件去运行所有调用‘scheduling pattern（调度模式）’来正确声明的、匹配当前系统时间的程序。</p>
<p>cron4j的调度配置文件的声明规则可以从“<a href="#14cron解析器">Cron解析器</a>”小节中了解到。</p>
<p><a href="#index">回到索引</a></p>
<hr>
<p><span id="6创建自定义的任务-task"></span></p>
<h3 id="6、创建自定义的任务-Task"><a href="#6、创建自定义的任务-Task" class="headerlink" title="6、创建自定义的任务 Task"></a>6、创建自定义的任务 Task</h3><p>一个<code>java.lang.Runnable</code>对象是一个简单的Task，但是为了获得对整个任务的控制权你还需要继承<code>it.sauronsoftware,cron4j.Task</code>类（注意这是一个抽象类）。</p>
<p>有两种比较简单的创建形式：<br>（1）实现Runnable接口的时候：任务就是run方法所执行的语句。<br>（2）继承Task抽象类的时候：任务就是需要实现的<code>execute(TaskExecutionContext)</code>方法所执行的语句。</p>
<p>execute(TaskExecutionContext)方法提供了一个<code>it.sauronsoftware.cron4j.TaskExecutionContext</code>实例对象，这是在run方法中所没有的。</p>
<p>你可以用这个对象做这些事情来操作当前任务：</p>
<ul>
<li><p>status tracking 状态跟踪</p>
<blockquote>
<p>任务可以和它的执行器进行通信，可以通过文本描述来向外通知它的internal state（内部状态）</p>
<p>如果你想要你的任务支持这个功能的话，你可以重载<code>supportsStatusTracking()</code>方法，这个方法仅需要实现一个true为返回值就可以表示开启该功能。</p>
<p>当你重载过这个方法之后，在<code>execute(TaskExecutionContext)</code>方法里面就可以调用<code>context.setStatusMessage(String)</code>方法，这会给该任务的执行器发一条状态消息。这个状态消息，通过执行器，可以被外部用户索引到（具体看“<a href="#9执行器-executors">执行器 Executors</a>”小节）。</p>
</blockquote>
</li>
<li><p>completeness tracking 完成度跟踪</p>
<blockquote>
<p>任务可以和它的执行器进行通信，可以通过数字值来向外通知它的completeness level（完成度），</p>
<p>如果你想要你的任务支持这个功能的话，你可以重载<code>supportsCompletenessTracking()</code>方法，这个方法仅需要实现一个true为返回值就可以表示开启该功能。</p>
<p>当你重载过这个方法之后，在<code>execute(TaskExecutionContext)</code>方法里面就可以调用<code>context.setCompleteness(double)</code>方法，这个方法需要传递一个0~1之间的double值，这会给该任务的执行器发一个完成度值。这个完成度值，通过执行器，可以被外部用户索引到（具体看“<a href="#9执行器-executors">执行器 Executors</a>”小节）。</p>
</blockquote>
</li>
<li><p>paused 被暂停</p>
<blockquote>
<p>任务可以根据情况而暂停。</p>
<p>如果你想要你的任务支持这个功能的话，你可以重写<code>canBePaused()</code>方法，这个方法仅需要实现一个true为返回值就可以表示开启该功能。</p>
<p>当你重载过这个方法之后，你需要定期地（原文此处为：you have to periodically call the…）调用<code>context.pauseIfRequested()</code>方法，这会暂停任务的执行，直到被外部用户恢复或者终止当前任务。</p>
</blockquote>
</li>
<li><p>stopped 被终止</p>
<blockquote>
<p>任务可以根据情况而终止。</p>
<p>如果你想要你的任务支持这个功能的话，你可以重载<code>canBeStopped()</code>方法，这个方法仅需要实现一个true为返回值就可以表示开启该功能。</p>
<p>当你重载过这个方法之后，你需要定期地（…）调用<code>context.isStopped()</code>方法，当被外部用户命令终止的时候，这会返回一个true值（具体看“<a href="#9执行器-executors">执行器 Executors</a>”小节）。这时候你有义务处理好这个任务在执行时所反馈出来的事件结果，好让它在正在运行的状态下平稳地（原文：gently）结束。</p>
</blockquote>
</li>
<li><p>索引调度器</p>
<blockquote>
<p>通过context对象，你可以通过<code>getScheduler()</code>索引到调度本身调度器。</p>
</blockquote>
</li>
<li><p>索引执行器</p>
<blockquote>
<p>通过context对象，你可以通过<code>getTaskExecutor()</code>索引到调度本身调度器。</p>
</blockquote>
</li>
</ul>
<p>一个自定义的任务可以被任务收集器（task collector）所立即调度、运行、或者返回。</p>
<p><br></p>
<blockquote>
<p><em>译者文外补充：可以查看Task类的源码，不难发现，上述所要重载的方法在源码中也仅仅只是返回false值，也即默认是关闭这些功能的，我们只有重载为true才能开启和使用它们。</em></p>
</blockquote>
<p><a href="#index">回到索引</a></p>
<hr>
<p><span id="7创建自定义的收集器-collector"></span></p>
<h3 id="7、创建自定义的收集器-Collector"><a href="#7、创建自定义的收集器-Collector" class="headerlink" title="7、创建自定义的收集器 Collector"></a>7、创建自定义的收集器 Collector</h3><p>通过任务收集器提供的API，你可以在调度器里面创建和插入你自己的任务源（task source）。</p>
<p>cron4j调度器支持注册一个或多个<code>it.sauronsoftware.cron4j.TaskCollector</code>实例，你只需要调用<code>addTaskCollector(TaskCollector)</code>方法即可。</p>
<p>被注册的收集器可以被调度器对象调用<code>getTaskCollectors</code>方法索引到，之前的收集器可以调用<code>removeTaskCollector(TaskCollector)</code>方法从调度器中移除。</p>
<p>收集器可以在任意的时间被添加（注册）、查询（索引）、移除，即使是在调度器正在运行的状态下也可以。</p>
<p>每一个被注册过的收集器每隔一分钟都会被调度器去索引一次，调度器会调用收集器的<code>collector.getTasks()</code>方法。这个实现方法会返回一个<code>it.sauronsoftware,cron4j.TaskTable</code>实例，我们把这个实例称为任务表。</p>
<p>每一个任务表都包含了本收集器中所有的任务实例和该任务对应的调度模式实例。一旦该表被检索到，调度器就会检查被记录（原文使用reported）到的对象，然后执行所有使用‘scheduling pattern（调度模式）’来正确声明的、匹配当前系统时间的任务。</p>
<p>一个自定义的收集器可以配合外部任务源来约束调度器的行为，比如数据库、或者xml文件，这些同样支持在运行时更改和管理的源。</p>
<p><br></p>
<blockquote>
<p><em>译者文外补充：在<a href="#1collector-exp">下面</a>贴出译者实践演示代码，代码中演示了如何向一个调度器中注册、移除收集器，并且查看收集器的信息，同时在代码运行的过程中也演示了调度器每分钟索引收集器task的过程。</em></p>
<p><em>读者可以自行研究代码，花上4分钟体会一下。读者也可以从<code>TaskController</code>类的源码开始阅读下去，特别是<code>TaskTable</code>类中，仅仅只有几个简单易懂的API，了解过后你会发现这套流程其实并不难走通。</em></p>
</blockquote>
<p><a href="#index">回到索引</a></p>
<hr>
<p><span id="8创建自定义的监听器来监控你的调度器"></span></p>
<h3 id="8、创建自定义的监听器来监控你的调度器"><a href="#8、创建自定义的监听器来监控你的调度器" class="headerlink" title="8、创建自定义的监听器来监控你的调度器"></a>8、创建自定义的监听器来监控你的调度器</h3><p>cron4j提供了<code>it.sauronsoftware,cron4j.SchedulerListener</code>类，我们可以使用它的API来对调度器的事件进行监听。</p>
<p>调度监听器需要实现以下方法：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">taskLaunching(TaskExecutor)</div><div class="line">这个方法会在每个调度任务启动的时候被调度器调用</div><div class="line"></div><div class="line">taskSucceeded(TaskExecutor)</div><div class="line">这个方法会在每个任务成功地执行完毕的时候被调用</div><div class="line"></div><div class="line">taskFailed(TaskExecutor, Throwable)</div><div class="line">这个方法会在每个任务执行失败的时候被调用</div></pre></td></tr></table></figure></p>
<p>你可以从“<a href="#9执行器-executors">执行器 Executors</a>”小节中了解到更多的信息。</p>
<p>当你准备好一个调度监听器（SchedulerListener）的时候，你可以调用调度器的<code>addSchedulerListener(SchedulerListener)</code>方法将这个监听器注册到该调度器中。</p>
<p>你可以调用<code>removeSchedulerListener(SchedulerListener)</code>方法移除已经注册的监听器。</p>
<p>你可以调用<code>getSchedulerListeners()</code>方法获取到所有在本调度器注册的监听器。</p>
<p>调度监听器可以在任何时候被注册或者移除，即使是在调度器正在运行的时候。</p>
<p><a href="#index">回到索引</a></p>
<hr>
<p><span id="9执行器-executors"></span></p>
<h3 id="9、执行器-Executors"><a href="#9、执行器-Executors" class="headerlink" title="9、执行器 Executors"></a>9、执行器 Executors</h3><p>每当调度器被开启并且运行的时候，你可以通过方法索引到它的执行器。</p>
<p>执行器非常像一个线程，它是被调度器用来执行任务的利器。</p>
<p>你可以调用<code>Scheduler.getExecutingTasks()</code>方法来获得当前正在运行的执行器。</p>
<p>你也可以通过调度监听器来获得执行器（见“<a href="#8创建自定义的监听器来监控你的调度器">8、创建自定义的监听器来监控你的调度器</a>”小节）。</p>
<p>每一个执行器，代表着一个<code>it.sauronsoftware.cron4j.TaskExecutor</code>实例，执行不同的任务。</p>
<p>执行器中的任务可以被<code>TaskExecutor.getTask()</code>方法索引到。</p>
<p>执行器的状态可以通过<code>TaskExecutor.isAlive()</code>方法来检查：如果当前执行器正在运行则返回true。</p>
<p>如果执行器处于运行状态，那么一直到整个执行过程完毕之前，你都可以通过<code>join()</code>方法来暂停当前线程</p>
<ul>
<li><p>关于status tracking 状态跟踪</p>
<blockquote>
<p>你可以调用<code>TaskExecutor.supportsStatusTracking()</code>方法，如果它会返回一个true值，则表示当前正在执行的任务支持状态跟踪功能。这意味着任务可以和它的执行者进行沟通，当然只能传递字符串。当前的状态信息可以被执行器调用<code>TaskExecutor.getStatusMessage()</code>方法索引到。</p>
</blockquote>
</li>
<li><p>关于completeness tracking 完成度跟踪</p>
<blockquote>
<p>你可以调用<code>supportsCompletenessTracking()</code>方法来检查当前正在执行的任务是否支持完成度跟踪。如果支持，那么你可以调用<code>TaskExecutor.getCompleteness()</code>方法来索引任务完成度值，它会返回一个0（未开始）~1（已完成）之间的数值。</p>
</blockquote>
</li>
<li><p>关于 paused 暂停</p>
<blockquote>
<p>你可以调用<code>TaskExecutor.canBePaused()</code>方法来检查当前正在执行的任务是否支持运行时暂停执行的功能。如果支持，那么你可以你可以调用<code>TaskExecutor.paused()</code>方法来暂停当前任务的执行。你还可以调用<code>TaskExecutor.isPaused()</code>方法来检查当前任务是否处于暂停状态。被暂停的执行器可以通过<code>TaskExecutor.resume()</code>方法来恢复运行。</p>
</blockquote>
</li>
<li><p>关于 stopped 终止</p>
<blockquote>
<p>你可以调用<code>TaskExecutor.canBeStopped()</code>方法来检查当前正在执行的任务是否支持运行时终止执行的功能。如果支持，那么你可以你可以调用<code>TaskExecutor.stop()</code>方法来终止当前任务的执行。同样你可以调用<code>TaskExecutor.isStopped()</code>方法去检查当前执行器是否被终止。</p>
<p><strong>注意：被终止过的执行器不能再恢复运行。</strong></p>
</blockquote>
</li>
<li><p>其他API</p>
<blockquote>
<p><code>TaskExecutor.getStartTime()</code></p>
<p>它会返回一个时间标记（time stamp）来告诉你执行器启动的时间，或者一个小于0的值来表示执行器还没开始启动。</p>
</blockquote>
</li>
</ul>
<blockquote>
<p><code>TaskExecutor.getScheduler()</code></p>
<p>它会返回当前执行器所属的调度器对象。</p>
<p><code>TaskExecutor.getGuid()</code></p>
<p>它会返回当前执行器所唯一对应的纯文本的GUID值。</p>
</blockquote>
<ul>
<li>关于事件驱动</li>
</ul>
<blockquote>
<p>执行器同时也提供了它自己的事件驱动API，你可以通过<code>it.sauronsoftware.cron4j.TaskExecutorListener</code>类来访问它们。</p>
<p>你可以分别调用：</p>
<p><code>addTaskExecutorListener(TaskExecutorListener)</code></p>
<p><code>removeTaskExecutorListener(TaskExecutorListener)</code></p>
<p><code>getTaskExecutorListeners()</code></p>
<p>方法来注册、移除、索引到执行监听器。</p>
<p>一个执行监听器需要实现以下方法：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">&gt; executionPausing(TaskExecutor)</div><div class="line">&gt; 该方法会在执行器被请求暂停正在运行的任务时调用。传入的参数代表着被请求暂停任务执行的执行器对象。</div><div class="line">&gt;</div><div class="line">&gt; executionResuming(TaskExecutor)</div><div class="line">&gt; 该方法会在执行器被请求恢复正在被暂停的任务时调用。传入的参数代表着被请求恢复任务执行的执行器对象。</div><div class="line">&gt;</div><div class="line">&gt; executionStopping(TaskExecutor)</div><div class="line">&gt; 该方法会在执行器被请求终止任务执行时调用。传入的参数代表着被请求的执行器对象。</div><div class="line">&gt;</div><div class="line">&gt; executionTerminated(TaskExecutor, Throwable)</div><div class="line">&gt; 该方法会在执行器将任务执行完毕的时候被调用。传入的第一个参数代表着该执行器对象，第二个参数是可选项，代表着迫使执行器终止执行任务的异常，如果任务正确的执行成功的话，该对象值为null。</div><div class="line">&gt;</div><div class="line">&gt; statusMessageChanged(TaskExecutor, String)</div><div class="line">&gt; 该方法会在每次运行时任务的状态信息发生改变的时候调用。传入的第一个参数代表着该执行器对象，第二个参数则是新发布的任务状态信息。</div><div class="line">&gt;</div><div class="line">&gt; completenessValueChanged(TaskExecutor, double)</div><div class="line">&gt; 该方法会在每次运行时任务的完成度值发生改变的时候调用。传入的第一个参数代表着该执行器对象，第二个参数则是取值范围为0~1之间的新发布的完成度值。</div><div class="line">&gt;</div></pre></td></tr></table></figure></p>
</blockquote>
<p><br></p>
<blockquote>
<p><em>译者文外补充：正如官方文档所说的一样，执行器非常像一个线程，所以它提供的API也相对线程性细致和线程性复杂，这也是cron4j的唯一的重难点，使用的时候一定要考虑周全，同时还要分清楚调度器和执行器的关系，以及调度监控器和执行监控器的事件监听方法的调用时机。</em></p>
</blockquote>
<p><a href="#index">回到索引</a></p>
<hr>
<p><span id="10手动启动任务"></span></p>
<h3 id="10、手动启动任务"><a href="#10、手动启动任务" class="headerlink" title="10、手动启动任务"></a>10、手动启动任务</h3><p>如果调度器以及开启并且处于运行中，你是有可能手动启动一个任务的，你甚至可以不用安排调度模式。</p>
<p>你可以使用<code>Scheduler.launch(Task)</code>方法，任务就会立马被执行，这个方法会返回该任务的TaskExecutor（执行器）实例，你可以使用它来控制整个任务的执行过程。</p>
<p><a href="#index">回到索引</a></p>
<hr>
<p><span id="11在指定时区下运行"></span></p>
<h3 id="11、在指定时区下运行"><a href="#11、在指定时区下运行" class="headerlink" title="11、在指定时区下运行"></a>11、在指定时区下运行</h3><p>在默认的情况下，调度器会在系统默认的时区中运行。换句话说，一个“ 0 2 <em> </em> * ”的调度模式会根据系统时区在当地时间每天的2（am）时执行任务。</p>
<p>你可以为调度器设置不同于系统默认时区的时区作为它的工作时区。</p>
<p>调用<code>Scheduler.setTimeZone(TimeZone)</code>方法和<code>Scheduler.getTimeZone()</code>方法就可以控制这个属性。</p>
<p>一旦调度器的默认时区被改变，系统当前运行时会在解释调度模式的时候去区适应你所提供的时区。那么结果会在你指定的时区中按照你指定的调度模式去执行任务。假设有以下的情况：</p>
<p>系统时间：10：00<br>系统时区：GMT+1<br>调度器设置时区：GMT+3</p>
<p>调度器会把调度模式和系统时间进行比较，然后把GTM+1时区下的10:00转换到GTM+3，这意味着10：00变成了12：00，这个结果会被运用到调度器中去执行任务。所以，在给定的设置下，任务会在模式“ 0 12 <em> </em> <em> ”中执行，而不是模式“ 0 10 </em> <em> </em> ” 。</p>
<p><a href="#index">回到索引</a></p>
<hr>
<p><span id="12守护线程-daemon-threads"></span></p>
<h3 id="12、守护线程-Daemon-threads"><a href="#12、守护线程-Daemon-threads" class="headerlink" title="12、守护线程 Daemon threads"></a>12、守护线程 Daemon threads</h3><p>JVM只有在当前运行线程全部都是守护线程的时候才会退出，cron4j调度器可以被配置为只生产守护线程。为了控制这个特性，你需要调用<code>Scheduler.setDaemon(boolean)</code>方法，这个方法必须在调度器被开启之前调用，方法的默认值是false，你可以调用<code>Scheduler.isDaemon()</code>方法来检测当前调度器生成的线程是否是守护线程。</p>
<p><br></p>
<blockquote>
<p><em>译者文外补充：这小节的意思是，如果你启动了一个调度器，在它执行到特定状态的时候让它自己关闭（注意是关闭调度器）的话，在默认的情况下它是不会退出程序的，不信你可以写一个简单的demo来测试一下。</em></p>
</blockquote>
<p><a href="#index">回到索引</a></p>
<hr>
<p><span id="13预报器-predictor"></span></p>
<h3 id="13、预报器-Predictor"><a href="#13、预报器-Predictor" class="headerlink" title="13、预报器 Predictor"></a>13、预报器 Predictor</h3><p><code>it.sauronsoftware.cron4j.Predictor</code>类可以预测你的调度模式什么时候会被匹配到。</p>
<p>假如你想知道调度器在使用模式“ 0 3 jan-jun,sep-dec mon-fri ”的情况下什么时候会执行任务，你可以使用预报器对象去预测接下来n次任务的执行时间：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">String pattern = &quot;0 3 * jan-jun,sep-dec mon-fri&quot;;</div><div class="line">Predictor p = new Predictor(pattern);</div><div class="line">for (int i = 0; i &lt; n; i++) &#123;</div><div class="line">    System.out.println(p.nextMatchingDate());</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p><br></p>
<blockquote>
<p><em>译者文外补充：当n等于5的时候结果如下：</em><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">&gt; Fri Sep 01 03:00:00 CST 2017</div><div class="line">&gt; Mon Sep 04 03:00:00 CST 2017</div><div class="line">&gt; Tue Sep 05 03:00:00 CST 2017</div><div class="line">&gt; Wed Sep 06 03:00:00 CST 2017</div><div class="line">&gt; Thu Sep 07 03:00:00 CST 2017</div><div class="line">&gt;</div></pre></td></tr></table></figure></p>
</blockquote>
<p><a href="#index">回到索引</a></p>
<hr>
<p><span id="14cron解析器"></span></p>
<h3 id="14、Cron解析器"><a href="#14、Cron解析器" class="headerlink" title="14、Cron解析器"></a>14、Cron解析器</h3><p><code>it.sauronsoftware.cron4j.CronParser</code>类可以被用来解类crontab形式的文件以及字符流。</p>
<p>如果你想根据类crontab形式的文件去安排一系列的任务，你可以不需要使用Cron解析器，你只需要调用<code>Scheduler.scheduleFile(File)</code>方法把文件添加到调度器里面就可以了。</p>
<p>如果<code>Scheduler.scheduleFile(File)</code>方法还不能够满足你的需求的话，你可以考虑使用Cron解析器去安排任务。</p>
<p>举个栗子，如果你想从远程源获取任务安排表，可是远程源并不支持<code>java.io.File</code>对象去操作的话（比如远程服务器上的文档、数据库中的数据设置等等），这时候你可以自己实现<code>it.sauronsoftware.cron4j.TaskCollector</code>类，好让Cron解析器更方便的去解析任何类crontab内容。</p>
<p>你可以解析整个文件或者整个流，也可以只解析其中一句。</p>
<p>每一行可以是空行、注释、或者是可调度行。</p>
<p>没有任何字符或者仅仅包含空格符的行会被认为是空行。</p>
<p>第一个字符为非空格符而且是一个‘#’符的行会被认为是注释。</p>
<p>解析器会忽略空行和注释行。</p>
<p>任何其他类别的行都会被解析为可调度行。</p>
<p>一个有效的可调度行应该遵循以下结构（注意四个部分之间有空格）：</p>
<blockquote>
<p>scheduling-pattern [options] command [args]</p>
<p>调度模式 [选项] 命令 [提供的参数]</p>
</blockquote>
<p><strong>scheduling-pattern</strong>：必须是根据<code>it.sauronsoftware.cron4j.SchedulingPattern</code>类所给定义的有效的调度模式。</p>
<p><strong>options</strong>：是一个可选选项的列表，它告诉cron4j该什么样的环境来执行任务。稍后会作详细的说明。</p>
<p><strong>command</strong>：是有效的系统命令，比如一个可执行的调用。</p>
<p><strong>args</strong>：是提供给系统命令的参数列表。</p>
<p>在调度模式之后，其他的部分需要使用空格符或者双引号来界定。</p>
<p>使用双引号的好处是你可以使用以下转义字符：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">\&quot; - quotation mark</div><div class="line">\\ - back slash</div><div class="line">\/ - slash</div><div class="line">\b - back space</div><div class="line">\f - form feed</div><div class="line">\n - new line</div><div class="line">\r - carriage return</div><div class="line">\t - horizontal tab</div><div class="line">\ufour-hex-digits - the character at the given Unicode index</div></pre></td></tr></table></figure></p>
<p><br></p>
<p>对于<strong>options</strong>部分的子集可以包含一个或多个以下的对象：</p>
<blockquote>
<p>IN：一个文件路径，重定向命令的标准输入通道到指定的文件位置。</p>
<p>OUT：一个文件路径，重定向命令的标准输出通道到指定的文件位置。</p>
<p>ERR：一个文件路径，重定向命令的标准报错输出通道到指定的文件位置。</p>
<p>ENV：名值对（name=value），在命令作用域中定义环境变量。</p>
<p>DIR：一个目录位置，设置命令的工作目录，这要求你的JVM环境至少是1.3。</p>
</blockquote>
<p>你还可以安排一个在解析器的类加载器作用域内的Java类的方法调用。这个方法必须是静态方法并且它的参数列表只能是唯一的一个String数组，为了调用这个方法，你的调度行结构需要这么写：</p>
<blockquote>
<p>scheduling-pattern java:className#methodName [args]</p>
<p>方法名部分可以被省略，这时解析器会调用类中的main方法（如果存在的话）。</p>
</blockquote>
<p>你需要注意的是，静态方法会在和调度器一样的JVM环境中执行，并不会产生任何的外部程序！因此这时候<strong>options</strong>部分不可选！</p>
<p>非法的调度行将会被抛弃，不会阻断解析过程，但会在程序的标准错误输出通道中发送一条错误信息。</p>
<p>以下是一些合法的调度行栗子：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">0 5 * * * sol.exe</div><div class="line">0,30 * * * * OUT:C:\ping.txt ping 10.9.43.55</div><div class="line">0,30 4 * * * &quot;OUT:C:\Documents and Settings\Carlo\ping.txt&quot; ping 10.9.43.55</div><div class="line">0 3 * * * ENV:JAVA_HOME=C:\jdks\1.4.2_15 DIR:C:\myproject OUT:C:\myproject\build.log C:\myproject\build.bat &quot;Nightly Build&quot;</div><div class="line">0 4 * * * java:mypackage.MyClass#startApplication myOption1 myOption2</div></pre></td></tr></table></figure></p>
<p>把上述文档作txt保存之后，可以在程序中这样调用：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">public class Main &#123;</div><div class="line"></div><div class="line">    public static void main(String[] args) &#123;</div><div class="line">        // Declares the file.</div><div class="line">        File file = new File(&quot;cron4jtab.txt&quot;);</div><div class="line">        // Creates the scheduler.</div><div class="line">        Scheduler scheduler = new Scheduler();</div><div class="line">        // Schedules the file.</div><div class="line">        scheduler.scheduleFile(file);</div><div class="line">        // Starts the scheduler.</div><div class="line">        scheduler.start();</div><div class="line">        // Stays alive for five minutes.</div><div class="line">        try &#123;</div><div class="line">            Thread.sleep(5L * 60L * 1000L);</div><div class="line">        &#125; catch (InterruptedException e) &#123;</div><div class="line">            ;</div><div class="line">        &#125;</div><div class="line">        // Stops the scheduler.</div><div class="line">        scheduler.stop();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p><a href="#index">回到索引</a></p>
<hr>
<p>-<br><br><br><br><br><br><br><br></p>
<h1 id="部分实践演示代码"><a href="#部分实践演示代码" class="headerlink" title="部分实践演示代码"></a>部分实践演示代码</h1><p><span id="1collector-exp"></span></p>
<h3 id="1、Collector-exp"><a href="#1、Collector-exp" class="headerlink" title="1、Collector exp"></a>1、Collector exp</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div></pre></td><td class="code"><pre><div class="line">public class CollectorExp &#123;</div><div class="line"></div><div class="line">    public static void main(String[] args) &#123;</div><div class="line">        Scheduler scheduler = new Scheduler();</div><div class="line"></div><div class="line">        TaskCollector c1 = new TaskCollector() &#123;</div><div class="line">            @Override</div><div class="line">            public TaskTable getTasks() &#123;</div><div class="line">                System.out.println(&quot;过了一分钟 调度器又来索引我啦&quot;);</div><div class="line">                TaskTable taskTable = new TaskTable();</div><div class="line">                taskTable.add(new SchedulingPattern(&quot;* * * * *&quot;), new MyTask(&quot;one&quot;));</div><div class="line">                taskTable.add(new SchedulingPattern(&quot;*/2 * * * *&quot;), new MyTask(&quot;two&quot;));</div><div class="line">                return taskTable;</div><div class="line">            &#125;</div><div class="line">        &#125;;</div><div class="line"></div><div class="line">        TaskCollector c2 = () -&gt;&#123;</div><div class="line">            System.out.println(&quot;过了一分钟 调度器又来索引我啦&quot;);</div><div class="line">            TaskTable taskTable = new TaskTable();</div><div class="line">            taskTable.add(new SchedulingPattern(&quot;* * * * *&quot;), new MyTask(&quot;three&quot;));</div><div class="line">            taskTable.add(new SchedulingPattern(&quot;*/2 * * * *&quot;), new MyTask(&quot;four&quot;));</div><div class="line">            return taskTable;</div><div class="line">        &#125;;</div><div class="line"></div><div class="line">        scheduler.addTaskCollector(c1);</div><div class="line">        scheduler.addTaskCollector(c2);</div><div class="line"></div><div class="line">        showController(scheduler);</div><div class="line"></div><div class="line">        scheduler.start();</div><div class="line"></div><div class="line">        try &#123;</div><div class="line">            Thread.sleep(2000L * 60L);</div><div class="line">        &#125; catch (InterruptedException e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        System.out.println(&quot;两分钟到 移除c1&quot;);</div><div class="line">        scheduler.removeTaskCollector(c1);</div><div class="line">        showController(scheduler);</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    static void showController(Scheduler scheduler)&#123;</div><div class="line">        TaskCollector[] taskCollectors = scheduler.getTaskCollectors();</div><div class="line">        System.out.println(&quot;|----当前调度器中有&quot;+taskCollectors.length+&quot;个收集器&quot;);</div><div class="line">        for (int i = 0 ; i &lt; taskCollectors.length ; ++i)&#123;</div><div class="line">            System.out.println(&quot;|----|----当前显示第&quot;+(i+1)+&quot;个收集器的信息&quot;);</div><div class="line">            TaskCollector now = taskCollectors[i];</div><div class="line">            TaskTable tasks = now.getTasks();</div><div class="line">            System.out.println(&quot;|----|----|----当前收集器有&quot;+tasks.size()+&quot;个任务&quot;);</div><div class="line">            for (int j = 0 ; j &lt; tasks.size() ; ++j)&#123;</div><div class="line">                System.out.println(&quot;|----|----|----|----当前显示第&quot;+(j+1)+&quot;个任务信息&quot;);</div><div class="line">                System.out.println(&quot;|----|----|----|----Task:[&quot;+tasks.getTask(j)+&quot;] and scp:[&quot;+tasks.getSchedulingPattern(j)+&quot;]&quot;);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line">class MyTask extends Task&#123;</div><div class="line"></div><div class="line">    private String num;</div><div class="line"></div><div class="line">    MyTask(String num) &#123;</div><div class="line">        this.num = num;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public void execute(TaskExecutionContext taskExecutionContext) throws RuntimeException &#123;</div><div class="line">        LocalTime now = LocalTime.now();</div><div class="line">        System.out.println(&quot;This is Task &quot;+num+&quot; ! [ &quot; + now.getHour() + &quot; : &quot; + now.getMinute() + &quot; ]&quot;);</div><div class="line"></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><a href="#7创建自定义的收集器-collector">返回Collector小节</a></p>
<hr>
]]></content>
      
        <categories>
            
            <category> translation </category>
            
            <category> java_tools </category>
            
        </categories>
        
        
        <tags>
            
            <tag> cron4j </tag>
            
            <tag> translate </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Maven_setting.xml]]></title>
      <url>/post/dbdd348c.html</url>
      <content type="html"><![CDATA[<blockquote class="blockquote-center"><p>m2/conf/setting.xml的配置</p>
</blockquote>
<a id="more"></a>
<h3 id="如何修改默认本地仓库位置"><a href="#如何修改默认本地仓库位置" class="headerlink" title="如何修改默认本地仓库位置"></a>如何修改默认本地仓库位置</h3><p>在Maven\conf\目录下有setting文件 文件部分内容如下：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">settings</span> <span class="attr">xmlns</span>=<span class="string">"http://maven.apache.org/SETTINGS/1.0.0"</span></span></div><div class="line"><span class="tag">          <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></div><div class="line"><span class="tag">          <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://maven.apache.org/SETTINGS/1.0.0 http://maven.apache.org/xsd/settings-1.0.0.xsd"</span>&gt;</span></div><div class="line">  <span class="comment">&lt;!-- localRepository</span></div><div class="line"><span class="comment">   | The path to the local repository maven will use to store artifacts.</span></div><div class="line"><span class="comment">   |</span></div><div class="line"><span class="comment">   | Default: $&#123;user.home&#125;/.m2/repository</span></div><div class="line"><span class="comment">  &lt;localRepository&gt;/path/to/local/repo&lt;/localRepository&gt;</span></div><div class="line"><span class="comment">  --&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">localRepository</span>&gt;</span>/path/to/local/repo<span class="tag">&lt;/<span class="name">localRepository</span>&gt;</span></div><div class="line">  ...</div></pre></td></tr></table></figure></p>
<p>可以看到默认的仓库位置为：${user.home}/.m2/repository</p>
<p>我们可以使用标签<code>&lt;localRepository&gt;/path/to/local/repo&lt;/localRepository&gt;</code>去更改默认本地仓库位置</p>
<hr>
<h3 id="设置Maven创建工程的JDK版本"><a href="#设置Maven创建工程的JDK版本" class="headerlink" title="设置Maven创建工程的JDK版本"></a>设置Maven创建工程的JDK版本</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">profile</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">id</span>&gt;</span>jdk-1.8<span class="tag">&lt;/<span class="name">id</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">activation</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">activeByDefault</span>&gt;</span>true<span class="tag">&lt;/<span class="name">activeByDefault</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">jdk</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">jdk</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">activation</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">properties</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">maven.compiler.source</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">maven.compiler.source</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">maven.compiler.target</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">maven.compiler.target</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">maven.compiler.compilerVersion</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">maven.compiler.compilerVersion</span>&gt;</span></div><div class="line">   <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">profile</span>&gt;</span></div></pre></td></tr></table></figure>
<hr>
<h3 id="设置阿里云镜像"><a href="#设置阿里云镜像" class="headerlink" title="设置阿里云镜像"></a>设置阿里云镜像</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">mirrors</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">mirror</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">id</span>&gt;</span>nexus-aliyun<span class="tag">&lt;/<span class="name">id</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">mirrorOf</span>&gt;</span>*<span class="tag">&lt;/<span class="name">mirrorOf</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>Nexus aliyun<span class="tag">&lt;/<span class="name">name</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://maven.aliyun.com/nexus/content/groups/public/<span class="tag">&lt;/<span class="name">url</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">mirror</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">mirror</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">id</span>&gt;</span>nexus-tae<span class="tag">&lt;/<span class="name">id</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">mirrorOf</span>&gt;</span>*<span class="tag">&lt;/<span class="name">mirrorOf</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>Nexus tae<span class="tag">&lt;/<span class="name">name</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://mvnrepo.tae.taobao.com/content/groups/public/<span class="tag">&lt;/<span class="name">url</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">mirror</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">mirrors</span>&gt;</span></div></pre></td></tr></table></figure>
<hr>
]]></content>
      
        <categories>
            
            <category> note </category>
            
            <category> toolslearning </category>
            
            <category> maven2 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> maven </tag>
            
            <tag> mvn-pom </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Maven_Plugins]]></title>
      <url>/post/c1886b7b.html</url>
      <content type="html"><![CDATA[<blockquote class="blockquote-center"><p>一些m2常用的插件配置</p>
</blockquote>
<a id="more"></a>
<p><span id="插件"></span></p>
<h3 id="插件"><a href="#插件" class="headerlink" title="插件"></a>插件</h3><ul>
<li><a href="#maven-compiler-plugin">编译插件：maven-compiler-plugin</a></li>
<li><a href="#maven-surefire-plugin">测试插件：maven-surefire-plugin</a></li>
<li><a href="#maven-resources-plugin">资源插件：maven-resources-plugin</a></li>
<li><a href="#maven-dependency-plugin">依赖插件：maven-dependency-plugin</a></li>
<li><a href="#maven-help-plugin">帮助插件：maven-help-plugin</a></li>
<li><a href="#maven-jar-plugin">Jar插件：maven-jar-plugin</a></li>
<li><a href="#maven-war-plugin">War插件：maven-jar-plugin</a></li>
</ul>
<p><span id="maven-compiler-plugin"></span></p>
<h4 id="1、maven-compiler-plugin"><a href="#1、maven-compiler-plugin" class="headerlink" title="1、maven-compiler-plugin"></a>1、maven-compiler-plugin</h4><h5 id="1）基本编译规范"><a href="#1）基本编译规范" class="headerlink" title="1）基本编译规范"></a>1）基本编译规范</h5><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">properties</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">compileVersion</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">compileVersion</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">properties</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-compiler-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.6.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">encoding</span>&gt;</span>utf-8<span class="tag">&lt;/<span class="name">encoding</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">target</span>&gt;</span>$&#123;compileVersion&#125;<span class="tag">&lt;/<span class="name">target</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">source</span>&gt;</span>$&#123;compileVersion&#125;<span class="tag">&lt;/<span class="name">source</span>&gt;</span></div><div class="line">            <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></div></pre></td></tr></table></figure>
<p><strong>source：</strong> 源代码编译版本；</p>
<p><strong>target：</strong> 目标平台编译版本；</p>
<p><strong>encoding：</strong> 字符集编码；</p>
<hr>
<p><br><br><span id="maven-surefire-plugin"></span></p>
<h4 id="2、maven-surefire-plugin"><a href="#2、maven-surefire-plugin" class="headerlink" title="2、maven-surefire-plugin"></a>2、maven-surefire-plugin</h4><h5 id="1）忽略单元测试的错误"><a href="#1）忽略单元测试的错误" class="headerlink" title="1）忽略单元测试的错误"></a>1）忽略单元测试的错误</h5><blockquote>
<p>通常，你会开发一个带有很多失败单元测试的系统。</p>
<p>如果你正在实践测试驱动开发 (TDD)，你可能会使用测试失败来衡量你离项目完成有多远。</p>
<p>如果你有失败的单元 测试，但你仍然希望产生构建输出，你就必须告诉 Maven 让它忽略测试失败。</p>
<p>当 Maven 遇到一个测试失败，它默认的行为是停止当前的构建。</p>
<p>如果你希望继续构 建项目，即使 Surefire 插件遇到了失败的单元测试，你就需要设置 Surefire 的 testFailureIgnore 这个配置属性为 true。</p>
</blockquote>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">project</span>&gt;</span></div><div class="line">    [...]</div><div class="line">    <span class="tag">&lt;<span class="name">build</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-surefire-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></div><div class="line">                    <span class="tag">&lt;<span class="name">testFailureIgnore</span>&gt;</span>true<span class="tag">&lt;/<span class="name">testFailureIgnore</span>&gt;</span></div><div class="line">                <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></div><div class="line">            <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">build</span>&gt;</span></div><div class="line">    [...]</div><div class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></div></pre></td></tr></table></figure>
<h5 id="2）打包时跳过单元测试"><a href="#2）打包时跳过单元测试" class="headerlink" title="2）打包时跳过单元测试"></a>2）打包时跳过单元测试</h5><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">project</span>&gt;</span></div><div class="line">    [...]</div><div class="line">    <span class="tag">&lt;<span class="name">build</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-surefire-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></div><div class="line">                    <span class="tag">&lt;<span class="name">skip</span>&gt;</span>true<span class="tag">&lt;/<span class="name">skip</span>&gt;</span></div><div class="line">                <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></div><div class="line">            <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">build</span>&gt;</span></div><div class="line">    [...]</div><div class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></div></pre></td></tr></table></figure>
<hr>
<p><br><br><span id="maven-resources-plugin"></span></p>
<h4 id="3、maven-resources-plugin"><a href="#3、maven-resources-plugin" class="headerlink" title="3、maven-resources-plugin"></a>3、maven-resources-plugin</h4><h5 id="1）设置资源文件的编码方式"><a href="#1）设置资源文件的编码方式" class="headerlink" title="1）设置资源文件的编码方式"></a>1）设置资源文件的编码方式</h5><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">properties</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.build.sourceEncoding</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">properties</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-resources-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.0.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">executions</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">execution</span>&gt;</span></div><div class="line">                    <span class="tag">&lt;<span class="name">phase</span>&gt;</span>compile<span class="tag">&lt;/<span class="name">phase</span>&gt;</span></div><div class="line">                <span class="tag">&lt;/<span class="name">execution</span>&gt;</span></div><div class="line">            <span class="tag">&lt;/<span class="name">executions</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">encoding</span>&gt;</span>$&#123;project.build.sourceEncoding&#125;<span class="tag">&lt;/<span class="name">encoding</span>&gt;</span></div><div class="line">            <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></div></pre></td></tr></table></figure>
<h5 id="2）复制资源文件到指定目录"><a href="#2）复制资源文件到指定目录" class="headerlink" title="2）复制资源文件到指定目录"></a>2）复制资源文件到指定目录</h5><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">plugin</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-resources-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.0.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">executions</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">execution</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">id</span>&gt;</span>copy-resources<span class="tag">&lt;/<span class="name">id</span>&gt;</span></div><div class="line">            <span class="comment">&lt;!-- 在package阶段执行 --&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">phase</span>&gt;</span>package<span class="tag">&lt;/<span class="name">phase</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">goals</span>&gt;</span></div><div class="line">                <span class="comment">&lt;!-- 执行的目标是这个 --&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">goal</span>&gt;</span>copy-resources<span class="tag">&lt;/<span class="name">goal</span>&gt;</span></div><div class="line">            <span class="tag">&lt;/<span class="name">goals</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">encoding</span>&gt;</span>$&#123;project.build.sourceEncoding&#125;<span class="tag">&lt;/<span class="name">encoding</span>&gt;</span></div><div class="line">                <span class="comment">&lt;!-- 输出的目录位置 --&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">outputDirectory</span>&gt;</span></div><div class="line">                    $&#123;project.build.directory&#125;/conf</div><div class="line">                <span class="tag">&lt;/<span class="name">outputDirectory</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">resources</span>&gt;</span></div><div class="line">                    <span class="tag">&lt;<span class="name">resource</span>&gt;</span></div><div class="line">                        <span class="comment">&lt;!-- 这一个id要负责复制src/main/resources/conf/目录中的文件 --&gt;</span></div><div class="line">                        <span class="tag">&lt;<span class="name">directory</span>&gt;</span>src/main/resources/conf/<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></div><div class="line">                        <span class="tag">&lt;<span class="name">filtering</span>&gt;</span>true<span class="tag">&lt;/<span class="name">filtering</span>&gt;</span></div><div class="line">                    <span class="tag">&lt;/<span class="name">resource</span>&gt;</span></div><div class="line">                <span class="tag">&lt;/<span class="name">resources</span>&gt;</span></div><div class="line">            <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">execution</span>&gt;</span></div><div class="line"></div><div class="line">        <span class="tag">&lt;<span class="name">execution</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">id</span>&gt;</span>copy-command<span class="tag">&lt;/<span class="name">id</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">phase</span>&gt;</span>package<span class="tag">&lt;/<span class="name">phase</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">goals</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">goal</span>&gt;</span>copy-resources<span class="tag">&lt;/<span class="name">goal</span>&gt;</span></div><div class="line">            <span class="tag">&lt;/<span class="name">goals</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">encoding</span>&gt;</span>$&#123;project.build.sourceEncoding&#125;<span class="tag">&lt;/<span class="name">encoding</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">outputDirectory</span>&gt;</span></div><div class="line">                    $&#123;project.build.directory&#125;/bin</div><div class="line">                <span class="tag">&lt;/<span class="name">outputDirectory</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">resources</span>&gt;</span></div><div class="line">                    <span class="tag">&lt;<span class="name">resource</span>&gt;</span></div><div class="line">                        <span class="tag">&lt;<span class="name">directory</span>&gt;</span>src/main/resources/bin/<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></div><div class="line">                        <span class="tag">&lt;<span class="name">filtering</span>&gt;</span>true<span class="tag">&lt;/<span class="name">filtering</span>&gt;</span></div><div class="line">                    <span class="tag">&lt;/<span class="name">resource</span>&gt;</span></div><div class="line">                <span class="tag">&lt;/<span class="name">resources</span>&gt;</span></div><div class="line">            <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">execution</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">executions</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></div></pre></td></tr></table></figure>
<hr>
<p><br><br><span id="maven-dependency-plugin"></span></p>
<h4 id="4、maven-dependency-plugin"><a href="#4、maven-dependency-plugin" class="headerlink" title="4、maven-dependency-plugin"></a>4、maven-dependency-plugin</h4><h5 id="1）把项目所需依赖导到指定目录下"><a href="#1）把项目所需依赖导到指定目录下" class="headerlink" title="1）把项目所需依赖导到指定目录下"></a>1）把项目所需依赖导到指定目录下</h5><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">plugin</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-dependency-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">outputDirectory</span>&gt;</span>$&#123;project.build.directory&#125;/lib<span class="tag">&lt;/<span class="name">outputDirectory</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">excludeTransitive</span>&gt;</span>false<span class="tag">&lt;/<span class="name">excludeTransitive</span>&gt;</span> <span class="comment">&lt;!-- 表示是否不包含间接依赖的包 --&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">stripVersion</span>&gt;</span>false<span class="tag">&lt;/<span class="name">stripVersion</span>&gt;</span> <span class="comment">&lt;!-- 去除版本信息 --&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">executions</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">execution</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">id</span>&gt;</span>copy-dependencies<span class="tag">&lt;/<span class="name">id</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">phase</span>&gt;</span>package<span class="tag">&lt;/<span class="name">phase</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">goals</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">goal</span>&gt;</span>copy-dependencies<span class="tag">&lt;/<span class="name">goal</span>&gt;</span></div><div class="line">            <span class="tag">&lt;/<span class="name">goals</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></div><div class="line">                <span class="comment">&lt;!-- 拷贝项目依赖包到lib/目录下 --&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">outputDirectory</span>&gt;</span>$&#123;project.build.directory&#125;/lib<span class="tag">&lt;/<span class="name">outputDirectory</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">excludeTransitive</span>&gt;</span>false<span class="tag">&lt;/<span class="name">excludeTransitive</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">stripVersion</span>&gt;</span>false<span class="tag">&lt;/<span class="name">stripVersion</span>&gt;</span></div><div class="line">            <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">execution</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">executions</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></div></pre></td></tr></table></figure>
<p>project.build.directory为内置变量</p>
<hr>
<p><br><br><span id="maven-help-plugin"></span></p>
<h4 id="5、maven-help-plugin"><a href="#5、maven-help-plugin" class="headerlink" title="5、maven-help-plugin"></a>5、maven-help-plugin</h4><p>maven-help-plugin是一个小巧的辅助工具。</p>
<p>最简单的help:system可以打印所有可用的环境变量和Java系统属性。</p>
<p>help:effective-pom和help:effective-settings最为有用，它们分别打印项目的有效POM和有效settings，有效POM是指合并了所有父POM（包括Super POM）后的XML，</p>
<p>当你不确定POM的某些信息从何而来时，就可以查看有效POM。</p>
<p>有效settings同理，特别是当你发现自己配置的settings.xml没有生效时，就可以用help:effective-settings来验证。</p>
<p>此外，maven-help-plugin的describe目标可以帮助你描述任何一个Maven插件的信息，还有all-profiles目标和active-profiles目标帮助查看项目的Profile。<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">plugin</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-help-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></div></pre></td></tr></table></figure></p>
<hr>
<p><br><br><span id="maven-jar-plugin"></span></p>
<h4 id="6、maven-jar-plugin"><a href="#6、maven-jar-plugin" class="headerlink" title="6、maven-jar-plugin"></a>6、maven-jar-plugin</h4><h5 id="1）打包一个可执行的jar文件"><a href="#1）打包一个可执行的jar文件" class="headerlink" title="1）打包一个可执行的jar文件"></a>1）打包一个可执行的jar文件</h5><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">plugin</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-jar-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.0.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">archive</span>&gt;</span></div><div class="line">            <span class="comment">&lt;!-- 生成MANIFEST.MF的设置 --&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">manifest</span>&gt;</span></div><div class="line">                <span class="comment">&lt;!-- 为依赖包添加路径, 这些路径会写在MANIFEST文件的Class-Path下 --&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">addClasspath</span>&gt;</span>true<span class="tag">&lt;/<span class="name">addClasspath</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">classpathPrefix</span>&gt;</span>lib/<span class="tag">&lt;/<span class="name">classpathPrefix</span>&gt;</span></div><div class="line">                <span class="comment">&lt;!-- jar启动入口类--&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">mainClass</span>&gt;</span>Hello<span class="tag">&lt;/<span class="name">mainClass</span>&gt;</span></div><div class="line">            <span class="tag">&lt;/<span class="name">manifest</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">manifestEntries</span>&gt;</span></div><div class="line">                <span class="comment">&lt;!-- 在Class-Path下添加配置文件的路径 --&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">Class-Path</span>&gt;</span>conf/<span class="tag">&lt;/<span class="name">Class-Path</span>&gt;</span></div><div class="line">            <span class="tag">&lt;/<span class="name">manifestEntries</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">archive</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">includes</span>&gt;</span></div><div class="line">            <span class="comment">&lt;!-- 打jar包时，只打包class文件 --&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.class<span class="tag">&lt;/<span class="name">include</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">includes</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></div></pre></td></tr></table></figure>
<hr>
<p><br><br><span id="maven-war-plugin"></span></p>
<h4 id="7、maven-war-plugin"><a href="#7、maven-war-plugin" class="headerlink" title="7、maven-war-plugin"></a>7、maven-war-plugin</h4><h5 id="1）打包可执行war文件"><a href="#1）打包可执行war文件" class="headerlink" title="1）打包可执行war文件"></a>1）打包可执行war文件</h5><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">plugin</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-war-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">warName</span>&gt;</span>$&#123;project.artifactId&#125;<span class="tag">&lt;/<span class="name">warName</span>&gt;</span></div><div class="line">        <span class="comment">&lt;!--</span></div><div class="line"><span class="comment">            这两个配置可以在打包的时候把Jar依赖和conf文件中的内容排除掉</span></div><div class="line"><span class="comment">            配合着把配置文件打包在外面</span></div><div class="line"><span class="comment">        --&gt;</span></div><div class="line">        <span class="comment">&lt;!--&lt;packagingExcludes&gt;WEB-INF/lib/*.jar&lt;/packagingExcludes&gt;--&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">packagingExcludes</span>&gt;</span>**/conf/*.*<span class="tag">&lt;/<span class="name">packagingExcludes</span>&gt;</span></div><div class="line"></div><div class="line">        <span class="tag">&lt;<span class="name">archive</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">manifest</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">mainClass</span>&gt;</span>lab.Start2<span class="tag">&lt;/<span class="name">mainClass</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">addClasspath</span>&gt;</span>true<span class="tag">&lt;/<span class="name">addClasspath</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">classpathPrefix</span>&gt;</span>WEB-INF/lib<span class="tag">&lt;/<span class="name">classpathPrefix</span>&gt;</span></div><div class="line">            <span class="tag">&lt;/<span class="name">manifest</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">manifestEntries</span>&gt;</span></div><div class="line">                <span class="comment">&lt;!-- 在Class-Path下添加配置文件的路径 --&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">Class-Path</span>&gt;</span>conf/<span class="tag">&lt;/<span class="name">Class-Path</span>&gt;</span></div><div class="line">            <span class="tag">&lt;/<span class="name">manifestEntries</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">archive</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></div></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> note </category>
            
            <category> toolslearning </category>
            
            <category> maven2 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> maven </tag>
            
            <tag> mvn-pom </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Log4j2_Lookups]]></title>
      <url>/post/244cf139.html</url>
      <content type="html"><![CDATA[<blockquote class="blockquote-center"><p>Lookups：让你的配置更灵活</p>
</blockquote>
<a id="more"></a>
<h3 id="Lookups"><a href="#Lookups" class="headerlink" title="Lookups"></a>Lookups</h3><p>Lookups使得我们可以自由地在Log4j2配置文件中添加某些值（使用占位符设置变量），它们是一种特殊类型的插件，并且实现了StrLookup接口。</p>
<h4 id="ContextMap-Lookup"><a href="#ContextMap-Lookup" class="headerlink" title="ContextMap Lookup"></a>ContextMap Lookup</h4><p>ContextMapLookup使得我们可以在Log4j2的ThreadContext Map中保存值，并在Log4j2的配置文件中可以取得值。</p>
<p><strong>引用方法：<code>$${ctx:KEY}</code></strong></p>
<p>代码中写：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ThreadContext.put(<span class="string">"aaa"</span>, <span class="string">"bbb"</span>);</div></pre></td></tr></table></figure></p>
<p>配置示例：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">PatternLayout</span> <span class="attr">pattern</span>=<span class="string">"$$&#123;ctx:aaa&#125; %d&#123;HH:mm:ss.SSS&#125; [%t] %-5level - %msg%n"</span> /&gt;</span></div></pre></td></tr></table></figure></p>
<p>输出：<br><figure class="highlight console"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">bbb  log4j2test.Main 19 15:20:07.859 [main] INFO  - info level</div></pre></td></tr></table></figure></p>
<h4 id="Date-Lookup"><a href="#Date-Lookup" class="headerlink" title="Date Lookup"></a>Date Lookup</h4><p>DateLookUp跟其它lookups不太一样，它并非根据一个关键字变量去获取一个值的，但它可以利用关键字来指定一种格式，且为SimpleDateFormat合法的格式。以下示例表示当前日志事件产生的时间：</p>
<p><strong>引用方法：<code>$${date:SimpleDateFormat}</code></strong></p>
<p>配置示例：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">PatternLayout</span> <span class="attr">pattern</span>=<span class="string">"$$&#123;ctx:aaa&#125; $$&#123;date:HH:mm:ss.SSS&#125; [%t] %-5level - %msg%n"</span> /&gt;</span></div></pre></td></tr></table></figure></p>
<h4 id="Environment-Lookup"><a href="#Environment-Lookup" class="headerlink" title="Environment Lookup"></a>Environment Lookup</h4><p>输出系统中的环境变量，无论是全局变量文件<code>/etc/profile</code>中的，还是运行时定义的变量。</p>
<p><strong>引用方法：<code>$${env:KEY}</code></strong></p>
<p>配置示例：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">PatternLayout</span> <span class="attr">pattern</span>=<span class="string">"$$&#123;env:USER&#125; [%t] %-5level - %msg%n"</span> /&gt;</span></div></pre></td></tr></table></figure></p>
<h4 id="Java-Lookup"><a href="#Java-Lookup" class="headerlink" title="Java Lookup"></a>Java Lookup</h4><p>输出一些JVM信息：</p>
<ul>
<li>version：Java版本</li>
<li>rentime：Java运行时版本信息</li>
<li>vm：虚拟机版本</li>
<li>os：操作系统版本</li>
<li>locale：一些硬件信息如：default locale: en_US, platform encoding: Cp1252</li>
<li>hw：一些硬件信息如：processors: 4, architecture: amd64-64, instruction sets: amd64</li>
</ul>
<p><strong>引用方法：<code>$${java:KEY}</code></strong></p>
<p>配置示例：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">PatternLayout</span> <span class="attr">header</span>=<span class="string">"$&#123;java:runtime&#125; - $&#123;java:vm&#125; - $&#123;java:os&#125;"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">Pattern</span>&gt;</span>%d %m%n<span class="tag">&lt;/<span class="name">Pattern</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">PatternLayout</span>&gt;</span></div></pre></td></tr></table></figure></p>
<h4 id="System-Properties-Lookup"><a href="#System-Properties-Lookup" class="headerlink" title="System Properties Lookup"></a>System Properties Lookup</h4><p>获取系统属性的值</p>
<p><strong>引用方法：<code>$${sys:KEY}</code></strong></p>
<p>配置示例：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">Appenders</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">File</span> <span class="attr">name</span>=<span class="string">"ApplicationLog"</span> <span class="attr">fileName</span>=<span class="string">"$&#123;sys:logPath&#125;/app.log"</span>/&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">Appenders</span>&gt;</span></div></pre></td></tr></table></figure></p>
]]></content>
      
        <categories>
            
            <category> note </category>
            
            <category> toolslearning </category>
            
            <category> log4j2 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> log4j2 </tag>
            
            <tag> learning </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Log4j2_Filters]]></title>
      <url>/post/37afb181.html</url>
      <content type="html"><![CDATA[<blockquote class="blockquote-center"><p>Filters：过滤你的日志信息</p>
</blockquote>
<a id="more"></a>
<h3 id="重要概念"><a href="#重要概念" class="headerlink" title="重要概念"></a>重要概念</h3><h4 id="枚举值"><a href="#枚举值" class="headerlink" title="枚举值"></a>枚举值</h4><p>Filters可以用来对日志事件进行过滤，过滤器会返回一个枚举类型的值，枚举值包含三个：ACCEPT、DENY和NEUTRAL。</p>
<ul>
<li><p>ACCEPT：时会跳过这一级别的其它过滤器,进入下个级别的过滤器；</p>
</li>
<li><p>DENY：时会直接终止事件的传递；</p>
</li>
<li><p>NEUTRAL：时会继续交给同级别的其它过滤器处理（若已经是同级别最后一个过滤器，那么将日志事件传递给下个级别）。</p>
</li>
</ul>
<h4 id="过滤位置"><a href="#过滤位置" class="headerlink" title="过滤位置"></a>过滤位置</h4><p>可以在以下四个位置配置过滤器：</p>
<ul>
<li><p>上下文范围有效的过滤器直接在<configuration>标签里配置，被这种过滤器拒绝的日志事件不再会向后传递。一旦日志事件被一个上下文范围有效的过滤器判定为ACCEPT时，其它上下文有效的过滤器将不会对日志事件进行过滤，日志事件将会继续呗Logger和Appender的过滤器过滤。</configuration></p>
</li>
<li><p>Logger过滤器配置在一个特定的Logger上面。这些过滤器会在上下文范围有效的过滤器之后发挥作用，被这些过滤器拒绝的日志事件将会被丢弃，也不管additivity的配置如何，不会将日志传递给父亲Logger。</p>
</li>
<li><p>Appender过滤器用于决定一个指定的Appender是否应该处理和发布日志事件。</p>
</li>
<li><p>Appender引用过滤器用于决定Logger是否应该将日志事件路由到一个Appender。</p>
</li>
</ul>
<h3 id="我常用的过滤器"><a href="#我常用的过滤器" class="headerlink" title="我常用的过滤器"></a>我常用的过滤器</h3><h4 id="CompositeFilter"><a href="#CompositeFilter" class="headerlink" title="CompositeFilter"></a>CompositeFilter</h4><p>组合过滤器，使用一个<code>Filters</code>元素组合多个Filter，这个元素没有其他参数。</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">Filters</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">MarkerFilter</span> <span class="attr">marker</span>=<span class="string">"EVENT"</span> <span class="attr">onMatch</span>=<span class="string">"ACCEPT"</span> <span class="attr">onMismatch</span>=<span class="string">"NEUTRAL"</span>/&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">DynamicThresholdFilter</span> <span class="attr">key</span>=<span class="string">"loginId"</span> <span class="attr">defaultThreshold</span>=<span class="string">"ERROR"</span></span></div><div class="line"><span class="tag">                          <span class="attr">onMatch</span>=<span class="string">"ACCEPT"</span> <span class="attr">onMismatch</span>=<span class="string">"NEUTRAL"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">KeyValuePair</span> <span class="attr">key</span>=<span class="string">"User1"</span> <span class="attr">value</span>=<span class="string">"DEBUG"</span>/&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">DynamicThresholdFilter</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">Filters</span>&gt;</span></div></pre></td></tr></table></figure>
<h4 id="ThresholdFilter"><a href="#ThresholdFilter" class="headerlink" title="ThresholdFilter"></a>ThresholdFilter</h4><p>根据输出的日志级别过滤日志</p>
<h5 id="Level"><a href="#Level" class="headerlink" title="Level"></a>Level</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">FATAL &lt; ERROR &lt; WARN &lt; INFO &lt; DEBUG &lt; TRACE</div></pre></td></tr></table></figure>
<h5 id="Filter-Rule"><a href="#Filter-Rule" class="headerlink" title="Filter Rule"></a>Filter Rule</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span> (输出日志级别 &lt;= 过滤器配置级别) <span class="keyword">return</span> <span class="string">'onMatch'</span></div><div class="line"><span class="keyword">else</span> <span class="keyword">return</span> <span class="string">'onMismatch'</span>;</div></pre></td></tr></table></figure>
<h5 id="Parameter"><a href="#Parameter" class="headerlink" title="Parameter"></a>Parameter</h5><ul>
<li>level：string：需要匹配的日志级别</li>
<li>onMatch：string：指定匹配到的LogEvents的过滤策略</li>
<li>onMismatch：string：指定不匹配的LogEvents的过滤策略</li>
</ul>
<p>比如，如果ThresholdFilter配置的级别为ERROR，日志事件级别为DEBUG，那么onMismatch值就会返回。只有ERROR或级别更低的FATAL级别到日志事件的到来，才会返回onMatch。</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">File</span> <span class="attr">name</span>=<span class="string">"infoFile"</span> <span class="attr">fileName</span>=<span class="string">"logs/info/info.log"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">Filters</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">ThresholdFilter</span> <span class="attr">level</span>=<span class="string">"warn"</span> <span class="attr">onMatch</span>=<span class="string">"DENY"</span> <span class="attr">onMismatch</span>=<span class="string">"NEUTRAL"</span>/&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">ThresholdFilter</span> <span class="attr">level</span>=<span class="string">"info"</span> <span class="attr">onMatch</span>=<span class="string">"ACCEPT"</span> <span class="attr">onMismatch</span>=<span class="string">"DENY"</span>/&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">Filters</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">PatternLayout</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">Pattern</span>&gt;</span>%d %p %c&#123;1.&#125; [%t] %m%n<span class="tag">&lt;/<span class="name">Pattern</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">PatternLayout</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">File</span>&gt;</span></div></pre></td></tr></table></figure>
<p>上面这个例子就把仅为INFO级别的日志信息输出到特定的地方</p>
<p>我们看第一个过滤器：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">ThresholdFilter</span> <span class="attr">level</span>=<span class="string">"warn"</span> <span class="attr">onMatch</span>=<span class="string">"DENY"</span> <span class="attr">onMismatch</span>=<span class="string">"NEUTRAL"</span>/&gt;</span></div></pre></td></tr></table></figure></p>
<p>warn即warn以下（fatal、error）的级别被拒绝了，warn以上的级别被传递到下一个过滤器；</p>
<p>第二个过滤器：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">ThresholdFilter</span> <span class="attr">level</span>=<span class="string">"info"</span> <span class="attr">onMatch</span>=<span class="string">"ACCEPT"</span> <span class="attr">onMismatch</span>=<span class="string">"DENY"</span>/&gt;</span></div></pre></td></tr></table></figure></p>
<p>info即info以下（warn、fatal、error）的级别被接受了，info以上的级别被拒绝；</p>
<h4 id="RegexFilter"><a href="#RegexFilter" class="headerlink" title="RegexFilter"></a>RegexFilter</h4><p>根据日志内容来使用正则表达式去过滤日志信息</p>
<h5 id="Parameter-1"><a href="#Parameter-1" class="headerlink" title="Parameter"></a>Parameter</h5><ul>
<li>regex：stirng：正则表达式</li>
<li>onMatch：string：指定匹配到的LogEvents的过滤策略</li>
<li>onMismatch：string：指定不匹配的LogEvents的过滤策略</li>
</ul>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">RegexFilter</span> <span class="attr">regex</span>=<span class="string">".* test .*"</span> <span class="attr">onMatch</span>=<span class="string">"ACCEPT"</span> <span class="attr">onMismatch</span>=<span class="string">"DENY"</span>/&gt;</span></div></pre></td></tr></table></figure>
<p>上面这个例子只使出含有test字样的日志。</p>
]]></content>
      
        <categories>
            
            <category> note </category>
            
            <category> toolslearning </category>
            
            <category> log4j2 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> log4j2 </tag>
            
            <tag> learning </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Log4j2_Layouts]]></title>
      <url>/post/1ae8a038.html</url>
      <content type="html"><![CDATA[<blockquote class="blockquote-center"><p>Layout：定制你的输出模式</p>
</blockquote>
<a id="more"></a>
<p><a href="https://logging.apache.org/log4j/2.x/manual/layouts.html" target="_blank" rel="external">Layouts</a>里提到了许多种Layout方式，我最常用的是PatternLayout。</p>
<h3 id="Pattern-Layout-模式输出"><a href="#Pattern-Layout-模式输出" class="headerlink" title="Pattern Layout 模式输出"></a>Pattern Layout 模式输出</h3><p>是一种通过pattern字符串来配置的灵活的输出方式。</p>
<p>属性：</p>
<ul>
<li>charset：string：所使用的字符集</li>
<li>pattern：string：定制你的输出模式</li>
<li>header：string：这是一个可选项，它会包含在每个log文件的开头</li>
<li>footer：string：这是一个可选项….</li>
</ul>
<h4 id="Patterns"><a href="#Patterns" class="headerlink" title="Patterns"></a>Patterns</h4><h5 id="Logger-Name模式"><a href="#Logger-Name模式" class="headerlink" title="Logger Name模式"></a>Logger Name模式</h5><p><code>c{precision}</code><br><code>logger{precision}</code></p>
<p>用例：</p>
<p><img src="http://image.youyinnn.cn/0c7bcdb7e018e47007e1f94164a2b626.png" alt="class pattern"></p>
<h4 id="Class模式"><a href="#Class模式" class="headerlink" title="Class模式"></a>Class模式</h4><p><code>C{precision}</code><br><code>class{precision}</code></p>
<h5 id="Date模式"><a href="#Date模式" class="headerlink" title="Date模式"></a>Date模式</h5><p><code>d{pattern} &amp; date{pattern}</code></p>
<p>用例：</p>
<p><img src="http://image.youyinnn.cn/782b42701d03650c07a92766558d225f.png" alt="date pattern"></p>
<h4 id="Line模式"><a href="#Line模式" class="headerlink" title="Line模式"></a>Line模式</h4><p><code>%L</code>：输出报出issue的logger的行数<br><code>%l</code>：输出更详细的行数信息</p>
<h4 id="Message信息模式"><a href="#Message信息模式" class="headerlink" title="Message信息模式"></a>Message信息模式</h4><p><code>%msg</code>：输出logger的信息</p>
<h4 id="Method模式"><a href="#Method模式" class="headerlink" title="Method模式"></a>Method模式</h4><p><code>%M</code>：输出logger所在的方法</p>
<h4 id="n模式"><a href="#n模式" class="headerlink" title="n模式"></a>n模式</h4><p><code>%n</code>：输出系统支持的行分隔符，比如<code>\n</code>或者<code>\r\n</code></p>
<h4 id="N模式"><a href="#N模式" class="headerlink" title="N模式"></a>N模式</h4><p><code>%N</code>：输出调用Log事件时的:<code>System.nanoTime()</code></p>
<h4 id="pid模式"><a href="#pid模式" class="headerlink" title="pid模式"></a>pid模式</h4><p><code>%pid</code>：输出程序的pid</p>
<h4 id="level模式"><a href="#level模式" class="headerlink" title="level模式"></a>level模式</h4><p><code>p|level{level=label, level=label, ...}</code>：指定每个级别的别名<br><code>p|level{lowerCase=true|false}</code>：指定级别是否小写</p>
<h4 id="Thread模式"><a href="#Thread模式" class="headerlink" title="Thread模式"></a>Thread模式</h4><p><code>%t</code>:  输出调用Log事件时所处的线程名<br><code>%tid</code>:  输出调用Log事件时所处的线程id</p>
<h4 id="Context模式"><a href="#Context模式" class="headerlink" title="Context模式"></a>Context模式</h4><p><code>%X{key[,key2...]}</code>: 输出存在ThreadContext里的键所对应的值</p>
]]></content>
      
        <categories>
            
            <category> note </category>
            
            <category> toolslearning </category>
            
            <category> log4j2 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> log4j2 </tag>
            
            <tag> learning </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[我认为的规范的git commit msg[置顶]]]></title>
      <url>/post/236e6e34.html</url>
      <content type="html"><![CDATA[<blockquote class="blockquote-center"><p>其实必要的时候使用<code>git commit -m &quot;xxxxx&quot;</code>也木有关系 但你也别每条都这样写</p>
</blockquote>
<a id="more"></a>
<p>好久没更博了，最近一直在疯狂的推<a href="https://github.com/DomBro96/dataimport" target="_blank" rel="external">数据快速导入</a>的项目，推的使用在使用git做一些fix和optimize等工作，经常会进行版本回退和msg查阅，看看我昨天晚上到底干了些什么。</p>
<p>然后发现我特么看不懂前一天晚上写的什么鬼msg，这时候才觉得，有一个良好的commit习惯是多么重要！</p>
<p>之前有转过一篇：<a href="https://youyinnn.github.io/post/ce7091ac.html" target="_blank" rel="external">5 Useful Tips For A Better Commit Message</a></p>
<p>按照这篇文章，我自己给我自己的commit msg做个规范。</p>
<h3 id="第一行"><a href="#第一行" class="headerlink" title="第一行"></a>第一行</h3><p>使用规定的标识符表明当次commit一共做了哪些工作,不同的提示符使用空格<code> </code>分隔，提示符规定如下（持续补充）：</p>
<p>我把一次工作的标识符分“动作”、“对象”两部分描述：</p>
<ul>
<li><p>可能的动作前缀有：</p>
<ul>
<li><p>基本操作前缀：</p>
<blockquote>
<p><code>ADD</code>：Add 增加<br><code>DEL</code>：Delete 删除<br><code>IMP</code>：Improve 改进<br><code>MG</code>：Merge 合并<br><code>MOD</code>：Modifie 修改<br><code>CPL</code>：Complete 完成</p>
</blockquote>
</li>
<li><p>其他操作前缀：</p>
<blockquote>
<p><code>RN</code>：Rename 重命名<br><code>MOV</code>：Move 移动<br><code>CRE</code>：Create 创造<br><code>AMD</code>：Amend 修正<br><code>SUP</code>：Supplement 补充<br><code>RM</code>：Remove 移除</p>
</blockquote>
</li>
<li><p>独立动作：</p>
<blockquote>
<p><code>INIT</code>：Initialized Repository 初始化仓库<br><code>RELEASE</code>：Release a Version 发布一个版本<br><code>TODO</code>：Todo List 增加TODO<br><code>TOFUNC</code>：提取重复代码为方法增加代码重用<br><code>FIXBUG</code>：Fix Bug 修复BUG<br><code>RPBUG</code>：Report Bug 通报BUG<br><code>SAYING</code>：Saying 有话要说</p>
</blockquote>
</li>
</ul>
</li>
<li><p>可能的对象有：</p>
<ul>
<li><p>业务之内的对象：</p>
<blockquote>
<p><code>FEAT</code>：Feature 某个功能<br><code>MODU</code>：Module 某个模块<br><code>FUNC</code>：Function 某个函数<br><code>CODE</code>：Code 某段代码<br><code>CONT</code>：Content 某种内容<br><code>ANNO</code>：Annotation 某些注释</p>
</blockquote>
</li>
<li><p>业务之外的对象：</p>
<blockquote>
<p><code>CONF</code>：Config 配置文件<br><code>DEP</code>：Dependences 依赖配置<br><code>POM</code>：POM文件<br><code>README</code>：Readme文件<br><code>IGNORE</code>：gitignore文件<br><code>FILE</code>：File<br><code>STRUCT</code>：Project Structure 项目结构</p>
</blockquote>
</li>
</ul>
</li>
</ul>
<hr>
<p>所以我commit的第一行会是这样的：<br><figure class="highlight vim"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">CPLFEAT RPBUG TOFUNC FIXBUG MODIGNORE</div></pre></td></tr></table></figure></p>
<p>这表示我当次commit完成了：</p>
<blockquote>
<p><em>我在完成一个<code>新功能</code>的同时还<code>发现了一个BUG</code>顺便<code>封装了之前写的重复的代码为函数</code>提高了代码重用率接着<code>修复了之前发现的一些BUG</code>最后还<code>修改了一下Ingore文件</code>！</em></p>
</blockquote>
<h3 id="第二行"><a href="#第二行" class="headerlink" title="第二行"></a>第二行</h3><p>得是一个空行</p>
<h3 id="第三行"><a href="#第三行" class="headerlink" title="第三行"></a>第三行</h3><p>开始按照第一行的写下的工作标识符顺序分条进行简要说明，一般来说，简单而清晰表达即可。但是有以下规定：</p>
<ul>
<li>以工作标识符加冒号占一行。</li>
<li>如有当前工作有多个要点，必须有序得分条说明。</li>
<li>每条说明文字必须要指明改动源与改动目的。</li>
<li>当commit多个文件时，涉及代码改动的每条说明文字的最后一个字符必须以一个tab键进行制表空格；然后写上<code>//fileName.fileSuffix</code>来表明当前这条改动的工作是在哪个文件上进行的；如有必要，可在文件名后面加上<code>(12-67)</code>表明改动的行段；如涉及多个文件，则文件之间以空格分隔。</li>
<li>每个工作说明完之后必须空一行，最后一个工作除外。</li>
<li>全英文标点符号，即使有中文说明；说明行末不加任何标点符号，即使是英文句号。</li>
<li>FIX后面必须加上对应<code>RPBUG</code>的版本号（如果是以前的commit中report的BUG的话，如果是当次commit发现的BUG可以不用写版本号，并且可以不写<code>RPBUG</code>标识符），然后再简单说明FIX了什么BUG，最后明如何FIX即可。</li>
<li>如果是一些可以忽略说明的工作，则可以直接在标识符后面加上<code>*</code>，表示忽略说明（如<code>MODIGNORE</code>标识符）。</li>
</ul>
<p>比如：<br><figure class="highlight vim"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">FEATCPL:</div><div class="line"><span class="number">1</span>.初步完成了用户登陆功能 //LoginService.java</div><div class="line"><span class="number">2</span>.初步完成了用户注册功能 //SignupService.java</div></pre></td></tr></table></figure></p>
<hr>
<p>以上基本可以清晰表达commit的内容了，下面是一个完整的示例：</p>
<figure class="highlight vim"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">CPLFEAT RPBUG TOFUNC FIXBUG MODIGNORE</div><div class="line"></div><div class="line">CPLFEAT:</div><div class="line"><span class="number">1</span>.初步完成了用户登陆功能 //LoginService.java</div><div class="line"><span class="number">2</span>.初步完成了用户注册功能 //SignupService.java</div><div class="line"></div><div class="line">REBUG:</div><div class="line"><span class="number">1</span>.登陆免验证时,在获取session变量时抛空指针异常  //LoginFilter.java(<span class="number">39</span>)</div><div class="line"></div><div class="line">TOFUNC:</div><div class="line"><span class="number">1</span>.用户名非法判断抽象成userNameRegExp()方法  //LoginFilter.java(<span class="number">46</span>-<span class="number">68</span>) LoginService.java(<span class="number">35</span>-<span class="number">57</span>)</div><div class="line"></div><div class="line">FIXBUG：</div><div class="line"><span class="number">1.59</span>ad23do,表单重复提交,增加了session验证来防止表单重复提交 //BaseService.java</div><div class="line"></div><div class="line">MODIGNORE:*</div></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> thinking </category>
            
        </categories>
        
        
        <tags>
            
            <tag> tips </tag>
            
            <tag> github </tag>
            
            <tag> git </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Electron_打包你的HelloWorld为exe]]></title>
      <url>/post/e9787e5f.html</url>
      <content type="html"><![CDATA[<blockquote class="blockquote-center"><p>EXE什么的，看着就忍不住要双击它！</p>
</blockquote>
<a id="more"></a>
<h3 id="安装准备工具"><a href="#安装准备工具" class="headerlink" title="安装准备工具"></a>安装准备工具</h3><hr>
<p>首先介绍一下Electron打包应用的方式：</p>
<ul>
<li><p>打包成asar分发；这种方式弊端很多而且不好操作，<a href="https://electronjs.org/docs/tutorial/application-packaging" target="_blank" rel="external">详情见</a>。</p>
</li>
<li><p>重构官网提供的二进制release，这种方式也比较麻烦。</p>
</li>
<li><p>通过打包工具：</p>
<ul>
<li><a href="https://github.com/electron-userland/electron-forge" target="_blank" rel="external">electron-forge</a></li>
<li><a href="https://github.com/electron-userland/electron-builder" target="_blank" rel="external">electron-builder</a></li>
<li><a href="https://github.com/electron-userland/electron-packager" target="_blank" rel="external">electron-packager</a></li>
</ul>
</li>
<li><p>重编译源码二进制文件…</p>
</li>
</ul>
<p>这里我们选择傻瓜式的使用打包工具来生成包，其中前两种工具比较复杂，所以我选择地三种：<a href="https://github.com/electron-userland/electron-packager" target="_blank" rel="external">electron-packager</a></p>
<p>根据项目readme的说明，首先得安装electron-packager的模块：</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm insatll electron-packager -g</div></pre></td></tr></table></figure>
<p>对还是全局安装 不要怂。</p>
<h3 id="使用工具"><a href="#使用工具" class="headerlink" title="使用工具"></a>使用工具</h3><hr>
<p>要打包你的项目，你只需要运行下面格式的命令：<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">electron-packager &lt;sourcedir&gt; &lt;appname&gt; --platform=&lt;platform&gt; --arch=&lt;arch&gt; [optional flags...]</div></pre></td></tr></table></figure></p>
<p>里面的参数含义我们可以通过<a href="https://github.com/electron-userland/electron-packager/blob/master/usage.txt" target="_blank" rel="external">txt</a>进行简单的参考，或者在<a href="https://github.com/electron-userland/electron-packager/blob/master/docs/api.md" target="_blank" rel="external">md</a>进行深入研究。</p>
<p>推荐是看md的比较清晰一点</p>
<p>在上篇中，我们构造的helloworld的目录结构为：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">your-app/</div><div class="line">├── package.json</div><div class="line">├── main.js</div><div class="line">└── index.html</div></pre></td></tr></table></figure></p>
<p>在我们的演示中，我们运行的是这样的命令：<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">electron-packager . helloworldappname --out outputdir --electronVersion 1.7.9</div></pre></td></tr></table></figure></p>
<p>我们在项目目录根目录下运行了这个命令，所以第一个<code>.</code>代表的<code>&lt;sourcedir&gt;</code>是本目录，然后我们指定了<code>&lt;appname&gt;</code>为<code>helloworldappname</code>，然后我们指定了<code>--out</code>表示打包输出的目录，最后指定了我们使用的electron的版本号。</p>
<p>我没有指定<code>--platform</code>和<code>--arch</code>是因为这俩在默认的情况下是选取本机参数，比如我是win32x64。</p>
<p>但是每次打包都要写这巨长的命令，确实有点麻烦，我们可以使用npm的<code>run-script</code>功能去快速的执行写好的命令：</p>
<p>npm<code>run-script</code>是默认运行当前目录下<code>package.json</code>文件中script定义好的命令，具体的应用自己去学npm相关知识，我在项目的<code>package.json</code>文件中写好：<br><figure class="highlight json"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">  <span class="attr">"name"</span>: <span class="string">"helloworld"</span>,</div><div class="line">  <span class="attr">"version"</span>: <span class="string">"0.1.0"</span>,</div><div class="line">  <span class="attr">"main"</span>: <span class="string">"main.js"</span>,</div><div class="line">  <span class="attr">"scripts"</span>:&#123;</div><div class="line">    <span class="attr">"start"</span> : <span class="string">"electron ."</span>,</div><div class="line">    <span class="attr">"pk"</span>: <span class="string">"electron-packager . helloworldappname --out=outputdir --electronVersion=1.7.9"</span></div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>然后在根目录下运行命令：<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm run-script pk</div></pre></td></tr></table></figure></p>
<p>结果如下：<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line">youyinnn@DESKTOP-7KE7UCG MINGW64 /d/Users/bigyellow/electron/helloworld</div><div class="line"><span class="meta">$</span><span class="bash"> ll</span></div><div class="line">total 6</div><div class="line">-rw-r--r-- 1 youyinnn 197609  391 11月 22 22:00 index.html</div><div class="line">-rw-r--r-- 1 youyinnn 197609 1750 11月 22 22:00 main.js</div><div class="line">-rw-r--r-- 1 youyinnn 197609  211 11月 23 16:04 package.json</div><div class="line"></div><div class="line">youyinnn@DESKTOP-7KE7UCG MINGW64 /d/Users/bigyellow/electron/helloworld</div><div class="line"><span class="meta">$</span><span class="bash"> npm run-script pk</span></div><div class="line"></div><div class="line"><span class="meta">&gt;</span><span class="bash"> helloworld@0.1.0 pk D:\Users\bigyellow\electron\helloworld</span></div><div class="line"><span class="meta">&gt;</span><span class="bash"> electron-packager . helloworldappname --out=outputdir --electronVersion=1.7.9</span></div><div class="line"></div><div class="line">Packaging app for platform win32 x64 using electron v1.7.9</div><div class="line">Wrote new app to outputdir\helloworldappname-win32-x64</div><div class="line"></div><div class="line">youyinnn@DESKTOP-7KE7UCG MINGW64 /d/Users/bigyellow/electron/helloworld</div><div class="line"><span class="meta">$</span><span class="bash"> ll</span></div><div class="line">total 6</div><div class="line">-rw-r--r-- 1 youyinnn 197609  391 11月 22 22:00 index.html</div><div class="line">-rw-r--r-- 1 youyinnn 197609 1750 11月 22 22:00 main.js</div><div class="line">drwxr-xr-x 1 youyinnn 197609    0 11月 23 16:05 outputdir/</div><div class="line">-rw-r--r-- 1 youyinnn 197609  211 11月 23 16:04 package.json</div><div class="line"></div><div class="line">youyinnn@DESKTOP-7KE7UCG MINGW64 /d/Users/bigyellow/electron/helloworld</div><div class="line"><span class="meta">$</span><span class="bash"></span></div></pre></td></tr></table></figure></p>
<p>然后项目目录下会生成：<br><img src="http://image.youyinnn.cn/ba4fa76eb64909e4d4959799cf130547.png" alt="electronpk"></p>
<p>运行exe：<br><img src="http://image.youyinnn.cn/6420ae86e552fa8e6e1b0f7282f28ca4.png" alt="runexe"></p>
<hr>
<p>至此我们的HelloWorld的打包就完成了，可以发现虽然我们只是一个简单的html，但是整个包的大小却有131M，这是因为它还包含了chrome微引擎和其他的环境文件。</p>
<p><em>参考：<a href="https://electronjs.org/docs/tutorial/application-distribution" target="_blank" rel="external">https://electronjs.org/docs/tutorial/application-distribution</a></em><br><em>参考：<a href="https://github.com/electron-userland/electron-packager/blob/master/docs/api.md" target="_blank" rel="external">https://github.com/electron-userland/electron-packager/blob/master/docs/api.md</a></em><br><em>参考：<a href="http://blog.csdn.net/a1170201028/article/details/59108126" target="_blank" rel="external">http://blog.csdn.net/a1170201028/article/details/59108126</a></em></p>
]]></content>
      
        <categories>
            
            <category> note </category>
            
            <category> electron </category>
            
        </categories>
        
        
        <tags>
            
            <tag> electron </tag>
            
            <tag> helloworld </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Electron_一个HelloWorld]]></title>
      <url>/post/99e8346.html</url>
      <content type="html"><![CDATA[<blockquote class="blockquote-center"><p>惊！仅用前端技术就可以打造跨平台桌面应用！</p>
</blockquote>
<a id="more"></a>
<h3 id="快速入门"><a href="#快速入门" class="headerlink" title="快速入门"></a>快速入门</h3><hr>
<p>简单介绍一下什么是Electron：</p>
<blockquote>
<p>如果你只会前端技术，如果你想打造一个桌面应用，如果你不想学C#、Swing之类的技术，那么Electron绝对是你的不二之选。</p>
<p>它的本质就是提供一个轻巧的chrome内核（其实也有131M），把你的项目包在里面运行，等于是你项目的专属浏览器！</p>
<p>为什么想要使用这门技术，首先非常有趣，其次我只是个半吊子的前端选手，写项目完全不存在浏览器兼容性考虑这回事（我觉得兼容考虑就是前端开发届的一大毒瘤之一），我写的项目全部基于Chrome的V8，IE什么的傻逼浏览器我是不会去管的。因此你如果想要使用我的项目，要么使用Chrome，要么使用我项目打包成的桌面应用咯- -</p>
</blockquote>
<p>然后这篇基本就算官网<a href="https://electronjs.org/docs/tutorial/quick-start" target="_blank" rel="external">快速入门</a>的照搬</p>
<p>我开始上的是中文网，它的快速入门文档我觉得还是有点对菜鸟不友好，整个文档，居然没教怎么安装！</p>
<p>它只说是npm安装，但是没说具体安装哪一个！！这太不友好了！</p>
<p>关键Electron中文网并没有原官网的<code>博客</code>模块！！百度一下之后找到<a href="https://electronjs.org/blog/npm-install-electron" target="_blank" rel="external">此文</a>，里面提到怎么安装electron。</p>
<p>在这里提醒一下：</p>
<p><strong>千万不要</strong>使用Electron中文网：<a href="https://electron.org.cn/" target="_blank" rel="external">https://electron.org.cn/</a></p>
<p><strong>千万要</strong>使用原官网：<a href="https://electronjs.org/" target="_blank" rel="external">https://electronjs.org/</a></p>
<p>原官网也支持中文！中文网的内容有缺失！</p>
<p>所以我们可以正式开始了！</p>
<h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><hr>
<p>贴一个Electron的github项目地址：<a href="https://github.com/electron/electron" target="_blank" rel="external">https://github.com/electron/electron</a> ，里面有安装说明。</p>
<p>我觉得玩什么东西，安装才是第一步！</p>
<blockquote>
<p>环境准备：node.js以及npm是必须的，git就不用说了。</p>
</blockquote>
<p>然后以下命令进行全局安装（就全局，不要怂）：</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install electron --save-dev -g</div></pre></td></tr></table></figure>
<h3 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h3><hr>
<h4 id="主进程"><a href="#主进程" class="headerlink" title="主进程"></a>主进程</h4><blockquote>
<p>在 <code>Electron</code> 里，运行 <code>package.json</code> 里 <code>main</code> 脚本的进程被称为主进程。在主进程运行的脚本可以以创建 web 页面的形式展示 GUI。</p>
</blockquote>
<h4 id="渲染进程"><a href="#渲染进程" class="headerlink" title="渲染进程"></a>渲染进程</h4><blockquote>
<p>由于 <code>Electron</code> 使用 <code>Chromium</code> 来展示页面，所以 <code>Chromium</code> 的多进程结构也被充分利用。每个 <code>Electron</code> 的页面都在运行着自己的进程，这样的进程我们称之为渲染进程。</p>
<p>在一般浏览器中，网页通常会在沙盒环境下运行，并且不允许访问原生资源。然而，<code>Electron</code> 用户拥有在网页中调用 <code>Node.js</code> 的 <code>APIs</code> 的能力，可以与底层操作系统直接交互。</p>
</blockquote>
<h4 id="主进程与渲染进程的区别"><a href="#主进程与渲染进程的区别" class="headerlink" title="主进程与渲染进程的区别"></a>主进程与渲染进程的区别</h4><blockquote>
<p>主进程使用 <code>BrowserWindow</code> 实例创建页面。每个 <code>BrowserWindow</code> 实例都在自己的渲染进程里运行页面。当一个 <code>BrowserWindow</code> 实例被销毁后，相应的渲染进程也会被终止。</p>
<p>主进程管理所有页面和与之对应的渲染进程。每个渲染进程都是相互独立的，并且只关心他们自己的页面。</p>
<p>由于在页面里管理原生 <code>GUI</code> 资源是非常危险而且容易造成资源泄露，所以在页面调用 <code>GUI</code> 相关的 <code>APIs</code> 是不被允许的。如果你想在网页里使用 <code>GUI</code> 操作，其对应的渲染进程必须与主进程进行通讯，请求主进程进行相关的 <code>GUI</code> 操作。</p>
<p>在 <code>Electron</code>，我们提供几种方法用于主进程和渲染进程之间的通讯。像 <code>ipcRenderer</code> 和 <code>ipcMain</code> 模块用于发送消息， <code>remote</code> 模块用于 <code>RPC</code> 方式通讯。这些内容都可以在一个 FAQ 中查看 <a href="https://electron.org.cn/doc/faq.html#how-to-share-data-between-web-pages" target="_blank" rel="external">how to share data between web pages</a>。</p>
</blockquote>
<h3 id="HelloWorld"><a href="#HelloWorld" class="headerlink" title="HelloWorld"></a>HelloWorld</h3><hr>
<p>大体上，一个<code>Electron</code>应用的目录结构如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">your-app/</div><div class="line">├── package.json</div><div class="line">├── main.js</div><div class="line">└── index.html</div></pre></td></tr></table></figure></p>
<p><code>package.json</code>的格式和Node完全一致，而且被main字段声明的脚本文件是你的应用的启动脚本，它运行在主进程上。你应用里的<code>package.json</code>看起来应该：<br><figure class="highlight json"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">  <span class="attr">"name"</span>    : <span class="string">"your-app"</span>,</div><div class="line">  <span class="attr">"version"</span> : <span class="string">"0.1.0"</span>,</div><div class="line">  <span class="attr">"main"</span>    : <span class="string">"main.js"</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p><strong>注意：如果 main 字段没有在 package.json 声明，Electron会优先加载 index.js。</strong></p>
<p><code>main.js</code> 应该用于创建窗口和处理系统事件，一个典型的例子如下：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> &#123;app, BrowserWindow&#125; = <span class="built_in">require</span>(<span class="string">'electron'</span>)</div><div class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>)</div><div class="line"><span class="keyword">const</span> url = <span class="built_in">require</span>(<span class="string">'url'</span>)</div><div class="line"></div><div class="line"><span class="comment">// 保持一个对于 window 对象的全局引用，如果你不这样做，</span></div><div class="line"><span class="comment">// 当 JavaScript 对象被垃圾回收， window 会被自动地关闭</span></div><div class="line"><span class="keyword">let</span> win</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">createWindow</span> (<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="comment">// 创建浏览器窗口。</span></div><div class="line">  win = <span class="keyword">new</span> BrowserWindow(&#123;<span class="attr">width</span>: <span class="number">800</span>, <span class="attr">height</span>: <span class="number">600</span>&#125;)</div><div class="line"></div><div class="line">  <span class="comment">// 加载应用的 index.html。</span></div><div class="line">  win.loadURL(url.format(&#123;</div><div class="line">    pathname: path.join(__dirname, <span class="string">'index.html'</span>),</div><div class="line">    protocol: <span class="string">'file:'</span>,</div><div class="line">    slashes: <span class="literal">true</span></div><div class="line">  &#125;))</div><div class="line"></div><div class="line">  <span class="comment">// 打开开发者工具。</span></div><div class="line">  win.webContents.openDevTools()</div><div class="line"></div><div class="line">  <span class="comment">// 当 window 被关闭，这个事件会被触发。</span></div><div class="line">  win.on(<span class="string">'closed'</span>, () =&gt; &#123;</div><div class="line">    <span class="comment">// 取消引用 window 对象，如果你的应用支持多窗口的话，</span></div><div class="line">    <span class="comment">// 通常会把多个 window 对象存放在一个数组里面，</span></div><div class="line">    <span class="comment">// 与此同时，你应该删除相应的元素。</span></div><div class="line">    win = <span class="literal">null</span></div><div class="line">  &#125;)</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// Electron 会在初始化后并准备</span></div><div class="line"><span class="comment">// 创建浏览器窗口时，调用这个函数。</span></div><div class="line"><span class="comment">// 部分 API 在 ready 事件触发后才能使用。</span></div><div class="line">app.on(<span class="string">'ready'</span>, createWindow)</div><div class="line"></div><div class="line"><span class="comment">// 当全部窗口关闭时退出。</span></div><div class="line">app.on(<span class="string">'window-all-closed'</span>, () =&gt; &#123;</div><div class="line">  <span class="comment">// 在 macOS 上，除非用户用 Cmd + Q 确定地退出，</span></div><div class="line">  <span class="comment">// 否则绝大部分应用及其菜单栏会保持激活。</span></div><div class="line">  <span class="keyword">if</span> (process.platform !== <span class="string">'darwin'</span>) &#123;</div><div class="line">    app.quit()</div><div class="line">  &#125;</div><div class="line">&#125;)</div><div class="line"></div><div class="line">app.on(<span class="string">'activate'</span>, () =&gt; &#123;</div><div class="line">  <span class="comment">// 在这文件，你可以续写应用剩下主进程代码。</span></div><div class="line">  <span class="comment">// 也可以拆分成几个文件，然后用 require 导入。</span></div><div class="line">  <span class="keyword">if</span> (win === <span class="literal">null</span>) &#123;</div><div class="line">    createWindow()</div><div class="line">  &#125;</div><div class="line">&#125;)</div><div class="line"></div><div class="line"><span class="comment">// 在这文件，你可以续写应用剩下主进程代码。</span></div><div class="line"><span class="comment">// 也可以拆分成几个文件，然后用 require 导入。</span></div></pre></td></tr></table></figure></p>
<p>最后，你想展示的 <code>index.html</code>：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Hello World!<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Hello World!<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></div><div class="line">    We are using node <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"><span class="built_in">document</span>.write(process.versions.node)</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span>,</div><div class="line">    Chrome <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"><span class="built_in">document</span>.write(process.versions.chrome)</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span>,</div><div class="line">    and Electron <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"><span class="built_in">document</span>.write(process.versions.electron)</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span>.</div><div class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure></p>
<h3 id="Run-HelloWorld"><a href="#Run-HelloWorld" class="headerlink" title="Run HelloWorld"></a>Run HelloWorld</h3><hr>
<p>一旦你创建了最初的 <code>main.js</code>， <code>index.html</code> 和<code>package.json</code> 这几个文件，你可能会想尝试在本地运行并测试，看看是不是和期望的那样正常运行。</p>
<p>安装文档说明，运行electron应用的方式有两种：</p>
<ul>
<li>npm安装electron模块 使用模块运行</li>
<li>直接使用二进制文件运行</li>
</ul>
<p>如果你没有nodejs环境，你可以考虑使用二进制文件运行应用。</p>
<p>使用模块去运行electron应用的命令是这样的：</p>
<p><em>electron 是一个 npm 模块，包含所使用的 Electron 预编译版本。 如果你已经用 npm 全局安装了它，你只需要按照如下方式直接运行你的应用：</em></p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">electron .</div></pre></td></tr></table></figure>
<p>下面是我自己的演示：</p>
<ul>
<li><p>目录结构：<br><img src="http://image.youyinnn.cn/302c77ea7393fa19e487b69fc98ec917.png" alt="electron1"></p>
</li>
<li><p>运行：<br><img src="http://image.youyinnn.cn/e003ac2bb2e4383b892641cba60ba100.png" alt="electron2"></p>
</li>
<li><p>界面：<br><img src="http://image.youyinnn.cn/7617fb5337cfd6d0e19a74b1a7968cc9.png" alt="electron3"></p>
</li>
</ul>
<hr>
<p>然后官网里还给了一个quickstar项目，那个项目没必要跑了，内容基本和上面的HelloWorld是一样的。</p>
<p>这样Electron的HelloWorld的体验已经完成了！前端变桌面应用的感觉巨奇妙！超级期待后面的学习！</p>
]]></content>
      
        <categories>
            
            <category> note </category>
            
            <category> electron </category>
            
        </categories>
        
        
        <tags>
            
            <tag> electron </tag>
            
            <tag> helloworld </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Log4j2_Appenders]]></title>
      <url>/post/7e4ab26f.html</url>
      <content type="html"><![CDATA[<blockquote class="blockquote-center"><p>上篇介绍了使用Log4j2之前的准备工作和简单介绍了一个HelloWorld</p>
<p>现在我们来了解配置中的第一个关键配置：Appenders</p>
</blockquote>
<a id="more"></a>
<p>官方文档给出的可用的Appender非常多：有Async（异步输出）、Console（控制台输出）、File（文件输出）、甚至还有JDBC和HTTP等24种输出源方式，然而我日常使用的就几个：Console、RollingFile；一个作为本地host调试的时候log，一个作为远程主机调试的时候写log。其他的我就不仔细去研究了。</p>
<hr>
<h3 id="ConsoleAppender"><a href="#ConsoleAppender" class="headerlink" title="ConsoleAppender"></a>ConsoleAppender</h3><p><code>ConsoleAppender</code>，使用的是<code>System.out</code>或者<code>System.err</code>作为输出源，把log打印在控制台上，默认的情况下使用的是<code>System.out</code>。</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">Console</span> <span class="attr">name</span>=<span class="string">"Console"</span> <span class="attr">target</span>=<span class="string">"SYSTEM_OUT"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">PatternLayout</span> <span class="attr">pattern</span>=<span class="string">"%d&#123;HH:mm:ss.SSS&#125; [%t] %-5level %logger&#123;36&#125; - %msg%n"</span>/&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">Console</span>&gt;</span></div></pre></td></tr></table></figure>
<h4 id="常用属性"><a href="#常用属性" class="headerlink" title="常用属性"></a>常用属性</h4><ul>
<li>name ：string：appender的名字</li>
<li>target：string：指定输出对象：可选<code>SYSTEM_OUT</code>或<code>SYSTEM_ERR</code>，默认是前者。</li>
</ul>
<hr>
<h3 id="FileAppender"><a href="#FileAppender" class="headerlink" title="FileAppender"></a>FileAppender</h3><p>FileAppender是一个输出流输出源，它可以根据你指定的文件命名去创建一个文件。FileAppender使用FileManager（继承自<code>OutputStreamManager</code>）来执行文件输入输出。</p>
<h4 id="常用属性-1"><a href="#常用属性-1" class="headerlink" title="常用属性"></a>常用属性</h4><ul>
<li>name ：string：appender的名字</li>
<li>append：boolean：默认为true，此时输出记录会被添加在原有文件的文末，否则会清空之前的log重新输出。</li>
<li>fileName：string：输出文件的名字</li>
</ul>
<p>还有一些属性包括：缓冲流的设置、文件在linux系统下的组、用户、权限等。</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">File</span> <span class="attr">name</span>=<span class="string">"MyFile"</span> <span class="attr">fileName</span>=<span class="string">"logs/app.log"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">PatternLayout</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">Pattern</span>&gt;</span>%d %p %c&#123;1.&#125; [%t] %m%n<span class="tag">&lt;/<span class="name">Pattern</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">PatternLayout</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">File</span>&gt;</span></div></pre></td></tr></table></figure>
<hr>
<h3 id="RandomAccessFileAppender"><a href="#RandomAccessFileAppender" class="headerlink" title="RandomAccessFileAppender"></a>RandomAccessFileAppender</h3><p>RandomAccessFileAppender和标准的FileAppender很像，只不过RandomAccessFileAppender总是以缓冲的形式输出（并且不能关闭缓冲流），在其内部实现中，它使用<code>ByteBuffer + RandomAccessFile</code>去代替了<code>BufferedOutputStream</code>。它的性能比FileAppender能高出20%~200%。</p>
<h4 id="常用属性-2"><a href="#常用属性-2" class="headerlink" title="常用属性"></a>常用属性</h4><ul>
<li>name ：string：appender的名字</li>
<li>append：boolean：默认为true，此时输出记录会被添加在原有文件的文末，否则会清空之前的log重新输出。</li>
<li>fileName：string：输出文件的名字</li>
<li>bufferSize：ingeger：默认是256*1024 btyes</li>
</ul>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">RandomAccessFile</span> <span class="attr">name</span>=<span class="string">"MyFile2"</span> <span class="attr">fileName</span>=<span class="string">"logs/app2.log"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">PatternLayout</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">Pattern</span>&gt;</span>%d %p %c&#123;1.&#125; [%t] %m%n<span class="tag">&lt;/<span class="name">Pattern</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">PatternLayout</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">RandomAccessFile</span>&gt;</span></div></pre></td></tr></table></figure>
<hr>
<h3 id="RollingFileAppender（重点）"><a href="#RollingFileAppender（重点）" class="headerlink" title="RollingFileAppender（重点）"></a>RollingFileAppender（重点）</h3><p>RollingFileAppender是最常用的输出流，它可以根据<code>TrggeringPolicy(触发策略)</code>和<code>RolloverPolicy(切换策略)</code>来切换不同的日志文件，以达到可定制度更高的分类日志文件输出。</p>
<p>RollingFileAppender要求指定<code>TriggeringPolicy</code>和<code>RolloverStrategy</code>。触发策略决定了当切换策略定义好如何切换的时候，是否执行切换。如果没有指定切换策略，那么RollingFileAppender会使用默认的切换策略。</p>
<h4 id="常用属性-3"><a href="#常用属性-3" class="headerlink" title="常用属性"></a>常用属性</h4><ul>
<li>name ：string：appender的名字</li>
<li>append：boolean：默认为true，此时输出记录会被添加在原有文件的文末，否则会清空之前的log重新输出。</li>
<li>fileName：string：输出文件的名字</li>
<li>filePattern：string：切换日志文件时使用的文件名模式，默认的切换策略会使用时间和日期以及一个int标号，其中日期pattern可以参考<a href="http://download.oracle.com/javase/7/docs/api/java/text/SimpleDateFormat.html" target="_blank" rel="external">SimpleDateFormat</a>，标号使用<code>%i</code>匹配。模式同样支持获取运行时的值，所以任何实时取值的Lookups（比如<a href="https://logging.apache.org/log4j/2.x/manual/lookups.html#DateLookup" target="_blank" rel="external">DateLookup</a>）</li>
<li>filePermissions：string：文件权限，POSIX格式，例如“rw——-”</li>
<li>fileOwner：string：文件所有者</li>
<li>fileGroup：string：文件所属组</li>
</ul>
<h4 id="Triggering-Policies-触发策略"><a href="#Triggering-Policies-触发策略" class="headerlink" title="Triggering Policies 触发策略"></a>Triggering Policies 触发策略</h4><h5 id="Composite-Triggering-Policy-复合触发策略"><a href="#Composite-Triggering-Policy-复合触发策略" class="headerlink" title="Composite Triggering Policy 复合触发策略"></a>Composite Triggering Policy 复合触发策略</h5><p>这种触发策略连接了多个触发策略，如果其中一项策略返回true，则整个复合触发策略返回true，CompositeTriggeringPolicy可以使用一个<code>Policies</code>元素来简单配置。</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">Policies</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">OnStartupTriggeringPolicy</span> /&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">SizeBasedTriggeringPolicy</span> <span class="attr">size</span>=<span class="string">"20 MB"</span> /&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">TimeBasedTriggeringPolicy</span> /&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">Policies</span>&gt;</span></div></pre></td></tr></table></figure>
<h5 id="Cron-Triggering-Policies-Cron触发策略"><a href="#Cron-Triggering-Policies-Cron触发策略" class="headerlink" title="Cron Triggering Policies Cron触发策略"></a>Cron Triggering Policies Cron触发策略</h5><p>使用cron表达式来进行切换触发</p>
<p>属性：</p>
<ul>
<li>schedule：string：cron表达式</li>
<li>evaluateOnStartup：boolean：在项目启动的时候，cron表达式会对日志文件最后的修改时间戳进行评估，看是否立即切换日志文件。</li>
</ul>
<h5 id="On-Startup-Triggering-Policy-启动触发策略"><a href="#On-Startup-Triggering-Policy-启动触发策略" class="headerlink" title="On Startup Triggering Policy 启动触发策略"></a>On Startup Triggering Policy 启动触发策略</h5><p>项目JVM启动的时候即触发策略</p>
<p>属性：</p>
<ul>
<li>mixSize：integer：必须切换的最小文件size，如果是0，则立即切换；默认的值是1，防止在当前日志文件为空的时候切换。</li>
</ul>
<h5 id="SizeBased-Triggering-Policy-文件体积触发策略"><a href="#SizeBased-Triggering-Policy-文件体积触发策略" class="headerlink" title="SizeBased Triggering Policy 文件体积触发策略"></a>SizeBased Triggering Policy 文件体积触发策略</h5><p>根据文件大小切换</p>
<p>属性：</p>
<ul>
<li>size：integer：到了某个size之后即切换，需要使用KB、MB、GB等后缀描述，如<code>20MB</code></li>
</ul>
<h5 id="TimeBased-Triggering-Policy-时间触发策略"><a href="#TimeBased-Triggering-Policy-时间触发策略" class="headerlink" title="TimeBased Triggering Policy 时间触发策略"></a>TimeBased Triggering Policy 时间触发策略</h5><p>根据时间切换，这种切换会在 date/time 模式无法运用在当前激活的文件的时候生效。这个策略接受一个<code>interval</code>属性，这个属性回根据当前的time pattern以及<code>modulate</code>这个布尔属性来决定切换文件的频繁程度。</p>
<p>属性：</p>
<ul>
<li>interval：integer：根据date pattern里特定的时间单位决定多久切换一次日志文件。比如date pattren里最精确的单位是hour，然后增量是4，那么会每4小时切换一次，默认的值是1。</li>
<li>modulate：boolean：决定当下一次切换时间出现在时间间隔的边缘的时候，是否校正时间间隔。比如，如果是hour，当前时间是3am，然后interval是4，那么下一次切换时间是4am，再下一次就是8am，再就是午时等等。</li>
<li>maxRandomDelay：integer：决定延迟切换的最大延迟秒数。默认是0，没有延迟。当服务器中有多个项目配置了同一时间输出日志的时候会非常有用，这会减缓io压力，加快io速度。</li>
</ul>
<h4 id="Rollover-Strategies-切换策略"><a href="#Rollover-Strategies-切换策略" class="headerlink" title="Rollover Strategies 切换策略"></a>Rollover Strategies 切换策略</h4><h5 id="Default-Rollover-Strategy-默认的切换策略"><a href="#Default-Rollover-Strategy-默认的切换策略" class="headerlink" title="Default Rollover Strategy 默认的切换策略"></a>Default Rollover Strategy 默认的切换策略</h5><p>默认的切换策略可以同时接收date/time pattern以及一个从filePattern属性中指定的integer参数。如果提供了date/time pattern，则会被替换为日期和时间值。如果pattern里有integer值，那么每次切换就会增加1。pattern里还可以写gz、zip、bz2等后缀。</p>
<p>属性：</p>
<ul>
<li>fileIndex：string：如果设置了max属性，大的index值的文件会比小index值的文件新。如果设置了min，文件重命名以及index计数器会跟随”<a href="https://logging.apache.org/log4j/2.x/manual/appenders.html#RolloverStrategies" target="_blank" rel="external">fixed window</a>“策略。</li>
<li>min：integer：计数器的最小值，默认值是1</li>
<li>max：integer：计数器的最大值，如果达到了这个值，那么会删除掉最早创建的那一个日志文件，默认值是7</li>
<li>compressionLevel：integer：压缩等级，针对压缩文件而言，取值0-9，0则无压缩，1是最快的速度生成压缩文件，9是最好的压缩率</li>
<li>tempCompressedFilePattern：string：在压缩期间生成的log文件名pattern</li>
</ul>
<p><em>后面还有更多的自定义策略细节，我就不一一说了，我感觉更详细的日志定制方案比如定时删除和执行script等，没有什么必要，可能是我当前能接触到的场景规模有限。</em></p>
<p>和FileAppender一样，RollingFileAppender也有对应的缓冲流版本。</p>
<hr>
<h3 id="RollingRandomAccessFileAppender（最常用）"><a href="#RollingRandomAccessFileAppender（最常用）" class="headerlink" title="RollingRandomAccessFileAppender（最常用）"></a>RollingRandomAccessFileAppender（最常用）</h3><p>这个就是RollingFileAppender的升级版，也是最常用的版本，它的属性、策略和前面的RollingFileAppender以及RandomAccessFileAppender一致，参考前面的就好了。</p>
<h4 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h4><h5 id="1"><a href="#1" class="headerlink" title="1"></a>1</h5><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">RollingRandomAccessFile</span> <span class="attr">name</span>=<span class="string">"RollingFile"</span> <span class="attr">fileName</span>=<span class="string">"logs/a.log"</span></span></div><div class="line"><span class="tag">             <span class="attr">filePattern</span>=<span class="string">"logs/$$&#123;date:yyyy-MM&#125;/a-%d&#123;yyyy-MM-dd-HH-mm&#125;-%i.log"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">PatternLayout</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">Pattern</span>&gt;</span>%d %p %c&#123;1.&#125; [%t] %m%n<span class="tag">&lt;/<span class="name">Pattern</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">PatternLayout</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">Policies</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">TimeBasedTriggeringPolicy</span> /&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">SizeBasedTriggeringPolicy</span> <span class="attr">size</span>=<span class="string">"250 MB"</span>/&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">Policies</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">RollingRandomAccessFile</span>&gt;</span></div></pre></td></tr></table></figure>
<p>触发策略：</p>
<p>1、按照时间切换：由于<code>filePattern</code>属性中配置的最精确的time pattern是<code>mm</code>即Minute in hour，且这条触发策略没有指定interval，那么默认是1分钟切换一次。</p>
<p>2、根据size切换，如果按照上一条的策略，在1分钟内产生超过250MB的日志，则切换，且<code>%i</code>加一。</p>
<p>切换策略：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">filePattern=<span class="string">"logs/%d&#123;yyyy-MM&#125;/a-%d&#123;yyyy-MM-dd-HH-mm&#125;-%i.log"</span></div></pre></td></tr></table></figure>
<p>在logs文件夹下，<code>%d{yyyy-MM}</code>按照月份建立一级文件夹，一月一个文件夹，然后月份里按照触发策略的约束去执行切换策略进行日志文件的切换。</p>
<h5 id="2"><a href="#2" class="headerlink" title="2"></a>2</h5><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">RollingRandomAccessFile</span> <span class="attr">name</span>=<span class="string">"RollingFile"</span> <span class="attr">fileName</span>=<span class="string">"logs/a.log"</span></span></div><div class="line"><span class="tag">             <span class="attr">filePattern</span>=<span class="string">"logs/$$&#123;date:yyyy-MM&#125;/a-%d&#123;yyyy-MM-dd-HH-mm&#125;-%i.log"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">PatternLayout</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">Pattern</span>&gt;</span>%d %p %c&#123;1.&#125; [%t] %m%n<span class="tag">&lt;/<span class="name">Pattern</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">PatternLayout</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">Policies</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">TimeBasedTriggeringPolicy</span> /&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">SizeBasedTriggeringPolicy</span> <span class="attr">size</span>=<span class="string">"250 MB"</span>/&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">Policies</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">DefaultRolloverStrategy</span> <span class="attr">max</span>=<span class="string">"20"</span>/&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">RollingRandomAccessFile</span>&gt;</span></div></pre></td></tr></table></figure>
<p>比1多指定了一个默认切换策略属性<code>max</code>：最大保留20个log文件</p>
<hr>
<h3 id="SMTPAppender"><a href="#SMTPAppender" class="headerlink" title="SMTPAppender"></a>SMTPAppender</h3><p>能给你发邮件的Appender，这个也挺有意思的，<a href="https://logging.apache.org/log4j/2.x/manual/appenders.html#SMTPAppender" target="_blank" rel="external">参考</a>。</p>
<hr>
<p>常用的Appender就介绍这么多，下一节介绍Layout pattern。</p>
]]></content>
      
        <categories>
            
            <category> note </category>
            
            <category> toolslearning </category>
            
            <category> log4j2 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> log4j2 </tag>
            
            <tag> learning </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Log4j2_HelloWorld]]></title>
      <url>/post/6cdb73.html</url>
      <content type="html"><![CDATA[<blockquote class="blockquote-center"><p>Lo4j2是啥就不解释了，之前无论是使用log4j还是log4j2，同样只是简单的各种百度然后复制粘贴没有系统的总结一下，今天把一个小小的Ajax的测试程序放服务器上面都不知道怎么查错，然后想写一下log来看看哪错了吧，发现还是不会独立配置log4j，于是想总结一波。基本的思路是总结官方文档和官方推荐的中文文档，尽量简洁表达出原理以及应用。</p>
</blockquote>
<a id="more"></a>
<hr>
<h3 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h3><h4 id="Maven依赖"><a href="#Maven依赖" class="headerlink" title="Maven依赖"></a>Maven依赖</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.logging.log4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>log4j-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.9.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.logging.log4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>log4j-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.9.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></div></pre></td></tr></table></figure>
<p>认准这俩依赖</p>
<h4 id="默认配置文件-如果配置文件缺省的情况下，也会是这样的配置"><a href="#默认配置文件-如果配置文件缺省的情况下，也会是这样的配置" class="headerlink" title="默认配置文件(如果配置文件缺省的情况下，也会是这样的配置)"></a>默认配置文件(如果配置文件缺省的情况下，也会是这样的配置)</h4><p>配置文件需要放在classpath的根目录下（一般的项目是src，maven web项目则是推荐在resource下），以log4j2.xml命名，配置文件还有其他的配置形式如json和yaml，我习惯使用xml。</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</div><div class="line"><span class="tag">&lt;<span class="name">configuration</span> <span class="attr">status</span>=<span class="string">"OFF"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">appenders</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">Console</span> <span class="attr">name</span>=<span class="string">"Console"</span> <span class="attr">target</span>=<span class="string">"SYSTEM_OUT"</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">PatternLayout</span> <span class="attr">pattern</span>=<span class="string">"%d&#123;HH:mm:ss.SSS&#125; [%t] %-5level %logger&#123;36&#125; - %msg%n"</span>/&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">Console</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">appenders</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">loggers</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">root</span> <span class="attr">level</span>=<span class="string">"error"</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">"Console"</span>/&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">root</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">loggers</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></div></pre></td></tr></table></figure>
<h4 id="HelloWord"><a href="#HelloWord" class="headerlink" title="HelloWord"></a>HelloWord</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">        Logger logger = LogManager.getLogger(LogManager.ROOT_LOGGER_NAME);</div><div class="line">        logger.trace(<span class="string">"trace level"</span>);</div><div class="line">        logger.debug(<span class="string">"debug level"</span>);</div><div class="line">        logger.info(<span class="string">"info level"</span>);</div><div class="line">        logger.warn(<span class="string">"warn level"</span>);</div><div class="line">        logger.error(<span class="string">"error level"</span>);</div><div class="line">        logger.fatal(<span class="string">"fatal level"</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<hr>
<h3 id="运行HelloWorld"><a href="#运行HelloWorld" class="headerlink" title="运行HelloWorld"></a>运行HelloWorld</h3><p>运行上面的代码之后会出现如下的log<br><figure class="highlight cmd"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="number">13</span>:<span class="number">34</span>:<span class="number">41</span>.<span class="number">070</span> [main] ERROR mylog - error level</div><div class="line"><span class="number">13</span>:<span class="number">34</span>:<span class="number">41</span>.<span class="number">072</span> [main] FATAL mylog - fatal level</div></pre></td></tr></table></figure></p>
<p>你会很奇怪，为什么我们写了这么多log，却只出现两行log信息，我们去看看我们的配置文件：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</div><div class="line"><span class="tag">&lt;<span class="name">configuration</span> <span class="attr">status</span>=<span class="string">"OFF"</span>&gt;</span></div><div class="line">  <span class="comment">&lt;!-- 这里定义了一个appenders --&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">appenders</span>&gt;</span></div><div class="line">      <span class="comment">&lt;!-- appenders里面配置了一个Console --&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">Console</span> <span class="attr">name</span>=<span class="string">"Console"</span> <span class="attr">target</span>=<span class="string">"SYSTEM_OUT"</span>&gt;</span></div><div class="line">          <span class="comment">&lt;!-- 这是输出格式 --&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">PatternLayout</span> <span class="attr">pattern</span>=<span class="string">"%d&#123;HH:mm:ss.SSS&#125; [%t] %-5level %logger&#123;36&#125; - %msg%n"</span>/&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">Console</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">appenders</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="comment">&lt;!-- 然后就是定义loggers --&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">loggers</span>&gt;</span></div><div class="line">      <span class="comment">&lt;!-- 这是根logger 是所有自定义logger的父logger --&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">root</span> <span class="attr">level</span>=<span class="string">"error"</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">"Console"</span>/&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">root</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">loggers</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></div></pre></td></tr></table></figure>
<p>首先看我们的Java代码：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Logger logger = LogManager.getLogger(LogManager.ROOT_LOGGER_NAME);</div></pre></td></tr></table></figure>
<p>这一行是获取我们在配置文件中配置好的root logger，然后使用这个logger去打印了6条日志。</p>
<p>然后解释一下单词含义（my style~）：</p>
<blockquote>
<p>Appender：<br><em>n.</em> 附着器,输出目的地,输出源；</p>
</blockquote>
<p>它的子元素Console，代表的是控制台，所以很明显就是，我们配置了一个以控制台作为输出源的输出源；并将这个输出源命名为<code>Console</code>，然后配置了这个控制台输出源的输出Pattern。</p>
<p>然后我们在<code>loggers</code>里面配置了一个logger：<code>root</code>，这个节点代表所有logger的根logger，然后log级别定为<code>error</code>，意思是<strong>只输出error级别以下包括error的日志信息</strong>，之后这个根log的输出源引用的是<code>name</code>值为<code>Console</code>的Appender，也即我们配置的唯一一个Appender。</p>
<p>那么error以下是哪些信息？</p>
<blockquote>
<hr>
<p>log4j规定了默认的几个级别：<code>trace &lt; debug &lt; info &lt; warn &lt; error &lt; fatal</code>等。这里要说明一下：</p>
<ol>
<li><p>级别之间是包含的关系，意思是如果你设置日志级别是trace，则大于等于这个级别的日志都会输出。</p>
</li>
<li><p>基本上默认的级别没多大区别，就是一个默认的设定。你可以通过它的API自己定义级别。你也可以随意调用这些方法，不过你要在配置文件里面好好处理了，否则就起不到日志的作用了，而且也不易读，相当于一个规范，你要完全定义一套也可以，不用没多大必要。</p>
</li>
</ol>
<hr>
<ul>
<li><p>trace： 是追踪，就是程序推进以下，你就可以写个trace输出，所以trace应该会特别多，不过没关系，我们可以设置最低日志级别不让他输出。</p>
</li>
<li><p>debug： 调试么，我一般就只用这个作为最低级别，trace压根不用。是在没办法就用eclipse或者idea的debug功能就好了么。</p>
</li>
<li><p>info： 输出一下你感兴趣的或者重要的信息，这个用的最多了。</p>
</li>
<li><p>warn： 有些信息不是错误信息，但是也要给程序员的一些提示，类似于eclipse中代码的验证不是有error 和warn。</p>
</li>
<li><p>error： 错误信息。用的也比较多。</p>
</li>
<li><p>fatal： 级别比较高了。重大错误，这种级别你可以直接停止程序了，是不应该出现的错误么！不用那么紧张，其实就是一个程度的问题。</p>
</li>
</ul>
<hr>
</blockquote>
<p>到这里我们就知道，为什么会只打印两条log了，打印的两条log分别是：error级别以及fatal级别的log。</p>
<hr>
<p><em>参考：<a href="http://www.cnblogs.com/leo-lsw/p/log4j2tutorial.html" target="_blank" rel="external">http://www.cnblogs.com/leo-lsw/p/log4j2tutorial.html</a></em></p>
<p><em>参考：<a href="https://my.oschina.net/xianggao/blog/523401" target="_blank" rel="external">https://my.oschina.net/xianggao/blog/523401</a></em></p>
]]></content>
      
        <categories>
            
            <category> note </category>
            
            <category> toolslearning </category>
            
            <category> log4j2 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> log4j2 </tag>
            
            <tag> learning </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[RegExp_2_metacharacters]]></title>
      <url>/post/591f5cd1.html</url>
      <content type="html"><![CDATA[<blockquote class="blockquote-center"><p>Metacharacters：元字符</p>
</blockquote>
<a id="more"></a>
<h3 id="元字符的解释"><a href="#元字符的解释" class="headerlink" title="元字符的解释"></a>元字符的解释</h3><p>完整的正则表达式由两种字符组成：</p>
<ul>
<li>特殊字符，即<code>元字符</code>，它们一般具有特殊的含义，并不匹配字面字符。</li>
<li>文字，即普通<code>文本字符</code>，匹配的就是字面字符。</li>
</ul>
<hr>
<h4 id="行的起始和结束"><a href="#行的起始和结束" class="headerlink" title="行的起始和结束"></a>行的起始和结束</h4><blockquote>
<p><code>^</code> 脱字符号，在检查一行文本的时候，<code>^</code>代表一行的开始。</p>
<p><code>$</code> 美元符号，在检查一行文本的时候，<code>$</code>代表一行的结束。</p>
</blockquote>
<ul>
<li><code>^cat</code> ：表示匹配以cat开头的行，如categories</li>
<li><code>cat$</code> ：表示匹配以\$结尾的行，如aaaacat</li>
</ul>
<p>我们以更机械的方式去解读第一个例子：<code>^cat</code> 匹配的是以c作为一行的第一个字符，紧接着c后面是a，a后面紧接着t的文本。</p>
<p>这两个符号的特殊之处就在于，它们匹配的只是位置，而不是特定的文本。</p>
<hr>
<h4 id="字符组"><a href="#字符组" class="headerlink" title="字符组"></a>字符组</h4><h5 id="匹配若干字符之一"><a href="#匹配若干字符之一" class="headerlink" title="匹配若干字符之一"></a>匹配若干字符之一</h5><p>这里需要引入一个概念：正则表达式结构体（construct）<code>[...]</code>。它允许使用者列出在某处期望匹配的字符的候选值，通常也被称为字符组。</p>
<p>比如当我们不确定是要匹配grey还是gray的时候，我们可以这样写<code>gr[ae]y</code>，它想表达的意思是：匹配一段文本，它是先有一个g，g后是一个r，r后可以是a或者e其中之一，然后就是一个y。</p>
<p>在<code>gr[ae]y</code>中，<code>g</code>或者<code>r</code>、<code>y</code>这样的表达式，它们被解释为：g后面紧跟着、r后面紧跟着这样的“接下来（and then）”的含义，而在<code>[ae]</code>中，里面的字符被解释为：这个结构体的位置被替换为a或者是e。</p>
<p>我们还有可能遇到的场景是，<code>[123456789]</code>甚至是26个字母全用上的情况，这个时候我们可以使用<strong>字符组元字符</strong><code>-</code>（连接符）来表示一个范围，比如<code>[1-9]</code>和<code>[123456789]</code>是完全相等的。同时还支持多重范围比如<code>[a-h1-6F-I]</code>和<code>[abcdefg123456FGHI]</code>等效。</p>
<p>还可以在字符组里面使用普通文本[_.!?]可以匹配下划线或者点或者感叹号或者问号。</p>
<p><strong>需要注意的是：只有在字符组内部，并且能够表示特定范围含义，比如1到9，a到z这样的范围，连字符才是元字符，在其他情况下它只能匹配普通的连字符号。而在字符组内的问号和点号则是匹配一般的符号，它们在组内不是元字符，在组外是元字符。这有点像正常语言中，某个单词在不同的语境中有不同的解释一样，我私称这样的情况为<code>语境分意</code></strong></p>
<h5 id="排除型字符组"><a href="#排除型字符组" class="headerlink" title="排除型字符组"></a>排除型字符组</h5><p>还有一种字符组形如：<code>[^...]</code>，这个字符组会匹配任何<strong>未</strong>列出的字符。例如<code>[^1-6]</code>匹配除了1到6以外的任何字符。</p>
<p>你可能已经注意到了，<code>^</code>脱字符在组内和组外的含义的不一样的，由此我们了解到，<strong>元字符会根据环境的不同而改变它所要表达的含义。</strong></p>
<blockquote>
<p>书例：<code>q[^u]</code>是否能匹配<code>Iraq</code>？</p>
<p>我们机械地解读表达式：q后面紧跟一个除了u以外的字符。注意是“后面紧跟”，所以这就意味着，q字符绝对不是最后一个字母。</p>
<p>因此我们知道：一个字符组，即使是排除型的字符组，也必须匹配一个字符。</p>
</blockquote>
<h5 id="点号匹配任意字符"><a href="#点号匹配任意字符" class="headerlink" title="点号匹配任意字符"></a>点号匹配任意字符</h5><p>元字符<code>.</code>是用来匹配任意字符的字符组的简便写法，注意是<strong>字符组</strong>的便捷写法。如果我们要搜索03/19/76、03-19-76、03.19.76，一般的的做法是写<code>03[-/.]19[-/.]76</code>来让字符组匹配一个减号或者斜杠或者英文句号，我们也可以这样写<code>03.19.76</code>。这里又出现<strong>语境分意</strong>的情况了，<code>.</code>在字符组内外的含义不同，而<code>-</code>在字符组内的位置不同语义也不同，如果写成<code>[.-/]</code>，则是用来表示范围的，这里需要特别留心。</p>
<hr>
<h4 id="多选结构"><a href="#多选结构" class="headerlink" title="多选结构"></a>多选结构</h4><h5 id="匹配任意子表达式"><a href="#匹配任意子表达式" class="headerlink" title="匹配任意子表达式"></a>匹配任意子表达式</h5><p><code>|</code>是一个非常简洁的元字符，它等于布尔运算里面的“或（or）”。比如<code>Bob</code>和<code>Robert</code>是两个表达式，但<code>Bob|Robert</code>就是一个表达式，但是可以匹配里面两种情况。这样的组合称之为“多选分支（alternative）”。</p>
<p>我们之前的<code>gr[ea]y</code>可以写成<code>grey|gray</code>，或者是<code>gr(a|e)y</code>，最后这种情况用括号来划定多选结构的范围（一般情况下，括号也是元字符）。同样值得注意的是，如果我们写成<code>gr[e|a]y</code>，那么这里面的<code>|</code>就并不代表或而是代表“|”符号本身。</p>
<p>在表达式<code>gr(a|e)y</code>中，括号是必须的，如果没有括号，<code>gre|ay</code>就变成了匹配<code>gre</code>或者<code>ay</code>了。<strong>多选结构可以包含很多字符，但是不能超过括号的界限。</strong> 再举一个例子：<code>(Fir|1)st [Ss]treet</code>可以匹配<code>First Street</code>、<code>First street</code>、<code>1st Street</code>、<code>1st street</code>等。</p>
<p>再一次强调，多选结构和字符组的区别是：<strong>字符组只能匹配一个字符，但是多选结构可以匹配多个字符！</strong></p>
<h4 id="可选项元素"><a href="#可选项元素" class="headerlink" title="可选项元素"></a>可选项元素</h4><p>比如color和colour，其中只有一个u的区别，我们可以用<code>colou?r</code>这样的表达式来解决，<code>?</code>元字符代表可选，它代表前面一个字母是可选的匹配项。</p>
<p><code>?</code>只作用与之前紧邻的元素，所以我们让机械来读这个表达式则是：<code>c</code>，然后<code>o</code>然后<code>l</code>然后<code>o</code>然后<code>u?</code>最后<code>r</code>。</p>
<p>比较特别的是，<code>u?</code>这样的表达式是永远都能匹配成功的，它可以匹配以个u，也可以什么都不匹配。</p>
]]></content>
      
        <categories>
            
            <category> note </category>
            
            <category> booknote </category>
            
            <category> 《Mastering Regular Expression(Third Edition)》 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> learning </tag>
            
            <tag> RegExp </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[RegExp_1_overview]]></title>
      <url>/post/8f39708b.html</url>
      <content type="html"><![CDATA[<p><em>引言：接触计算机编程以来，无数次碰到过这个名词“正则表达式”，刚开始肯定是不懂，但是听到“表达式”三个字就发现事情并不简单。</em></p>
<a id="more"></a>
<p><em>第一次接触到它还是在我进NTJ2EE的招新机试的时候，机试题有一道题：“有一个字符串，其中包含中文字符、英文字符和数字字符，请统计和打印出各个字符的个数。”，当时只会用取字符对照ascii的方法来做这道题，然后正好学长看了我的做法，他说还有种东西叫做“正则表达式”，然后他给我打开了在线的JDK-1.6的API，找到了里面介绍正则表达式的页，然后还百度了一篇正则表达式的教程给我看（对，就是那个通篇斜杠写反的那盘），然后我就头皮发麻了。</em></p>
<p><em>在之后无论是正式学习还是运用到实际当中，我的处理都是：百度——ctrl+c——ctrl+v，然后下次碰到另一个字符串处理问题的时候还是这样做，毫无意义，甚至还不能完全匹配我的应用场景。然后这次的工程中心项目，我负责写前端，对输入框需要用到字符串过滤的需求，就这么简单的一个功能我都实现不了，感觉非常丢人，我不想再复制粘贴了，所以开始以blog的形式记录我学习<code>regular-expression</code>的过程。</em></p>
<p><strong>所有笔记的学习都基于：《Mastering Regular Expression(Third Edition)》——Jeffrey E. F. Friedl一书的中文版</strong></p>
<hr>
<h3 id="释义与场景"><a href="#释义与场景" class="headerlink" title="释义与场景"></a>释义与场景</h3><h4 id="释义"><a href="#释义" class="headerlink" title="释义"></a>释义</h4><p>首先我们来看看<code>Regular Expression</code>这两个单词</p>
<p>Regular：</p>
<blockquote>
<p><em>adj.</em> 定期的；有规律的；合格的；整齐的；普通的</p>
<p><em>n.</em> 常客；正式队员；中坚分子</p>
<p><em>adv.</em> 定期地；经常地</p>
</blockquote>
<p>Expression：</p>
<blockquote>
<p><em>n.</em> 表现，表示，表达；表情，脸色，态度，强调，声调；式，符号；语句，措辞，说法</p>
</blockquote>
<p>毫无疑问，在编程领域里面<code>Regular Expression</code>的含义肯定不会是“整齐的脸色”或者“中坚分子措辞”这样的翻译了，从字面意义上去翻译的话应该是“有规律的表达式”，因为起码听上去像个数学公式，和计算机有点关联- -。这可比“正则表达式”这样的翻译明了多了，但是后者更有逼格一点。</p>
<h4 id="场景"><a href="#场景" class="headerlink" title="场景"></a>场景</h4><p>搞清楚公式的定义，那么接下来我们就可以开始解题了:smile:。</p>
<p>我们为什么会用到正则表达式？需求源于我们需要在一大段不规则的文本中找出是否含有符合我们规律的表达式的句子，这就叫做使用正则表达式去匹配我们的文本。比如一般editor所具有的find功能，就是一种文本匹配功能。</p>
<p>但是在我们写程序的过程中，你的程序代码是不可能给一个find按钮给你去匹配文本的，而且你可能会需要更复杂的文本匹配功能，比如说“匹配所有xxx-xxxxxxxxxxx这种格式的手机号码”这样的精准匹配就需要你构建表述清晰的正则表达式去完成匹配功能。</p>
<p>一旦你精准的find到你想要匹配的子文本之后，你想干嘛都行，提取、删除、替换、添加等等。这就是正则表达式的应用场景。</p>
<hr>
]]></content>
      
        <categories>
            
            <category> note </category>
            
            <category> booknote </category>
            
            <category> 《Mastering Regular Expression(Third Edition)》 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> learning </tag>
            
            <tag> RegExp </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[5 Useful Tips For A Better Commit Message]]></title>
      <url>/post/ce7091ac.html</url>
      <content type="html"><![CDATA[<p>You’re already writing decent commit messages. Let’s see if we can level you up to awesome. Other developers, especially you-in-two-weeks and you-from-next-year, will thank you for your forethought and verbosity when they run git blame to see why that conditional is there.</p>
<a id="more"></a>
<ol>
<li><p>The first line should always be <u>50 characters</u> or less and that it should be followed by a blank line. Vim ships with syntax, indent, and filetype plugins for Git commits which can help here.</p>
</li>
<li><p>Add this line to your <code>~/.vimrc</code> to add spell checking and automatic wrapping at the recommended 72 columns to you commit messages.</p>
   <figure class="highlight vim"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">autocmd</span> Filetype gitcommit <span class="keyword">setlocal</span> spell textwidth=<span class="number">72</span></div></pre></td></tr></table></figure>
</li>
<li><p>Never use the <code>-m &lt;msg&gt;</code> / <code>--message=&lt;msg&gt;</code> flag to <code>git commit</code>.</p>
<p> It gives you a poor mindset right off the bat as you will feel that you have to fit your commit message into the terminal command, and makes the commit feel more like a one-off argument than a page in history:</p>
   <figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git commit -m <span class="string">"Fix login bug"</span></div></pre></td></tr></table></figure>
<p> A more useful commit message might be:</p>
 <figure class="highlight vim"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">Redirect user <span class="keyword">to</span> the requested page after login</div><div class="line"></div><div class="line">http<span class="variable">s:</span>//trello.<span class="keyword">com</span>/path/<span class="keyword">to</span>/relevant/card</div><div class="line"></div><div class="line">Users were being redirected <span class="keyword">to</span> the home page after login, which <span class="keyword">is</span> less</div><div class="line">useful than redirecting <span class="keyword">to</span> the page they had originally requested before</div><div class="line">being redirected <span class="keyword">to</span> the login form.</div><div class="line"></div><div class="line">* Store requested path in <span class="keyword">a</span> session variable</div><div class="line">* Redirect <span class="keyword">to</span> the stored location after successfully logging in the user</div></pre></td></tr></table></figure>
</li>
<li><p>Answer the following questions:</p>
<ol>
<li><p>Why is this change necessary?</p>
<p> This question tells <u>reviewers of your pull request</u> what to expect in the commit, allowing them to more easily identify and point out unrelated changes.</p>
</li>
<li><p>How does it address the issue?</p>
<p> Describe, at a high level, what was done to affect change.<br> <code>Introduce a red/black tree to increase search speed or</code><br> <code>Remove &lt;troublesome gem X&gt;, which was causing &lt;specific description of issue introduced by gem&gt;</code><br> are good examples.</p>
<p> If your change is obvious, you may be able to omit addressing this question.</p>
</li>
<li><p>What side effects does this change have?</p>
<p> This is the most important question to answer, as it can point out problems where you are making too many changes in one commit or branch. One or two bullet points for related changes may be okay, but five or six are likely indicators of a commit that is doing too many things.</p>
<p> Your team should have guidelines and rules-of-thumb for how much can be done in a single commit/branch.</p>
</li>
</ol>
</li>
<li><p>Consider making including a link to the issue/story/card in the commit message a standard for your project. Full urls are more useful than issue numbers, as they are more permanent and avoid confusion over which issue tracker it references.</p>
<p> This is generally done as the first paragraph after the summary, on line 3.</p>
</li>
</ol>
<p><img src="http://image.youyinnn.cn/6c9c0fc1f7a32c23e57b689a5bf1aca8.png" alt="git-commit-tips"></p>
<p>Having a story in your git log will make a huge difference in how you and others perceive your project. By taking great care in commit messages, as you do in your code, you will help to increase overall quality.</p>
<p>Special thanks to Tim Pope, whose Note About Git Commit Messages literally sets the standard for a good commit message.</p>
<p>Additional thanks to the creator of Git and a real stickler for a good commit message, Linus Torvalds.</p>
<p><em>Reprinted from : <a href="https://robots.thoughtbot.com/5-useful-tips-for-a-better-commit-message?utm_medium=social&amp;utm_source=qq" target="_blank" rel="external">https://robots.thoughtbot.com/5-useful-tips-for-a-better-commit-message?utm_medium=social&amp;utm_source=qq</a></em></p>
<p><em>Chinese translate :<a href="https://ruby-china.org/topics/15737" target="_blank" rel="external">https://ruby-china.org/topics/15737</a></em></p>
]]></content>
      
        <categories>
            
            <category> reprinted </category>
            
        </categories>
        
        
        <tags>
            
            <tag> tips </tag>
            
            <tag> github </tag>
            
            <tag> git </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[中文测试之诗]]></title>
      <url>/post/7e113b03.html</url>
      <content type="html"><![CDATA[<blockquote class="blockquote-center"><p>吃饭</p>
<p>睡觉</p>
<p>学习</p>
<p><img src="http://image.youyinnn.cn/471c252f4e633e3fafb800f2ab9f1c1c.png" alt="fox"></p>
</blockquote>
<a id="more"></a>
]]></content>
      
        <categories>
            
            <category> 未分类 </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[Do not go gentle into that good night]]></title>
      <url>/post/c06e8c71.html</url>
      <content type="html"><![CDATA[<blockquote class="blockquote-center"><p>Make him stay, Murph.</p>
</blockquote>
<a id="more"></a>
<ul>
<li>星际穿越</li>
<li>不要温和的走进那个良夜</li>
</ul>
<hr>
<blockquote class="blockquote-center"><p>Do not go gentle into that good night,</p>
<p>　　Old age should burn and rave at close of day;</p>
<p>　　Rage, rage against the dying of the light.</p>
<p>　　Though wise men at their end know dark is right,</p>
<p>　　Because their words had forked no lightningthey</p>
<p>Do not go gentle into that good night.</p>
<p>Good men, the last wave by, crying how bright</p>
<p>　　Their frail deeds might have danced in a green bay,</p>
<p>　　Rage, rage against the dying of the light.</p>
<p>　　Wild men who caught and sang the sun in flight,</p>
<p>　　And learn, too late, they grieved it on its way,</p>
<p>　　Do not go gentle into that good night.</p>
<p>　　Grave men, near death, who see with blinding sight</p>
<p>　　Blind eyes could blaze like meteors and be gay,</p>
<p>　　Rage, rage against the dying of the light.</p>
<p>　　And you, my father, there on the sad height,</p>
<p>　　Curse, bless me now with your fierce tears, I pray.</p>
<p>　　Do not go gentle into that good night.</p>
<p>　　Rage, rage against the dying of the light.</p>
</blockquote>
]]></content>
      
        <categories>
            
            <category> 随笔 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 诗 </tag>
            
        </tags>
        
    </entry>
    
  
  
</search>
