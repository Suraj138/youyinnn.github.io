<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title><![CDATA[Log4j2_Layouts]]></title>
      <url>/post/1ae8a038.html</url>
      <content type="html"><![CDATA[<blockquote class="blockquote-center"><p>Layout：定制你的输出模式</p>
</blockquote>
<a id="more"></a>
<p><a href="https://logging.apache.org/log4j/2.x/manual/layouts.html" target="_blank" rel="external">Layouts</a>里提到了许多种Layout方式，我最常用的是PatternLayout。</p>
<h3 id="Pattern-Layout-模式输出"><a href="#Pattern-Layout-模式输出" class="headerlink" title="Pattern Layout 模式输出"></a>Pattern Layout 模式输出</h3><p>是一种通过pattern字符串来配置的灵活的输出方式。</p>
<p>属性：</p>
<ul>
<li>charset：string：所使用的字符集</li>
<li>pattern：string：定制你的输出模式</li>
<li>header：string：这是一个可选项，它会包含在每个log文件的开头</li>
<li>footer：string：这是一个可选项….</li>
</ul>
<h4 id="Patterns"><a href="#Patterns" class="headerlink" title="Patterns"></a>Patterns</h4><h5 id="Class模式"><a href="#Class模式" class="headerlink" title="Class模式"></a>Class模式</h5><p><code>c{precision} &amp; logger{precision}</code></p>
<p>用例：</p>
<p><img src="http://image.youyinnn.cn/0c7bcdb7e018e47007e1f94164a2b626.png" alt="class pattern"></p>
<h5 id="Date模式"><a href="#Date模式" class="headerlink" title="Date模式"></a>Date模式</h5><p><code>d{pattern} &amp; date{pattern}</code></p>
<p>用例：</p>
<p><img src="http://image.youyinnn.cn/782b42701d03650c07a92766558d225f.png" alt="date pattern"></p>
<h4 id="Highlight模式"><a href="#Highlight模式" class="headerlink" title="Highlight模式"></a>Highlight模式</h4><p><code>highlight{pattern}{style}</code></p>
<p>根据log级别，在输出结果中添加ANSI颜色（windows下看原生日志文件会乱码）。</p>
<p><img src="http://image.youyinnn.cn/43ae856e280857dbecbfd8773a8b5440.png" alt="colors"></p>
<p>示例：<br><img src="http://image.youyinnn.cn/fe3618ad65fffb43a93363ba1e350475.png" alt="colors exp"></p>
<h4 id="style模式"><a href="#style模式" class="headerlink" title="style模式"></a>style模式</h4><p><code>style{pattern}{ANSI style}</code></p>
<p>使用ANSI来定制你的输出语句（windows下看原生日志文件会乱码）。</p>
<p>ANSI style值：</p>
<p><img src="http://image.youyinnn.cn/3021a525f35b80dc0642b58c86cf67a0.png" alt="ansi style 1"><br><img src="http://image.youyinnn.cn/061c508fe2b0716c7ce1ba41487d398b.png" alt="ansi style 2"></p>
<h4 id="Line模式"><a href="#Line模式" class="headerlink" title="Line模式"></a>Line模式</h4><p><code>%L</code>：输出报出issue的logger的行数<br><code>%l</code>：输出更详细的行数信息</p>
<h4 id="Message信息模式"><a href="#Message信息模式" class="headerlink" title="Message信息模式"></a>Message信息模式</h4><p><code>%msg</code>：输出logger的信息</p>
<h4 id="Method模式"><a href="#Method模式" class="headerlink" title="Method模式"></a>Method模式</h4><p><code>%M</code>：输出logger所在的方法</p>
<h4 id="n模式"><a href="#n模式" class="headerlink" title="n模式"></a>n模式</h4><p><code>%n</code>：输出系统支持的行分隔符，比如<code>\n</code>或者<code>\r\n</code></p>
<h4 id="N模式"><a href="#N模式" class="headerlink" title="N模式"></a>N模式</h4><p><code>%N</code>：输出<code>System.nanoTime()</code></p>
<h4 id="pid模式"><a href="#pid模式" class="headerlink" title="pid模式"></a>pid模式</h4><p><code>%pid</code>：输出程序的pid</p>
<h4 id="level模式"><a href="#level模式" class="headerlink" title="level模式"></a>level模式</h4><p><code>p|level{level=label, level=label, ...}</code>：指定每个级别的别名<br><code>p|level{lowerCase=true|false}</code>：指定级别是否小写</p>
]]></content>
      
        <categories>
            
            <category> note </category>
            
            <category> toolslearning </category>
            
            <category> log4j2 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> log4j2 </tag>
            
            <tag> learning </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[我认为的规范的git commit msg]]></title>
      <url>/post/236e6e34.html</url>
      <content type="html"><![CDATA[<blockquote class="blockquote-center"><p>其实必要的时候使用<code>git commit -m &quot;xxxxx&quot;</code>也木有关系 但你也别每条都这样写</p>
</blockquote>
<a id="more"></a>
<p>好久没更博了，最近一直在疯狂的推<a href="https://github.com/DomBro96/dataimport" target="_blank" rel="external">数据快速导入</a>的项目，推的使用在使用git做一些fix和optimize等工作，经常会进行版本回退和msg查阅，看看我昨天晚上到底干了些什么。</p>
<p>然后发现我特么看不懂前一天晚上写的什么鬼msg，这时候才觉得，有一个良好的commit习惯是多么重要！</p>
<p>之前有转过一篇：<a href="https://youyinnn.github.io/post/ce7091ac.html" target="_blank" rel="external">5 Useful Tips For A Better Commit Message</a></p>
<p>按照这篇文章，我自己给我自己的commit msg做个规范。</p>
<h3 id="第一行"><a href="#第一行" class="headerlink" title="第一行"></a>第一行</h3><p>使用规定的标识符表明当次commit一共做了哪些工作,不同的提示符使用空格<code> </code>分隔，提示符规定如下（持续补充）：</p>
<ul>
<li>业务型：<ul>
<li>功能：<blockquote>
<p><code>FEATCPL</code>：Feature Completed：新功能完成<br><code>DELFEAT</code>：Deleted Feature：删除功能<br><code>RNFEAT</code>：Renamed Feature：重命名功能<br><code>MGFEAT</code>：Merged Feature：合并功能<br><code>IMPFEAT</code>：Improved Feature：改进功能（通常是增加新的模块来辅助这个Feature</p>
</blockquote>
</li>
<li>模块：<blockquote>
<p><code>ADDMODU</code>：Added Module：增加新模块<br><code>DELMODU</code>：Deleted Module：删除模块<br><code>RNMODU</code>：Renamed Module：重命名模块<br><code>MGMODU</code>：Merged Module：合并模块<br><code>IMPMODU</code>：Improved Module：改进模块（通常是优化代码或者方法</p>
</blockquote>
</li>
</ul>
</li>
</ul>
<hr>
<ul>
<li>事务型：<ul>
<li>版本：<blockquote>
<p><code>RELEASE</code>：发布一个版本</p>
</blockquote>
</li>
<li>代码：<blockquote>
<p><code>OPTCODE</code>：Optimized Code：优化代码（通常是优化一小段代码的逻辑<br><code>TOFUNC</code>：Repeated Code Snippet Up To Function：提取方法以代码重用<br><code>AFUNC</code>：Added Function：增加方法<br><code>DELFUNC</code>：Deleted Function：删除方法<br><code>MFUNC</code>：Moved Funtion：移动方法<br><code>RNFUNC</code>：Renamed Function：重命名方法<br><code>OPTFUNC</code>：Optimized Function：优化方法（和OPTCODE相似<br><code>CGCONT</code>：Changed Content：修改内容（一般不是BUG而是内容不符合业务或者逻辑要求</p>
</blockquote>
</li>
<li>问题：<blockquote>
<p><code>FIX</code>：Fixed Bug：修复BUG<br><code>RPBUG</code>：Report Bug：通报发现一个BUG并且待解决</p>
</blockquote>
</li>
<li>其他：<blockquote>
<p><code>MODCONF</code>：Modified Config：修改配置（可以是修改配置文件也可以是修改用于配置的硬代码<br><code>MODDEP</code>：Modified Dependence：更改依赖<br><code>TODO</code>：Added Todo List：添加todo列表</p>
</blockquote>
</li>
</ul>
</li>
</ul>
<hr>
<ul>
<li>操作型：<ul>
<li>仓库操作：<blockquote>
<p><code>INIT</code>：Inited Repository：初始化仓库<br><code>AREADME</code>：Added README File：增加readme文件<br><code>AMREADME</code>：Amended README File：修正readme文件<br><code>SUPREADME</code>：Supplemented README File：补充readme文件<br><code>AIGNORE</code>：Added Ignore File：增加Ignore文件<br><code>MODIGNORE</code>：Modified Ignore File：修改Ignore文件</p>
</blockquote>
</li>
<li>文件操作：<blockquote>
<p><code>MFILE</code>：Moved File：移动文件<br><code>CFILE</code>：Created File：创建文件<br><code>RMFILE</code>：Removed File：移除文件<br><code>RNFILE</code>：Renamed File：重命名文件<br><code>CGSTRUCT</code>：Changed Project Structure：变更项目结构</p>
</blockquote>
</li>
</ul>
</li>
</ul>
<p>所以我commit的第一行会是这样的：<br><figure class="highlight vim"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">FEATCPL RPBUG TOFUNC FIX MODIGNORE</div></pre></td></tr></table></figure></p>
<p>这表示我当次commit完成了：</p>
<blockquote>
<p><em>我在完成一个<code>新功能</code>的同时还<code>发现了一个BUG</code>顺便<code>封装了之前写的重复的代码为函数</code>提高了代码重用率接着<code>修复了之前发现的一些BUG</code>最后还<code>修改了一下Ingore文件</code>！</em></p>
</blockquote>
<h3 id="第二行"><a href="#第二行" class="headerlink" title="第二行"></a>第二行</h3><p>得是一个空行</p>
<h3 id="第三行"><a href="#第三行" class="headerlink" title="第三行"></a>第三行</h3><p>开始按照第一行的写下的工作标识符顺序分条进行简要说明，一般来说，简单而清晰表达即可。但是有以下规定：</p>
<ul>
<li>以工作标识符加冒号占一行。</li>
<li>如有当前工作有多个要点，必须有序得分条说明。</li>
<li>每条说明文字必须要指明改动源与改动目的。</li>
<li>当commit多个文件时，涉及代码改动的每条说明文字的最后一个字符必须以一个tab键进行制表空格；然后写上<code>//fileName.fileSuffix</code>来表明当前这条改动的工作是在哪个文件上进行的；如有必要，可在文件名后面加上<code>(12-67)</code>表明改动的行段；如涉及多个文件，则文件之间以空格分隔。</li>
<li>每个工作说明完之后必须空一行，最后一个工作除外。</li>
<li>全英文标点符号，即使有中文说明；说明行末不加任何标点符号，即使是英文句号。</li>
<li>FIX后面必须加上对应<code>RPBUG</code>的版本号（如果是以前的commit中report的BUG的话，如果是当次commit发现的BUG可以不用写版本号，并且可以不写<code>RPBUG</code>标识符），然后再简单说明FIX了什么BUG，最后明如何FIX即可。</li>
<li>如果是一些可以忽略说明的工作，则可以直接在标识符后面加上<code>*</code>，表示忽略说明（如<code>MODIGNORE</code>标识符）。</li>
</ul>
<p>比如：<br><figure class="highlight vim"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">FEATCPL:</div><div class="line"><span class="number">1</span>.初步完成了用户登陆功能 //LoginService.java</div><div class="line"><span class="number">2</span>.初步完成了用户注册功能 //SignupService.java</div></pre></td></tr></table></figure></p>
<hr>
<p>以上基本可以清晰表达commit的内容了，下面是一个完整的示例：</p>
<figure class="highlight vim"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">FEATCPL RPBUG TOFUNC FIX MODIGNORE</div><div class="line"></div><div class="line">FEATCPL:</div><div class="line"><span class="number">1</span>.初步完成了用户登陆功能 //LoginService.java</div><div class="line"><span class="number">2</span>.初步完成了用户注册功能 //SignupService.java</div><div class="line"></div><div class="line">REBUG:</div><div class="line"><span class="number">1</span>.登陆免验证时,在获取session变量时抛空指针异常  //LoginFilter.java(<span class="number">39</span>)</div><div class="line"></div><div class="line">TOFUNC:</div><div class="line"><span class="number">1</span>.用户名非法判断抽象成userNameRegExp()方法  //LoginFilter.java(<span class="number">46</span>-<span class="number">68</span>) LoginService.java(<span class="number">35</span>-<span class="number">57</span>)</div><div class="line"></div><div class="line">FIX：</div><div class="line"><span class="number">1.59</span>ad23do,表单重复提交,增加了session验证来防止表单重复提交 //BaseService.java</div><div class="line"></div><div class="line">MODIGNORE:*</div></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> thinking </category>
            
        </categories>
        
        
        <tags>
            
            <tag> tips </tag>
            
            <tag> github </tag>
            
            <tag> git </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Electron_打包你的HelloWorld为exe]]></title>
      <url>/post/e9787e5f.html</url>
      <content type="html"><![CDATA[<blockquote class="blockquote-center"><p>EXE什么的，看着就忍不住要双击它！</p>
</blockquote>
<a id="more"></a>
<h3 id="安装准备工具"><a href="#安装准备工具" class="headerlink" title="安装准备工具"></a>安装准备工具</h3><hr>
<p>首先介绍一下Electron打包应用的方式：</p>
<ul>
<li><p>打包成asar分发；这种方式弊端很多而且不好操作，<a href="https://electronjs.org/docs/tutorial/application-packaging" target="_blank" rel="external">详情见</a>。</p>
</li>
<li><p>重构官网提供的二进制release，这种方式也比较麻烦。</p>
</li>
<li><p>通过打包工具：</p>
<ul>
<li><a href="https://github.com/electron-userland/electron-forge" target="_blank" rel="external">electron-forge</a></li>
<li><a href="https://github.com/electron-userland/electron-builder" target="_blank" rel="external">electron-builder</a></li>
<li><a href="https://github.com/electron-userland/electron-packager" target="_blank" rel="external">electron-packager</a></li>
</ul>
</li>
<li><p>重编译源码二进制文件…</p>
</li>
</ul>
<p>这里我们选择傻瓜式的使用打包工具来生成包，其中前两种工具比较复杂，所以我选择地三种：<a href="https://github.com/electron-userland/electron-packager" target="_blank" rel="external">electron-packager</a></p>
<p>根据项目readme的说明，首先得安装electron-packager的模块：</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm insatll electron-packager -g</div></pre></td></tr></table></figure>
<p>对还是全局安装 不要怂。</p>
<h3 id="使用工具"><a href="#使用工具" class="headerlink" title="使用工具"></a>使用工具</h3><hr>
<p>要打包你的项目，你只需要运行下面格式的命令：<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">electron-packager &lt;sourcedir&gt; &lt;appname&gt; --platform=&lt;platform&gt; --arch=&lt;arch&gt; [optional flags...]</div></pre></td></tr></table></figure></p>
<p>里面的参数含义我们可以通过<a href="https://github.com/electron-userland/electron-packager/blob/master/usage.txt" target="_blank" rel="external">txt</a>进行简单的参考，或者在<a href="https://github.com/electron-userland/electron-packager/blob/master/docs/api.md" target="_blank" rel="external">md</a>进行深入研究。</p>
<p>推荐是看md的比较清晰一点</p>
<p>在上篇中，我们构造的helloworld的目录结构为：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">your-app/</div><div class="line">├── package.json</div><div class="line">├── main.js</div><div class="line">└── index.html</div></pre></td></tr></table></figure></p>
<p>在我们的演示中，我们运行的是这样的命令：<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">electron-packager . helloworldappname --out outputdir --electronVersion 1.7.9</div></pre></td></tr></table></figure></p>
<p>我们在项目目录根目录下运行了这个命令，所以第一个<code>.</code>代表的<code>&lt;sourcedir&gt;</code>是本目录，然后我们指定了<code>&lt;appname&gt;</code>为<code>helloworldappname</code>，然后我们指定了<code>--out</code>表示打包输出的目录，最后指定了我们使用的electron的版本号。</p>
<p>我没有指定<code>--platform</code>和<code>--arch</code>是因为这俩在默认的情况下是选取本机参数，比如我是win32x64。</p>
<p>但是每次打包都要写这巨长的命令，确实有点麻烦，我们可以使用npm的<code>run-script</code>功能去快速的执行写好的命令：</p>
<p>npm<code>run-script</code>是默认运行当前目录下<code>package.json</code>文件中script定义好的命令，具体的应用自己去学npm相关知识，我在项目的<code>package.json</code>文件中写好：<br><figure class="highlight json"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">  <span class="attr">"name"</span>: <span class="string">"helloworld"</span>,</div><div class="line">  <span class="attr">"version"</span>: <span class="string">"0.1.0"</span>,</div><div class="line">  <span class="attr">"main"</span>: <span class="string">"main.js"</span>,</div><div class="line">  <span class="attr">"scripts"</span>:&#123;</div><div class="line">    <span class="attr">"start"</span> : <span class="string">"electron ."</span>,</div><div class="line">    <span class="attr">"pk"</span>: <span class="string">"electron-packager . helloworldappname --out=outputdir --electronVersion=1.7.9"</span></div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>然后在根目录下运行命令：<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm run-script pk</div></pre></td></tr></table></figure></p>
<p>结果如下：<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line">youyinnn@DESKTOP-7KE7UCG MINGW64 /d/Users/bigyellow/electron/helloworld</div><div class="line"><span class="meta">$</span><span class="bash"> ll</span></div><div class="line">total 6</div><div class="line">-rw-r--r-- 1 youyinnn 197609  391 11月 22 22:00 index.html</div><div class="line">-rw-r--r-- 1 youyinnn 197609 1750 11月 22 22:00 main.js</div><div class="line">-rw-r--r-- 1 youyinnn 197609  211 11月 23 16:04 package.json</div><div class="line"></div><div class="line">youyinnn@DESKTOP-7KE7UCG MINGW64 /d/Users/bigyellow/electron/helloworld</div><div class="line"><span class="meta">$</span><span class="bash"> npm run-script pk</span></div><div class="line"></div><div class="line"><span class="meta">&gt;</span><span class="bash"> helloworld@0.1.0 pk D:\Users\bigyellow\electron\helloworld</span></div><div class="line"><span class="meta">&gt;</span><span class="bash"> electron-packager . helloworldappname --out=outputdir --electronVersion=1.7.9</span></div><div class="line"></div><div class="line">Packaging app for platform win32 x64 using electron v1.7.9</div><div class="line">Wrote new app to outputdir\helloworldappname-win32-x64</div><div class="line"></div><div class="line">youyinnn@DESKTOP-7KE7UCG MINGW64 /d/Users/bigyellow/electron/helloworld</div><div class="line"><span class="meta">$</span><span class="bash"> ll</span></div><div class="line">total 6</div><div class="line">-rw-r--r-- 1 youyinnn 197609  391 11月 22 22:00 index.html</div><div class="line">-rw-r--r-- 1 youyinnn 197609 1750 11月 22 22:00 main.js</div><div class="line">drwxr-xr-x 1 youyinnn 197609    0 11月 23 16:05 outputdir/</div><div class="line">-rw-r--r-- 1 youyinnn 197609  211 11月 23 16:04 package.json</div><div class="line"></div><div class="line">youyinnn@DESKTOP-7KE7UCG MINGW64 /d/Users/bigyellow/electron/helloworld</div><div class="line"><span class="meta">$</span><span class="bash"></span></div></pre></td></tr></table></figure></p>
<p>然后项目目录下会生成：<br><img src="http://image.youyinnn.cn/ba4fa76eb64909e4d4959799cf130547.png" alt="electronpk"></p>
<p>运行exe：<br><img src="http://image.youyinnn.cn/6420ae86e552fa8e6e1b0f7282f28ca4.png" alt="runexe"></p>
<hr>
<p>至此我们的HelloWorld的打包就完成了，可以发现虽然我们只是一个简单的html，但是整个包的大小却有131M，这是因为它还包含了chrome微引擎和其他的环境文件。</p>
<p><em>参考：<a href="https://electronjs.org/docs/tutorial/application-distribution" target="_blank" rel="external">https://electronjs.org/docs/tutorial/application-distribution</a></em><br><em>参考：<a href="https://github.com/electron-userland/electron-packager/blob/master/docs/api.md" target="_blank" rel="external">https://github.com/electron-userland/electron-packager/blob/master/docs/api.md</a></em><br><em>参考：<a href="http://blog.csdn.net/a1170201028/article/details/59108126" target="_blank" rel="external">http://blog.csdn.net/a1170201028/article/details/59108126</a></em></p>
]]></content>
      
        <categories>
            
            <category> note </category>
            
            <category> electron </category>
            
        </categories>
        
        
        <tags>
            
            <tag> electron </tag>
            
            <tag> helloworld </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Electron_一个HelloWorld]]></title>
      <url>/post/99e8346.html</url>
      <content type="html"><![CDATA[<blockquote class="blockquote-center"><p>惊！仅用前端技术就可以打造跨平台桌面应用！</p>
</blockquote>
<a id="more"></a>
<h3 id="快速入门"><a href="#快速入门" class="headerlink" title="快速入门"></a>快速入门</h3><hr>
<p>简单介绍一下什么是Electron：</p>
<blockquote>
<p>如果你只会前端技术，如果你想打造一个桌面应用，如果你不想学C#、Swing之类的技术，那么Electron绝对是你的不二之选。</p>
<p>它的本质就是提供一个轻巧的chrome内核（其实也有131M），把你的项目包在里面运行，等于是你项目的专属浏览器！</p>
<p>为什么想要使用这门技术，首先非常有趣，其次我只是个半吊子的前端选手，写项目完全不存在浏览器兼容性考虑这回事（我觉得兼容考虑就是前端开发届的一大毒瘤之一），我写的项目全部基于Chrome的V8，IE什么的傻逼浏览器我是不会去管的。因此你如果想要使用我的项目，要么使用Chrome，要么使用我项目打包成的桌面应用咯- -</p>
</blockquote>
<p>然后这篇基本就算官网<a href="https://electronjs.org/docs/tutorial/quick-start" target="_blank" rel="external">快速入门</a>的照搬</p>
<p>我开始上的是中文网，它的快速入门文档我觉得还是有点对菜鸟不友好，整个文档，居然没教怎么安装！</p>
<p>它只说是npm安装，但是没说具体安装哪一个！！这太不友好了！</p>
<p>关键Electron中文网并没有原官网的<code>博客</code>模块！！百度一下之后找到<a href="https://electronjs.org/blog/npm-install-electron" target="_blank" rel="external">此文</a>，里面提到怎么安装electron。</p>
<p>在这里提醒一下：</p>
<p><strong>千万不要</strong>使用Electron中文网：<a href="https://electron.org.cn/" target="_blank" rel="external">https://electron.org.cn/</a></p>
<p><strong>千万要</strong>使用原官网：<a href="https://electronjs.org/" target="_blank" rel="external">https://electronjs.org/</a></p>
<p>原官网也支持中文！中文网的内容有缺失！</p>
<p>所以我们可以正式开始了！</p>
<h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><hr>
<p>贴一个Electron的github项目地址：<a href="https://github.com/electron/electron" target="_blank" rel="external">https://github.com/electron/electron</a> ，里面有安装说明。</p>
<p>我觉得玩什么东西，安装才是第一步！</p>
<blockquote>
<p>环境准备：node.js以及npm是必须的，git就不用说了。</p>
</blockquote>
<p>然后以下命令进行全局安装（就全局，不要怂）：</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install electron --save-dev -g</div></pre></td></tr></table></figure>
<h3 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h3><hr>
<h4 id="主进程"><a href="#主进程" class="headerlink" title="主进程"></a>主进程</h4><blockquote>
<p>在 <code>Electron</code> 里，运行 <code>package.json</code> 里 <code>main</code> 脚本的进程被称为主进程。在主进程运行的脚本可以以创建 web 页面的形式展示 GUI。</p>
</blockquote>
<h4 id="渲染进程"><a href="#渲染进程" class="headerlink" title="渲染进程"></a>渲染进程</h4><blockquote>
<p>由于 <code>Electron</code> 使用 <code>Chromium</code> 来展示页面，所以 <code>Chromium</code> 的多进程结构也被充分利用。每个 <code>Electron</code> 的页面都在运行着自己的进程，这样的进程我们称之为渲染进程。</p>
<p>在一般浏览器中，网页通常会在沙盒环境下运行，并且不允许访问原生资源。然而，<code>Electron</code> 用户拥有在网页中调用 <code>Node.js</code> 的 <code>APIs</code> 的能力，可以与底层操作系统直接交互。</p>
</blockquote>
<h4 id="主进程与渲染进程的区别"><a href="#主进程与渲染进程的区别" class="headerlink" title="主进程与渲染进程的区别"></a>主进程与渲染进程的区别</h4><blockquote>
<p>主进程使用 <code>BrowserWindow</code> 实例创建页面。每个 <code>BrowserWindow</code> 实例都在自己的渲染进程里运行页面。当一个 <code>BrowserWindow</code> 实例被销毁后，相应的渲染进程也会被终止。</p>
<p>主进程管理所有页面和与之对应的渲染进程。每个渲染进程都是相互独立的，并且只关心他们自己的页面。</p>
<p>由于在页面里管理原生 <code>GUI</code> 资源是非常危险而且容易造成资源泄露，所以在页面调用 <code>GUI</code> 相关的 <code>APIs</code> 是不被允许的。如果你想在网页里使用 <code>GUI</code> 操作，其对应的渲染进程必须与主进程进行通讯，请求主进程进行相关的 <code>GUI</code> 操作。</p>
<p>在 <code>Electron</code>，我们提供几种方法用于主进程和渲染进程之间的通讯。像 <code>ipcRenderer</code> 和 <code>ipcMain</code> 模块用于发送消息， <code>remote</code> 模块用于 <code>RPC</code> 方式通讯。这些内容都可以在一个 FAQ 中查看 <a href="https://electron.org.cn/doc/faq.html#how-to-share-data-between-web-pages" target="_blank" rel="external">how to share data between web pages</a>。</p>
</blockquote>
<h3 id="HelloWorld"><a href="#HelloWorld" class="headerlink" title="HelloWorld"></a>HelloWorld</h3><hr>
<p>大体上，一个<code>Electron</code>应用的目录结构如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">your-app/</div><div class="line">├── package.json</div><div class="line">├── main.js</div><div class="line">└── index.html</div></pre></td></tr></table></figure></p>
<p><code>package.json</code>的格式和Node完全一致，而且被main字段声明的脚本文件是你的应用的启动脚本，它运行在主进程上。你应用里的<code>package.json</code>看起来应该：<br><figure class="highlight json"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">  <span class="attr">"name"</span>    : <span class="string">"your-app"</span>,</div><div class="line">  <span class="attr">"version"</span> : <span class="string">"0.1.0"</span>,</div><div class="line">  <span class="attr">"main"</span>    : <span class="string">"main.js"</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p><strong>注意：如果 main 字段没有在 package.json 声明，Electron会优先加载 index.js。</strong></p>
<p><code>main.js</code> 应该用于创建窗口和处理系统事件，一个典型的例子如下：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> &#123;app, BrowserWindow&#125; = <span class="built_in">require</span>(<span class="string">'electron'</span>)</div><div class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>)</div><div class="line"><span class="keyword">const</span> url = <span class="built_in">require</span>(<span class="string">'url'</span>)</div><div class="line"></div><div class="line"><span class="comment">// 保持一个对于 window 对象的全局引用，如果你不这样做，</span></div><div class="line"><span class="comment">// 当 JavaScript 对象被垃圾回收， window 会被自动地关闭</span></div><div class="line"><span class="keyword">let</span> win</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">createWindow</span> (<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="comment">// 创建浏览器窗口。</span></div><div class="line">  win = <span class="keyword">new</span> BrowserWindow(&#123;<span class="attr">width</span>: <span class="number">800</span>, <span class="attr">height</span>: <span class="number">600</span>&#125;)</div><div class="line"></div><div class="line">  <span class="comment">// 加载应用的 index.html。</span></div><div class="line">  win.loadURL(url.format(&#123;</div><div class="line">    pathname: path.join(__dirname, <span class="string">'index.html'</span>),</div><div class="line">    protocol: <span class="string">'file:'</span>,</div><div class="line">    slashes: <span class="literal">true</span></div><div class="line">  &#125;))</div><div class="line"></div><div class="line">  <span class="comment">// 打开开发者工具。</span></div><div class="line">  win.webContents.openDevTools()</div><div class="line"></div><div class="line">  <span class="comment">// 当 window 被关闭，这个事件会被触发。</span></div><div class="line">  win.on(<span class="string">'closed'</span>, () =&gt; &#123;</div><div class="line">    <span class="comment">// 取消引用 window 对象，如果你的应用支持多窗口的话，</span></div><div class="line">    <span class="comment">// 通常会把多个 window 对象存放在一个数组里面，</span></div><div class="line">    <span class="comment">// 与此同时，你应该删除相应的元素。</span></div><div class="line">    win = <span class="literal">null</span></div><div class="line">  &#125;)</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// Electron 会在初始化后并准备</span></div><div class="line"><span class="comment">// 创建浏览器窗口时，调用这个函数。</span></div><div class="line"><span class="comment">// 部分 API 在 ready 事件触发后才能使用。</span></div><div class="line">app.on(<span class="string">'ready'</span>, createWindow)</div><div class="line"></div><div class="line"><span class="comment">// 当全部窗口关闭时退出。</span></div><div class="line">app.on(<span class="string">'window-all-closed'</span>, () =&gt; &#123;</div><div class="line">  <span class="comment">// 在 macOS 上，除非用户用 Cmd + Q 确定地退出，</span></div><div class="line">  <span class="comment">// 否则绝大部分应用及其菜单栏会保持激活。</span></div><div class="line">  <span class="keyword">if</span> (process.platform !== <span class="string">'darwin'</span>) &#123;</div><div class="line">    app.quit()</div><div class="line">  &#125;</div><div class="line">&#125;)</div><div class="line"></div><div class="line">app.on(<span class="string">'activate'</span>, () =&gt; &#123;</div><div class="line">  <span class="comment">// 在这文件，你可以续写应用剩下主进程代码。</span></div><div class="line">  <span class="comment">// 也可以拆分成几个文件，然后用 require 导入。</span></div><div class="line">  <span class="keyword">if</span> (win === <span class="literal">null</span>) &#123;</div><div class="line">    createWindow()</div><div class="line">  &#125;</div><div class="line">&#125;)</div><div class="line"></div><div class="line"><span class="comment">// 在这文件，你可以续写应用剩下主进程代码。</span></div><div class="line"><span class="comment">// 也可以拆分成几个文件，然后用 require 导入。</span></div></pre></td></tr></table></figure></p>
<p>最后，你想展示的 <code>index.html</code>：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Hello World!<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Hello World!<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></div><div class="line">    We are using node <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"><span class="built_in">document</span>.write(process.versions.node)</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span>,</div><div class="line">    Chrome <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"><span class="built_in">document</span>.write(process.versions.chrome)</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span>,</div><div class="line">    and Electron <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"><span class="built_in">document</span>.write(process.versions.electron)</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span>.</div><div class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure></p>
<h3 id="Run-HelloWorld"><a href="#Run-HelloWorld" class="headerlink" title="Run HelloWorld"></a>Run HelloWorld</h3><hr>
<p>一旦你创建了最初的 <code>main.js</code>， <code>index.html</code> 和<code>package.json</code> 这几个文件，你可能会想尝试在本地运行并测试，看看是不是和期望的那样正常运行。</p>
<p>安装文档说明，运行electron应用的方式有两种：</p>
<ul>
<li>npm安装electron模块 使用模块运行</li>
<li>直接使用二进制文件运行</li>
</ul>
<p>如果你没有nodejs环境，你可以考虑使用二进制文件运行应用。</p>
<p>使用模块去运行electron应用的命令是这样的：</p>
<p><em>electron 是一个 npm 模块，包含所使用的 Electron 预编译版本。 如果你已经用 npm 全局安装了它，你只需要按照如下方式直接运行你的应用：</em></p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">electron .</div></pre></td></tr></table></figure>
<p>下面是我自己的演示：</p>
<ul>
<li><p>目录结构：<br><img src="http://image.youyinnn.cn/302c77ea7393fa19e487b69fc98ec917.png" alt="electron1"></p>
</li>
<li><p>运行：<br><img src="http://image.youyinnn.cn/e003ac2bb2e4383b892641cba60ba100.png" alt="electron2"></p>
</li>
<li><p>界面：<br><img src="http://image.youyinnn.cn/7617fb5337cfd6d0e19a74b1a7968cc9.png" alt="electron3"></p>
</li>
</ul>
<hr>
<p>然后官网里还给了一个quickstar项目，那个项目没必要跑了，内容基本和上面的HelloWorld是一样的。</p>
<p>这样Electron的HelloWorld的体验已经完成了！前端变桌面应用的感觉巨奇妙！超级期待后面的学习！</p>
]]></content>
      
        <categories>
            
            <category> note </category>
            
            <category> electron </category>
            
        </categories>
        
        
        <tags>
            
            <tag> electron </tag>
            
            <tag> helloworld </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Log4j2_Appenders]]></title>
      <url>/post/7e4ab26f.html</url>
      <content type="html"><![CDATA[<blockquote class="blockquote-center"><p>上篇介绍了使用Log4j2之前的准备工作和简单介绍了一个HelloWorld</p>
<p>现在我们来了解配置中的第一个关键配置：Appenders</p>
</blockquote>
<a id="more"></a>
<p>官方文档给出的可用的Appender非常多：有Async（异步输出）、Console（控制台输出）、File（文件输出）、甚至还有JDBC和HTTP等24种输出源方式，然而我日常使用的就几个：Console、RollingFile；一个作为本地host调试的时候log，一个作为远程主机调试的时候写log。其他的我就不仔细去研究了。</p>
<hr>
<h3 id="ConsoleAppender"><a href="#ConsoleAppender" class="headerlink" title="ConsoleAppender"></a>ConsoleAppender</h3><p><code>ConsoleAppender</code>，使用的是<code>System.out</code>或者<code>System.err</code>作为输出源，把log打印在控制台上，默认的情况下使用的是<code>System.out</code>。</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">Console</span> <span class="attr">name</span>=<span class="string">"Console"</span> <span class="attr">target</span>=<span class="string">"SYSTEM_OUT"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">PatternLayout</span> <span class="attr">pattern</span>=<span class="string">"%d&#123;HH:mm:ss.SSS&#125; [%t] %-5level %logger&#123;36&#125; - %msg%n"</span>/&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">Console</span>&gt;</span></div></pre></td></tr></table></figure>
<h4 id="常用属性"><a href="#常用属性" class="headerlink" title="常用属性"></a>常用属性</h4><ul>
<li>name ：string：appender的名字</li>
<li>target：string：指定输出对象：可选<code>SYSTEM_OUT</code>或<code>SYSTEM_ERR</code>，默认是前者。</li>
</ul>
<hr>
<h3 id="FileAppender"><a href="#FileAppender" class="headerlink" title="FileAppender"></a>FileAppender</h3><p>FileAppender是一个输出流输出源，它可以根据你指定的文件命名去创建一个文件。FileAppender使用FileManager（继承自<code>OutputStreamManager</code>）来执行文件输入输出。</p>
<h4 id="常用属性-1"><a href="#常用属性-1" class="headerlink" title="常用属性"></a>常用属性</h4><ul>
<li>name ：string：appender的名字</li>
<li>append：boolean：默认为true，此时输出记录会被添加在原有文件的文末，否则会清空之前的log重新输出。</li>
<li>fileName：string：输出文件的名字</li>
</ul>
<p>还有一些属性包括：缓冲流的设置、文件在linux系统下的组、用户、权限等。</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">File</span> <span class="attr">name</span>=<span class="string">"MyFile"</span> <span class="attr">fileName</span>=<span class="string">"logs/app.log"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">PatternLayout</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">Pattern</span>&gt;</span>%d %p %c&#123;1.&#125; [%t] %m%n<span class="tag">&lt;/<span class="name">Pattern</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">PatternLayout</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">File</span>&gt;</span></div></pre></td></tr></table></figure>
<hr>
<h3 id="RandomAccessFileAppender"><a href="#RandomAccessFileAppender" class="headerlink" title="RandomAccessFileAppender"></a>RandomAccessFileAppender</h3><p>RandomAccessFileAppender和标准的FileAppender很像，只不过RandomAccessFileAppender总是以缓冲的形式输出（并且不能关闭缓冲流），在其内部实现中，它使用<code>ByteBuffer + RandomAccessFile</code>去代替了<code>BufferedOutputStream</code>。它的性能比FileAppender能高出20%~200%。</p>
<h4 id="常用属性-2"><a href="#常用属性-2" class="headerlink" title="常用属性"></a>常用属性</h4><ul>
<li>name ：string：appender的名字</li>
<li>append：boolean：默认为true，此时输出记录会被添加在原有文件的文末，否则会清空之前的log重新输出。</li>
<li>fileName：string：输出文件的名字</li>
<li>bufferSize：ingeger：默认是256*1024 btyes</li>
</ul>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">RandomAccessFile</span> <span class="attr">name</span>=<span class="string">"MyFile2"</span> <span class="attr">fileName</span>=<span class="string">"logs/app2.log"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">PatternLayout</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">Pattern</span>&gt;</span>%d %p %c&#123;1.&#125; [%t] %m%n<span class="tag">&lt;/<span class="name">Pattern</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">PatternLayout</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">RandomAccessFile</span>&gt;</span></div></pre></td></tr></table></figure>
<hr>
<h3 id="RollingFileAppender（重点）"><a href="#RollingFileAppender（重点）" class="headerlink" title="RollingFileAppender（重点）"></a>RollingFileAppender（重点）</h3><p>RollingFileAppender是最常用的输出流，它可以根据<code>TrggeringPolicy(触发策略)</code>和<code>RolloverPolicy(切换策略)</code>来切换不同的日志文件，以达到可定制度更高的分类日志文件输出。</p>
<p>RollingFileAppender要求指定<code>TriggeringPolicy</code>和<code>RolloverStrategy</code>。触发策略决定了当切换策略定义好如何切换的时候，是否执行切换。如果没有指定切换策略，那么RollingFileAppender会使用默认的切换策略。</p>
<h4 id="常用属性-3"><a href="#常用属性-3" class="headerlink" title="常用属性"></a>常用属性</h4><ul>
<li>name ：string：appender的名字</li>
<li>append：boolean：默认为true，此时输出记录会被添加在原有文件的文末，否则会清空之前的log重新输出。</li>
<li>fileName：string：输出文件的名字</li>
<li>filePattern：string：切换日志文件时使用的文件名模式，默认的切换策略会使用时间和日期以及一个int标号，其中日期pattern可以参考<a href="http://download.oracle.com/javase/7/docs/api/java/text/SimpleDateFormat.html" target="_blank" rel="external">SimpleDateFormat</a>，标号使用<code>%i</code>匹配。模式同样支持获取运行时的值，所以任何实时取值的Lookups（比如<a href="https://logging.apache.org/log4j/2.x/manual/lookups.html#DateLookup" target="_blank" rel="external">DateLookup</a>）</li>
<li>filePermissions：string：文件权限，POSIX格式，例如“rw——-”</li>
<li>fileOwner：string：文件所有者</li>
<li>fileGroup：string：文件所属组</li>
</ul>
<h4 id="Triggering-Policies-触发策略"><a href="#Triggering-Policies-触发策略" class="headerlink" title="Triggering Policies 触发策略"></a>Triggering Policies 触发策略</h4><h5 id="Composite-Triggering-Policy-复合触发策略"><a href="#Composite-Triggering-Policy-复合触发策略" class="headerlink" title="Composite Triggering Policy 复合触发策略"></a>Composite Triggering Policy 复合触发策略</h5><p>这种触发策略连接了多个触发策略，如果其中一项策略返回true，则整个复合触发策略返回true，CompositeTriggeringPolicy可以使用一个<code>Policies</code>元素来简单配置。</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">Policies</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">OnStartupTriggeringPolicy</span> /&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">SizeBasedTriggeringPolicy</span> <span class="attr">size</span>=<span class="string">"20 MB"</span> /&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">TimeBasedTriggeringPolicy</span> /&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">Policies</span>&gt;</span></div></pre></td></tr></table></figure>
<h5 id="Cron-Triggering-Policies-Cron触发策略"><a href="#Cron-Triggering-Policies-Cron触发策略" class="headerlink" title="Cron Triggering Policies Cron触发策略"></a>Cron Triggering Policies Cron触发策略</h5><p>使用cron表达式来进行切换触发</p>
<p>属性：</p>
<ul>
<li>schedule：string：cron表达式</li>
<li>evaluateOnStartup：boolean：在项目启动的时候，cron表达式会对日志文件最后的修改时间戳进行评估，看是否立即切换日志文件。</li>
</ul>
<h5 id="On-Startup-Triggering-Policy-启动触发策略"><a href="#On-Startup-Triggering-Policy-启动触发策略" class="headerlink" title="On Startup Triggering Policy 启动触发策略"></a>On Startup Triggering Policy 启动触发策略</h5><p>项目JVM启动的时候即触发策略</p>
<p>属性：</p>
<ul>
<li>mixSize：integer：必须切换的最小文件size，如果是0，则立即切换；默认的值是1，防止在当前日志文件为空的时候切换。</li>
</ul>
<h5 id="SizeBased-Triggering-Policy-文件体积触发策略"><a href="#SizeBased-Triggering-Policy-文件体积触发策略" class="headerlink" title="SizeBased Triggering Policy 文件体积触发策略"></a>SizeBased Triggering Policy 文件体积触发策略</h5><p>根据文件大小切换</p>
<p>属性：</p>
<ul>
<li>size：integer：到了某个size之后即切换，需要使用KB、MB、GB等后缀描述，如<code>20MB</code></li>
</ul>
<h5 id="TimeBased-Triggering-Policy-时间触发策略"><a href="#TimeBased-Triggering-Policy-时间触发策略" class="headerlink" title="TimeBased Triggering Policy 时间触发策略"></a>TimeBased Triggering Policy 时间触发策略</h5><p>根据时间切换，这种切换会在 date/time 模式无法运用在当前激活的文件的时候生效。这个策略接受一个<code>interval</code>属性，这个属性回根据当前的time pattern以及<code>modulate</code>这个布尔属性来决定切换文件的频繁程度。</p>
<p>属性：</p>
<ul>
<li>interval：integer：根据date pattern里特定的时间单位决定多久切换一次日志文件。比如date pattren里最精确的单位是hour，然后增量是4，那么会每4小时切换一次，默认的值是1。</li>
<li>modulate：boolean：决定当下一次切换时间出现在时间间隔的边缘的时候，是否校正时间间隔。比如，如果是hour，当前时间是3am，然后interval是4，那么下一次切换时间是4am，再下一次就是8am，再就是午时等等。</li>
<li>maxRandomDelay：integer：决定延迟切换的最大延迟秒数。默认是0，没有延迟。当服务器中有多个项目配置了同一时间输出日志的时候会非常有用，这会减缓io压力，加快io速度。</li>
</ul>
<h4 id="Rollover-Strategies-切换策略"><a href="#Rollover-Strategies-切换策略" class="headerlink" title="Rollover Strategies 切换策略"></a>Rollover Strategies 切换策略</h4><h5 id="Default-Rollover-Strategy-默认的切换策略"><a href="#Default-Rollover-Strategy-默认的切换策略" class="headerlink" title="Default Rollover Strategy 默认的切换策略"></a>Default Rollover Strategy 默认的切换策略</h5><p>默认的切换策略可以同时接收date/time pattern以及一个从filePattern属性中指定的integer参数。如果提供了date/time pattern，则会被替换为日期和时间值。如果pattern里有integer值，那么每次切换就会增加1。pattern里还可以写gz、zip、bz2等后缀。</p>
<p>属性：</p>
<ul>
<li>fileIndex：string：如果设置了max属性，大的index值的文件会比小index值的文件新。如果设置了min，文件重命名以及index计数器会跟随”<a href="https://logging.apache.org/log4j/2.x/manual/appenders.html#RolloverStrategies" target="_blank" rel="external">fixed window</a>“策略。</li>
<li>min：integer：计数器的最小值，默认值是1</li>
<li>max：integer：计数器的最大值，如果达到了这个值，那么会删除掉最早创建的那一个日志文件，默认值是7</li>
<li>compressionLevel：integer：压缩等级，针对压缩文件而言，取值0-9，0则无压缩，1是最快的速度生成压缩文件，9是最好的压缩率</li>
<li>tempCompressedFilePattern：string：在压缩期间生成的log文件名pattern</li>
</ul>
<p><em>后面还有更多的自定义策略细节，我就不一一说了，我感觉更详细的日志定制方案比如定时删除和执行script等，没有什么必要，可能是我当前能接触到的场景规模有限。</em></p>
<p>和FileAppender一样，RollingFileAppender也有对应的缓冲流版本。</p>
<hr>
<h3 id="RollingRandomAccessFileAppender（最常用）"><a href="#RollingRandomAccessFileAppender（最常用）" class="headerlink" title="RollingRandomAccessFileAppender（最常用）"></a>RollingRandomAccessFileAppender（最常用）</h3><p>这个就是RollingFileAppender的升级版，也是最常用的版本，它的属性、策略和前面的RollingFileAppender以及RandomAccessFileAppender一致，参考前面的就好了。</p>
<h4 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h4><h5 id="1"><a href="#1" class="headerlink" title="1"></a>1</h5><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">RollingRandomAccessFile</span> <span class="attr">name</span>=<span class="string">"RollingFile"</span> <span class="attr">fileName</span>=<span class="string">"logs/a.log"</span></span></div><div class="line"><span class="tag">             <span class="attr">filePattern</span>=<span class="string">"logs/$$&#123;date:yyyy-MM&#125;/a-%d&#123;yyyy-MM-dd-HH-mm&#125;-%i.log"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">PatternLayout</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">Pattern</span>&gt;</span>%d %p %c&#123;1.&#125; [%t] %m%n<span class="tag">&lt;/<span class="name">Pattern</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">PatternLayout</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">Policies</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">TimeBasedTriggeringPolicy</span> /&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">SizeBasedTriggeringPolicy</span> <span class="attr">size</span>=<span class="string">"250 MB"</span>/&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">Policies</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">RollingRandomAccessFile</span>&gt;</span></div></pre></td></tr></table></figure>
<p>触发策略：</p>
<p>1、按照时间切换：由于<code>filePattern</code>属性中配置的最精确的time pattern是<code>mm</code>即Minute in hour，且这条触发策略没有指定interval，那么默认是1分钟切换一次。</p>
<p>2、根据size切换，如果按照上一条的策略，在1分钟内产生超过250MB的日志，则切换，且<code>%i</code>加一。</p>
<p>切换策略：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">filePattern=<span class="string">"logs/%d&#123;yyyy-MM&#125;/a-%d&#123;yyyy-MM-dd-HH-mm&#125;-%i.log"</span></div></pre></td></tr></table></figure>
<p>在logs文件夹下，<code>%d{yyyy-MM}</code>按照月份建立一级文件夹，一月一个文件夹，然后月份里按照触发策略的约束去执行切换策略进行日志文件的切换。</p>
<h5 id="2"><a href="#2" class="headerlink" title="2"></a>2</h5><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">RollingRandomAccessFile</span> <span class="attr">name</span>=<span class="string">"RollingFile"</span> <span class="attr">fileName</span>=<span class="string">"logs/a.log"</span></span></div><div class="line"><span class="tag">             <span class="attr">filePattern</span>=<span class="string">"logs/$$&#123;date:yyyy-MM&#125;/a-%d&#123;yyyy-MM-dd-HH-mm&#125;-%i.log"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">PatternLayout</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">Pattern</span>&gt;</span>%d %p %c&#123;1.&#125; [%t] %m%n<span class="tag">&lt;/<span class="name">Pattern</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">PatternLayout</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">Policies</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">TimeBasedTriggeringPolicy</span> /&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">SizeBasedTriggeringPolicy</span> <span class="attr">size</span>=<span class="string">"250 MB"</span>/&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">Policies</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">DefaultRolloverStrategy</span> <span class="attr">max</span>=<span class="string">"20"</span>/&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">RollingRandomAccessFile</span>&gt;</span></div></pre></td></tr></table></figure>
<p>比1多指定了一个默认切换策略属性<code>max</code>：最大保留20个log文件</p>
<hr>
<h3 id="SMTPAppender"><a href="#SMTPAppender" class="headerlink" title="SMTPAppender"></a>SMTPAppender</h3><p>能给你发邮件的Appender，这个也挺有意思的，<a href="https://logging.apache.org/log4j/2.x/manual/appenders.html#SMTPAppender" target="_blank" rel="external">参考</a>。</p>
<hr>
<p>常用的Appender就介绍这么多，下一节介绍Layout pattern。</p>
]]></content>
      
        <categories>
            
            <category> note </category>
            
            <category> toolslearning </category>
            
            <category> log4j2 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> log4j2 </tag>
            
            <tag> learning </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Log4j2_HelloWorld]]></title>
      <url>/post/6cdb73.html</url>
      <content type="html"><![CDATA[<blockquote class="blockquote-center"><p>Lo4j2是啥就不解释了，之前无论是使用log4j还是log4j2，同样只是简单的各种百度然后复制粘贴没有系统的总结一下，今天把一个小小的Ajax的测试程序放服务器上面都不知道怎么查错，然后想写一下log来看看哪错了吧，发现还是不会独立配置log4j，于是想总结一波。基本的思路是总结官方文档和官方推荐的中文文档，尽量简洁表达出原理以及应用。</p>
</blockquote>
<a id="more"></a>
<hr>
<h3 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h3><h4 id="Maven依赖"><a href="#Maven依赖" class="headerlink" title="Maven依赖"></a>Maven依赖</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.logging.log4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>log4j-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.9.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.logging.log4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>log4j-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.9.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></div></pre></td></tr></table></figure>
<p>认准这俩依赖</p>
<h4 id="默认配置文件-如果配置文件缺省的情况下，也会是这样的配置"><a href="#默认配置文件-如果配置文件缺省的情况下，也会是这样的配置" class="headerlink" title="默认配置文件(如果配置文件缺省的情况下，也会是这样的配置)"></a>默认配置文件(如果配置文件缺省的情况下，也会是这样的配置)</h4><p>配置文件需要放在classpath的根目录下（一般的项目是src，maven web项目则是推荐在resource下），以log4j2.xml命名，配置文件还有其他的配置形式如json和yaml，我习惯使用xml。</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</div><div class="line"><span class="tag">&lt;<span class="name">configuration</span> <span class="attr">status</span>=<span class="string">"OFF"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">appenders</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">Console</span> <span class="attr">name</span>=<span class="string">"Console"</span> <span class="attr">target</span>=<span class="string">"SYSTEM_OUT"</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">PatternLayout</span> <span class="attr">pattern</span>=<span class="string">"%d&#123;HH:mm:ss.SSS&#125; [%t] %-5level %logger&#123;36&#125; - %msg%n"</span>/&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">Console</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">appenders</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">loggers</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">root</span> <span class="attr">level</span>=<span class="string">"error"</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">"Console"</span>/&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">root</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">loggers</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></div></pre></td></tr></table></figure>
<h4 id="HelloWord"><a href="#HelloWord" class="headerlink" title="HelloWord"></a>HelloWord</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">        Logger logger = LogManager.getLogger(LogManager.ROOT_LOGGER_NAME);</div><div class="line">        logger.trace(<span class="string">"trace level"</span>);</div><div class="line">        logger.debug(<span class="string">"debug level"</span>);</div><div class="line">        logger.info(<span class="string">"info level"</span>);</div><div class="line">        logger.warn(<span class="string">"warn level"</span>);</div><div class="line">        logger.error(<span class="string">"error level"</span>);</div><div class="line">        logger.fatal(<span class="string">"fatal level"</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<hr>
<h3 id="运行HelloWorld"><a href="#运行HelloWorld" class="headerlink" title="运行HelloWorld"></a>运行HelloWorld</h3><p>运行上面的代码之后会出现如下的log<br><figure class="highlight cmd"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="number">13</span>:<span class="number">34</span>:<span class="number">41</span>.<span class="number">070</span> [main] ERROR mylog - error level</div><div class="line"><span class="number">13</span>:<span class="number">34</span>:<span class="number">41</span>.<span class="number">072</span> [main] FATAL mylog - fatal level</div></pre></td></tr></table></figure></p>
<p>你会很奇怪，为什么我们写了这么多log，却只出现两行log信息，我们去看看我们的配置文件：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</div><div class="line"><span class="tag">&lt;<span class="name">configuration</span> <span class="attr">status</span>=<span class="string">"OFF"</span>&gt;</span></div><div class="line">  <span class="comment">&lt;!-- 这里定义了一个appenders --&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">appenders</span>&gt;</span></div><div class="line">      <span class="comment">&lt;!-- appenders里面配置了一个Console --&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">Console</span> <span class="attr">name</span>=<span class="string">"Console"</span> <span class="attr">target</span>=<span class="string">"SYSTEM_OUT"</span>&gt;</span></div><div class="line">          <span class="comment">&lt;!-- 这是输出格式 --&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">PatternLayout</span> <span class="attr">pattern</span>=<span class="string">"%d&#123;HH:mm:ss.SSS&#125; [%t] %-5level %logger&#123;36&#125; - %msg%n"</span>/&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">Console</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">appenders</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="comment">&lt;!-- 然后就是定义loggers --&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">loggers</span>&gt;</span></div><div class="line">      <span class="comment">&lt;!-- 这是根logger 是所有自定义logger的父logger --&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">root</span> <span class="attr">level</span>=<span class="string">"error"</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">"Console"</span>/&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">root</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">loggers</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></div></pre></td></tr></table></figure>
<p>首先看我们的Java代码：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Logger logger = LogManager.getLogger(LogManager.ROOT_LOGGER_NAME);</div></pre></td></tr></table></figure>
<p>这一行是获取我们在配置文件中配置好的root logger，然后使用这个logger去打印了6条日志。</p>
<p>然后解释一下单词含义（my style~）：</p>
<blockquote>
<p>Appender：<br><em>n.</em> 附着器,输出目的地,输出源；</p>
</blockquote>
<p>它的子元素Console，代表的是控制台，所以很明显就是，我们配置了一个以控制台作为输出源的输出源；并将这个输出源命名为<code>Console</code>，然后配置了这个控制台输出源的输出Pattern。</p>
<p>然后我们在<code>loggers</code>里面配置了一个logger：<code>root</code>，这个节点代表所有logger的根logger，然后log级别定为<code>error</code>，意思是<strong>只输出error级别以下包括error的日志信息</strong>，之后这个根log的输出源引用的是<code>name</code>值为<code>Console</code>的Appender，也即我们配置的唯一一个Appender。</p>
<p>那么error以下是哪些信息？</p>
<blockquote>
<hr>
<p>log4j规定了默认的几个级别：<code>trace &lt; debug &lt; info &lt; warn &lt; error &lt; fatal</code>等。这里要说明一下：</p>
<ol>
<li><p>级别之间是包含的关系，意思是如果你设置日志级别是trace，则大于等于这个级别的日志都会输出。</p>
</li>
<li><p>基本上默认的级别没多大区别，就是一个默认的设定。你可以通过它的API自己定义级别。你也可以随意调用这些方法，不过你要在配置文件里面好好处理了，否则就起不到日志的作用了，而且也不易读，相当于一个规范，你要完全定义一套也可以，不用没多大必要。</p>
</li>
</ol>
<hr>
<ul>
<li><p>trace： 是追踪，就是程序推进以下，你就可以写个trace输出，所以trace应该会特别多，不过没关系，我们可以设置最低日志级别不让他输出。</p>
</li>
<li><p>debug： 调试么，我一般就只用这个作为最低级别，trace压根不用。是在没办法就用eclipse或者idea的debug功能就好了么。</p>
</li>
<li><p>info： 输出一下你感兴趣的或者重要的信息，这个用的最多了。</p>
</li>
<li><p>warn： 有些信息不是错误信息，但是也要给程序员的一些提示，类似于eclipse中代码的验证不是有error 和warn。</p>
</li>
<li><p>error： 错误信息。用的也比较多。</p>
</li>
<li><p>fatal： 级别比较高了。重大错误，这种级别你可以直接停止程序了，是不应该出现的错误么！不用那么紧张，其实就是一个程度的问题。</p>
</li>
</ul>
<hr>
</blockquote>
<p>到这里我们就知道，为什么会只打印两条log了，打印的两条log分别是：error级别以及fatal级别的log。</p>
<hr>
<p><em>参考：<a href="http://www.cnblogs.com/leo-lsw/p/log4j2tutorial.html" target="_blank" rel="external">http://www.cnblogs.com/leo-lsw/p/log4j2tutorial.html</a></em></p>
<p><em>参考：<a href="https://my.oschina.net/xianggao/blog/523401" target="_blank" rel="external">https://my.oschina.net/xianggao/blog/523401</a></em></p>
]]></content>
      
        <categories>
            
            <category> note </category>
            
            <category> toolslearning </category>
            
            <category> log4j2 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> log4j2 </tag>
            
            <tag> learning </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[RegExp_2_metacharacters]]></title>
      <url>/post/591f5cd1.html</url>
      <content type="html"><![CDATA[<blockquote class="blockquote-center"><p>Metacharacters：元字符</p>
</blockquote>
<a id="more"></a>
<h3 id="元字符的解释"><a href="#元字符的解释" class="headerlink" title="元字符的解释"></a>元字符的解释</h3><p>完整的正则表达式由两种字符组成：</p>
<ul>
<li>特殊字符，即<code>元字符</code>，它们一般具有特殊的含义，并不匹配字面字符。</li>
<li>文字，即普通<code>文本字符</code>，匹配的就是字面字符。</li>
</ul>
<hr>
<h4 id="行的起始和结束"><a href="#行的起始和结束" class="headerlink" title="行的起始和结束"></a>行的起始和结束</h4><blockquote>
<p><code>^</code> 脱字符号，在检查一行文本的时候，<code>^</code>代表一行的开始。</p>
<p><code>$</code> 美元符号，在检查一行文本的时候，<code>$</code>代表一行的结束。</p>
</blockquote>
<ul>
<li><code>^cat</code> ：表示匹配以cat开头的行，如categories</li>
<li><code>cat$</code> ：表示匹配以\$结尾的行，如aaaacat</li>
</ul>
<p>我们以更机械的方式去解读第一个例子：<code>^cat</code> 匹配的是以c作为一行的第一个字符，紧接着c后面是a，a后面紧接着t的文本。</p>
<p>这两个符号的特殊之处就在于，它们匹配的只是位置，而不是特定的文本。</p>
<hr>
<h4 id="字符组"><a href="#字符组" class="headerlink" title="字符组"></a>字符组</h4><h5 id="匹配若干字符之一"><a href="#匹配若干字符之一" class="headerlink" title="匹配若干字符之一"></a>匹配若干字符之一</h5><p>这里需要引入一个概念：正则表达式结构体（construct）<code>[...]</code>。它允许使用者列出在某处期望匹配的字符的候选值，通常也被称为字符组。</p>
<p>比如当我们不确定是要匹配grey还是gray的时候，我们可以这样写<code>gr[ae]y</code>，它想表达的意思是：匹配一段文本，它是先有一个g，g后是一个r，r后可以是a或者e其中之一，然后就是一个y。</p>
<p>在<code>gr[ae]y</code>中，<code>g</code>或者<code>r</code>、<code>y</code>这样的表达式，它们被解释为：g后面紧跟着、r后面紧跟着这样的“接下来（and then）”的含义，而在<code>[ae]</code>中，里面的字符被解释为：这个结构体的位置被替换为a或者是e。</p>
<p>我们还有可能遇到的场景是，<code>[123456789]</code>甚至是26个字母全用上的情况，这个时候我们可以使用<strong>字符组元字符</strong><code>-</code>（连接符）来表示一个范围，比如<code>[1-9]</code>和<code>[123456789]</code>是完全相等的。同时还支持多重范围比如<code>[a-h1-6F-I]</code>和<code>[abcdefg123456FGHI]</code>等效。</p>
<p>还可以在字符组里面使用普通文本[_.!?]可以匹配下划线或者点或者感叹号或者问号。</p>
<p><strong>需要注意的是：只有在字符组内部，并且能够表示特定范围含义，比如1到9，a到z这样的范围，连字符才是元字符，在其他情况下它只能匹配普通的连字符号。而在字符组内的问号和点号则是匹配一般的符号，它们在组内不是元字符，在组外是元字符。这有点像正常语言中，某个单词在不同的语境中有不同的解释一样，我私称这样的情况为<code>语境分意</code></strong></p>
<h5 id="排除型字符组"><a href="#排除型字符组" class="headerlink" title="排除型字符组"></a>排除型字符组</h5><p>还有一种字符组形如：<code>[^...]</code>，这个字符组会匹配任何<strong>未</strong>列出的字符。例如<code>[^1-6]</code>匹配除了1到6以外的任何字符。</p>
<p>你可能已经注意到了，<code>^</code>脱字符在组内和组外的含义的不一样的，由此我们了解到，<strong>元字符会根据环境的不同而改变它所要表达的含义。</strong></p>
<blockquote>
<p>书例：<code>q[^u]</code>是否能匹配<code>Iraq</code>？</p>
<p>我们机械地解读表达式：q后面紧跟一个除了u以外的字符。注意是“后面紧跟”，所以这就意味着，q字符绝对不是最后一个字母。</p>
<p>因此我们知道：一个字符组，即使是排除型的字符组，也必须匹配一个字符。</p>
</blockquote>
<h5 id="点号匹配任意字符"><a href="#点号匹配任意字符" class="headerlink" title="点号匹配任意字符"></a>点号匹配任意字符</h5><p>元字符<code>.</code>是用来匹配任意字符的字符组的简便写法，注意是<strong>字符组</strong>的便捷写法。如果我们要搜索03/19/76、03-19-76、03.19.76，一般的的做法是写<code>03[-/.]19[-/.]76</code>来让字符组匹配一个减号或者斜杠或者英文句号，我们也可以这样写<code>03.19.76</code>。这里又出现<strong>语境分意</strong>的情况了，<code>.</code>在字符组内外的含义不同，而<code>-</code>在字符组内的位置不同语义也不同，如果写成<code>[.-/]</code>，则是用来表示范围的，这里需要特别留心。</p>
<hr>
<h4 id="多选结构"><a href="#多选结构" class="headerlink" title="多选结构"></a>多选结构</h4><h5 id="匹配任意子表达式"><a href="#匹配任意子表达式" class="headerlink" title="匹配任意子表达式"></a>匹配任意子表达式</h5><p><code>|</code>是一个非常简洁的元字符，它等于布尔运算里面的“或（or）”。比如<code>Bob</code>和<code>Robert</code>是两个表达式，但<code>Bob|Robert</code>就是一个表达式，但是可以匹配里面两种情况。这样的组合称之为“多选分支（alternative）”。</p>
<p>我们之前的<code>gr[ea]y</code>可以写成<code>grey|gray</code>，或者是<code>gr(a|e)y</code>，最后这种情况用括号来划定多选结构的范围（一般情况下，括号也是元字符）。同样值得注意的是，如果我们写成<code>gr[e|a]y</code>，那么这里面的<code>|</code>就并不代表或而是代表“|”符号本身。</p>
<p>在表达式<code>gr(a|e)y</code>中，括号是必须的，如果没有括号，<code>gre|ay</code>就变成了匹配<code>gre</code>或者<code>ay</code>了。<strong>多选结构可以包含很多字符，但是不能超过括号的界限。</strong> 再举一个例子：<code>(Fir|1)st [Ss]treet</code>可以匹配<code>First Street</code>、<code>First street</code>、<code>1st Street</code>、<code>1st street</code>等。</p>
<p>再一次强调，多选结构和字符组的区别是：<strong>字符组只能匹配一个字符，但是多选结构可以匹配多个字符！</strong></p>
<h4 id="可选项元素"><a href="#可选项元素" class="headerlink" title="可选项元素"></a>可选项元素</h4><p>比如color和colour，其中只有一个u的区别，我们可以用<code>colou?r</code>这样的表达式来解决，<code>?</code>元字符代表可选，它代表前面一个字母是可选的匹配项。</p>
<p><code>?</code>只作用与之前紧邻的元素，所以我们让机械来读这个表达式则是：<code>c</code>，然后<code>o</code>然后<code>l</code>然后<code>o</code>然后<code>u?</code>最后<code>r</code>。</p>
<p>比较特别的是，<code>u?</code>这样的表达式是永远都能匹配成功的，它可以匹配以个u，也可以什么都不匹配。</p>
]]></content>
      
        <categories>
            
            <category> note </category>
            
            <category> booknote </category>
            
            <category> 《Mastering Regular Expression(Third Edition)》 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> learning </tag>
            
            <tag> RegExp </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[RegExp_1_overview]]></title>
      <url>/post/8f39708b.html</url>
      <content type="html"><![CDATA[<p><em>引言：接触计算机编程以来，无数次碰到过这个名词“正则表达式”，刚开始肯定是不懂，但是听到“表达式”三个字就发现事情并不简单。</em></p>
<a id="more"></a>
<p><em>第一次接触到它还是在我进NTJ2EE的招新机试的时候，机试题有一道题：“有一个字符串，其中包含中文字符、英文字符和数字字符，请统计和打印出各个字符的个数。”，当时只会用取字符对照ascii的方法来做这道题，然后正好学长看了我的做法，他说还有种东西叫做“正则表达式”，然后他给我打开了在线的JDK-1.6的API，找到了里面介绍正则表达式的页，然后还百度了一篇正则表达式的教程给我看（对，就是那个通篇斜杠写反的那盘），然后我就头皮发麻了。</em></p>
<p><em>在之后无论是正式学习还是运用到实际当中，我的处理都是：百度——ctrl+c——ctrl+v，然后下次碰到另一个字符串处理问题的时候还是这样做，毫无意义，甚至还不能完全匹配我的应用场景。然后这次的工程中心项目，我负责写前端，对输入框需要用到字符串过滤的需求，就这么简单的一个功能我都实现不了，感觉非常丢人，我不想再复制粘贴了，所以开始以blog的形式记录我学习<code>regular-expression</code>的过程。</em></p>
<p><strong>所有笔记的学习都基于：《Mastering Regular Expression(Third Edition)》——Jeffrey E. F. Friedl一书的中文版</strong></p>
<hr>
<h3 id="释义与场景"><a href="#释义与场景" class="headerlink" title="释义与场景"></a>释义与场景</h3><h4 id="释义"><a href="#释义" class="headerlink" title="释义"></a>释义</h4><p>首先我们来看看<code>Regular Expression</code>这两个单词</p>
<p>Regular：</p>
<blockquote>
<p><em>adj.</em> 定期的；有规律的；合格的；整齐的；普通的</p>
<p><em>n.</em> 常客；正式队员；中坚分子</p>
<p><em>adv.</em> 定期地；经常地</p>
</blockquote>
<p>Expression：</p>
<blockquote>
<p><em>n.</em> 表现，表示，表达；表情，脸色，态度，强调，声调；式，符号；语句，措辞，说法</p>
</blockquote>
<p>毫无疑问，在编程领域里面<code>Regular Expression</code>的含义肯定不会是“整齐的脸色”或者“中坚分子措辞”这样的翻译了，从字面意义上去翻译的话应该是“有规律的表达式”，因为起码听上去像个数学公式，和计算机有点关联- -。这可比“正则表达式”这样的翻译明了多了，但是后者更有逼格一点。</p>
<h4 id="场景"><a href="#场景" class="headerlink" title="场景"></a>场景</h4><p>搞清楚公式的定义，那么接下来我们就可以开始解题了:smile:。</p>
<p>我们为什么会用到正则表达式？需求源于我们需要在一大段不规则的文本中找出是否含有符合我们规律的表达式的句子，这就叫做使用正则表达式去匹配我们的文本。比如一般editor所具有的find功能，就是一种文本匹配功能。</p>
<p>但是在我们写程序的过程中，你的程序代码是不可能给一个find按钮给你去匹配文本的，而且你可能会需要更复杂的文本匹配功能，比如说“匹配所有xxx-xxxxxxxxxxx这种格式的手机号码”这样的精准匹配就需要你构建表述清晰的正则表达式去完成匹配功能。</p>
<p>一旦你精准的find到你想要匹配的子文本之后，你想干嘛都行，提取、删除、替换、添加等等。这就是正则表达式的应用场景。</p>
<hr>
]]></content>
      
        <categories>
            
            <category> note </category>
            
            <category> booknote </category>
            
            <category> 《Mastering Regular Expression(Third Edition)》 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> learning </tag>
            
            <tag> RegExp </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[5 Useful Tips For A Better Commit Message]]></title>
      <url>/post/ce7091ac.html</url>
      <content type="html"><![CDATA[<p>You’re already writing decent commit messages. Let’s see if we can level you up to awesome. Other developers, especially you-in-two-weeks and you-from-next-year, will thank you for your forethought and verbosity when they run git blame to see why that conditional is there.</p>
<a id="more"></a>
<ol>
<li><p>The first line should always be <u>50 characters</u> or less and that it should be followed by a blank line. Vim ships with syntax, indent, and filetype plugins for Git commits which can help here.</p>
</li>
<li><p>Add this line to your <code>~/.vimrc</code> to add spell checking and automatic wrapping at the recommended 72 columns to you commit messages.</p>
   <figure class="highlight vim"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">autocmd</span> Filetype gitcommit <span class="keyword">setlocal</span> spell textwidth=<span class="number">72</span></div></pre></td></tr></table></figure>
</li>
<li><p>Never use the <code>-m &lt;msg&gt;</code> / <code>--message=&lt;msg&gt;</code> flag to <code>git commit</code>.</p>
<p> It gives you a poor mindset right off the bat as you will feel that you have to fit your commit message into the terminal command, and makes the commit feel more like a one-off argument than a page in history:</p>
   <figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git commit -m <span class="string">"Fix login bug"</span></div></pre></td></tr></table></figure>
<p> A more useful commit message might be:</p>
 <figure class="highlight vim"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">Redirect user <span class="keyword">to</span> the requested page after login</div><div class="line"></div><div class="line">http<span class="variable">s:</span>//trello.<span class="keyword">com</span>/path/<span class="keyword">to</span>/relevant/card</div><div class="line"></div><div class="line">Users were being redirected <span class="keyword">to</span> the home page after login, which <span class="keyword">is</span> less</div><div class="line">useful than redirecting <span class="keyword">to</span> the page they had originally requested before</div><div class="line">being redirected <span class="keyword">to</span> the login form.</div><div class="line"></div><div class="line">* Store requested path in <span class="keyword">a</span> session variable</div><div class="line">* Redirect <span class="keyword">to</span> the stored location after successfully logging in the user</div></pre></td></tr></table></figure>
</li>
<li><p>Answer the following questions:</p>
<ol>
<li><p>Why is this change necessary?</p>
<p> This question tells <u>reviewers of your pull request</u> what to expect in the commit, allowing them to more easily identify and point out unrelated changes.</p>
</li>
<li><p>How does it address the issue?</p>
<p> Describe, at a high level, what was done to affect change.<br> <code>Introduce a red/black tree to increase search speed or</code><br> <code>Remove &lt;troublesome gem X&gt;, which was causing &lt;specific description of issue introduced by gem&gt;</code><br> are good examples.</p>
<p> If your change is obvious, you may be able to omit addressing this question.</p>
</li>
<li><p>What side effects does this change have?</p>
<p> This is the most important question to answer, as it can point out problems where you are making too many changes in one commit or branch. One or two bullet points for related changes may be okay, but five or six are likely indicators of a commit that is doing too many things.</p>
<p> Your team should have guidelines and rules-of-thumb for how much can be done in a single commit/branch.</p>
</li>
</ol>
</li>
<li><p>Consider making including a link to the issue/story/card in the commit message a standard for your project. Full urls are more useful than issue numbers, as they are more permanent and avoid confusion over which issue tracker it references.</p>
<p> This is generally done as the first paragraph after the summary, on line 3.</p>
</li>
</ol>
<p><img src="http://image.youyinnn.cn/6c9c0fc1f7a32c23e57b689a5bf1aca8.png" alt="git-commit-tips"></p>
<p>Having a story in your git log will make a huge difference in how you and others perceive your project. By taking great care in commit messages, as you do in your code, you will help to increase overall quality.</p>
<p>Special thanks to Tim Pope, whose Note About Git Commit Messages literally sets the standard for a good commit message.</p>
<p>Additional thanks to the creator of Git and a real stickler for a good commit message, Linus Torvalds.</p>
<p><em>Reprinted from : <a href="https://robots.thoughtbot.com/5-useful-tips-for-a-better-commit-message?utm_medium=social&amp;utm_source=qq" target="_blank" rel="external">https://robots.thoughtbot.com/5-useful-tips-for-a-better-commit-message?utm_medium=social&amp;utm_source=qq</a></em></p>
<p><em>Chinese translate :<a href="https://ruby-china.org/topics/15737" target="_blank" rel="external">https://ruby-china.org/topics/15737</a></em></p>
]]></content>
      
        <categories>
            
            <category> reprinted </category>
            
        </categories>
        
        
        <tags>
            
            <tag> tips </tag>
            
            <tag> github </tag>
            
            <tag> git </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[中文测试之诗]]></title>
      <url>/post/7e113b03.html</url>
      <content type="html"><![CDATA[<blockquote class="blockquote-center"><p>吃饭</p>
<p>睡觉</p>
<p>学习</p>
<p><img src="http://image.youyinnn.cn/471c252f4e633e3fafb800f2ab9f1c1c.png" alt="fox"></p>
</blockquote>
<a id="more"></a>
]]></content>
      
        <categories>
            
            <category> 未分类 </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[Do not go gentle into that good night]]></title>
      <url>/post/c06e8c71.html</url>
      <content type="html"><![CDATA[<blockquote class="blockquote-center"><p>Make him stay, Murph.</p>
</blockquote>
<a id="more"></a>
<ul>
<li>星际穿越</li>
<li>不要温和的走进那个良夜</li>
</ul>
<hr>
<blockquote class="blockquote-center"><p>Do not go gentle into that good night,</p>
<p>　　Old age should burn and rave at close of day;</p>
<p>　　Rage, rage against the dying of the light.</p>
<p>　　Though wise men at their end know dark is right,</p>
<p>　　Because their words had forked no lightningthey</p>
<p>Do not go gentle into that good night.</p>
<p>Good men, the last wave by, crying how bright</p>
<p>　　Their frail deeds might have danced in a green bay,</p>
<p>　　Rage, rage against the dying of the light.</p>
<p>　　Wild men who caught and sang the sun in flight,</p>
<p>　　And learn, too late, they grieved it on its way,</p>
<p>　　Do not go gentle into that good night.</p>
<p>　　Grave men, near death, who see with blinding sight</p>
<p>　　Blind eyes could blaze like meteors and be gay,</p>
<p>　　Rage, rage against the dying of the light.</p>
<p>　　And you, my father, there on the sad height,</p>
<p>　　Curse, bless me now with your fierce tears, I pray.</p>
<p>　　Do not go gentle into that good night.</p>
<p>　　Rage, rage against the dying of the light.</p>
</blockquote>
]]></content>
      
        <categories>
            
            <category> 随笔 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 诗 </tag>
            
        </tags>
        
    </entry>
    
  
  
</search>
