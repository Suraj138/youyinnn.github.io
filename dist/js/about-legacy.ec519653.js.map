{"version":3,"file":"js/about-legacy.ec519653.js","mappings":"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C,EAAKnK,SAAS5T,IACV8tD,EAAa9tD,GAAOyzC,EAAOzzC,MAExBhC,OAAOC,OAAO6vD,EAAcD,G,2ECLvC,ghH,0CCAA,+5wB,0CCAA,8ogB,0CCAA,g0X,0CCAA,87uB,0CCAA,0sgB,0CCAA,k9D,0CCAA,ujiC,0CCAA,yyK,0CCAA,89gD,0CCAA,w42C,0CCAA,uhG,yCCAA,4zX,0CCAA,yiQ,0CCAA,0xL,0CCAA,6mtC,0CCAA,iolC,yCCAA,mhO,0CCAA,ykqB,0CCAA,sg3B,0CCAA,kyY,0CCAA,m9Y,0CCAA,iwc,0CCAA,kgqB,0CCAA,giT,0CCAA,yrc,0CCAA,88pF,0CCAA,kkZ,0CCAA,8sV,0CCAA,8hJ,0CCAA,oiL,0CCAA,24nB,0CCAA,+5nB,0CCAA,yrjB,0CCAA,ijD,yCCAA,8/5B,0CCAA,40L,0CCAA,89T,0CCAA,mtf,0CCAA,816F,0CCAA,ihmB,0CCAA,+9xB,0CCAA,svJ,0CCAA,ysQ,0CCAA,i3Q,0CCAA,4nM,yCCAA,yuO,yCCAA,+/b,0CCAA,+oM,0CCAA,+ypC,0CCAA,43yB,0CCAA,2jP,0CCAA,g/oB,yCCAA,m8W,0CCAA,6ylD,0CCAA,6hI,yCCAA,+yjB,0CCAA,4ljC,0CCAA,2rR,0CCAA,uh0B,yCCAA,kpoB,0CCAA,klW,0CCAA,s5N,0CCAA,+/kB,0CCAA,gsqB,0CCAA,4h/B,0CCAA,q2xB,0CCAA,602B,0CCAA,m4f,0CCAA,q2J,0CCAA,qihD,0CCAA,wuW,0CCAA,u2gB,0CCAA,qrI,0CCAA,8ywC,0CCAA,ml0B,0CCAA,6nkB,0CCAA,6kH,0CCAA,ozvB,0CCAA,g/jB,0CCAA,+5T,0CCAA,whf,0CCAA,ygT,0CCAA,4rwE,0CCAA,mnS,0CCAA,woH,0CCAA,k1kB,0CCAA,y6Q,0CCAA,g/Z,0CCAA,k3iB,0CCAA,yzQ,0CCAA,4s2B,0CCAA,+roB,0CCAA,2lH,0CCAA,g5Z,yCCAA,6nV,0CCAA,+k/C,0CCAA,ulkC,yCCAA,u7Q,0CCAA,2rwD,0CCAA,66E,0CCAA,yzJ,0CCAA,6thC,0CCAA,2uR,0CCAA,gqH,0CCAA,gu+B,0CCAA,wwgC,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MAC1B,yBAA0B,MAC1B,yBAA0B,MAC1B,yBAA0B,MAC1B,yBAA0B,MAC1B,wBAAyB,MACzB,yBAA0B,KAC1B,yBAA0B,MAC1B,yBAA0B,KAC1B,yBAA0B,MAC1B,yBAA0B,MAC1B,yBAA0B,MAC1B,yBAA0B,MAC1B,yBAA0B,MAC1B,yBAA0B,MAC1B,yBAA0B,MAC1B,yBAA0B,MAC1B,yBAA0B,MAC1B,yBAA0B,MAC1B,yBAA0B,MAC1B,yBAA0B,MAC1B,yBAA0B,MAC1B,yBAA0B,MAC1B,yBAA0B,MAC1B,yBAA0B,MAC1B,yBAA0B,MAC1B,yBAA0B,MAC1B,yBAA0B,MAC1B,yBAA0B,MAC1B,yBAA0B,MAC1B,yBAA0B,KAC1B,yBAA0B,MAC1B,yBAA0B,MAC1B,yBAA0B,MAC1B,yBAA0B,MAC1B,yBAA0B,MAC1B,yBAA0B,KAC1B,yBAA0B,KAC1B,yBAA0B,KAC1B,yBAA0B,MAC1B,yBAA0B,MAC1B,yBAA0B,MAC1B,yBAA0B,MAC1B,yBAA0B,MAC1B,yBAA0B,MAC1B,yBAA0B,IAC1B,yBAA0B,MAC1B,yBAA0B,MAC1B,wBAAyB,MACzB,yBAA0B,MAC1B,yBAA0B,MAC1B,yBAA0B,MAC1B,wBAAyB,MACzB,wBAAyB,MACzB,wBAAyB,MACzB,wBAAyB,MACzB,wBAAyB,KACzB,wBAAyB,MACzB,wBAAyB,MACzB,wBAAyB,MACzB,wBAAyB,MACzB,wBAAyB,MACzB,wBAAyB,MACzB,wBAAyB,MACzB,wBAAyB,MACzB,wBAAyB,MACzB,wBAAyB,MACzB,wBAAyB,MACzB,wBAAyB,IACzB,wBAAyB,MACzB,wBAAyB,MACzB,wBAAyB,MACzB,wBAAyB,MACzB,wBAAyB,MACzB,wBAAyB,MACzB,wBAAyB,MACzB,wBAAyB,MACzB,wBAAyB,MACzB,wBAAyB,MACzB,wBAAyB,MACzB,wBAAyB,MACzB,wBAAyB,MACzB,wBAAyB,MACzB,wBAAyB,MACzB,wBAAyB,KACzB,wBAAyB,KACzB,wBAAyB,MACzB,wBAAyB,MACzB,wBAAyB,MACzB,wBAAyB,MACzB,wBAAyB,MACzB,wBAAyB,MACzB,wBAAyB,MACz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","sources":["webpack://youyinnn.github.io/./node_modules/naive-ui/es/_internal/icons/RotateCounterclockwise.js","webpack://youyinnn.github.io/./node_modules/naive-ui/es/_internal/icons/RotateClockwise.js","webpack://youyinnn.github.io/./node_modules/naive-ui/es/_internal/icons/ZoomOut.js","webpack://youyinnn.github.io/./node_modules/naive-ui/es/_internal/icons/ZoomIn.js","webpack://youyinnn.github.io/./node_modules/naive-ui/es/image/styles/light.js","webpack://youyinnn.github.io/./node_modules/naive-ui/es/image/src/icons.js","webpack://youyinnn.github.io/./node_modules/naive-ui/es/image/src/styles/index.cssr.js","webpack://youyinnn.github.io/./node_modules/naive-ui/es/image/src/ImagePreview.js","webpack://youyinnn.github.io/./node_modules/seemly/es/misc/index.js","webpack://youyinnn.github.io/./node_modules/naive-ui/es/image/src/ImageGroup.js","webpack://youyinnn.github.io/./node_modules/naive-ui/es/image/src/Image.js","webpack://youyinnn.github.io/./src/components/MarkdownBody.vue","webpack://youyinnn.github.io/./src/components/MarkdownBody.vue?c0da","webpack://youyinnn.github.io/./src/components/Toc.vue","webpack://youyinnn.github.io/./node_modules/seemly/es/dom/unwrap-element.js","webpack://youyinnn.github.io/./node_modules/naive-ui/es/affix/src/utils.js","webpack://youyinnn.github.io/./node_modules/naive-ui/es/affix/src/styles/index.cssr.js","webpack://youyinnn.github.io/./node_modules/naive-ui/es/affix/src/Affix.js","webpack://youyinnn.github.io/./node_modules/naive-ui/es/anchor/src/styles/index.cssr.js","webpack://youyinnn.github.io/./node_modules/vooks/es/use-is-ios.js","webpack://youyinnn.github.io/./node_modules/naive-ui/es/_internal/scrollbar/src/styles/index.cssr.js","webpack://youyinnn.github.io/./node_modules/naive-ui/es/_internal/scrollbar/src/ScrollBar.js","webpack://youyinnn.github.io/./node_modules/naive-ui/es/_utils/naive/attribute.js","webpack://youyinnn.github.io/./node_modules/naive-ui/es/anchor/src/Link.js","webpack://youyinnn.github.io/./node_modules/naive-ui/es/anchor/src/utils.js","webpack://youyinnn.github.io/./node_modules/naive-ui/es/anchor/src/BaseAnchor.js","webpack://youyinnn.github.io/./node_modules/naive-ui/es/anchor/src/AnchorAdapter.js","webpack://youyinnn.github.io/./src/components/Toc.vue?56a4","webpack://youyinnn.github.io/./src/views/About.vue","webpack://youyinnn.github.io/./src/views/About.vue?faf8","webpack://youyinnn.github.io/./src/views/Article.vue","webpack://youyinnn.github.io/./node_modules/naive-ui/es/skeleton/styles/light.js","webpack://youyinnn.github.io/./node_modules/naive-ui/es/skeleton/src/styles/index.cssr.js","webpack://youyinnn.github.io/./node_modules/naive-ui/es/skeleton/src/Skeleton.js","webpack://youyinnn.github.io/./node_modules/naive-ui/es/divider/src/styles/index.cssr.js","webpack://youyinnn.github.io/./node_modules/naive-ui/es/divider/src/Divider.js","webpack://youyinnn.github.io/./src/views/Article.vue?72e0","webpack://youyinnn.github.io/./src/views/Home.vue","webpack://youyinnn.github.io/./node_modules/naive-ui/es/list/src/styles/index.cssr.js","webpack://youyinnn.github.io/./node_modules/naive-ui/es/list/src/List.js","webpack://youyinnn.github.io/./node_modules/naive-ui/es/list/src/ListItem.js","webpack://youyinnn.github.io/./src/views/Home.vue?374f","webpack://youyinnn.github.io/./src/views/Script.vue","webpack://youyinnn.github.io/./node_modules/treemate/es/utils.js","webpack://youyinnn.github.io/./node_modules/treemate/es/check.js","webpack://youyinnn.github.io/./node_modules/treemate/es/path.js","webpack://youyinnn.github.io/./node_modules/treemate/es/move.js","webpack://youyinnn.github.io/./node_modules/treemate/es/flatten.js","webpack://youyinnn.github.io/./node_modules/treemate/es/contains.js","webpack://youyinnn.github.io/./node_modules/treemate/es/create.js","webpack://youyinnn.github.io/./node_modules/vooks/es/use-keyboard.js","webpack://youyinnn.github.io/./node_modules/vueuc/es/binder/src/utils.js","webpack://youyinnn.github.io/./node_modules/vueuc/es/binder/src/Binder.js","webpack://youyinnn.github.io/./node_modules/vueuc/es/binder/src/Target.js","webpack://youyinnn.github.io/./node_modules/naive-ui/es/modal/src/interface.js","webpack://youyinnn.github.io/./node_modules/naive-ui/es/drawer/src/interface.js","webpack://youyinnn.github.io/./node_modules/naive-ui/es/popover/src/interface.js","webpack://youyinnn.github.io/./node_modules/naive-ui/es/_internal/select-menu/src/interface.js","webpack://youyinnn.github.io/./node_modules/naive-ui/es/_utils/composable/use-adjusted-to.js","webpack://youyinnn.github.io/./node_modules/naive-ui/es/_utils/vue/get-first-slot-vnode.js","webpack://youyinnn.github.io/./node_modules/vueuc/es/binder/src/get-placement-style.js","webpack://youyinnn.github.io/./node_modules/vueuc/es/binder/src/Follower.js","webpack://youyinnn.github.io/./node_modules/vdirs/es/clickoutside.js","webpack://youyinnn.github.io/./node_modules/vdirs/es/mousemoveoutside.js","webpack://youyinnn.github.io/./node_modules/naive-ui/es/popover/src/styles/index.cssr.js","webpack://youyinnn.github.io/./node_modules/naive-ui/es/popover/src/PopoverBody.js","webpack://youyinnn.github.io/./node_modules/naive-ui/es/popover/src/Popover.js","webpack://youyinnn.github.io/./node_modules/naive-ui/es/_utils/vue/create-ref-setter.js","webpack://youyinnn.github.io/./node_modules/naive-ui/es/_internal/icons/ChevronRight.js","webpack://youyinnn.github.io/./node_modules/naive-ui/es/dropdown/src/utils.js","webpack://youyinnn.github.io/./node_modules/seemly/es/dom/happens-in.js","webpack://youyinnn.github.io/./node_modules/naive-ui/es/dropdown/src/DropdownOption.js","webpack://youyinnn.github.io/./node_modules/naive-ui/es/dropdown/src/DropdownDivider.js","webpack://youyinnn.github.io/./node_modules/naive-ui/es/dropdown/src/DropdownGroupHeader.js","webpack://youyinnn.github.io/./node_modules/naive-ui/es/dropdown/src/DropdownGroup.js","webpack://youyinnn.github.io/./node_modules/naive-ui/es/dropdown/src/DropdownRenderOption.js","webpack://youyinnn.github.io/./node_modules/naive-ui/es/dropdown/src/DropdownMenu.js","webpack://youyinnn.github.io/./node_modules/naive-ui/es/dropdown/src/styles/index.cssr.js","webpack://youyinnn.github.io/./node_modules/naive-ui/es/dropdown/src/Dropdown.js","webpack://youyinnn.github.io/./node_modules/naive-ui/es/_internal/icons/ChevronDownFilled.js","webpack://youyinnn.github.io/./node_modules/naive-ui/es/menu/src/MenuOptionContent.js","webpack://youyinnn.github.io/./node_modules/naive-ui/es/menu/src/use-menu-child-props.js","webpack://youyinnn.github.io/./node_modules/naive-ui/es/menu/src/Submenu.js","webpack://youyinnn.github.io/./node_modules/naive-ui/es/menu/src/use-menu-child.js","webpack://youyinnn.github.io/./node_modules/naive-ui/es/menu/src/MenuOptionGroup.js","webpack://youyinnn.github.io/./node_modules/naive-ui/es/tooltip/src/Tooltip.js","webpack://youyinnn.github.io/./node_modules/naive-ui/es/menu/src/MenuOption.js","webpack://youyinnn.github.io/./node_modules/naive-ui/es/menu/src/MenuDivider.js","webpack://youyinnn.github.io/./node_modules/naive-ui/es/menu/src/utils.js","webpack://youyinnn.github.io/./node_modules/naive-ui/es/_styles/transitions/fade-in-height-expand.cssr.js","webpack://youyinnn.github.io/./node_modules/naive-ui/es/menu/src/styles/index.cssr.js","webpack://youyinnn.github.io/./node_modules/naive-ui/es/layout/src/interface.js","webpack://youyinnn.github.io/./node_modules/naive-ui/es/menu/src/Menu.js","webpack://youyinnn.github.io/./node_modules/vooks/es/use-breakpoints.js","webpack://youyinnn.github.io/./node_modules/seemly/es/css/responsive.js","webpack://youyinnn.github.io/./node_modules/naive-ui/es/config-provider/src/config.js","webpack://youyinnn.github.io/./node_modules/naive-ui/es/grid/src/GridItem.js","webpack://youyinnn.github.io/./node_modules/naive-ui/es/grid/src/Grid.js","webpack://youyinnn.github.io/./src/views/Script.vue?9b68","webpack://youyinnn.github.io/./node_modules/core-js/internals/advance-string-index.js","webpack://youyinnn.github.io/./node_modules/core-js/internals/array-from.js","webpack://youyinnn.github.io/./node_modules/core-js/internals/array-iteration.js","webpack://youyinnn.github.io/./node_modules/core-js/internals/array-method-has-species-support.js","webpack://youyinnn.github.io/./node_modules/core-js/internals/array-slice-simple.js","webpack://youyinnn.github.io/./node_modules/core-js/internals/array-species-constructor.js","webpack://youyinnn.github.io/./node_modules/core-js/internals/array-species-create.js","webpack://youyinnn.github.io/./node_modules/core-js/internals/call-with-safe-iteration-closing.js","webpack://youyinnn.github.io/./node_modules/core-js/internals/create-property.js","webpack://youyinnn.github.io/./node_modules/core-js/internals/define-well-known-symbol.js","webpack://youyinnn.github.io/./node_modules/core-js/internals/fix-regexp-well-known-symbol-logic.js","webpack://youyinnn.github.io/./node_modules/core-js/internals/get-substitution.js","webpack://youyinnn.github.io/./node_modules/core-js/internals/is-array.js","webpack://youyinnn.github.io/./node_modules/core-js/internals/object-get-own-property-names-external.js","webpack://youyinnn.github.io/./node_modules/core-js/internals/path.js","webpack://youyinnn.github.io/./node_modules/core-js/internals/regexp-exec-abstract.js","webpack://youyinnn.github.io/./node_modules/core-js/internals/regexp-exec.js","webpack://youyinnn.github.io/./node_modules/core-js/internals/regexp-flags.js","webpack://youyinnn.github.io/./node_modules/core-js/internals/regexp-sticky-helpers.js","webpack://youyinnn.github.io/./node_modules/core-js/internals/regexp-unsupported-dot-all.js","webpack://youyinnn.github.io/./node_modules/core-js/internals/regexp-unsupported-ncg.js","webpack://youyinnn.github.io/./node_modules/core-js/internals/well-known-symbol-wrapped.js","webpack://youyinnn.github.io/./node_modules/core-js/modules/es.array.from.js","webpack://youyinnn.github.io/./node_modules/core-js/modules/es.array.slice.js","webpack://youyinnn.github.io/./node_modules/core-js/modules/es.regexp.exec.js","webpack://youyinnn.github.io/./node_modules/core-js/modules/es.regexp.test.js","webpack://youyinnn.github.io/./node_modules/core-js/modules/es.string.replace-all.js","webpack://youyinnn.github.io/./node_modules/core-js/modules/es.string.replace.js","webpack://youyinnn.github.io/./node_modules/core-js/modules/es.string.split.js","webpack://youyinnn.github.io/./node_modules/core-js/modules/es.symbol.description.js","webpack://youyinnn.github.io/./node_modules/core-js/modules/es.symbol.iterator.js","webpack://youyinnn.github.io/./node_modules/core-js/modules/es.symbol.js","webpack://youyinnn.github.io/./node_modules/dayjs/dayjs.min.js","webpack://youyinnn.github.io/./node_modules/evtd/es/traps.js","webpack://youyinnn.github.io/./node_modules/evtd/es/delegate.js","webpack://youyinnn.github.io/./node_modules/naive-ui/es/_styles/transitions/fade-in-scale-up.cssr.js","webpack://youyinnn.github.io/./node_modules/naive-ui/es/_styles/transitions/fade-in.cssr.js","webpack://youyinnn.github.io/./node_modules/naive-ui/es/_utils/composable/index.js","webpack://youyinnn.github.io/./node_modules/naive-ui/es/_utils/vue/keep.js","webpack://youyinnn.github.io/./src/assets/about/index.htm","webpack://youyinnn.github.io/./src/assets/articles/11z93zc.htm","webpack://youyinnn.github.io/./src/assets/articles/11zuc81.htm","webpack://youyinnn.github.io/./src/assets/articles/12iaggv.htm","webpack://youyinnn.github.io/./src/assets/articles/139027a.htm","webpack://youyinnn.github.io/./src/assets/articles/13tt0au.htm","webpack://youyinnn.github.io/./src/assets/articles/14k0uek.htm","webpack://youyinnn.github.io/./src/assets/articles/17hjlts.htm","webpack://youyinnn.github.io/./src/assets/articles/18669ga.htm","webpack://youyinnn.github.io/./src/assets/articles/188zp6j.htm","webpack://youyinnn.github.io/./src/assets/articles/18rke1.htm","webpack://youyinnn.github.io/./src/assets/articles/19jo7o1.htm","webpack://youyinnn.github.io/./src/assets/articles/1ae6lng.htm","webpack://youyinnn.github.io/./src/assets/articles/1aew5v7.htm","webpack://youyinnn.github.io/./src/assets/articles/1arzjog.htm","webpack://youyinnn.github.io/./src/assets/articles/1b0rp9e.htm","webpack://youyinnn.github.io/./src/assets/articles/1ba9tuk.htm","webpack://youyinnn.github.io/./src/assets/articles/1bhsyh3.htm","webpack://youyinnn.github.io/./src/assets/articles/1cei7aq.htm","webpack://youyinnn.github.io/./src/assets/articles/1clnpuk.htm","webpack://youyinnn.github.io/./src/assets/articles/1csh4qm.htm","webpack://youyinnn.github.io/./src/assets/articles/1cu6q2d.htm","webpack://youyinnn.github.io/./src/assets/articles/1d9upzt.htm","webpack://youyinnn.github.io/./src/assets/articles/1e5xy16.htm","webpack://youyinnn.github.io/./src/assets/articles/1ei198o.htm","webpack://youyinnn.github.io/./src/assets/articles/1f3qusx.htm","webpack://youyinnn.github.io/./src/assets/articles/1flo1c0.htm","webpack://youyinnn.github.io/./src/assets/articles/1gfw5vx.htm","webpack://youyinnn.github.io/./src/assets/articles/1gukab6.htm","webpack://youyinnn.github.io/./src/assets/articles/1h187i6.htm","webpack://youyinnn.github.io/./src/assets/articles/1h1ww1y.htm","webpack://youyinnn.github.io/./src/assets/articles/1hrw4sv.htm","webpack://youyinnn.github.io/./src/assets/articles/1jvfs4t.htm","webpack://youyinnn.github.io/./src/assets/articles/1jy4sem.htm","webpack://youyinnn.github.io/./src/assets/articles/1k4djcz.htm","webpack://youyinnn.github.io/./src/assets/articles/1k7g0p3.htm","webpack://youyinnn.github.io/./src/assets/articles/1kakozs.htm","webpack://youyinnn.github.io/./src/assets/articles/1kb6gry.htm","webpack://youyinnn.github.io/./src/assets/articles/1kv61wq.htm","webpack://youyinnn.github.io/./src/assets/articles/1lvzuh7.htm","webpack://youyinnn.github.io/./src/assets/articles/1n8vn13.htm","webpack://youyinnn.github.io/./src/assets/articles/1ngl1pm.htm","webpack://youyinnn.github.io/./src/assets/articles/1nz333d.htm","webpack://youyinnn.github.io/./src/assets/articles/1ox3j6i.htm","webpack://youyinnn.github.io/./src/assets/articles/1q1lo3l.htm","webpack://youyinnn.github.io/./src/assets/articles/1qvt6fv.htm","webpack://youyinnn.github.io/./src/assets/articles/1ro5m3y.htm","webpack://youyinnn.github.io/./src/assets/articles/1toixsk.htm","webpack://youyinnn.github.io/./src/assets/articles/1tzsbbu.htm","webpack://youyinnn.github.io/./src/assets/articles/1u7rv30.htm","webpack://youyinnn.github.io/./src/assets/articles/1w60zyo.htm","webpack://youyinnn.github.io/./src/assets/articles/1w97yet.htm","webpack://youyinnn.github.io/./src/assets/articles/1x7azit.htm","webpack://youyinnn.github.io/./src/assets/articles/1xemds8.htm","webpack://youyinnn.github.io/./src/assets/articles/1xentt.htm","webpack://youyinnn.github.io/./src/assets/articles/1xetsy3.htm","webpack://youyinnn.github.io/./src/assets/articles/1xo3tpx.htm","webpack://youyinnn.github.io/./src/assets/articles/1y7ozg8.htm","webpack://youyinnn.github.io/./src/assets/articles/2032k5.htm","webpack://youyinnn.github.io/./src/assets/articles/2acnhf.htm","webpack://youyinnn.github.io/./src/assets/articles/2gps3g.htm","webpack://youyinnn.github.io/./src/assets/articles/2t44ld.htm","webpack://youyinnn.github.io/./src/assets/articles/3fjm8j.htm","webpack://youyinnn.github.io/./src/assets/articles/3rmqph.htm","webpack://youyinnn.github.io/./src/assets/articles/3yl2hx.htm","webpack://youyinnn.github.io/./src/assets/articles/3zxt7z.htm","webpack://youyinnn.github.io/./src/assets/articles/448jer.htm","webpack://youyinnn.github.io/./src/assets/articles/46bhg0.htm","webpack://youyinnn.github.io/./src/assets/articles/7kdfk8.htm","webpack://youyinnn.github.io/./src/assets/articles/8lcrnu.htm","webpack://youyinnn.github.io/./src/assets/articles/9h3hmp.htm","webpack://youyinnn.github.io/./src/assets/articles/a08lib.htm","webpack://youyinnn.github.io/./src/assets/articles/a0p0f4.htm","webpack://youyinnn.github.io/./src/assets/articles/a9wle2.htm","webpack://youyinnn.github.io/./src/assets/articles/bg6w8m.htm","webpack://youyinnn.github.io/./src/assets/articles/bu9klx.htm","webpack://youyinnn.github.io/./src/assets/articles/cc3kmk.htm","webpack://youyinnn.github.io/./src/assets/articles/d5ykz8.htm","webpack://youyinnn.github.io/./src/assets/articles/db3vx3.htm","webpack://youyinnn.github.io/./src/assets/articles/dbne5d.htm","webpack://youyinnn.github.io/./src/assets/articles/dc5shg.htm","webpack://youyinnn.github.io/./src/assets/articles/djlqql.htm","webpack://youyinnn.github.io/./src/assets/articles/en4hhw.htm","webpack://youyinnn.github.io/./src/assets/articles/f40uwq.htm","webpack://youyinnn.github.io/./src/assets/articles/faxga5.htm","webpack://youyinnn.github.io/./src/assets/articles/huiysg.htm","webpack://youyinnn.github.io/./src/assets/articles/i9becb.htm","webpack://youyinnn.github.io/./src/assets/articles/jhpq7e.htm","webpack://youyinnn.github.io/./src/assets/articles/jywoys.htm","webpack://youyinnn.github.io/./src/assets/articles/kimeni.htm","webpack://youyinnn.github.io/./src/assets/articles/lt42s8.htm","webpack://youyinnn.github.io/./src/assets/articles/mtg94p.htm","webpack://youyinnn.github.io/./src/assets/articles/n0hez3.htm","webpack://youyinnn.github.io/./src/assets/articles/n8gsoq.htm","webpack://youyinnn.github.io/./src/assets/articles/nff3ic.htm","webpack://youyinnn.github.io/./src/assets/articles/nr7s9o.htm","webpack://youyinnn.github.io/./src/assets/articles/ofa68o.htm","webpack://youyinnn.github.io/./src/assets/articles/ooqfkn.htm","webpack://youyinnn.github.io/./src/assets/articles/pjff39.htm","webpack://youyinnn.github.io/./src/assets/articles/pn2ezr.htm","webpack://youyinnn.github.io/./src/assets/articles/q0aas8.htm","webpack://youyinnn.github.io/./src/assets/articles/rikltc.htm","webpack://youyinnn.github.io/./src/assets/articles/rku8jh.htm","webpack://youyinnn.github.io/./src/assets/articles/rx7jt4.htm","webpack://youyinnn.github.io/./src/assets/articles/spovqu.htm","webpack://youyinnn.github.io/./src/assets/articles/t1f0vq.htm","webpack://youyinnn.github.io/./src/assets/articles/t3owl3.htm","webpack://youyinnn.github.io/./src/assets/articles/tx6g0p.htm","webpack://youyinnn.github.io/./src/assets/articles/u28b7l.htm","webpack://youyinnn.github.io/./src/assets/articles/u4sgci.htm","webpack://youyinnn.github.io/./src/assets/articles/u7sd0w.htm","webpack://youyinnn.github.io/./src/assets/articles/uh480l.htm","webpack://youyinnn.github.io/./src/assets/articles/v6ei19.htm","webpack://youyinnn.github.io/./src/assets/articles/vywf17.htm","webpack://youyinnn.github.io/./src/assets/articles/wji6g0.htm","webpack://youyinnn.github.io/./src/assets/articles/wlvrl9.htm","webpack://youyinnn.github.io/./src/assets/articles/xfjqry.htm","webpack://youyinnn.github.io/./src/assets/articles/xmbex2.htm","webpack://youyinnn.github.io/./src/assets/articles/xqh6xg.htm","webpack://youyinnn.github.io/./src/assets/articles/yvgzwi.htm","webpack://youyinnn.github.io/./src/assets/articles/z9pvg9.htm","webpack://youyinnn.github.io/./src/assets/articles/zkr55u.htm","webpack://youyinnn.github.io/./src/assets/scripts/26535a.htm","webpack://youyinnn.github.io/./src/assets/scripts/365a1777.htm","webpack://youyinnn.github.io/./src/assets/scripts/4669e57a.htm","webpack://youyinnn.github.io/./src/assets/scripts/56fa014a.htm","webpack://youyinnn.github.io/./src/assets/scripts/58be3d4b.htm","webpack://youyinnn.github.io/./src/assets/scripts/737e95b3.htm","webpack://youyinnn.github.io/./src/assets/scripts/76024c57.htm","webpack://youyinnn.github.io/./src/assets/scripts/79453be7.htm","webpack://youyinnn.github.io/./src/assets/scripts/79da6013.htm","webpack://youyinnn.github.io/./src/assets/scripts/7d0d4b58.htm","webpack://youyinnn.github.io/./src/assets/scripts/8c6a1638.htm","webpack://youyinnn.github.io/./src/assets/scripts/8f8dd110.htm","webpack://youyinnn.github.io/./src/assets/scripts/984d050c.htm","webpack://youyinnn.github.io/./src/assets/scripts/9b96de31.htm","webpack://youyinnn.github.io/./src/assets/scripts/a4690ebd.htm","webpack://youyinnn.github.io/./src/assets/scripts/a586ccf8.htm","webpack://youyinnn.github.io/./src/assets/scripts/b09cec40.htm","webpack://youyinnn.github.io/./src/assets/scripts/b3001d81.htm","webpack://youyinnn.github.io/./src/assets/scripts/befb463a.htm","webpack://youyinnn.github.io/./src/assets/scripts/c72c09e6.htm","webpack://youyinnn.github.io/./src/assets/scripts/cb48f8a4.htm","webpack://youyinnn.github.io/./src/assets/scripts/e173fd3a.htm","webpack://youyinnn.github.io/./src/assets/scripts/e3e877fe.htm","webpack://youyinnn.github.io/./src/assets/scripts/edefab81.htm","webpack://youyinnn.github.io/./src/assets/scripts/f5916bab.htm","webpack://youyinnn.github.io/./src/assets/scripts/fbc08f90.htm","webpack://youyinnn.github.io/./src/assets/scripts/fe80f986.htm","webpack://youyinnn.github.io/./node_modules/seemly/es/animation/next-frame-once.js","webpack://youyinnn.github.io/./node_modules/@babel/runtime/helpers/arrayLikeToArray.js","webpack://youyinnn.github.io/./node_modules/@babel/runtime/helpers/createForOfIteratorHelper.js","webpack://youyinnn.github.io/./node_modules/@babel/runtime/helpers/unsupportedIterableToArray.js","webpack://youyinnn.github.io/./src/assets/resources/cache-fjqett.js","webpack://youyinnn.github.io/./src/assets/resources/resources.js","webpack://youyinnn.github.io/./src/plugins/img-router.js","webpack://youyinnn.github.io/./node_modules/vdirs/es/utils.js","webpack://youyinnn.github.io/./node_modules/vdirs/es/zindexable/z-index-manager.js","webpack://youyinnn.github.io/./node_modules/vdirs/es/zindexable/index.js","webpack://youyinnn.github.io/./node_modules/vooks/es/use-false-until-truthy.js","webpack://youyinnn.github.io/./node_modules/vueuc/es/lazy-teleport/src/index.js","webpack://youyinnn.github.io/./node_modules/vueuc/es/shared/v-node.js","webpack://youyinnn.github.io/|/^\\.\\/.*\\.htm$/?a516","webpack://youyinnn.github.io//Users/yinnnyou/workspace/youyinnn.github.io/src/assets/articles|sync|/^\\.\\/.*\\.htm\\.toc\\.json$/","webpack://youyinnn.github.io//Users/yinnnyou/workspace/youyinnn.github.io/src/assets/resources|sync|/^\\.\\/.*$/","webpack://youyinnn.github.io/|/^\\.\\/.*\\.htm$/","webpack://youyinnn.github.io//Users/yinnnyou/workspace/youyinnn.github.io/src/assets/scripts|sync|/^\\.\\/.*\\.htm\\.toc\\.json$/","webpack://youyinnn.github.io/./node_modules/@babel/runtime/helpers/esm/arrayLikeToArray.js","webpack://youyinnn.github.io/./node_modules/@babel/runtime/helpers/esm/unsupportedIterableToArray.js","webpack://youyinnn.github.io/./node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js"],"sourcesContent":["import { h } from 'vue';\nimport { replaceable } from './replaceable';\nexport default replaceable('rotateClockwise', h(\"svg\", { viewBox: \"0 0 20 20\", fill: \"none\", xmlns: \"http://www.w3.org/2000/svg\" },\n    h(\"path\", { d: \"M17 10C17 6.13401 13.866 3 10 3C6.13401 3 3 6.13401 3 10C3 12.7916 4.63419 15.2026 7 16.3265V14.5C7 14.2239 7.22386 14 7.5 14C7.77614 14 8 14.2239 8 14.5V17.5C8 17.7761 7.77614 18 7.5 18H4.5C4.22386 18 4 17.7761 4 17.5C4 17.2239 4.22386 17 4.5 17H6.12422C3.66539 15.6357 2 13.0128 2 10C2 5.58172 5.58172 2 10 2C14.4183 2 18 5.58172 18 10C18 10.2761 17.7761 10.5 17.5 10.5C17.2239 10.5 17 10.2761 17 10Z\", fill: \"currentColor\" }),\n    h(\"path\", { d: \"M10 12C8.89543 12 8 11.1046 8 10C8 8.89543 8.89543 8 10 8C11.1046 8 12 8.89543 12 10C12 11.1046 11.1046 12 10 12ZM10 11C10.5523 11 11 10.5523 11 10C11 9.44772 10.5523 9 10 9C9.44772 9 9 9.44772 9 10C9 10.5523 9.44772 11 10 11Z\", fill: \"currentColor\" })));\n","import { h } from 'vue';\nimport { replaceable } from './replaceable';\nexport default replaceable('rotateClockwise', h(\"svg\", { viewBox: \"0 0 20 20\", fill: \"none\", xmlns: \"http://www.w3.org/2000/svg\" },\n    h(\"path\", { d: \"M3 10C3 6.13401 6.13401 3 10 3C13.866 3 17 6.13401 17 10C17 12.7916 15.3658 15.2026 13 16.3265V14.5C13 14.2239 12.7761 14 12.5 14C12.2239 14 12 14.2239 12 14.5V17.5C12 17.7761 12.2239 18 12.5 18H15.5C15.7761 18 16 17.7761 16 17.5C16 17.2239 15.7761 17 15.5 17H13.8758C16.3346 15.6357 18 13.0128 18 10C18 5.58172 14.4183 2 10 2C5.58172 2 2 5.58172 2 10C2 10.2761 2.22386 10.5 2.5 10.5C2.77614 10.5 3 10.2761 3 10Z\", fill: \"currentColor\" }),\n    h(\"path\", { d: \"M10 12C11.1046 12 12 11.1046 12 10C12 8.89543 11.1046 8 10 8C8.89543 8 8 8.89543 8 10C8 11.1046 8.89543 12 10 12ZM10 11C9.44772 11 9 10.5523 9 10C9 9.44772 9.44772 9 10 9C10.5523 9 11 9.44772 11 10C11 10.5523 10.5523 11 10 11Z\", fill: \"currentColor\" })));\n","import { h } from 'vue';\nimport { replaceable } from './replaceable';\nexport default replaceable('zoomOut', h(\"svg\", { viewBox: \"0 0 20 20\", fill: \"none\", xmlns: \"http://www.w3.org/2000/svg\" },\n    h(\"path\", { d: \"M11 8C11.2761 8 11.5 8.22386 11.5 8.5C11.5 8.77614 11.2761 9 11 9H6C5.72386 9 5.5 8.77614 5.5 8.5C5.5 8.22386 5.72386 8 6 8H11Z\", fill: \"currentColor\" }),\n    h(\"path\", { d: \"M14 8.5C14 5.46243 11.5376 3 8.5 3C5.46243 3 3 5.46243 3 8.5C3 11.5376 5.46243 14 8.5 14C9.83879 14 11.0659 13.5217 12.0196 12.7266L16.1464 16.8536L16.2157 16.9114C16.4106 17.0464 16.68 17.0271 16.8536 16.8536C17.0488 16.6583 17.0488 16.3417 16.8536 16.1464L12.7266 12.0196C13.5217 11.0659 14 9.83879 14 8.5ZM4 8.5C4 6.01472 6.01472 4 8.5 4C10.9853 4 13 6.01472 13 8.5C13 10.9853 10.9853 13 8.5 13C6.01472 13 4 10.9853 4 8.5Z\", fill: \"currentColor\" })));\n","import { h } from 'vue';\nimport { replaceable } from './replaceable';\nexport default replaceable('zoomIn', h(\"svg\", { viewBox: \"0 0 20 20\", fill: \"none\", xmlns: \"http://www.w3.org/2000/svg\" },\n    h(\"path\", { d: \"M11.5 8.5C11.5 8.22386 11.2761 8 11 8H9V6C9 5.72386 8.77614 5.5 8.5 5.5C8.22386 5.5 8 5.72386 8 6V8H6C5.72386 8 5.5 8.22386 5.5 8.5C5.5 8.77614 5.72386 9 6 9H8V11C8 11.2761 8.22386 11.5 8.5 11.5C8.77614 11.5 9 11.2761 9 11V9H11C11.2761 9 11.5 8.77614 11.5 8.5Z\", fill: \"currentColor\" }),\n    h(\"path\", { d: \"M8.5 3C11.5376 3 14 5.46243 14 8.5C14 9.83879 13.5217 11.0659 12.7266 12.0196L16.8536 16.1464C17.0488 16.3417 17.0488 16.6583 16.8536 16.8536C16.68 17.0271 16.4106 17.0464 16.2157 16.9114L16.1464 16.8536L12.0196 12.7266C11.0659 13.5217 9.83879 14 8.5 14C5.46243 14 3 11.5376 3 8.5C3 5.46243 5.46243 3 8.5 3ZM8.5 4C6.01472 4 4 6.01472 4 8.5C4 10.9853 6.01472 13 8.5 13C10.9853 13 13 10.9853 13 8.5C13 6.01472 10.9853 4 8.5 4Z\", fill: \"currentColor\" })));\n","import { createTheme } from '../../_mixins';\nimport { commonLight } from '../../_styles/common';\nfunction self() {\n    return {\n        iconColor: 'rgba(255, 255, 255, .9)'\n    };\n}\nexport const imageLight = createTheme({\n    name: 'Image',\n    common: commonLight,\n    self\n});\n","import { h } from 'vue';\nexport const prevIcon = (h(\"svg\", { viewBox: \"0 0 20 20\", fill: \"none\", xmlns: \"http://www.w3.org/2000/svg\" },\n    h(\"path\", { d: \"M6 5C5.75454 5 5.55039 5.17688 5.50806 5.41012L5.5 5.5V14.5C5.5 14.7761 5.72386 15 6 15C6.24546 15 6.44961 14.8231 6.49194 14.5899L6.5 14.5V5.5C6.5 5.22386 6.27614 5 6 5ZM13.8536 5.14645C13.68 4.97288 13.4106 4.9536 13.2157 5.08859L13.1464 5.14645L8.64645 9.64645C8.47288 9.82001 8.4536 10.0894 8.58859 10.2843L8.64645 10.3536L13.1464 14.8536C13.3417 15.0488 13.6583 15.0488 13.8536 14.8536C14.0271 14.68 14.0464 14.4106 13.9114 14.2157L13.8536 14.1464L9.70711 10L13.8536 5.85355C14.0488 5.65829 14.0488 5.34171 13.8536 5.14645Z\", fill: \"currentColor\" })));\nexport const nextIcon = (h(\"svg\", { viewBox: \"0 0 20 20\", fill: \"none\", xmlns: \"http://www.w3.org/2000/svg\" },\n    h(\"path\", { d: \"M13.5 5C13.7455 5 13.9496 5.17688 13.9919 5.41012L14 5.5V14.5C14 14.7761 13.7761 15 13.5 15C13.2545 15 13.0504 14.8231 13.0081 14.5899L13 14.5V5.5C13 5.22386 13.2239 5 13.5 5ZM5.64645 5.14645C5.82001 4.97288 6.08944 4.9536 6.28431 5.08859L6.35355 5.14645L10.8536 9.64645C11.0271 9.82001 11.0464 10.0894 10.9114 10.2843L10.8536 10.3536L6.35355 14.8536C6.15829 15.0488 5.84171 15.0488 5.64645 14.8536C5.47288 14.68 5.4536 14.4106 5.58859 14.2157L5.64645 14.1464L9.79289 10L5.64645 5.85355C5.45118 5.65829 5.45118 5.34171 5.64645 5.14645Z\", fill: \"currentColor\" })));\nexport const closeIcon = (h(\"svg\", { viewBox: \"0 0 20 20\", fill: \"none\", xmlns: \"http://www.w3.org/2000/svg\" },\n    h(\"path\", { d: \"M4.089 4.216l.057-.07a.5.5 0 0 1 .638-.057l.07.057L10 9.293l5.146-5.147a.5.5 0 0 1 .638-.057l.07.057a.5.5 0 0 1 .057.638l-.057.07L10.707 10l5.147 5.146a.5.5 0 0 1 .057.638l-.057.07a.5.5 0 0 1-.638.057l-.07-.057L10 10.707l-5.146 5.147a.5.5 0 0 1-.638.057l-.07-.057a.5.5 0 0 1-.057-.638l.057-.07L9.293 10L4.146 4.854a.5.5 0 0 1-.057-.638l.057-.07l-.057.07z\", fill: \"currentColor\" })));\n","import { c, cB, cNotM } from '../../../_utils/cssr';\nimport fadeInTransition from '../../../_styles/transitions/fade-in.cssr';\nimport fadeInzoomInTransiton from '../../../_styles/transitions/fade-in-scale-up.cssr'; // vars:\n// --icon-color\n// --bezier\n\nexport default c([c('body >', [cB('image-container', 'position: fixed;')]), cB('image-preview-container', `\n position: fixed;\n left: 0;\n right: 0;\n top: 0;\n bottom: 0;\n display: flex;\n `), cB('image-preview-overlay', `\n z-index: -1;\n position: absolute;\n left: 0;\n right: 0;\n top: 0;\n bottom: 0;\n background: rgba(0, 0, 0, .3);\n `, [fadeInTransition()]), cB('image-preview-toolbar', `\n z-index: 1;\n position: absolute;\n left: 50%;\n transform: translateX(-50%);\n border-radius: 24px;\n height: 48px;\n bottom: 40px;\n padding: 0 12px;\n background: rgba(0, 0, 0, .35);\n color: var(--icon-color);\n transition: color .3s var(--bezier);\n display: flex;\n align-items: center;\n `, [cB('base-icon', `\n padding: 0 8px;\n font-size: 28px;\n cursor: pointer;\n `), fadeInTransition()]), cB('image-preview-wrapper', `\n position: absolute;\n left: 0;\n right: 0;\n top: 0;\n bottom: 0;\n display: flex;\n pointer-events: none;\n `, [fadeInzoomInTransiton()]), cB('image-preview', `\n user-select: none;\n pointer-events: all;\n margin: auto;\n max-height: 100vh;\n max-width: 100vw;\n transition: transform .3s var(--bezier);\n `), cB('image', `\n display: inline-flex;\n max-height: 100%;\n max-width: 100%;\n `, [cNotM('preview-disabled', `\n cursor: pointer;\n `), c('img', `\n border-radius: inherit;\n `)])]);","import { h, defineComponent, Fragment, ref, withDirectives, Transition, vShow, renderSlot, watch, computed, toRef } from 'vue';\nimport { zindexable } from 'vdirs';\nimport { useIsMounted } from 'vooks';\nimport { LazyTeleport } from 'vueuc';\nimport { on, off } from 'evtd';\nimport { beforeNextFrameOnce } from 'seemly';\nimport { RotateClockwiseIcon, RotateCounterclockwiseIcon, ZoomInIcon, ZoomOutIcon } from '../../_internal/icons';\nimport { useTheme } from '../../_mixins';\nimport { NBaseIcon } from '../../_internal';\nimport { imageLight } from '../styles';\nimport { prevIcon, nextIcon, closeIcon } from './icons';\nimport style from './styles/index.cssr';\nexport default defineComponent({\n    name: 'ImagePreview',\n    props: {\n        showToolbar: Boolean,\n        onNext: Function,\n        onPrev: Function,\n        clsPrefix: {\n            type: String,\n            required: true\n        }\n    },\n    setup(props) {\n        const themeRef = useTheme('Image', 'Image', style, imageLight, {}, toRef(props, 'clsPrefix'));\n        let thumbnailEl = null;\n        const previewRef = ref(null);\n        const previewWrapperRef = ref(null);\n        const previewSrcRef = ref(undefined);\n        const showRef = ref(false);\n        const displayedRef = ref(false);\n        function syncTransformOrigin() {\n            const { value: previewWrapper } = previewWrapperRef;\n            if (!thumbnailEl || !previewWrapper)\n                return;\n            const { style } = previewWrapper;\n            const tbox = thumbnailEl.getBoundingClientRect();\n            const tx = tbox.left + tbox.width / 2;\n            const ty = tbox.top + tbox.height / 2;\n            style.transformOrigin = `${tx}px ${ty}px`;\n        }\n        function handleKeyup(e) {\n            var _a, _b;\n            switch (e.code) {\n                case 'ArrowLeft':\n                    (_a = props.onPrev) === null || _a === void 0 ? void 0 : _a.call(props);\n                    break;\n                case 'ArrowRight':\n                    (_b = props.onNext) === null || _b === void 0 ? void 0 : _b.call(props);\n                    break;\n                case 'Escape':\n                    toggleShow();\n                    break;\n            }\n        }\n        if (props.onPrev) {\n            watch(showRef, (value) => {\n                if (value)\n                    on('keyup', document, handleKeyup);\n                else\n                    off('keyup', document, handleKeyup);\n            });\n        }\n        let startX = 0;\n        let startY = 0;\n        let offsetX = 0;\n        let offsetY = 0;\n        let startOffsetX = 0;\n        let startOffsetY = 0;\n        let mouseDownClientX = 0;\n        let mouseDownClientY = 0;\n        let dragging = false;\n        function handleMouseMove(e) {\n            const { clientX, clientY } = e;\n            offsetX = clientX - startX;\n            offsetY = clientY - startY;\n            beforeNextFrameOnce(derivePreviewStyle);\n        }\n        function getMoveStrategy(opts) {\n            const { mouseUpClientX, mouseUpClientY, mouseDownClientX, mouseDownClientY } = opts;\n            const deltaHorizontal = mouseDownClientX - mouseUpClientX;\n            const deltaVertical = mouseDownClientY - mouseUpClientY;\n            let moveVerticalDirection = null;\n            let moveHorizontalDirection = null;\n            moveVerticalDirection = ('vertical' +\n                (deltaVertical > 0 ? 'Top' : 'Bottom'));\n            moveHorizontalDirection = ('horizontal' +\n                (deltaHorizontal > 0 ? 'Left' : 'Right'));\n            return {\n                moveVerticalDirection,\n                moveHorizontalDirection,\n                deltaHorizontal,\n                deltaVertical\n            };\n        }\n        // avoid image move outside viewport\n        function getDerivedOffset(moveStrategy) {\n            const { value: preview } = previewRef;\n            if (!preview)\n                return { offsetX: 0, offsetY: 0 };\n            const pbox = preview.getBoundingClientRect();\n            const { moveVerticalDirection, moveHorizontalDirection, deltaHorizontal, deltaVertical } = moveStrategy || {};\n            let nextOffsetX = 0;\n            let nextOffsetY = 0;\n            if (pbox.width <= window.innerWidth) {\n                nextOffsetX = 0;\n            }\n            else if (pbox.left > 0) {\n                nextOffsetX = (pbox.width - window.innerWidth) / 2;\n            }\n            else if (pbox.right < window.innerWidth) {\n                nextOffsetX = -(pbox.width - window.innerWidth) / 2;\n            }\n            else if (moveHorizontalDirection === 'horizontalRight') {\n                nextOffsetX = Math.min((pbox.width - window.innerWidth) / 2, startOffsetX - (deltaHorizontal !== null && deltaHorizontal !== void 0 ? deltaHorizontal : 0));\n            }\n            else {\n                nextOffsetX = Math.max(-((pbox.width - window.innerWidth) / 2), startOffsetX - (deltaHorizontal !== null && deltaHorizontal !== void 0 ? deltaHorizontal : 0));\n            }\n            if (pbox.height <= window.innerHeight) {\n                nextOffsetY = 0;\n            }\n            else if (pbox.top > 0) {\n                nextOffsetY = (pbox.height - window.innerHeight) / 2;\n            }\n            else if (pbox.bottom < window.innerHeight) {\n                nextOffsetY = -(pbox.height - window.innerHeight) / 2;\n            }\n            else if (moveVerticalDirection === 'verticalBottom') {\n                nextOffsetY = Math.min((pbox.height - window.innerHeight) / 2, startOffsetY - (deltaVertical !== null && deltaVertical !== void 0 ? deltaVertical : 0));\n            }\n            else {\n                nextOffsetY = Math.max(-((pbox.height - window.innerHeight) / 2), startOffsetY - (deltaVertical !== null && deltaVertical !== void 0 ? deltaVertical : 0));\n            }\n            return {\n                offsetX: nextOffsetX,\n                offsetY: nextOffsetY\n            };\n        }\n        function handleMouseUp(e) {\n            off('mousemove', document, handleMouseMove);\n            off('mouseup', document, handleMouseUp);\n            const { clientX: mouseUpClientX, clientY: mouseUpClientY } = e;\n            dragging = false;\n            const moveStrategy = getMoveStrategy({\n                mouseUpClientX,\n                mouseUpClientY,\n                mouseDownClientX,\n                mouseDownClientY\n            });\n            const offset = getDerivedOffset(moveStrategy);\n            offsetX = offset.offsetX;\n            offsetY = offset.offsetY;\n            derivePreviewStyle();\n        }\n        function handlePreviewMousedown(e) {\n            const { clientX, clientY } = e;\n            dragging = true;\n            startX = clientX - offsetX;\n            startY = clientY - offsetY;\n            startOffsetX = offsetX;\n            startOffsetY = offsetY;\n            mouseDownClientX = clientX;\n            mouseDownClientY = clientY;\n            derivePreviewStyle();\n            on('mousemove', document, handleMouseMove);\n            on('mouseup', document, handleMouseUp);\n        }\n        function handlePreviewDblclick() {\n            scale = scale === 1 ? 2 : 1;\n            derivePreviewStyle();\n        }\n        let scale = 1;\n        let rotate = 0;\n        function handleSwitchPrev() {\n            var _a;\n            scale = 1;\n            rotate = 0;\n            (_a = props.onPrev) === null || _a === void 0 ? void 0 : _a.call(props);\n        }\n        function handleSwitchNext() {\n            var _a;\n            scale = 1;\n            rotate = 0;\n            (_a = props.onNext) === null || _a === void 0 ? void 0 : _a.call(props);\n        }\n        function rotateCounterclockwise() {\n            rotate -= 90;\n            derivePreviewStyle();\n        }\n        function rotateClockwise() {\n            rotate += 90;\n            derivePreviewStyle();\n        }\n        function zoomIn() {\n            if (scale < 3) {\n                scale += 0.5;\n                derivePreviewStyle();\n            }\n        }\n        function zoomOut() {\n            if (scale > 0.5) {\n                scale -= 0.5;\n                derivePreviewStyle(false);\n                const offset = getDerivedOffset();\n                scale += 0.5;\n                derivePreviewStyle(false);\n                scale -= 0.5;\n                offsetX = offset.offsetX;\n                offsetY = offset.offsetY;\n                derivePreviewStyle();\n            }\n        }\n        function derivePreviewStyle(transition = true) {\n            const { value: preview } = previewRef;\n            if (!preview)\n                return;\n            const { style } = preview;\n            const transformStyle = `transform-origin: center; transform: translateX(${offsetX}px) translateY(${offsetY}px) rotate(${rotate}deg) scale(${scale});`;\n            if (dragging) {\n                style.cssText = 'cursor: grabbing; transition: none;' + transformStyle;\n            }\n            else {\n                style.cssText =\n                    'cursor: grab;' +\n                        transformStyle +\n                        (transition ? '' : 'transition: none;');\n            }\n            if (!transition) {\n                void preview.offsetHeight;\n            }\n        }\n        function toggleShow() {\n            showRef.value = !showRef.value;\n            displayedRef.value = true;\n        }\n        const exposedMethods = {\n            setPreviewSrc: (src) => {\n                previewSrcRef.value = src;\n            },\n            setThumbnailEl: (el) => {\n                thumbnailEl = el;\n            },\n            toggleShow\n        };\n        return Object.assign(Object.assign({ previewRef,\n            previewWrapperRef, previewSrc: previewSrcRef, show: showRef, appear: useIsMounted(), displayed: displayedRef, handlePreviewMousedown,\n            handlePreviewDblclick,\n            syncTransformOrigin, handleAfterLeave: () => {\n                rotate = 0;\n                scale = 1;\n                displayedRef.value = false;\n            }, handleDragStart: (e) => {\n                e.preventDefault();\n            }, zoomIn,\n            zoomOut,\n            rotateCounterclockwise,\n            rotateClockwise,\n            handleSwitchPrev,\n            handleSwitchNext }, exposedMethods), { cssVars: computed(() => {\n                const { common: { cubicBezierEaseInOut }, self: { iconColor } } = themeRef.value;\n                return {\n                    '--bezier': cubicBezierEaseInOut,\n                    '--icon-color': iconColor\n                };\n            }) });\n    },\n    render() {\n        const { clsPrefix } = this;\n        return (h(Fragment, null,\n            renderSlot(this.$slots, 'default'),\n            h(LazyTeleport, { show: this.show }, {\n                default: () => this.show || this.displayed\n                    ? withDirectives(h(\"div\", { class: `${clsPrefix}-image-preview-container`, style: this.cssVars },\n                        h(Transition, { name: \"fade-in-transition\", appear: this.appear }, {\n                            default: () => this.show ? (h(\"div\", { class: `${clsPrefix}-image-preview-overlay`, onClick: this.toggleShow })) : null\n                        }),\n                        this.showToolbar ? (h(Transition, { name: \"fade-in-transition\", appear: this.appear }, {\n                            default: () => this.show ? (h(\"div\", { class: `${clsPrefix}-image-preview-toolbar` },\n                                this.onPrev ? (h(Fragment, null,\n                                    h(NBaseIcon, { clsPrefix: clsPrefix, onClick: this.handleSwitchPrev }, { default: () => prevIcon }),\n                                    h(NBaseIcon, { clsPrefix: clsPrefix, onClick: this.handleSwitchNext }, { default: () => nextIcon }))) : null,\n                                h(NBaseIcon, { clsPrefix: clsPrefix, onClick: this.rotateCounterclockwise }, {\n                                    default: () => (h(RotateCounterclockwiseIcon, null))\n                                }),\n                                h(NBaseIcon, { clsPrefix: clsPrefix, onClick: this.rotateClockwise }, { default: () => h(RotateClockwiseIcon, null) }),\n                                h(NBaseIcon, { clsPrefix: clsPrefix, onClick: this.zoomOut }, { default: () => h(ZoomOutIcon, null) }),\n                                h(NBaseIcon, { clsPrefix: clsPrefix, onClick: this.zoomIn }, { default: () => h(ZoomInIcon, null) }),\n                                h(NBaseIcon, { clsPrefix: clsPrefix, onClick: this.toggleShow }, { default: () => closeIcon }))) : null\n                        })) : null,\n                        h(Transition, { name: \"fade-in-scale-up-transition\", onAfterLeave: this.handleAfterLeave, appear: this.appear, \n                            // BUG:\n                            // onEnter will be called twice, I don't know why\n                            // Maybe it is a bug of vue\n                            onEnter: this.syncTransformOrigin, onBeforeLeave: this.syncTransformOrigin }, {\n                            default: () => withDirectives(h(\"div\", { class: `${clsPrefix}-image-preview-wrapper`, ref: \"previewWrapperRef\" },\n                                h(\"img\", { draggable: false, onMousedown: this.handlePreviewMousedown, onDblclick: this.handlePreviewDblclick, class: `${clsPrefix}-image-preview`, key: this.previewSrc, src: this.previewSrc, ref: \"previewRef\", onDragstart: this.handleDragStart })), [[vShow, this.show]])\n                        })), [[zindexable, { enabled: this.show }]])\n                    : null\n            })));\n    }\n});\n","var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nexport function createId(length = 8) {\n    return Math.random()\n        .toString(16)\n        .slice(2, 2 + length);\n}\nexport function repeat(count, v) {\n    const ret = [];\n    for (let i = 0; i < count; ++i) {\n        ret.push(v);\n    }\n    return ret;\n}\nfunction indexMap(count, createValue) {\n    const ret = [];\n    if (!createValue) {\n        for (let i = 0; i < count; ++i) {\n            ret.push(i);\n        }\n        return ret;\n    }\n    for (let i = 0; i < count; ++i) {\n        ret.push(createValue(i));\n    }\n    return ret;\n}\nexport { indexMap };\nexport function sleep(ms) {\n    return __awaiter(this, void 0, void 0, function* () {\n        return new Promise(resolve => {\n            setTimeout(resolve, ms);\n        });\n    });\n}\n","import { defineComponent, h, ref, provide, renderSlot, getCurrentInstance } from 'vue';\nimport { createId } from 'seemly';\nimport NImagePreview from './ImagePreview';\nimport { useConfig } from '../../_mixins';\nexport const imageGroupInjectionKey = Symbol('image-group');\nconst imageGroupProps = {\n    showToolbar: { type: Boolean, default: true }\n};\nexport default defineComponent({\n    name: 'ImageGroup',\n    props: imageGroupProps,\n    setup(props) {\n        let currentSrc;\n        const { mergedClsPrefixRef } = useConfig(props);\n        const groupId = `c${createId()}`;\n        const vm = getCurrentInstance();\n        const setPreviewSrc = (src) => {\n            var _a;\n            currentSrc = src;\n            (_a = previewInstRef.value) === null || _a === void 0 ? void 0 : _a.setPreviewSrc(src);\n        };\n        function go(step) {\n            if (!(vm === null || vm === void 0 ? void 0 : vm.proxy))\n                return;\n            const container = vm.proxy.$el.parentElement;\n            // use dom api since we can't get the correct order before all children are rendered\n            const imgs = container.querySelectorAll(`.${groupId}:not([data-error=true])`);\n            if (!imgs.length)\n                return;\n            const index = Array.from(imgs).findIndex((img) => img.dataset.previewSrc === currentSrc);\n            if (~index) {\n                setPreviewSrc(imgs[(index + step + imgs.length) % imgs.length].dataset.previewSrc);\n            }\n            else {\n                setPreviewSrc(imgs[0].dataset.previewSrc);\n            }\n        }\n        provide(imageGroupInjectionKey, {\n            mergedClsPrefixRef,\n            setPreviewSrc,\n            setThumbnailEl: (el) => {\n                var _a;\n                (_a = previewInstRef.value) === null || _a === void 0 ? void 0 : _a.setThumbnailEl(el);\n            },\n            toggleShow: () => {\n                var _a;\n                (_a = previewInstRef.value) === null || _a === void 0 ? void 0 : _a.toggleShow();\n            },\n            groupId\n        });\n        const previewInstRef = ref(null);\n        return {\n            mergedClsPrefix: mergedClsPrefixRef,\n            previewInstRef,\n            next: () => go(1),\n            prev: () => go(-1)\n        };\n    },\n    render() {\n        return (h(NImagePreview, { clsPrefix: this.mergedClsPrefix, ref: \"previewInstRef\", onPrev: this.prev, onNext: this.next, showToolbar: this.showToolbar }, {\n            default: () => renderSlot(this.$slots, 'default')\n        }));\n    }\n});\n","import { defineComponent, h, inject, ref, toRef, mergeProps, watchEffect } from 'vue';\nimport NImagePreview from './ImagePreview';\nimport { imageGroupInjectionKey } from './ImageGroup';\nimport { useConfig } from '../../_mixins';\nconst imageProps = {\n    alt: String,\n    height: [String, Number],\n    imgProps: Object,\n    objectFit: {\n        type: String,\n        default: 'fill'\n    },\n    previewSrc: String,\n    fallbackSrc: String,\n    width: [String, Number],\n    src: String,\n    showToolbar: { type: Boolean, default: true },\n    previewDisabled: Boolean,\n    loadDescription: String,\n    onError: Function,\n    onLoad: Function\n};\nexport default defineComponent({\n    name: 'Image',\n    props: imageProps,\n    inheritAttrs: false,\n    setup(props) {\n        const imageRef = ref(null);\n        const showErrorRef = ref(false);\n        const imgPropsRef = toRef(props, 'imgProps');\n        const previewInstRef = ref(null);\n        const imageGroupHandle = inject(imageGroupInjectionKey, null);\n        const { mergedClsPrefixRef } = imageGroupHandle || useConfig(props);\n        const exposedMethods = {\n            click: () => {\n                if (props.previewDisabled || showErrorRef.value)\n                    return;\n                const mergedPreviewSrc = props.previewSrc || props.src;\n                if (imageGroupHandle) {\n                    imageGroupHandle.setPreviewSrc(mergedPreviewSrc);\n                    imageGroupHandle.setThumbnailEl(imageRef.value);\n                    imageGroupHandle.toggleShow();\n                    return;\n                }\n                const { value: previewInst } = previewInstRef;\n                if (!previewInst)\n                    return;\n                previewInst.setPreviewSrc(mergedPreviewSrc);\n                previewInst.setThumbnailEl(imageRef.value);\n                previewInst.toggleShow();\n            }\n        };\n        watchEffect(() => {\n            var _a;\n            void props.src;\n            void ((_a = props.imgProps) === null || _a === void 0 ? void 0 : _a.src);\n            showErrorRef.value = false;\n        });\n        return Object.assign({ mergedClsPrefix: mergedClsPrefixRef, groupId: imageGroupHandle === null || imageGroupHandle === void 0 ? void 0 : imageGroupHandle.groupId, previewInstRef,\n            imageRef, imgProps: imgPropsRef, showError: showErrorRef, mergedOnError: (e) => {\n                showErrorRef.value = true;\n                const { onError, imgProps: { onError: imgPropsOnError } = {} } = props;\n                onError === null || onError === void 0 ? void 0 : onError(e);\n                imgPropsOnError === null || imgPropsOnError === void 0 ? void 0 : imgPropsOnError(e);\n            }, mergedOnLoad: (e) => {\n                const { onLoad, imgProps: { onLoad: imgPropsOnLoad } = {} } = props;\n                onLoad === null || onLoad === void 0 ? void 0 : onLoad(e);\n                imgPropsOnLoad === null || imgPropsOnLoad === void 0 ? void 0 : imgPropsOnLoad(e);\n            } }, exposedMethods);\n    },\n    render() {\n        const { mergedClsPrefix, imgProps = {} } = this;\n        const imgWrapperNode = h('div', mergeProps(this.$attrs, {\n            role: 'none',\n            class: [\n                `${mergedClsPrefix}-image`,\n                (this.previewDisabled || this.showError) &&\n                    `${mergedClsPrefix}-image--preview-disabled`\n            ]\n        }), [\n            h(\"img\", Object.assign({}, imgProps, { class: [this.groupId, imgProps.class], ref: \"imageRef\", width: this.width || imgProps.width, height: this.height || imgProps.height, src: this.showError ? this.fallbackSrc : this.src || imgProps.src, alt: this.alt || imgProps.alt, \"aria-label\": this.alt || imgProps.alt, onClick: this.click, onError: this.mergedOnError, onLoad: this.mergedOnLoad, style: [imgProps.style || '', { objectFit: this.objectFit }], \"data-error\": this.showError, \"data-preview-src\": this.previewSrc || this.src }))\n        ]);\n        return this.groupId ? (imgWrapperNode) : (h(NImagePreview, { clsPrefix: mergedClsPrefix, ref: \"previewInstRef\", showToolbar: this.showToolbar }, {\n            default: () => imgWrapperNode\n        }));\n    }\n});\n","<script>\n/* eslint-disable no-unused-vars */\nimport imgRouter from \"@/plugins/img-router.js\";\nimport failedToLoadImg from \"/public/img/failed-to-load.png\";\nimport { h, createApp } from \"vue\";\nimport { NImage } from \"naive-ui\";\n\nexport default {\n  components: {\n    failedToLoadImg,\n  },\n  render() {\n    return h(\"div\", {\n      id: \"md\",\n      class: this.mdClass,\n      key: this.key,\n    });\n  },\n  props: [\"content\", \"class\", \"key\"],\n  mounted: function () {\n    this.renderMd(this.content);\n  },\n  watch: {\n    //   when the content is load\n    content: function (nV) {\n      this.renderMd(nV);\n    },\n  },\n  computed: {\n    mdClass: function () {\n      if (this.class !== null && this.class !== undefined) {\n        return this.class;\n      }\n      return \"article markdown-body editormd-html-preview animate__animated animate__fadeIn\";\n    },\n  },\n  methods: {\n    imgReplacement(innerHTML) {\n      innerHTML = innerHTML.replaceAll(\n        \"<img\",\n        `<n-image fallback-src=\"${failedToLoadImg}\"`\n      );\n      var unhandleImageTagStart = innerHTML.indexOf(\"<n-image\");\n      const unhandleImageTagStringList = [];\n      while (unhandleImageTagStart !== -1) {\n        var unhandleImageTagEnd = innerHTML.indexOf(\n          '\">',\n          unhandleImageTagStart + 8\n        );\n        unhandleImageTagStringList.push(\n          innerHTML.substring(unhandleImageTagStart, unhandleImageTagEnd + 2)\n        );\n        unhandleImageTagStart = innerHTML.indexOf(\n          \"<n-image\",\n          unhandleImageTagEnd + 2\n        );\n      }\n      for (let item of unhandleImageTagStringList) {\n        innerHTML = innerHTML.replaceAll(\n          item,\n          item.substring(0, item.length - 1) + \"/>\"\n        );\n      }\n      return innerHTML;\n    },\n    renderMd(c) {\n      if (c === null) {\n        return;\n      }\n      // pre route the img src before they actually render into the real dom\n      const node = new DOMParser().parseFromString(c, \"text/html\");\n      imgRouter.routeElements(node.getElementsByTagName(\"img\"));\n      var innerHTML = node.children[0].children[1].innerHTML;\n\n      // replace img with n-image\n      innerHTML = this.imgReplacement(innerHTML);\n\n      // render it\n      const body = {\n        template: innerHTML,\n        components: {\n          NImage,\n        },\n      };\n      createApp(body).mount(\"#md\");\n    },\n  },\n};\n</script>\n\n<style>\n@import url(\"https://cdn.jsdelivr.net/npm/katex@0.15.1/dist/katex.min.css\");\n@import url(\"@/assets/css/editormd-0.0.1.preview.css\");\n@import url(\"@/assets/css/markdown-body.css\");\n@import url(\"@/assets/css/github-gist.css\");\n.article-metadata {\n  min-height: 90px;\n}\n.title {\n  margin: 0;\n  font-size: 25px;\n}\n.katexp {\n  text-align: center;\n  background-color: #f8f9fa;\n  padding: 0.5rem;\n  font-size: 15px;\n  border-right: 2px solid #80caff;\n}\n\n.katexp:hover {\n  box-shadow: 0px 5px 10px -2px #777;\n}\n.n-image {\n  width: 100%;\n}\nimg[data-error=\"true\"] {\n  width: 180px;\n}\n</style>\n","import script from \"./MarkdownBody.vue?vue&type=script&lang=js\"\nexport * from \"./MarkdownBody.vue?vue&type=script&lang=js\"\n\nimport \"./MarkdownBody.vue?vue&type=style&index=0&id=67b1ca5c&lang=css\"\n\nconst __exports__ = script;\n\nexport default __exports__","<template>\n  <transition name=\"fade5\" mode=\"out-in\">\n    <div id=\"toc-box\" class=\"toc-box\">\n      <n-anchor\n        v-if=\"winWidth >= 900\"\n        :show-background=\"true\"\n        ignore-gap\n        :bound=\"winHeight / 2\"\n      >\n        <n-anchor-link\n          class=\"toc-item\"\n          v-for=\"toc of computedTocList\"\n          :key=\"toc.id\"\n          :title=\"toc.content\"\n          :href=\"'#' + toc.id\"\n        />\n      </n-anchor>\n    </div>\n  </transition>\n</template>\n\n<script>\nimport { NAnchor, NAnchorLink } from \"naive-ui\";\n\nexport default {\n  props: [\"toc\"],\n  components: {\n    NAnchor,\n    NAnchorLink,\n  },\n  data: () => ({\n    winHeight: 0,\n    winWidth: 0,\n    resizeTimer: 0,\n  }),\n  mounted: function () {\n    this.winHeight = this.getWinHeight();\n    this.winWidth = this.getWinWidth();\n    this.adjustTocRight();\n    window.onresize = () => {\n      this.adjustTocRight();\n      clearTimeout(this.resizeTimer);\n      this.resizeTimer = setTimeout(() => {\n        this.winHeight = this.getWinHeight();\n        this.winWidth = this.getWinWidth();\n      }, 100);\n    };\n  },\n  computed: {\n    computedTocList: function () {\n      return this.$props.toc;\n    },\n  },\n  methods: {\n    adjustTocRight: function () {\n      const el = document.getElementById(\"toc-box\");\n      if (el !== null) el.style.width = this.getLeft() - 60 + \"px\";\n    },\n    getLeft: function () {\n      return (this.getWinWidth() - 800) / 2;\n    },\n    getWinWidth: function () {\n      let winWidth = 0;\n      if (window.innerWidth) winWidth = window.innerWidth;\n      else if (document.body && document.body.clientWidth)\n        winWidth = document.body.clientWidth;\n      return winWidth;\n    },\n    getWinHeight: function () {\n      let winHeight = 0;\n      if (window.innerHeight) winHeight = window.innerHeight;\n      else if (document.body && document.body.clientHeight)\n        winHeight = document.body.clientHeight;\n      return winHeight;\n    },\n  },\n};\n</script>\n\n<style>\n.toc-box {\n  position: fixed;\n  top: 6rem;\n  bottom: 4rem;\n  overflow: scroll;\n  /* width: 200px; */\n  right: 2rem;\n}\n</style>\n","function unwrapElement(target) {\n    if (typeof target === 'string')\n        return document.querySelector(target);\n    if (typeof target === 'function')\n        return target();\n    return target;\n}\nexport { unwrapElement };\n","export function getScrollTop(target) {\n    return target instanceof HTMLElement ? target.scrollTop : window.scrollY;\n}\nexport function getRect(target) {\n    return target instanceof HTMLElement\n        ? target.getBoundingClientRect()\n        : { top: 0, bottom: window.innerHeight };\n}\n","import { cB, cM } from '../../../_utils/cssr';\nexport default cB('affix', [cM('affixed', {\n  position: 'fixed'\n}, [cM('absolute-positioned', {\n  position: 'absolute'\n})])]);","import { ref, computed, onMounted, onBeforeUnmount, defineComponent, h } from 'vue';\nimport { unwrapElement, beforeNextFrameOnce } from 'seemly';\nimport { useConfig, useStyle } from '../../_mixins';\nimport { warn, keysOf } from '../../_utils';\nimport { getScrollTop, getRect } from './utils';\nimport style from './styles/index.cssr';\nexport const affixProps = {\n    listenTo: [String, Object, Function],\n    top: Number,\n    bottom: Number,\n    triggerTop: Number,\n    triggerBottom: Number,\n    position: {\n        type: String,\n        default: 'fix'\n    },\n    // deprecated\n    offsetTop: {\n        type: Number,\n        validator: () => {\n            if (process.env.NODE_ENV !== 'production') {\n                warn('affix', '`offset-top` is deprecated, please use `trigger-top` instead.');\n            }\n            return true;\n        },\n        default: undefined\n    },\n    offsetBottom: {\n        type: Number,\n        validator: () => {\n            if (process.env.NODE_ENV !== 'production') {\n                warn('affix', '`offset-bottom` is deprecated, please use `trigger-bottom` instead.');\n            }\n            return true;\n        },\n        default: undefined\n    },\n    target: {\n        type: Function,\n        validator: () => {\n            if (process.env.NODE_ENV !== 'production') {\n                warn('affix', '`target` is deprecated, please use `listen-to` instead.');\n            }\n            return true;\n        },\n        default: undefined\n    }\n};\nexport const affixPropKeys = keysOf(affixProps);\nexport default defineComponent({\n    name: 'Affix',\n    props: affixProps,\n    setup(props) {\n        const { mergedClsPrefixRef } = useConfig(props);\n        useStyle('Affix', style, mergedClsPrefixRef);\n        let scrollTarget = null;\n        const stickToTopRef = ref(false);\n        const stickToBottomRef = ref(false);\n        const bottomAffixedTriggerScrollTopRef = ref(null);\n        const topAffixedTriggerScrollTopRef = ref(null);\n        const affixedRef = computed(() => {\n            return stickToBottomRef.value || stickToTopRef.value;\n        });\n        const mergedOffsetTopRef = computed(() => {\n            var _a, _b;\n            return (_b = (_a = props.triggerTop) !== null && _a !== void 0 ? _a : props.offsetTop) !== null && _b !== void 0 ? _b : props.top;\n        });\n        const mergedTopRef = computed(() => {\n            var _a, _b;\n            return (_b = (_a = props.top) !== null && _a !== void 0 ? _a : props.triggerTop) !== null && _b !== void 0 ? _b : props.offsetTop;\n        });\n        const mergedBottomRef = computed(() => {\n            var _a, _b;\n            return (_b = (_a = props.bottom) !== null && _a !== void 0 ? _a : props.triggerBottom) !== null && _b !== void 0 ? _b : props.offsetBottom;\n        });\n        const mergedOffsetBottomRef = computed(() => {\n            var _a, _b;\n            return (_b = (_a = props.triggerBottom) !== null && _a !== void 0 ? _a : props.offsetBottom) !== null && _b !== void 0 ? _b : props.bottom;\n        });\n        const selfRef = ref(null);\n        const init = () => {\n            const { target: getScrollTarget, listenTo } = props;\n            if (getScrollTarget) {\n                // deprecated\n                scrollTarget = getScrollTarget();\n            }\n            else if (listenTo) {\n                scrollTarget = unwrapElement(listenTo);\n            }\n            else {\n                scrollTarget = document;\n            }\n            if (scrollTarget) {\n                scrollTarget.addEventListener('scroll', handleScroll);\n                handleScroll();\n            }\n            else if (process.env.NODE_ENV !== 'production') {\n                warn('affix', 'Target to be listened to is not valid.');\n            }\n        };\n        function handleScroll() {\n            beforeNextFrameOnce(_handleScroll);\n        }\n        function _handleScroll() {\n            const { value: selfEl } = selfRef;\n            if (!scrollTarget || !selfEl)\n                return;\n            const scrollTop = getScrollTop(scrollTarget);\n            if (affixedRef.value) {\n                if (scrollTop < topAffixedTriggerScrollTopRef.value) {\n                    stickToTopRef.value = false;\n                    topAffixedTriggerScrollTopRef.value = null;\n                }\n                if (scrollTop > bottomAffixedTriggerScrollTopRef.value) {\n                    stickToBottomRef.value = false;\n                    bottomAffixedTriggerScrollTopRef.value = null;\n                }\n                return;\n            }\n            const containerRect = getRect(scrollTarget);\n            const affixRect = selfEl.getBoundingClientRect();\n            const pxToTop = affixRect.top - containerRect.top;\n            const pxToBottom = containerRect.bottom - affixRect.bottom;\n            const mergedOffsetTop = mergedOffsetTopRef.value;\n            const mergedOffsetBottom = mergedOffsetBottomRef.value;\n            if (mergedOffsetTop !== undefined && pxToTop <= mergedOffsetTop) {\n                stickToTopRef.value = true;\n                topAffixedTriggerScrollTopRef.value =\n                    scrollTop - (mergedOffsetTop - pxToTop);\n            }\n            else {\n                stickToTopRef.value = false;\n                topAffixedTriggerScrollTopRef.value = null;\n            }\n            if (mergedOffsetBottom !== undefined &&\n                pxToBottom <= mergedOffsetBottom) {\n                stickToBottomRef.value = true;\n                bottomAffixedTriggerScrollTopRef.value =\n                    scrollTop + mergedOffsetBottom - pxToBottom;\n            }\n            else {\n                stickToBottomRef.value = false;\n                bottomAffixedTriggerScrollTopRef.value = null;\n            }\n        }\n        onMounted(() => {\n            init();\n        });\n        onBeforeUnmount(() => {\n            if (!scrollTarget)\n                return;\n            scrollTarget.removeEventListener('scroll', handleScroll);\n        });\n        return {\n            selfRef,\n            affixed: affixedRef,\n            mergedClsPrefix: mergedClsPrefixRef,\n            mergedstyle: computed(() => {\n                const style = {};\n                if (stickToTopRef.value &&\n                    mergedOffsetTopRef.value !== undefined &&\n                    mergedTopRef.value !== undefined) {\n                    style.top = `${mergedTopRef.value}px`;\n                }\n                if (stickToBottomRef.value &&\n                    mergedOffsetBottomRef.value !== undefined &&\n                    mergedBottomRef.value !== undefined) {\n                    style.bottom = `${mergedBottomRef.value}px`;\n                }\n                return style;\n            })\n        };\n    },\n    render() {\n        const { mergedClsPrefix } = this;\n        return (h(\"div\", { ref: \"selfRef\", class: [\n                `${mergedClsPrefix}-affix`,\n                {\n                    [`${mergedClsPrefix}-affix--affixed`]: this.affixed,\n                    [`${mergedClsPrefix}-affix--absolute-positioned`]: this.position === 'absolute'\n                }\n            ], style: this.mergedstyle }, this.$slots));\n    }\n});\n","import { c, cE, cB, cM, cNotM } from '../../../_utils/cssr'; // vars:\n// --link-color\n// --link-font-size\n// --link-text-color\n// --link-text-color-hover\n// --link-text-color-active\n// --link-text-color-pressed\n// --bezier\n// --rail-color\n// --rail-color-active\n// --rail-width\n// --link-padding\n// --link-border-radius\n\nexport default cB('anchor', `\n position: relative;\n`, [cNotM('block', `\n padding-left: var(--rail-width);\n `, [cB('anchor-link', [c('+, >', [cB('anchor-link', `\n margin-top: .5em;\n `)])]), cB('anchor-link-background', `\n max-width: 0;\n border-top-right-radius: 10.5px;\n border-bottom-right-radius: 10.5px;\n `), cNotM('show-rail', [c('>', [cB('anchor-link', 'padding-left: 0;')])])]), cM('block', [cB('anchor-link', `\n margin-bottom: 4px;\n padding: 2px 8px;\n transition: background-color .3s var(--bezier);\n background-color: transparent;\n border-radius: var(--link-border-radius);\n `, [cM('active', `\n background-color: var(--link-color);\n `)])]), cB('anchor-link-background', `\n position: absolute;\n left: calc(var(--rail-width) / 2);\n width: 100%;\n background-color: var(--link-color);\n transition:\n top .15s var(--bezier),\n max-width .15s var(--bezier),\n background-color .3s var(--bezier);\n `), cB('anchor-rail', `\n position: absolute;\n left: 0;\n top: 0;\n bottom: 0;\n width: var(--rail-width);\n border-radius: calc(var(--rail-width) / 2);\n overflow: hidden;\n transition: background-color .3s var(--bezier);\n background-color: var(--rail-color);\n `, [cE('bar', `\n position: absolute;\n left: 0;\n width: var(--rail-width);\n height: 21px;\n background-color: #0000;\n transition: \n top .15s var(--bezier),\n background-color .3s var(--bezier);\n `, [cM('active', {\n  backgroundColor: 'var(--rail-color-active)'\n})])]), cB('anchor-link', `\n padding: var(--link-padding);\n position: relative;\n line-height: 1.5;\n font-size: var(--link-font-size);\n min-height: 1.5em;\n display: flex;\n flex-direction: column;\n `, [cM('active', [cE('title', `\n color: var(--link-text-color-active);\n `)]), c('&:hover, &:focus', [cE('title', `\n color: var(--link-text-color-hover);\n `)]), c('&:active', [cE('title', `\n color: var(--link-text-color-pressed);\n `)]), cE('title', `\n outline: none;\n max-width: 100%;\n text-decoration: none;\n white-space: nowrap;\n text-overflow: ellipsis;\n overflow: hidden;\n cursor: pointer;\n display: inline-block;\n padding-right: 16px;\n transition: color .3s var(--bezier);\n color: var(--link-text-color);\n `)])]);","export const isIos = (typeof window === 'undefined'\n    ? false\n    : /iPad|iPhone|iPod/.test(navigator.platform) ||\n        (navigator.platform === 'MacIntel' && navigator.maxTouchPoints > 1)) &&\n    // eslint-disable-next-line @typescript-eslint/strict-boolean-expressions\n    !window.MSStream;\nexport default function useIsIos() {\n    return isIos;\n}\n","import { cB, c, cM, cE } from '../../../../_utils/cssr';\nimport fadeInTransition from '../../../../_styles/transitions/fade-in.cssr'; // vars:\n// --scrollbar-bezier\n// --scrollbar-color\n// --scrollbar-color-hover\n// --scrollbar-width\n// --scrollbar-height\n// --scrollbar-border-radius\n\nexport default cB('scrollbar', `\n overflow: hidden;\n position: relative;\n z-index: auto;\n height: 100%;\n width: 100%;\n`, [c('>', [cB('scrollbar-container', `\n width: 100%;\n overflow: scroll;\n height: 100%;\n max-height: inherit;\n scrollbar-width: none;\n `, [c('&::-webkit-scrollbar, &::-webkit-scrollbar-track-piece, &::-webkit-scrollbar-thumb', `\n width: 0;\n height: 0;\n display: none;\n `), c('>', [cB('scrollbar-content', `\n box-sizing: border-box;\n min-width: 100%;\n `)])]), cB('scrollbar-rail', `\n position: absolute;\n pointer-events: none;\n user-select: none;\n `, [cM('horizontal', `\n left: 2px;\n right: 2px;\n bottom: 4px;\n height: var(--scrollbar-height);\n `, [c('>', [cE('scrollbar', `\n height: var(--scrollbar-height);\n border-radius: var(--scrollbar-border-radius);\n right: 0;\n `)])]), cM('vertical', `\n right: 4px;\n top: 2px;\n bottom: 2px;\n width: var(--scrollbar-width);\n `, [c('>', [cE('scrollbar', `\n width: var(--scrollbar-width);\n border-radius: var(--scrollbar-border-radius);\n bottom: 0;\n `)])]), cM('disabled', [c('>', [cE('scrollbar', {\n  pointerEvents: 'none'\n})])]), c('>', [cE('scrollbar', `\n position: absolute;\n cursor: pointer;\n pointer-events: all;\n background-color: var(--scrollbar-color);\n transition: background-color .2s var(--scrollbar-bezier);\n `, [fadeInTransition(), c('&:hover', {\n  backgroundColor: 'var(--scrollbar-color-hover)'\n})])])])])]);","import { h, ref, defineComponent, computed, onMounted, onBeforeUnmount, mergeProps, renderSlot, Transition, watchEffect } from 'vue';\nimport { on, off } from 'evtd';\nimport { VResizeObserver } from 'vueuc';\nimport { useIsIos } from 'vooks';\nimport { useConfig, useTheme } from '../../../_mixins';\nimport { scrollbarLight } from '../styles';\nimport style from './styles/index.cssr';\nconst scrollbarProps = Object.assign(Object.assign({}, useTheme.props), { size: {\n        type: Number,\n        default: 5\n    }, duration: {\n        type: Number,\n        default: 0\n    }, scrollable: {\n        type: Boolean,\n        default: true\n    }, xScrollable: {\n        type: Boolean,\n        default: false\n    }, \n    // If container is set, resize observer won't not attached\n    container: Function, content: Function, containerStyle: [String, Object], contentClass: String, contentStyle: [String, Object], horizontalRailStyle: [String, Object], verticalRailStyle: [String, Object], onScroll: Function, onWheel: Function, onResize: Function, internalOnUpdateScrollLeft: Function });\nconst Scrollbar = defineComponent({\n    name: 'Scrollbar',\n    props: scrollbarProps,\n    inheritAttrs: false,\n    setup(props) {\n        const { mergedClsPrefixRef } = useConfig(props);\n        // dom ref\n        const wrapperRef = ref(null);\n        const containerRef = ref(null);\n        const contentRef = ref(null);\n        const yRailRef = ref(null);\n        const xRailRef = ref(null);\n        // data ref\n        const contentHeightRef = ref(null);\n        const contentWidthRef = ref(null);\n        const containerHeightRef = ref(null);\n        const containerWidthRef = ref(null);\n        const yRailSizeRef = ref(null);\n        const xRailSizeRef = ref(null);\n        const containerScrollTopRef = ref(0);\n        const containerScrollLeftRef = ref(0);\n        const isShowXBarRef = ref(false);\n        const isShowYBarRef = ref(false);\n        let yBarPressed = false;\n        let xBarPressed = false;\n        let xBarVanishTimerId;\n        let yBarVanishTimerId;\n        let memoYTop = 0;\n        let memoXLeft = 0;\n        let memoMouseX = 0;\n        let memoMouseY = 0;\n        const isIos = useIsIos();\n        const yBarSizeRef = computed(() => {\n            const { value: containerHeight } = containerHeightRef;\n            const { value: contentHeight } = contentHeightRef;\n            const { value: yRailSize } = yRailSizeRef;\n            if (containerHeight === null ||\n                contentHeight === null ||\n                yRailSize === null) {\n                return 0;\n            }\n            else {\n                return Math.min(containerHeight, (yRailSize * containerHeight) / contentHeight + props.size * 1.5);\n            }\n        });\n        const yBarSizePxRef = computed(() => {\n            return `${yBarSizeRef.value}px`;\n        });\n        const xBarSizeRef = computed(() => {\n            const { value: containerWidth } = containerWidthRef;\n            const { value: contentWidth } = contentWidthRef;\n            const { value: xRailSize } = xRailSizeRef;\n            if (containerWidth === null ||\n                contentWidth === null ||\n                xRailSize === null) {\n                return 0;\n            }\n            else {\n                return (xRailSize * containerWidth) / contentWidth + props.size * 1.5;\n            }\n        });\n        const xBarSizePxRef = computed(() => {\n            return `${xBarSizeRef.value}px`;\n        });\n        const yBarTopRef = computed(() => {\n            const { value: containerHeight } = containerHeightRef;\n            const { value: containerScrollTop } = containerScrollTopRef;\n            const { value: contentHeight } = contentHeightRef;\n            const { value: yRailSize } = yRailSizeRef;\n            if (containerHeight === null ||\n                contentHeight === null ||\n                yRailSize === null) {\n                return 0;\n            }\n            else {\n                return ((containerScrollTop / (contentHeight - containerHeight)) *\n                    (yRailSize - yBarSizeRef.value));\n            }\n        });\n        const yBarTopPxRef = computed(() => {\n            return `${yBarTopRef.value}px`;\n        });\n        const xBarLeftRef = computed(() => {\n            const { value: containerWidth } = containerWidthRef;\n            const { value: containerScrollLeft } = containerScrollLeftRef;\n            const { value: contentWidth } = contentWidthRef;\n            const { value: xRailSize } = xRailSizeRef;\n            if (containerWidth === null ||\n                contentWidth === null ||\n                xRailSize === null) {\n                return 0;\n            }\n            else {\n                return ((containerScrollLeft / (contentWidth - containerWidth)) *\n                    (xRailSize - xBarSizeRef.value));\n            }\n        });\n        const xBarLeftPxRef = computed(() => {\n            return `${xBarLeftRef.value}px`;\n        });\n        const needYBarRef = computed(() => {\n            const { value: containerHeight } = containerHeightRef;\n            const { value: contentHeight } = contentHeightRef;\n            return (containerHeight !== null &&\n                contentHeight !== null &&\n                contentHeight > containerHeight);\n        });\n        const needXBarRef = computed(() => {\n            const { value: containerWidth } = containerWidthRef;\n            const { value: contentWidth } = contentWidthRef;\n            return (containerWidth !== null &&\n                contentWidth !== null &&\n                contentWidth > containerWidth);\n        });\n        const mergedContainerRef = computed(() => {\n            const { container } = props;\n            if (container)\n                return container();\n            return containerRef.value;\n        });\n        const mergedContentRef = computed(() => {\n            const { content } = props;\n            if (content)\n                return content();\n            return contentRef.value;\n        });\n        // methods\n        const handleContentResize = sync;\n        const handleContainerResize = (e) => {\n            const { onResize } = props;\n            if (onResize)\n                onResize(e);\n            sync();\n        };\n        const scrollTo = (options, y) => {\n            if (!props.scrollable)\n                return;\n            if (typeof options === 'number') {\n                scrollToPosition(options, y !== null && y !== void 0 ? y : 0, 0, false, 'auto');\n                return;\n            }\n            const { left, top, index, elSize, position, behavior, el, debounce = true } = options;\n            if (left !== undefined || top !== undefined) {\n                scrollToPosition(left !== null && left !== void 0 ? left : 0, top !== null && top !== void 0 ? top : 0, 0, false, behavior);\n            }\n            if (el !== undefined) {\n                scrollToPosition(0, el.offsetTop, el.offsetHeight, debounce, behavior);\n            }\n            else if (index !== undefined && elSize !== undefined) {\n                scrollToPosition(0, index * elSize, elSize, debounce, behavior);\n            }\n            else if (position === 'bottom') {\n                scrollToPosition(0, Number.MAX_SAFE_INTEGER, 0, false, behavior);\n            }\n            else if (position === 'top') {\n                scrollToPosition(0, 0, 0, false, behavior);\n            }\n        };\n        function scrollToPosition(left, top, elSize, debounce, behavior) {\n            const { value: container } = mergedContainerRef;\n            if (!container)\n                return;\n            if (debounce) {\n                const { scrollTop, offsetHeight } = container;\n                if (top > scrollTop) {\n                    if (top + elSize <= scrollTop + offsetHeight) {\n                        // do nothing\n                    }\n                    else {\n                        container.scrollTo({\n                            left,\n                            top: top + elSize - offsetHeight,\n                            behavior\n                        });\n                    }\n                    return;\n                }\n            }\n            container.scrollTo({\n                left,\n                top,\n                behavior\n            });\n        }\n        function handleMouseEnterWrapper() {\n            showXBar();\n            showYBar();\n            sync();\n        }\n        function handleMouseLeaveWrapper() {\n            hideBar();\n        }\n        function hideBar() {\n            hideYBar();\n            hideXBar();\n        }\n        function hideYBar() {\n            if (yBarVanishTimerId !== undefined) {\n                window.clearTimeout(yBarVanishTimerId);\n            }\n            yBarVanishTimerId = window.setTimeout(() => {\n                isShowYBarRef.value = false;\n            }, props.duration);\n        }\n        function hideXBar() {\n            if (xBarVanishTimerId !== undefined) {\n                window.clearTimeout(xBarVanishTimerId);\n            }\n            xBarVanishTimerId = window.setTimeout(() => {\n                isShowXBarRef.value = false;\n            }, props.duration);\n        }\n        function showXBar() {\n            if (xBarVanishTimerId !== undefined) {\n                window.clearTimeout(xBarVanishTimerId);\n            }\n            isShowXBarRef.value = true;\n        }\n        function showYBar() {\n            if (yBarVanishTimerId !== undefined) {\n                window.clearTimeout(yBarVanishTimerId);\n            }\n            isShowYBarRef.value = true;\n        }\n        function handleScroll(e) {\n            const { onScroll } = props;\n            if (onScroll)\n                onScroll(e);\n            syncScrollState();\n        }\n        function syncScrollState() {\n            // only collect scroll state, do not trigger any dom event\n            const { value: container } = mergedContainerRef;\n            if (container) {\n                containerScrollTopRef.value = container.scrollTop;\n                containerScrollLeftRef.value = container.scrollLeft;\n            }\n        }\n        function syncPositionState() {\n            // only collect position state, do not trigger any dom event\n            // Don't use getClientBoundingRect because element may be scale transformed\n            const { value: content } = mergedContentRef;\n            if (content) {\n                contentHeightRef.value = content.offsetHeight;\n                contentWidthRef.value = content.offsetWidth;\n            }\n            const { value: container } = mergedContainerRef;\n            if (container) {\n                containerHeightRef.value = container.offsetHeight;\n                containerWidthRef.value = container.offsetWidth;\n            }\n            const { value: xRailEl } = xRailRef;\n            const { value: yRailEl } = yRailRef;\n            if (xRailEl) {\n                xRailSizeRef.value = xRailEl.offsetWidth;\n            }\n            if (yRailEl) {\n                yRailSizeRef.value = yRailEl.offsetHeight;\n            }\n        }\n        function sync() {\n            if (!props.scrollable)\n                return;\n            syncPositionState();\n            syncScrollState();\n        }\n        function isMouseUpAway(e) {\n            var _a;\n            return !((_a = wrapperRef.value) === null || _a === void 0 ? void 0 : _a.contains(e.target));\n        }\n        function handleXScrollMouseDown(e) {\n            e.preventDefault();\n            e.stopPropagation();\n            xBarPressed = true;\n            on('mousemove', window, handleXScrollMouseMove, true);\n            on('mouseup', window, handleXScrollMouseUp, true);\n            memoXLeft = containerScrollLeftRef.value;\n            memoMouseX = e.clientX;\n        }\n        function handleXScrollMouseMove(e) {\n            if (!xBarPressed)\n                return;\n            if (xBarVanishTimerId !== undefined) {\n                window.clearTimeout(xBarVanishTimerId);\n            }\n            if (yBarVanishTimerId !== undefined) {\n                window.clearTimeout(yBarVanishTimerId);\n            }\n            const { value: containerWidth } = containerWidthRef;\n            const { value: contentWidth } = contentWidthRef;\n            const { value: xBarSize } = xBarSizeRef;\n            if (containerWidth === null || contentWidth === null)\n                return;\n            const dX = e.clientX - memoMouseX;\n            const dScrollLeft = (dX * (contentWidth - containerWidth)) / (containerWidth - xBarSize);\n            const toScrollLeftUpperBound = contentWidth - containerWidth;\n            let toScrollLeft = memoXLeft + dScrollLeft;\n            toScrollLeft = Math.min(toScrollLeftUpperBound, toScrollLeft);\n            toScrollLeft = Math.max(toScrollLeft, 0);\n            const { value: container } = mergedContainerRef;\n            if (container) {\n                container.scrollLeft = toScrollLeft;\n                const { internalOnUpdateScrollLeft } = props;\n                if (internalOnUpdateScrollLeft)\n                    internalOnUpdateScrollLeft(toScrollLeft);\n            }\n        }\n        function handleXScrollMouseUp(e) {\n            e.preventDefault();\n            e.stopPropagation();\n            off('mousemove', window, handleXScrollMouseMove, true);\n            off('mouseup', window, handleXScrollMouseUp, true);\n            xBarPressed = false;\n            sync();\n            if (isMouseUpAway(e)) {\n                hideBar();\n            }\n        }\n        function handleYScrollMouseDown(e) {\n            e.preventDefault();\n            e.stopPropagation();\n            yBarPressed = true;\n            on('mousemove', window, handleYScrollMouseMove, true);\n            on('mouseup', window, handleYScrollMouseUp, true);\n            memoYTop = containerScrollTopRef.value;\n            memoMouseY = e.clientY;\n        }\n        function handleYScrollMouseMove(e) {\n            if (!yBarPressed)\n                return;\n            if (xBarVanishTimerId !== undefined) {\n                window.clearTimeout(xBarVanishTimerId);\n            }\n            if (yBarVanishTimerId !== undefined) {\n                window.clearTimeout(yBarVanishTimerId);\n            }\n            const { value: containerHeight } = containerHeightRef;\n            const { value: contentHeight } = contentHeightRef;\n            const { value: yBarSize } = yBarSizeRef;\n            if (containerHeight === null || contentHeight === null)\n                return;\n            const dY = e.clientY - memoMouseY;\n            const dScrollTop = (dY * (contentHeight - containerHeight)) / (containerHeight - yBarSize);\n            const toScrollTopUpperBound = contentHeight - containerHeight;\n            let toScrollTop = memoYTop + dScrollTop;\n            toScrollTop = Math.min(toScrollTopUpperBound, toScrollTop);\n            toScrollTop = Math.max(toScrollTop, 0);\n            const { value: container } = mergedContainerRef;\n            if (container) {\n                container.scrollTop = toScrollTop;\n            }\n        }\n        function handleYScrollMouseUp(e) {\n            e.preventDefault();\n            e.stopPropagation();\n            off('mousemove', window, handleYScrollMouseMove, true);\n            off('mouseup', window, handleYScrollMouseUp, true);\n            yBarPressed = false;\n            sync();\n            if (isMouseUpAway(e)) {\n                hideBar();\n            }\n        }\n        watchEffect(() => {\n            const { value: needXBar } = needXBarRef;\n            const { value: needYBar } = needYBarRef;\n            const { value: mergedClsPrefix } = mergedClsPrefixRef;\n            const { value: xRailEl } = xRailRef;\n            const { value: yRailEl } = yRailRef;\n            if (xRailEl) {\n                if (!needXBar) {\n                    xRailEl.classList.add(`${mergedClsPrefix}-scrollbar-rail--disabled`);\n                }\n                else {\n                    xRailEl.classList.remove(`${mergedClsPrefix}-scrollbar-rail--disabled`);\n                }\n            }\n            if (yRailEl) {\n                if (!needYBar) {\n                    yRailEl.classList.add(`${mergedClsPrefix}-scrollbar-rail--disabled`);\n                }\n                else {\n                    yRailEl.classList.remove(`${mergedClsPrefix}-scrollbar-rail--disabled`);\n                }\n            }\n        });\n        onMounted(() => {\n            // if container exist, it always can't be resolved when scrollbar is mounted\n            // for example:\n            // - component\n            //   - scrollbar\n            //     - inner\n            // if you pass inner to scrollbar, you may use a ref inside component\n            // however, when scrollbar is mounted, ref is not ready at component\n            // you need to init by yourself\n            if (props.container)\n                return;\n            sync();\n        });\n        onBeforeUnmount(() => {\n            if (xBarVanishTimerId !== undefined) {\n                window.clearTimeout(xBarVanishTimerId);\n            }\n            if (yBarVanishTimerId !== undefined) {\n                window.clearTimeout(yBarVanishTimerId);\n            }\n            off('mousemove', window, handleYScrollMouseMove, true);\n            off('mouseup', window, handleYScrollMouseUp, true);\n        });\n        const themeRef = useTheme('Scrollbar', 'Scrollbar', style, scrollbarLight, props, mergedClsPrefixRef);\n        return {\n            sync,\n            scrollTo,\n            mergedClsPrefix: mergedClsPrefixRef,\n            containerScrollTop: containerScrollTopRef,\n            wrapperRef,\n            containerRef,\n            contentRef,\n            yRailRef,\n            xRailRef,\n            needYBar: needYBarRef,\n            needXBar: needXBarRef,\n            yBarSizePx: yBarSizePxRef,\n            xBarSizePx: xBarSizePxRef,\n            yBarTopPx: yBarTopPxRef,\n            xBarLeftPx: xBarLeftPxRef,\n            isShowXBar: isShowXBarRef,\n            isShowYBar: isShowYBarRef,\n            isIos,\n            handleScroll,\n            handleContentResize,\n            handleContainerResize,\n            handleMouseEnterWrapper,\n            handleMouseLeaveWrapper,\n            handleYScrollMouseDown,\n            handleXScrollMouseDown,\n            cssVars: computed(() => {\n                const { common: { cubicBezierEaseInOut, scrollbarBorderRadius, scrollbarHeight, scrollbarWidth }, self: { color, colorHover } } = themeRef.value;\n                return {\n                    '--scrollbar-bezier': cubicBezierEaseInOut,\n                    '--scrollbar-color': color,\n                    '--scrollbar-color-hover': colorHover,\n                    '--scrollbar-border-radius': scrollbarBorderRadius,\n                    '--scrollbar-width': scrollbarWidth,\n                    '--scrollbar-height': scrollbarHeight\n                };\n            })\n        };\n    },\n    render() {\n        const { $slots, mergedClsPrefix } = this;\n        if (!this.scrollable)\n            return renderSlot($slots, 'default');\n        const createChildren = () => h('div', mergeProps(this.$attrs, {\n            ref: 'wrapperRef',\n            class: `${mergedClsPrefix}-scrollbar`,\n            style: this.cssVars,\n            onMouseenter: this.handleMouseEnterWrapper,\n            onMouseleave: this.handleMouseLeaveWrapper\n        }), [\n            this.container ? (renderSlot($slots, 'default')) : (h(\"div\", { ref: \"containerRef\", class: `${mergedClsPrefix}-scrollbar-container`, style: this.containerStyle, onScroll: this.handleScroll, onWheel: this.onWheel },\n                h(VResizeObserver, { onResize: this.handleContentResize }, {\n                    default: () => (h(\"div\", { ref: \"contentRef\", style: [\n                            {\n                                width: this.xScrollable ? 'fit-content' : null\n                            },\n                            this.contentStyle\n                        ], class: [\n                            `${mergedClsPrefix}-scrollbar-content`,\n                            this.contentClass\n                        ] }, $slots))\n                }))),\n            h(\"div\", { ref: \"yRailRef\", class: `${mergedClsPrefix}-scrollbar-rail ${mergedClsPrefix}-scrollbar-rail--vertical`, style: [this.horizontalRailStyle] },\n                h(Transition, { name: \"fade-in-transition\" }, {\n                    default: () => this.needYBar && this.isShowYBar && !this.isIos ? (h(\"div\", { class: `${mergedClsPrefix}-scrollbar-rail__scrollbar`, style: {\n                            height: this.yBarSizePx,\n                            top: this.yBarTopPx\n                        }, onMousedown: this.handleYScrollMouseDown })) : null\n                })),\n            h(\"div\", { ref: \"xRailRef\", class: `${mergedClsPrefix}-scrollbar-rail ${mergedClsPrefix}-scrollbar-rail--horizontal`, style: [this.verticalRailStyle] },\n                h(Transition, { name: \"fade-in-transition\" }, {\n                    default: () => this.needXBar && this.isShowXBar && !this.isIos ? (h(\"div\", { class: `${mergedClsPrefix}-scrollbar-rail__scrollbar`, style: {\n                            width: this.xBarSizePx,\n                            left: this.xBarLeftPx\n                        }, onMousedown: this.handleXScrollMouseDown })) : null\n                }))\n        ]);\n        return this.container ? (createChildren()) : (h(VResizeObserver, { onResize: this.handleContainerResize }, {\n            default: createChildren\n        }));\n    }\n});\nexport default Scrollbar;\nexport const XScrollbar = Scrollbar;\n","export function getTitleAttribute(value) {\n    switch (typeof value) {\n        case 'string':\n            // The empty string should also be reset to undefined.\n            return value || undefined;\n        case 'number':\n            return String(value);\n        default:\n            return undefined;\n    }\n}\n","import { h, toRef, ref, inject, renderSlot, defineComponent, watch } from 'vue';\nimport { useMemo } from 'vooks';\nimport { useInjectionCollection, useInjectionElementCollection } from '../../_utils/composable';\nimport { getTitleAttribute } from '../../_utils';\nexport const anchorInjectionKey = Symbol('anchor');\nconst anchorLinkProps = {\n    title: String,\n    href: String\n};\nexport default defineComponent({\n    name: 'AnchorLink',\n    props: anchorLinkProps,\n    setup(props, { slots }) {\n        const titleRef = ref(null);\n        // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n        const NAnchor = inject(anchorInjectionKey);\n        const hrefRef = toRef(props, 'href');\n        const activeRef = useMemo(() => {\n            return hrefRef.value && hrefRef.value === NAnchor.activeHref.value;\n        });\n        useInjectionCollection(anchorInjectionKey, 'collectedLinkHrefs', hrefRef);\n        useInjectionElementCollection(anchorInjectionKey, 'titleEls', () => titleRef.value);\n        watch(activeRef, (value) => {\n            if (value && titleRef.value) {\n                NAnchor.updateBarPosition(titleRef.value);\n            }\n        });\n        function handleClick() {\n            if (props.href !== undefined) {\n                NAnchor.setActiveHref(props.href);\n            }\n        }\n        return () => {\n            const { value: mergedClsPrefix } = NAnchor.mergedClsPrefix;\n            return (h(\"div\", { class: [\n                    `${mergedClsPrefix}-anchor-link`,\n                    activeRef.value && `${mergedClsPrefix}-anchor-link--active`\n                ] },\n                h(\"a\", { ref: titleRef, class: [`${mergedClsPrefix}-anchor-link__title`], href: props.href, title: getTitleAttribute(props.title), onClick: handleClick }, props.title),\n                renderSlot(slots, 'default')));\n        };\n    }\n});\n","export function getOffset(el, scrollTarget) {\n    const { top: elTop, height } = el.getBoundingClientRect();\n    const scrollTargetTop = scrollTarget instanceof HTMLElement\n        ? scrollTarget.getBoundingClientRect().top\n        : 0;\n    return {\n        top: elTop - scrollTargetTop,\n        height\n    };\n}\n","import { computed, defineComponent, h, nextTick, onBeforeUnmount, onMounted, provide, ref, toRef, watch } from 'vue';\nimport { throttle } from 'lodash-es';\nimport { unwrapElement } from 'seemly';\nimport { onFontsReady } from 'vooks';\nimport { NScrollbar } from '../../_internal';\nimport { keysOf } from '../../_utils';\nimport { anchorInjectionKey } from './Link';\nimport { getOffset } from './utils';\nexport const baseAnchorProps = {\n    type: {\n        type: String,\n        default: 'rail'\n    },\n    showRail: {\n        type: Boolean,\n        default: true\n    },\n    showBackground: {\n        type: Boolean,\n        default: true\n    },\n    bound: {\n        type: Number,\n        default: 12\n    },\n    internalScrollable: Boolean,\n    ignoreGap: Boolean,\n    offsetTarget: [String, Object, Function]\n};\nexport const baseAnchorPropKeys = keysOf(baseAnchorProps);\nexport default defineComponent({\n    name: 'BaseAnchor',\n    props: Object.assign(Object.assign({}, baseAnchorProps), { mergedClsPrefix: {\n            type: String,\n            required: true\n        } }),\n    setup(props) {\n        const collectedLinkHrefs = [];\n        const titleEls = [];\n        const activeHrefRef = ref(null);\n        const slotRef = ref(null);\n        const barRef = ref(null);\n        const selfRef = ref(null);\n        const isBlockTypeRef = computed(() => {\n            return props.type === 'block';\n        });\n        const mergedShowRailRef = computed(() => {\n            return !isBlockTypeRef.value && props.showRail;\n        });\n        function disableTransitionOneTick() {\n            const { value: barEl } = barRef;\n            const { value: slotEl } = slotRef;\n            if (barEl) {\n                barEl.style.transition = 'none';\n            }\n            if (slotEl) {\n                slotEl.style.transition = 'none';\n            }\n            if (titleEls) {\n                titleEls.forEach((titleEl) => {\n                    titleEl.style.transition = 'none';\n                });\n            }\n            void nextTick(() => {\n                const { value: nextBarEl } = barRef;\n                const { value: nextSlotEl } = slotRef;\n                if (nextBarEl) {\n                    void nextBarEl.offsetWidth;\n                    nextBarEl.style.transition = '';\n                }\n                if (nextSlotEl) {\n                    void nextSlotEl.offsetWidth;\n                    nextSlotEl.style.transition = '';\n                }\n                if (titleEls) {\n                    titleEls.forEach((titleEl) => {\n                        void titleEl.offsetWidth;\n                        titleEl.style.transition = '';\n                    });\n                }\n            });\n        }\n        function updateBarPosition(linkTitleEl, transition = true) {\n            const { value: barEl } = barRef;\n            const { value: slotEl } = slotRef;\n            const { value: selfEl } = selfRef;\n            if (!selfEl || !barEl)\n                return;\n            if (!transition) {\n                barEl.style.transition = 'none';\n                if (slotEl)\n                    slotEl.style.transition = 'none';\n            }\n            const { offsetHeight, offsetWidth } = linkTitleEl;\n            const { top: linkTitleClientTop, left: linkTitleClientLeft } = linkTitleEl.getBoundingClientRect();\n            const { top: anchorClientTop, left: anchorClientLeft } = selfEl.getBoundingClientRect();\n            const offsetTop = linkTitleClientTop - anchorClientTop;\n            const offsetLeft = linkTitleClientLeft - anchorClientLeft;\n            barEl.style.top = `${offsetTop}px`;\n            barEl.style.height = `${offsetHeight}px`;\n            if (slotEl) {\n                slotEl.style.top = `${offsetTop}px`;\n                slotEl.style.height = `${offsetHeight}px`;\n                slotEl.style.maxWidth = `${offsetWidth + offsetLeft}px`;\n            }\n            void barEl.offsetHeight;\n            if (slotEl)\n                void slotEl.offsetHeight;\n            if (!transition) {\n                barEl.style.transition = '';\n                if (slotEl)\n                    slotEl.style.transition = '';\n            }\n        }\n        function setActiveHref(href, transition = true) {\n            const idMatchResult = /^#([^#]+)$/.exec(href);\n            if (!idMatchResult)\n                return;\n            const linkEl = document.getElementById(idMatchResult[1]);\n            if (!linkEl)\n                return;\n            activeHrefRef.value = href;\n            linkEl.scrollIntoView();\n            if (!transition) {\n                disableTransitionOneTick();\n            }\n            handleScroll();\n        }\n        const handleScroll = throttle(() => _handleScroll(true), 128);\n        function _handleScroll(transition = true) {\n            var _a;\n            const links = [];\n            const offsetTarget = unwrapElement((_a = props.offsetTarget) !== null && _a !== void 0 ? _a : document);\n            collectedLinkHrefs.forEach((href) => {\n                const idMatchResult = /#([^#]+)$/.exec(href);\n                if (!idMatchResult)\n                    return;\n                const linkEl = document.getElementById(idMatchResult[1]);\n                if (linkEl && offsetTarget) {\n                    const { top, height } = getOffset(linkEl, offsetTarget);\n                    links.push({\n                        top,\n                        height,\n                        href\n                    });\n                }\n            });\n            links.sort((a, b) => {\n                // ascend top\n                if (a.top > b.top) {\n                    return 1;\n                    // descend height\n                }\n                else if (a.top === b.top && a.height < b.height) {\n                    return -1;\n                }\n                return -1;\n            });\n            const currentActiveHref = activeHrefRef.value;\n            const { bound, ignoreGap } = props;\n            const activeLink = links.reduce((prevLink, link) => {\n                if (link.top + link.height < 0) {\n                    if (ignoreGap) {\n                        return link;\n                    }\n                    else {\n                        return prevLink;\n                    }\n                }\n                if (link.top <= bound) {\n                    if (prevLink === null) {\n                        return link;\n                    }\n                    else if (link.top === prevLink.top) {\n                        if (link.href === currentActiveHref) {\n                            return link;\n                        }\n                        else\n                            return prevLink;\n                    }\n                    else if (link.top > prevLink.top) {\n                        return link;\n                    }\n                    else {\n                        return prevLink;\n                    }\n                }\n                return prevLink;\n            }, null);\n            if (!transition)\n                disableTransitionOneTick();\n            if (activeLink) {\n                activeHrefRef.value = activeLink.href;\n            }\n            else {\n                activeHrefRef.value = null;\n            }\n        }\n        provide(anchorInjectionKey, {\n            activeHref: activeHrefRef,\n            mergedClsPrefix: toRef(props, 'mergedClsPrefix'),\n            updateBarPosition,\n            setActiveHref,\n            collectedLinkHrefs,\n            titleEls\n        });\n        onMounted(() => {\n            document.addEventListener('scroll', handleScroll, true);\n            setActiveHref(window.location.hash);\n            _handleScroll(false);\n        });\n        onFontsReady(() => {\n            setActiveHref(window.location.hash);\n            _handleScroll(false);\n        });\n        onBeforeUnmount(() => {\n            document.removeEventListener('scroll', handleScroll, true);\n        });\n        watch(activeHrefRef, (value) => {\n            if (value === null) {\n                const { value: slotEl } = slotRef;\n                if (slotEl && !isBlockTypeRef.value) {\n                    slotEl.style.maxWidth = '0';\n                }\n            }\n        });\n        return {\n            selfRef,\n            barRef,\n            slotRef,\n            setActiveHref,\n            activeHref: activeHrefRef,\n            isBlockType: isBlockTypeRef,\n            mergedShowRail: mergedShowRailRef\n        };\n    },\n    render() {\n        var _a;\n        const { mergedClsPrefix, mergedShowRail, isBlockType, $slots } = this;\n        const Anchor = (h(\"div\", { class: [\n                `${mergedClsPrefix}-anchor`,\n                isBlockType && `${mergedClsPrefix}-anchor--block`,\n                mergedShowRail && `${mergedClsPrefix}-anchor--show-rail`\n            ], ref: \"selfRef\" },\n            mergedShowRail && this.showBackground ? (h(\"div\", { ref: \"slotRef\", class: `${mergedClsPrefix}-anchor-link-background` })) : null,\n            mergedShowRail ? (h(\"div\", { class: `${mergedClsPrefix}-anchor-rail` },\n                h(\"div\", { ref: \"barRef\", class: [\n                        `${mergedClsPrefix}-anchor-rail__bar`,\n                        this.activeHref !== null &&\n                            `${mergedClsPrefix}-anchor-rail__bar--active`\n                    ] }))) : null, (_a = $slots.default) === null || _a === void 0 ? void 0 :\n            _a.call($slots)));\n        return this.internalScrollable ? (h(NScrollbar, null, {\n            default: () => Anchor\n        })) : (Anchor);\n    }\n});\n","import { h, defineComponent, computed, ref } from 'vue';\nimport { NAffix } from '../../affix';\nimport { affixProps, affixPropKeys } from '../../affix/src/Affix';\nimport { useConfig, useTheme } from '../../_mixins';\nimport { keep } from '../../_utils';\nimport { anchorLight } from '../styles';\nimport style from './styles/index.cssr';\nimport NBaseAnchor, { baseAnchorProps, baseAnchorPropKeys } from './BaseAnchor';\nconst anchorProps = Object.assign(Object.assign(Object.assign(Object.assign({}, useTheme.props), { affix: Boolean }), affixProps), baseAnchorProps);\nexport default defineComponent({\n    name: 'Anchor',\n    props: anchorProps,\n    setup(props, { slots }) {\n        const { mergedClsPrefixRef } = useConfig(props);\n        const themeRef = useTheme('Anchor', 'Anchor', style, anchorLight, props, mergedClsPrefixRef);\n        const anchorRef = ref(null);\n        const cssVarsRef = computed(() => {\n            const { self: { railColor, linkColor, railColorActive, linkTextColor, linkTextColorHover, linkTextColorPressed, linkTextColorActive, linkFontSize, railWidth, linkPadding, borderRadius }, common: { cubicBezierEaseInOut } } = themeRef.value;\n            return {\n                '--link-border-radius': borderRadius,\n                '--link-color': linkColor,\n                '--link-font-size': linkFontSize,\n                '--link-text-color': linkTextColor,\n                '--link-text-color-hover': linkTextColorHover,\n                '--link-text-color-active': linkTextColorActive,\n                '--link-text-color-pressed': linkTextColorPressed,\n                '--link-padding': linkPadding,\n                '--bezier': cubicBezierEaseInOut,\n                '--rail-color': railColor,\n                '--rail-color-active': railColorActive,\n                '--rail-width': railWidth\n            };\n        });\n        return {\n            scrollTo(href) {\n                var _a;\n                (_a = anchorRef.value) === null || _a === void 0 ? void 0 : _a.setActiveHref(href);\n            },\n            renderAnchor: () => {\n                return (h(NBaseAnchor, Object.assign({ ref: anchorRef, style: cssVarsRef.value }, keep(props, baseAnchorPropKeys), { mergedClsPrefix: mergedClsPrefixRef.value }), slots));\n            }\n        };\n    },\n    render() {\n        return !this.affix ? (this.renderAnchor()) : (h(NAffix, Object.assign({}, keep(this, affixPropKeys)), { default: this.renderAnchor }));\n    }\n});\n","import { render } from \"./Toc.vue?vue&type=template&id=0e0f2642\"\nimport script from \"./Toc.vue?vue&type=script&lang=js\"\nexport * from \"./Toc.vue?vue&type=script&lang=js\"\n\nimport \"./Toc.vue?vue&type=style&index=0&id=0e0f2642&lang=css\"\n\nimport exportComponent from \"/Users/yinnnyou/workspace/youyinnn.github.io/node_modules/vue-loader/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__","<template>\n  <div class=\"about\">\n    <markdown-body :content=\"content\" />\n  </div>\n</template>\n\n<script>\nimport MarkdownBody from \"@/components/MarkdownBody.vue\";\n\nexport default {\n  name: \"About\",\n  components: {\n    MarkdownBody,\n  },\n  data: () => ({\n    content: null,\n  }),\n  mounted: function () {\n    const src = require(`raw-loader!@/assets/about/index.htm`);\n    this.content = src.default;\n  },\n};\n</script>\n","import { render } from \"./About.vue?vue&type=template&id=207ca069\"\nimport script from \"./About.vue?vue&type=script&lang=js\"\nexport * from \"./About.vue?vue&type=script&lang=js\"\n\nimport exportComponent from \"/Users/yinnnyou/workspace/youyinnn.github.io/node_modules/vue-loader/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__","<template>\n  <div class=\"article-box\">\n    <transition name=\"fade5\" mode=\"out-in\">\n      <div\n        v-if=\"loading\"\n        style=\"height: 90px\"\n        key=\"sk\"\n        class=\"article-metadata clearfix\"\n      >\n        <n-skeleton text :repeat=\"3\" />\n        <n-skeleton text style=\"width: 60%\" />\n      </div>\n\n      <div v-else key=\"mt\" class=\"article-metadata clearfix\">\n        <p class=\"title\">{{ postMetadata.title }}</p>\n        <p style=\"margin-top: 10px\">\n          <span style=\"margin-right: 10px\">\n            Posted at: {{ dayjs(postMetadata.date).format(\"MM/DD/YYYY\") }}\n          </span>\n          <span style=\"color: #46bbcd\">\n            {{ daybefore(dayjs(postMetadata.date)) }} days ago\n          </span>\n        </p>\n      </div>\n    </transition>\n    <n-divider style=\"margin-top: 10px\" />\n    <markdown-body :content=\"content\" :key=\"$route.params.articleId\" />\n    <toc :toc=\"toc\" />\n  </div>\n</template>\n\n<script>\nimport resources from \"@/assets/resources/resources.js\";\nimport { NSkeleton, NDivider } from \"naive-ui\";\nimport dayjs from \"dayjs\";\nimport Toc from \"@/components/Toc.vue\";\nimport MarkdownBody from \"@/components/MarkdownBody.vue\";\n\nexport default {\n  name: \"Article\",\n  components: {\n    NSkeleton,\n    NDivider,\n    Toc,\n    MarkdownBody,\n  },\n  data: () => ({\n    content: null,\n    postMetadata: null,\n    loading: true,\n    toc: {},\n    dayjs,\n  }),\n  mounted: function () {\n    const aId = this.$route.params.articleId;\n    const src = require(`raw-loader!@/assets/articles/${aId}.htm`);\n    this.content = src.default;\n\n    // get toc\n    const tocSrc = require(`@/assets/articles/${aId}.htm.toc.json`);\n    this.toc = tocSrc;\n\n    const resourceList = resources.list;\n    for (let rs of resourceList) {\n      require(`@/assets/resources/${rs}`);\n    }\n    const postMetadatas = JSON.parse(sessionStorage.postMetadata);\n    for (let d of postMetadatas) {\n      if (d.abbrlink === aId) {\n        this.postMetadata = d;\n      }\n    }\n    setTimeout(() => {\n      this.loading = false;\n    }, 100);\n  },\n  methods: {\n    daybefore: function (pastdayjs) {\n      let now = dayjs().set(\"hour\", 0).set(\"minute\", 0).set(\"second\", 0);\n      let before = now.diff(pastdayjs);\n      before /= 3600000;\n      if (before < 24) {\n        if (before > now.hour()) {\n          return ' <x style=\"color:#46bbcd;\">Yesterday</x>';\n        } else {\n          return ' <x style=\"color:#46bbcd;\">Today</x>';\n        }\n      }\n      if (before > 24 && before < 48)\n        return ' <x style=\"color:#46bbcd;\">2 days ago</x>';\n      return Math.ceil(before / 24);\n    },\n    goto(id) {\n      var element = document.getElementById(id);\n      var top = element.offsetTop;\n\n      window.scrollTo(0, top);\n    },\n  },\n};\n</script>\n\n<style scoped></style>\n\n<style>\n@media only screen and (max-width: 800px) {\n  .article-metadata {\n    padding: 0 1rem;\n  }\n}\n</style>\n","import { commonLight } from '../../_styles/common';\nconst self = (vars) => {\n    const { heightSmall, heightMedium, heightLarge, borderRadius } = vars;\n    return {\n        color: '#eee',\n        colorEnd: '#ddd',\n        borderRadius,\n        heightSmall,\n        heightMedium,\n        heightLarge\n    };\n};\nexport const skeletonLight = {\n    name: 'Skeleton',\n    common: commonLight,\n    self\n};\n","import { c, cB } from '../../../_utils/cssr'; // vars:\n// --color\n// --color-end\n// --bezier\n\nexport default c([cB('skeleton', `\n height: 1em;\n width: 100%;\n transition: background-color .3s var(--bezier);\n transition:\n --color-start .3s var(--bezier),\n --color-end .3s var(--bezier),\n background-color .3s var(--bezier);\n animation: 2s skeleton-loading infinite cubic-bezier(0.36, 0, 0.64, 1);\n background-color: var(--color-start);\n `), c('@keyframes skeleton-loading', `\n 0% {\n background: var(--color-start);\n }\n 40% {\n background: var(--color-end);\n }\n 80% {\n background: var(--color-start);\n }\n 100% {\n background: var(--color-start);\n }\n `)]);","import { pxfy } from 'seemly';\nimport { computed, defineComponent, h, Fragment, mergeProps } from 'vue';\nimport { useConfig, useTheme } from '../../_mixins';\nimport { createKey, useHoudini } from '../../_utils';\nimport { skeletonLight } from '../styles';\nimport style from './styles/index.cssr';\nconst skeletonProps = Object.assign(Object.assign({}, useTheme.props), { text: Boolean, round: Boolean, circle: Boolean, height: [String, Number], width: [String, Number], size: String, repeat: {\n        type: Number,\n        default: 1\n    }, animated: {\n        type: Boolean,\n        default: true\n    }, sharp: {\n        type: Boolean,\n        default: true\n    } });\nexport default defineComponent({\n    name: 'Skeleton',\n    inheritAttrs: false,\n    props: skeletonProps,\n    setup(props) {\n        useHoudini();\n        const { mergedClsPrefixRef } = useConfig(props);\n        const themeRef = useTheme('Skeleton', 'Skeleton', style, skeletonLight, props, mergedClsPrefixRef);\n        return {\n            mergedClsPrefix: mergedClsPrefixRef,\n            style: computed(() => {\n                var _a, _b;\n                const theme = themeRef.value;\n                const { common: { cubicBezierEaseInOut } } = theme;\n                const selfThemeVars = theme.self;\n                const { color, colorEnd, borderRadius } = selfThemeVars;\n                let sizeHeight;\n                const { circle, sharp, round, width, height, size, text, animated } = props;\n                if (size !== undefined) {\n                    sizeHeight = selfThemeVars[createKey('height', size)];\n                }\n                const mergedWidth = circle ? (_a = width !== null && width !== void 0 ? width : height) !== null && _a !== void 0 ? _a : sizeHeight : width;\n                const mergedHeight = (_b = (circle ? width !== null && width !== void 0 ? width : height : height)) !== null && _b !== void 0 ? _b : sizeHeight;\n                return {\n                    display: text ? 'inline-block' : '',\n                    verticalAlign: text ? '-0.125em' : '',\n                    borderRadius: circle\n                        ? '50%'\n                        : round\n                            ? '4096px'\n                            : sharp\n                                ? ''\n                                : borderRadius,\n                    width: typeof mergedWidth === 'number' ? pxfy(mergedWidth) : mergedWidth,\n                    height: typeof mergedHeight === 'number'\n                        ? pxfy(mergedHeight)\n                        : mergedHeight,\n                    animation: !animated ? 'none' : '',\n                    '--bezier': cubicBezierEaseInOut,\n                    '--color-start': color,\n                    '--color-end': colorEnd\n                };\n            })\n        };\n    },\n    render() {\n        const { repeat, style, mergedClsPrefix, $attrs } = this;\n        // BUG:\n        // Chrome devtools can't read the element\n        // Maybe it's a bug of chrome\n        const child = h('div', mergeProps({\n            class: `${mergedClsPrefix}-skeleton`,\n            style: style\n        }, $attrs));\n        if (repeat > 1) {\n            return (h(Fragment, null, Array.apply(null, { length: repeat }).map((_) => [\n                child,\n                '\\n'\n            ])));\n        }\n        return child;\n    }\n});\n","import { cB, cNotM, cE, cM } from '../../../_utils/cssr'; // vars:\n// --bezier\n// --color\n// --text-color\n// --font-weight\n\nexport default cB('divider', `\n position: relative;\n display: flex;\n width: 100%;\n box-sizing: border-box;\n font-size: 16px;\n color: var(--text-color);\n transition:\n color .3s var(--bezier),\n background-color .3s var(--bezier);\n`, [cNotM('vertical', `\n margin-top: 24px;\n margin-bottom: 24px;\n `, [cNotM('no-title', `\n display: flex;\n align-items: center;\n `)]), cE('title', `\n display: flex;\n align-items: center;\n margin-left: 12px;\n margin-right: 12px;\n white-space: nowrap;\n font-weight: var(--font-weight);\n `), cM('title-position-left', [cE('line', [cM('left', {\n  width: '28px'\n})])]), cM('title-position-right', [cE('line', [cM('right', {\n  width: '28px'\n})])]), cM('dashed', [cE('line', `\n background-color: #0000;\n height: 0px;\n width: 100%;\n border-style: dashed;\n border-width: 1px 0 0;\n `)]), cM('vertical', `\n display: inline-block;\n height: 1em;\n margin: 0 8px;\n vertical-align: middle;\n width: 1px;\n `), cE('line', `\n border: none;\n transition: background-color .3s var(--bezier), border-color .3s var(--bezier);\n height: 1px;\n width: 100%;\n margin: 0;\n `), cNotM('dashed', [cE('line', {\n  backgroundColor: 'var(--color)'\n})]), cM('dashed', [cE('line', {\n  borderColor: 'var(--color)'\n})]), cM('vertical', {\n  backgroundColor: 'var(--color)'\n})]);","import { h, computed, defineComponent, Fragment } from 'vue';\nimport { useConfig, useTheme } from '../../_mixins';\nimport { dividerLight } from '../styles';\nimport style from './styles/index.cssr';\nconst dividerProps = Object.assign(Object.assign({}, useTheme.props), { titlePlacement: {\n        type: String,\n        default: 'center'\n    }, dashed: Boolean, vertical: Boolean });\nexport default defineComponent({\n    name: 'Divider',\n    props: dividerProps,\n    setup(props) {\n        const { mergedClsPrefixRef } = useConfig(props);\n        const themeRef = useTheme('Divider', 'Divider', style, dividerLight, props, mergedClsPrefixRef);\n        return {\n            mergedClsPrefix: mergedClsPrefixRef,\n            cssVars: computed(() => {\n                const { common: { cubicBezierEaseInOut }, self: { color, textColor, fontWeight } } = themeRef.value;\n                return {\n                    '--bezier': cubicBezierEaseInOut,\n                    '--color': color,\n                    '--text-color': textColor,\n                    '--font-weight': fontWeight\n                };\n            })\n        };\n    },\n    render() {\n        const { $slots, titlePlacement, vertical, dashed, cssVars, mergedClsPrefix } = this;\n        return (h(\"div\", { role: \"separator\", class: [\n                `${mergedClsPrefix}-divider`,\n                {\n                    [`${mergedClsPrefix}-divider--vertical`]: vertical,\n                    [`${mergedClsPrefix}-divider--no-title`]: !$slots.default,\n                    [`${mergedClsPrefix}-divider--dashed`]: dashed,\n                    [`${mergedClsPrefix}-divider--title-position-${titlePlacement}`]: $slots.default && titlePlacement\n                }\n            ], style: cssVars },\n            !vertical ? (h(\"div\", { class: `${mergedClsPrefix}-divider__line ${mergedClsPrefix}-divider__line--left` })) : null,\n            !vertical && $slots.default ? (h(Fragment, null,\n                h(\"div\", { class: `${mergedClsPrefix}-divider__title` }, this.$slots),\n                h(\"div\", { class: `${mergedClsPrefix}-divider__line ${mergedClsPrefix}-divider__line--right` }))) : null));\n    }\n});\n","import { render } from \"./Article.vue?vue&type=template&id=45116021\"\nimport script from \"./Article.vue?vue&type=script&lang=js\"\nexport * from \"./Article.vue?vue&type=script&lang=js\"\n\nimport \"./Article.vue?vue&type=style&index=0&id=45116021&lang=css\"\n\nimport exportComponent from \"/Users/yinnnyou/workspace/youyinnn.github.io/node_modules/vue-loader/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__","<template>\n  <div class=\"home\">\n    <div class=\"article-list-box unselectable\">\n      <p style=\"padding: 0 1rem; text-align: end\">\n        {{ postMetadataLength }} posts since 2017-11-23\n      </p>\n      <n-list>\n        <n-list-item\n          class=\"list-item\"\n          v-for=\"data of postMetadata\"\n          :key=\"data.abbrlink\"\n          @click=\"goToPage(data.abbrlink)\"\n        >\n          <div>\n            <p class=\"card-title\">{{ data.title }}</p>\n            <p class=\"card-time\">{{ dayjs(data.date).format(\"MM/DD/YYYY\") }}</p>\n          </div>\n          <!-- <div class=\"articleshortmsg\" v-html=\"data.short_content\"></div> -->\n        </n-list-item>\n      </n-list>\n    </div>\n  </div>\n</template>\n\n<script>\n// @ is an alias to /src\nimport resources from \"@/assets/resources/resources.js\";\nimport { NList, NListItem } from \"naive-ui\";\nimport dayjs from \"dayjs\";\n\nexport default {\n  name: \"Home\",\n  components: {\n    NList,\n    NListItem,\n  },\n  data: () => ({\n    postMetadata: null,\n    postMetadataLength: 0,\n    dayjs,\n  }),\n  methods: {\n    goToPage(abbrlink) {\n      this.$router.push(`/article/${abbrlink}`).catch(() => {});\n    },\n  },\n  mounted: function () {\n    const resourceList = resources.list;\n    // console.log(resources);\n    for (let rs of resourceList) {\n      require(`@/assets/resources/${rs}`);\n    }\n    this.postMetadata = JSON.parse(sessionStorage.postMetadata);\n    this.postMetadataLength = this.postMetadata.length;\n    // console.log(this.postMetadata);\n  },\n};\n</script>\n\n<style>\n.articleshortmsg {\n  overflow: hidden !important;\n  font-size: 14px !important;\n  font-weight: normal !important;\n  margin: 8px 0;\n}\n\n.articleshortmsg * {\n  margin: 8px 0 !important;\n  font-size: 14px !important;\n  font-weight: 100 !important;\n}\n\n.articleshortmsg .saying {\n  text-align: left !important;\n  padding: 0 !important;\n  background-color: transparent !important;\n  border-bottom: none !important;\n  font-size: 14px !important;\n  font-weight: normal !important;\n  margin: 0 !important;\n}\n\n.articleshortmsg hr {\n  display: none;\n}\n\n.articleshortmsg h1,\n.articleshortmsg h2,\n.articleshortmsg h3,\n.articleshortmsg h4,\n.articleshortmsg h5,\n.articleshortmsg h6 {\n  display: none;\n}\n\n.articleshortmsg pre {\n  padding: 10px;\n}\n\n.saying {\n  text-align: center;\n  padding: 0.5rem 1rem 1rem;\n  background-color: #f8f9fa;\n  font-size: 1rem;\n}\n\n.saying-quote {\n  font-size: 30px;\n  width: 20px;\n}\n\n.saying-left-quote {\n  float: left;\n}\n\n.saying-right-quote {\n  float: right;\n}\n</style>\n\n<style lang=\"less\">\n@import \"../assets/css/index.less\";\n.card-title {\n  float: left;\n  margin: 0;\n}\n.card-time {\n  margin: 0;\n  float: right;\n}\n\n.list-item {\n  padding-right: 1rem !important;\n  padding-left: 1rem !important;\n  transition: border-left 0.5s, transform 0.25s !important;\n  margin-bottom: 1rem;\n  border-left: 3px solid rgba(0, 255, 128, 0);\n  border-right: 3px solid rgba(0, 255, 128, 0);\n}\n\n.list-item:hover {\n  cursor: pointer;\n  border-left: 3px solid rgb(30, 155, 92);\n  border-right: 3px solid rgb(30, 155, 92);\n  transform: scale(1.01);\n}\n</style>\n","import { cB, c, cE, cM, insideModal, insidePopover } from '../../../_utils/cssr'; // vars:\n// --font-size\n// --bezier\n// --text-color\n// --color\n// --border-radius\n// --border-color\n// --border-color-modal\n// --border-color-popover\n// --color-modal\n// --color-popover\n\nexport default c([cB('list', `\n --merged-border-color: var(--border-color);\n --merged-color: var(--color)\n font-size: var(--font-size);\n transition:\n background-color .3s var(--bezier),\n color .3s var(--bezier),\n border-color .3s var(--bezier);\n padding: 0;\n list-style-type: none;\n color: var(--text-color);\n background-color: var(--merged-color);\n `, [cM('bordered', `\n border-radius: var(--border-radius);\n border: 1px solid var(--merged-border-color);\n `, [cB('list-item', `\n padding: 12px 20px;\n `, [c('&:not(:last-child)', `\n border-bottom: 1px solid var(--merged-border-color);\n `)]), cE('header, footer', `\n padding: 12px 20px;\n `, [c('&:not(:last-child)', `\n border-bottom: 1px solid var(--merged-border-color);\n `)])]), cE('header, footer', `\n padding: 12px 0;\n box-sizing: border-box;\n transition: border-color .3s var(--bezier);\n `, [c('&:not(:last-child)', `\n border-bottom: 1px solid var(--merged-border-color);\n `)]), cB('list-item', `\n padding: 12px 0; \n box-sizing: border-box;\n display: flex;\n flex-wrap: nowrap;\n align-items: center;\n transition: border-color .3s var(--bezier);\n `, [cE('prefix', `\n margin-right: 20px;\n flex: 0;\n `), cE('suffix', `\n margin-left: 20px;\n flex: 0;\n `), cE('main', `\n flex: 1;\n `), c('&:not(:last-child)', `\n border-bottom: 1px solid var(--merged-border-color);\n `)])]), insideModal(cB('list', `\n --merged-color: var(--color-modal);\n --merged-border-color: var(--border-color-modal);\n `)), insidePopover(cB('list', `\n --merged-color: var(--color-popover);\n --merged-border-color: var(--border-color-popover);\n `))]);","import { computed, defineComponent, h, renderSlot, provide } from 'vue';\nimport { useConfig, useTheme } from '../../_mixins';\nimport { listLight } from '../styles';\nimport style from './styles/index.cssr';\nconst listProps = Object.assign(Object.assign({}, useTheme.props), { size: {\n        type: String,\n        default: 'medium'\n    }, bordered: {\n        type: Boolean,\n        default: false\n    } });\nexport const listInjectionKey = Symbol('list');\nexport default defineComponent({\n    name: 'List',\n    props: listProps,\n    setup(props) {\n        const { mergedClsPrefixRef } = useConfig(props);\n        const themeRef = useTheme('List', 'List', style, listLight, props, mergedClsPrefixRef);\n        provide(listInjectionKey, {\n            mergedClsPrefixRef\n        });\n        return {\n            mergedClsPrefix: mergedClsPrefixRef,\n            cssVars: computed(() => {\n                const { common: { cubicBezierEaseInOut }, self: { fontSize, textColor, color, colorModal, colorPopover, borderColor, borderColorModal, borderColorPopover, borderRadius } } = themeRef.value;\n                return {\n                    '--font-size': fontSize,\n                    '--bezier': cubicBezierEaseInOut,\n                    '--text-color': textColor,\n                    '--color': color,\n                    '--border-radius': borderRadius,\n                    '--border-color': borderColor,\n                    '--border-color-modal': borderColorModal,\n                    '--border-color-popover': borderColorPopover,\n                    '--color-modal': colorModal,\n                    '--color-popover': colorPopover\n                };\n            })\n        };\n    },\n    render() {\n        const { $slots, mergedClsPrefix } = this;\n        return (h(\"ul\", { class: [\n                `${mergedClsPrefix}-list`,\n                this.bordered && `${mergedClsPrefix}-list--bordered`\n            ], style: this.cssVars },\n            $slots.header ? (h(\"div\", { class: `${mergedClsPrefix}-list__header` }, renderSlot($slots, 'header'))) : null,\n            renderSlot($slots, 'default'),\n            $slots.footer ? (h(\"div\", { class: `${mergedClsPrefix}-list__footer` }, renderSlot($slots, 'footer'))) : null));\n    }\n});\n","import { h, renderSlot, defineComponent, inject } from 'vue';\nimport { throwError } from '../../_utils';\nimport { listInjectionKey } from './List';\nexport default defineComponent({\n    name: 'ListItem',\n    setup() {\n        const listInjection = inject(listInjectionKey, null);\n        if (!listInjection) {\n            throwError('list-item', '`n-list-item` must be placed in `n-list`.');\n        }\n        return {\n            mergedClsPrefix: listInjection.mergedClsPrefixRef\n        };\n    },\n    render() {\n        const { $slots, mergedClsPrefix } = this;\n        return (h(\"li\", { class: `${mergedClsPrefix}-list-item` },\n            $slots.prefix ? (h(\"div\", { class: `${mergedClsPrefix}-list-item__prefix` }, renderSlot($slots, 'prefix'))) : null,\n            $slots.default ? (h(\"div\", { class: `${mergedClsPrefix}-list-item__main` }, $slots)) : null,\n            $slots.suffix ? (h(\"div\", { class: `${mergedClsPrefix}-list-item__suffix` }, renderSlot($slots, 'suffix'))) : null));\n    }\n});\n","import { render } from \"./Home.vue?vue&type=template&id=6da0e368\"\nimport script from \"./Home.vue?vue&type=script&lang=js\"\nexport * from \"./Home.vue?vue&type=script&lang=js\"\n\nimport \"./Home.vue?vue&type=style&index=0&id=6da0e368&lang=css\"\nimport \"./Home.vue?vue&type=style&index=1&id=6da0e368&lang=less\"\n\nimport exportComponent from \"/Users/yinnnyou/workspace/youyinnn.github.io/node_modules/vue-loader/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__","<template>\n  <div class=\"script\">\n    <n-grid x-gap=\"6\" :cols=\"6\">\n      <n-gi span=\"1\">\n        <div>\n          <n-menu\n            v-if=\"menuValid\"\n            class=\"script-menu unselectable\"\n            v-model:value=\"activeKey\"\n            mode=\"vertical\"\n            :options=\"menuOptions\"\n            @update:value=\"onMenuItemClick\"\n          />\n        </div>\n      </n-gi>\n      <n-gi style=\"border-left: 1px solid #eee\" span=\"5\">\n        <markdown-body\n          :key=\"activeKey\"\n          :content=\"content\"\n          :class=\"{\n            'script-box': true,\n            article: true,\n            'markdown-body': true,\n            'editormd-html-preview': true,\n            animate__animated: true,\n            animate__fadeIn: scriptChangeAnimate,\n          }\"\n        />\n      </n-gi>\n    </n-grid>\n    <toc\n      :toc=\"toc\"\n      :class=\"{\n        'script-toc-box': true,\n        animate__animated: true,\n        animate__fadeIn: scriptChangeAnimate,\n      }\"\n    />\n  </div>\n</template>\n\n<script>\n/* eslint-disable no-unused-vars */\nimport resources from \"@/assets/resources/resources.js\";\nimport { NMenu, NGrid, NGi } from \"naive-ui\";\nimport Toc from \"@/components/Toc.vue\";\nimport MarkdownBody from \"@/components/MarkdownBody.vue\";\n\nexport default {\n  name: \"Script\",\n  components: {\n    // eslint-disable-next-line vue/no-unused-components\n    NMenu,\n    NGrid,\n    NGi,\n    Toc,\n    MarkdownBody,\n  },\n  data: () => ({\n    content: null,\n    activeKey: null,\n    menuOptions: [],\n    scriptChangeAnimate: false,\n    toc: {},\n  }),\n  computed: {\n    menuValid() {\n      return this.menuOptions.length > 0;\n    },\n  },\n  watch: {},\n  mounted: function () {\n    const resourceList = resources.list;\n    for (let rs of resourceList) {\n      require(`@/assets/resources/${rs}`);\n    }\n    const scriptSections = JSON.parse(sessionStorage.scriptsMds);\n    for (let sectionName in scriptSections) {\n      this.menuOptions.push({\n        label: sectionName,\n        key: scriptSections[sectionName],\n      });\n    }\n    const scriptId = this.$route.params.scriptId;\n    if (scriptId === undefined) {\n      this.onMenuItemClick(this.menuOptions[0].key);\n    } else {\n      this.showContent(scriptId);\n    }\n  },\n  methods: {\n    routeTo: function (key) {\n      this.$router.push(`/script/${key}`).catch(() => {});\n    },\n    onMenuItemClick: function (key) {\n      location.hash = \"\";\n      this.routeTo(key);\n      this.showContent(key);\n    },\n    showContent: function (key) {\n      this.activeKey = key;\n      this.scriptChangeAnimate = false;\n      const src = require(`raw-loader!@/assets/scripts/${key}.htm`);\n      this.content = src.default;\n\n      const tocSrc = require(`@/assets/scripts/${key}.htm.toc.json`);\n      this.toc = tocSrc;\n      setTimeout(() => {\n        this.scriptChangeAnimate = true;\n      }, 100);\n    },\n  },\n};\n</script>\n\n<style>\n.n-menu-item {\n  height: 30px !important;\n}\n.n-menu-item-content {\n  padding: 4px 12px !important;\n}\n.script-box {\n  padding-left: 2rem;\n  opacity: 0;\n  animation-duration: 1s;\n}\n\n@media only screen and (max-width: 800px) {\n  .script-box {\n    padding-left: 0.5rem;\n  }\n}\n\n.script-toc-box {\n  opacity: 0;\n  animation-delay: 0.3s;\n  animation-duration: 1s;\n}\n.script-box h2 {\n  border-bottom: none !important;\n}\n</style>\n","export function toArray(arg) {\n    if (Array.isArray(arg))\n        return arg;\n    return [arg];\n}\n// Do not use enum for lint plugin has error\nexport const TRAVERSE_COMMAND = {\n    STOP: 'STOP'\n};\nexport function traverseWithCb(treeNode, callback) {\n    const command = callback(treeNode);\n    if (treeNode.children !== undefined && command !== TRAVERSE_COMMAND.STOP) {\n        treeNode.children.forEach((childNode) => traverseWithCb(childNode, callback));\n    }\n}\nexport function getNonLeafKeys(treeNodes, options = {}) {\n    const { preserveGroup = false } = options;\n    const keys = [];\n    const cb = preserveGroup\n        ? (node) => {\n            if (!node.isLeaf) {\n                keys.push(node.key);\n                traverse(node.children);\n            }\n        }\n        : (node) => {\n            if (!node.isLeaf) {\n                if (!node.isGroup)\n                    keys.push(node.key);\n                traverse(node.children);\n            }\n        };\n    function traverse(nodes) {\n        nodes.forEach(cb);\n    }\n    traverse(treeNodes);\n    return keys;\n}\nexport function isLeaf(rawNode, getChildren) {\n    const { isLeaf } = rawNode;\n    if (isLeaf !== undefined)\n        return isLeaf;\n    else if (!getChildren(rawNode))\n        return true;\n    return false;\n}\nexport function defaultGetChildren(node) {\n    return node.children;\n}\nexport function defaultGetKey(node) {\n    return node.key;\n}\nexport function isIgnored() {\n    return false;\n}\nexport function isShallowLoaded(rawNode, getChildren) {\n    const { isLeaf } = rawNode;\n    if (isLeaf === false && !Array.isArray(getChildren(rawNode)))\n        return false;\n    return true;\n}\nexport function isDisabled(rawNode) {\n    return rawNode.disabled === true;\n}\nexport function isExpilicitlyNotLoaded(rawNode, getChildren) {\n    return (rawNode.isLeaf === false && !Array.isArray(getChildren(rawNode)));\n}\nexport function isNodeInvalid(rawNode, getChildren) {\n    return rawNode.isLeaf === true && Array.isArray(getChildren(rawNode));\n}\nexport function unwrapCheckedKeys(result) {\n    var _a;\n    if (result === undefined || result === null)\n        return [];\n    if (Array.isArray(result))\n        return result;\n    return (_a = result.checkedKeys) !== null && _a !== void 0 ? _a : [];\n}\nexport function unwrapIndeterminateKeys(result) {\n    var _a;\n    if (result === undefined || result === null || Array.isArray(result)) {\n        return [];\n    }\n    return (_a = result.indeterminateKeys) !== null && _a !== void 0 ? _a : [];\n}\nexport function merge(originalKeys, keysToAdd) {\n    const set = new Set(originalKeys);\n    keysToAdd.forEach((key) => {\n        if (!set.has(key)) {\n            set.add(key);\n        }\n    });\n    return Array.from(set);\n}\nexport function minus(originalKeys, keysToRemove) {\n    const set = new Set(originalKeys);\n    keysToRemove.forEach((key) => {\n        if (set.has(key)) {\n            set.delete(key);\n        }\n    });\n    return Array.from(set);\n}\nexport function isGroup(rawNode) {\n    return (rawNode === null || rawNode === void 0 ? void 0 : rawNode.type) === 'group';\n}\nexport function createIndexGetter(treeNodes) {\n    const map = new Map();\n    treeNodes.forEach((treeNode, i) => {\n        map.set(treeNode.key, i);\n    });\n    return (key) => { var _a; return (_a = map.get(key)) !== null && _a !== void 0 ? _a : null; };\n}\n","import { isExpilicitlyNotLoaded, merge, minus, traverseWithCb, TRAVERSE_COMMAND } from './utils';\nexport class SubtreeNotLoadedError extends Error {\n    constructor() {\n        super();\n        this.message =\n            'SubtreeNotLoadedError: checking a subtree whose required nodes are not fully loaded.';\n    }\n}\nfunction getExtendedCheckedKeySetAfterCheck(checkKeys, currentCheckedKeys, treeMate) {\n    return getExtendedCheckedKeySet(currentCheckedKeys.concat(checkKeys), treeMate);\n}\nfunction getAvailableAscendantNodeSet(uncheckedKeys, treeMate) {\n    const visitedKeys = new Set();\n    uncheckedKeys.forEach((uncheckedKey) => {\n        const uncheckedTreeNode = treeMate.treeNodeMap.get(uncheckedKey);\n        if (uncheckedTreeNode !== undefined) {\n            let nodeCursor = uncheckedTreeNode.parent;\n            while (nodeCursor !== null) {\n                if (nodeCursor.disabled)\n                    break;\n                if (visitedKeys.has(nodeCursor.key))\n                    break;\n                else {\n                    visitedKeys.add(nodeCursor.key);\n                }\n                nodeCursor = nodeCursor.parent;\n            }\n        }\n    });\n    return visitedKeys;\n}\nfunction getExtendedCheckedKeySetAfterUncheck(uncheckedKeys, currentCheckedKeys, treeMate) {\n    const extendedCheckedKeySet = getExtendedCheckedKeySet(currentCheckedKeys, treeMate);\n    const extendedKeySetToUncheck = getExtendedCheckedKeySet(uncheckedKeys, treeMate, true);\n    const ascendantKeySet = getAvailableAscendantNodeSet(uncheckedKeys, treeMate);\n    const keysToRemove = [];\n    extendedCheckedKeySet.forEach((key) => {\n        if (extendedKeySetToUncheck.has(key) || ascendantKeySet.has(key)) {\n            keysToRemove.push(key);\n        }\n    });\n    keysToRemove.forEach((key) => extendedCheckedKeySet.delete(key));\n    return extendedCheckedKeySet;\n}\nexport function getCheckedKeys(options, treeMate) {\n    const { checkedKeys, keysToCheck, keysToUncheck, indeterminateKeys, cascade, leafOnly, checkStrategy } = options;\n    if (!cascade) {\n        if (keysToCheck !== undefined) {\n            return {\n                checkedKeys: merge(checkedKeys, keysToCheck),\n                indeterminateKeys: Array.from(indeterminateKeys)\n            };\n        }\n        else if (keysToUncheck !== undefined) {\n            return {\n                checkedKeys: minus(checkedKeys, keysToUncheck),\n                indeterminateKeys: Array.from(indeterminateKeys)\n            };\n        }\n        else {\n            return {\n                checkedKeys: Array.from(checkedKeys),\n                indeterminateKeys: Array.from(indeterminateKeys)\n            };\n        }\n    }\n    const { levelTreeNodeMap } = treeMate;\n    let extendedCheckedKeySet;\n    if (keysToUncheck !== undefined) {\n        extendedCheckedKeySet = getExtendedCheckedKeySetAfterUncheck(keysToUncheck, checkedKeys, treeMate);\n    }\n    else if (keysToCheck !== undefined) {\n        extendedCheckedKeySet = getExtendedCheckedKeySetAfterCheck(keysToCheck, checkedKeys, treeMate);\n    }\n    else {\n        extendedCheckedKeySet = getExtendedCheckedKeySet(checkedKeys, treeMate);\n    }\n    const checkStrategyIsParent = checkStrategy === 'parent';\n    const checkStrategyIsChild = checkStrategy === 'child' || leafOnly;\n    const syntheticCheckedKeySet = extendedCheckedKeySet;\n    const syntheticIndeterminateKeySet = new Set();\n    const maxLevel = Math.max.apply(null, Array.from(levelTreeNodeMap.keys()));\n    // cascade check\n    // 1. if tree is fully loaded, it just works\n    // 2. if the tree is not fully loaded, we assume that keys which is in not\n    //    loaded tree are not in checked keys\n    //    for example:\n    //    a -- b(fully-loaded)   -- c(fully-loaded)\n    //      |- d(partial-loaded) -- ?e(not-loaded)\n    //    in the case, `e` is assumed not to be checked, nor we can't calc `d`'s\n    //    and `a`'s status\n    for (let level = maxLevel; level >= 0; level -= 1) {\n        const levelIsZero = level === 0;\n        // it should exists, nor it is a bug\n        const levelTreeNodes = levelTreeNodeMap.get(level);\n        for (const levelTreeNode of levelTreeNodes) {\n            if (levelTreeNode.isLeaf)\n                continue;\n            const { key: levelTreeNodeKey, shallowLoaded } = levelTreeNode;\n            if (checkStrategyIsChild && shallowLoaded) {\n                // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n                levelTreeNode.children.forEach((v) => {\n                    if (!v.disabled &&\n                        !v.isLeaf &&\n                        v.shallowLoaded &&\n                        syntheticCheckedKeySet.has(v.key)) {\n                        syntheticCheckedKeySet.delete(v.key);\n                    }\n                });\n            }\n            if (levelTreeNode.disabled || !shallowLoaded) {\n                continue;\n            }\n            let fullyChecked = true;\n            let partialChecked = false;\n            let allDisabled = true;\n            // it is shallow loaded, so `children` must exist\n            for (const childNode of levelTreeNode.children) {\n                const childKey = childNode.key;\n                if (childNode.disabled)\n                    continue;\n                if (allDisabled)\n                    allDisabled = false;\n                if (syntheticCheckedKeySet.has(childKey)) {\n                    partialChecked = true;\n                }\n                else if (syntheticIndeterminateKeySet.has(childKey)) {\n                    partialChecked = true;\n                    fullyChecked = false;\n                    break;\n                }\n                else {\n                    fullyChecked = false;\n                    if (partialChecked) {\n                        break;\n                    }\n                }\n            }\n            if (fullyChecked && !allDisabled) {\n                if (checkStrategyIsParent) {\n                    // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n                    levelTreeNode.children.forEach((v) => {\n                        if (!v.disabled && syntheticCheckedKeySet.has(v.key)) {\n                            syntheticCheckedKeySet.delete(v.key);\n                        }\n                    });\n                }\n                syntheticCheckedKeySet.add(levelTreeNodeKey);\n            }\n            else if (partialChecked) {\n                syntheticIndeterminateKeySet.add(levelTreeNodeKey);\n            }\n            if (levelIsZero &&\n                checkStrategyIsChild &&\n                syntheticCheckedKeySet.has(levelTreeNodeKey)) {\n                syntheticCheckedKeySet.delete(levelTreeNodeKey);\n            }\n        }\n    }\n    return {\n        checkedKeys: Array.from(syntheticCheckedKeySet),\n        indeterminateKeys: Array.from(syntheticIndeterminateKeySet)\n    };\n}\n// unchecking is safe when doing cascade uncheck in async mode\nexport function getExtendedCheckedKeySet(checkedKeys, treeMate, isUnchecking = false) {\n    const { treeNodeMap, getChildren } = treeMate;\n    const visitedKeySet = new Set();\n    const extendedKeySet = new Set(checkedKeys);\n    checkedKeys.forEach((checkedKey) => {\n        const checkedTreeNode = treeNodeMap.get(checkedKey);\n        if (checkedTreeNode !== undefined) {\n            traverseWithCb(checkedTreeNode, (treeNode) => {\n                if (treeNode.disabled) {\n                    return TRAVERSE_COMMAND.STOP;\n                }\n                const { key } = treeNode;\n                if (visitedKeySet.has(key))\n                    return;\n                visitedKeySet.add(key);\n                // Adding keys before loaded check is okay, since if not valid error\n                // would be thrown\n                extendedKeySet.add(key);\n                if (isExpilicitlyNotLoaded(treeNode.rawNode, getChildren)) {\n                    if (isUnchecking) {\n                        return TRAVERSE_COMMAND.STOP;\n                    }\n                    else {\n                        throw new SubtreeNotLoadedError();\n                    }\n                }\n            });\n        }\n    });\n    return extendedKeySet;\n}\n","export function getPath(key, { includeGroup = false, includeSelf = true }, treeMate) {\n    var _a;\n    const treeNodeMap = treeMate.treeNodeMap;\n    let treeNode = key === null || key === undefined ? null : (_a = treeNodeMap.get(key)) !== null && _a !== void 0 ? _a : null;\n    const mergedPath = {\n        keyPath: [],\n        treeNodePath: [],\n        treeNode: treeNode\n    };\n    if (treeNode === null || treeNode === void 0 ? void 0 : treeNode.ignored) {\n        mergedPath.treeNode = null;\n        return mergedPath;\n    }\n    while (treeNode) {\n        if (!treeNode.ignored && (includeGroup || !treeNode.isGroup)) {\n            mergedPath.treeNodePath.push(treeNode);\n        }\n        treeNode = treeNode.parent;\n    }\n    mergedPath.treeNodePath.reverse();\n    if (!includeSelf)\n        mergedPath.treeNodePath.pop();\n    mergedPath.keyPath = mergedPath.treeNodePath.map((treeNode) => treeNode.key);\n    return mergedPath;\n}\n","export function getFirstAvailableNode(nodes) {\n    if (nodes.length === 0)\n        return null;\n    const node = nodes[0];\n    if (node.isGroup || node.ignored || node.disabled) {\n        return node.getNext();\n    }\n    return node;\n}\nfunction rawGetNext(node, loop) {\n    const sibs = node.siblings;\n    const l = sibs.length;\n    const { index } = node;\n    if (loop) {\n        return sibs[(index + 1) % l];\n    }\n    else {\n        if (index === sibs.length - 1)\n            return null;\n        return sibs[index + 1];\n    }\n}\nfunction move(fromNode, dir, { loop = false, includeDisabled = false } = {}) {\n    const iterate = dir === 'prev' ? rawGetPrev : rawGetNext;\n    const getChildOptions = {\n        reverse: dir === 'prev'\n    };\n    let meet = false;\n    let endNode = null;\n    function traverse(node) {\n        if (node === null)\n            return;\n        if (node === fromNode) {\n            if (!meet) {\n                meet = true;\n            }\n            else if (!fromNode.disabled && !fromNode.isGroup) {\n                endNode = fromNode;\n                return;\n            }\n        }\n        else {\n            if ((!node.disabled || includeDisabled) &&\n                !node.ignored &&\n                !node.isGroup) {\n                endNode = node;\n                return;\n            }\n        }\n        if (node.isGroup) {\n            const child = getChild(node, getChildOptions);\n            if (child !== null) {\n                endNode = child;\n            }\n            else {\n                traverse(iterate(node, loop));\n            }\n        }\n        else {\n            const nextNode = iterate(node, false);\n            if (nextNode !== null) {\n                traverse(nextNode);\n            }\n            else {\n                const parent = rawGetParent(node);\n                if (parent === null || parent === void 0 ? void 0 : parent.isGroup) {\n                    traverse(iterate(parent, loop));\n                }\n                else if (loop) {\n                    traverse(iterate(node, true));\n                }\n            }\n        }\n    }\n    traverse(fromNode);\n    return endNode;\n}\nfunction rawGetPrev(node, loop) {\n    const sibs = node.siblings;\n    const l = sibs.length;\n    const { index } = node;\n    if (loop) {\n        return sibs[(index - 1 + l) % l];\n    }\n    else {\n        if (index === 0)\n            return null;\n        return sibs[index - 1];\n    }\n}\nfunction rawGetParent(node) {\n    return node.parent;\n}\nfunction getChild(node, options = {}) {\n    const { reverse = false } = options;\n    const { children } = node;\n    if (children) {\n        const { length } = children;\n        const start = reverse ? length - 1 : 0;\n        const end = reverse ? -1 : length;\n        const delta = reverse ? -1 : 1;\n        for (let i = start; i !== end; i += delta) {\n            const child = children[i];\n            if (!child.disabled && !child.ignored) {\n                if (child.isGroup) {\n                    const childInGroup = getChild(child, options);\n                    if (childInGroup !== null)\n                        return childInGroup;\n                }\n                else {\n                    return child;\n                }\n            }\n        }\n    }\n    return null;\n}\nexport const moveMethods = {\n    getChild() {\n        if (this.ignored)\n            return null;\n        return getChild(this);\n    },\n    getParent() {\n        const { parent } = this;\n        if (parent === null || parent === void 0 ? void 0 : parent.isGroup) {\n            return parent.getParent();\n        }\n        return parent;\n    },\n    getNext(options = {}) {\n        return move(this, 'next', options);\n    },\n    getPrev(options = {}) {\n        return move(this, 'prev', options);\n    }\n};\n","export function flatten(treeNodes, expandedKeys) {\n    const expandedKeySet = expandedKeys ? new Set(expandedKeys) : undefined;\n    const flattenedNodes = [];\n    function traverse(treeNodes) {\n        treeNodes.forEach((treeNode) => {\n            flattenedNodes.push(treeNode);\n            if (treeNode.isLeaf || !treeNode.children || treeNode.ignored)\n                return;\n            if (treeNode.isGroup) {\n                // group node shouldn't be expanded\n                traverse(treeNode.children);\n            }\n            else if (\n            // normal non-leaf node\n            expandedKeySet === undefined ||\n                expandedKeySet.has(treeNode.key)) {\n                traverse(treeNode.children);\n            }\n        });\n    }\n    traverse(treeNodes);\n    return flattenedNodes;\n}\n","export function contains(parent, child) {\n    const parentKey = parent.key;\n    // eslint-disable-next-line no-unmodified-loop-condition\n    while (child) {\n        if (child.key === parentKey)\n            return true;\n        child = child.parent;\n    }\n    return false;\n}\n","import { getCheckedKeys } from './check';\nimport { toArray, isDisabled, isLeaf, isGroup, isNodeInvalid, unwrapCheckedKeys, isShallowLoaded, unwrapIndeterminateKeys, getNonLeafKeys, isIgnored, defaultGetChildren, defaultGetKey } from './utils';\nimport { getPath } from './path';\nimport { moveMethods, getFirstAvailableNode } from './move';\nimport { flatten } from './flatten';\nimport { contains } from './contains';\nfunction createTreeNodes(rawNodes, treeNodeMap, levelTreeNodeMap, nodeProto, getChildren, parent = null, level = 0) {\n    const treeNodes = [];\n    rawNodes.forEach((rawNode, index) => {\n        var _a;\n        if (process.env.NODE_ENV !== 'production' &&\n            isNodeInvalid(rawNode, getChildren)) {\n            console.error('[treemate]: node', rawNode, 'is invalid');\n        }\n        const treeNode = Object.create(nodeProto);\n        treeNode.rawNode = rawNode;\n        treeNode.siblings = treeNodes;\n        treeNode.level = level;\n        treeNode.index = index;\n        treeNode.isFirstChild = index === 0;\n        treeNode.isLastChild = index + 1 === rawNodes.length;\n        treeNode.parent = parent;\n        if (!treeNode.ignored) {\n            const rawChildren = getChildren(rawNode);\n            if (Array.isArray(rawChildren)) {\n                treeNode.children = createTreeNodes(rawChildren, treeNodeMap, levelTreeNodeMap, nodeProto, getChildren, treeNode, level + 1);\n            }\n        }\n        treeNodes.push(treeNode);\n        treeNodeMap.set(treeNode.key, treeNode);\n        if (!levelTreeNodeMap.has(level))\n            levelTreeNodeMap.set(level, []);\n        (_a = levelTreeNodeMap.get(level)) === null || _a === void 0 ? void 0 : _a.push(treeNode);\n    });\n    return treeNodes;\n}\nexport function createTreeMate(rawNodes, options = {}) {\n    var _a;\n    const treeNodeMap = new Map();\n    const levelTreeNodeMap = new Map();\n    const { getDisabled = isDisabled, getIgnored = isIgnored, getIsGroup = isGroup, getKey = defaultGetKey } = options;\n    const _getChildren = (_a = options.getChildren) !== null && _a !== void 0 ? _a : defaultGetChildren;\n    const getChildren = options.ignoreEmptyChildren\n        ? (node) => {\n            const children = _getChildren(node);\n            if (Array.isArray(children)) {\n                if (!children.length)\n                    return null;\n                return children;\n            }\n            return children;\n        }\n        : _getChildren;\n    const nodeProto = Object.assign({\n        get key() {\n            // do not pass parent or related things to it\n            // the key need to be specified explicitly\n            return getKey(this.rawNode);\n        },\n        get disabled() {\n            return getDisabled(this.rawNode);\n        },\n        get isGroup() {\n            return getIsGroup(this.rawNode);\n        },\n        get isLeaf() {\n            return isLeaf(this.rawNode, getChildren);\n        },\n        get shallowLoaded() {\n            return isShallowLoaded(this.rawNode, getChildren);\n        },\n        get ignored() {\n            return getIgnored(this.rawNode);\n        },\n        contains(node) {\n            return contains(this, node);\n        }\n    }, moveMethods);\n    const treeNodes = createTreeNodes(rawNodes, treeNodeMap, levelTreeNodeMap, nodeProto, getChildren);\n    function getNode(key) {\n        if (key === null || key === undefined)\n            return null;\n        const tmNode = treeNodeMap.get(key);\n        if (tmNode && !tmNode.isGroup && !tmNode.ignored) {\n            return tmNode;\n        }\n        return null;\n    }\n    function _getNode(key) {\n        if (key === null || key === undefined)\n            return null;\n        const tmNode = treeNodeMap.get(key);\n        if (tmNode && !tmNode.ignored) {\n            return tmNode;\n        }\n        return null;\n    }\n    function getPrev(key, options) {\n        const node = _getNode(key);\n        if (!node)\n            return null;\n        return node.getPrev(options);\n    }\n    function getNext(key, options) {\n        const node = _getNode(key);\n        if (!node)\n            return null;\n        return node.getNext(options);\n    }\n    function getParent(key) {\n        const node = _getNode(key);\n        if (!node)\n            return null;\n        return node.getParent();\n    }\n    function getChild(key) {\n        const node = _getNode(key);\n        if (!node)\n            return null;\n        return node.getChild();\n    }\n    const treemate = {\n        treeNodes,\n        treeNodeMap,\n        levelTreeNodeMap,\n        maxLevel: Math.max(...levelTreeNodeMap.keys()),\n        getChildren,\n        getFlattenedNodes(expandedKeys) {\n            return flatten(treeNodes, expandedKeys);\n        },\n        getNode,\n        getPrev,\n        getNext,\n        getParent,\n        getChild,\n        getFirstAvailableNode() {\n            return getFirstAvailableNode(treeNodes);\n        },\n        getPath(key, options = {}) {\n            return getPath(key, options, treemate);\n        },\n        getCheckedKeys(checkedKeys, options = {}) {\n            const { cascade = true, leafOnly = false, checkStrategy = 'all' } = options;\n            return getCheckedKeys({\n                checkedKeys: unwrapCheckedKeys(checkedKeys),\n                indeterminateKeys: unwrapIndeterminateKeys(checkedKeys),\n                cascade,\n                leafOnly,\n                checkStrategy\n            }, treemate);\n        },\n        check(keysToCheck, checkedKeys, options = {}) {\n            const { cascade = true, leafOnly = false, checkStrategy = 'all' } = options;\n            return getCheckedKeys({\n                checkedKeys: unwrapCheckedKeys(checkedKeys),\n                indeterminateKeys: unwrapIndeterminateKeys(checkedKeys),\n                keysToCheck: keysToCheck === undefined || keysToCheck === null\n                    ? []\n                    : toArray(keysToCheck),\n                cascade,\n                leafOnly,\n                checkStrategy\n            }, treemate);\n        },\n        uncheck(keysToUncheck, checkedKeys, options = {}) {\n            const { cascade = true, leafOnly = false, checkStrategy = 'all' } = options;\n            return getCheckedKeys({\n                checkedKeys: unwrapCheckedKeys(checkedKeys),\n                indeterminateKeys: unwrapIndeterminateKeys(checkedKeys),\n                keysToUncheck: keysToUncheck === null || keysToUncheck === undefined\n                    ? []\n                    : toArray(keysToUncheck),\n                cascade,\n                leafOnly,\n                checkStrategy\n            }, treemate);\n        },\n        getNonLeafKeys(options = {}) {\n            return getNonLeafKeys(treeNodes, options);\n        }\n    };\n    return treemate;\n}\n","import { onBeforeMount, onBeforeUnmount, reactive, readonly, watch } from 'vue';\nimport { on, off } from 'evtd';\nimport { hasInstance } from './utils';\nexport default function useKeyboard(options = {}, enabledRef) {\n    const state = reactive({\n        ctrl: false,\n        command: false,\n        win: false,\n        shift: false,\n        tab: false\n    });\n    const { keydown, keyup } = options;\n    const keydownHandler = (e) => {\n        switch (e.key) {\n            case 'Control':\n                state.ctrl = true;\n                break;\n            case 'Meta':\n                state.command = true;\n                state.win = true;\n                break;\n            case 'Shift':\n                state.shift = true;\n                break;\n            case 'Tab':\n                state.tab = true;\n                break;\n        }\n        if (keydown !== undefined) {\n            Object.keys(keydown).forEach(key => {\n                if (key !== e.key)\n                    return;\n                const handler = keydown[key];\n                if (typeof handler === 'function') {\n                    handler(e);\n                }\n                else {\n                    const { stop = false, prevent = false } = handler;\n                    if (stop)\n                        e.stopPropagation();\n                    if (prevent)\n                        e.preventDefault();\n                    handler.handler(e);\n                }\n            });\n        }\n    };\n    const keyupHandler = (e) => {\n        switch (e.key) {\n            case 'Control':\n                state.ctrl = false;\n                break;\n            case 'Meta':\n                state.command = false;\n                state.win = false;\n                break;\n            case 'Shift':\n                state.shift = false;\n                break;\n            case 'Tab':\n                state.tab = false;\n                break;\n        }\n        if (keyup !== undefined) {\n            Object.keys(keyup).forEach(key => {\n                if (key !== e.key)\n                    return;\n                const handler = keyup[key];\n                if (typeof handler === 'function') {\n                    handler(e);\n                }\n                else {\n                    const { stop = false, prevent = false } = handler;\n                    if (stop)\n                        e.stopPropagation();\n                    if (prevent)\n                        e.preventDefault();\n                    handler.handler(e);\n                }\n            });\n        }\n    };\n    const setup = () => {\n        if (enabledRef === undefined || enabledRef.value) {\n            on('keydown', document, keydownHandler);\n            on('keyup', document, keyupHandler);\n        }\n        if (enabledRef !== undefined) {\n            watch(enabledRef, value => {\n                if (value) {\n                    on('keydown', document, keydownHandler);\n                    on('keyup', document, keyupHandler);\n                }\n                else {\n                    off('keydown', document, keydownHandler);\n                    off('keyup', document, keyupHandler);\n                }\n            });\n        }\n    };\n    if (hasInstance()) {\n        onBeforeMount(setup);\n        onBeforeUnmount(() => {\n            if (enabledRef === undefined || enabledRef.value) {\n                off('keydown', document, keydownHandler);\n                off('keyup', document, keyupHandler);\n            }\n        });\n    }\n    else {\n        setup();\n    }\n    return readonly(state);\n}\n","let viewMeasurer = null;\nexport function ensureViewBoundingRect() {\n    if (viewMeasurer === null) {\n        viewMeasurer = document.getElementById('v-binder-view-measurer');\n        if (viewMeasurer === null) {\n            viewMeasurer = document.createElement('div');\n            viewMeasurer.id = 'v-binder-view-measurer';\n            const { style } = viewMeasurer;\n            style.position = 'fixed';\n            style.left = '0';\n            style.right = '0';\n            style.top = '0';\n            style.bottom = '0';\n            style.pointerEvents = 'none';\n            style.visibility = 'hidden';\n            document.body.appendChild(viewMeasurer);\n        }\n    }\n    return viewMeasurer.getBoundingClientRect();\n}\nexport function getPointRect(x, y) {\n    const viewRect = ensureViewBoundingRect();\n    return {\n        top: y,\n        left: x,\n        height: 0,\n        width: 0,\n        right: viewRect.width - x,\n        bottom: viewRect.height - y\n    };\n}\nexport function getRect(el) {\n    const elRect = el.getBoundingClientRect();\n    const viewRect = ensureViewBoundingRect();\n    return {\n        left: elRect.left - viewRect.left,\n        top: elRect.top - viewRect.top,\n        bottom: viewRect.height + viewRect.top - elRect.bottom,\n        right: viewRect.width + viewRect.left - elRect.right,\n        width: elRect.width,\n        height: elRect.height\n    };\n}\nexport function getParentNode(node) {\n    // document type\n    if (node.nodeType === 9) {\n        return null;\n    }\n    return node.parentNode;\n}\nexport function getScrollParent(node) {\n    if (node === null)\n        return null;\n    const parentNode = getParentNode(node);\n    if (parentNode === null) {\n        return null;\n    }\n    // Document\n    if (parentNode.nodeType === 9) {\n        return document;\n    }\n    // Element\n    if (parentNode.nodeType === 1) {\n        // Firefox want us to check `-x` and `-y` variations as well\n        const { overflow, overflowX, overflowY } = getComputedStyle(parentNode);\n        if (/(auto|scroll|overlay)/.test(overflow + overflowY + overflowX)) {\n            return parentNode;\n        }\n    }\n    return getScrollParent(parentNode);\n}\n","/* eslint-disable @typescript-eslint/no-non-null-assertion */\nimport { defineComponent, provide, ref, inject, getCurrentInstance, onBeforeUnmount } from 'vue';\nimport { beforeNextFrameOnce } from 'seemly';\nimport { getSlot } from '../../shared/v-node';\nimport { getScrollParent } from './utils';\nimport { on, off } from 'evtd';\nconst Binder = defineComponent({\n    name: 'Binder',\n    props: {\n        syncTargetWithParent: Boolean,\n        syncTarget: {\n            type: Boolean,\n            default: true\n        }\n    },\n    setup(props) {\n        var _a;\n        provide('VBinder', (_a = getCurrentInstance()) === null || _a === void 0 ? void 0 : _a.proxy);\n        const VBinder = inject('VBinder', null);\n        const targetRef = ref(null);\n        /**\n         * If there's no nested vbinder, we can simply set the target ref.\n         *\n         * However, when it comes to:\n         * <VBinder> <- syncTarget = false\n         *\n         *              Should hold target DOM ref, but can't get it directly from\n         *              its VTarget. So if there are nested VBinder, we should:\n         *              1. Stop setting target DOM from level-1 VTarget\n         *              2. Set target DOM from level-2 VTarget\n         *              For (1), we need `syncTarget` to `false`\n         *              For (2), we need to set `syncTargetWithParent` to `true` on\n         *              level-2 VBinder\n         *   <VTarget>\n         *     <VBinder> <- syncTargetWithParent = true\n         *       <VTarget>target</VTarget>\n         *     </VBinder>\n         *     <VFollower>\n         *       content1\n         *     </VFollower>\n         *   </VTarget>\n         *   <VFollower>\n         *     content2\n         *   </VFollower>\n         * </VBinder>\n         */\n        const setTargetRef = (el) => {\n            targetRef.value = el;\n            // eslint-disable-next-line @typescript-eslint/strict-boolean-expressions\n            if (VBinder && props.syncTargetWithParent) {\n                VBinder.setTargetRef(el);\n            }\n        };\n        // scroll related\n        let scrollableNodes = [];\n        const ensureScrollListener = () => {\n            let cursor = targetRef.value;\n            while (true) {\n                cursor = getScrollParent(cursor);\n                if (cursor === null)\n                    break;\n                scrollableNodes.push(cursor);\n            }\n            for (const el of scrollableNodes) {\n                on('scroll', el, onScroll, true);\n            }\n        };\n        const removeScrollListeners = () => {\n            for (const el of scrollableNodes) {\n                off('scroll', el, onScroll, true);\n            }\n            scrollableNodes = [];\n        };\n        const followerScrollListeners = new Set();\n        const addScrollListener = (listener) => {\n            if (followerScrollListeners.size === 0) {\n                ensureScrollListener();\n            }\n            if (!followerScrollListeners.has(listener)) {\n                followerScrollListeners.add(listener);\n            }\n        };\n        const removeScrollListener = (listener) => {\n            if (followerScrollListeners.has(listener)) {\n                followerScrollListeners.delete(listener);\n            }\n            if (followerScrollListeners.size === 0) {\n                removeScrollListeners();\n            }\n        };\n        const onScroll = () => {\n            beforeNextFrameOnce(onScrollRaf);\n        };\n        const onScrollRaf = () => {\n            followerScrollListeners.forEach((listener) => listener());\n        };\n        // resize related\n        const followerResizeListeners = new Set();\n        const addResizeListener = (listener) => {\n            if (followerResizeListeners.size === 0) {\n                on('resize', window, onResize);\n            }\n            if (!followerResizeListeners.has(listener)) {\n                followerResizeListeners.add(listener);\n            }\n        };\n        const removeResizeListener = (listener) => {\n            if (followerResizeListeners.has(listener)) {\n                followerResizeListeners.delete(listener);\n            }\n            if (followerResizeListeners.size === 0) {\n                off('resize', window, onResize);\n            }\n        };\n        const onResize = () => {\n            followerResizeListeners.forEach((listener) => listener());\n        };\n        onBeforeUnmount(() => {\n            off('resize', window, onResize);\n            removeScrollListeners();\n        });\n        return {\n            targetRef,\n            setTargetRef,\n            addScrollListener,\n            removeScrollListener,\n            addResizeListener,\n            removeResizeListener\n        };\n    },\n    render() {\n        return getSlot(this.$slots);\n    }\n});\nexport default Binder;\n","/* eslint-disable @typescript-eslint/no-non-null-assertion */\nimport { defineComponent, inject, withDirectives } from 'vue';\nimport { getFirstVNode } from '../../shared/v-node';\nexport default defineComponent({\n    name: 'Target',\n    setup() {\n        const { setTargetRef, syncTarget } = inject('VBinder');\n        const setTargetDirective = {\n            mounted: setTargetRef,\n            updated: setTargetRef\n        };\n        return {\n            syncTarget,\n            setTargetDirective\n        };\n    },\n    render() {\n        const { syncTarget, setTargetDirective } = this;\n        /**\n         * If you are using VBinder as a child of VBinder, the children wouldn't be\n         * a valid DOM or component that can be attached to by directive.\n         * So we won't sync target on those kind of situation and control the\n         * target sync logic manually.\n         */\n        if (syncTarget) {\n            return withDirectives(getFirstVNode(this.$slots), [[setTargetDirective]]);\n        }\n        return getFirstVNode(this.$slots);\n    }\n});\n","export const modalBodyInjectionKey = Symbol('modalBody');\nexport const modalInjectionKey = Symbol('modal');\n","export const drawerBodyInjectionKey = Symbol('drawerBody');\nexport const drawerInjectionKey = Symbol('drawer');\n","export const popoverBodyInjectionKey = Symbol('popoverBodyInjection');\n","export const internalSelectionMenuInjectionKey = Symbol('internal-select-menu');\nexport const internalSelectionMenuBodyInjectionKey = Symbol('internal-select-menu-body');\n","import { useMemo } from 'vooks';\nimport { inject } from 'vue';\nimport { modalBodyInjectionKey } from '../../modal/src/interface';\nimport { drawerBodyInjectionKey } from '../../drawer/src/interface';\nimport { popoverBodyInjectionKey } from '../../popover/src/interface';\nimport { internalSelectionMenuBodyInjectionKey } from '../../_internal/select-menu/src/interface';\nconst teleportDisabled = '__disabled__';\nfunction useAdjustedTo(props) {\n    const modal = inject(modalBodyInjectionKey, null);\n    const drawer = inject(drawerBodyInjectionKey, null);\n    const popover = inject(popoverBodyInjectionKey, null);\n    const selectMenu = inject(internalSelectionMenuBodyInjectionKey, null);\n    return useMemo(() => {\n        var _a;\n        const { to } = props;\n        if (to !== undefined) {\n            if (to === false)\n                return teleportDisabled;\n            if (to === true)\n                return 'body';\n            return to;\n        }\n        if (modal === null || modal === void 0 ? void 0 : modal.value) {\n            return (_a = modal.value.$el) !== null && _a !== void 0 ? _a : modal.value;\n        }\n        if (drawer === null || drawer === void 0 ? void 0 : drawer.value)\n            return drawer.value;\n        if (popover === null || popover === void 0 ? void 0 : popover.value)\n            return popover.value;\n        if (selectMenu === null || selectMenu === void 0 ? void 0 : selectMenu.value)\n            return selectMenu.value;\n        return to !== null && to !== void 0 ? to : 'body';\n    });\n}\n// teleport disabled key\nuseAdjustedTo.tdkey = teleportDisabled;\nuseAdjustedTo.propTo = {\n    type: [String, Object, Boolean],\n    default: undefined\n};\nexport { useAdjustedTo };\n","import { flatten } from './flatten';\nimport { warn } from '../naive';\nexport function getFirstSlotVNode(slots, slotName = 'default', props = undefined) {\n    const slot = slots[slotName];\n    if (!slot) {\n        warn('getFirstSlotVNode', `slot[${slotName}] is empty`);\n        return null;\n    }\n    const slotContent = flatten(slot(props));\n    // vue will normalize the slot, so slot must be an array\n    if (slotContent.length === 1) {\n        return slotContent[0];\n    }\n    else {\n        warn('getFirstSlotVNode', `slot[${slotName}] should have exactly one child`);\n        return null;\n    }\n}\n","const oppositionPositions = {\n    top: 'bottom',\n    bottom: 'top',\n    left: 'right',\n    right: 'left'\n};\nconst oppositeAligns = {\n    start: 'end',\n    center: 'center',\n    end: 'start'\n};\nconst propToCompare = {\n    top: 'height',\n    bottom: 'height',\n    left: 'width',\n    right: 'width'\n};\nconst transformOrigins = {\n    'bottom-start': 'top left',\n    bottom: 'top center',\n    'bottom-end': 'top right',\n    'top-start': 'bottom left',\n    top: 'bottom center',\n    'top-end': 'bottom right',\n    'right-start': 'top left',\n    right: 'center left',\n    'right-end': 'bottom left',\n    'left-start': 'top right',\n    left: 'center right',\n    'left-end': 'bottom right'\n};\nconst overlapTransformOrigin = {\n    'bottom-start': 'bottom left',\n    bottom: 'bottom center',\n    'bottom-end': 'bottom right',\n    'top-start': 'top left',\n    top: 'top center',\n    'top-end': 'top right',\n    'right-start': 'top right',\n    right: 'center right',\n    'right-end': 'bottom right',\n    'left-start': 'top left',\n    left: 'center left',\n    'left-end': 'bottom left'\n};\nconst oppositeAlignCssPositionProps = {\n    'bottom-start': 'right',\n    'bottom-end': 'left',\n    'top-start': 'right',\n    'top-end': 'left',\n    'right-start': 'bottom',\n    'right-end': 'top',\n    'left-start': 'bottom',\n    'left-end': 'top'\n};\n// const keepOffsetDirection: Record<Position, boolean> = {\n//   top: true, // top++\n//   bottom: false, // top--\n//   left: true, // left++\n//   right: false // left--\n// }\nconst cssPositionToOppositeAlign = {\n    top: 'end',\n    bottom: 'start',\n    left: 'end',\n    right: 'start'\n};\nexport function getPlacementAndOffsetOfFollower(placement, targetRect, followerRect, flipLevel, flip, overlap) {\n    if (!flip || overlap) {\n        return { placement: placement, top: 0, left: 0 };\n    }\n    const [position, align] = placement.split('-');\n    let properAlign = align !== null && align !== void 0 ? align : 'center';\n    let left = 0;\n    let top = 0;\n    // TODO: fix it\n    // calculate offset\n    // const deriveOffset = (\n    //   oppositeAlignCssSizeProp: 'width' | 'height',\n    //   currentAlignCssPositionProp: Position,\n    //   offsetVertically: boolean\n    // ): void => {\n    //   if (flipLevel < 2) return\n    //   const diff = followerRect[oppositeAlignCssSizeProp] - targetRect[currentAlignCssPositionProp] - targetRect[oppositeAlignCssSizeProp]\n    //   if (diff) {\n    //     if (offsetVertically) {\n    //       top = keepOffsetDirection[currentAlignCssPositionProp] ? diff : -diff\n    //     } else {\n    //       left = keepOffsetDirection[currentAlignCssPositionProp] ? diff : -diff\n    //     }\n    //   }\n    // }\n    // const offsetVertically = position === 'left' || position === 'right'\n    // choose proper placement for non-center align\n    if (properAlign !== 'center') {\n        const oppositeAlignCssPositionProp = oppositeAlignCssPositionProps[placement];\n        const currentAlignCssPositionProp = oppositionPositions[oppositeAlignCssPositionProp];\n        const oppositeAlignCssSizeProp = propToCompare[oppositeAlignCssPositionProp];\n        // if follower rect is larger than target rect in align direction\n        //           [ target ]\n        //           [     follower     ]\n        // [     follower     ] <---->\n        if (followerRect[oppositeAlignCssSizeProp] > targetRect[oppositeAlignCssSizeProp]) {\n            if (\n            // current space is not enough\n            targetRect[oppositeAlignCssPositionProp] + targetRect[oppositeAlignCssSizeProp] < followerRect[oppositeAlignCssSizeProp]) {\n                const followerOverTargetSize = (followerRect[oppositeAlignCssSizeProp] - targetRect[oppositeAlignCssSizeProp]) / 2;\n                if ((targetRect[oppositeAlignCssPositionProp] < followerOverTargetSize) || (targetRect[currentAlignCssPositionProp] < followerOverTargetSize)) {\n                    // opposite align has larger space\n                    if (targetRect[oppositeAlignCssPositionProp] < targetRect[currentAlignCssPositionProp]) {\n                        properAlign = oppositeAligns[align];\n                    }\n                    // TODO: fix it\n                    // deriveOffset(oppositeAlignCssSizeProp, oppositeAlignCssPositionProp, offsetVertically)\n                }\n                else {\n                    // 'center' align is better\n                    properAlign = 'center';\n                }\n            }\n        }\n        // if follower rect is smaller than target rect in align direction\n        // [     target     ]\n        // [ follower ]         <---->\n        else if (followerRect[oppositeAlignCssSizeProp] < targetRect[oppositeAlignCssSizeProp]) {\n            // TODO: maybe center is better\n            if (targetRect[currentAlignCssPositionProp] < 0 &&\n                // opposite align has larger space\n                targetRect[oppositeAlignCssPositionProp] > targetRect[currentAlignCssPositionProp]) {\n                properAlign = oppositeAligns[align];\n            }\n        }\n    }\n    else {\n        const possibleAlternativeAlignCssPositionProp1 = (position === 'bottom' || position === 'top') ? 'left' : 'top';\n        const possibleAlternativeAlignCssPositionProp2 = oppositionPositions[possibleAlternativeAlignCssPositionProp1];\n        const alternativeAlignCssSizeProp = propToCompare[possibleAlternativeAlignCssPositionProp1];\n        const followerOverTargetSize = (followerRect[alternativeAlignCssSizeProp] - targetRect[alternativeAlignCssSizeProp]) / 2;\n        if (\n        // center is not enough\n        (targetRect[possibleAlternativeAlignCssPositionProp1] < followerOverTargetSize) ||\n            (targetRect[possibleAlternativeAlignCssPositionProp2] < followerOverTargetSize)) {\n            // alternative 2 position's space is larger\n            if (targetRect[possibleAlternativeAlignCssPositionProp1] > targetRect[possibleAlternativeAlignCssPositionProp2]) {\n                properAlign = cssPositionToOppositeAlign[possibleAlternativeAlignCssPositionProp1];\n            }\n            else {\n                // alternative 1 position's space is larger\n                properAlign = cssPositionToOppositeAlign[possibleAlternativeAlignCssPositionProp2];\n            }\n            // TODO: fix it\n            // deriveOffset(alternativeAlignCssSizeProp, possibleAlternativeAlignCssPositionProp1, offsetVertically)\n        }\n    }\n    let properPosition = position;\n    if (\n    // space is not enough\n    targetRect[position] < followerRect[propToCompare[position]] &&\n        // opposite position's space is larger\n        targetRect[position] < targetRect[oppositionPositions[position]]) {\n        properPosition = oppositionPositions[position];\n    }\n    return {\n        placement: properAlign !== 'center' ? `${properPosition}-${properAlign}` : properPosition,\n        left,\n        top\n    };\n}\nexport function getProperTransformOrigin(placement, overlap) {\n    if (overlap)\n        return overlapTransformOrigin[placement];\n    return transformOrigins[placement];\n}\n// ------------\n// |  offset  |\n// |          |\n// | [target] |\n// |          |\n// ------------\n// TODO: refactor it to remove dup logic\nexport function getOffset(placement, offsetRect, targetRect, offsetTopToStandardPlacement, offsetLeftToStandardPlacement, overlap) {\n    if (overlap) {\n        switch (placement) {\n            case 'bottom-start':\n                return {\n                    top: `${Math.round(targetRect.top - offsetRect.top + targetRect.height)}px`,\n                    left: `${Math.round(targetRect.left - offsetRect.left)}px`,\n                    transform: 'translateY(-100%)'\n                };\n            case 'bottom-end':\n                return {\n                    top: `${Math.round(targetRect.top - offsetRect.top + targetRect.height)}px`,\n                    left: `${Math.round(targetRect.left - offsetRect.left + targetRect.width)}px`,\n                    transform: 'translateX(-100%) translateY(-100%)'\n                };\n            case 'top-start':\n                return {\n                    top: `${Math.round(targetRect.top - offsetRect.top)}px`,\n                    left: `${Math.round(targetRect.left - offsetRect.left)}px`,\n                    transform: ''\n                };\n            case 'top-end':\n                return {\n                    top: `${Math.round(targetRect.top - offsetRect.top)}px`,\n                    left: `${Math.round(targetRect.left - offsetRect.left + targetRect.width)}px`,\n                    transform: 'translateX(-100%)'\n                };\n            case 'right-start':\n                return {\n                    top: `${Math.round(targetRect.top - offsetRect.top)}px`,\n                    left: `${Math.round(targetRect.left - offsetRect.left + targetRect.width)}px`,\n                    transform: 'translateX(-100%)'\n                };\n            case 'right-end':\n                return {\n                    top: `${Math.round(targetRect.top - offsetRect.top + targetRect.height)}px`,\n                    left: `${Math.round(targetRect.left - offsetRect.left + targetRect.width)}px`,\n                    transform: 'translateX(-100%) translateY(-100%)'\n                };\n            case 'left-start':\n                return {\n                    top: `${Math.round(targetRect.top - offsetRect.top)}px`,\n                    left: `${Math.round(targetRect.left - offsetRect.left)}px`,\n                    transform: ''\n                };\n            case 'left-end':\n                return {\n                    top: `${Math.round(targetRect.top - offsetRect.top + targetRect.height)}px`,\n                    left: `${Math.round(targetRect.left - offsetRect.left)}px`,\n                    transform: 'translateY(-100%)'\n                };\n            case 'top':\n                return {\n                    top: `${Math.round(targetRect.top - offsetRect.top)}px`,\n                    left: `${Math.round(targetRect.left - offsetRect.left + targetRect.width / 2)}px`,\n                    transform: 'translateX(-50%)'\n                };\n            case 'right':\n                return {\n                    top: `${Math.round(targetRect.top - offsetRect.top + targetRect.height / 2)}px`,\n                    left: `${Math.round(targetRect.left - offsetRect.left + targetRect.width)}px`,\n                    transform: 'translateX(-100%) translateY(-50%)'\n                };\n            case 'left':\n                return {\n                    top: `${Math.round(targetRect.top - offsetRect.top + targetRect.height / 2)}px`,\n                    left: `${Math.round(targetRect.left - offsetRect.left)}px`,\n                    transform: 'translateY(-50%)'\n                };\n            case 'bottom':\n            default:\n                return {\n                    top: `${Math.round(targetRect.top - offsetRect.top + targetRect.height)}px`,\n                    left: `${Math.round(targetRect.left - offsetRect.left + targetRect.width / 2)}px`,\n                    transform: 'translateX(-50%) translateY(-100%)'\n                };\n        }\n    }\n    switch (placement) {\n        case 'bottom-start':\n            return {\n                top: `${Math.round(targetRect.top - offsetRect.top + targetRect.height + offsetTopToStandardPlacement)}px`,\n                left: `${Math.round(targetRect.left - offsetRect.left + offsetLeftToStandardPlacement)}px`,\n                transform: ''\n            };\n        case 'bottom-end':\n            return {\n                top: `${Math.round(targetRect.top - offsetRect.top + targetRect.height + offsetTopToStandardPlacement)}px`,\n                left: `${Math.round(targetRect.left - offsetRect.left + targetRect.width + offsetLeftToStandardPlacement)}px`,\n                transform: 'translateX(-100%)'\n            };\n        case 'top-start':\n            return {\n                top: `${Math.round(targetRect.top - offsetRect.top + offsetTopToStandardPlacement)}px`,\n                left: `${Math.round(targetRect.left - offsetRect.left + offsetLeftToStandardPlacement)}px`,\n                transform: 'translateY(-100%)'\n            };\n        case 'top-end':\n            return {\n                top: `${Math.round(targetRect.top - offsetRect.top + offsetTopToStandardPlacement)}px`,\n                left: `${Math.round(targetRect.left - offsetRect.left + targetRect.width + offsetLeftToStandardPlacement)}px`,\n                transform: 'translateX(-100%) translateY(-100%)'\n            };\n        case 'right-start':\n            return {\n                top: `${Math.round(targetRect.top - offsetRect.top + offsetTopToStandardPlacement)}px`,\n                left: `${Math.round(targetRect.left - offsetRect.left + targetRect.width + offsetLeftToStandardPlacement)}px`,\n                transform: ''\n            };\n        case 'right-end':\n            return {\n                top: `${Math.round(targetRect.top - offsetRect.top + targetRect.height + offsetTopToStandardPlacement)}px`,\n                left: `${Math.round(targetRect.left - offsetRect.left + targetRect.width + offsetLeftToStandardPlacement)}px`,\n                transform: 'translateY(-100%)'\n            };\n        case 'left-start':\n            return {\n                top: `${Math.round(targetRect.top - offsetRect.top + offsetTopToStandardPlacement)}px`,\n                left: `${Math.round(targetRect.left - offsetRect.left + offsetLeftToStandardPlacement)}px`,\n                transform: 'translateX(-100%)'\n            };\n        case 'left-end':\n            return {\n                top: `${Math.round(targetRect.top - offsetRect.top + targetRect.height + offsetTopToStandardPlacement)}px`,\n                left: `${Math.round(targetRect.left - offsetRect.left + offsetLeftToStandardPlacement)}px`,\n                transform: 'translateX(-100%) translateY(-100%)'\n            };\n        case 'top':\n            return {\n                top: `${Math.round(targetRect.top - offsetRect.top + offsetTopToStandardPlacement)}px`,\n                left: `${Math.round(targetRect.left - offsetRect.left + targetRect.width / 2 + offsetLeftToStandardPlacement)}px`,\n                transform: 'translateY(-100%) translateX(-50%)'\n            };\n        case 'right':\n            return {\n                top: `${Math.round(targetRect.top - offsetRect.top + targetRect.height / 2 + offsetTopToStandardPlacement)}px`,\n                left: `${Math.round(targetRect.left - offsetRect.left + targetRect.width + offsetLeftToStandardPlacement)}px`,\n                transform: 'translateY(-50%)'\n            };\n        case 'left':\n            return {\n                top: `${Math.round(targetRect.top - offsetRect.top + targetRect.height / 2 + offsetTopToStandardPlacement)}px`,\n                left: `${Math.round(targetRect.left - offsetRect.left + offsetLeftToStandardPlacement)}px`,\n                transform: 'translateY(-50%) translateX(-100%)'\n            };\n        case 'bottom':\n        default:\n            return {\n                top: `${Math.round(targetRect.top - offsetRect.top + targetRect.height + offsetTopToStandardPlacement)}px`,\n                left: `${Math.round(targetRect.left - offsetRect.left + targetRect.width / 2 + offsetLeftToStandardPlacement)}px`,\n                transform: 'translateX(-50%)'\n            };\n    }\n}\n","/* eslint-disable @typescript-eslint/no-non-null-assertion */\nimport { h, defineComponent, inject, nextTick, watch, toRef, ref, onMounted, onBeforeUnmount, withDirectives } from 'vue';\nimport { zindexable } from 'vdirs';\nimport { useMemo, useIsMounted, onFontsReady } from 'vooks';\nimport { useSsrAdapter } from '@css-render/vue3-ssr';\nimport { c } from '../../shared';\nimport LazyTeleport from '../../lazy-teleport/src/index';\nimport { getPlacementAndOffsetOfFollower, getProperTransformOrigin, getOffset } from './get-placement-style';\nimport { getPointRect, getRect } from './utils';\nconst style = c([\n    c('.v-binder-follower-container', {\n        position: 'absolute',\n        left: '0',\n        right: '0',\n        top: '0',\n        height: '0',\n        pointerEvents: 'none',\n        zIndex: 'auto'\n    }),\n    c('.v-binder-follower-content', {\n        position: 'absolute',\n        zIndex: 'auto'\n    }, [\n        c('> *', {\n            pointerEvents: 'all'\n        })\n    ])\n]);\nexport default defineComponent({\n    name: 'Follower',\n    inheritAttrs: false,\n    props: {\n        show: Boolean,\n        enabled: {\n            type: Boolean,\n            default: undefined\n        },\n        placement: {\n            type: String,\n            default: 'bottom'\n        },\n        syncTrigger: {\n            type: Array,\n            default: ['resize', 'scroll']\n        },\n        to: [String, Object],\n        flip: {\n            type: Boolean,\n            default: true\n        },\n        flipLevel: {\n            type: Number,\n            default: 1 // do not apply offset by default\n        },\n        x: Number,\n        y: Number,\n        width: String,\n        minWidth: String,\n        containerClass: String,\n        teleportDisabled: Boolean,\n        zindexable: {\n            type: Boolean,\n            default: true\n        },\n        zIndex: Number,\n        overlap: Boolean\n    },\n    setup(props) {\n        const VBinder = inject('VBinder');\n        const mergedEnabledRef = useMemo(() => {\n            return props.enabled !== undefined ? props.enabled : props.show;\n        });\n        const followerRef = ref(null);\n        const offsetContainerRef = ref(null);\n        const ensureListeners = () => {\n            const { syncTrigger } = props;\n            if (syncTrigger.includes('scroll')) {\n                VBinder.addScrollListener(syncPosition);\n            }\n            if (syncTrigger.includes('resize')) {\n                VBinder.addResizeListener(syncPosition);\n            }\n        };\n        const removeListeners = () => {\n            VBinder.removeScrollListener(syncPosition);\n            VBinder.removeResizeListener(syncPosition);\n        };\n        onMounted(() => {\n            if (mergedEnabledRef.value) {\n                syncPosition();\n                ensureListeners();\n            }\n        });\n        const ssrAdapter = useSsrAdapter();\n        style.mount({\n            id: 'vueuc/binder',\n            head: true,\n            ssr: ssrAdapter\n        });\n        onBeforeUnmount(() => {\n            removeListeners();\n        });\n        onFontsReady(() => {\n            if (mergedEnabledRef.value) {\n                syncPosition();\n            }\n        });\n        const syncPosition = () => {\n            if (!mergedEnabledRef.value) {\n                return;\n            }\n            const follower = followerRef.value;\n            // sometimes watched props change before its dom is ready\n            // for example: show=false, x=undefined, y=undefined\n            //              show=true,  x=0,         y=0\n            // will cause error\n            // I may optimize the watch start point later\n            if (follower === null)\n                return;\n            const target = VBinder.targetRef;\n            const { x, y, overlap } = props;\n            const targetRect = x !== undefined && y !== undefined\n                ? getPointRect(x, y)\n                : getRect(target);\n            const { width, minWidth, placement, flipLevel, flip } = props;\n            follower.setAttribute('v-placement', placement);\n            if (overlap) {\n                follower.setAttribute('v-overlap', '');\n            }\n            else {\n                follower.removeAttribute('v-overlap');\n            }\n            const { style } = follower;\n            if (width === 'target') {\n                style.width = `${targetRect.width}px`;\n            }\n            else if (width !== undefined) {\n                style.width = width;\n            }\n            else {\n                style.width = '';\n            }\n            if (minWidth === 'target') {\n                style.minWidth = `${targetRect.width}px`;\n            }\n            else if (minWidth !== undefined) {\n                style.minWidth = minWidth;\n            }\n            else {\n                style.minWidth = '';\n            }\n            const followerRect = getRect(follower);\n            const offsetContainerRect = getRect(offsetContainerRef.value);\n            const { left: offsetLeftToStandardPlacement, top: offsetTopToStandardPlacement, placement: properPlacement } = getPlacementAndOffsetOfFollower(placement, targetRect, followerRect, flipLevel, flip, overlap);\n            const properTransformOrigin = getProperTransformOrigin(properPlacement, overlap);\n            const { left, top, transform } = getOffset(properPlacement, offsetContainerRect, targetRect, offsetTopToStandardPlacement, offsetLeftToStandardPlacement, overlap);\n            // we assume that the content size doesn't change after flip,\n            // nor we need to make sync logic more complex\n            follower.setAttribute('v-placement', properPlacement);\n            // TODO: add it\n            // follower.style.setProperty('--v-offset-left', `${Math.round(offsetLeftToStandardPlacement)}px`)\n            // follower.style.setProperty('--v-offset-top', `${Math.round(offsetTopToStandardPlacement)}px`)\n            follower.style.transform = `translateX(${left}) translateY(${top}) ${transform}`;\n            follower.style.transformOrigin = properTransformOrigin;\n        };\n        watch(mergedEnabledRef, (value) => {\n            if (value) {\n                ensureListeners();\n                syncOnNextTick();\n            }\n            else {\n                removeListeners();\n            }\n        });\n        const syncOnNextTick = () => {\n            nextTick()\n                .then(syncPosition)\n                .catch((e) => console.error(e));\n        };\n        ['placement', 'x', 'y', 'flipLevel', 'flip', 'width', 'overlap', 'minWidth'].forEach((prop) => {\n            watch(toRef(props, prop), syncPosition);\n        });\n        ['teleportDisabled'].forEach((prop) => {\n            watch(toRef(props, prop), syncOnNextTick);\n        });\n        watch(toRef(props, 'syncTrigger'), (value) => {\n            if (!value.includes('resize')) {\n                VBinder.removeResizeListener(syncPosition);\n            }\n            else {\n                VBinder.addResizeListener(syncPosition);\n            }\n            if (!value.includes('scroll')) {\n                VBinder.removeScrollListener(syncPosition);\n            }\n            else {\n                VBinder.addScrollListener(syncPosition);\n            }\n        });\n        const isMountedRef = useIsMounted();\n        const mergedToRef = useMemo(() => {\n            const { to } = props;\n            if (to !== undefined)\n                return to;\n            if (isMountedRef.value) {\n                // TODO: find proper container\n                return undefined;\n            }\n            return undefined;\n        });\n        return {\n            VBinder,\n            mergedEnabled: mergedEnabledRef,\n            offsetContainerRef,\n            followerRef,\n            mergedTo: mergedToRef,\n            syncPosition\n        };\n    },\n    render() {\n        return h(LazyTeleport, {\n            show: this.show,\n            to: this.mergedTo,\n            disabled: this.teleportDisabled\n        }, {\n            default: () => {\n                const vNode = h('div', {\n                    class: ['v-binder-follower-container', this.containerClass],\n                    ref: 'offsetContainerRef'\n                }, [\n                    h('div', {\n                        class: 'v-binder-follower-content',\n                        ref: 'followerRef'\n                    }, this.$slots)\n                ]);\n                if (this.zindexable) {\n                    return withDirectives(vNode, [\n                        [\n                            zindexable,\n                            {\n                                enabled: this.mergedEnabled,\n                                zIndex: this.zIndex\n                            }\n                        ]\n                    ]);\n                }\n                return vNode;\n            }\n        });\n    }\n});\n","import { on, off } from 'evtd';\nconst ctxKey = '@@coContext';\nconst clickoutside = {\n    mounted(el, { value }) {\n        el[ctxKey] = {\n            handler: undefined\n        };\n        if (typeof value === 'function') {\n            el[ctxKey].handler = value;\n            on('clickoutside', el, value);\n        }\n    },\n    updated(el, { value }) {\n        const ctx = el[ctxKey];\n        if (typeof value === 'function') {\n            if (ctx.handler) {\n                if (ctx.handler !== value) {\n                    off('clickoutside', el, ctx.handler);\n                    ctx.handler = value;\n                    on('clickoutside', el, value);\n                }\n            }\n            else {\n                el[ctxKey].handler = value;\n                on('clickoutside', el, value);\n            }\n        }\n        else {\n            if (ctx.handler) {\n                off('clickoutside', el, ctx.handler);\n                ctx.handler = undefined;\n            }\n        }\n    },\n    unmounted(el) {\n        const { handler } = el[ctxKey];\n        if (handler) {\n            off('clickoutside', el, handler);\n        }\n        el[ctxKey].handler = undefined;\n    }\n};\nexport default clickoutside;\n","import { on, off } from 'evtd';\nconst ctxKey = '@@mmoContext';\nconst mousemoveoutside = {\n    mounted(el, { value }) {\n        el[ctxKey] = {\n            handler: undefined\n        };\n        if (typeof value === 'function') {\n            el[ctxKey].handler = value;\n            on('mousemoveoutside', el, value);\n        }\n    },\n    updated(el, { value }) {\n        const ctx = el[ctxKey];\n        if (typeof value === 'function') {\n            if (ctx.handler) {\n                if (ctx.handler !== value) {\n                    off('mousemoveoutside', el, ctx.handler);\n                    ctx.handler = value;\n                    on('mousemoveoutside', el, value);\n                }\n            }\n            else {\n                el[ctxKey].handler = value;\n                on('mousemoveoutside', el, value);\n            }\n        }\n        else {\n            if (ctx.handler) {\n                off('mousemoveoutside', el, ctx.handler);\n                ctx.handler = undefined;\n            }\n        }\n    },\n    unmounted(el) {\n        const { handler } = el[ctxKey];\n        if (handler) {\n            off('mousemoveoutside', el, handler);\n        }\n        el[ctxKey].handler = undefined;\n    }\n};\nexport default mousemoveoutside;\n","import { c, cB, cM, cNotM, cE, cCB } from '../../../_utils/cssr';\nconst oppositePlacement = {\n  top: 'bottom',\n  bottom: 'top',\n  left: 'right',\n  right: 'left'\n}; // vars:\n// --bezier\n// --bezier-ease-in\n// --bezier-ease-out\n// --font-size\n// --text-color\n// --color\n// --border-radius\n// --arrow-height\n// --arrow-offset\n// --arrow-offset-vertical\n// --padding\n// --space\n// --space-arrow\n// --divider-color\n\nexport default c([cB('popover', `\n transition:\n box-shadow .3s var(--bezier),\n background-color .3s var(--bezier),\n color .3s var(--bezier);\n transform-origin: inherit;\n position: relative;\n font-size: var(--font-size);\n color: var(--text-color);\n box-shadow: var(--box-shadow);\n `, [// body transition\nc('&.popover-transition-enter-from, &.popover-transition-leave-to', `\n opacity: 0;\n transform: scale(.85);\n `), c('&.popover-transition-enter-to, &.popover-transition-leave-from', `\n transform: scale(1);\n opacity: 1;\n `), c('&.popover-transition-enter-active', `\n transition:\n opacity .15s var(--bezier-ease-out),\n transform .15s var(--bezier-ease-out);\n `), c('&.popover-transition-leave-active', `\n transition:\n opacity .15s var(--bezier-ease-in),\n transform .15s var(--bezier-ease-in);\n `), cNotM('raw', `\n background-color: var(--color);\n border-radius: var(--border-radius);\n `, [cNotM('show-header', 'padding: var(--padding);')]), cE('header', `\n padding: var(--padding);\n border-bottom: 1px solid var(--divider-color);\n transition: border-color .3s var(--bezier);\n `), cE('content', `\n padding: var(--padding);\n `), cB('popover-arrow-wrapper', `\n position: absolute;\n overflow: hidden;\n pointer-events: none;\n `, [cB('popover-arrow', `\n transition: background-color .3s var(--bezier);\n position: absolute;\n display: block;\n width: calc(var(--arrow-height) * 1.414);\n height: calc(var(--arrow-height) * 1.414);\n box-shadow: 0 0 8px 0 rgba(0, 0, 0, .12);\n transform: rotate(45deg);\n background-color: var(--color);\n pointer-events: all;\n `)])]), placementStyle('top-start', `\n top: calc(-0.707 * var(--arrow-height));\n left: var(--arrow-offset);\n `), placementStyle('top', `\n top: calc(-0.707 * var(--arrow-height));\n transform: translateX(calc(-0.707 * var(--arrow-height))) rotate(45deg);\n left: 50%;\n `), placementStyle('top-end', `\n top: calc(-0.707 * var(--arrow-height));\n right: var(--arrow-offset);\n `), placementStyle('bottom-start', `\n bottom: calc(-0.707 * var(--arrow-height));\n left: var(--arrow-offset);\n `), placementStyle('bottom', `\n bottom: calc(-0.707 * var(--arrow-height));\n transform: translateX(calc(-0.707 * var(--arrow-height))) rotate(45deg);\n left: 50%;\n `), placementStyle('bottom-end', `\n bottom: calc(-0.707 * var(--arrow-height));\n right: var(--arrow-offset);\n `), placementStyle('left-start', `\n left: calc(-0.707 * var(--arrow-height));\n top: var(--arrow-offset-vertical);\n `), placementStyle('left', `\n left: calc(-0.707 * var(--arrow-height));\n transform: translateY(calc(-0.707 * var(--arrow-height))) rotate(45deg);\n top: 50%;\n `), placementStyle('left-end', `\n left: calc(-0.707 * var(--arrow-height));\n bottom: var(--arrow-offset-vertical);\n `), placementStyle('right-start', `\n right: calc(-0.707 * var(--arrow-height));\n top: var(--arrow-offset-vertical);\n `), placementStyle('right', `\n right: calc(-0.707 * var(--arrow-height));\n transform: translateY(calc(-0.707 * var(--arrow-height))) rotate(45deg);\n top: 50%;\n `), placementStyle('right-end', `\n right: calc(-0.707 * var(--arrow-height));\n bottom: var(--arrow-offset-vertical);\n `)]);\n\nfunction placementStyle(placement, arrowStyleLiteral) {\n  const position = placement.split('-')[0];\n  const sizeStyle = ['top', 'bottom'].includes(position) ? 'height: var(--space-arrow);' : 'width: var(--space-arrow);';\n  return c(`[v-placement=\"${placement}\"] >`, [cB('popover', `\n margin-${oppositePlacement[position]}: var(--space);\n `, [cM('show-arrow', `\n margin-${oppositePlacement[position]}: var(--space-arrow);\n `), cM('overlap', `\n margin: 0;\n `), cCB('popover-arrow-wrapper', `\n right: 0;\n left: 0;\n top: 0;\n bottom: 0;\n ${position}: 100%;\n ${oppositePlacement[position]}: auto;\n ${sizeStyle}\n `, [cB('popover-arrow', arrowStyleLiteral)])])]);\n}","import { h, vShow, withDirectives, Transition, ref, defineComponent, computed, mergeProps, inject, onBeforeUnmount, watch, toRef, provide, renderSlot, Fragment } from 'vue';\nimport { VFollower } from 'vueuc';\nimport { clickoutside, mousemoveoutside } from 'vdirs';\nimport { useTheme, useConfig } from '../../_mixins';\nimport { formatLength, useAdjustedTo } from '../../_utils';\nimport { popoverLight } from '../styles';\nimport style from './styles/index.cssr';\nimport { popoverBodyInjectionKey } from './interface';\nimport { drawerBodyInjectionKey } from '../../drawer/src/interface';\nimport { modalBodyInjectionKey } from '../../modal/src/interface';\nexport const popoverBodyProps = Object.assign(Object.assign({}, useTheme.props), { to: useAdjustedTo.propTo, show: Boolean, trigger: String, showArrow: Boolean, delay: Number, duration: Number, raw: Boolean, arrowStyle: [String, Object], displayDirective: String, x: Number, y: Number, flip: Boolean, overlap: Boolean, placement: String, width: [Number, String], \n    // private\n    animated: Boolean, onClickoutside: Function, \n    /** @deprecated */\n    minWidth: Number, maxWidth: Number });\nexport const renderArrow = ({ arrowStyle, clsPrefix }) => {\n    return (h(\"div\", { key: \"__popover-arrow__\", class: `${clsPrefix}-popover-arrow-wrapper` },\n        h(\"div\", { class: `${clsPrefix}-popover-arrow`, style: arrowStyle })));\n};\nexport default defineComponent({\n    name: 'PopoverBody',\n    inheritAttrs: false,\n    props: popoverBodyProps,\n    setup(props, { slots, attrs }) {\n        const { namespaceRef, mergedClsPrefixRef } = useConfig(props);\n        const themeRef = useTheme('Popover', 'Popover', style, popoverLight, props, mergedClsPrefixRef);\n        const followerRef = ref(null);\n        const NPopover = inject('NPopover');\n        const bodyRef = ref(null);\n        const followerEnabledRef = ref(props.show);\n        const directivesRef = computed(() => {\n            const { trigger, onClickoutside } = props;\n            const directives = [];\n            const { positionManuallyRef: { value: positionManually } } = NPopover;\n            if (!positionManually) {\n                if (trigger === 'click' && !onClickoutside) {\n                    directives.push([clickoutside, handleClickOutside]);\n                }\n                if (trigger === 'hover') {\n                    directives.push([mousemoveoutside, handleMouseMoveOutside]);\n                }\n            }\n            if (onClickoutside) {\n                directives.push([clickoutside, handleClickOutside]);\n            }\n            if (props.displayDirective === 'show') {\n                directives.push([vShow, props.show]);\n            }\n            return directives;\n        });\n        const styleRef = computed(() => {\n            return [\n                {\n                    width: props.width === 'trigger' ? '' : formatLength(props.width),\n                    maxWidth: formatLength(props.maxWidth),\n                    minWidth: formatLength(props.minWidth)\n                },\n                cssVarsRef.value\n            ];\n        });\n        const cssVarsRef = computed(() => {\n            const { common: { cubicBezierEaseInOut, cubicBezierEaseIn, cubicBezierEaseOut }, self: { space, spaceArrow, padding, fontSize, textColor, dividerColor, color, boxShadow, borderRadius, arrowHeight, arrowOffset, arrowOffsetVertical } } = themeRef.value;\n            return {\n                '--box-shadow': boxShadow,\n                '--bezier': cubicBezierEaseInOut,\n                '--bezier-ease-in': cubicBezierEaseIn,\n                '--bezier-ease-out': cubicBezierEaseOut,\n                '--font-size': fontSize,\n                '--text-color': textColor,\n                '--color': color,\n                '--divider-color': dividerColor,\n                '--border-radius': borderRadius,\n                '--arrow-height': arrowHeight,\n                '--arrow-offset': arrowOffset,\n                '--arrow-offset-vertical': arrowOffsetVertical,\n                '--padding': padding,\n                '--space': space,\n                '--space-arrow': spaceArrow\n            };\n        });\n        NPopover.setBodyInstance({\n            syncPosition\n        });\n        onBeforeUnmount(() => {\n            NPopover.setBodyInstance(null);\n        });\n        watch(toRef(props, 'show'), (value) => {\n            // If no animation, no transition component will be applied to the\n            // component. So we need to trigger follower manaully.\n            if (props.animated)\n                return;\n            if (value) {\n                followerEnabledRef.value = true;\n            }\n            else {\n                followerEnabledRef.value = false;\n            }\n        });\n        function syncPosition() {\n            var _a;\n            // eslint-disable-next-line no-unused-expressions\n            (_a = followerRef.value) === null || _a === void 0 ? void 0 : _a.syncPosition();\n        }\n        function handleMouseEnter(e) {\n            if (props.trigger === 'hover') {\n                NPopover.handleMouseEnter(e);\n            }\n        }\n        function handleMouseLeave(e) {\n            if (props.trigger === 'hover') {\n                NPopover.handleMouseLeave(e);\n            }\n        }\n        function handleMouseMoveOutside(e) {\n            if (props.trigger === 'hover' &&\n                !getTriggerElement().contains(e.target)) {\n                NPopover.handleMouseMoveOutside(e);\n            }\n        }\n        function handleClickOutside(e) {\n            if ((props.trigger === 'click' &&\n                !getTriggerElement().contains(e.target)) ||\n                props.onClickoutside) {\n                NPopover.handleClickOutside(e);\n            }\n        }\n        function getTriggerElement() {\n            return NPopover.getTriggerElement();\n        }\n        provide(popoverBodyInjectionKey, bodyRef);\n        provide(drawerBodyInjectionKey, null);\n        provide(modalBodyInjectionKey, null);\n        function renderContentNode() {\n            let contentNode;\n            const { internalRenderBodyRef: { value: renderBody } } = NPopover;\n            const { value: mergedClsPrefix } = mergedClsPrefixRef;\n            if (!renderBody) {\n                const { value: extraClass } = NPopover.extraClassRef;\n                contentNode = h('div', mergeProps({\n                    class: [\n                        `${mergedClsPrefix}-popover`,\n                        extraClass.map((v) => `${mergedClsPrefix}-${v}`),\n                        {\n                            [`${mergedClsPrefix}-popover--overlap`]: props.overlap,\n                            [`${mergedClsPrefix}-popover--show-arrow`]: props.showArrow,\n                            [`${mergedClsPrefix}-popover--show-header`]: !!slots.header,\n                            [`${mergedClsPrefix}-popover--raw`]: props.raw\n                        }\n                    ],\n                    ref: bodyRef,\n                    style: styleRef.value,\n                    onMouseenter: handleMouseEnter,\n                    onMouseleave: handleMouseLeave\n                }, attrs), [\n                    slots.header ? (h(Fragment, null,\n                        h(\"div\", { class: `${mergedClsPrefix}-popover__header` }, slots.header()),\n                        h(\"div\", { class: `${mergedClsPrefix}-popover__content` }, slots))) : (renderSlot(slots, 'default')),\n                    props.showArrow\n                        ? renderArrow({\n                            arrowStyle: props.arrowStyle,\n                            clsPrefix: mergedClsPrefix\n                        })\n                        : null\n                ]);\n            }\n            else {\n                contentNode = renderBody(\n                // The popover class and overlap class must exists, they will be used\n                // to place the body & transition animation.\n                // Shadow class exists for reuse box-shadow.\n                [\n                    `${mergedClsPrefix}-popover`,\n                    props.overlap && `${mergedClsPrefix}-popover--overlap`\n                ], bodyRef, styleRef.value, handleMouseEnter, handleMouseLeave);\n            }\n            return props.displayDirective === 'show' || props.show\n                ? withDirectives(contentNode, directivesRef.value)\n                : null;\n        }\n        return {\n            namespace: namespaceRef,\n            isMounted: NPopover.isMountedRef,\n            zIndex: NPopover.zIndexRef,\n            followerRef,\n            adjustedTo: useAdjustedTo(props),\n            followerEnabled: followerEnabledRef,\n            renderContentNode\n        };\n    },\n    render() {\n        return h(VFollower, {\n            zIndex: this.zIndex,\n            show: this.show,\n            enabled: this.followerEnabled,\n            to: this.adjustedTo,\n            x: this.x,\n            y: this.y,\n            flip: this.flip,\n            placement: this.placement,\n            containerClass: this.namespace,\n            ref: 'followerRef',\n            overlap: this.overlap,\n            width: this.width === 'trigger' ? 'target' : undefined,\n            teleportDisabled: this.adjustedTo === useAdjustedTo.tdkey\n        }, {\n            default: () => {\n                return this.animated\n                    ? h(Transition, {\n                        name: 'popover-transition',\n                        appear: this.isMounted,\n                        // Don't use watch to enable follower, since the transition may\n                        // make position sync timing very subtle and buggy.\n                        onEnter: () => {\n                            this.followerEnabled = true;\n                        },\n                        onAfterLeave: () => {\n                            this.followerEnabled = false;\n                        }\n                    }, {\n                        default: this.renderContentNode\n                    })\n                    : this.renderContentNode();\n            }\n        });\n    }\n});\n","import { h, ref, computed, createTextVNode, defineComponent, provide, toRef, cloneVNode, watchEffect } from 'vue';\nimport { VBinder, VTarget } from 'vueuc';\nimport { useMergedState, useCompitable, useIsMounted, useMemo } from 'vooks';\nimport { call, keep, getFirstSlotVNode, warnOnce, useAdjustedTo } from '../../_utils';\nimport { useTheme } from '../../_mixins';\nimport NPopoverBody, { popoverBodyProps } from './PopoverBody';\nconst bodyPropKeys = Object.keys(popoverBodyProps);\nconst triggerEventMap = {\n    focus: ['onFocus', 'onBlur'],\n    click: ['onClick'],\n    hover: ['onMouseenter', 'onMouseleave'],\n    manual: [],\n    nested: ['onFocus', 'onBlur', 'onMouseenter', 'onMouseleave', 'onClick']\n};\nfunction appendEvents(vNode, trigger, events) {\n    triggerEventMap[trigger].forEach((eventName) => {\n        if (!vNode.props)\n            vNode.props = {};\n        else {\n            vNode.props = Object.assign({}, vNode.props);\n        }\n        const originalHandler = vNode.props[eventName];\n        const handler = events[eventName];\n        if (!originalHandler)\n            vNode.props[eventName] = handler;\n        else {\n            vNode.props[eventName] = (...args) => {\n                originalHandler(...args);\n                handler(...args);\n            };\n        }\n    });\n}\nconst textVNodeType = createTextVNode('').type;\nexport const popoverBaseProps = {\n    show: {\n        type: Boolean,\n        default: undefined\n    },\n    defaultShow: Boolean,\n    showArrow: {\n        type: Boolean,\n        default: true\n    },\n    trigger: {\n        type: String,\n        default: 'hover'\n    },\n    delay: {\n        type: Number,\n        default: 100\n    },\n    duration: {\n        type: Number,\n        default: 100\n    },\n    raw: Boolean,\n    placement: {\n        type: String,\n        default: 'top'\n    },\n    x: Number,\n    y: Number,\n    disabled: Boolean,\n    getDisabled: Function,\n    displayDirective: {\n        type: String,\n        default: 'if'\n    },\n    arrowStyle: [String, Object],\n    flip: {\n        type: Boolean,\n        default: true\n    },\n    animated: {\n        type: Boolean,\n        default: true\n    },\n    width: {\n        type: [Number, String],\n        default: undefined\n    },\n    overlap: Boolean,\n    internalExtraClass: {\n        type: Array,\n        default: () => []\n    },\n    onClickoutside: Function,\n    // events\n    'onUpdate:show': [Function, Array],\n    onUpdateShow: [Function, Array],\n    zIndex: Number,\n    to: useAdjustedTo.propTo,\n    internalSyncTargetWithParent: Boolean,\n    internalInheritedEventHandlers: {\n        type: Array,\n        default: () => []\n    },\n    /** @deprecated */\n    onShow: [Function, Array],\n    /** @deprecated */\n    onHide: [Function, Array],\n    /** @deprecated */\n    arrow: {\n        type: Boolean,\n        default: undefined\n    },\n    /** @deprecated */\n    minWidth: Number,\n    /** @deprecated */\n    maxWidth: Number\n};\nconst popoverProps = Object.assign(Object.assign(Object.assign({}, useTheme.props), popoverBaseProps), { internalRenderBody: Function });\nexport default defineComponent({\n    name: 'Popover',\n    inheritAttrs: false,\n    props: popoverProps,\n    __popover__: true,\n    setup(props) {\n        if (process.env.NODE_ENV !== 'production') {\n            watchEffect(() => {\n                if (props.minWidth !== undefined) {\n                    warnOnce('popover', '`max-width` is deprecated, please use `style` instead.');\n                }\n                if (props.arrow !== undefined) {\n                    warnOnce('popover', '`arrow` is deprecated, please use `showArrow` instead.');\n                }\n                if (props.onHide !== undefined) {\n                    warnOnce('popover', '`on-hide` is deprecated, please use `on-update:show` instead.');\n                }\n                if (props.onShow !== undefined) {\n                    warnOnce('popover', '`on-show` is deprecated, please use `on-update:show` instead.');\n                }\n            });\n        }\n        const isMountedRef = useIsMounted();\n        const binderInstRef = ref(null);\n        // setup show\n        const controlledShowRef = computed(() => props.show);\n        const uncontrolledShowRef = ref(props.defaultShow);\n        const mergedShowWithoutDisabledRef = useMergedState(controlledShowRef, uncontrolledShowRef);\n        const mergedShowConsideringDisabledPropRef = useMemo(() => {\n            if (props.disabled)\n                return false;\n            return mergedShowWithoutDisabledRef.value;\n        });\n        const getMergedDisabled = () => {\n            if (props.disabled)\n                return true;\n            const { getDisabled } = props;\n            if (getDisabled === null || getDisabled === void 0 ? void 0 : getDisabled())\n                return true;\n            return false;\n        };\n        const getMergedShow = () => {\n            if (getMergedDisabled())\n                return false;\n            return mergedShowWithoutDisabledRef.value;\n        };\n        // setup show-arrow\n        const compatibleShowArrowRef = useCompitable(props, ['arrow', 'showArrow']);\n        const mergedShowArrowRef = computed(() => {\n            if (props.overlap)\n                return false;\n            return compatibleShowArrowRef.value;\n        });\n        // bodyInstance\n        let bodyInstance = null;\n        const showTimerIdRef = ref(null);\n        const hideTimerIdRef = ref(null);\n        const positionManuallyRef = useMemo(() => {\n            return props.x !== undefined && props.y !== undefined;\n        });\n        // methods\n        function doUpdateShow(value) {\n            const { 'onUpdate:show': _onUpdateShow, onUpdateShow, onShow, onHide } = props;\n            uncontrolledShowRef.value = value;\n            if (_onUpdateShow) {\n                call(_onUpdateShow, value);\n            }\n            if (onUpdateShow) {\n                call(onUpdateShow, value);\n            }\n            if (value && onShow) {\n                call(onShow, true);\n            }\n            if (value && onHide) {\n                call(onHide, false);\n            }\n        }\n        function syncPosition() {\n            if (bodyInstance) {\n                bodyInstance.syncPosition();\n            }\n        }\n        function clearShowTimer() {\n            const { value: showTimerId } = showTimerIdRef;\n            if (showTimerId) {\n                window.clearTimeout(showTimerId);\n                showTimerIdRef.value = null;\n            }\n        }\n        function clearHideTimer() {\n            const { value: hideTimerId } = hideTimerIdRef;\n            if (hideTimerId) {\n                window.clearTimeout(hideTimerId);\n                hideTimerIdRef.value = null;\n            }\n        }\n        function handleFocus() {\n            const mergedDisabled = getMergedDisabled();\n            if (props.trigger === 'focus' && !mergedDisabled) {\n                if (getMergedShow())\n                    return;\n                doUpdateShow(true);\n            }\n        }\n        function handleBlur() {\n            const mergedDisabled = getMergedDisabled();\n            if (props.trigger === 'focus' && !mergedDisabled) {\n                if (!getMergedShow())\n                    return;\n                doUpdateShow(false);\n            }\n        }\n        function handleMouseEnter() {\n            const mergedDisabled = getMergedDisabled();\n            if (props.trigger === 'hover' && !mergedDisabled) {\n                clearHideTimer();\n                if (showTimerIdRef.value !== null)\n                    return;\n                if (getMergedShow())\n                    return;\n                const delayCallback = () => {\n                    doUpdateShow(true);\n                    showTimerIdRef.value = null;\n                };\n                const { delay } = props;\n                if (delay === 0) {\n                    delayCallback();\n                }\n                else {\n                    showTimerIdRef.value = window.setTimeout(delayCallback, delay);\n                }\n            }\n        }\n        function handleMouseLeave() {\n            const mergedDisabled = getMergedDisabled();\n            if (props.trigger === 'hover' && !mergedDisabled) {\n                clearShowTimer();\n                if (hideTimerIdRef.value !== null)\n                    return;\n                if (!getMergedShow())\n                    return;\n                const delayedCallback = () => {\n                    doUpdateShow(false);\n                    hideTimerIdRef.value = null;\n                };\n                const { duration } = props;\n                if (duration === 0) {\n                    delayedCallback();\n                }\n                else {\n                    hideTimerIdRef.value = window.setTimeout(delayedCallback, duration);\n                }\n            }\n        }\n        // will be called in popover-content\n        function handleMouseMoveOutside() {\n            handleMouseLeave();\n        }\n        // will be called in popover-content\n        function handleClickOutside(e) {\n            var _a;\n            if (!getMergedShow())\n                return;\n            if (props.trigger === 'click') {\n                clearShowTimer();\n                clearHideTimer();\n                doUpdateShow(false);\n            }\n            (_a = props.onClickoutside) === null || _a === void 0 ? void 0 : _a.call(props, e);\n        }\n        function handleClick() {\n            if (props.trigger === 'click' && !getMergedDisabled()) {\n                clearShowTimer();\n                clearHideTimer();\n                const nextShow = !getMergedShow();\n                doUpdateShow(nextShow);\n            }\n        }\n        function setShow(value) {\n            uncontrolledShowRef.value = value;\n        }\n        function getTriggerElement() {\n            var _a;\n            return (_a = binderInstRef.value) === null || _a === void 0 ? void 0 : _a.targetRef;\n        }\n        function setBodyInstance(value) {\n            bodyInstance = value;\n        }\n        provide('NPopover', {\n            getTriggerElement,\n            handleMouseEnter,\n            handleMouseLeave,\n            handleClickOutside,\n            handleMouseMoveOutside,\n            setBodyInstance,\n            positionManuallyRef: positionManuallyRef,\n            isMountedRef: isMountedRef,\n            zIndexRef: toRef(props, 'zIndex'),\n            extraClassRef: toRef(props, 'internalExtraClass'),\n            internalRenderBodyRef: toRef(props, 'internalRenderBody')\n        });\n        return {\n            binderInstRef,\n            positionManually: positionManuallyRef,\n            mergedShowConsideringDisabledProp: mergedShowConsideringDisabledPropRef,\n            // if to show popover body\n            uncontrolledShow: uncontrolledShowRef,\n            mergedShowArrow: mergedShowArrowRef,\n            getMergedShow,\n            setShow,\n            handleClick,\n            handleMouseEnter,\n            handleMouseLeave,\n            handleFocus,\n            handleBlur,\n            syncPosition\n        };\n    },\n    render() {\n        var _a;\n        const { positionManually, $slots: slots } = this;\n        let triggerVNode;\n        let popoverInside = false;\n        if (!positionManually) {\n            if (slots.activator) {\n                triggerVNode = getFirstSlotVNode(slots, 'activator');\n            }\n            else {\n                triggerVNode = getFirstSlotVNode(slots, 'trigger');\n            }\n            if (triggerVNode) {\n                triggerVNode = cloneVNode(triggerVNode);\n                triggerVNode =\n                    triggerVNode.type === textVNodeType\n                        ? h('span', [triggerVNode])\n                        : triggerVNode;\n                const handlers = {\n                    onClick: this.handleClick,\n                    onMouseenter: this.handleMouseEnter,\n                    onMouseleave: this.handleMouseLeave,\n                    onFocus: this.handleFocus,\n                    onBlur: this.handleBlur\n                };\n                if ((_a = triggerVNode.type) === null || _a === void 0 ? void 0 : _a.__popover__) {\n                    popoverInside = true;\n                    // We assume that there's no DOM event handlers on popover element\n                    if (!triggerVNode.props) {\n                        triggerVNode.props = {\n                            internalSyncTargetWithParent: true,\n                            internalInheritedEventHandlers: []\n                        };\n                    }\n                    triggerVNode.props.internalSyncTargetWithParent = true;\n                    if (!triggerVNode.props.internalInheritedEventHandlers) {\n                        triggerVNode.props.internalInheritedEventHandlers = [handlers];\n                    }\n                    else {\n                        triggerVNode.props.internalInheritedEventHandlers = [\n                            handlers,\n                            ...triggerVNode.props.internalInheritedEventHandlers\n                        ];\n                    }\n                }\n                else {\n                    const { internalInheritedEventHandlers } = this;\n                    const ascendantAndCurrentHandlers = [\n                        handlers,\n                        ...internalInheritedEventHandlers\n                    ];\n                    const mergedHandlers = {\n                        onBlur: (e) => {\n                            ascendantAndCurrentHandlers.forEach((_handlers) => {\n                                _handlers.onBlur(e);\n                            });\n                        },\n                        onFocus: (e) => {\n                            ascendantAndCurrentHandlers.forEach((_handlers) => {\n                                _handlers.onFocus(e);\n                            });\n                        },\n                        onClick: (e) => {\n                            ascendantAndCurrentHandlers.forEach((_handlers) => {\n                                _handlers.onClick(e);\n                            });\n                        },\n                        onMouseenter: (e) => {\n                            ascendantAndCurrentHandlers.forEach((_handlers) => {\n                                _handlers.onMouseenter(e);\n                            });\n                        },\n                        onMouseleave: (e) => {\n                            ascendantAndCurrentHandlers.forEach((_handlers) => {\n                                _handlers.onMouseleave(e);\n                            });\n                        }\n                    };\n                    appendEvents(triggerVNode, internalInheritedEventHandlers\n                        ? 'nested'\n                        : positionManually\n                            ? 'manual'\n                            : this.trigger, mergedHandlers);\n                }\n            }\n        }\n        return (h(VBinder, { ref: \"binderInstRef\", syncTarget: !popoverInside, syncTargetWithParent: this.internalSyncTargetWithParent }, {\n            default: () => {\n                // We need to subscribe it. Sometimes rerender won't ge triggered.\n                // `mergedShowConsideringDisabledProp` is not the final disabled status.\n                // In ellpisis it's dynamic.\n                void this.mergedShowConsideringDisabledProp;\n                const mergedShow = this.getMergedShow();\n                return [\n                    positionManually\n                        ? null\n                        : h(VTarget, null, {\n                            default: () => triggerVNode\n                        }),\n                    h(NPopoverBody, keep(this.$props, bodyPropKeys, Object.assign(Object.assign({}, this.$attrs), { showArrow: this.mergedShowArrow, show: mergedShow })), slots)\n                ];\n            }\n        }));\n    }\n});\n","export function createRefSetter(ref) {\n    return (inst) => {\n        if (inst) {\n            ref.value = inst.$el;\n        }\n        else {\n            ref.value = null;\n        }\n    };\n}\n","import { h, defineComponent } from 'vue';\nexport default defineComponent({\n    name: 'ChevronRight',\n    render() {\n        return (h(\"svg\", { viewBox: \"0 0 16 16\", fill: \"none\", xmlns: \"http://www.w3.org/2000/svg\" },\n            h(\"path\", { d: \"M5.64645 3.14645C5.45118 3.34171 5.45118 3.65829 5.64645 3.85355L9.79289 8L5.64645 12.1464C5.45118 12.3417 5.45118 12.6583 5.64645 12.8536C5.84171 13.0488 6.15829 13.0488 6.35355 12.8536L10.8536 8.35355C11.0488 8.15829 11.0488 7.84171 10.8536 7.64645L6.35355 3.14645C6.15829 2.95118 5.84171 2.95118 5.64645 3.14645Z\", fill: \"currentColor\" })));\n    }\n});\n","export function isSubmenuNode(rawNode, childrenField) {\n    return (rawNode.type === 'submenu' ||\n        (rawNode.type === undefined && rawNode[childrenField] !== undefined));\n}\nexport function isGroupNode(rawNode) {\n    return rawNode.type === 'group';\n}\nexport function isDividerNode(rawNode) {\n    return rawNode.type === 'divider';\n}\nexport function isRenderNode(rawNode) {\n    return rawNode.type === 'render';\n}\n","export function happensIn(e, dataSetPropName) {\n    let { target } = e;\n    while (target) {\n        if (target.dataset) {\n            if (target.dataset[dataSetPropName] !== undefined)\n                return true;\n        }\n        target = target.parentElement;\n    }\n    return false;\n}\n","import { h, computed, inject, ref, Transition, defineComponent, provide, mergeProps } from 'vue';\nimport { VBinder, VTarget, VFollower } from 'vueuc';\nimport { useMemo } from 'vooks';\nimport { ChevronRightIcon } from '../../_internal/icons';\nimport { render, useDeferredTrue } from '../../_utils';\nimport { NIcon } from '../../icon';\nimport NDropdownMenu, { dropdownMenuInjectionKey } from './DropdownMenu';\nimport { dropdownInjectionKey } from './Dropdown';\nimport { isSubmenuNode } from './utils';\nimport { happensIn } from 'seemly';\nconst dropdownOptionInjectionKey = Symbol('dropdown-option');\nexport default defineComponent({\n    name: 'DropdownOption',\n    props: {\n        clsPrefix: {\n            type: String,\n            required: true\n        },\n        tmNode: {\n            type: Object,\n            required: true\n        },\n        parentKey: {\n            type: [String, Number],\n            default: null\n        },\n        placement: {\n            type: String,\n            default: 'right-start'\n        },\n        props: Object\n    },\n    setup(props) {\n        // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n        const NDropdown = inject(dropdownInjectionKey);\n        const { hoverKeyRef, keyboardKeyRef, lastToggledSubmenuKeyRef, pendingKeyPathRef, activeKeyPathRef, animatedRef, mergedShowRef, renderLabelRef, renderIconRef, labelFieldRef, childrenFieldRef } = NDropdown;\n        const NDropdownOption = inject(dropdownOptionInjectionKey, null);\n        // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n        const NDropdownMenu = inject(dropdownMenuInjectionKey);\n        const rawNodeRef = computed(() => props.tmNode.rawNode);\n        const hasSubmenuRef = computed(() => {\n            const { value: childrenField } = childrenFieldRef;\n            return isSubmenuNode(props.tmNode.rawNode, childrenField);\n        });\n        const mergedDisabledRef = computed(() => {\n            const { disabled } = props.tmNode;\n            return disabled;\n        });\n        const showSubmenuRef = computed(() => {\n            if (!hasSubmenuRef.value)\n                return false;\n            const { key, disabled } = props.tmNode;\n            if (disabled)\n                return false;\n            const { value: hoverKey } = hoverKeyRef;\n            const { value: keyboardKey } = keyboardKeyRef;\n            const { value: lastToggledSubmenuKey } = lastToggledSubmenuKeyRef;\n            const { value: pendingKeyPath } = pendingKeyPathRef;\n            if (hoverKey !== null)\n                return pendingKeyPath.includes(key);\n            if (keyboardKey !== null) {\n                return (pendingKeyPath.includes(key) &&\n                    pendingKeyPath[pendingKeyPath.length - 1] !== key);\n            }\n            if (lastToggledSubmenuKey !== null)\n                return pendingKeyPath.includes(key);\n            return false;\n        });\n        const shouldDelayRef = computed(() => {\n            return keyboardKeyRef.value === null && !animatedRef.value;\n        });\n        const deferredShowSubmenuRef = useDeferredTrue(showSubmenuRef, 300, shouldDelayRef);\n        const parentEnteringSubmenuRef = computed(() => {\n            return !!(NDropdownOption === null || NDropdownOption === void 0 ? void 0 : NDropdownOption.enteringSubmenuRef.value);\n        });\n        const enteringSubmenuRef = ref(false);\n        provide(dropdownOptionInjectionKey, {\n            enteringSubmenuRef\n        });\n        // methods\n        function handleSubmenuBeforeEnter() {\n            enteringSubmenuRef.value = true;\n        }\n        function handleSubmenuAfterEnter() {\n            enteringSubmenuRef.value = false;\n        }\n        function handleMouseEnter() {\n            const { parentKey, tmNode } = props;\n            if (!mergedShowRef.value)\n                return;\n            lastToggledSubmenuKeyRef.value = parentKey;\n            keyboardKeyRef.value = null;\n            hoverKeyRef.value = tmNode.key;\n        }\n        function handleMouseMove() {\n            const { tmNode } = props;\n            if (!mergedShowRef.value)\n                return;\n            if (hoverKeyRef.value === tmNode.key)\n                return;\n            handleMouseEnter();\n        }\n        function handleMouseLeave(e) {\n            if (!mergedShowRef.value)\n                return;\n            const { relatedTarget } = e;\n            if (relatedTarget &&\n                !happensIn({ target: relatedTarget }, 'dropdownOption')) {\n                hoverKeyRef.value = null;\n            }\n        }\n        function handleClick() {\n            const { value: hasSubmenu } = hasSubmenuRef;\n            const { tmNode } = props;\n            if (!mergedShowRef.value)\n                return;\n            if (!hasSubmenu && !tmNode.disabled) {\n                NDropdown.doSelect(tmNode.key, tmNode.rawNode);\n                NDropdown.doUpdateShow(false);\n            }\n        }\n        return {\n            labelField: labelFieldRef,\n            renderLabel: renderLabelRef,\n            renderIcon: renderIconRef,\n            siblingHasIcon: NDropdownMenu.showIconRef,\n            siblingHasSubmenu: NDropdownMenu.hasSubmenuRef,\n            animated: animatedRef,\n            mergedShowSubmenu: computed(() => {\n                return deferredShowSubmenuRef.value && !parentEnteringSubmenuRef.value;\n            }),\n            rawNode: rawNodeRef,\n            hasSubmenu: hasSubmenuRef,\n            pending: useMemo(() => {\n                const { value: pendingKeyPath } = pendingKeyPathRef;\n                const { key } = props.tmNode;\n                return pendingKeyPath.includes(key);\n            }),\n            childActive: useMemo(() => {\n                const { value: activeKeyPath } = activeKeyPathRef;\n                const { key } = props.tmNode;\n                const index = activeKeyPath.findIndex((k) => key === k);\n                if (index === -1)\n                    return false;\n                return index < activeKeyPath.length - 1;\n            }),\n            active: useMemo(() => {\n                const { value: activeKeyPath } = activeKeyPathRef;\n                const { key } = props.tmNode;\n                const index = activeKeyPath.findIndex((k) => key === k);\n                if (index === -1)\n                    return false;\n                return index === activeKeyPath.length - 1;\n            }),\n            mergedDisabled: mergedDisabledRef,\n            handleClick,\n            handleMouseMove,\n            handleMouseEnter,\n            handleMouseLeave,\n            handleSubmenuBeforeEnter,\n            handleSubmenuAfterEnter\n        };\n    },\n    render() {\n        var _a;\n        const { animated, rawNode, mergedShowSubmenu, clsPrefix, siblingHasIcon, siblingHasSubmenu, renderLabel, renderIcon, props } = this;\n        const submenuVNode = mergedShowSubmenu ? (h(NDropdownMenu, { clsPrefix: clsPrefix, tmNodes: this.tmNode.children, parentKey: this.tmNode.key })) : null;\n        const builtinProps = {\n            class: [\n                `${clsPrefix}-dropdown-option-body`,\n                this.pending && `${clsPrefix}-dropdown-option-body--pending`,\n                this.active && `${clsPrefix}-dropdown-option-body--active`,\n                this.childActive && `${clsPrefix}-dropdown-option-body--child-active`,\n                this.mergedDisabled && `${clsPrefix}-dropdown-option-body--disabled`\n            ],\n            onMousemove: this.handleMouseMove,\n            onMouseenter: this.handleMouseEnter,\n            onMouseleave: this.handleMouseLeave,\n            onClick: this.handleClick\n        };\n        return (h(\"div\", { class: `${clsPrefix}-dropdown-option` },\n            h('div', mergeProps(builtinProps, props), [\n                h(\"div\", { \"data-dropdown-option\": true, class: [\n                        `${clsPrefix}-dropdown-option-body__prefix`,\n                        siblingHasIcon &&\n                            `${clsPrefix}-dropdown-option-body__prefix--show-icon`\n                    ] }, [renderIcon ? renderIcon(rawNode) : render(rawNode.icon)]),\n                h(\"div\", { \"data-dropdown-option\": true, class: `${clsPrefix}-dropdown-option-body__label` }, renderLabel\n                    ? renderLabel(rawNode)\n                    : render((_a = rawNode[this.labelField]) !== null && _a !== void 0 ? _a : rawNode.title)),\n                h(\"div\", { \"data-dropdown-option\": true, class: [\n                        `${clsPrefix}-dropdown-option-body__suffix`,\n                        siblingHasSubmenu &&\n                            `${clsPrefix}-dropdown-option-body__suffix--has-submenu`\n                    ] }, this.hasSubmenu ? (h(NIcon, null, {\n                    default: () => h(ChevronRightIcon, null)\n                })) : null)\n            ]),\n            this.hasSubmenu ? (h(VBinder, null, {\n                default: () => [\n                    h(VTarget, null, {\n                        default: () => (h(\"div\", { class: `${clsPrefix}-dropdown-offset-container` },\n                            h(VFollower, { show: this.mergedShowSubmenu, placement: this.placement, teleportDisabled: true }, {\n                                default: () => {\n                                    return (h(\"div\", { class: `${clsPrefix}-dropdown-menu-wrapper` }, animated ? (h(Transition, { onBeforeEnter: this.handleSubmenuBeforeEnter, onAfterEnter: this.handleSubmenuAfterEnter, name: \"fade-in-scale-up-transition\", appear: true }, {\n                                        default: () => submenuVNode\n                                    })) : (submenuVNode)));\n                                }\n                            })))\n                    })\n                ]\n            })) : null));\n    }\n});\n","import { h, defineComponent } from 'vue';\nexport default defineComponent({\n    name: 'DropdownDivider',\n    props: {\n        clsPrefix: {\n            type: String,\n            required: true\n        }\n    },\n    render() {\n        return h(\"div\", { class: `${this.clsPrefix}-dropdown-divider` });\n    }\n});\n","import { defineComponent, h, inject } from 'vue';\nimport { render } from '../../_utils';\nimport { dropdownInjectionKey } from './Dropdown';\nimport { dropdownMenuInjectionKey } from './DropdownMenu';\nexport default defineComponent({\n    name: 'DropdownGroupHeader',\n    props: {\n        clsPrefix: {\n            type: String,\n            required: true\n        },\n        tmNode: {\n            type: Object,\n            required: true\n        }\n    },\n    setup() {\n        const { showIconRef, hasSubmenuRef\n        // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n         } = inject(dropdownMenuInjectionKey);\n        // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n        const { renderLabelRef, labelFieldRef } = inject(dropdownInjectionKey);\n        return {\n            labelField: labelFieldRef,\n            showIcon: showIconRef,\n            hasSubmenu: hasSubmenuRef,\n            renderLabel: renderLabelRef\n        };\n    },\n    render() {\n        var _a;\n        const { clsPrefix, hasSubmenu, showIcon, renderLabel } = this;\n        const { rawNode } = this.tmNode;\n        return (h(\"div\", { class: `${clsPrefix}-dropdown-option` },\n            h(\"div\", { class: `${clsPrefix}-dropdown-option-body ${clsPrefix}-dropdown-option-body--group` },\n                h(\"div\", { \"data-dropdown-option\": true, class: [\n                        `${clsPrefix}-dropdown-option-body__prefix`,\n                        showIcon && `${clsPrefix}-dropdown-option-body__prefix--show-icon`\n                    ] }, render(rawNode.icon)),\n                h(\"div\", { class: `${clsPrefix}-dropdown-option-body__label`, \"data-dropdown-option\": true }, renderLabel\n                    ? renderLabel(rawNode)\n                    : render((_a = rawNode.title) !== null && _a !== void 0 ? _a : rawNode[this.labelField])),\n                h(\"div\", { class: [\n                        `${clsPrefix}-dropdown-option-body__suffix`,\n                        hasSubmenu &&\n                            `${clsPrefix}-dropdown-option-body__suffix--has-submenu`\n                    ], \"data-dropdown-option\": true }))));\n    }\n});\n","import { defineComponent, Fragment, h } from 'vue';\nimport { warn } from '../../_utils';\nimport NDropdownOption from './DropdownOption';\nimport NDropdownDivider from './DropdownDivider';\nimport NDropdownGroupHeader from './DropdownGroupHeader';\nimport { isDividerNode } from './utils';\nexport default defineComponent({\n    name: 'NDropdownGroup',\n    props: {\n        clsPrefix: {\n            type: String,\n            required: true\n        },\n        tmNode: {\n            type: Object,\n            required: true\n        },\n        parentKey: {\n            type: [String, Number],\n            default: null\n        }\n    },\n    render() {\n        const { tmNode, parentKey, clsPrefix } = this;\n        const { children } = tmNode;\n        return (h(Fragment, null,\n            h(NDropdownGroupHeader, { clsPrefix: clsPrefix, tmNode: tmNode, key: tmNode.key }), children === null || children === void 0 ? void 0 :\n            children.map((child) => {\n                if (isDividerNode(child.rawNode)) {\n                    return h(NDropdownDivider, {\n                        clsPrefix,\n                        key: child.key\n                    });\n                }\n                if (child.isGroup) {\n                    warn('dropdown', '`group` node is not allowed to be put in `group` node.');\n                    return null;\n                }\n                return (h(NDropdownOption, { clsPrefix: clsPrefix, tmNode: child, parentKey: parentKey, key: child.key }));\n            })));\n    }\n});\n","import { h, defineComponent } from 'vue';\nexport default defineComponent({\n    name: 'DropdownRenderOption',\n    props: {\n        tmNode: {\n            type: Object,\n            required: true\n        }\n    },\n    render() {\n        const { rawNode: { render, props } } = this.tmNode;\n        return h('div', props, [render === null || render === void 0 ? void 0 : render()]);\n    }\n});\n","import { computed, defineComponent, h, inject, provide } from 'vue';\nimport { renderArrow } from '../../popover/src/PopoverBody';\nimport NDropdownOption from './DropdownOption';\nimport NDropdownDivider from './DropdownDivider';\nimport NDropdownGroup from './DropdownGroup';\nimport NDropdownRenderOption from './DropdownRenderOption';\nimport { isSubmenuNode, isGroupNode, isDividerNode, isRenderNode } from './utils';\nimport { dropdownInjectionKey } from './Dropdown';\nexport const dropdownMenuInjectionKey = Symbol('dropdownMenu');\nexport default defineComponent({\n    name: 'DropdownMenu',\n    props: {\n        showArrow: Boolean,\n        arrowStyle: [String, Object],\n        clsPrefix: {\n            type: String,\n            required: true\n        },\n        tmNodes: {\n            type: Array,\n            default: () => []\n        },\n        parentKey: {\n            type: [String, Number],\n            default: null\n        }\n    },\n    setup(props) {\n        // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n        const { renderIconRef, childrenFieldRef } = inject(dropdownInjectionKey);\n        provide(dropdownMenuInjectionKey, {\n            showIconRef: computed(() => {\n                const renderIcon = renderIconRef.value;\n                return props.tmNodes.some((tmNode) => {\n                    var _a;\n                    if (tmNode.isGroup) {\n                        return (_a = tmNode.children) === null || _a === void 0 ? void 0 : _a.some(({ rawNode: rawChild }) => renderIcon ? renderIcon(rawChild) : rawChild.icon);\n                    }\n                    const { rawNode } = tmNode;\n                    return renderIcon ? renderIcon(rawNode) : rawNode.icon;\n                });\n            }),\n            hasSubmenuRef: computed(() => {\n                const { value: childrenField } = childrenFieldRef;\n                return props.tmNodes.some((tmNode) => {\n                    var _a;\n                    if (tmNode.isGroup) {\n                        return (_a = tmNode.children) === null || _a === void 0 ? void 0 : _a.some(({ rawNode: rawChild }) => isSubmenuNode(rawChild, childrenField));\n                    }\n                    const { rawNode } = tmNode;\n                    return isSubmenuNode(rawNode, childrenField);\n                });\n            })\n        });\n    },\n    render() {\n        const { parentKey, clsPrefix } = this;\n        return (h(\"div\", { class: `${clsPrefix}-dropdown-menu` },\n            this.tmNodes.map((tmNode) => {\n                const { rawNode } = tmNode;\n                if (isRenderNode(rawNode)) {\n                    return (h(NDropdownRenderOption, { tmNode: tmNode, key: tmNode.key }));\n                }\n                if (isDividerNode(rawNode)) {\n                    return h(NDropdownDivider, { clsPrefix: clsPrefix, key: tmNode.key });\n                }\n                if (isGroupNode(rawNode)) {\n                    return (h(NDropdownGroup, { clsPrefix: clsPrefix, tmNode: tmNode, parentKey: parentKey, key: tmNode.key }));\n                }\n                return (h(NDropdownOption, { clsPrefix: clsPrefix, tmNode: tmNode, parentKey: parentKey, key: tmNode.key, props: rawNode.props }));\n            }),\n            this.showArrow\n                ? renderArrow({\n                    clsPrefix,\n                    arrowStyle: this.arrowStyle\n                })\n                : null));\n    }\n});\n","import { c, cB, cM, cE, cNotM } from '../../../_utils/cssr';\nimport fadeInScaleUpTransition from '../../../_styles/transitions/fade-in-scale-up.cssr'; // vars:\n// --bezier\n// --font-size\n// --padding\n// --border-radius\n// --option-height\n// --option-prefix-width\n// --option-icon-prefix-width\n// --option-suffix-width\n// --option-icon-suffix-width\n// --color\n// --option-color-hover\n// --option-color-active\n// --divider-color\n// --option-text-color\n// --option-text-color-hover\n// --option-text-color-active\n// --option-text-color-child-active\n// --prefix-color\n// --suffix-color\n// --option-icon-size\n// --option-opacity-disabled\n// shared with popover\n// --box-shadow\n\nexport default cB('dropdown-menu', `\n transform-origin: inherit;\n padding: var(--padding);\n background-color: var(--color);\n border-radius: var(--border-radius);\n box-shadow: var(--box-shadow);\n transition:\n background-color .3s var(--bezier),\n box-shadow .3s var(--bezier);\n`, [fadeInScaleUpTransition(), cB('dropdown-option', `\n position: relative;\n `, [c('a', `\n text-decoration: none;\n color: inherit;\n `, [c('&::before', `\n content: \"\";\n position: absolute;\n left: 0;\n right: 0;\n top: 0;\n bottom: 0;\n `)]), cB('dropdown-option-body', `\n display: flex;\n cursor: pointer;\n height: var(--option-height);\n line-height: var(--option-height);\n font-size: var(--font-size);\n color: var(--option-text-color);\n transition:\n background-color .3s var(--bezier),\n color .3s var(--bezier);\n `, [cM('pending', [cNotM('disabled', {\n  color: 'var(--option-text-color-hover)',\n  backgroundColor: 'var(--option-color-hover)'\n}), cE('prefix, suffix', {\n  color: 'var(--option-text-color-hover)'\n})]), cM('active', [cNotM('disabled', {\n  color: 'var(--option-text-color-active)',\n  backgroundColor: 'var(--option-color-active)'\n}), cE('prefix, suffix', {\n  color: 'var(--option-text-color-active)'\n})]), cM('disabled', {\n  cursor: 'not-allowed',\n  opacity: 'var(--option-opacity-disabled)'\n}), cM('child-active', {\n  color: 'var(--option-text-color-child-active)'\n}, [cE('prefix, suffix', {\n  color: 'var(--option-text-color-child-active)'\n})]), cM('group', {\n  fontSize: 'calc(var(--font-size) - 1px)',\n  color: 'var(--group-header-text-color)'\n}, [cE('prefix', {\n  width: 'calc(var(--option-prefix-width) / 2)'\n}, [cM('show-icon', {\n  width: 'calc(var(--option-icon-prefix-width) / 2)'\n})])]), cE('prefix', `\n width: var(--option-prefix-width);\n display: flex;\n justify-content: center;\n align-items: center;\n color: var(--prefix-color);\n transition: color .3s var(--bezier);\n `, [cM('show-icon', {\n  width: 'var(--option-icon-prefix-width)'\n}), cB('icon', {\n  fontSize: 'var(--option-icon-size)'\n})]), cE('label', {\n  whiteSpace: 'nowrap',\n  flex: 1\n}), cE('suffix', `\n box-sizing: border-box;\n flex-grow: 0;\n flex-shrink: 0;\n display: flex;\n justify-content: flex-end;\n align-items: center;\n min-width: var(--option-suffix-width);\n padding: 0 8px;\n transition: color .3s var(--bezier);\n color: var(--suffix-color);\n `, [cM('has-submenu', {\n  width: 'var(--option-icon-suffix-width)'\n}), cB('icon', {\n  fontSize: 'var(--option-icon-size)'\n})]), cB('dropdown-menu', {\n  pointerEvents: 'all'\n})]), cB('dropdown-offset-container', `\n pointer-events: none;\n position: absolute;\n left: 0;\n right: 0;\n top: -4px;\n bottom: -4px;\n `)]), cB('dropdown-divider', `\n transition: background-color .3s var(--bezier);\n background-color: var(--divider-color);\n height: 1px;\n margin: 4px 0;\n `), cB('dropdown-menu-wrapper', `\n transform-origin: inherit;\n width: fit-content;\n `)]);","import { defineComponent, h, computed, ref, toRef, watch, provide, mergeProps } from 'vue';\nimport { createTreeMate } from 'treemate';\nimport { useMergedState, useKeyboard, useMemo } from 'vooks';\nimport { popoverBaseProps } from '../../popover/src/Popover';\nimport { useConfig, useTheme } from '../../_mixins';\nimport { NPopover } from '../../popover';\nimport { keep, call, createKey, createRefSetter } from '../../_utils';\nimport { dropdownLight } from '../styles';\nimport NDropdownMenu from './DropdownMenu';\nimport style from './styles/index.cssr';\nexport const dropdownInjectionKey = Symbol('dropdown');\nconst dropdownBaseProps = {\n    animated: {\n        type: Boolean,\n        default: true\n    },\n    keyboard: {\n        type: Boolean,\n        default: true\n    },\n    size: {\n        type: String,\n        default: 'medium'\n    },\n    inverted: Boolean,\n    placement: {\n        type: String,\n        default: 'bottom'\n    },\n    onSelect: [Function, Array],\n    options: {\n        type: Array,\n        default: () => []\n    },\n    showArrow: Boolean,\n    renderLabel: Function,\n    renderIcon: Function,\n    labelField: {\n        type: String,\n        default: 'label'\n    },\n    keyField: {\n        type: String,\n        default: 'key'\n    },\n    childrenField: {\n        type: String,\n        default: 'children'\n    },\n    // for menu, not documented\n    value: [String, Number]\n};\nconst popoverPropKeys = Object.keys(popoverBaseProps);\nconst dropdownProps = Object.assign(Object.assign(Object.assign({}, popoverBaseProps), dropdownBaseProps), useTheme.props);\nexport default defineComponent({\n    name: 'Dropdown',\n    inheritAttrs: false,\n    props: dropdownProps,\n    setup(props) {\n        const uncontrolledShowRef = ref(false);\n        const mergedShowRef = useMergedState(toRef(props, 'show'), uncontrolledShowRef);\n        const treemateRef = computed(() => {\n            const { keyField, childrenField } = props;\n            return createTreeMate(props.options, {\n                getKey(node) {\n                    return node[keyField];\n                },\n                getDisabled(node) {\n                    return node.disabled === true;\n                },\n                getIgnored(node) {\n                    return node.type === 'divider' || node.type === 'render';\n                },\n                getChildren(node) {\n                    return node[childrenField];\n                }\n            });\n        });\n        const tmNodesRef = computed(() => {\n            return treemateRef.value.treeNodes;\n        });\n        const hoverKeyRef = ref(null);\n        const keyboardKeyRef = ref(null);\n        const lastToggledSubmenuKeyRef = ref(null);\n        const pendingKeyRef = computed(() => {\n            var _a, _b, _c;\n            return ((_c = (_b = (_a = hoverKeyRef.value) !== null && _a !== void 0 ? _a : keyboardKeyRef.value) !== null && _b !== void 0 ? _b : lastToggledSubmenuKeyRef.value) !== null && _c !== void 0 ? _c : null);\n        });\n        const pendingKeyPathRef = computed(() => treemateRef.value.getPath(pendingKeyRef.value).keyPath);\n        const activeKeyPathRef = computed(() => treemateRef.value.getPath(props.value).keyPath);\n        const keyboardEnabledRef = useMemo(() => {\n            return props.keyboard && mergedShowRef.value;\n        });\n        useKeyboard({\n            keydown: {\n                ArrowUp: {\n                    prevent: true,\n                    handler: handleKeyDownUp\n                },\n                ArrowRight: {\n                    prevent: true,\n                    handler: handleKeyDownRight\n                },\n                ArrowDown: {\n                    prevent: true,\n                    handler: handleKeyDownDown\n                },\n                ArrowLeft: {\n                    prevent: true,\n                    handler: handleKeyDownLeft\n                },\n                Escape: handleKeyDownEsc\n            },\n            keyup: {\n                Enter: handleKeyUpEnter\n            }\n        }, keyboardEnabledRef);\n        const { mergedClsPrefixRef } = useConfig(props);\n        const themeRef = useTheme('Dropdown', 'Dropdown', style, dropdownLight, props, mergedClsPrefixRef);\n        provide(dropdownInjectionKey, {\n            labelFieldRef: toRef(props, 'labelField'),\n            childrenFieldRef: toRef(props, 'childrenField'),\n            renderLabelRef: toRef(props, 'renderLabel'),\n            renderIconRef: toRef(props, 'renderIcon'),\n            hoverKeyRef: hoverKeyRef,\n            keyboardKeyRef: keyboardKeyRef,\n            lastToggledSubmenuKeyRef: lastToggledSubmenuKeyRef,\n            pendingKeyPathRef: pendingKeyPathRef,\n            activeKeyPathRef: activeKeyPathRef,\n            animatedRef: toRef(props, 'animated'),\n            mergedShowRef: mergedShowRef,\n            doSelect,\n            doUpdateShow\n        });\n        // watch\n        watch(mergedShowRef, (value) => {\n            if (!value)\n                clearPendingState();\n        });\n        // methods\n        function doSelect(key, node) {\n            const { onSelect } = props;\n            if (onSelect)\n                call(onSelect, key, node);\n        }\n        function doUpdateShow(value) {\n            const { 'onUpdate:show': onUpdateShow } = props;\n            if (onUpdateShow)\n                call(onUpdateShow, value);\n            uncontrolledShowRef.value = value;\n        }\n        function clearPendingState() {\n            hoverKeyRef.value = null;\n            keyboardKeyRef.value = null;\n            lastToggledSubmenuKeyRef.value = null;\n        }\n        function handleKeyDownEsc() {\n            doUpdateShow(false);\n        }\n        function handleKeyDownLeft() {\n            handleKeyDown('left');\n        }\n        function handleKeyDownRight() {\n            handleKeyDown('right');\n        }\n        function handleKeyDownUp() {\n            handleKeyDown('up');\n        }\n        function handleKeyDownDown() {\n            handleKeyDown('down');\n        }\n        function handleKeyUpEnter() {\n            const pendingNode = getPendingNode();\n            if (pendingNode === null || pendingNode === void 0 ? void 0 : pendingNode.isLeaf) {\n                doSelect(pendingNode.key, pendingNode.rawNode);\n                doUpdateShow(false);\n            }\n        }\n        function getPendingNode() {\n            var _a;\n            const { value: treeMate } = treemateRef;\n            const { value: pendingKey } = pendingKeyRef;\n            if (!treeMate || pendingKey === null)\n                return null;\n            return (_a = treeMate.getNode(pendingKey)) !== null && _a !== void 0 ? _a : null;\n        }\n        function handleKeyDown(direction) {\n            const { value: pendingKey } = pendingKeyRef;\n            const { value: { getFirstAvailableNode } } = treemateRef;\n            let nextKeyboardKey = null;\n            if (pendingKey === null) {\n                const firstNode = getFirstAvailableNode();\n                if (firstNode !== null) {\n                    nextKeyboardKey = firstNode.key;\n                }\n            }\n            else {\n                const currentNode = getPendingNode();\n                if (currentNode) {\n                    let nextNode;\n                    switch (direction) {\n                        case 'down':\n                            nextNode = currentNode.getNext();\n                            break;\n                        case 'up':\n                            nextNode = currentNode.getPrev();\n                            break;\n                        case 'right':\n                            nextNode = currentNode.getChild();\n                            break;\n                        case 'left':\n                            nextNode = currentNode.getParent();\n                            break;\n                    }\n                    if (nextNode)\n                        nextKeyboardKey = nextNode.key;\n                }\n            }\n            if (nextKeyboardKey !== null) {\n                hoverKeyRef.value = null;\n                keyboardKeyRef.value = nextKeyboardKey;\n            }\n        }\n        return {\n            mergedClsPrefix: mergedClsPrefixRef,\n            mergedTheme: themeRef,\n            // data\n            tmNodes: tmNodesRef,\n            // show\n            mergedShow: mergedShowRef,\n            // methods\n            doUpdateShow,\n            cssVars: computed(() => {\n                const { size, inverted } = props;\n                const { common: { cubicBezierEaseInOut }, self } = themeRef.value;\n                const { padding, dividerColor, borderRadius, optionOpacityDisabled, [createKey('optionIconSuffixWidth', size)]: optionIconSuffixWidth, [createKey('optionSuffixWidth', size)]: optionSuffixWidth, [createKey('optionIconPrefixWidth', size)]: optionIconPrefixWidth, [createKey('optionPrefixWidth', size)]: optionPrefixWidth, [createKey('fontSize', size)]: fontSize, [createKey('optionHeight', size)]: optionHeight, [createKey('optionIconSize', size)]: optionIconSize } = self;\n                const vars = {\n                    '--bezier': cubicBezierEaseInOut,\n                    '--font-size': fontSize,\n                    '--padding': padding,\n                    '--border-radius': borderRadius,\n                    '--option-height': optionHeight,\n                    '--option-prefix-width': optionPrefixWidth,\n                    '--option-icon-prefix-width': optionIconPrefixWidth,\n                    '--option-suffix-width': optionSuffixWidth,\n                    '--option-icon-suffix-width': optionIconSuffixWidth,\n                    '--option-icon-size': optionIconSize,\n                    '--divider-color': dividerColor,\n                    '--option-opacity-disabled': optionOpacityDisabled\n                };\n                // writing like this is the fastest method\n                if (inverted) {\n                    vars['--color'] = self.colorInverted;\n                    vars['--option-color-hover'] = self.optionColorHoverInverted;\n                    vars['--option-color-active'] = self.optionColorActiveInverted;\n                    vars['--option-text-color'] = self.optionTextColorInverted;\n                    vars['--option-text-color-hover'] = self.optionTextColorHoverInverted;\n                    vars['--option-text-color-active'] =\n                        self.optionTextColorActiveInverted;\n                    vars['--option-text-color-child-active'] =\n                        self.optionTextColorChildActiveInverted;\n                    vars['--prefix-color'] = self.prefixColorInverted;\n                    vars['--suffix-color'] = self.suffixColorInverted;\n                    vars['--group-header-text-color'] = self.groupHeaderTextColorInverted;\n                }\n                else {\n                    vars['--color'] = self.color;\n                    vars['--option-color-hover'] = self.optionColorHover;\n                    vars['--option-color-active'] = self.optionColorActive;\n                    vars['--option-text-color'] = self.optionTextColor;\n                    vars['--option-text-color-hover'] = self.optionTextColorHover;\n                    vars['--option-text-color-active'] = self.optionTextColorActive;\n                    vars['--option-text-color-child-active'] =\n                        self.optionTextColorChildActive;\n                    vars['--prefix-color'] = self.prefixColor;\n                    vars['--suffix-color'] = self.suffixColor;\n                    vars['--group-header-text-color'] = self.groupHeaderTextColor;\n                }\n                return vars;\n            })\n        };\n    },\n    render() {\n        const renderPopoverBody = (className, ref, style, onMouseenter, onMouseleave) => {\n            const { mergedClsPrefix } = this;\n            const dropdownProps = {\n                ref: createRefSetter(ref),\n                class: [\n                    className,\n                    `${mergedClsPrefix}-dropdown`,\n                    this.showArrow && `${mergedClsPrefix}-popover--show-arrow`\n                ],\n                clsPrefix: mergedClsPrefix,\n                tmNodes: this.tmNodes,\n                style: [style, this.cssVars],\n                showArrow: this.showArrow,\n                arrowStyle: this.arrowStyle,\n                onMouseenter,\n                onMouseleave\n            };\n            return h(NDropdownMenu, mergeProps(this.$attrs, dropdownProps));\n        };\n        const { mergedTheme } = this;\n        const popoverProps = {\n            show: this.mergedShow,\n            theme: mergedTheme.peers.Popover,\n            themeOverrides: mergedTheme.peerOverrides.Popover,\n            internalRenderBody: renderPopoverBody,\n            onUpdateShow: this.doUpdateShow\n        };\n        return (h(NPopover, Object.assign({}, keep(this.$props, popoverPropKeys), popoverProps), {\n            trigger: this.$slots.default,\n            _: 1\n        }));\n    }\n});\n","import { h, defineComponent } from 'vue';\nexport default defineComponent({\n    name: 'ChevronDownFilled',\n    render() {\n        return (h(\"svg\", { viewBox: \"0 0 16 16\", fill: \"none\", xmlns: \"http://www.w3.org/2000/svg\" },\n            h(\"path\", { d: \"M3.20041 5.73966C3.48226 5.43613 3.95681 5.41856 4.26034 5.70041L8 9.22652L11.7397 5.70041C12.0432 5.41856 12.5177 5.43613 12.7996 5.73966C13.0815 6.0432 13.0639 6.51775 12.7603 6.7996L8.51034 10.7996C8.22258 11.0668 7.77743 11.0668 7.48967 10.7996L3.23966 6.7996C2.93613 6.51775 2.91856 6.0432 3.20041 5.73966Z\", fill: \"currentColor\" })));\n    }\n});\n","import { computed, defineComponent, h, inject } from 'vue';\nimport { ChevronDownFilledIcon } from '../../_internal/icons';\nimport { render } from '../../_utils';\nimport { NBaseIcon } from '../../_internal';\nimport { menuInjectionKey } from './Menu';\nexport default defineComponent({\n    name: 'MenuOptionContent',\n    props: {\n        collapsed: Boolean,\n        disabled: Boolean,\n        title: [String, Function],\n        icon: Function,\n        extra: [String, Function],\n        showArrow: Boolean,\n        childActive: Boolean,\n        hover: Boolean,\n        paddingLeft: Number,\n        maxIconSize: {\n            type: Number,\n            required: true\n        },\n        activeIconSize: {\n            type: Number,\n            required: true\n        },\n        iconMarginRight: {\n            type: Number,\n            required: true\n        },\n        clsPrefix: {\n            type: String,\n            required: true\n        },\n        onClick: Function,\n        tmNode: {\n            type: Object,\n            required: true\n        }\n    },\n    setup(props) {\n        // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n        const { props: menuProps } = inject(menuInjectionKey);\n        return {\n            menuProps,\n            style: computed(() => {\n                const { paddingLeft } = props;\n                return { paddingLeft: paddingLeft && `${paddingLeft}px` };\n            }),\n            iconStyle: computed(() => {\n                const { maxIconSize, activeIconSize, iconMarginRight } = props;\n                return {\n                    width: `${maxIconSize}px`,\n                    height: `${maxIconSize}px`,\n                    fontSize: `${activeIconSize}px`,\n                    marginRight: `${iconMarginRight}px`\n                };\n            })\n        };\n    },\n    render() {\n        const { clsPrefix, tmNode, menuProps: { renderIcon, renderLabel, renderExtra, expandIcon } } = this;\n        const icon = renderIcon ? renderIcon(tmNode.rawNode) : render(this.icon);\n        return (h(\"div\", { onClick: this.onClick, role: \"none\", class: [\n                `${clsPrefix}-menu-item-content`,\n                {\n                    [`${clsPrefix}-menu-item-content--collapsed`]: this.collapsed,\n                    [`${clsPrefix}-menu-item-content--child-active`]: this.childActive,\n                    [`${clsPrefix}-menu-item-content--disabled`]: this.disabled,\n                    [`${clsPrefix}-menu-item-content--hover`]: this.hover\n                }\n            ], style: this.style },\n            icon && (h(\"div\", { class: `${clsPrefix}-menu-item-content__icon`, style: this.iconStyle, role: \"none\" }, [icon])),\n            h(\"div\", { class: `${clsPrefix}-menu-item-content-header`, role: \"none\" },\n                renderLabel ? renderLabel(tmNode.rawNode) : render(this.title),\n                this.extra || renderExtra ? (h(\"span\", { class: `${clsPrefix}-menu-item-content-header__extra` },\n                    ' ',\n                    renderExtra ? renderExtra(tmNode.rawNode) : render(this.extra))) : null),\n            this.showArrow ? (h(NBaseIcon, { ariaHidden: true, class: `${clsPrefix}-menu-item-content__arrow`, clsPrefix: clsPrefix }, {\n                default: () => expandIcon ? (expandIcon(tmNode.rawNode)) : (h(ChevronDownFilledIcon, null))\n            })) : null));\n    }\n});\n","export const useMenuChildProps = {\n    internalKey: {\n        type: [String, Number],\n        required: true\n    },\n    root: Boolean,\n    isGroup: Boolean,\n    level: {\n        type: Number,\n        required: true\n    },\n    title: [String, Function],\n    extra: [String, Function]\n};\n","import { h, ref, defineComponent, provide, computed } from 'vue';\nimport { useMemo } from 'vooks';\nimport { NFadeInExpandTransition } from '../../_internal';\nimport { NDropdown } from '../../dropdown';\nimport NMenuOptionContent from './MenuOptionContent';\nimport { itemRenderer } from './utils';\nimport { useMenuChild, useMenuChildProps } from './use-menu-child';\nimport { menuItemGroupInjectionKey } from './MenuOptionGroup';\nexport const submenuProps = Object.assign(Object.assign({}, useMenuChildProps), { rawNodes: {\n        type: Array,\n        default: () => []\n    }, tmNodes: {\n        type: Array,\n        default: () => []\n    }, tmNode: {\n        type: Object,\n        required: true\n    }, disabled: {\n        type: Boolean,\n        default: false\n    }, icon: Function, onClick: Function });\nexport const submenuInjectionKey = Symbol('submenu');\nexport default defineComponent({\n    name: 'Submenu',\n    props: submenuProps,\n    setup(props) {\n        const MenuChild = useMenuChild(props);\n        const { NMenu, NSubmenu } = MenuChild;\n        const { props: menuProps, mergedCollapsedRef } = NMenu;\n        const mergedDisabledRef = computed(() => {\n            const { disabled } = props;\n            if (NSubmenu === null || NSubmenu === void 0 ? void 0 : NSubmenu.mergedDisabledRef.value)\n                return true;\n            if (menuProps.disabled)\n                return true;\n            return disabled;\n        });\n        const dropdownShowRef = ref(false);\n        provide(submenuInjectionKey, {\n            paddingLeftRef: MenuChild.paddingLeft,\n            mergedDisabledRef\n        });\n        provide(menuItemGroupInjectionKey, null);\n        function doClick() {\n            const { onClick } = props;\n            if (onClick)\n                onClick();\n        }\n        function handleClick() {\n            if (!mergedDisabledRef.value) {\n                if (!mergedCollapsedRef.value) {\n                    NMenu.toggleExpand(props.internalKey);\n                }\n                doClick();\n            }\n        }\n        function handlePopoverShowChange(value) {\n            dropdownShowRef.value = value;\n        }\n        return {\n            menuProps,\n            doSelect: NMenu.doSelect,\n            inverted: NMenu.invertedRef,\n            isHorizontal: NMenu.isHorizontalRef,\n            mergedClsPrefix: NMenu.mergedClsPrefixRef,\n            maxIconSize: MenuChild.maxIconSize,\n            activeIconSize: MenuChild.activeIconSize,\n            iconMarginRight: MenuChild.iconMarginRight,\n            dropdownPlacement: MenuChild.dropdownPlacement,\n            dropdownShow: dropdownShowRef,\n            paddingLeft: MenuChild.paddingLeft,\n            mergedDisabled: mergedDisabledRef,\n            mergedValue: NMenu.mergedValueRef,\n            childActive: useMemo(() => {\n                return NMenu.activePathRef.value.includes(props.internalKey);\n            }),\n            collapsed: computed(() => {\n                if (menuProps.mode === 'horizontal')\n                    return false;\n                if (mergedCollapsedRef.value) {\n                    return true;\n                }\n                return !NMenu.mergedExpandedKeysRef.value.includes(props.internalKey);\n            }),\n            dropdownEnabled: computed(() => {\n                return (!mergedDisabledRef.value &&\n                    (menuProps.mode === 'horizontal' || mergedCollapsedRef.value));\n            }),\n            handlePopoverShowChange,\n            handleClick\n        };\n    },\n    render() {\n        var _a;\n        const { mergedClsPrefix, menuProps: { renderIcon, renderLabel } } = this;\n        const createSubmenuItem = () => {\n            const { isHorizontal, paddingLeft, collapsed, mergedDisabled, maxIconSize, activeIconSize, title, childActive, icon, handleClick, dropdownShow, iconMarginRight, tmNode } = this;\n            return (h(NMenuOptionContent, { tmNode: tmNode, paddingLeft: paddingLeft, collapsed: collapsed, disabled: mergedDisabled, iconMarginRight: iconMarginRight, maxIconSize: maxIconSize, activeIconSize: activeIconSize, title: title, showArrow: !isHorizontal, childActive: childActive, clsPrefix: mergedClsPrefix, icon: icon, hover: dropdownShow, onClick: handleClick }));\n        };\n        const createSubmenuChildren = () => {\n            return (h(NFadeInExpandTransition, null, {\n                default: () => {\n                    const { tmNodes, collapsed } = this;\n                    return !collapsed ? (h(\"div\", { class: `${mergedClsPrefix}-submenu-children`, role: \"menu\" }, tmNodes.map((item) => itemRenderer(item, this.menuProps)))) : null;\n                }\n            }));\n        };\n        return this.root ? (h(NDropdown, Object.assign({}, (_a = this.menuProps) === null || _a === void 0 ? void 0 : _a.dropdownProps, { builtinThemeOverrides: {\n                fontSizeLarge: '14px',\n                optionIconSizeLarge: '18px'\n            }, value: this.mergedValue, size: \"large\", trigger: \"hover\", disabled: !this.dropdownEnabled, placement: this.dropdownPlacement, keyField: this.menuProps.keyField, labelField: this.menuProps.labelField, childrenField: this.menuProps.childrenField, onUpdateShow: this.handlePopoverShowChange, options: this.rawNodes, onSelect: this.doSelect, inverted: this.inverted, renderIcon: renderIcon, renderLabel: renderLabel }), {\n            default: () => (h(\"div\", { class: `${mergedClsPrefix}-submenu`, role: \"menuitem\", \"aria-expanded\": !this.collapsed },\n                createSubmenuItem(),\n                this.isHorizontal ? null : createSubmenuChildren()))\n        })) : (h(\"div\", { class: `${mergedClsPrefix}-submenu`, role: \"menuitem\", \"aria-expanded\": !this.collapsed },\n            createSubmenuItem(),\n            createSubmenuChildren()));\n    }\n});\n","import { useMenuChildProps } from './use-menu-child-props';\nimport { inject, computed } from 'vue';\nimport { menuInjectionKey } from './Menu';\nimport { menuItemGroupInjectionKey } from './MenuOptionGroup';\nimport { submenuInjectionKey } from './Submenu';\nconst ICON_MARGIN_RIGHT = 8;\nexport function useMenuChild(props) {\n    // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n    const NMenu = inject(menuInjectionKey);\n    const { props: menuProps, mergedCollapsedRef } = NMenu;\n    const NSubmenu = inject(submenuInjectionKey, null);\n    const NMenuOptionGroup = inject(menuItemGroupInjectionKey, null);\n    const horizontalRef = computed(() => {\n        return menuProps.mode === 'horizontal';\n    });\n    const dropdownPlacementRef = computed(() => {\n        if (horizontalRef.value) {\n            return menuProps.dropdownPlacement;\n        }\n        if ('tmNodes' in props)\n            return 'right-start';\n        return 'right';\n    });\n    const maxIconSizeRef = computed(() => {\n        var _a;\n        return Math.max((_a = menuProps.collapsedIconSize) !== null && _a !== void 0 ? _a : menuProps.iconSize, menuProps.iconSize);\n    });\n    const activeIconSizeRef = computed(() => {\n        var _a;\n        if (!horizontalRef.value && props.root && mergedCollapsedRef.value) {\n            return (_a = menuProps.collapsedIconSize) !== null && _a !== void 0 ? _a : menuProps.iconSize;\n        }\n        else {\n            return menuProps.iconSize;\n        }\n    });\n    const paddingLeftRef = computed(() => {\n        if (horizontalRef.value)\n            return undefined;\n        const { collapsedWidth, indent, rootIndent } = menuProps;\n        const { root, isGroup } = props;\n        const mergedRootIndent = rootIndent === undefined ? indent : rootIndent;\n        if (root) {\n            if (mergedCollapsedRef.value) {\n                return collapsedWidth / 2 - maxIconSizeRef.value / 2;\n            }\n            return mergedRootIndent;\n        }\n        if (NMenuOptionGroup) {\n            return indent / 2 + NMenuOptionGroup.paddingLeftRef.value;\n        }\n        if (NSubmenu) {\n            return ((isGroup ? indent / 2 : indent) +\n                NSubmenu.paddingLeftRef.value);\n        }\n        return undefined;\n    });\n    const iconMarginRightRef = computed(() => {\n        const { collapsedWidth, indent, rootIndent } = menuProps;\n        const { value: maxIconSize } = maxIconSizeRef;\n        const { root } = props;\n        if (horizontalRef.value)\n            return ICON_MARGIN_RIGHT;\n        if (!root)\n            return ICON_MARGIN_RIGHT;\n        if (!mergedCollapsedRef.value)\n            return ICON_MARGIN_RIGHT;\n        const mergedRootIndent = rootIndent === undefined ? indent : rootIndent;\n        return (mergedRootIndent +\n            maxIconSize +\n            ICON_MARGIN_RIGHT -\n            (collapsedWidth + maxIconSize) / 2);\n    });\n    return {\n        dropdownPlacement: dropdownPlacementRef,\n        activeIconSize: activeIconSizeRef,\n        maxIconSize: maxIconSizeRef,\n        paddingLeft: paddingLeftRef,\n        iconMarginRight: iconMarginRightRef,\n        NMenu,\n        NSubmenu\n    };\n}\nexport { useMenuChildProps };\n","import { h, defineComponent, provide, Fragment, inject } from 'vue';\nimport { render } from '../../_utils';\nimport { useMenuChild, useMenuChildProps } from './use-menu-child';\nimport { itemRenderer } from './utils';\nimport { submenuInjectionKey } from './Submenu';\nimport { menuInjectionKey } from './Menu';\nexport const menuItemGroupProps = Object.assign(Object.assign({}, useMenuChildProps), { tmNodes: {\n        type: Array,\n        required: true\n    } });\nexport const menuItemGroupInjectionKey = Symbol('menu-item-group');\nexport default defineComponent({\n    name: 'MenuOptionGroup',\n    props: menuItemGroupProps,\n    setup(props) {\n        provide(submenuInjectionKey, null);\n        const MenuChild = useMenuChild(props);\n        provide(menuItemGroupInjectionKey, {\n            paddingLeftRef: MenuChild.paddingLeft\n        });\n        // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n        const { mergedClsPrefixRef, props: menuProps } = inject(menuInjectionKey);\n        return function () {\n            const { value: mergedClsPrefix } = mergedClsPrefixRef;\n            const paddingLeft = MenuChild.paddingLeft.value;\n            return (h(\"div\", { class: `${mergedClsPrefix}-menu-item-group`, role: \"group\" },\n                h(\"span\", { class: `${mergedClsPrefix}-menu-item-group-title`, style: paddingLeft !== undefined\n                        ? `padding-left: ${paddingLeft}px;`\n                        : undefined },\n                    render(props.title),\n                    props.extra ? h(Fragment, null,\n                        \" \",\n                        render(props.extra)) : null),\n                h(\"div\", null, props.tmNodes.map((tmNode) => itemRenderer(tmNode, menuProps)))));\n        };\n    }\n});\n","// Tooltip: popover wearing waistcoat\nimport { h, defineComponent, ref, computed } from 'vue';\nimport { NPopover } from '../../popover';\nimport { popoverBaseProps } from '../../popover/src/Popover';\nimport { useTheme } from '../../_mixins';\nimport { tooltipLight } from '../styles';\nconst tooltipProps = Object.assign(Object.assign({}, popoverBaseProps), useTheme.props);\nexport default defineComponent({\n    name: 'Tooltip',\n    props: tooltipProps,\n    __popover__: true,\n    setup(props) {\n        const themeRef = useTheme('Tooltip', 'Tooltip', undefined, tooltipLight, props);\n        const popoverRef = ref(null);\n        const tooltipExposedMethod = {\n            syncPosition() {\n                // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n                popoverRef.value.syncPosition();\n            },\n            setShow(show) {\n                // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n                popoverRef.value.setShow(show);\n            }\n        };\n        return Object.assign(Object.assign({}, tooltipExposedMethod), { popoverRef, mergedTheme: themeRef, popoverThemeOverrides: computed(() => {\n                return themeRef.value.self;\n            }) });\n    },\n    render() {\n        const { mergedTheme, internalExtraClass } = this;\n        return h(NPopover, Object.assign(Object.assign({}, this.$props), { theme: mergedTheme.peers.Popover, themeOverrides: mergedTheme.peerOverrides.Popover, builtinThemeOverrides: this.popoverThemeOverrides, internalExtraClass: internalExtraClass.concat('tooltip'), ref: 'popoverRef' }), this.$slots);\n    }\n});\n","import { h, computed, defineComponent } from 'vue';\nimport { useMemo } from 'vooks';\nimport { render } from '../../_utils';\nimport { NTooltip } from '../../tooltip';\nimport NMenuOptionContent from './MenuOptionContent';\nimport { useMenuChild, useMenuChildProps } from './use-menu-child';\nexport const menuItemProps = Object.assign(Object.assign({}, useMenuChildProps), { tmNode: {\n        type: Object,\n        required: true\n    }, disabled: Boolean, icon: Function, onClick: Function });\nexport default defineComponent({\n    name: 'MenuOption',\n    props: menuItemProps,\n    setup(props) {\n        const MenuChild = useMenuChild(props);\n        const { NSubmenu, NMenu } = MenuChild;\n        const { props: menuProps, mergedClsPrefixRef, mergedCollapsedRef } = NMenu;\n        const submenuDisabledRef = NSubmenu\n            ? NSubmenu.mergedDisabledRef\n            : { value: false };\n        const mergedDisabledRef = computed(() => {\n            return submenuDisabledRef.value || props.disabled;\n        });\n        function doClick(e) {\n            const { onClick } = props;\n            if (onClick)\n                onClick(e);\n        }\n        function handleClick(e) {\n            if (!mergedDisabledRef.value) {\n                NMenu.doSelect(props.internalKey, props.tmNode.rawNode);\n                doClick(e);\n            }\n        }\n        return {\n            mergedClsPrefix: mergedClsPrefixRef,\n            dropdownPlacement: MenuChild.dropdownPlacement,\n            paddingLeft: MenuChild.paddingLeft,\n            iconMarginRight: MenuChild.iconMarginRight,\n            maxIconSize: MenuChild.maxIconSize,\n            activeIconSize: MenuChild.activeIconSize,\n            mergedTheme: NMenu.mergedThemeRef,\n            menuProps,\n            dropdownEnabled: useMemo(() => {\n                return (props.root &&\n                    mergedCollapsedRef.value &&\n                    menuProps.mode !== 'horizontal' &&\n                    !mergedDisabledRef.value);\n            }),\n            // Vue has bug when using vooks.useMemo\n            // menu item state won't be updated...\n            // a minimal reproduction is needed\n            selected: computed(() => {\n                if (NMenu.mergedValueRef.value === props.internalKey)\n                    return true;\n                return false;\n            }),\n            mergedDisabled: mergedDisabledRef,\n            handleClick\n        };\n    },\n    render() {\n        const { mergedClsPrefix, mergedTheme, tmNode, menuProps: { renderLabel } } = this;\n        return (h(\"div\", { role: \"menuitem\", class: [\n                `${mergedClsPrefix}-menu-item`,\n                this.selected && `${mergedClsPrefix}-menu-item--selected`,\n                this.mergedDisabled && `${mergedClsPrefix}-menu-item--disabled`\n            ] },\n            h(NTooltip, { theme: mergedTheme.peers.Tooltip, themeOverrides: mergedTheme.peerOverrides.Tooltip, trigger: \"hover\", placement: this.dropdownPlacement, disabled: !this.dropdownEnabled || this.title === undefined, internalExtraClass: ['menu-tooltip'] }, {\n                default: () => renderLabel ? renderLabel(tmNode.rawNode) : render(this.title),\n                trigger: () => (h(NMenuOptionContent, { tmNode: tmNode, clsPrefix: mergedClsPrefix, paddingLeft: this.paddingLeft, iconMarginRight: this.iconMarginRight, maxIconSize: this.maxIconSize, activeIconSize: this.activeIconSize, title: this.title, extra: this.extra, disabled: this.mergedDisabled, icon: this.icon, onClick: this.handleClick }))\n            })));\n    }\n});\n","import { h, defineComponent, inject } from 'vue';\nimport { menuInjectionKey } from './Menu';\nexport default defineComponent({\n    name: 'MenuDivider',\n    setup() {\n        // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n        const NMenu = inject(menuInjectionKey);\n        const { mergedClsPrefixRef, isHorizontalRef } = NMenu;\n        return () => isHorizontalRef.value ? null : (h(\"div\", { class: `${mergedClsPrefixRef.value}-menu-divider` }));\n    }\n});\n","import { h } from 'vue';\nimport { keep, keysOf } from '../../_utils';\nimport NMenuOptionGroup, { menuItemGroupProps } from './MenuOptionGroup';\nimport NSubmenu, { submenuProps } from './Submenu';\nimport NMenuOption, { menuItemProps } from './MenuOption';\nimport NMenuDivider from './MenuDivider';\nconst groupPropKeys = keysOf(menuItemGroupProps);\nconst itemPropKeys = keysOf(menuItemProps);\nconst submenuPropKeys = keysOf(submenuProps);\nexport function isIgnoredNode(rawNode) {\n    return rawNode.type === 'divider' || rawNode.type === 'render';\n}\nexport function isDividerNode(rawNode) {\n    return rawNode.type === 'divider';\n}\nexport function itemRenderer(tmNode, menuProps) {\n    const { rawNode } = tmNode;\n    if (isIgnoredNode(rawNode)) {\n        if (isDividerNode(rawNode)) {\n            return h(NMenuDivider, Object.assign({ key: tmNode.key }, rawNode.props));\n        }\n        return undefined;\n    }\n    const { labelField } = menuProps;\n    const { key, level, isGroup } = tmNode;\n    const props = Object.assign(Object.assign({}, rawNode), { title: (rawNode.title || rawNode[labelField]), extra: rawNode.titleExtra || rawNode.extra, key, internalKey: key, // since key can't be used as a prop\n        level, root: level === 0, isGroup });\n    if (tmNode.children) {\n        if (tmNode.isGroup) {\n            return h(NMenuOptionGroup, keep(props, groupPropKeys, { tmNodes: tmNode.children, key }));\n        }\n        return h(NSubmenu, keep(props, submenuPropKeys, {\n            key,\n            rawNodes: rawNode[menuProps.childrenField],\n            tmNodes: tmNode.children,\n            tmNode\n        }));\n    }\n    else {\n        return h(NMenuOption, keep(props, itemPropKeys, {\n            key,\n            tmNode\n        }));\n    }\n}\n","import { c } from '../../_utils/cssr';\nimport commonVariables from '../common/_common';\nconst {\n  cubicBezierEaseInOut,\n  cubicBezierEaseOut,\n  cubicBezierEaseIn\n} = commonVariables;\nexport default function ({\n  overflow = 'hidden',\n  duration = '.3s',\n  originalTransition = '',\n  leavingDelay = '0s',\n  foldPadding = false,\n  enterToProps = undefined,\n  leaveToProps = undefined,\n  reverse = false\n} = {}) {\n  const enterClass = reverse ? 'leave' : 'enter';\n  const leaveClass = reverse ? 'enter' : 'leave';\n  return [c(`&.fade-in-height-expand-transition-${leaveClass}-from,\n &.fade-in-height-expand-transition-${enterClass}-to`, Object.assign(Object.assign({}, enterToProps), {\n    opacity: 1\n  })), c(`&.fade-in-height-expand-transition-${leaveClass}-to,\n &.fade-in-height-expand-transition-${enterClass}-from`, Object.assign(Object.assign({}, leaveToProps), {\n    opacity: 0,\n    marginTop: '0 !important',\n    marginBottom: '0 !important',\n    paddingTop: foldPadding ? '0 !important' : undefined,\n    paddingBottom: foldPadding ? '0 !important' : undefined\n  })), c(`&.fade-in-height-expand-transition-${leaveClass}-active`, `\n overflow: ${overflow};\n transition:\n max-height ${duration} ${cubicBezierEaseInOut} ${leavingDelay},\n opacity ${duration} ${cubicBezierEaseOut} ${leavingDelay},\n margin-top ${duration} ${cubicBezierEaseInOut} ${leavingDelay},\n margin-bottom ${duration} ${cubicBezierEaseInOut} ${leavingDelay},\n padding-top ${duration} ${cubicBezierEaseInOut} ${leavingDelay},\n padding-bottom ${duration} ${cubicBezierEaseInOut} ${leavingDelay}\n ${originalTransition ? ',' + originalTransition : ''}\n `), c(`&.fade-in-height-expand-transition-${enterClass}-active`, `\n overflow: ${overflow};\n transition:\n max-height ${duration} ${cubicBezierEaseInOut},\n opacity ${duration} ${cubicBezierEaseIn},\n margin-top ${duration} ${cubicBezierEaseInOut},\n margin-bottom ${duration} ${cubicBezierEaseInOut},\n padding-top ${duration} ${cubicBezierEaseInOut},\n padding-bottom ${duration} ${cubicBezierEaseInOut}\n ${originalTransition ? ',' + originalTransition : ''}\n `)];\n}","import { c, cB, cE, cM, cNotM } from '../../../_utils/cssr';\nimport fadeInHeightExpandTransition from '../../../_styles/transitions/fade-in-height-expand.cssr'; // vars:\n// --color\n// --group-text-color\n// --bezier\n// --font-size\n// --border-color-horizontal\n// --border-radius\n// --item-color-active\n// --item-color-active-collapsed\n// --arrow-color\n// --arrow-color-hover\n// --arrow-color-active\n// --arrow-color-child-active\n// --item-text-color\n// --item-text-color-hover\n// --item-text-color-active\n// --item-text-color-child-active\n// --item-icon-color\n// --item-icon-color-hover\n// --item-icon-color-active\n// --item-icon-color-collapsed\n// --item-icon-color-child-active\n// --item-height\n\nexport default c([cB('menu', `\n background-color: var(--color);\n color: var(--item-text-color);\n overflow: hidden;\n transition: background-color .3s var(--bezier);\n box-sizing: border-box;\n font-size: var(--font-size);\n padding-bottom: 6px;\n `, [cM('horizontal', {\n  display: 'inline-flex',\n  paddingBottom: 0\n}, [cB('submenu', {\n  margin: 0\n}), cB('menu-item', {\n  margin: 0\n}, [c('&::before', {\n  backgroundColor: '#0000 !important'\n}), cM('selected', [cB('menu-item-content', {\n  borderBottom: '2px solid var(--border-color-horizontal)'\n})])]), cB('menu-item-content', {\n  padding: '0 20px',\n  borderBottom: '2px solid #0000'\n}, [cM('child-active', {\n  borderBottom: '2px solid var(--border-color-horizontal)'\n}), cNotM('disabled', [hoverStyle({\n  borderBottom: '2px solid var(--border-color-horizontal)'\n}, null)])])]), cM('collapsed', [cB('menu-item', [cM('selected', [c('&::before', {\n  backgroundColor: 'var(--item-color-active-collapsed) !important'\n})])]), cB('menu-item-content', [cB('menu-item-content-header', {\n  opacity: 0\n}), cE('arrow', {\n  opacity: 0\n}), cE('icon', {\n  color: 'var(--item-icon-color-collapsed)'\n})])]), cB('menu-item', `\n transition: background-color .3s var(--bezier);\n height: var(--item-height);\n margin-top: 6px;\n position: relative;\n `, [c('&::before', `\n z-index: auto;\n content: \"\";\n background-color: #0000;\n position: absolute;\n left: 8px;\n right: 8px;\n top: 0;\n bottom: 0;\n pointer-events: none;\n border-radius: var(--border-radius);\n transition: background-color .3s var(--bezier);\n `), cNotM('disabled', [c('&:active::before', {\n  backgroundColor: 'var(--item-color-active)'\n})]), cM('selected', [c('&::before', {\n  backgroundColor: 'var(--item-color-active)'\n}), cB('menu-item-content', [cE('arrow', {\n  color: 'var(--arrow-color-active)'\n}), cE('icon', {\n  color: 'var(--item-icon-color-active)'\n}), cB('menu-item-content-header', {\n  color: 'var(--item-text-color-active)'\n}, [cE('extra', {\n  color: 'var(--item-text-color-active)'\n})])])])]), cB('menu-item-content', `\n box-sizing: border-box;\n line-height: 1.75;\n height: 100%;\n display: grid;\n grid-template-areas: \"icon content arrow\";\n grid-template-columns: auto 1fr auto;\n align-items: center;\n cursor: pointer;\n position: relative;\n z-index: auto;\n padding-right: 18px;\n transition:\n background-color .3s var(--bezier),\n padding-left .3s var(--bezier),\n border-color .3s var(--bezier);\n `, [cM('disabled', {\n  opacity: '.45',\n  cursor: 'not-allowed'\n}), cM('collapsed', [cE('arrow', {\n  transform: 'rotate(0)'\n})]), cM('child-active', [cB('menu-item-content-header', {\n  color: 'var(--item-text-color-child-active)'\n}, [cE('extra', {\n  color: 'var(--item-text-color-child-active)'\n})]), cE('arrow', {\n  color: 'var(--arrow-color-child-active)'\n}), cE('icon', {\n  color: 'var(--item-icon-color-child-active)'\n})]), cNotM('disabled', [hoverStyle(null, [cE('arrow', {\n  color: 'var(--arrow-color-hover)'\n}), cE('icon', {\n  color: 'var(--item-icon-color-hover)'\n}), cB('menu-item-content-header', {\n  color: 'var(--item-text-color-hover)'\n}, [cE('extra', {\n  color: 'var(--item-text-color-hover)'\n})])])]), cE('icon', `\n grid-area: icon;\n color: var(--item-icon-color);\n transition:\n color .3s var(--bezier),\n font-size .3s var(--bezier),\n margin-right .3s var(--bezier);\n box-sizing: content-box;\n display: inline-flex;\n align-items: center;\n justify-content: center;\n `), cE('arrow', `\n grid-area: arrow;\n font-size: 16px;\n color: var(--arrow-color);\n transform: rotate(180deg);\n opacity: 1;\n transition:\n color .3s var(--bezier),\n transform 0.2s var(--bezier),\n opacity 0.2s var(--bezier);\n `), cB('menu-item-content-header', `\n grid-area: content;\n transition:\n color .3s var(--bezier),\n opacity .3s var(--bezier);\n opacity: 1;\n white-space: nowrap;\n overflow: hidden;\n text-overflow: ellipsis;\n color: var(--item-text-color);\n `, [c('a', `\n text-decoration: none;\n color: inherit;\n `, [c('&::before', `\n content: \"\";\n position: absolute;\n left: 0;\n right: 0;\n top: 0;\n bottom: 0;\n `)]), cE('extra', `\n font-size: .93em;\n color: var(--group-text-color);\n transition: color .3s var(--bezier);\n `)])]), cB('submenu', {\n  cursor: 'pointer',\n  position: 'relative',\n  marginTop: '6px'\n}, [cB('menu-item-content', `\n height: var(--item-height);\n `), cB('submenu-children', {\n  overflow: 'hidden',\n  padding: 0\n}, [fadeInHeightExpandTransition({\n  duration: '.2s'\n})])]), cB('menu-item-group', [cB('menu-item-group-title', `\n margin-top: 6px;\n color: var(--group-text-color);\n cursor: default;\n font-size: .93em;\n height: 36px;\n display: flex;\n align-items: center;\n transition:\n padding-left .3s var(--bezier),\n color .3s var(--bezier);\n `)])]), cB('menu-tooltip', [c('a', `\n color: inherit;\n text-decoration: none;\n `)]), cB('menu-divider', `\n transition: background-color .3s var(--bezier);\n background-color: var(--divider-color);\n height: 1px;\n margin: 6px 18px;\n `)]);\n\nfunction hoverStyle(props, children) {\n  return [cM('hover', props, children), c('&:hover', props, children)];\n}","export const layoutSiderInjectionKey = Symbol('layoutSiderInjection');\nexport const positionProp = {\n    type: String,\n    default: 'static'\n};\n","import { h, ref, toRef, computed, defineComponent, provide, inject, watchEffect } from 'vue';\nimport { createTreeMate } from 'treemate';\nimport { useCompitable, useMergedState } from 'vooks';\nimport { useConfig, useTheme } from '../../_mixins';\nimport { call } from '../../_utils';\nimport { itemRenderer } from './utils';\nimport { menuLight } from '../styles';\nimport style from './styles/index.cssr';\nimport { layoutSiderInjectionKey } from '../../layout/src/interface';\nimport { useCheckDeprecated } from './useCheckDeprecated';\nconst menuProps = Object.assign(Object.assign({}, useTheme.props), { options: {\n        type: Array,\n        default: () => []\n    }, collapsed: {\n        type: Boolean,\n        default: undefined\n    }, collapsedWidth: {\n        type: Number,\n        default: 48\n    }, iconSize: {\n        type: Number,\n        default: 20\n    }, collapsedIconSize: {\n        type: Number,\n        default: 24\n    }, rootIndent: Number, indent: {\n        type: Number,\n        default: 32\n    }, labelField: {\n        type: String,\n        default: 'label'\n    }, keyField: {\n        type: String,\n        default: 'key'\n    }, childrenField: {\n        type: String,\n        default: 'children'\n    }, defaultExpandAll: Boolean, defaultExpandedKeys: Array, expandedKeys: Array, value: [String, Number], defaultValue: {\n        type: [String, Number],\n        default: null\n    }, mode: {\n        type: String,\n        default: 'vertical'\n    }, watchProps: {\n        type: Array,\n        default: undefined\n    }, disabled: Boolean, inverted: Boolean, 'onUpdate:expandedKeys': [Function, Array], onUpdateExpandedKeys: [Function, Array], onUpdateValue: [Function, Array], 'onUpdate:value': [Function, Array], expandIcon: Function, renderIcon: Function, renderLabel: Function, renderExtra: Function, \n    /** TODO: deprecate it */\n    dropdownPlacement: {\n        type: String,\n        default: 'bottom'\n    }, dropdownProps: Object, accordion: Boolean, \n    // deprecated\n    items: Array, onOpenNamesChange: [Function, Array], onSelect: [Function, Array], onExpandedNamesChange: [Function, Array], expandedNames: Array, defaultExpandedNames: Array });\nexport const menuInjectionKey = Symbol('menu');\nexport default defineComponent({\n    name: 'Menu',\n    props: menuProps,\n    setup(props) {\n        if (process.env.NODE_ENV !== 'production') {\n            useCheckDeprecated(props);\n        }\n        const { mergedClsPrefixRef } = useConfig(props);\n        const themeRef = useTheme('Menu', 'Menu', style, menuLight, props, mergedClsPrefixRef);\n        const layoutSider = inject(layoutSiderInjectionKey, null);\n        const mergedCollapsedRef = computed(() => {\n            var _a;\n            const { collapsed } = props;\n            if (collapsed !== undefined)\n                return collapsed;\n            if (layoutSider) {\n                const { collapseModeRef, collapsedRef } = layoutSider;\n                if (collapseModeRef.value === 'width') {\n                    return (_a = collapsedRef.value) !== null && _a !== void 0 ? _a : false;\n                }\n            }\n            return false;\n        });\n        const treeMateRef = computed(() => {\n            const { keyField, childrenField } = props;\n            return createTreeMate(props.items || props.options, {\n                getChildren(node) {\n                    return node[childrenField];\n                },\n                getKey(node) {\n                    var _a;\n                    return (_a = node[keyField]) !== null && _a !== void 0 ? _a : node.name;\n                }\n            });\n        });\n        const treeKeysLevelOneRef = computed(() => new Set(treeMateRef.value.treeNodes.map((e) => e.key)));\n        const { watchProps } = props;\n        const uncontrolledValueRef = ref(null);\n        if (watchProps === null || watchProps === void 0 ? void 0 : watchProps.includes('defaultValue')) {\n            watchEffect(() => {\n                uncontrolledValueRef.value = props.defaultValue;\n            });\n        }\n        else {\n            uncontrolledValueRef.value = props.defaultValue;\n        }\n        const controlledValueRef = toRef(props, 'value');\n        const mergedValueRef = useMergedState(controlledValueRef, uncontrolledValueRef);\n        const uncontrolledExpandedKeysRef = ref([]);\n        const initUncontrolledExpandedKeys = () => {\n            uncontrolledExpandedKeysRef.value = props.defaultExpandAll\n                ? treeMateRef.value.getNonLeafKeys()\n                : props.defaultExpandedNames ||\n                    props.defaultExpandedKeys ||\n                    treeMateRef.value.getPath(mergedValueRef.value, {\n                        includeSelf: false\n                    }).keyPath;\n        };\n        if (watchProps === null || watchProps === void 0 ? void 0 : watchProps.includes('defaultExpandedKeys')) {\n            watchEffect(initUncontrolledExpandedKeys);\n        }\n        else {\n            initUncontrolledExpandedKeys();\n        }\n        const controlledExpandedKeysRef = useCompitable(props, [\n            'expandedNames',\n            'expandedKeys'\n        ]);\n        const mergedExpandedKeysRef = useMergedState(controlledExpandedKeysRef, uncontrolledExpandedKeysRef);\n        const tmNodesRef = computed(() => treeMateRef.value.treeNodes);\n        const activePathRef = computed(() => {\n            return treeMateRef.value.getPath(mergedValueRef.value).keyPath;\n        });\n        provide(menuInjectionKey, {\n            props,\n            mergedCollapsedRef,\n            mergedThemeRef: themeRef,\n            mergedValueRef,\n            mergedExpandedKeysRef,\n            activePathRef,\n            mergedClsPrefixRef,\n            isHorizontalRef: computed(() => props.mode === 'horizontal'),\n            invertedRef: toRef(props, 'inverted'),\n            doSelect,\n            toggleExpand\n        });\n        function doSelect(value, item) {\n            const { 'onUpdate:value': _onUpdateValue, onUpdateValue, onSelect } = props;\n            if (onUpdateValue) {\n                call(onUpdateValue, value, item);\n            }\n            if (_onUpdateValue) {\n                call(_onUpdateValue, value, item);\n            }\n            if (onSelect) {\n                call(onSelect, value, item);\n            }\n            uncontrolledValueRef.value = value;\n        }\n        function doUpdateExpandedKeys(value) {\n            const { 'onUpdate:expandedKeys': _onUpdateExpandedKeys, onUpdateExpandedKeys, onExpandedNamesChange, onOpenNamesChange } = props;\n            if (_onUpdateExpandedKeys) {\n                call(_onUpdateExpandedKeys, value);\n            }\n            if (onUpdateExpandedKeys) {\n                call(onUpdateExpandedKeys, value);\n            }\n            // deprecated\n            if (onExpandedNamesChange) {\n                call(onExpandedNamesChange, value);\n            }\n            if (onOpenNamesChange) {\n                call(onOpenNamesChange, value);\n            }\n            uncontrolledExpandedKeysRef.value = value;\n        }\n        function toggleExpand(key) {\n            const currentExpandedKeys = Array.from(mergedExpandedKeysRef.value);\n            const index = currentExpandedKeys.findIndex((expanededKey) => expanededKey === key);\n            if (~index) {\n                currentExpandedKeys.splice(index, 1);\n            }\n            else {\n                if (props.accordion) {\n                    if (treeKeysLevelOneRef.value.has(key)) {\n                        const closeKeyIndex = currentExpandedKeys.findIndex((e) => treeKeysLevelOneRef.value.has(e));\n                        if (closeKeyIndex > -1) {\n                            currentExpandedKeys.splice(closeKeyIndex, 1);\n                        }\n                    }\n                }\n                currentExpandedKeys.push(key);\n            }\n            doUpdateExpandedKeys(currentExpandedKeys);\n        }\n        return {\n            mergedClsPrefix: mergedClsPrefixRef,\n            controlledExpandedKeys: controlledExpandedKeysRef,\n            uncontrolledExpanededKeys: uncontrolledExpandedKeysRef,\n            mergedExpandedKeys: mergedExpandedKeysRef,\n            uncontrolledValue: uncontrolledValueRef,\n            mergedValue: mergedValueRef,\n            activePath: activePathRef,\n            tmNodes: tmNodesRef,\n            mergedTheme: themeRef,\n            mergedCollapsed: mergedCollapsedRef,\n            cssVars: computed(() => {\n                const { inverted } = props;\n                const { common: { cubicBezierEaseInOut }, self } = themeRef.value;\n                const { borderRadius, borderColorHorizontal, fontSize, itemHeight, dividerColor } = self;\n                const vars = {\n                    '--divider-color': dividerColor,\n                    '--bezier': cubicBezierEaseInOut,\n                    '--font-size': fontSize,\n                    '--border-color-horizontal': borderColorHorizontal,\n                    '--border-radius': borderRadius,\n                    '--item-height': itemHeight\n                };\n                if (inverted) {\n                    vars['--group-text-color'] = self.groupTextColorInverted;\n                    vars['--color'] = self.colorInverted;\n                    vars['--item-text-color'] = self.itemTextColorInverted;\n                    vars['--arrow-color'] = self.arrowColorInverted;\n                    vars['--arrow-color-hover'] = self.arrowColorHoverInverted;\n                    vars['--arrow-color-active'] = self.arrowColorActiveInverted;\n                    vars['--arrow-color-child-active'] =\n                        self.arrowColorChildActiveInverted;\n                    vars['--item-icon-color'] = self.itemIconColorInverted;\n                    vars['--item-text-color-hover'] = self.itemTextColorHoverInverted;\n                    vars['--item-icon-color-hover'] = self.itemIconColorHoverInverted;\n                    vars['--item-text-color-active'] = self.itemTextColorActiveInverted;\n                    vars['--item-icon-color-active'] = self.itemIconColorActiveInverted;\n                    vars['--item-icon-color-collapsed'] =\n                        self.itemIconColorCollapsedInverted;\n                    vars['--item-color-active'] = self.itemColorActiveInverted;\n                    vars['--item-color-active-collapsed'] =\n                        self.itemColorActiveCollapsedInverted;\n                    vars['--item-text-color-child-active'] =\n                        self.itemTextColorChildActiveInverted;\n                    vars['--item-icon-color-child-active'] =\n                        self.itemIconColorChildActiveInverted;\n                }\n                else {\n                    vars['--group-text-color'] = self.groupTextColor;\n                    vars['--color'] = self.color;\n                    vars['--item-text-color'] = self.itemTextColor;\n                    vars['--arrow-color'] = self.arrowColor;\n                    vars['--arrow-color-hover'] = self.arrowColorHover;\n                    vars['--arrow-color-active'] = self.arrowColorActive;\n                    vars['--arrow-color-child-active'] = self.arrowColorChildActive;\n                    vars['--item-icon-color'] = self.itemIconColor;\n                    vars['--item-text-color-hover'] = self.itemTextColorHover;\n                    vars['--item-icon-color-hover'] = self.itemIconColorHover;\n                    vars['--item-text-color-active'] = self.itemTextColorActive;\n                    vars['--item-icon-color-active'] = self.itemIconColorActive;\n                    vars['--item-icon-color-collapsed'] = self.itemIconColorCollapsed;\n                    vars['--item-color-active'] = self.itemColorActive;\n                    vars['--item-color-active-collapsed'] = self.itemColorActiveCollapsed;\n                    vars['--item-text-color-child-active'] = self.itemTextColorChildActive;\n                    vars['--item-icon-color-child-active'] = self.itemIconColorChildActive;\n                }\n                return vars;\n            })\n        };\n    },\n    render() {\n        const { mergedClsPrefix, mode } = this;\n        return (h(\"div\", { role: mode === 'horizontal' ? 'menubar' : 'menu', class: [\n                `${mergedClsPrefix}-menu`,\n                `${mergedClsPrefix}-menu--${mode}`,\n                this.mergedCollapsed && `${mergedClsPrefix}-menu--collapsed`\n            ], style: this.cssVars }, this.tmNodes.map((tmNode) => itemRenderer(tmNode, this.$props))));\n    }\n});\n","/* eslint-disable @typescript-eslint/consistent-type-assertions */\nimport { ref, computed, onBeforeUnmount } from 'vue';\nimport { isBrowser } from './utils';\nexport const defaultBreakpointOptions = {\n    // mobile\n    // 0 ~ 640 doesn't mean it should display well in all the range,\n    // but means you should treat it like a mobile phone.)\n    xs: 0,\n    s: 640,\n    m: 1024,\n    l: 1280,\n    xl: 1536,\n    '2xl': 1920 // normal desktop display\n};\nfunction createMediaQuery(screenWidth) {\n    return `(min-width: ${screenWidth}px)`;\n}\nconst mqlMap = {};\nfunction useBreakpoints(screens = defaultBreakpointOptions) {\n    if (!isBrowser)\n        return computed(() => []);\n    // eslint-disable-next-line @typescript-eslint/strict-boolean-expressions\n    if (typeof window.matchMedia !== 'function')\n        return computed(() => []);\n    const breakpointStatusRef = ref({});\n    const breakpoints = Object.keys(screens);\n    const updateBreakpoints = (e, breakpointName) => {\n        if (e.matches)\n            breakpointStatusRef.value[breakpointName] = true;\n        else\n            breakpointStatusRef.value[breakpointName] = false;\n    };\n    breakpoints.forEach((key) => {\n        const breakpointValue = screens[key];\n        let mql;\n        let cbs;\n        if (mqlMap[breakpointValue] === undefined) {\n            mql = window.matchMedia(createMediaQuery(breakpointValue));\n            // eslint-disable-next-line @typescript-eslint/strict-boolean-expressions\n            if (mql.addEventListener) {\n                mql.addEventListener('change', (e) => {\n                    cbs.forEach((cb) => {\n                        cb(e, key);\n                    });\n                });\n                // eslint-disable-next-line @typescript-eslint/strict-boolean-expressions\n            }\n            else if (mql.addListener) {\n                mql.addListener((e) => {\n                    cbs.forEach((cb) => {\n                        cb(e, key);\n                    });\n                });\n            }\n            cbs = new Set();\n            mqlMap[breakpointValue] = {\n                mql,\n                cbs\n            };\n        }\n        else {\n            mql = mqlMap[breakpointValue].mql;\n            cbs = mqlMap[breakpointValue].cbs;\n        }\n        cbs.add(updateBreakpoints);\n        if (mql.matches) {\n            cbs.forEach((cb) => {\n                cb(mql, key);\n            });\n        }\n    });\n    onBeforeUnmount(() => {\n        breakpoints.forEach((breakpoint) => {\n            const { cbs } = mqlMap[screens[breakpoint]];\n            if (cbs.has(updateBreakpoints)) {\n                cbs.delete(updateBreakpoints);\n            }\n        });\n    });\n    return computed(() => {\n        const { value } = breakpointStatusRef;\n        return breakpoints.filter((key) => value[key]);\n    });\n}\nexport default useBreakpoints;\n","export function parseResponsiveProp(reponsiveProp) {\n    if (typeof reponsiveProp === \"number\") {\n        return {\n            '': reponsiveProp.toString()\n        };\n    }\n    const params = {};\n    reponsiveProp.split(/ +/).forEach((pairLiteral) => {\n        if (pairLiteral === '')\n            return;\n        const [prefix, value] = pairLiteral.split(':');\n        if (value === undefined) {\n            params[''] = prefix;\n        }\n        else {\n            params[prefix] = value;\n        }\n    });\n    return params;\n}\nfunction parseResponsivePropValue(reponsiveProp, activeKeyOrSize) {\n    var _a;\n    if (reponsiveProp === undefined || reponsiveProp === null)\n        return undefined;\n    const classObj = parseResponsiveProp(reponsiveProp);\n    if (activeKeyOrSize === undefined)\n        return classObj[''];\n    if (typeof activeKeyOrSize === 'string') {\n        return (_a = classObj[activeKeyOrSize]) !== null && _a !== void 0 ? _a : classObj[''];\n    }\n    else if (Array.isArray(activeKeyOrSize)) {\n        for (let i = activeKeyOrSize.length - 1; i >= 0; --i) {\n            const key = activeKeyOrSize[i];\n            if (key in classObj)\n                return classObj[key];\n        }\n        return classObj[''];\n    }\n    else {\n        // Here we suppose all the keys are number formatted\n        let activeValue = undefined;\n        let activeKey = -1;\n        Object.keys(classObj).forEach((key) => {\n            const keyAsNum = Number(key);\n            if (!Number.isNaN(keyAsNum) &&\n                activeKeyOrSize >= keyAsNum &&\n                keyAsNum >= activeKey) {\n                activeKey = keyAsNum;\n                activeValue = classObj[key];\n            }\n        });\n        return activeValue;\n    }\n}\nexport { parseResponsivePropValue };\n","export const defaultBreakpoints = {\n    xs: 0,\n    s: 640,\n    m: 1024,\n    l: 1280,\n    xl: 1536,\n    xxl: 1920 // normal desktop display\n};\n","import { h, defineComponent, inject, renderSlot, getCurrentInstance } from 'vue';\nimport { pxfy } from 'seemly';\nimport { gridInjectionKey } from './Grid';\nimport { keysOf } from '../../_utils';\nexport const defaultSpan = 1;\nexport const gridItemProps = {\n    span: {\n        type: [Number, String],\n        default: defaultSpan\n    },\n    offset: {\n        type: [Number, String],\n        default: 0\n    },\n    suffix: Boolean,\n    // private props\n    privateOffset: Number,\n    privateSpan: Number,\n    privateColStart: Number,\n    privateShow: {\n        type: Boolean,\n        default: true\n    }\n};\nexport const gridItemPropKeys = keysOf(gridItemProps);\nexport default defineComponent({\n    __GRID_ITEM__: true,\n    name: 'GridItem',\n    alias: ['Gi'],\n    props: gridItemProps,\n    setup() {\n        const { xGapRef, itemStyleRef, overflowRef\n        // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n         } = inject(gridInjectionKey);\n        const self = getCurrentInstance();\n        return {\n            overflow: overflowRef,\n            itemStyle: itemStyleRef,\n            deriveStyle: () => {\n                // Here is quite a hack, I hope there is a better way to solve it\n                const { privateSpan = defaultSpan, privateShow = true, privateColStart = undefined, privateOffset = 0\n                // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n                 } = self.vnode.props;\n                const { value: xGap } = xGapRef;\n                const mergedXGap = pxfy(xGap || 0);\n                return {\n                    display: !privateShow ? 'none' : '',\n                    gridColumn: `${privateColStart !== null && privateColStart !== void 0 ? privateColStart : `span ${privateSpan}`} / span ${privateSpan}`,\n                    marginLeft: privateOffset\n                        ? `calc((100% - (${privateSpan} - 1) * ${mergedXGap}) / ${privateSpan} * ${privateOffset} + ${mergedXGap} * ${privateOffset})`\n                        : ''\n                };\n            }\n        };\n    },\n    render() {\n        return (h(\"div\", { style: [this.itemStyle, this.deriveStyle()] }, renderSlot(this.$slots, 'default', { overflow: this.overflow })));\n    }\n});\n","import { h, defineComponent, computed, provide, toRef, mergeProps, ref, cloneVNode } from 'vue';\nimport { useBreakpoints, useMemo } from 'vooks';\nimport { VResizeObserver } from 'vueuc';\nimport { pxfy, parseResponsivePropValue, beforeNextFrameOnce } from 'seemly';\nimport { defaultBreakpoints } from '../../config-provider/src/config';\nimport { useConfig } from '../../_mixins';\nimport { getSlot, flatten } from '../../_utils';\nimport { defaultSpan } from './GridItem';\nconst defaultCols = 24;\nconst gridProps = {\n    responsive: {\n        type: [String, Boolean],\n        default: 'self'\n    },\n    cols: {\n        type: [Number, String],\n        default: defaultCols\n    },\n    itemResponsive: Boolean,\n    collapsed: Boolean,\n    // may create grid rows < collapsedRows since a item may take all the row\n    collapsedRows: {\n        type: Number,\n        default: 1\n    },\n    itemStyle: [Object, String],\n    xGap: {\n        type: [Number, String],\n        default: 0\n    },\n    yGap: {\n        type: [Number, String],\n        default: 0\n    }\n};\nexport const gridInjectionKey = Symbol('grid');\nexport default defineComponent({\n    name: 'Grid',\n    inheritAttrs: false,\n    props: gridProps,\n    setup(props) {\n        const { mergedClsPrefixRef, NConfigProvider } = useConfig(props);\n        const numRegex = /^\\d+$/;\n        const widthRef = ref(undefined);\n        const breakpointsRef = useBreakpoints((NConfigProvider === null || NConfigProvider === void 0 ? void 0 : NConfigProvider.mergedBreakpointsRef.value) || defaultBreakpoints);\n        const isResponsiveRef = useMemo(() => {\n            if (props.itemResponsive)\n                return true;\n            if (!numRegex.test(props.cols.toString()))\n                return true;\n            if (!numRegex.test(props.xGap.toString()))\n                return true;\n            if (!numRegex.test(props.yGap.toString()))\n                return true;\n            return false;\n        });\n        const responsiveQueryRef = computed(() => {\n            if (!isResponsiveRef.value)\n                return undefined;\n            return props.responsive === 'self' ? widthRef.value : breakpointsRef.value;\n        });\n        const responsiveColsRef = useMemo(() => {\n            var _a;\n            return ((_a = Number(parseResponsivePropValue(props.cols.toString(), responsiveQueryRef.value))) !== null && _a !== void 0 ? _a : defaultCols);\n        });\n        const responsiveXGapRef = useMemo(() => parseResponsivePropValue(props.xGap.toString(), responsiveQueryRef.value));\n        const responsiveYGapRef = useMemo(() => parseResponsivePropValue(props.yGap.toString(), responsiveQueryRef.value));\n        const handleResize = (entry) => {\n            widthRef.value = entry.contentRect.width;\n        };\n        const handleResizeRaf = (entry) => {\n            beforeNextFrameOnce(handleResize, entry);\n        };\n        const overflowRef = ref(false);\n        const handleResizeRef = computed(() => {\n            if (props.responsive === 'self') {\n                return handleResizeRaf;\n            }\n            return undefined;\n        });\n        provide(gridInjectionKey, {\n            itemStyleRef: toRef(props, 'itemStyle'),\n            xGapRef: responsiveXGapRef,\n            overflowRef\n        });\n        return {\n            mergedClsPrefix: mergedClsPrefixRef,\n            style: computed(() => {\n                return {\n                    width: '100%',\n                    display: 'grid',\n                    gridTemplateColumns: `repeat(${responsiveColsRef.value}, minmax(0, 1fr))`,\n                    columnGap: pxfy(responsiveXGapRef.value),\n                    rowGap: pxfy(responsiveYGapRef.value)\n                };\n            }),\n            isResponsive: isResponsiveRef,\n            responsiveQuery: responsiveQueryRef,\n            responsiveCols: responsiveColsRef,\n            handleResize: handleResizeRef,\n            overflow: overflowRef\n        };\n    },\n    render() {\n        const renderContent = () => {\n            var _a, _b, _c, _d, _e, _f;\n            this.overflow = false;\n            // render will be called twice when mounted, I can't figure out why\n            // 2 jobs will be pushed into job queues with same id, and then be flushed\n            const rawChildren = flatten(getSlot(this));\n            const childrenAndRawSpan = [];\n            const { collapsed, collapsedRows, responsiveCols, responsiveQuery } = this;\n            rawChildren.forEach((child) => {\n                var _a, _b, _c;\n                if (((_a = child === null || child === void 0 ? void 0 : child.type) === null || _a === void 0 ? void 0 : _a.__GRID_ITEM__) !== true)\n                    return;\n                const clonedChild = cloneVNode(child);\n                const rawChildSpan = Number((_c = parseResponsivePropValue((_b = clonedChild.props) === null || _b === void 0 ? void 0 : _b.span, responsiveQuery)) !== null && _c !== void 0 ? _c : defaultSpan);\n                if (rawChildSpan === 0)\n                    return;\n                childrenAndRawSpan.push({\n                    child: clonedChild,\n                    rawChildSpan\n                });\n            });\n            let suffixSpan = 0;\n            const maybeSuffixNode = (_a = childrenAndRawSpan[childrenAndRawSpan.length - 1]) === null || _a === void 0 ? void 0 : _a.child;\n            if (maybeSuffixNode === null || maybeSuffixNode === void 0 ? void 0 : maybeSuffixNode.props) {\n                const suffixPropValue = (_b = maybeSuffixNode.props) === null || _b === void 0 ? void 0 : _b.suffix;\n                if (suffixPropValue !== undefined && suffixPropValue !== false) {\n                    suffixSpan = (_d = (_c = maybeSuffixNode.props) === null || _c === void 0 ? void 0 : _c.span) !== null && _d !== void 0 ? _d : defaultSpan;\n                    maybeSuffixNode.props.privateSpan = suffixSpan;\n                    maybeSuffixNode.props.privateColStart =\n                        responsiveCols + 1 - suffixSpan;\n                    maybeSuffixNode.props.privateShow = true;\n                }\n            }\n            let spanCounter = 0;\n            let done = false;\n            for (const { child, rawChildSpan } of childrenAndRawSpan) {\n                if (done) {\n                    this.overflow = true;\n                }\n                if (!done) {\n                    const childOffset = Number((_f = parseResponsivePropValue((_e = child.props) === null || _e === void 0 ? void 0 : _e.offset, responsiveQuery)) !== null && _f !== void 0 ? _f : 0);\n                    const childSpan = Math.min(rawChildSpan + childOffset, responsiveCols) || 1;\n                    if (!child.props) {\n                        child.props = {\n                            privateSpan: childSpan,\n                            privateOffset: childOffset\n                        };\n                    }\n                    else {\n                        child.props.privateSpan = childSpan;\n                        child.props.privateOffset = childOffset;\n                    }\n                    if (collapsed) {\n                        const remainder = spanCounter % responsiveCols;\n                        if (childSpan + remainder > responsiveCols) {\n                            spanCounter += responsiveCols - remainder;\n                        }\n                        if (childSpan + spanCounter + suffixSpan >\n                            collapsedRows * responsiveCols) {\n                            done = true;\n                        }\n                        else {\n                            spanCounter += childSpan;\n                        }\n                    }\n                }\n                if (done) {\n                    if (child.props) {\n                        if (child.props.privateShow !== true) {\n                            child.props.privateShow = false;\n                        }\n                    }\n                    else {\n                        child.props = {\n                            privateShow: false\n                        };\n                    }\n                }\n            }\n            return h('div', mergeProps({\n                class: `${this.mergedClsPrefix}-grid`,\n                style: this.style\n            }, this.$attrs), childrenAndRawSpan.map(({ child }) => child));\n        };\n        return this.isResponsive && this.responsive === 'self' ? (h(VResizeObserver, { onResize: this.handleResize }, {\n            default: renderContent\n        })) : (renderContent());\n    }\n});\n","import { render } from \"./Script.vue?vue&type=template&id=522792ca\"\nimport script from \"./Script.vue?vue&type=script&lang=js\"\nexport * from \"./Script.vue?vue&type=script&lang=js\"\n\nimport \"./Script.vue?vue&type=style&index=0&id=522792ca&lang=css\"\n\nimport exportComponent from \"/Users/yinnnyou/workspace/youyinnn.github.io/node_modules/vue-loader/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__","'use strict';\nvar charAt = require('../internals/string-multibyte').charAt;\n\n// `AdvanceStringIndex` abstract operation\n// https://tc39.es/ecma262/#sec-advancestringindex\nmodule.exports = function (S, index, unicode) {\n  return index + (unicode ? charAt(S, index).length : 1);\n};\n","'use strict';\nvar global = require('../internals/global');\nvar bind = require('../internals/function-bind-context');\nvar call = require('../internals/function-call');\nvar toObject = require('../internals/to-object');\nvar callWithSafeIterationClosing = require('../internals/call-with-safe-iteration-closing');\nvar isArrayIteratorMethod = require('../internals/is-array-iterator-method');\nvar isConstructor = require('../internals/is-constructor');\nvar lengthOfArrayLike = require('../internals/length-of-array-like');\nvar createProperty = require('../internals/create-property');\nvar getIterator = require('../internals/get-iterator');\nvar getIteratorMethod = require('../internals/get-iterator-method');\n\nvar Array = global.Array;\n\n// `Array.from` method implementation\n// https://tc39.es/ecma262/#sec-array.from\nmodule.exports = function from(arrayLike /* , mapfn = undefined, thisArg = undefined */) {\n  var O = toObject(arrayLike);\n  var IS_CONSTRUCTOR = isConstructor(this);\n  var argumentsLength = arguments.length;\n  var mapfn = argumentsLength > 1 ? arguments[1] : undefined;\n  var mapping = mapfn !== undefined;\n  if (mapping) mapfn = bind(mapfn, argumentsLength > 2 ? arguments[2] : undefined);\n  var iteratorMethod = getIteratorMethod(O);\n  var index = 0;\n  var length, result, step, iterator, next, value;\n  // if the target is not iterable or it's an array with the default iterator - use a simple case\n  if (iteratorMethod && !(this == Array && isArrayIteratorMethod(iteratorMethod))) {\n    iterator = getIterator(O, iteratorMethod);\n    next = iterator.next;\n    result = IS_CONSTRUCTOR ? new this() : [];\n    for (;!(step = call(next, iterator)).done; index++) {\n      value = mapping ? callWithSafeIterationClosing(iterator, mapfn, [step.value, index], true) : step.value;\n      createProperty(result, index, value);\n    }\n  } else {\n    length = lengthOfArrayLike(O);\n    result = IS_CONSTRUCTOR ? new this(length) : Array(length);\n    for (;length > index; index++) {\n      value = mapping ? mapfn(O[index], index) : O[index];\n      createProperty(result, index, value);\n    }\n  }\n  result.length = index;\n  return result;\n};\n","var bind = require('../internals/function-bind-context');\nvar uncurryThis = require('../internals/function-uncurry-this');\nvar IndexedObject = require('../internals/indexed-object');\nvar toObject = require('../internals/to-object');\nvar lengthOfArrayLike = require('../internals/length-of-array-like');\nvar arraySpeciesCreate = require('../internals/array-species-create');\n\nvar push = uncurryThis([].push);\n\n// `Array.prototype.{ forEach, map, filter, some, every, find, findIndex, filterReject }` methods implementation\nvar createMethod = function (TYPE) {\n  var IS_MAP = TYPE == 1;\n  var IS_FILTER = TYPE == 2;\n  var IS_SOME = TYPE == 3;\n  var IS_EVERY = TYPE == 4;\n  var IS_FIND_INDEX = TYPE == 6;\n  var IS_FILTER_REJECT = TYPE == 7;\n  var NO_HOLES = TYPE == 5 || IS_FIND_INDEX;\n  return function ($this, callbackfn, that, specificCreate) {\n    var O = toObject($this);\n    var self = IndexedObject(O);\n    var boundFunction = bind(callbackfn, that);\n    var length = lengthOfArrayLike(self);\n    var index = 0;\n    var create = specificCreate || arraySpeciesCreate;\n    var target = IS_MAP ? create($this, length) : IS_FILTER || IS_FILTER_REJECT ? create($this, 0) : undefined;\n    var value, result;\n    for (;length > index; index++) if (NO_HOLES || index in self) {\n      value = self[index];\n      result = boundFunction(value, index, O);\n      if (TYPE) {\n        if (IS_MAP) target[index] = result; // map\n        else if (result) switch (TYPE) {\n          case 3: return true;              // some\n          case 5: return value;             // find\n          case 6: return index;             // findIndex\n          case 2: push(target, value);      // filter\n        } else switch (TYPE) {\n          case 4: return false;             // every\n          case 7: push(target, value);      // filterReject\n        }\n      }\n    }\n    return IS_FIND_INDEX ? -1 : IS_SOME || IS_EVERY ? IS_EVERY : target;\n  };\n};\n\nmodule.exports = {\n  // `Array.prototype.forEach` method\n  // https://tc39.es/ecma262/#sec-array.prototype.foreach\n  forEach: createMethod(0),\n  // `Array.prototype.map` method\n  // https://tc39.es/ecma262/#sec-array.prototype.map\n  map: createMethod(1),\n  // `Array.prototype.filter` method\n  // https://tc39.es/ecma262/#sec-array.prototype.filter\n  filter: createMethod(2),\n  // `Array.prototype.some` method\n  // https://tc39.es/ecma262/#sec-array.prototype.some\n  some: createMethod(3),\n  // `Array.prototype.every` method\n  // https://tc39.es/ecma262/#sec-array.prototype.every\n  every: createMethod(4),\n  // `Array.prototype.find` method\n  // https://tc39.es/ecma262/#sec-array.prototype.find\n  find: createMethod(5),\n  // `Array.prototype.findIndex` method\n  // https://tc39.es/ecma262/#sec-array.prototype.findIndex\n  findIndex: createMethod(6),\n  // `Array.prototype.filterReject` method\n  // https://github.com/tc39/proposal-array-filtering\n  filterReject: createMethod(7)\n};\n","var fails = require('../internals/fails');\nvar wellKnownSymbol = require('../internals/well-known-symbol');\nvar V8_VERSION = require('../internals/engine-v8-version');\n\nvar SPECIES = wellKnownSymbol('species');\n\nmodule.exports = function (METHOD_NAME) {\n  // We can't use this feature detection in V8 since it causes\n  // deoptimization and serious performance degradation\n  // https://github.com/zloirock/core-js/issues/677\n  return V8_VERSION >= 51 || !fails(function () {\n    var array = [];\n    var constructor = array.constructor = {};\n    constructor[SPECIES] = function () {\n      return { foo: 1 };\n    };\n    return array[METHOD_NAME](Boolean).foo !== 1;\n  });\n};\n","var global = require('../internals/global');\nvar toAbsoluteIndex = require('../internals/to-absolute-index');\nvar lengthOfArrayLike = require('../internals/length-of-array-like');\nvar createProperty = require('../internals/create-property');\n\nvar Array = global.Array;\nvar max = Math.max;\n\nmodule.exports = function (O, start, end) {\n  var length = lengthOfArrayLike(O);\n  var k = toAbsoluteIndex(start, length);\n  var fin = toAbsoluteIndex(end === undefined ? length : end, length);\n  var result = Array(max(fin - k, 0));\n  for (var n = 0; k < fin; k++, n++) createProperty(result, n, O[k]);\n  result.length = n;\n  return result;\n};\n","var global = require('../internals/global');\nvar isArray = require('../internals/is-array');\nvar isConstructor = require('../internals/is-constructor');\nvar isObject = require('../internals/is-object');\nvar wellKnownSymbol = require('../internals/well-known-symbol');\n\nvar SPECIES = wellKnownSymbol('species');\nvar Array = global.Array;\n\n// a part of `ArraySpeciesCreate` abstract operation\n// https://tc39.es/ecma262/#sec-arrayspeciescreate\nmodule.exports = function (originalArray) {\n  var C;\n  if (isArray(originalArray)) {\n    C = originalArray.constructor;\n    // cross-realm fallback\n    if (isConstructor(C) && (C === Array || isArray(C.prototype))) C = undefined;\n    else if (isObject(C)) {\n      C = C[SPECIES];\n      if (C === null) C = undefined;\n    }\n  } return C === undefined ? Array : C;\n};\n","var arraySpeciesConstructor = require('../internals/array-species-constructor');\n\n// `ArraySpeciesCreate` abstract operation\n// https://tc39.es/ecma262/#sec-arrayspeciescreate\nmodule.exports = function (originalArray, length) {\n  return new (arraySpeciesConstructor(originalArray))(length === 0 ? 0 : length);\n};\n","var anObject = require('../internals/an-object');\nvar iteratorClose = require('../internals/iterator-close');\n\n// call something on iterator step with safe closing on error\nmodule.exports = function (iterator, fn, value, ENTRIES) {\n  try {\n    return ENTRIES ? fn(anObject(value)[0], value[1]) : fn(value);\n  } catch (error) {\n    iteratorClose(iterator, 'throw', error);\n  }\n};\n","'use strict';\nvar toPropertyKey = require('../internals/to-property-key');\nvar definePropertyModule = require('../internals/object-define-property');\nvar createPropertyDescriptor = require('../internals/create-property-descriptor');\n\nmodule.exports = function (object, key, value) {\n  var propertyKey = toPropertyKey(key);\n  if (propertyKey in object) definePropertyModule.f(object, propertyKey, createPropertyDescriptor(0, value));\n  else object[propertyKey] = value;\n};\n","var path = require('../internals/path');\nvar hasOwn = require('../internals/has-own-property');\nvar wrappedWellKnownSymbolModule = require('../internals/well-known-symbol-wrapped');\nvar defineProperty = require('../internals/object-define-property').f;\n\nmodule.exports = function (NAME) {\n  var Symbol = path.Symbol || (path.Symbol = {});\n  if (!hasOwn(Symbol, NAME)) defineProperty(Symbol, NAME, {\n    value: wrappedWellKnownSymbolModule.f(NAME)\n  });\n};\n","'use strict';\n// TODO: Remove from `core-js@4` since it's moved to entry points\nrequire('../modules/es.regexp.exec');\nvar uncurryThis = require('../internals/function-uncurry-this');\nvar redefine = require('../internals/redefine');\nvar regexpExec = require('../internals/regexp-exec');\nvar fails = require('../internals/fails');\nvar wellKnownSymbol = require('../internals/well-known-symbol');\nvar createNonEnumerableProperty = require('../internals/create-non-enumerable-property');\n\nvar SPECIES = wellKnownSymbol('species');\nvar RegExpPrototype = RegExp.prototype;\n\nmodule.exports = function (KEY, exec, FORCED, SHAM) {\n  var SYMBOL = wellKnownSymbol(KEY);\n\n  var DELEGATES_TO_SYMBOL = !fails(function () {\n    // String methods call symbol-named RegEp methods\n    var O = {};\n    O[SYMBOL] = function () { return 7; };\n    return ''[KEY](O) != 7;\n  });\n\n  var DELEGATES_TO_EXEC = DELEGATES_TO_SYMBOL && !fails(function () {\n    // Symbol-named RegExp methods call .exec\n    var execCalled = false;\n    var re = /a/;\n\n    if (KEY === 'split') {\n      // We can't use real regex here since it causes deoptimization\n      // and serious performance degradation in V8\n      // https://github.com/zloirock/core-js/issues/306\n      re = {};\n      // RegExp[@@split] doesn't call the regex's exec method, but first creates\n      // a new one. We need to return the patched regex when creating the new one.\n      re.constructor = {};\n      re.constructor[SPECIES] = function () { return re; };\n      re.flags = '';\n      re[SYMBOL] = /./[SYMBOL];\n    }\n\n    re.exec = function () { execCalled = true; return null; };\n\n    re[SYMBOL]('');\n    return !execCalled;\n  });\n\n  if (\n    !DELEGATES_TO_SYMBOL ||\n    !DELEGATES_TO_EXEC ||\n    FORCED\n  ) {\n    var uncurriedNativeRegExpMethod = uncurryThis(/./[SYMBOL]);\n    var methods = exec(SYMBOL, ''[KEY], function (nativeMethod, regexp, str, arg2, forceStringMethod) {\n      var uncurriedNativeMethod = uncurryThis(nativeMethod);\n      var $exec = regexp.exec;\n      if ($exec === regexpExec || $exec === RegExpPrototype.exec) {\n        if (DELEGATES_TO_SYMBOL && !forceStringMethod) {\n          // The native String method already delegates to @@method (this\n          // polyfilled function), leasing to infinite recursion.\n          // We avoid it by directly calling the native @@method method.\n          return { done: true, value: uncurriedNativeRegExpMethod(regexp, str, arg2) };\n        }\n        return { done: true, value: uncurriedNativeMethod(str, regexp, arg2) };\n      }\n      return { done: false };\n    });\n\n    redefine(String.prototype, KEY, methods[0]);\n    redefine(RegExpPrototype, SYMBOL, methods[1]);\n  }\n\n  if (SHAM) createNonEnumerableProperty(RegExpPrototype[SYMBOL], 'sham', true);\n};\n","var uncurryThis = require('../internals/function-uncurry-this');\nvar toObject = require('../internals/to-object');\n\nvar floor = Math.floor;\nvar charAt = uncurryThis(''.charAt);\nvar replace = uncurryThis(''.replace);\nvar stringSlice = uncurryThis(''.slice);\nvar SUBSTITUTION_SYMBOLS = /\\$([$&'`]|\\d{1,2}|<[^>]*>)/g;\nvar SUBSTITUTION_SYMBOLS_NO_NAMED = /\\$([$&'`]|\\d{1,2})/g;\n\n// `GetSubstitution` abstract operation\n// https://tc39.es/ecma262/#sec-getsubstitution\nmodule.exports = function (matched, str, position, captures, namedCaptures, replacement) {\n  var tailPos = position + matched.length;\n  var m = captures.length;\n  var symbols = SUBSTITUTION_SYMBOLS_NO_NAMED;\n  if (namedCaptures !== undefined) {\n    namedCaptures = toObject(namedCaptures);\n    symbols = SUBSTITUTION_SYMBOLS;\n  }\n  return replace(replacement, symbols, function (match, ch) {\n    var capture;\n    switch (charAt(ch, 0)) {\n      case '$': return '$';\n      case '&': return matched;\n      case '`': return stringSlice(str, 0, position);\n      case \"'\": return stringSlice(str, tailPos);\n      case '<':\n        capture = namedCaptures[stringSlice(ch, 1, -1)];\n        break;\n      default: // \\d\\d?\n        var n = +ch;\n        if (n === 0) return match;\n        if (n > m) {\n          var f = floor(n / 10);\n          if (f === 0) return match;\n          if (f <= m) return captures[f - 1] === undefined ? charAt(ch, 1) : captures[f - 1] + charAt(ch, 1);\n          return match;\n        }\n        capture = captures[n - 1];\n    }\n    return capture === undefined ? '' : capture;\n  });\n};\n","var classof = require('../internals/classof-raw');\n\n// `IsArray` abstract operation\n// https://tc39.es/ecma262/#sec-isarray\n// eslint-disable-next-line es/no-array-isarray -- safe\nmodule.exports = Array.isArray || function isArray(argument) {\n  return classof(argument) == 'Array';\n};\n","/* eslint-disable es/no-object-getownpropertynames -- safe */\nvar classof = require('../internals/classof-raw');\nvar toIndexedObject = require('../internals/to-indexed-object');\nvar $getOwnPropertyNames = require('../internals/object-get-own-property-names').f;\nvar arraySlice = require('../internals/array-slice-simple');\n\nvar windowNames = typeof window == 'object' && window && Object.getOwnPropertyNames\n  ? Object.getOwnPropertyNames(window) : [];\n\nvar getWindowNames = function (it) {\n  try {\n    return $getOwnPropertyNames(it);\n  } catch (error) {\n    return arraySlice(windowNames);\n  }\n};\n\n// fallback for IE11 buggy Object.getOwnPropertyNames with iframe and window\nmodule.exports.f = function getOwnPropertyNames(it) {\n  return windowNames && classof(it) == 'Window'\n    ? getWindowNames(it)\n    : $getOwnPropertyNames(toIndexedObject(it));\n};\n","var global = require('../internals/global');\n\nmodule.exports = global;\n","var global = require('../internals/global');\nvar call = require('../internals/function-call');\nvar anObject = require('../internals/an-object');\nvar isCallable = require('../internals/is-callable');\nvar classof = require('../internals/classof-raw');\nvar regexpExec = require('../internals/regexp-exec');\n\nvar TypeError = global.TypeError;\n\n// `RegExpExec` abstract operation\n// https://tc39.es/ecma262/#sec-regexpexec\nmodule.exports = function (R, S) {\n  var exec = R.exec;\n  if (isCallable(exec)) {\n    var result = call(exec, R, S);\n    if (result !== null) anObject(result);\n    return result;\n  }\n  if (classof(R) === 'RegExp') return call(regexpExec, R, S);\n  throw TypeError('RegExp#exec called on incompatible receiver');\n};\n","'use strict';\n/* eslint-disable regexp/no-empty-capturing-group, regexp/no-empty-group, regexp/no-lazy-ends -- testing */\n/* eslint-disable regexp/no-useless-quantifier -- testing */\nvar call = require('../internals/function-call');\nvar uncurryThis = require('../internals/function-uncurry-this');\nvar toString = require('../internals/to-string');\nvar regexpFlags = require('../internals/regexp-flags');\nvar stickyHelpers = require('../internals/regexp-sticky-helpers');\nvar shared = require('../internals/shared');\nvar create = require('../internals/object-create');\nvar getInternalState = require('../internals/internal-state').get;\nvar UNSUPPORTED_DOT_ALL = require('../internals/regexp-unsupported-dot-all');\nvar UNSUPPORTED_NCG = require('../internals/regexp-unsupported-ncg');\n\nvar nativeReplace = shared('native-string-replace', String.prototype.replace);\nvar nativeExec = RegExp.prototype.exec;\nvar patchedExec = nativeExec;\nvar charAt = uncurryThis(''.charAt);\nvar indexOf = uncurryThis(''.indexOf);\nvar replace = uncurryThis(''.replace);\nvar stringSlice = uncurryThis(''.slice);\n\nvar UPDATES_LAST_INDEX_WRONG = (function () {\n  var re1 = /a/;\n  var re2 = /b*/g;\n  call(nativeExec, re1, 'a');\n  call(nativeExec, re2, 'a');\n  return re1.lastIndex !== 0 || re2.lastIndex !== 0;\n})();\n\nvar UNSUPPORTED_Y = stickyHelpers.BROKEN_CARET;\n\n// nonparticipating capturing group, copied from es5-shim's String#split patch.\nvar NPCG_INCLUDED = /()??/.exec('')[1] !== undefined;\n\nvar PATCH = UPDATES_LAST_INDEX_WRONG || NPCG_INCLUDED || UNSUPPORTED_Y || UNSUPPORTED_DOT_ALL || UNSUPPORTED_NCG;\n\nif (PATCH) {\n  patchedExec = function exec(string) {\n    var re = this;\n    var state = getInternalState(re);\n    var str = toString(string);\n    var raw = state.raw;\n    var result, reCopy, lastIndex, match, i, object, group;\n\n    if (raw) {\n      raw.lastIndex = re.lastIndex;\n      result = call(patchedExec, raw, str);\n      re.lastIndex = raw.lastIndex;\n      return result;\n    }\n\n    var groups = state.groups;\n    var sticky = UNSUPPORTED_Y && re.sticky;\n    var flags = call(regexpFlags, re);\n    var source = re.source;\n    var charsAdded = 0;\n    var strCopy = str;\n\n    if (sticky) {\n      flags = replace(flags, 'y', '');\n      if (indexOf(flags, 'g') === -1) {\n        flags += 'g';\n      }\n\n      strCopy = stringSlice(str, re.lastIndex);\n      // Support anchored sticky behavior.\n      if (re.lastIndex > 0 && (!re.multiline || re.multiline && charAt(str, re.lastIndex - 1) !== '\\n')) {\n        source = '(?: ' + source + ')';\n        strCopy = ' ' + strCopy;\n        charsAdded++;\n      }\n      // ^(? + rx + ) is needed, in combination with some str slicing, to\n      // simulate the 'y' flag.\n      reCopy = new RegExp('^(?:' + source + ')', flags);\n    }\n\n    if (NPCG_INCLUDED) {\n      reCopy = new RegExp('^' + source + '$(?!\\\\s)', flags);\n    }\n    if (UPDATES_LAST_INDEX_WRONG) lastIndex = re.lastIndex;\n\n    match = call(nativeExec, sticky ? reCopy : re, strCopy);\n\n    if (sticky) {\n      if (match) {\n        match.input = stringSlice(match.input, charsAdded);\n        match[0] = stringSlice(match[0], charsAdded);\n        match.index = re.lastIndex;\n        re.lastIndex += match[0].length;\n      } else re.lastIndex = 0;\n    } else if (UPDATES_LAST_INDEX_WRONG && match) {\n      re.lastIndex = re.global ? match.index + match[0].length : lastIndex;\n    }\n    if (NPCG_INCLUDED && match && match.length > 1) {\n      // Fix browsers whose `exec` methods don't consistently return `undefined`\n      // for NPCG, like IE8. NOTE: This doesn' work for /(.?)?/\n      call(nativeReplace, match[0], reCopy, function () {\n        for (i = 1; i < arguments.length - 2; i++) {\n          if (arguments[i] === undefined) match[i] = undefined;\n        }\n      });\n    }\n\n    if (match && groups) {\n      match.groups = object = create(null);\n      for (i = 0; i < groups.length; i++) {\n        group = groups[i];\n        object[group[0]] = match[group[1]];\n      }\n    }\n\n    return match;\n  };\n}\n\nmodule.exports = patchedExec;\n","'use strict';\nvar anObject = require('../internals/an-object');\n\n// `RegExp.prototype.flags` getter implementation\n// https://tc39.es/ecma262/#sec-get-regexp.prototype.flags\nmodule.exports = function () {\n  var that = anObject(this);\n  var result = '';\n  if (that.global) result += 'g';\n  if (that.ignoreCase) result += 'i';\n  if (that.multiline) result += 'm';\n  if (that.dotAll) result += 's';\n  if (that.unicode) result += 'u';\n  if (that.sticky) result += 'y';\n  return result;\n};\n","var fails = require('../internals/fails');\nvar global = require('../internals/global');\n\n// babel-minify and Closure Compiler transpiles RegExp('a', 'y') -> /a/y and it causes SyntaxError\nvar $RegExp = global.RegExp;\n\nvar UNSUPPORTED_Y = fails(function () {\n  var re = $RegExp('a', 'y');\n  re.lastIndex = 2;\n  return re.exec('abcd') != null;\n});\n\n// UC Browser bug\n// https://github.com/zloirock/core-js/issues/1008\nvar MISSED_STICKY = UNSUPPORTED_Y || fails(function () {\n  return !$RegExp('a', 'y').sticky;\n});\n\nvar BROKEN_CARET = UNSUPPORTED_Y || fails(function () {\n  // https://bugzilla.mozilla.org/show_bug.cgi?id=773687\n  var re = $RegExp('^r', 'gy');\n  re.lastIndex = 2;\n  return re.exec('str') != null;\n});\n\nmodule.exports = {\n  BROKEN_CARET: BROKEN_CARET,\n  MISSED_STICKY: MISSED_STICKY,\n  UNSUPPORTED_Y: UNSUPPORTED_Y\n};\n","var fails = require('../internals/fails');\nvar global = require('../internals/global');\n\n// babel-minify and Closure Compiler transpiles RegExp('.', 's') -> /./s and it causes SyntaxError\nvar $RegExp = global.RegExp;\n\nmodule.exports = fails(function () {\n  var re = $RegExp('.', 's');\n  return !(re.dotAll && re.exec('\\n') && re.flags === 's');\n});\n","var fails = require('../internals/fails');\nvar global = require('../internals/global');\n\n// babel-minify and Closure Compiler transpiles RegExp('(?<a>b)', 'g') -> /(?<a>b)/g and it causes SyntaxError\nvar $RegExp = global.RegExp;\n\nmodule.exports = fails(function () {\n  var re = $RegExp('(?<a>b)', 'g');\n  return re.exec('b').groups.a !== 'b' ||\n    'b'.replace(re, '$<a>c') !== 'bc';\n});\n","var wellKnownSymbol = require('../internals/well-known-symbol');\n\nexports.f = wellKnownSymbol;\n","var $ = require('../internals/export');\nvar from = require('../internals/array-from');\nvar checkCorrectnessOfIteration = require('../internals/check-correctness-of-iteration');\n\nvar INCORRECT_ITERATION = !checkCorrectnessOfIteration(function (iterable) {\n  // eslint-disable-next-line es/no-array-from -- required for testing\n  Array.from(iterable);\n});\n\n// `Array.from` method\n// https://tc39.es/ecma262/#sec-array.from\n$({ target: 'Array', stat: true, forced: INCORRECT_ITERATION }, {\n  from: from\n});\n","'use strict';\nvar $ = require('../internals/export');\nvar global = require('../internals/global');\nvar isArray = require('../internals/is-array');\nvar isConstructor = require('../internals/is-constructor');\nvar isObject = require('../internals/is-object');\nvar toAbsoluteIndex = require('../internals/to-absolute-index');\nvar lengthOfArrayLike = require('../internals/length-of-array-like');\nvar toIndexedObject = require('../internals/to-indexed-object');\nvar createProperty = require('../internals/create-property');\nvar wellKnownSymbol = require('../internals/well-known-symbol');\nvar arrayMethodHasSpeciesSupport = require('../internals/array-method-has-species-support');\nvar un$Slice = require('../internals/array-slice');\n\nvar HAS_SPECIES_SUPPORT = arrayMethodHasSpeciesSupport('slice');\n\nvar SPECIES = wellKnownSymbol('species');\nvar Array = global.Array;\nvar max = Math.max;\n\n// `Array.prototype.slice` method\n// https://tc39.es/ecma262/#sec-array.prototype.slice\n// fallback for not array-like ES3 strings and DOM objects\n$({ target: 'Array', proto: true, forced: !HAS_SPECIES_SUPPORT }, {\n  slice: function slice(start, end) {\n    var O = toIndexedObject(this);\n    var length = lengthOfArrayLike(O);\n    var k = toAbsoluteIndex(start, length);\n    var fin = toAbsoluteIndex(end === undefined ? length : end, length);\n    // inline `ArraySpeciesCreate` for usage native `Array#slice` where it's possible\n    var Constructor, result, n;\n    if (isArray(O)) {\n      Constructor = O.constructor;\n      // cross-realm fallback\n      if (isConstructor(Constructor) && (Constructor === Array || isArray(Constructor.prototype))) {\n        Constructor = undefined;\n      } else if (isObject(Constructor)) {\n        Constructor = Constructor[SPECIES];\n        if (Constructor === null) Constructor = undefined;\n      }\n      if (Constructor === Array || Constructor === undefined) {\n        return un$Slice(O, k, fin);\n      }\n    }\n    result = new (Constructor === undefined ? Array : Constructor)(max(fin - k, 0));\n    for (n = 0; k < fin; k++, n++) if (k in O) createProperty(result, n, O[k]);\n    result.length = n;\n    return result;\n  }\n});\n","'use strict';\nvar $ = require('../internals/export');\nvar exec = require('../internals/regexp-exec');\n\n// `RegExp.prototype.exec` method\n// https://tc39.es/ecma262/#sec-regexp.prototype.exec\n$({ target: 'RegExp', proto: true, forced: /./.exec !== exec }, {\n  exec: exec\n});\n","'use strict';\n// TODO: Remove from `core-js@4` since it's moved to entry points\nrequire('../modules/es.regexp.exec');\nvar $ = require('../internals/export');\nvar global = require('../internals/global');\nvar call = require('../internals/function-call');\nvar uncurryThis = require('../internals/function-uncurry-this');\nvar isCallable = require('../internals/is-callable');\nvar isObject = require('../internals/is-object');\n\nvar DELEGATES_TO_EXEC = function () {\n  var execCalled = false;\n  var re = /[ac]/;\n  re.exec = function () {\n    execCalled = true;\n    return /./.exec.apply(this, arguments);\n  };\n  return re.test('abc') === true && execCalled;\n}();\n\nvar Error = global.Error;\nvar un$Test = uncurryThis(/./.test);\n\n// `RegExp.prototype.test` method\n// https://tc39.es/ecma262/#sec-regexp.prototype.test\n$({ target: 'RegExp', proto: true, forced: !DELEGATES_TO_EXEC }, {\n  test: function (str) {\n    var exec = this.exec;\n    if (!isCallable(exec)) return un$Test(this, str);\n    var result = call(exec, this, str);\n    if (result !== null && !isObject(result)) {\n      throw new Error('RegExp exec method returned something other than an Object or null');\n    }\n    return !!result;\n  }\n});\n","'use strict';\nvar $ = require('../internals/export');\nvar global = require('../internals/global');\nvar call = require('../internals/function-call');\nvar uncurryThis = require('../internals/function-uncurry-this');\nvar requireObjectCoercible = require('../internals/require-object-coercible');\nvar isCallable = require('../internals/is-callable');\nvar isRegExp = require('../internals/is-regexp');\nvar toString = require('../internals/to-string');\nvar getMethod = require('../internals/get-method');\nvar regExpFlags = require('../internals/regexp-flags');\nvar getSubstitution = require('../internals/get-substitution');\nvar wellKnownSymbol = require('../internals/well-known-symbol');\nvar IS_PURE = require('../internals/is-pure');\n\nvar REPLACE = wellKnownSymbol('replace');\nvar RegExpPrototype = RegExp.prototype;\nvar TypeError = global.TypeError;\nvar getFlags = uncurryThis(regExpFlags);\nvar indexOf = uncurryThis(''.indexOf);\nvar replace = uncurryThis(''.replace);\nvar stringSlice = uncurryThis(''.slice);\nvar max = Math.max;\n\nvar stringIndexOf = function (string, searchValue, fromIndex) {\n  if (fromIndex > string.length) return -1;\n  if (searchValue === '') return fromIndex;\n  return indexOf(string, searchValue, fromIndex);\n};\n\n// `String.prototype.replaceAll` method\n// https://tc39.es/ecma262/#sec-string.prototype.replaceall\n$({ target: 'String', proto: true }, {\n  replaceAll: function replaceAll(searchValue, replaceValue) {\n    var O = requireObjectCoercible(this);\n    var IS_REG_EXP, flags, replacer, string, searchString, functionalReplace, searchLength, advanceBy, replacement;\n    var position = 0;\n    var endOfLastMatch = 0;\n    var result = '';\n    if (searchValue != null) {\n      IS_REG_EXP = isRegExp(searchValue);\n      if (IS_REG_EXP) {\n        flags = toString(requireObjectCoercible('flags' in RegExpPrototype\n          ? searchValue.flags\n          : getFlags(searchValue)\n        ));\n        if (!~indexOf(flags, 'g')) throw TypeError('`.replaceAll` does not allow non-global regexes');\n      }\n      replacer = getMethod(searchValue, REPLACE);\n      if (replacer) {\n        return call(replacer, searchValue, O, replaceValue);\n      } else if (IS_PURE && IS_REG_EXP) {\n        return replace(toString(O), searchValue, replaceValue);\n      }\n    }\n    string = toString(O);\n    searchString = toString(searchValue);\n    functionalReplace = isCallable(replaceValue);\n    if (!functionalReplace) replaceValue = toString(replaceValue);\n    searchLength = searchString.length;\n    advanceBy = max(1, searchLength);\n    position = stringIndexOf(string, searchString, 0);\n    while (position !== -1) {\n      replacement = functionalReplace\n        ? toString(replaceValue(searchString, position, string))\n        : getSubstitution(searchString, string, position, [], undefined, replaceValue);\n      result += stringSlice(string, endOfLastMatch, position) + replacement;\n      endOfLastMatch = position + searchLength;\n      position = stringIndexOf(string, searchString, position + advanceBy);\n    }\n    if (endOfLastMatch < string.length) {\n      result += stringSlice(string, endOfLastMatch);\n    }\n    return result;\n  }\n});\n","'use strict';\nvar apply = require('../internals/function-apply');\nvar call = require('../internals/function-call');\nvar uncurryThis = require('../internals/function-uncurry-this');\nvar fixRegExpWellKnownSymbolLogic = require('../internals/fix-regexp-well-known-symbol-logic');\nvar fails = require('../internals/fails');\nvar anObject = require('../internals/an-object');\nvar isCallable = require('../internals/is-callable');\nvar toIntegerOrInfinity = require('../internals/to-integer-or-infinity');\nvar toLength = require('../internals/to-length');\nvar toString = require('../internals/to-string');\nvar requireObjectCoercible = require('../internals/require-object-coercible');\nvar advanceStringIndex = require('../internals/advance-string-index');\nvar getMethod = require('../internals/get-method');\nvar getSubstitution = require('../internals/get-substitution');\nvar regExpExec = require('../internals/regexp-exec-abstract');\nvar wellKnownSymbol = require('../internals/well-known-symbol');\n\nvar REPLACE = wellKnownSymbol('replace');\nvar max = Math.max;\nvar min = Math.min;\nvar concat = uncurryThis([].concat);\nvar push = uncurryThis([].push);\nvar stringIndexOf = uncurryThis(''.indexOf);\nvar stringSlice = uncurryThis(''.slice);\n\nvar maybeToString = function (it) {\n  return it === undefined ? it : String(it);\n};\n\n// IE <= 11 replaces $0 with the whole match, as if it was $&\n// https://stackoverflow.com/questions/6024666/getting-ie-to-replace-a-regex-with-the-literal-string-0\nvar REPLACE_KEEPS_$0 = (function () {\n  // eslint-disable-next-line regexp/prefer-escape-replacement-dollar-char -- required for testing\n  return 'a'.replace(/./, '$0') === '$0';\n})();\n\n// Safari <= 13.0.3(?) substitutes nth capture where n>m with an empty string\nvar REGEXP_REPLACE_SUBSTITUTES_UNDEFINED_CAPTURE = (function () {\n  if (/./[REPLACE]) {\n    return /./[REPLACE]('a', '$0') === '';\n  }\n  return false;\n})();\n\nvar REPLACE_SUPPORTS_NAMED_GROUPS = !fails(function () {\n  var re = /./;\n  re.exec = function () {\n    var result = [];\n    result.groups = { a: '7' };\n    return result;\n  };\n  // eslint-disable-next-line regexp/no-useless-dollar-replacements -- false positive\n  return ''.replace(re, '$<a>') !== '7';\n});\n\n// @@replace logic\nfixRegExpWellKnownSymbolLogic('replace', function (_, nativeReplace, maybeCallNative) {\n  var UNSAFE_SUBSTITUTE = REGEXP_REPLACE_SUBSTITUTES_UNDEFINED_CAPTURE ? '$' : '$0';\n\n  return [\n    // `String.prototype.replace` method\n    // https://tc39.es/ecma262/#sec-string.prototype.replace\n    function replace(searchValue, replaceValue) {\n      var O = requireObjectCoercible(this);\n      var replacer = searchValue == undefined ? undefined : getMethod(searchValue, REPLACE);\n      return replacer\n        ? call(replacer, searchValue, O, replaceValue)\n        : call(nativeReplace, toString(O), searchValue, replaceValue);\n    },\n    // `RegExp.prototype[@@replace]` method\n    // https://tc39.es/ecma262/#sec-regexp.prototype-@@replace\n    function (string, replaceValue) {\n      var rx = anObject(this);\n      var S = toString(string);\n\n      if (\n        typeof replaceValue == 'string' &&\n        stringIndexOf(replaceValue, UNSAFE_SUBSTITUTE) === -1 &&\n        stringIndexOf(replaceValue, '$<') === -1\n      ) {\n        var res = maybeCallNative(nativeReplace, rx, S, replaceValue);\n        if (res.done) return res.value;\n      }\n\n      var functionalReplace = isCallable(replaceValue);\n      if (!functionalReplace) replaceValue = toString(replaceValue);\n\n      var global = rx.global;\n      if (global) {\n        var fullUnicode = rx.unicode;\n        rx.lastIndex = 0;\n      }\n      var results = [];\n      while (true) {\n        var result = regExpExec(rx, S);\n        if (result === null) break;\n\n        push(results, result);\n        if (!global) break;\n\n        var matchStr = toString(result[0]);\n        if (matchStr === '') rx.lastIndex = advanceStringIndex(S, toLength(rx.lastIndex), fullUnicode);\n      }\n\n      var accumulatedResult = '';\n      var nextSourcePosition = 0;\n      for (var i = 0; i < results.length; i++) {\n        result = results[i];\n\n        var matched = toString(result[0]);\n        var position = max(min(toIntegerOrInfinity(result.index), S.length), 0);\n        var captures = [];\n        // NOTE: This is equivalent to\n        //   captures = result.slice(1).map(maybeToString)\n        // but for some reason `nativeSlice.call(result, 1, result.length)` (called in\n        // the slice polyfill when slicing native arrays) \"doesn't work\" in safari 9 and\n        // causes a crash (https://pastebin.com/N21QzeQA) when trying to debug it.\n        for (var j = 1; j < result.length; j++) push(captures, maybeToString(result[j]));\n        var namedCaptures = result.groups;\n        if (functionalReplace) {\n          var replacerArgs = concat([matched], captures, position, S);\n          if (namedCaptures !== undefined) push(replacerArgs, namedCaptures);\n          var replacement = toString(apply(replaceValue, undefined, replacerArgs));\n        } else {\n          replacement = getSubstitution(matched, S, position, captures, namedCaptures, replaceValue);\n        }\n        if (position >= nextSourcePosition) {\n          accumulatedResult += stringSlice(S, nextSourcePosition, position) + replacement;\n          nextSourcePosition = position + matched.length;\n        }\n      }\n      return accumulatedResult + stringSlice(S, nextSourcePosition);\n    }\n  ];\n}, !REPLACE_SUPPORTS_NAMED_GROUPS || !REPLACE_KEEPS_$0 || REGEXP_REPLACE_SUBSTITUTES_UNDEFINED_CAPTURE);\n","'use strict';\nvar apply = require('../internals/function-apply');\nvar call = require('../internals/function-call');\nvar uncurryThis = require('../internals/function-uncurry-this');\nvar fixRegExpWellKnownSymbolLogic = require('../internals/fix-regexp-well-known-symbol-logic');\nvar isRegExp = require('../internals/is-regexp');\nvar anObject = require('../internals/an-object');\nvar requireObjectCoercible = require('../internals/require-object-coercible');\nvar speciesConstructor = require('../internals/species-constructor');\nvar advanceStringIndex = require('../internals/advance-string-index');\nvar toLength = require('../internals/to-length');\nvar toString = require('../internals/to-string');\nvar getMethod = require('../internals/get-method');\nvar arraySlice = require('../internals/array-slice-simple');\nvar callRegExpExec = require('../internals/regexp-exec-abstract');\nvar regexpExec = require('../internals/regexp-exec');\nvar stickyHelpers = require('../internals/regexp-sticky-helpers');\nvar fails = require('../internals/fails');\n\nvar UNSUPPORTED_Y = stickyHelpers.UNSUPPORTED_Y;\nvar MAX_UINT32 = 0xFFFFFFFF;\nvar min = Math.min;\nvar $push = [].push;\nvar exec = uncurryThis(/./.exec);\nvar push = uncurryThis($push);\nvar stringSlice = uncurryThis(''.slice);\n\n// Chrome 51 has a buggy \"split\" implementation when RegExp#exec !== nativeExec\n// Weex JS has frozen built-in prototypes, so use try / catch wrapper\nvar SPLIT_WORKS_WITH_OVERWRITTEN_EXEC = !fails(function () {\n  // eslint-disable-next-line regexp/no-empty-group -- required for testing\n  var re = /(?:)/;\n  var originalExec = re.exec;\n  re.exec = function () { return originalExec.apply(this, arguments); };\n  var result = 'ab'.split(re);\n  return result.length !== 2 || result[0] !== 'a' || result[1] !== 'b';\n});\n\n// @@split logic\nfixRegExpWellKnownSymbolLogic('split', function (SPLIT, nativeSplit, maybeCallNative) {\n  var internalSplit;\n  if (\n    'abbc'.split(/(b)*/)[1] == 'c' ||\n    // eslint-disable-next-line regexp/no-empty-group -- required for testing\n    'test'.split(/(?:)/, -1).length != 4 ||\n    'ab'.split(/(?:ab)*/).length != 2 ||\n    '.'.split(/(.?)(.?)/).length != 4 ||\n    // eslint-disable-next-line regexp/no-empty-capturing-group, regexp/no-empty-group -- required for testing\n    '.'.split(/()()/).length > 1 ||\n    ''.split(/.?/).length\n  ) {\n    // based on es5-shim implementation, need to rework it\n    internalSplit = function (separator, limit) {\n      var string = toString(requireObjectCoercible(this));\n      var lim = limit === undefined ? MAX_UINT32 : limit >>> 0;\n      if (lim === 0) return [];\n      if (separator === undefined) return [string];\n      // If `separator` is not a regex, use native split\n      if (!isRegExp(separator)) {\n        return call(nativeSplit, string, separator, lim);\n      }\n      var output = [];\n      var flags = (separator.ignoreCase ? 'i' : '') +\n                  (separator.multiline ? 'm' : '') +\n                  (separator.unicode ? 'u' : '') +\n                  (separator.sticky ? 'y' : '');\n      var lastLastIndex = 0;\n      // Make `global` and avoid `lastIndex` issues by working with a copy\n      var separatorCopy = new RegExp(separator.source, flags + 'g');\n      var match, lastIndex, lastLength;\n      while (match = call(regexpExec, separatorCopy, string)) {\n        lastIndex = separatorCopy.lastIndex;\n        if (lastIndex > lastLastIndex) {\n          push(output, stringSlice(string, lastLastIndex, match.index));\n          if (match.length > 1 && match.index < string.length) apply($push, output, arraySlice(match, 1));\n          lastLength = match[0].length;\n          lastLastIndex = lastIndex;\n          if (output.length >= lim) break;\n        }\n        if (separatorCopy.lastIndex === match.index) separatorCopy.lastIndex++; // Avoid an infinite loop\n      }\n      if (lastLastIndex === string.length) {\n        if (lastLength || !exec(separatorCopy, '')) push(output, '');\n      } else push(output, stringSlice(string, lastLastIndex));\n      return output.length > lim ? arraySlice(output, 0, lim) : output;\n    };\n  // Chakra, V8\n  } else if ('0'.split(undefined, 0).length) {\n    internalSplit = function (separator, limit) {\n      return separator === undefined && limit === 0 ? [] : call(nativeSplit, this, separator, limit);\n    };\n  } else internalSplit = nativeSplit;\n\n  return [\n    // `String.prototype.split` method\n    // https://tc39.es/ecma262/#sec-string.prototype.split\n    function split(separator, limit) {\n      var O = requireObjectCoercible(this);\n      var splitter = separator == undefined ? undefined : getMethod(separator, SPLIT);\n      return splitter\n        ? call(splitter, separator, O, limit)\n        : call(internalSplit, toString(O), separator, limit);\n    },\n    // `RegExp.prototype[@@split]` method\n    // https://tc39.es/ecma262/#sec-regexp.prototype-@@split\n    //\n    // NOTE: This cannot be properly polyfilled in engines that don't support\n    // the 'y' flag.\n    function (string, limit) {\n      var rx = anObject(this);\n      var S = toString(string);\n      var res = maybeCallNative(internalSplit, rx, S, limit, internalSplit !== nativeSplit);\n\n      if (res.done) return res.value;\n\n      var C = speciesConstructor(rx, RegExp);\n\n      var unicodeMatching = rx.unicode;\n      var flags = (rx.ignoreCase ? 'i' : '') +\n                  (rx.multiline ? 'm' : '') +\n                  (rx.unicode ? 'u' : '') +\n                  (UNSUPPORTED_Y ? 'g' : 'y');\n\n      // ^(? + rx + ) is needed, in combination with some S slicing, to\n      // simulate the 'y' flag.\n      var splitter = new C(UNSUPPORTED_Y ? '^(?:' + rx.source + ')' : rx, flags);\n      var lim = limit === undefined ? MAX_UINT32 : limit >>> 0;\n      if (lim === 0) return [];\n      if (S.length === 0) return callRegExpExec(splitter, S) === null ? [S] : [];\n      var p = 0;\n      var q = 0;\n      var A = [];\n      while (q < S.length) {\n        splitter.lastIndex = UNSUPPORTED_Y ? 0 : q;\n        var z = callRegExpExec(splitter, UNSUPPORTED_Y ? stringSlice(S, q) : S);\n        var e;\n        if (\n          z === null ||\n          (e = min(toLength(splitter.lastIndex + (UNSUPPORTED_Y ? q : 0)), S.length)) === p\n        ) {\n          q = advanceStringIndex(S, q, unicodeMatching);\n        } else {\n          push(A, stringSlice(S, p, q));\n          if (A.length === lim) return A;\n          for (var i = 1; i <= z.length - 1; i++) {\n            push(A, z[i]);\n            if (A.length === lim) return A;\n          }\n          q = p = e;\n        }\n      }\n      push(A, stringSlice(S, p));\n      return A;\n    }\n  ];\n}, !SPLIT_WORKS_WITH_OVERWRITTEN_EXEC, UNSUPPORTED_Y);\n","// `Symbol.prototype.description` getter\n// https://tc39.es/ecma262/#sec-symbol.prototype.description\n'use strict';\nvar $ = require('../internals/export');\nvar DESCRIPTORS = require('../internals/descriptors');\nvar global = require('../internals/global');\nvar uncurryThis = require('../internals/function-uncurry-this');\nvar hasOwn = require('../internals/has-own-property');\nvar isCallable = require('../internals/is-callable');\nvar isPrototypeOf = require('../internals/object-is-prototype-of');\nvar toString = require('../internals/to-string');\nvar defineProperty = require('../internals/object-define-property').f;\nvar copyConstructorProperties = require('../internals/copy-constructor-properties');\n\nvar NativeSymbol = global.Symbol;\nvar SymbolPrototype = NativeSymbol && NativeSymbol.prototype;\n\nif (DESCRIPTORS && isCallable(NativeSymbol) && (!('description' in SymbolPrototype) ||\n  // Safari 12 bug\n  NativeSymbol().description !== undefined\n)) {\n  var EmptyStringDescriptionStore = {};\n  // wrap Symbol constructor for correct work with undefined description\n  var SymbolWrapper = function Symbol() {\n    var description = arguments.length < 1 || arguments[0] === undefined ? undefined : toString(arguments[0]);\n    var result = isPrototypeOf(SymbolPrototype, this)\n      ? new NativeSymbol(description)\n      // in Edge 13, String(Symbol(undefined)) === 'Symbol(undefined)'\n      : description === undefined ? NativeSymbol() : NativeSymbol(description);\n    if (description === '') EmptyStringDescriptionStore[result] = true;\n    return result;\n  };\n\n  copyConstructorProperties(SymbolWrapper, NativeSymbol);\n  SymbolWrapper.prototype = SymbolPrototype;\n  SymbolPrototype.constructor = SymbolWrapper;\n\n  var NATIVE_SYMBOL = String(NativeSymbol('test')) == 'Symbol(test)';\n  var symbolToString = uncurryThis(SymbolPrototype.toString);\n  var symbolValueOf = uncurryThis(SymbolPrototype.valueOf);\n  var regexp = /^Symbol\\((.*)\\)[^)]+$/;\n  var replace = uncurryThis(''.replace);\n  var stringSlice = uncurryThis(''.slice);\n\n  defineProperty(SymbolPrototype, 'description', {\n    configurable: true,\n    get: function description() {\n      var symbol = symbolValueOf(this);\n      var string = symbolToString(symbol);\n      if (hasOwn(EmptyStringDescriptionStore, symbol)) return '';\n      var desc = NATIVE_SYMBOL ? stringSlice(string, 7, -1) : replace(string, regexp, '$1');\n      return desc === '' ? undefined : desc;\n    }\n  });\n\n  $({ global: true, forced: true }, {\n    Symbol: SymbolWrapper\n  });\n}\n","var defineWellKnownSymbol = require('../internals/define-well-known-symbol');\n\n// `Symbol.iterator` well-known symbol\n// https://tc39.es/ecma262/#sec-symbol.iterator\ndefineWellKnownSymbol('iterator');\n","'use strict';\nvar $ = require('../internals/export');\nvar global = require('../internals/global');\nvar getBuiltIn = require('../internals/get-built-in');\nvar apply = require('../internals/function-apply');\nvar call = require('../internals/function-call');\nvar uncurryThis = require('../internals/function-uncurry-this');\nvar IS_PURE = require('../internals/is-pure');\nvar DESCRIPTORS = require('../internals/descriptors');\nvar NATIVE_SYMBOL = require('../internals/native-symbol');\nvar fails = require('../internals/fails');\nvar hasOwn = require('../internals/has-own-property');\nvar isArray = require('../internals/is-array');\nvar isCallable = require('../internals/is-callable');\nvar isObject = require('../internals/is-object');\nvar isPrototypeOf = require('../internals/object-is-prototype-of');\nvar isSymbol = require('../internals/is-symbol');\nvar anObject = require('../internals/an-object');\nvar toObject = require('../internals/to-object');\nvar toIndexedObject = require('../internals/to-indexed-object');\nvar toPropertyKey = require('../internals/to-property-key');\nvar $toString = require('../internals/to-string');\nvar createPropertyDescriptor = require('../internals/create-property-descriptor');\nvar nativeObjectCreate = require('../internals/object-create');\nvar objectKeys = require('../internals/object-keys');\nvar getOwnPropertyNamesModule = require('../internals/object-get-own-property-names');\nvar getOwnPropertyNamesExternal = require('../internals/object-get-own-property-names-external');\nvar getOwnPropertySymbolsModule = require('../internals/object-get-own-property-symbols');\nvar getOwnPropertyDescriptorModule = require('../internals/object-get-own-property-descriptor');\nvar definePropertyModule = require('../internals/object-define-property');\nvar propertyIsEnumerableModule = require('../internals/object-property-is-enumerable');\nvar arraySlice = require('../internals/array-slice');\nvar redefine = require('../internals/redefine');\nvar shared = require('../internals/shared');\nvar sharedKey = require('../internals/shared-key');\nvar hiddenKeys = require('../internals/hidden-keys');\nvar uid = require('../internals/uid');\nvar wellKnownSymbol = require('../internals/well-known-symbol');\nvar wrappedWellKnownSymbolModule = require('../internals/well-known-symbol-wrapped');\nvar defineWellKnownSymbol = require('../internals/define-well-known-symbol');\nvar setToStringTag = require('../internals/set-to-string-tag');\nvar InternalStateModule = require('../internals/internal-state');\nvar $forEach = require('../internals/array-iteration').forEach;\n\nvar HIDDEN = sharedKey('hidden');\nvar SYMBOL = 'Symbol';\nvar PROTOTYPE = 'prototype';\nvar TO_PRIMITIVE = wellKnownSymbol('toPrimitive');\n\nvar setInternalState = InternalStateModule.set;\nvar getInternalState = InternalStateModule.getterFor(SYMBOL);\n\nvar ObjectPrototype = Object[PROTOTYPE];\nvar $Symbol = global.Symbol;\nvar SymbolPrototype = $Symbol && $Symbol[PROTOTYPE];\nvar TypeError = global.TypeError;\nvar QObject = global.QObject;\nvar $stringify = getBuiltIn('JSON', 'stringify');\nvar nativeGetOwnPropertyDescriptor = getOwnPropertyDescriptorModule.f;\nvar nativeDefineProperty = definePropertyModule.f;\nvar nativeGetOwnPropertyNames = getOwnPropertyNamesExternal.f;\nvar nativePropertyIsEnumerable = propertyIsEnumerableModule.f;\nvar push = uncurryThis([].push);\n\nvar AllSymbols = shared('symbols');\nvar ObjectPrototypeSymbols = shared('op-symbols');\nvar StringToSymbolRegistry = shared('string-to-symbol-registry');\nvar SymbolToStringRegistry = shared('symbol-to-string-registry');\nvar WellKnownSymbolsStore = shared('wks');\n\n// Don't use setters in Qt Script, https://github.com/zloirock/core-js/issues/173\nvar USE_SETTER = !QObject || !QObject[PROTOTYPE] || !QObject[PROTOTYPE].findChild;\n\n// fallback for old Android, https://code.google.com/p/v8/issues/detail?id=687\nvar setSymbolDescriptor = DESCRIPTORS && fails(function () {\n  return nativeObjectCreate(nativeDefineProperty({}, 'a', {\n    get: function () { return nativeDefineProperty(this, 'a', { value: 7 }).a; }\n  })).a != 7;\n}) ? function (O, P, Attributes) {\n  var ObjectPrototypeDescriptor = nativeGetOwnPropertyDescriptor(ObjectPrototype, P);\n  if (ObjectPrototypeDescriptor) delete ObjectPrototype[P];\n  nativeDefineProperty(O, P, Attributes);\n  if (ObjectPrototypeDescriptor && O !== ObjectPrototype) {\n    nativeDefineProperty(ObjectPrototype, P, ObjectPrototypeDescriptor);\n  }\n} : nativeDefineProperty;\n\nvar wrap = function (tag, description) {\n  var symbol = AllSymbols[tag] = nativeObjectCreate(SymbolPrototype);\n  setInternalState(symbol, {\n    type: SYMBOL,\n    tag: tag,\n    description: description\n  });\n  if (!DESCRIPTORS) symbol.description = description;\n  return symbol;\n};\n\nvar $defineProperty = function defineProperty(O, P, Attributes) {\n  if (O === ObjectPrototype) $defineProperty(ObjectPrototypeSymbols, P, Attributes);\n  anObject(O);\n  var key = toPropertyKey(P);\n  anObject(Attributes);\n  if (hasOwn(AllSymbols, key)) {\n    if (!Attributes.enumerable) {\n      if (!hasOwn(O, HIDDEN)) nativeDefineProperty(O, HIDDEN, createPropertyDescriptor(1, {}));\n      O[HIDDEN][key] = true;\n    } else {\n      if (hasOwn(O, HIDDEN) && O[HIDDEN][key]) O[HIDDEN][key] = false;\n      Attributes = nativeObjectCreate(Attributes, { enumerable: createPropertyDescriptor(0, false) });\n    } return setSymbolDescriptor(O, key, Attributes);\n  } return nativeDefineProperty(O, key, Attributes);\n};\n\nvar $defineProperties = function defineProperties(O, Properties) {\n  anObject(O);\n  var properties = toIndexedObject(Properties);\n  var keys = objectKeys(properties).concat($getOwnPropertySymbols(properties));\n  $forEach(keys, function (key) {\n    if (!DESCRIPTORS || call($propertyIsEnumerable, properties, key)) $defineProperty(O, key, properties[key]);\n  });\n  return O;\n};\n\nvar $create = function create(O, Properties) {\n  return Properties === undefined ? nativeObjectCreate(O) : $defineProperties(nativeObjectCreate(O), Properties);\n};\n\nvar $propertyIsEnumerable = function propertyIsEnumerable(V) {\n  var P = toPropertyKey(V);\n  var enumerable = call(nativePropertyIsEnumerable, this, P);\n  if (this === ObjectPrototype && hasOwn(AllSymbols, P) && !hasOwn(ObjectPrototypeSymbols, P)) return false;\n  return enumerable || !hasOwn(this, P) || !hasOwn(AllSymbols, P) || hasOwn(this, HIDDEN) && this[HIDDEN][P]\n    ? enumerable : true;\n};\n\nvar $getOwnPropertyDescriptor = function getOwnPropertyDescriptor(O, P) {\n  var it = toIndexedObject(O);\n  var key = toPropertyKey(P);\n  if (it === ObjectPrototype && hasOwn(AllSymbols, key) && !hasOwn(ObjectPrototypeSymbols, key)) return;\n  var descriptor = nativeGetOwnPropertyDescriptor(it, key);\n  if (descriptor && hasOwn(AllSymbols, key) && !(hasOwn(it, HIDDEN) && it[HIDDEN][key])) {\n    descriptor.enumerable = true;\n  }\n  return descriptor;\n};\n\nvar $getOwnPropertyNames = function getOwnPropertyNames(O) {\n  var names = nativeGetOwnPropertyNames(toIndexedObject(O));\n  var result = [];\n  $forEach(names, function (key) {\n    if (!hasOwn(AllSymbols, key) && !hasOwn(hiddenKeys, key)) push(result, key);\n  });\n  return result;\n};\n\nvar $getOwnPropertySymbols = function getOwnPropertySymbols(O) {\n  var IS_OBJECT_PROTOTYPE = O === ObjectPrototype;\n  var names = nativeGetOwnPropertyNames(IS_OBJECT_PROTOTYPE ? ObjectPrototypeSymbols : toIndexedObject(O));\n  var result = [];\n  $forEach(names, function (key) {\n    if (hasOwn(AllSymbols, key) && (!IS_OBJECT_PROTOTYPE || hasOwn(ObjectPrototype, key))) {\n      push(result, AllSymbols[key]);\n    }\n  });\n  return result;\n};\n\n// `Symbol` constructor\n// https://tc39.es/ecma262/#sec-symbol-constructor\nif (!NATIVE_SYMBOL) {\n  $Symbol = function Symbol() {\n    if (isPrototypeOf(SymbolPrototype, this)) throw TypeError('Symbol is not a constructor');\n    var description = !arguments.length || arguments[0] === undefined ? undefined : $toString(arguments[0]);\n    var tag = uid(description);\n    var setter = function (value) {\n      if (this === ObjectPrototype) call(setter, ObjectPrototypeSymbols, value);\n      if (hasOwn(this, HIDDEN) && hasOwn(this[HIDDEN], tag)) this[HIDDEN][tag] = false;\n      setSymbolDescriptor(this, tag, createPropertyDescriptor(1, value));\n    };\n    if (DESCRIPTORS && USE_SETTER) setSymbolDescriptor(ObjectPrototype, tag, { configurable: true, set: setter });\n    return wrap(tag, description);\n  };\n\n  SymbolPrototype = $Symbol[PROTOTYPE];\n\n  redefine(SymbolPrototype, 'toString', function toString() {\n    return getInternalState(this).tag;\n  });\n\n  redefine($Symbol, 'withoutSetter', function (description) {\n    return wrap(uid(description), description);\n  });\n\n  propertyIsEnumerableModule.f = $propertyIsEnumerable;\n  definePropertyModule.f = $defineProperty;\n  getOwnPropertyDescriptorModule.f = $getOwnPropertyDescriptor;\n  getOwnPropertyNamesModule.f = getOwnPropertyNamesExternal.f = $getOwnPropertyNames;\n  getOwnPropertySymbolsModule.f = $getOwnPropertySymbols;\n\n  wrappedWellKnownSymbolModule.f = function (name) {\n    return wrap(wellKnownSymbol(name), name);\n  };\n\n  if (DESCRIPTORS) {\n    // https://github.com/tc39/proposal-Symbol-description\n    nativeDefineProperty(SymbolPrototype, 'description', {\n      configurable: true,\n      get: function description() {\n        return getInternalState(this).description;\n      }\n    });\n    if (!IS_PURE) {\n      redefine(ObjectPrototype, 'propertyIsEnumerable', $propertyIsEnumerable, { unsafe: true });\n    }\n  }\n}\n\n$({ global: true, wrap: true, forced: !NATIVE_SYMBOL, sham: !NATIVE_SYMBOL }, {\n  Symbol: $Symbol\n});\n\n$forEach(objectKeys(WellKnownSymbolsStore), function (name) {\n  defineWellKnownSymbol(name);\n});\n\n$({ target: SYMBOL, stat: true, forced: !NATIVE_SYMBOL }, {\n  // `Symbol.for` method\n  // https://tc39.es/ecma262/#sec-symbol.for\n  'for': function (key) {\n    var string = $toString(key);\n    if (hasOwn(StringToSymbolRegistry, string)) return StringToSymbolRegistry[string];\n    var symbol = $Symbol(string);\n    StringToSymbolRegistry[string] = symbol;\n    SymbolToStringRegistry[symbol] = string;\n    return symbol;\n  },\n  // `Symbol.keyFor` method\n  // https://tc39.es/ecma262/#sec-symbol.keyfor\n  keyFor: function keyFor(sym) {\n    if (!isSymbol(sym)) throw TypeError(sym + ' is not a symbol');\n    if (hasOwn(SymbolToStringRegistry, sym)) return SymbolToStringRegistry[sym];\n  },\n  useSetter: function () { USE_SETTER = true; },\n  useSimple: function () { USE_SETTER = false; }\n});\n\n$({ target: 'Object', stat: true, forced: !NATIVE_SYMBOL, sham: !DESCRIPTORS }, {\n  // `Object.create` method\n  // https://tc39.es/ecma262/#sec-object.create\n  create: $create,\n  // `Object.defineProperty` method\n  // https://tc39.es/ecma262/#sec-object.defineproperty\n  defineProperty: $defineProperty,\n  // `Object.defineProperties` method\n  // https://tc39.es/ecma262/#sec-object.defineproperties\n  defineProperties: $defineProperties,\n  // `Object.getOwnPropertyDescriptor` method\n  // https://tc39.es/ecma262/#sec-object.getownpropertydescriptors\n  getOwnPropertyDescriptor: $getOwnPropertyDescriptor\n});\n\n$({ target: 'Object', stat: true, forced: !NATIVE_SYMBOL }, {\n  // `Object.getOwnPropertyNames` method\n  // https://tc39.es/ecma262/#sec-object.getownpropertynames\n  getOwnPropertyNames: $getOwnPropertyNames,\n  // `Object.getOwnPropertySymbols` method\n  // https://tc39.es/ecma262/#sec-object.getownpropertysymbols\n  getOwnPropertySymbols: $getOwnPropertySymbols\n});\n\n// Chrome 38 and 39 `Object.getOwnPropertySymbols` fails on primitives\n// https://bugs.chromium.org/p/v8/issues/detail?id=3443\n$({ target: 'Object', stat: true, forced: fails(function () { getOwnPropertySymbolsModule.f(1); }) }, {\n  getOwnPropertySymbols: function getOwnPropertySymbols(it) {\n    return getOwnPropertySymbolsModule.f(toObject(it));\n  }\n});\n\n// `JSON.stringify` method behavior with symbols\n// https://tc39.es/ecma262/#sec-json.stringify\nif ($stringify) {\n  var FORCED_JSON_STRINGIFY = !NATIVE_SYMBOL || fails(function () {\n    var symbol = $Symbol();\n    // MS Edge converts symbol values to JSON as {}\n    return $stringify([symbol]) != '[null]'\n      // WebKit converts symbol values to JSON as null\n      || $stringify({ a: symbol }) != '{}'\n      // V8 throws on boxed symbols\n      || $stringify(Object(symbol)) != '{}';\n  });\n\n  $({ target: 'JSON', stat: true, forced: FORCED_JSON_STRINGIFY }, {\n    // eslint-disable-next-line no-unused-vars -- required for `.length`\n    stringify: function stringify(it, replacer, space) {\n      var args = arraySlice(arguments);\n      var $replacer = replacer;\n      if (!isObject(replacer) && it === undefined || isSymbol(it)) return; // IE8 returns string on undefined\n      if (!isArray(replacer)) replacer = function (key, value) {\n        if (isCallable($replacer)) value = call($replacer, this, key, value);\n        if (!isSymbol(value)) return value;\n      };\n      args[1] = replacer;\n      return apply($stringify, null, args);\n    }\n  });\n}\n\n// `Symbol.prototype[@@toPrimitive]` method\n// https://tc39.es/ecma262/#sec-symbol.prototype-@@toprimitive\nif (!SymbolPrototype[TO_PRIMITIVE]) {\n  var valueOf = SymbolPrototype.valueOf;\n  // eslint-disable-next-line no-unused-vars -- required for .length\n  redefine(SymbolPrototype, TO_PRIMITIVE, function (hint) {\n    // TODO: improve hint logic\n    return call(valueOf, this);\n  });\n}\n// `Symbol.prototype[@@toStringTag]` property\n// https://tc39.es/ecma262/#sec-symbol.prototype-@@tostringtag\nsetToStringTag($Symbol, SYMBOL);\n\nhiddenKeys[HIDDEN] = true;\n","!function(t,e){\"object\"==typeof exports&&\"undefined\"!=typeof module?module.exports=e():\"function\"==typeof define&&define.amd?define(e):(t=\"undefined\"!=typeof globalThis?globalThis:t||self).dayjs=e()}(this,(function(){\"use strict\";var t=1e3,e=6e4,n=36e5,r=\"millisecond\",i=\"second\",s=\"minute\",u=\"hour\",a=\"day\",o=\"week\",f=\"month\",h=\"quarter\",c=\"year\",d=\"date\",$=\"Invalid Date\",l=/^(\\d{4})[-/]?(\\d{1,2})?[-/]?(\\d{0,2})[Tt\\s]*(\\d{1,2})?:?(\\d{1,2})?:?(\\d{1,2})?[.:]?(\\d+)?$/,y=/\\[([^\\]]+)]|Y{1,4}|M{1,4}|D{1,2}|d{1,4}|H{1,2}|h{1,2}|a|A|m{1,2}|s{1,2}|Z{1,2}|SSS/g,M={name:\"en\",weekdays:\"Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday\".split(\"_\"),months:\"January_February_March_April_May_June_July_August_September_October_November_December\".split(\"_\")},m=function(t,e,n){var r=String(t);return!r||r.length>=e?t:\"\"+Array(e+1-r.length).join(n)+t},g={s:m,z:function(t){var e=-t.utcOffset(),n=Math.abs(e),r=Math.floor(n/60),i=n%60;return(e<=0?\"+\":\"-\")+m(r,2,\"0\")+\":\"+m(i,2,\"0\")},m:function t(e,n){if(e.date()<n.date())return-t(n,e);var r=12*(n.year()-e.year())+(n.month()-e.month()),i=e.clone().add(r,f),s=n-i<0,u=e.clone().add(r+(s?-1:1),f);return+(-(r+(n-i)/(s?i-u:u-i))||0)},a:function(t){return t<0?Math.ceil(t)||0:Math.floor(t)},p:function(t){return{M:f,y:c,w:o,d:a,D:d,h:u,m:s,s:i,ms:r,Q:h}[t]||String(t||\"\").toLowerCase().replace(/s$/,\"\")},u:function(t){return void 0===t}},D=\"en\",v={};v[D]=M;var p=function(t){return t instanceof _},S=function(t,e,n){var r;if(!t)return D;if(\"string\"==typeof t)v[t]&&(r=t),e&&(v[t]=e,r=t);else{var i=t.name;v[i]=t,r=i}return!n&&r&&(D=r),r||!n&&D},w=function(t,e){if(p(t))return t.clone();var n=\"object\"==typeof e?e:{};return n.date=t,n.args=arguments,new _(n)},O=g;O.l=S,O.i=p,O.w=function(t,e){return w(t,{locale:e.$L,utc:e.$u,x:e.$x,$offset:e.$offset})};var _=function(){function M(t){this.$L=S(t.locale,null,!0),this.parse(t)}var m=M.prototype;return m.parse=function(t){this.$d=function(t){var e=t.date,n=t.utc;if(null===e)return new Date(NaN);if(O.u(e))return new Date;if(e instanceof Date)return new Date(e);if(\"string\"==typeof e&&!/Z$/i.test(e)){var r=e.match(l);if(r){var i=r[2]-1||0,s=(r[7]||\"0\").substring(0,3);return n?new Date(Date.UTC(r[1],i,r[3]||1,r[4]||0,r[5]||0,r[6]||0,s)):new Date(r[1],i,r[3]||1,r[4]||0,r[5]||0,r[6]||0,s)}}return new Date(e)}(t),this.$x=t.x||{},this.init()},m.init=function(){var t=this.$d;this.$y=t.getFullYear(),this.$M=t.getMonth(),this.$D=t.getDate(),this.$W=t.getDay(),this.$H=t.getHours(),this.$m=t.getMinutes(),this.$s=t.getSeconds(),this.$ms=t.getMilliseconds()},m.$utils=function(){return O},m.isValid=function(){return!(this.$d.toString()===$)},m.isSame=function(t,e){var n=w(t);return this.startOf(e)<=n&&n<=this.endOf(e)},m.isAfter=function(t,e){return w(t)<this.startOf(e)},m.isBefore=function(t,e){return this.endOf(e)<w(t)},m.$g=function(t,e,n){return O.u(t)?this[e]:this.set(n,t)},m.unix=function(){return Math.floor(this.valueOf()/1e3)},m.valueOf=function(){return this.$d.getTime()},m.startOf=function(t,e){var n=this,r=!!O.u(e)||e,h=O.p(t),$=function(t,e){var i=O.w(n.$u?Date.UTC(n.$y,e,t):new Date(n.$y,e,t),n);return r?i:i.endOf(a)},l=function(t,e){return O.w(n.toDate()[t].apply(n.toDate(\"s\"),(r?[0,0,0,0]:[23,59,59,999]).slice(e)),n)},y=this.$W,M=this.$M,m=this.$D,g=\"set\"+(this.$u?\"UTC\":\"\");switch(h){case c:return r?$(1,0):$(31,11);case f:return r?$(1,M):$(0,M+1);case o:var D=this.$locale().weekStart||0,v=(y<D?y+7:y)-D;return $(r?m-v:m+(6-v),M);case a:case d:return l(g+\"Hours\",0);case u:return l(g+\"Minutes\",1);case s:return l(g+\"Seconds\",2);case i:return l(g+\"Milliseconds\",3);default:return this.clone()}},m.endOf=function(t){return this.startOf(t,!1)},m.$set=function(t,e){var n,o=O.p(t),h=\"set\"+(this.$u?\"UTC\":\"\"),$=(n={},n[a]=h+\"Date\",n[d]=h+\"Date\",n[f]=h+\"Month\",n[c]=h+\"FullYear\",n[u]=h+\"Hours\",n[s]=h+\"Minutes\",n[i]=h+\"Seconds\",n[r]=h+\"Milliseconds\",n)[o],l=o===a?this.$D+(e-this.$W):e;if(o===f||o===c){var y=this.clone().set(d,1);y.$d[$](l),y.init(),this.$d=y.set(d,Math.min(this.$D,y.daysInMonth())).$d}else $&&this.$d[$](l);return this.init(),this},m.set=function(t,e){return this.clone().$set(t,e)},m.get=function(t){return this[O.p(t)]()},m.add=function(r,h){var d,$=this;r=Number(r);var l=O.p(h),y=function(t){var e=w($);return O.w(e.date(e.date()+Math.round(t*r)),$)};if(l===f)return this.set(f,this.$M+r);if(l===c)return this.set(c,this.$y+r);if(l===a)return y(1);if(l===o)return y(7);var M=(d={},d[s]=e,d[u]=n,d[i]=t,d)[l]||1,m=this.$d.getTime()+r*M;return O.w(m,this)},m.subtract=function(t,e){return this.add(-1*t,e)},m.format=function(t){var e=this,n=this.$locale();if(!this.isValid())return n.invalidDate||$;var r=t||\"YYYY-MM-DDTHH:mm:ssZ\",i=O.z(this),s=this.$H,u=this.$m,a=this.$M,o=n.weekdays,f=n.months,h=function(t,n,i,s){return t&&(t[n]||t(e,r))||i[n].substr(0,s)},c=function(t){return O.s(s%12||12,t,\"0\")},d=n.meridiem||function(t,e,n){var r=t<12?\"AM\":\"PM\";return n?r.toLowerCase():r},l={YY:String(this.$y).slice(-2),YYYY:this.$y,M:a+1,MM:O.s(a+1,2,\"0\"),MMM:h(n.monthsShort,a,f,3),MMMM:h(f,a),D:this.$D,DD:O.s(this.$D,2,\"0\"),d:String(this.$W),dd:h(n.weekdaysMin,this.$W,o,2),ddd:h(n.weekdaysShort,this.$W,o,3),dddd:o[this.$W],H:String(s),HH:O.s(s,2,\"0\"),h:c(1),hh:c(2),a:d(s,u,!0),A:d(s,u,!1),m:String(u),mm:O.s(u,2,\"0\"),s:String(this.$s),ss:O.s(this.$s,2,\"0\"),SSS:O.s(this.$ms,3,\"0\"),Z:i};return r.replace(y,(function(t,e){return e||l[t]||i.replace(\":\",\"\")}))},m.utcOffset=function(){return 15*-Math.round(this.$d.getTimezoneOffset()/15)},m.diff=function(r,d,$){var l,y=O.p(d),M=w(r),m=(M.utcOffset()-this.utcOffset())*e,g=this-M,D=O.m(this,M);return D=(l={},l[c]=D/12,l[f]=D,l[h]=D/3,l[o]=(g-m)/6048e5,l[a]=(g-m)/864e5,l[u]=g/n,l[s]=g/e,l[i]=g/t,l)[y]||g,$?D:O.a(D)},m.daysInMonth=function(){return this.endOf(f).$D},m.$locale=function(){return v[this.$L]},m.locale=function(t,e){if(!t)return this.$L;var n=this.clone(),r=S(t,e,!0);return r&&(n.$L=r),n},m.clone=function(){return O.w(this.$d,this)},m.toDate=function(){return new Date(this.valueOf())},m.toJSON=function(){return this.isValid()?this.toISOString():null},m.toISOString=function(){return this.$d.toISOString()},m.toString=function(){return this.$d.toUTCString()},M}(),b=_.prototype;return w.prototype=b,[[\"$ms\",r],[\"$s\",i],[\"$m\",s],[\"$H\",u],[\"$W\",a],[\"$M\",f],[\"$y\",c],[\"$D\",d]].forEach((function(t){b[t[1]]=function(e){return this.$g(e,t[0],t[1])}})),w.extend=function(t,e){return t.$i||(t(e,_,w),t.$i=!0),w},w.locale=S,w.isDayjs=p,w.unix=function(t){return w(1e3*t)},w.en=v[D],w.Ls=v,w.p={},w}));","import { on, off } from './delegate';\nconst traps = {\n    mousemoveoutside: new WeakMap(),\n    clickoutside: new WeakMap()\n};\nfunction createTrapHandler(name, el, originalHandler) {\n    if (name === 'mousemoveoutside') {\n        const moveHandler = (e) => {\n            if (el.contains(e.target))\n                return;\n            originalHandler(e);\n        };\n        return {\n            mousemove: moveHandler,\n            touchstart: moveHandler\n        };\n    }\n    else if (name === 'clickoutside') {\n        let mouseDownOutside = false;\n        const downHandler = (e) => {\n            mouseDownOutside = !el.contains(e.target);\n        };\n        const upHanlder = (e) => {\n            if (!mouseDownOutside)\n                return;\n            if (el.contains(e.target))\n                return;\n            originalHandler(e);\n        };\n        return {\n            mousedown: downHandler,\n            mouseup: upHanlder,\n            touchstart: downHandler,\n            touchend: upHanlder\n        };\n    }\n    // eslint-disable-next-line @typescript-eslint/restrict-template-expressions\n    console.error(`[evtd/create-trap-handler]: name \\`${name}\\` is invalid. This could be a bug of evtd.`);\n    return {};\n}\nfunction ensureTrapHandlers(name, el, handler) {\n    const handlers = traps[name];\n    let elHandlers = handlers.get(el);\n    if (elHandlers === undefined) {\n        handlers.set(el, elHandlers = new WeakMap());\n    }\n    let trapHandler = elHandlers.get(handler);\n    if (trapHandler === undefined) {\n        elHandlers.set(handler, trapHandler = createTrapHandler(name, el, handler));\n    }\n    return trapHandler;\n}\nfunction trapOn(name, el, handler, options) {\n    if (name === 'mousemoveoutside' ||\n        name === 'clickoutside') {\n        const trapHandlers = ensureTrapHandlers(name, el, handler);\n        Object.keys(trapHandlers).forEach(key => {\n            on(key, document, trapHandlers[key], options);\n        });\n        return true;\n    }\n    return false;\n}\nfunction trapOff(name, el, handler, options) {\n    if (name === 'mousemoveoutside' ||\n        name === 'clickoutside') {\n        const trapHandlers = ensureTrapHandlers(name, el, handler);\n        Object.keys(trapHandlers).forEach(key => {\n            off(key, document, trapHandlers[key], options);\n        });\n        return true;\n    }\n    return false;\n}\nexport { trapOff, trapOn };\n","import { trapOn, trapOff } from './traps';\n// currently `once` and `passive` is not supported\nfunction createDelegate() {\n    if (typeof window === 'undefined') {\n        return {\n            on: () => { },\n            off: () => { }\n        };\n    }\n    const propagationStopped = new WeakMap();\n    const immediatePropagationStopped = new WeakMap();\n    function trackPropagation() {\n        propagationStopped.set(this, true);\n    }\n    function trackImmediate() {\n        propagationStopped.set(this, true);\n        immediatePropagationStopped.set(this, true);\n    }\n    function spy(event, propName, fn) {\n        const source = event[propName];\n        event[propName] = function () {\n            fn.apply(event, arguments);\n            return source.apply(event, arguments);\n        };\n        return event;\n    }\n    function unspy(event, propName) {\n        event[propName] = Event.prototype[propName];\n    }\n    const currentTargets = new WeakMap();\n    const currentTargetDescriptor = Object.getOwnPropertyDescriptor(Event.prototype, 'currentTarget');\n    function getCurrentTarget() {\n        var _a;\n        return (_a = currentTargets.get(this)) !== null && _a !== void 0 ? _a : null;\n    }\n    function defineCurrentTarget(event, getter) {\n        if (currentTargetDescriptor === undefined)\n            return;\n        Object.defineProperty(event, 'currentTarget', {\n            configurable: true,\n            enumerable: true,\n            get: getter !== null && getter !== void 0 ? getter : currentTargetDescriptor.get\n        });\n    }\n    const phaseToTypeToElToHandlers = {\n        bubble: {},\n        capture: {}\n    };\n    const typeToWindowEventHandlers = {};\n    function createUnifiedHandler() {\n        const delegeteHandler = function (e) {\n            const { type, eventPhase, target, bubbles } = e;\n            if (eventPhase === 2)\n                return;\n            const phase = eventPhase === 1 ? 'capture' : 'bubble';\n            let cursor = target;\n            const path = [];\n            // collecting bubble path\n            while (true) {\n                if (cursor === null)\n                    cursor = window;\n                path.push(cursor);\n                if (cursor === window) {\n                    break;\n                }\n                // eslint-disable-next-line @typescript-eslint/strict-boolean-expressions\n                cursor = (cursor.parentNode || null);\n            }\n            const captureElToHandlers = phaseToTypeToElToHandlers.capture[type];\n            const bubbleElToHandlers = phaseToTypeToElToHandlers.bubble[type];\n            spy(e, 'stopPropagation', trackPropagation);\n            spy(e, 'stopImmediatePropagation', trackImmediate);\n            defineCurrentTarget(e, getCurrentTarget);\n            if (phase === 'capture') {\n                if (captureElToHandlers === undefined)\n                    return;\n                // capture\n                for (let i = path.length - 1; i >= 0; --i) {\n                    if (propagationStopped.has(e))\n                        break;\n                    const target = path[i];\n                    const handlers = captureElToHandlers.get(target);\n                    if (handlers !== undefined) {\n                        currentTargets.set(e, target);\n                        for (const handler of handlers) {\n                            if (immediatePropagationStopped.has(e))\n                                break;\n                            handler(e);\n                        }\n                    }\n                    if (i === 0 && !bubbles && bubbleElToHandlers !== undefined) {\n                        const bubbleHandlers = bubbleElToHandlers.get(target);\n                        if (bubbleHandlers !== undefined) {\n                            for (const handler of bubbleHandlers) {\n                                if (immediatePropagationStopped.has(e))\n                                    break;\n                                handler(e);\n                            }\n                        }\n                    }\n                }\n            }\n            else if (phase === 'bubble') {\n                if (bubbleElToHandlers === undefined)\n                    return;\n                // bubble\n                for (let i = 0; i < path.length; ++i) {\n                    if (propagationStopped.has(e))\n                        break;\n                    const target = path[i];\n                    const handlers = bubbleElToHandlers.get(target);\n                    if (handlers !== undefined) {\n                        currentTargets.set(e, target);\n                        for (const handler of handlers) {\n                            if (immediatePropagationStopped.has(e))\n                                break;\n                            handler(e);\n                        }\n                    }\n                }\n            }\n            unspy(e, 'stopPropagation');\n            unspy(e, 'stopImmediatePropagation');\n            defineCurrentTarget(e);\n        };\n        delegeteHandler.displayName = 'evtdUnifiedHandler';\n        return delegeteHandler;\n    }\n    function createUnifiedWindowEventHandler() {\n        const delegateHandler = function (e) {\n            const { type, eventPhase } = e;\n            if (eventPhase !== 2)\n                return;\n            const handlers = typeToWindowEventHandlers[type];\n            if (handlers === undefined)\n                return;\n            handlers.forEach((handler) => handler(e));\n        };\n        delegateHandler.displayName = 'evtdUnifiedWindowEventHandler';\n        return delegateHandler;\n    }\n    const unifiedHandler = createUnifiedHandler();\n    const unfiendWindowEventHandler = createUnifiedWindowEventHandler();\n    function ensureElToHandlers(phase, type) {\n        const phaseHandlers = phaseToTypeToElToHandlers[phase];\n        if (phaseHandlers[type] === undefined) {\n            phaseHandlers[type] = new Map();\n            window.addEventListener(type, unifiedHandler, phase === 'capture');\n        }\n        return phaseHandlers[type];\n    }\n    function ensureWindowEventHandlers(type) {\n        const windowEventHandlers = typeToWindowEventHandlers[type];\n        if (windowEventHandlers === undefined) {\n            typeToWindowEventHandlers[type] = new Set();\n            window.addEventListener(type, unfiendWindowEventHandler);\n        }\n        return typeToWindowEventHandlers[type];\n    }\n    function ensureHandlers(elToHandlers, el) {\n        let elHandlers = elToHandlers.get(el);\n        if (elHandlers === undefined) {\n            elToHandlers.set(el, (elHandlers = new Set()));\n        }\n        return elHandlers;\n    }\n    function handlerExist(el, phase, type, handler) {\n        const elToHandlers = phaseToTypeToElToHandlers[phase][type];\n        // phase ${type} event has handlers\n        if (elToHandlers !== undefined) {\n            const handlers = elToHandlers.get(el);\n            // phase using el with ${type} event has handlers\n            if (handlers !== undefined) {\n                if (handlers.has(handler))\n                    return true;\n            }\n        }\n        return false;\n    }\n    function windowEventHandlerExist(type, handler) {\n        const handlers = typeToWindowEventHandlers[type];\n        if (handlers !== undefined) {\n            if (handlers.has(handler)) {\n                return true;\n            }\n        }\n        return false;\n    }\n    function on(type, el, handler, options) {\n        let mergedHandler;\n        if (typeof options === 'object' && options.once === true) {\n            mergedHandler = (e) => {\n                off(type, el, mergedHandler, options);\n                handler(e);\n            };\n        }\n        else {\n            mergedHandler = handler;\n        }\n        const trapped = trapOn(type, el, mergedHandler, options);\n        if (trapped)\n            return;\n        const phase = options === true ||\n            (typeof options === 'object' && options.capture === true)\n            ? 'capture'\n            : 'bubble';\n        const elToHandlers = ensureElToHandlers(phase, type);\n        const handlers = ensureHandlers(elToHandlers, el);\n        if (!handlers.has(mergedHandler))\n            handlers.add(mergedHandler);\n        if (el === window) {\n            const windowEventHandlers = ensureWindowEventHandlers(type);\n            if (!windowEventHandlers.has(mergedHandler)) {\n                windowEventHandlers.add(mergedHandler);\n            }\n        }\n    }\n    function off(type, el, handler, options) {\n        const trapped = trapOff(type, el, handler, options);\n        if (trapped)\n            return;\n        const capture = options === true ||\n            (typeof options === 'object' && options.capture === true);\n        const phase = capture ? 'capture' : 'bubble';\n        const elToHandlers = ensureElToHandlers(phase, type);\n        const handlers = ensureHandlers(elToHandlers, el);\n        if (el === window) {\n            const mirrorPhase = capture ? 'bubble' : 'capture';\n            if (!handlerExist(el, mirrorPhase, type, handler) &&\n                windowEventHandlerExist(type, handler)) {\n                // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n                const windowEventHandlers = typeToWindowEventHandlers[type];\n                windowEventHandlers.delete(handler);\n                if (windowEventHandlers.size === 0) {\n                    window.removeEventListener(type, unfiendWindowEventHandler);\n                    typeToWindowEventHandlers[type] = undefined;\n                }\n            }\n        }\n        if (handlers.has(handler))\n            handlers.delete(handler);\n        if (handlers.size === 0) {\n            elToHandlers.delete(el);\n        }\n        if (elToHandlers.size === 0) {\n            window.removeEventListener(type, unifiedHandler, phase === 'capture');\n            phaseToTypeToElToHandlers[phase][type] = undefined;\n        }\n    }\n    return {\n        on: on,\n        off: off\n    };\n}\nconst { on, off } = createDelegate();\nexport { on, off };\n","import { c } from '../../_utils/cssr';\nimport commonVariables from '../common/_common';\nconst {\n  cubicBezierEaseIn,\n  cubicBezierEaseOut,\n  transformDebounceScale\n} = commonVariables;\nexport default function ({\n  transformOrigin = 'inherit',\n  duration = '.2s',\n  enterScale = '.9',\n  originalTransform = '',\n  originalTransition = ''\n} = {}) {\n  return [c('&.fade-in-scale-up-transition-leave-active', {\n    transformOrigin,\n    transition: `opacity ${duration} ${cubicBezierEaseIn}, transform ${duration} ${cubicBezierEaseIn} ${originalTransition && ',' + originalTransition}`\n  }), c('&.fade-in-scale-up-transition-enter-active', {\n    transformOrigin,\n    transition: `opacity ${duration} ${cubicBezierEaseOut}, transform ${duration} ${cubicBezierEaseOut} ${originalTransition && ',' + originalTransition}`\n  }), c('&.fade-in-scale-up-transition-enter-from, &.fade-in-scale-up-transition-leave-to', {\n    opacity: 0,\n    transform: `${originalTransform} scale(${enterScale})`\n  }), c('&.fade-in-scale-up-transition-leave-from, &.fade-in-scale-up-transition-enter-to', {\n    opacity: 1,\n    transform: `${originalTransform} scale(${transformDebounceScale})`\n  })];\n}","import { c } from '../../_utils/cssr';\nimport commonVariables from '../common/_common';\nconst {\n  cubicBezierEaseInOut\n} = commonVariables;\nexport default function ({\n  name = 'fade-in',\n  enterDuration = '0.2s',\n  leaveDuration = '0.2s',\n  enterCubicBezier = cubicBezierEaseInOut,\n  leaveCubicBezier = cubicBezierEaseInOut\n} = {}) {\n  return [c(`&.${name}-transition-enter-active`, {\n    transition: `all ${enterDuration} ${enterCubicBezier}!important`\n  }), c(`&.${name}-transition-leave-active`, {\n    transition: `all ${leaveDuration} ${leaveCubicBezier}!important`\n  }), c(`&.${name}-transition-enter-from, &.${name}-transition-leave-to`, {\n    opacity: 0\n  }), c(`&.${name}-transition-leave-from, &.${name}-transition-enter-to`, {\n    opacity: 1\n  })];\n}","import { ref, watch, onMounted, inject, getCurrentInstance, onBeforeUnmount } from 'vue';\n// injection.collection {\n//   key1: [insta, instb]\n//   key2: [instc]\n// }\nexport function useInjectionInstanceCollection(injectionName, collectionKey, registerKeyRef) {\n    var _a;\n    const injection = inject(injectionName, null);\n    if (injection === null)\n        return;\n    const vm = (_a = getCurrentInstance()) === null || _a === void 0 ? void 0 : _a.proxy;\n    watch(registerKeyRef, registerInstance);\n    registerInstance(registerKeyRef.value);\n    onBeforeUnmount(() => {\n        registerInstance(undefined, registerKeyRef.value);\n    });\n    function registerInstance(key, oldKey) {\n        const collection = injection[collectionKey];\n        if (oldKey !== undefined)\n            removeInstance(collection, oldKey);\n        if (key !== undefined)\n            addInstance(collection, key);\n    }\n    function removeInstance(collection, key) {\n        if (!collection[key])\n            collection[key] = [];\n        collection[key].splice(collection[key].findIndex((instance) => instance === vm), 1);\n    }\n    function addInstance(collection, key) {\n        if (!collection[key])\n            collection[key] = [];\n        if (!~collection[key].findIndex((instance) => instance === vm)) {\n            collection[key].push(vm);\n        }\n    }\n}\n// injection.collection {\n//   key1: [insta.value, instb.value]\n//   key2: [instc.value]\n// }\nexport function useInjectionCollection(injectionName, collectionKey, valueRef) {\n    const injection = inject(injectionName, null);\n    if (injection === null)\n        return;\n    if (!(collectionKey in injection)) {\n        injection[collectionKey] = [];\n    }\n    injection[collectionKey].push(valueRef.value);\n    watch(valueRef, (value, prevValue) => {\n        const collectionArray = injection[collectionKey];\n        const index = collectionArray.findIndex((collectionValue) => collectionValue === prevValue);\n        if (~index)\n            collectionArray.splice(index, 1);\n        collectionArray.push(value);\n    });\n    onBeforeUnmount(() => {\n        const collectionArray = injection[collectionKey];\n        const index = collectionArray.findIndex((collectionValue) => collectionValue === valueRef.value);\n        if (~index)\n            collectionArray.splice(index, 1);\n    });\n}\n// injection.collection {\n//   key1: [insta.$el, instb.$el]\n//   key2: [instc.$el]\n// }\nexport function useInjectionElementCollection(injectionName, collectionKey, getElement) {\n    const injection = inject(injectionName, null);\n    if (injection === null)\n        return;\n    if (!(collectionKey in injection)) {\n        injection[collectionKey] = [];\n    }\n    onMounted(() => {\n        const el = getElement();\n        if (!el)\n            return;\n        injection[collectionKey].push(el);\n    });\n    onBeforeUnmount(() => {\n        const collectionArray = injection[collectionKey];\n        const element = getElement();\n        const index = collectionArray.findIndex((collectionElement) => collectionElement === element);\n        if (~index)\n            collectionArray.splice(index, 1);\n    });\n}\nexport function useDeferredTrue(valueRef, delay, shouldDelayRef) {\n    if (!delay)\n        return valueRef;\n    const delayedRef = ref(valueRef.value);\n    let timerId = null;\n    watch(valueRef, (value) => {\n        if (timerId !== null)\n            window.clearTimeout(timerId);\n        if (value === true) {\n            if (shouldDelayRef && !shouldDelayRef.value) {\n                delayedRef.value = true;\n            }\n            else {\n                timerId = window.setTimeout(() => {\n                    delayedRef.value = true;\n                }, delay);\n            }\n        }\n        else {\n            delayedRef.value = false;\n        }\n    });\n    return delayedRef;\n}\nexport { useAdjustedTo } from './use-adjusted-to';\nexport { useHoudini } from './use-houdini';\n","export function keep(object, keys = [], rest) {\n    const keepedObject = {};\n    keys.forEach((key) => {\n        keepedObject[key] = object[key];\n    });\n    return Object.assign(keepedObject, rest);\n}\n","export default \"<p>Hi there, this will help you know a little bit about me</p>\\n<h4 id=\\\"infomation\\\">Infomation</h4>\\n<pre><code class=\\\"hljs language-java\\\">Chinese\\nBorn in <span class=\\\"hljs-number\\\">1996.</span>\\nKnow how to play Bass Guitar.\\nKnow how to code with Java.\\nThe worst Front-end developer in the universe.\\n</code></pre>\\n<h4 id=\\\"working-experience\\\">Working Experience</h4>\\n<blockquote>\\n<p>07/2018-09/2018 - Java back-end Engineer, intern, CHINA UMS, Wuhan</p>\\n<p>10/2018-04/2019 - Java back-end Engineer, intern, eBay.Inc , Shanghai</p>\\n<p>07/2021-11/2021 - Java back-end Engineer, Aleph.Inc , Shanghai</p>\\n</blockquote>\\n<h4 id=\\\"education\\\">Education</h4>\\n<blockquote>\\n<p>2015-2019, SE, BE : <a href=\\\"http://www.scuec.edu.cn/s/1/t/560/main.htm\\\">South-Central University For Nationalities</a>, Wuhan, China.</p>\\n<p>2021(Fall)-2023(Winter), ECE, MEng : <a href=\\\"https://www.concordia.ca/\\\">Concordia Universty</a>, Montreal, Canada.</p>\\n</blockquote>\\n<h5 id=\\\"course-papers--reports\\\">Course Papers & Reports</h5>\\n<blockquote>\\n<p>COEN 6311</p>\\n<p><a href=\\\"https://github.com/youyinnn/COEN6311_super/blob/main/doc/D1/output/main.pdf\\\">Project D1 Report</a></p>\\n<p><a href=\\\"https://github.com/youyinnn/COEN6311_super/blob/main/doc/D2/output/main.pdf\\\">Project D2 Report</a></p>\\n<p><a href=\\\"https://github.com/youyinnn/COEN6311_super/blob/main/doc/D3/output/main.pdf\\\">Project D3 Report</a></p>\\n<p><a href=\\\"https://github.com/youyinnn/coen_6311_assignment1/blob/main/doc/report/output/main.pdf\\\">Assignment 1 Report</a></p>\\n<p><a href=\\\"https://github.com/youyinnn/coen_6311_assignment1/blob/main/doc/report2/output/main.pdf\\\">Assignment 2 Report</a></p>\\n</blockquote>\\n<blockquote>\\n<p>COEN 6501</p>\\n<p><a href=\\\"https://github.com/youyinnn/coen_6501/blob/main/a1_report/output/report.pdf\\\">Technical Reoprt: Survey of Several Recent Full Adder Designs</a>(I like this one)</p>\\n<p><a href=\\\"https://github.com/youyinnn/coen_6501/blob/main/project_spec/output/main.pdf\\\">Project Report</a></p>\\n</blockquote>\\n<h4 id=\\\"about-this-site\\\">About this site</h4>\\n<blockquote>\\n<p>This blog is completely driven by <a href=\\\"https://pages.github.com/\\\">GitHub Pages</a> & <del><a href=\\\"https://help.coding.net/docs/cd/static-website.html\\\">Coding Pages</a></del> <del>Searching support: <a href=\\\"https://www.algolia.com/\\\">Algolia</a></del>\\nComment plugin: <del><a href=\\\"https://valine.js.org/\\\">Valine</a></del></p>\\n<p>Publishing my tech-articles, sharing my ideas, keeping some scripts, todos, and my personal resume.</p>\\n</blockquote>\\n<!-- Change Log\\n\\n```console\\n2020-06-09: split scripts into multiple .htm file for compressing request traffic\\n\\n2020-06-09: flowchart.js support\\n\\n2020-06-06: specifying scripts loading according certain location.pathname\\n\\n2020-06-05: move back to gitee pages...\\n\\n2020-05-11: upgrade animate.css to 4.0.0\\n\\n2020-05-08: abandon the gitee pages due to the unstability of their services, move to coding pages\\n\\n2020-05-04: algolia search\\n\\n2020-04-15: valine comment plugin\\n\\n2020-03-12: redirect url to gitee pages when visit from china region\\n\\n2020-03-09: start to remove issues-based idea, staticize the entire site\\n\\n2019-01-30: jsdelivr cdn support\\n\\n2018-11-24: add statistices for site\\n\\n2018-09-02: add hacknical\\n\\n2018-08-24: add emoji, katex\\n\\n2018-07-11: articles series support\\n\\n2018-07-02: config data sync on one issue\\n\\n2018-05-27: v5.*: code-highlight/css imporvement blablabal\\n\\n2018-05-07: v3.* alright...\\n\\n2018-05-07: v2.0\\n\\n2018-05-04: v1.0~\\n\\n2018-04-27: media support\\n\\n2017-11-23: online\\n``` -->\\n\";","export default \"<h3 id=\\\"41-first-missing-postivehard\\\">41. First Missing Postive(Hard)</h3>\\n<p>Given an unsorted integer array, find the smallest missing positive integer.</p>\\n<p><strong>Example 1:</strong></p>\\n<pre><code>Input: [1,2,0]\\nOutput: 3\\n</code></pre>\\n<p><strong>Example 2:</strong></p>\\n<pre><code>Input: [3,4,-1,1]\\nOutput: 2\\n</code></pre>\\n<p><strong>Example 3:</strong></p>\\n<pre><code>Input: [7,8,9,11,12]\\nOutput: 1\\n</code></pre>\\n<p><strong>Note:</strong></p>\\n<p>Your algorithm should run in <em>O</em>(<em>n</em>) time and uses constant extra space.</p>\\n<p>这题难点在于线性和常数空间</p>\\n<h4 id=\\\"after-sort-beat-85\\\">After Sort (Beat 85%)</h4>\\n<p>思路和之前处理3sum一样，为了处理重复，我们先把数组排序，然后设一个flag从1开始数就好了</p>\\n<pre><code class=\\\"hljs language-java\\\"><span class=\\\"hljs-keyword\\\">public</span> <span class=\\\"hljs-type\\\">int</span> <span class=\\\"hljs-title function_\\\">firstMissingPositive</span><span class=\\\"hljs-params\\\">(<span class=\\\"hljs-type\\\">int</span>[] nums)</span> {\\n    Arrays.sort(nums);\\n    <span class=\\\"hljs-type\\\">int</span> <span class=\\\"hljs-variable\\\">flag</span> <span class=\\\"hljs-operator\\\">=</span> <span class=\\\"hljs-number\\\">1</span>;\\n    <span class=\\\"hljs-type\\\">int</span> <span class=\\\"hljs-variable\\\">i</span> <span class=\\\"hljs-operator\\\">=</span> <span class=\\\"hljs-number\\\">0</span>;\\n    <span class=\\\"hljs-keyword\\\">for</span> (; i &lt; nums.length; i++) {\\n        <span class=\\\"hljs-keyword\\\">if</span> (i &gt; <span class=\\\"hljs-number\\\">0</span> && nums[i] == nums[i - <span class=\\\"hljs-number\\\">1</span>]) {\\n            <span class=\\\"hljs-keyword\\\">continue</span>;\\n        }\\n        <span class=\\\"hljs-type\\\">int</span> <span class=\\\"hljs-variable\\\">num</span> <span class=\\\"hljs-operator\\\">=</span> nums[i];\\n        <span class=\\\"hljs-keyword\\\">if</span> (num &gt; <span class=\\\"hljs-number\\\">0</span>) {\\n            <span class=\\\"hljs-keyword\\\">if</span> (num != flag) {\\n                <span class=\\\"hljs-keyword\\\">break</span>;\\n            } <span class=\\\"hljs-keyword\\\">else</span> {\\n                flag++;\\n            }\\n        }\\n    }\\n    <span class=\\\"hljs-keyword\\\">return</span> flag;\\n}\\n</code></pre>\\n<h4 id=\\\"turned\\\">Turned</h4>\\n<ol>\\n<li><p>数组里面有干扰数字，比如负数和0，对于负数我们直接变成整数最大值，0则可以忽略掉，这是我们第一个n时间要干的事情；</p>\\n</li>\\n<li><p>第二个n时间我们遍历数组，所有出现的正数，并且在数组长度范围内的数，就将这个数对应的排序位置中的数变为负数；比如有正数4，那么就要把数组下标3上的数字取相反数；</p>\\n</li>\\n<li><p>第三个n时间，如果碰到非负数，则说明这个位置没有在第二个n里被置反，所以这个位置对应的就是第一个丢失的正数；</p>\\n</li>\\n<li><p>如果三个n时间没有找到解，那么解就是数组长度+1；</p>\\n</li>\\n</ol>\\n<pre><code class=\\\"hljs language-java\\\"><span class=\\\"hljs-keyword\\\">public</span> <span class=\\\"hljs-type\\\">int</span> <span class=\\\"hljs-title function_\\\">firstMissingPositive</span><span class=\\\"hljs-params\\\">(<span class=\\\"hljs-type\\\">int</span>[] nums)</span> {\\n    <span class=\\\"hljs-keyword\\\">for</span> (<span class=\\\"hljs-type\\\">int</span> <span class=\\\"hljs-variable\\\">i</span> <span class=\\\"hljs-operator\\\">=</span> <span class=\\\"hljs-number\\\">0</span>; i &lt; nums.length; i++) {\\n        <span class=\\\"hljs-keyword\\\">if</span> (nums[i] &lt;= <span class=\\\"hljs-number\\\">0</span>) {\\n            nums[i] = Integer.MAX_VALUE;\\n        }\\n    }\\n    <span class=\\\"hljs-keyword\\\">for</span> (<span class=\\\"hljs-type\\\">int</span> <span class=\\\"hljs-variable\\\">i</span> <span class=\\\"hljs-operator\\\">=</span> <span class=\\\"hljs-number\\\">0</span>; i &lt; nums.length; i++) {\\n        <span class=\\\"hljs-type\\\">int</span> <span class=\\\"hljs-variable\\\">abs</span> <span class=\\\"hljs-operator\\\">=</span> Math.abs(nums[i]);\\n        <span class=\\\"hljs-keyword\\\">if</span> (abs &lt;= nums.length && abs &gt; <span class=\\\"hljs-number\\\">0</span> && nums[abs - <span class=\\\"hljs-number\\\">1</span>] &gt; <span class=\\\"hljs-number\\\">0</span>) {\\n            nums[abs - <span class=\\\"hljs-number\\\">1</span>] *= -<span class=\\\"hljs-number\\\">1</span>;\\n        }\\n    }\\n    <span class=\\\"hljs-keyword\\\">for</span> (<span class=\\\"hljs-type\\\">int</span> <span class=\\\"hljs-variable\\\">i</span> <span class=\\\"hljs-operator\\\">=</span> <span class=\\\"hljs-number\\\">0</span>; i &lt; nums.length; i++) {\\n        <span class=\\\"hljs-keyword\\\">if</span> (nums[i] &gt; <span class=\\\"hljs-number\\\">0</span>) <span class=\\\"hljs-keyword\\\">return</span> i + <span class=\\\"hljs-number\\\">1</span>;\\n    }\\n    <span class=\\\"hljs-keyword\\\">return</span> nums.length + <span class=\\\"hljs-number\\\">1</span>;\\n}\\n</code></pre>\\n<h3 id=\\\"42-trapping-rain-waterhard\\\">42. Trapping Rain Water(Hard)</h3>\\n<p>Given <em>n</em> non-negative integers representing an elevation map where the width of each bar is 1, compute how much water it is able to trap after raining.</p>\\n<p><img src=\\\"https://assets.leetcode.com/uploads/2018/10/22/rainwatertrap.png\\\" alt=\\\"img\\\">\\nThe above elevation map is represented by array [0,1,0,2,1,0,1,3,2,1,2,1]. In this case, 6 units of rain water (blue section) are being trapped.<strong>Thanks Marcos</strong> for contributing this image!</p>\\n<p><strong>Example:</strong></p>\\n<pre><code>Input: [0,1,0,2,1,0,1,3,2,1,2,1]\\nOutput: 6\\n</code></pre>\\n<h4 id=\\\"find-logicbeat-987\\\">Find Logic(Beat 98.7%)</h4>\\n<p>我们需要两根柱子，左，右；我们顺序遍历数组，每遇到一个0以上的柱子视为左柱子，那么右柱子是怎么决定的呢？我们多看几个例子：</p>\\n<pre><code>[9,8,4,6]     [4,2,3]       [4,9,4,5,3,2]\\n░             ░                ░\\n░ ░           ░ ▓ ░            ░\\n░ ░           ░ ░ ░            ░\\n░ ░ ▓ ░       ░ ░ ░            ░\\n░ ░ ▓ ░                        ░ ▓ ░\\n░ ░ ░ ░                      ░ ░ ░ ░\\n░ ░ ░ ░                      ░ ░ ░ ░ ░\\n░ ░ ░ ░                      ░ ░ ░ ░ ░ ░\\n░ ░ ░ ░                      ░ ░ ░ ░ ░ ░\\n</code></pre>\\n<p>加上例子我们可以发现：</p>\\n<ul>\\n<li>一旦碰到比左柱子高的柱子，这个就是右柱子，如例图中的[1,0,3]；</li>\\n<li>如果没有比左柱子高的柱子，剩下的柱子中最高的柱子就是右柱子，比如上面的3个例子就是；</li>\\n<li>下一轮右柱子就是上一轮的左柱子；</li>\\n</ul>\\n<p>然后关于积水的计算：</p>\\n<ul>\\n<li>左右柱子之间，最多能积矮柱那么高的水；</li>\\n<li>左右柱子之间，最长能积两柱之间那么宽水；</li>\\n<li>两柱之间会有石头；</li>\\n<li>积水：<ol>\\n<li>面积：遍历两柱之间的石头，高宽乘积减去石头和就是积水；</li>\\n<li>遍历两柱之间，每次都用高减去当前的石头高，然后加到一个sum中；</li>\\n</ol>\\n</li>\\n</ul>\\n<p>于是：</p>\\n<pre><code class=\\\"hljs language-java\\\"><span class=\\\"hljs-keyword\\\">public</span> <span class=\\\"hljs-type\\\">int</span> <span class=\\\"hljs-title function_\\\">trap</span><span class=\\\"hljs-params\\\">(<span class=\\\"hljs-type\\\">int</span>[] height)</span> {\\n    <span class=\\\"hljs-type\\\">int</span> <span class=\\\"hljs-variable\\\">count</span> <span class=\\\"hljs-operator\\\">=</span> <span class=\\\"hljs-number\\\">0</span>;\\n    <span class=\\\"hljs-keyword\\\">for</span> (<span class=\\\"hljs-type\\\">int</span> <span class=\\\"hljs-variable\\\">i</span> <span class=\\\"hljs-operator\\\">=</span> <span class=\\\"hljs-number\\\">0</span>; i &lt; height.length - <span class=\\\"hljs-number\\\">1</span>;) {\\n        <span class=\\\"hljs-type\\\">int</span> <span class=\\\"hljs-variable\\\">l</span> <span class=\\\"hljs-operator\\\">=</span> height[i];\\n        <span class=\\\"hljs-keyword\\\">if</span> (l &gt; <span class=\\\"hljs-number\\\">0</span>) {\\n            <span class=\\\"hljs-type\\\">int</span> <span class=\\\"hljs-variable\\\">ri</span> <span class=\\\"hljs-operator\\\">=</span> i + <span class=\\\"hljs-number\\\">1</span>;\\n            <span class=\\\"hljs-comment\\\">// 找右柱子</span>\\n            <span class=\\\"hljs-keyword\\\">for</span> (<span class=\\\"hljs-type\\\">int</span> <span class=\\\"hljs-variable\\\">j</span> <span class=\\\"hljs-operator\\\">=</span> i + <span class=\\\"hljs-number\\\">1</span>; j &lt; height.length; j++) {\\n                <span class=\\\"hljs-keyword\\\">if</span> (height[j] &gt; l) {\\n                    ri = j;\\n                    <span class=\\\"hljs-keyword\\\">break</span>;\\n                } <span class=\\\"hljs-keyword\\\">else</span> {\\n                    ri = height[j] &gt; height[ri] ? j : ri;\\n                }\\n            }\\n            <span class=\\\"hljs-type\\\">int</span> <span class=\\\"hljs-variable\\\">length</span> <span class=\\\"hljs-operator\\\">=</span> Math.min(l, height[ri]);\\n            <span class=\\\"hljs-type\\\">int</span> <span class=\\\"hljs-variable\\\">trap</span> <span class=\\\"hljs-operator\\\">=</span> <span class=\\\"hljs-number\\\">0</span>;\\n            <span class=\\\"hljs-comment\\\">// 减石头</span>\\n            <span class=\\\"hljs-keyword\\\">for</span> (<span class=\\\"hljs-type\\\">int</span> <span class=\\\"hljs-variable\\\">j</span> <span class=\\\"hljs-operator\\\">=</span> i + <span class=\\\"hljs-number\\\">1</span>; j &lt; ri; j++) {\\n                trap += length - Math.min(length, height[j]);\\n            }\\n            <span class=\\\"hljs-keyword\\\">if</span> (trap &gt; <span class=\\\"hljs-number\\\">0</span>) {\\n                count += trap;\\n                i = ri;\\n            } <span class=\\\"hljs-keyword\\\">else</span> {\\n                i++;\\n            }\\n        } <span class=\\\"hljs-keyword\\\">else</span> {\\n            i++;\\n        }\\n    }\\n    <span class=\\\"hljs-keyword\\\">return</span> count;\\n}\\n</code></pre>\\n<h3 id=\\\"43-multiply-stringsmedium\\\">43. Multiply Strings(Medium)</h3>\\n<p>Given two non-negative integers <code>num1</code> and <code>num2</code> represented as strings, return the product of <code>num1</code> and <code>num2</code>, also represented as a string.</p>\\n<p><strong>Example 1:</strong></p>\\n<pre><code>Input: num1 = &quot;2&quot;, num2 = &quot;3&quot;\\nOutput: &quot;6&quot;\\n</code></pre>\\n<p><strong>Example 2:</strong></p>\\n<pre><code>Input: num1 = &quot;123&quot;, num2 = &quot;456&quot;\\nOutput: &quot;56088&quot;\\n</code></pre>\\n<p><strong>Note:</strong></p>\\n<ol>\\n<li>The length of both <code>num1</code> and <code>num2</code> is &lt; 110.</li>\\n<li>Both <code>num1</code> and <code>num2</code> contain only digits <code>0-9</code>.</li>\\n<li>Both <code>num1</code> and <code>num2</code> do not contain any leading zero, except the number 0 itself.</li>\\n<li>You <strong>must not use any built-in BigInteger library</strong> or <strong>convert the inputs to integer</strong> directly.</li>\\n</ol>\\n<p>这题，当然你可以硬打，拆分乘法为2位数内的乘法和多位数的加法，但是效率很慢，我们来用数学解决这个问题</p>\\n<h4 id=\\\"mathematics\\\">Mathematics</h4>\\n<p>要点：</p>\\n<ul>\\n<li><p>n位数×m位数，结果长度是n+m；</p>\\n</li>\\n<li><p>把乘法看成是矩阵；</p>\\n<pre><code>123 x 456:\\n         j = 0   1   2\\n             4   5   6\\ni = 0    1   4   5   6       5  4  3\\n    1    2   8  10  12       4  3  2\\n    2    3  12  15  18       3  2  1\\n左边是两位数相乘结果，右边是相乘结果的位数，于是123 x 456的结果可以是：\\n\\n位数：N  N  N  N  N  N\\n     0  4  5  6 15 18\\n           8 10 12 \\n             12\\n乘积缩放的篮子位置，观察ij就能看出来，位置会放在i+j+1下标的位置上，\\n最后验算一下可知：\\n123 x 456 = 56088 = 18 + （150+120）+（1200+1000+600）+（8000+5000）+40000\\n</code></pre>\\n</li>\\n</ul>\\n<p>于是我们准备好篮子，把每一位的两位数相乘结果算出来，都加在篮子里，然后从篮子后面往前处理好进位就行了</p>\\n<pre><code class=\\\"hljs language-java\\\"><span class=\\\"hljs-keyword\\\">public</span> String <span class=\\\"hljs-title function_\\\">multiply</span><span class=\\\"hljs-params\\\">(String a, String b)</span> {\\n    <span class=\\\"hljs-type\\\">int</span> <span class=\\\"hljs-variable\\\">maxLength</span> <span class=\\\"hljs-operator\\\">=</span> a.length() + b.length();\\n    <span class=\\\"hljs-type\\\">int</span>[] box = <span class=\\\"hljs-keyword\\\">new</span> <span class=\\\"hljs-title class_\\\">int</span>[maxLength];\\n    <span class=\\\"hljs-keyword\\\">for</span> (<span class=\\\"hljs-type\\\">int</span> <span class=\\\"hljs-variable\\\">i</span> <span class=\\\"hljs-operator\\\">=</span> <span class=\\\"hljs-number\\\">0</span>; i &lt; a.length(); i++) {\\n        <span class=\\\"hljs-keyword\\\">for</span> (<span class=\\\"hljs-type\\\">int</span> <span class=\\\"hljs-variable\\\">j</span> <span class=\\\"hljs-operator\\\">=</span> <span class=\\\"hljs-number\\\">0</span>; j &lt; b.length(); j++) {\\n            <span class=\\\"hljs-type\\\">char</span> <span class=\\\"hljs-variable\\\">an</span> <span class=\\\"hljs-operator\\\">=</span> a.charAt(i);\\n            <span class=\\\"hljs-type\\\">char</span> <span class=\\\"hljs-variable\\\">bn</span> <span class=\\\"hljs-operator\\\">=</span> b.charAt(j);\\n            box[i + j + <span class=\\\"hljs-number\\\">1</span>] += (an - <span class=\\\"hljs-string\\\">&#x27;0&#x27;</span>) * (bn - <span class=\\\"hljs-string\\\">&#x27;0&#x27;</span>);\\n        }\\n    }\\n    <span class=\\\"hljs-type\\\">StringBuilder</span> <span class=\\\"hljs-variable\\\">sb</span> <span class=\\\"hljs-operator\\\">=</span> <span class=\\\"hljs-keyword\\\">new</span> <span class=\\\"hljs-title class_\\\">StringBuilder</span>();\\n    <span class=\\\"hljs-keyword\\\">for</span> (<span class=\\\"hljs-type\\\">int</span> <span class=\\\"hljs-variable\\\">i</span> <span class=\\\"hljs-operator\\\">=</span> box.length - <span class=\\\"hljs-number\\\">1</span>; i &gt;= <span class=\\\"hljs-number\\\">0</span>; i--) {\\n        <span class=\\\"hljs-type\\\">int</span> <span class=\\\"hljs-variable\\\">num</span> <span class=\\\"hljs-operator\\\">=</span> box[i];\\n        <span class=\\\"hljs-type\\\">int</span> <span class=\\\"hljs-variable\\\">left</span> <span class=\\\"hljs-operator\\\">=</span> num % <span class=\\\"hljs-number\\\">10</span>;\\n        <span class=\\\"hljs-type\\\">int</span> <span class=\\\"hljs-variable\\\">carry</span> <span class=\\\"hljs-operator\\\">=</span> num / <span class=\\\"hljs-number\\\">10</span>;\\n        <span class=\\\"hljs-keyword\\\">if</span> (i &gt; <span class=\\\"hljs-number\\\">0</span>) {\\n            box[i - <span class=\\\"hljs-number\\\">1</span>] += carry;\\n        }\\n        sb.insert(<span class=\\\"hljs-number\\\">0</span>, left);\\n    }\\n    <span class=\\\"hljs-keyword\\\">while</span> (sb.length() &gt; <span class=\\\"hljs-number\\\">0</span> && sb.charAt(<span class=\\\"hljs-number\\\">0</span>) == <span class=\\\"hljs-string\\\">&#x27;0&#x27;</span>) {\\n        sb.delete(<span class=\\\"hljs-number\\\">0</span>, <span class=\\\"hljs-number\\\">1</span>);\\n    }\\n    <span class=\\\"hljs-keyword\\\">return</span> sb.length() &gt; <span class=\\\"hljs-number\\\">0</span> ? sb.toString() : <span class=\\\"hljs-string\\\">&quot;0&quot;</span>;\\n}\\n</code></pre>\\n<h3 id=\\\"44-wildcard-matchinghard\\\">44. Wildcard Matching(Hard)</h3>\\n<p>Given an input string (<code>s</code>) and a pattern (<code>p</code>), implement wildcard pattern matching with support for <code>&#39;?&#39;</code> and <code>&#39;*&#39;</code>.</p>\\n<pre><code>&#x27;?&#x27; Matches any single character.\\n&#x27;*&#x27; Matches any sequence of characters (including the empty sequence).\\n</code></pre>\\n<p>The matching should cover the <strong>entire</strong> input string (not partial).</p>\\n<p><strong>Note:</strong></p>\\n<ul>\\n<li><code>s</code> could be empty and contains only lowercase letters <code>a-z</code>.</li>\\n<li><code>p</code> could be empty and contains only lowercase letters <code>a-z</code>, and characters like <code>?</code> or <code>*</code>.</li>\\n</ul>\\n<p><strong>Example 1:</strong></p>\\n<pre><code>Input:\\ns = &quot;aa&quot;\\np = &quot;a&quot;\\nOutput: false\\nExplanation: &quot;a&quot; does not match the entire string &quot;aa&quot;.\\n</code></pre>\\n<p><strong>Example 2:</strong></p>\\n<pre><code>Input:\\ns = &quot;aa&quot;\\np = &quot;*&quot;\\nOutput: true\\nExplanation: &#x27;*&#x27; matches any sequence.\\n</code></pre>\\n<p><strong>Example 3:</strong></p>\\n<pre><code>Input:\\ns = &quot;cb&quot;\\np = &quot;?a&quot;\\nOutput: false\\nExplanation: &#x27;?&#x27; matches &#x27;c&#x27;, but the second letter is &#x27;a&#x27;, which does not match &#x27;b&#x27;.\\n</code></pre>\\n<p><strong>Example 4:</strong></p>\\n<pre><code>Input:\\ns = &quot;adceb&quot;\\np = &quot;*a*b&quot;\\nOutput: true\\nExplanation: The first &#x27;*&#x27; matches the empty sequence, while the second &#x27;*&#x27; matches the substring &quot;dce&quot;.\\n</code></pre>\\n<p><strong>Example 5:</strong></p>\\n<pre><code>Input:\\ns = &quot;acdcb&quot;\\np = &quot;a*c?b&quot;\\nOutput: false\\n</code></pre>\\n<h4 id=\\\"dp-beat-7043\\\">DP (Beat 70.43%)</h4>\\n<p>这题和第10题类似，不同的是它的*可以是任意序列，而不是任意前面一个字符，所以首先它可以用DP去打，要领：</p>\\n<pre><code>if (pc == &#x27;?&#x27;) {\\n    dp[i][j] = dp[i - 1][j - 1];\\n}\\nif (pc == &#x27;*&#x27;) {\\n    dp[i][j] = dp[i][j - 1] | dp[i - 1][j];\\n}\\nif (pc == sc) {\\n    dp[i][j] = sc == pc && dp[i - 1][j - 1];\\n}\\n\\n于是比较简单的写出矩阵来：\\ns: acdcb p: a*c?b\\n\\n    + a * c ? b\\n +  √ × × × × ×\\n a  × √ √ × × ×\\n c  × × √ √ × ×\\n d  × × √ × √ ×\\n c  × × √ √ × ×\\n b  × × √ × √ ×\\n</code></pre>\\n<p>于是：</p>\\n<pre><code class=\\\"hljs language-java\\\"><span class=\\\"hljs-keyword\\\">public</span> <span class=\\\"hljs-type\\\">boolean</span> <span class=\\\"hljs-title function_\\\">isMatch</span><span class=\\\"hljs-params\\\">(String s, String p)</span> {\\n    s = <span class=\\\"hljs-string\\\">&quot;+&quot;</span> + s;\\n    p = <span class=\\\"hljs-string\\\">&quot;+&quot;</span> + p;\\n    <span class=\\\"hljs-type\\\">boolean</span>[][] dp = <span class=\\\"hljs-keyword\\\">new</span> <span class=\\\"hljs-title class_\\\">boolean</span>[s.length()][p.length()];\\n    dp[<span class=\\\"hljs-number\\\">0</span>][<span class=\\\"hljs-number\\\">0</span>] = <span class=\\\"hljs-literal\\\">true</span>;\\n    <span class=\\\"hljs-keyword\\\">for</span> (<span class=\\\"hljs-type\\\">int</span> <span class=\\\"hljs-variable\\\">i</span> <span class=\\\"hljs-operator\\\">=</span> <span class=\\\"hljs-number\\\">1</span>; i &lt; p.length(); i++) {\\n        <span class=\\\"hljs-keyword\\\">if</span> (p.charAt(i) == <span class=\\\"hljs-string\\\">&#x27;*&#x27;</span>) {\\n            dp[<span class=\\\"hljs-number\\\">0</span>][i] = dp[<span class=\\\"hljs-number\\\">0</span>][i - <span class=\\\"hljs-number\\\">1</span>];\\n        }\\n    }\\n    <span class=\\\"hljs-keyword\\\">for</span> (<span class=\\\"hljs-type\\\">int</span> <span class=\\\"hljs-variable\\\">i</span> <span class=\\\"hljs-operator\\\">=</span> <span class=\\\"hljs-number\\\">1</span>; i &lt; s.length(); i++) {\\n        <span class=\\\"hljs-keyword\\\">for</span> (<span class=\\\"hljs-type\\\">int</span> <span class=\\\"hljs-variable\\\">j</span> <span class=\\\"hljs-operator\\\">=</span> <span class=\\\"hljs-number\\\">1</span>; j &lt; p.length(); j++) {\\n            <span class=\\\"hljs-type\\\">char</span> <span class=\\\"hljs-variable\\\">sc</span> <span class=\\\"hljs-operator\\\">=</span> s.charAt(i);\\n            <span class=\\\"hljs-type\\\">char</span> <span class=\\\"hljs-variable\\\">pc</span> <span class=\\\"hljs-operator\\\">=</span> p.charAt(j);\\n            <span class=\\\"hljs-keyword\\\">if</span> (pc == <span class=\\\"hljs-string\\\">&#x27;*&#x27;</span>) {\\n                dp[i][j] = dp[i][j - <span class=\\\"hljs-number\\\">1</span>] | dp[i - <span class=\\\"hljs-number\\\">1</span>][j];\\n            } <span class=\\\"hljs-keyword\\\">else</span> <span class=\\\"hljs-keyword\\\">if</span> (pc == <span class=\\\"hljs-string\\\">&#x27;?&#x27;</span>) {\\n                dp[i][j] = dp[i - <span class=\\\"hljs-number\\\">1</span>][j - <span class=\\\"hljs-number\\\">1</span>];\\n            } <span class=\\\"hljs-keyword\\\">else</span> {\\n                dp[i][j] = sc == pc && dp[i - <span class=\\\"hljs-number\\\">1</span>][j - <span class=\\\"hljs-number\\\">1</span>];\\n            }\\n        }\\n    }\\n    <span class=\\\"hljs-keyword\\\">return</span> dp[s.length() - <span class=\\\"hljs-number\\\">1</span>][p.length() - <span class=\\\"hljs-number\\\">1</span>];\\n}\\n</code></pre>\\n<p>虽然按部就班地打下了这题，但是beat率不高，所以这题还有更精妙的做法，讨论区有一种线性打法，直接根据if-else来打，我觉得case太难覆盖，我自己做的话，笔试时间内可能打不出，所以不推荐；</p>\\n<h4 id=\\\"dfsbeat-100\\\">DFS(Beat 100%)</h4>\\n<p>参考一下究竟是怎么个dfs法：</p>\\n<pre><code class=\\\"hljs language-java\\\"><span class=\\\"hljs-keyword\\\">public</span> <span class=\\\"hljs-type\\\">boolean</span> <span class=\\\"hljs-title function_\\\">isMatch</span><span class=\\\"hljs-params\\\">(String s, String p)</span> {\\n    <span class=\\\"hljs-keyword\\\">return</span> dfs(s, p, <span class=\\\"hljs-number\\\">0</span>, <span class=\\\"hljs-number\\\">0</span>) &gt; <span class=\\\"hljs-number\\\">1</span>;\\n}\\n\\n<span class=\\\"hljs-keyword\\\">private</span> <span class=\\\"hljs-type\\\">int</span> <span class=\\\"hljs-title function_\\\">dfs</span><span class=\\\"hljs-params\\\">(String s, String p, <span class=\\\"hljs-type\\\">int</span> si, <span class=\\\"hljs-type\\\">int</span> pi)</span> {\\n    <span class=\\\"hljs-keyword\\\">if</span> (si == s.length() && pi == p.length()) {\\n        <span class=\\\"hljs-keyword\\\">return</span> <span class=\\\"hljs-number\\\">2</span>;\\n    }\\n    <span class=\\\"hljs-keyword\\\">if</span> (si == s.length() && p.charAt(pi) != <span class=\\\"hljs-string\\\">&#x27;*&#x27;</span>) {\\n        <span class=\\\"hljs-keyword\\\">return</span> <span class=\\\"hljs-number\\\">0</span>;\\n    }\\n    <span class=\\\"hljs-keyword\\\">if</span> (pi == p.length()) {\\n        <span class=\\\"hljs-keyword\\\">return</span> <span class=\\\"hljs-number\\\">1</span>;\\n    }\\n    <span class=\\\"hljs-keyword\\\">if</span> (p.charAt(pi) == <span class=\\\"hljs-string\\\">&#x27;*&#x27;</span>) {\\n        <span class=\\\"hljs-keyword\\\">if</span> (pi + <span class=\\\"hljs-number\\\">1</span> &lt; p.length() && p.charAt(pi + <span class=\\\"hljs-number\\\">1</span>) == <span class=\\\"hljs-string\\\">&#x27;*&#x27;</span>) {\\n            <span class=\\\"hljs-keyword\\\">return</span> dfs(s, p, si, pi + <span class=\\\"hljs-number\\\">1</span>);\\n        }\\n        <span class=\\\"hljs-keyword\\\">for</span> (<span class=\\\"hljs-type\\\">int</span> <span class=\\\"hljs-variable\\\">i</span> <span class=\\\"hljs-operator\\\">=</span> <span class=\\\"hljs-number\\\">0</span>; i &lt;= s.length() - si; i++) {\\n            <span class=\\\"hljs-type\\\">int</span> <span class=\\\"hljs-variable\\\">ret</span> <span class=\\\"hljs-operator\\\">=</span> dfs(s, p, si + i, pi + <span class=\\\"hljs-number\\\">1</span>);\\n            <span class=\\\"hljs-keyword\\\">if</span> (ret == <span class=\\\"hljs-number\\\">0</span> || ret == <span class=\\\"hljs-number\\\">2</span>) {\\n                <span class=\\\"hljs-keyword\\\">return</span> ret;\\n            }\\n        }\\n    }\\n    <span class=\\\"hljs-keyword\\\">if</span> (s.charAt(si) == p.charAt(pi) || p.charAt(pi) == <span class=\\\"hljs-string\\\">&#x27;?&#x27;</span>) {\\n        <span class=\\\"hljs-keyword\\\">return</span> dfs(s, p, si + <span class=\\\"hljs-number\\\">1</span>, pi + <span class=\\\"hljs-number\\\">1</span>);\\n    }\\n    <span class=\\\"hljs-keyword\\\">return</span> <span class=\\\"hljs-number\\\">1</span>;\\n}\\n</code></pre>\\n<h3 id=\\\"45-jump-game-ii-hard\\\">45. Jump Game II (Hard)</h3>\\n<p>Given an array of non-negative integers, you are initially positioned at the first index of the array.</p>\\n<p>Each element in the array represents your maximum jump length at that position.</p>\\n<p>Your goal is to reach the last index in the minimum number of jumps.</p>\\n<p><strong>Example:</strong></p>\\n<pre><code>Input: [2,3,1,1,4]\\nOutput: 2\\nExplanation: The minimum number of jumps to reach the last index is 2.\\n    Jump 1 step from index 0 to 1, then 3 steps to the last index.\\n</code></pre>\\n<p>这题有在<a href=\\\"./1flo1c0.html\\\">DP Again</a>做过分析，就不多说了</p>\\n<h4 id=\\\"dp\\\">DP</h4>\\n<pre><code class=\\\"hljs language-java\\\"><span class=\\\"hljs-keyword\\\">public</span> <span class=\\\"hljs-type\\\">int</span> <span class=\\\"hljs-title function_\\\">jump</span><span class=\\\"hljs-params\\\">(<span class=\\\"hljs-type\\\">int</span>[] nums)</span> {\\n    <span class=\\\"hljs-type\\\">int</span>[] dp = <span class=\\\"hljs-keyword\\\">new</span> <span class=\\\"hljs-title class_\\\">int</span>[nums.length];\\n    <span class=\\\"hljs-keyword\\\">for</span> (<span class=\\\"hljs-type\\\">int</span> <span class=\\\"hljs-variable\\\">i</span> <span class=\\\"hljs-operator\\\">=</span> nums.length - <span class=\\\"hljs-number\\\">2</span>; i &gt;= <span class=\\\"hljs-number\\\">0</span>; i--) {\\n        <span class=\\\"hljs-comment\\\">// one jump to the end</span>\\n        <span class=\\\"hljs-keyword\\\">if</span> (i + nums[i] &gt;= nums.length) {\\n            dp[i] = <span class=\\\"hljs-number\\\">1</span>;\\n        } <span class=\\\"hljs-keyword\\\">else</span> {\\n            <span class=\\\"hljs-comment\\\">// jump max step if it can reach the end</span>\\n            <span class=\\\"hljs-type\\\">int</span> <span class=\\\"hljs-variable\\\">tmp</span> <span class=\\\"hljs-operator\\\">=</span> Integer.MAX_VALUE;\\n            <span class=\\\"hljs-keyword\\\">for</span> (<span class=\\\"hljs-type\\\">int</span> <span class=\\\"hljs-variable\\\">j</span> <span class=\\\"hljs-operator\\\">=</span> i + <span class=\\\"hljs-number\\\">1</span>; j &lt;= i + nums[i]; j++) {\\n                <span class=\\\"hljs-keyword\\\">if</span> (dp[j] != Integer.MAX_VALUE) {\\n                    tmp = Math.min(tmp, dp[j] + <span class=\\\"hljs-number\\\">1</span>);\\n                }\\n            }\\n            dp[i] = tmp;\\n        }\\n    }\\n    <span class=\\\"hljs-keyword\\\">return</span> dp[<span class=\\\"hljs-number\\\">0</span>];\\n}\\n</code></pre>\\n<h4 id=\\\"bfs\\\">BFS</h4>\\n<pre><code class=\\\"hljs language-java\\\"><span class=\\\"hljs-keyword\\\">public</span> <span class=\\\"hljs-type\\\">int</span> <span class=\\\"hljs-title function_\\\">jump</span><span class=\\\"hljs-params\\\">(<span class=\\\"hljs-type\\\">int</span>[] nums)</span> {\\n    <span class=\\\"hljs-type\\\">int</span> <span class=\\\"hljs-variable\\\">jump</span> <span class=\\\"hljs-operator\\\">=</span> <span class=\\\"hljs-number\\\">0</span>;\\n    <span class=\\\"hljs-type\\\">int</span> <span class=\\\"hljs-variable\\\">start</span> <span class=\\\"hljs-operator\\\">=</span> <span class=\\\"hljs-number\\\">0</span>, end = <span class=\\\"hljs-number\\\">0</span>;\\n    <span class=\\\"hljs-keyword\\\">while</span> (end &lt; nums.length - <span class=\\\"hljs-number\\\">1</span>) {\\n        jump++;\\n        <span class=\\\"hljs-type\\\">int</span> <span class=\\\"hljs-variable\\\">tmpEnd</span> <span class=\\\"hljs-operator\\\">=</span> end + <span class=\\\"hljs-number\\\">1</span>;\\n        <span class=\\\"hljs-keyword\\\">for</span> (<span class=\\\"hljs-type\\\">int</span> <span class=\\\"hljs-variable\\\">i</span> <span class=\\\"hljs-operator\\\">=</span> start; i &lt;= end; i++) {\\n            <span class=\\\"hljs-keyword\\\">if</span> (i + nums[i] &gt; nums.length) {\\n                <span class=\\\"hljs-keyword\\\">return</span> jump;\\n            }\\n            tmpEnd = Math.max(tmpEnd, i + nums[i]);\\n        }\\n        start = end + <span class=\\\"hljs-number\\\">1</span>;\\n        end = tmpEnd;\\n    }\\n    <span class=\\\"hljs-keyword\\\">return</span> jump;\\n}\\n</code></pre>\\n\";","export default \"<h2 id=\\\"introduction\\\">Introduction</h2>\\n<p>官方指南不叫指南，叫document，于是乎开始无教程纯瞎子摸石头，于是想着把整个官方指南都看一遍，然后梳理梳理。</p>\\n<ul>\\n<li>关于electron的命名空间</li>\\n<li>主进程和渲染进程<ul>\\n<li>区别</li>\\n<li>通信方式</li>\\n</ul>\\n</li>\\n<li>添加功能<ul>\\n<li>通知</li>\\n<li>任务栏进度bar</li>\\n<li>其他</li>\\n</ul>\\n</li>\\n</ul>\\n<h2 id=\\\"electron-namespace\\\">Electron Namespace</h2>\\n<p><code>electron</code> 模块所提供的功能都是通过命名空间暴露出来的。 比如说： <code>electron.app</code>负责管理Electron 应用程序的生命周期， <code>electron.BrowserWindow</code>类负责创建窗口。</p>\\n<p>从0.37开始，可以使用 <a href=\\\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Destructuring_assignment\\\">destructuring assignment</a> (es6解构赋值)来使内置模块更容易使用。</p>\\n<pre><code class=\\\"hljs language-javascript\\\"><span class=\\\"hljs-keyword\\\">const</span> { app, <span class=\\\"hljs-title class_\\\">BrowserWindow</span> } = <span class=\\\"hljs-built_in\\\">require</span>(<span class=\\\"hljs-string\\\">&#x27;electron&#x27;</span>)\\n\\n<span class=\\\"hljs-keyword\\\">let</span> win\\n\\napp.<span class=\\\"hljs-title function_\\\">on</span>(<span class=\\\"hljs-string\\\">&#x27;ready&#x27;</span>, <span class=\\\"hljs-function\\\">() =&gt;</span> {\\n  win = <span class=\\\"hljs-keyword\\\">new</span> <span class=\\\"hljs-title class_\\\">BrowserWindow</span>()\\n  win.<span class=\\\"hljs-title function_\\\">loadURL</span>(<span class=\\\"hljs-string\\\">&#x27;https://github.com&#x27;</span>)\\n})<span class=\\\"hljs-title class_\\\">Copy</span>\\n</code></pre>\\n<p>如果您需要整个 <code>electron</code> 模块, 则可以<code>require</code>它, 然后使用 destructuring 从 <code>electron</code> 访问各个模块。</p>\\n<pre><code class=\\\"hljs language-javascript\\\"><span class=\\\"hljs-keyword\\\">const</span> electron = <span class=\\\"hljs-built_in\\\">require</span>(<span class=\\\"hljs-string\\\">&#x27;electron&#x27;</span>)\\n<span class=\\\"hljs-keyword\\\">const</span> { app, <span class=\\\"hljs-title class_\\\">BrowserWindow</span> } = electron\\n\\n<span class=\\\"hljs-keyword\\\">let</span> win\\n\\napp.<span class=\\\"hljs-title function_\\\">on</span>(<span class=\\\"hljs-string\\\">&#x27;ready&#x27;</span>, <span class=\\\"hljs-function\\\">() =&gt;</span> {\\n  win = <span class=\\\"hljs-keyword\\\">new</span> <span class=\\\"hljs-title class_\\\">BrowserWindow</span>()\\n  win.<span class=\\\"hljs-title function_\\\">loadURL</span>(<span class=\\\"hljs-string\\\">&#x27;https://github.com&#x27;</span>)\\n})<span class=\\\"hljs-title class_\\\">Copy</span>\\n</code></pre>\\n<p>这等效于以下代码:</p>\\n<pre><code class=\\\"hljs language-javascript\\\"><span class=\\\"hljs-keyword\\\">const</span> electron = <span class=\\\"hljs-built_in\\\">require</span>(<span class=\\\"hljs-string\\\">&#x27;electron&#x27;</span>)\\n<span class=\\\"hljs-keyword\\\">const</span> app = electron.<span class=\\\"hljs-property\\\">app</span>\\n<span class=\\\"hljs-keyword\\\">const</span> <span class=\\\"hljs-title class_\\\">BrowserWindow</span> = electron.<span class=\\\"hljs-property\\\">BrowserWindow</span>\\n<span class=\\\"hljs-keyword\\\">let</span> win\\n\\napp.<span class=\\\"hljs-title function_\\\">on</span>(<span class=\\\"hljs-string\\\">&#x27;ready&#x27;</span>, <span class=\\\"hljs-function\\\">() =&gt;</span> {\\n  win = <span class=\\\"hljs-keyword\\\">new</span> <span class=\\\"hljs-title class_\\\">BrowserWindow</span>()\\n  win.<span class=\\\"hljs-title function_\\\">loadURL</span>(<span class=\\\"hljs-string\\\">&#x27;https://github.com&#x27;</span>)\\n})\\n</code></pre>\\n<h2 id=\\\"process\\\">Process</h2>\\n<p>Electron 运行 <code>package.json</code> 的 <code>main</code> 脚本的进程被称为<strong>主进程</strong>。 在主进程中运行的脚本通过创建web页面来展示用户界面。 一个 Electron 应用总是有且只有一个主进程。</p>\\n<p>由于 Electron 使用了 Chromium 来展示 web 页面，所以 Chromium 的多进程架构也被使用到。 每个 Electron 中的 web 页面运行在它自己的<strong>渲染进程</strong>中。</p>\\n<blockquote>\\n<p>在普通的浏览器中，web页面通常在沙盒环境中运行，并且无法访问操作系统的原生资源。 然而 Electron 的用户在 Node.js 的 API 支持下可以在页面中和操作系统进行一些底层交互。</p>\\n</blockquote>\\n<h3 id=\\\"differences-between-main-process-and-render-process\\\">Differences Between Main Process And Render Process</h3>\\n<p>主进程使用 <code>BrowserWindow</code> 实例创建页面。 每个 <code>BrowserWindow</code> 实例都在自己的渲染进程里运行页面。 当一个 <code>BrowserWindow</code> 实例被销毁后，相应的渲染进程也会被终止。</p>\\n<p>主进程管理所有的web页面和它们对应的渲染进程。 每个渲染进程都是独立的，它只关心它所运行的 web 页面。</p>\\n<p>在页面中调用与 GUI 相关的原生 API 是不被允许的，因为在 web 页面里操作原生的 GUI 资源是非常危险的，而且容易造成资源泄露。 如果你想在 web 页面里使用 GUI 操作，其对应的渲染进程必须与主进程进行通讯，请求主进程进行相关的 GUI 操作。</p>\\n<p>Node. js 的所有 <a href=\\\"https://nodejs.org/api/\\\">内置模块 </a>都在Electron中可用， 第三方 node 模块中也完全支持 (包括 <a href=\\\"https://electronjs.org/docs/tutorial/using-native-node-modules\\\">原生模块 </a>)。</p>\\n<p>Electron 还为开发原生桌面应用程序提供了一些额外的内置模块。 某些模块仅在主进程中可用, 有些仅在渲染进程 (web 页) 中可用, 而有些在这两个进程中都可以使用。</p>\\n<p><strong>基本规则是: 如果一个模块是 <a href=\\\"https://en.wikipedia.org/wiki/Graphical_user_interface\\\">GUI </a>或底层系统相关的, 那么它应该只在主进程中可用。</strong></p>\\n<h3 id=\\\"communication-of-processes\\\">Communication Of Processes</h3>\\n<p>进程之间的通信有3种：</p>\\n<ul>\\n<li>ipcMain和ipcRenderer：实现进程间的<strong>异步同步消息通信</strong></li>\\n<li>remote模块RPC通信：<strong>主进程API</strong>暴露到渲染进程</li>\\n<li>页面间共享对象：可以暴露对象也可以通信</li>\\n</ul>\\n<h4 id=\\\"ipc\\\">IPC</h4>\\n<p><code>ipcMain</code>模块是<a href=\\\"https://nodejs.org/api/events.html#events_class_eventemitter\\\">EventEmitter</a> 类的一个实例。 当在主进程中使用时，它处理从渲染器进程（网页）发送出来的异步和同步信息。 从渲染器进程发送的消息将被发送到该模块。</p>\\n<p><code>ipcRenderer</code> 是一个 <a href=\\\"https://nodejs.org/api/events.html#events_class_eventemitter\\\">EventEmitter</a> 的实例。 你可以使用它提供的一些方法从渲染进程 (web 页面) 发送同步或异步的消息到主进程。 也可以接收主进程回复的消息。</p>\\n<p>在main.js中：</p>\\n<pre><code class=\\\"hljs language-javascript\\\"><span class=\\\"hljs-comment\\\">// 主进程和渲染进程之间通信</span>\\n<span class=\\\"hljs-keyword\\\">const</span> {\\n    ipcMain\\n} = <span class=\\\"hljs-built_in\\\">require</span>(<span class=\\\"hljs-string\\\">&#x27;electron&#x27;</span>)\\nipcMain.<span class=\\\"hljs-title function_\\\">on</span>(<span class=\\\"hljs-string\\\">&#x27;asynchronous-message&#x27;</span>, <span class=\\\"hljs-function\\\">(<span class=\\\"hljs-params\\\">event, arg</span>) =&gt;</span> {\\n    <span class=\\\"hljs-variable language_\\\">console</span>.<span class=\\\"hljs-title function_\\\">log</span>(arg)\\n    <span class=\\\"hljs-comment\\\">// 通过event的reply方法 回复异步信息</span>\\n    <span class=\\\"hljs-built_in\\\">setTimeout</span>(<span class=\\\"hljs-function\\\">() =&gt;</span> {\\n        event.<span class=\\\"hljs-title function_\\\">reply</span>(<span class=\\\"hljs-string\\\">&#x27;asynchronous-reply&#x27;</span>, <span class=\\\"hljs-string\\\">&#x27;as-pong&#x27;</span>)\\n    }, <span class=\\\"hljs-number\\\">2000</span>);\\n})\\nipcMain.<span class=\\\"hljs-title function_\\\">on</span>(<span class=\\\"hljs-string\\\">&#x27;synchronous-message&#x27;</span>, <span class=\\\"hljs-function\\\">(<span class=\\\"hljs-params\\\">event, arg</span>) =&gt;</span> {\\n    <span class=\\\"hljs-variable language_\\\">console</span>.<span class=\\\"hljs-title function_\\\">log</span>(arg)\\n    <span class=\\\"hljs-comment\\\">// 直接用event的returnValue值来回复消息</span>\\n    event.<span class=\\\"hljs-property\\\">returnValue</span> = <span class=\\\"hljs-string\\\">&#x27;s-pong&#x27;</span>\\n})\\n\\n</code></pre>\\n<p>在render.js中：</p>\\n<pre><code class=\\\"hljs language-javascript\\\"><span class=\\\"hljs-keyword\\\">const</span> { ipcRenderer } = <span class=\\\"hljs-built_in\\\">require</span>(<span class=\\\"hljs-string\\\">&#x27;electron&#x27;</span>)\\n$(<span class=\\\"hljs-string\\\">&#x27;#asmessage&#x27;</span>).<span class=\\\"hljs-title function_\\\">click</span>(<span class=\\\"hljs-function\\\">() =&gt;</span> {\\n    <span class=\\\"hljs-comment\\\">// 异步信息 直接发送</span>\\n    ipcRenderer.<span class=\\\"hljs-title function_\\\">send</span>(<span class=\\\"hljs-string\\\">&#x27;asynchronous-message&#x27;</span>,<span class=\\\"hljs-string\\\">&#x27;as-ping&#x27;</span>)\\n})\\n<span class=\\\"hljs-comment\\\">// 监听异步信息的响应</span>\\nipcRenderer.<span class=\\\"hljs-title function_\\\">on</span>(<span class=\\\"hljs-string\\\">&#x27;asynchronous-reply&#x27;</span>, <span class=\\\"hljs-function\\\">(<span class=\\\"hljs-params\\\">event, arg</span>) =&gt;</span> {\\n    <span class=\\\"hljs-comment\\\">// pong</span>\\n    <span class=\\\"hljs-variable language_\\\">console</span>.<span class=\\\"hljs-title function_\\\">log</span>(arg)\\n})\\n$(<span class=\\\"hljs-string\\\">&#x27;#smessage&#x27;</span>).<span class=\\\"hljs-title function_\\\">click</span>(<span class=\\\"hljs-function\\\">() =&gt;</span> {\\n    <span class=\\\"hljs-comment\\\">// 同步信息 发送之后等待响应</span>\\n    <span class=\\\"hljs-variable language_\\\">console</span>.<span class=\\\"hljs-title function_\\\">log</span>(ipcRenderer.<span class=\\\"hljs-title function_\\\">sendSync</span>(<span class=\\\"hljs-string\\\">&#x27;synchronous-message&#x27;</span>,<span class=\\\"hljs-string\\\">&#x27;s-ping&#x27;</span>))\\n})\\n</code></pre>\\n<h4 id=\\\"remote\\\">Remote</h4>\\n<p><code>remote</code> 模块为渲染进程（web页面）和主进程通信（IPC）提供了一种简单方法。</p>\\n<p>在Electron中, GUI 相关的模块 (如 <code>dialog</code>、<code>menu</code> 等) 仅在主进程中可用, 在渲染进程中不可用。 为了在渲染进程中使用它们, <code>ipc</code> 模块是向主进程发送进程间消息所必需的。 使用 <code>remote</code> 模块, 你可以调用 main 进程对象的方法, 而不必显式发送进程间消息, 类似于 Java 的 <a href=\\\"https://en.wikipedia.org/wiki/Java_remote_method_invocation\\\">RMI </a>。\\n例如：从渲染进程创建浏览器窗口/获取app对象</p>\\n<pre><code class=\\\"hljs language-javascript\\\"><span class=\\\"hljs-keyword\\\">const</span> { <span class=\\\"hljs-title class_\\\">BrowserWindow</span> } = <span class=\\\"hljs-built_in\\\">require</span>(<span class=\\\"hljs-string\\\">&#x27;electron&#x27;</span>).<span class=\\\"hljs-property\\\">remote</span>\\n<span class=\\\"hljs-keyword\\\">let</span> win = <span class=\\\"hljs-keyword\\\">new</span> <span class=\\\"hljs-title class_\\\">BrowserWindow</span>({ <span class=\\\"hljs-attr\\\">width</span>: <span class=\\\"hljs-number\\\">800</span>, <span class=\\\"hljs-attr\\\">height</span>: <span class=\\\"hljs-number\\\">600</span> })\\nwin.<span class=\\\"hljs-title function_\\\">loadURL</span>(<span class=\\\"hljs-string\\\">&#x27;https://github.com&#x27;</span>)<span class=\\\"hljs-title class_\\\">Copy</span>\\n\\n<span class=\\\"hljs-keyword\\\">const</span> app = <span class=\\\"hljs-built_in\\\">require</span>(<span class=\\\"hljs-string\\\">&#x27;electron&#x27;</span>).<span class=\\\"hljs-property\\\">remote</span>.<span class=\\\"hljs-property\\\">app</span>\\n<span class=\\\"hljs-variable language_\\\">console</span>.<span class=\\\"hljs-title function_\\\">log</span>(app)\\n</code></pre>\\n<p><strong>注意:</strong> 反过来（如果需要从主进程访问渲染进程），可以使用 <a href=\\\"https://electronjs.org/docs/api/web-contents#contentsexecutejavascriptcode-usergesture-callback\\\">webContents. executeJavascript </a>。</p>\\n<p><strong>注意事项：</strong> 因为安全原因，remote 模块能在以下几种情况下被禁用：</p>\\n<ul>\\n<li><a href=\\\"https://electronjs.org/docs/api/browser-window\\\"><code>BrowserWindow</code></a> - 通过设置 <code>enableRemoteModule</code> 选项为 <code>false</code>。</li>\\n<li><a href=\\\"https://electronjs.org/docs/api/webview-tag\\\"><code>&lt;webview&gt;</code></a> - 通过把 <code>enableremotemodule</code>属性设置成 <code>false</code>。</li>\\n</ul>\\n<p>在上面的示例中, <a href=\\\"https://github.com/electron/electron/blob/master/docs/api/browser-window.md\\\"><code>BrowserWindow</code></a>和<code>win</code> 都是远程对象, <code>new BrowserWindow</code> 在渲染过程中没有创建 <code>BrowserWindow</code> 对象。 取而代之的是，它在主进程中创建了一个 <code>BrowserWindow</code>对象，并且在渲染进程中返回相应的远程对象，即<code>win</code>对象。</p>\\n<p><strong>注意：</strong> 当远程对象被第一次引用时，只有<a href=\\\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Enumerability_and_ownership_of_properties\\\">可枚举的属性</a>可以通过远程访问。</p>\\n<p><strong>注意：</strong> 当通过<code>remote</code>模块访问时，数组和缓冲区在IPC上复制。 在渲染进程中修改它们不会在主进程中修改它们，反之亦然。 </p>\\n<p>Electron 确保只要渲染进程中的远程对象一直存在（换句话说，没有被回收），主进程中的相应对象就不会被释放。 当远程对象被垃圾回收后，主进程中的相应对象将被解除引用。</p>\\n<p>如果远程对象在渲染进程中泄露（例如存储在映射中，但从未释放），则主进程中的相应对象也将被泄漏，所以您应该非常小心，不要泄漏远程对象。</p>\\n<p>但是，字符串和数字等主要值的类型是通过复制发送的。</p>\\n<h4 id=\\\"sharing-object\\\">Sharing Object</h4>\\n<p>在两个网页（渲染进程）间共享数据最简单的方法是使用浏览器中已经实现的 HTML5 API。 其中比较好的方案是用 <a href=\\\"https://developer.mozilla.org/en-US/docs/Web/API/Storage\\\">Storage API</a>， <a href=\\\"https://developer.mozilla.org/en-US/docs/Web/API/Window/localStorage\\\"><code>localStorage</code></a>，<a href=\\\"https://developer.mozilla.org/en-US/docs/Web/API/Window/sessionStorage\\\"><code>sessionStorage</code></a> 或者 <a href=\\\"https://developer.mozilla.org/en-US/docs/Web/API/IndexedDB_API\\\">IndexedDB</a>。</p>\\n<p>你还可以用 <code>Electron</code> 内的 IPC 机制实现。将数据存在主进程的某个全局变量中，然后在多个渲染进程中使用 <code>remote</code> 模块来访问它。</p>\\n<p>主进程和渲染进程之间：</p>\\n<pre><code class=\\\"hljs language-javascript\\\"><span class=\\\"hljs-comment\\\">// 在主进程中</span>\\n<span class=\\\"hljs-keyword\\\">let</span> win = <span class=\\\"hljs-keyword\\\">new</span> <span class=\\\"hljs-title class_\\\">BrowserWindow</span>({...})\\n                             \\n<span class=\\\"hljs-variable language_\\\">global</span>.<span class=\\\"hljs-property\\\">share</span> = {\\n    <span class=\\\"hljs-attr\\\">win</span>: win\\n}\\n                            \\n<span class=\\\"hljs-keyword\\\">const</span> win = <span class=\\\"hljs-built_in\\\">require</span>(<span class=\\\"hljs-string\\\">&#x27;electron&#x27;</span>).<span class=\\\"hljs-property\\\">remote</span>.<span class=\\\"hljs-title function_\\\">getGlobal</span>(<span class=\\\"hljs-string\\\">&#x27;share&#x27;</span>).<span class=\\\"hljs-property\\\">win</span>\\n</code></pre>\\n<p>渲染进程之间：</p>\\n<pre><code class=\\\"hljs language-javascript\\\"><span class=\\\"hljs-comment\\\">// 在主进程中</span>\\n<span class=\\\"hljs-variable language_\\\">global</span>.<span class=\\\"hljs-property\\\">sharedObject</span> = {\\n  <span class=\\\"hljs-attr\\\">someProperty</span>: <span class=\\\"hljs-string\\\">&#x27;default value&#x27;</span>\\n}                       \\n<span class=\\\"hljs-comment\\\">// 在第一个页面中</span>\\n<span class=\\\"hljs-built_in\\\">require</span>(<span class=\\\"hljs-string\\\">&#x27;electron&#x27;</span>).<span class=\\\"hljs-property\\\">remote</span>.<span class=\\\"hljs-title function_\\\">getGlobal</span>(<span class=\\\"hljs-string\\\">&#x27;sharedObject&#x27;</span>).<span class=\\\"hljs-property\\\">someProperty</span> = <span class=\\\"hljs-string\\\">&#x27;new value&#x27;</span>\\n<span class=\\\"hljs-comment\\\">// 在第二个页面中</span>\\n<span class=\\\"hljs-variable language_\\\">console</span>.<span class=\\\"hljs-title function_\\\">log</span>(<span class=\\\"hljs-built_in\\\">require</span>(<span class=\\\"hljs-string\\\">&#x27;electron&#x27;</span>).<span class=\\\"hljs-property\\\">remote</span>.<span class=\\\"hljs-title function_\\\">getGlobal</span>(<span class=\\\"hljs-string\\\">&#x27;sharedObject&#x27;</span>).<span class=\\\"hljs-property\\\">someProperty</span>)\\n</code></pre>\\n<h2 id=\\\"optional-function\\\">Optional Function</h2>\\n<h4 id=\\\"notification\\\">Notification</h4>\\n<p>这个功能就是弹出系统的提示窗，但是支持很不友好，有很多BUG，也许是我没调出来，但是github上也有专门的<a href=\\\"https://github.com/electron/electron/issues/10864\\\">issue</a>还在open，说明我不是特例，我反正搞了好久没搞出来。</p>\\n<p>所有三个操作系统都提供了应用程序向用户发送通知的手段。 Electron允许开发者使用 <a href=\\\"https://notifications.spec.whatwg.org/\\\">HTML5 Notification API</a> 发送通知，并使用当前运行的操作系统的本地通知 API 来显示它。</p>\\n<p><strong>注意:</strong> 由于这是一个 HTML5 API，它只能在渲染器进程中使用。 如果你想在主进程中显示通知，请查看 <a href=\\\"https://electronjs.org/docs/api/notification\\\">Notification</a> 模块.</p>\\n<pre><code class=\\\"hljs language-javascript\\\"><span class=\\\"hljs-keyword\\\">let</span> myNotification = <span class=\\\"hljs-keyword\\\">new</span> <span class=\\\"hljs-title class_\\\">Notification</span>(<span class=\\\"hljs-string\\\">&#x27;标题&#x27;</span>, {\\n  <span class=\\\"hljs-attr\\\">body</span>: <span class=\\\"hljs-string\\\">&#x27;通知正文内容&#x27;</span>\\n})\\n\\nmyNotification.<span class=\\\"hljs-property\\\">onclick</span> = <span class=\\\"hljs-function\\\">() =&gt;</span> {\\n  <span class=\\\"hljs-variable language_\\\">console</span>.<span class=\\\"hljs-title function_\\\">log</span>(<span class=\\\"hljs-string\\\">&#x27;通知被点击&#x27;</span>)\\n}\\n</code></pre>\\n<h4 id=\\\"progressbar\\\">ProgressBar</h4>\\n<p>可以设置托盘图标的绿色进度条</p>\\n<pre><code class=\\\"hljs language-javascript\\\"><span class=\\\"hljs-keyword\\\">let</span> progress = <span class=\\\"hljs-number\\\">0</span>;\\n$(<span class=\\\"hljs-string\\\">&#x27;#processbar&#x27;</span>).<span class=\\\"hljs-title function_\\\">click</span>(<span class=\\\"hljs-keyword\\\">function</span> (<span class=\\\"hljs-params\\\"></span>) {\\n    <span class=\\\"hljs-keyword\\\">if</span> (progress === <span class=\\\"hljs-number\\\">0</span>) {\\n        progress = <span class=\\\"hljs-number\\\">0.5</span>\\n    } <span class=\\\"hljs-keyword\\\">else</span> {\\n        progress = <span class=\\\"hljs-number\\\">0</span>\\n    }\\n    win.<span class=\\\"hljs-title function_\\\">setProgressBar</span>(progress)\\n})\\n</code></pre>\\n<h4 id=\\\"others\\\">Others</h4>\\n<p>其他的功能还有自定义Windows的任务栏，键盘快捷键的设置，离线在线监测（仅根据网络的connection状态来判断的），任务栏托盘图标闪烁等，文件拖拽等。</p>\\n<pre><code class=\\\"hljs language-javascript\\\"><span class=\\\"hljs-keyword\\\">let</span> flash = <span class=\\\"hljs-literal\\\">false</span>\\n$(<span class=\\\"hljs-string\\\">&#x27;#flash&#x27;</span>).<span class=\\\"hljs-title function_\\\">click</span>(<span class=\\\"hljs-keyword\\\">function</span> (<span class=\\\"hljs-params\\\"></span>) {\\n    <span class=\\\"hljs-keyword\\\">if</span> (flash) {\\n        flash = <span class=\\\"hljs-literal\\\">false</span>\\n    } <span class=\\\"hljs-keyword\\\">else</span> {\\n        flash = <span class=\\\"hljs-literal\\\">true</span>\\n    }\\n    <span class=\\\"hljs-comment\\\">// win.once(&#x27;focus&#x27;, () =&gt; win.flashFrame(false))</span>\\n    win.<span class=\\\"hljs-title function_\\\">flashFrame</span>(flash)\\n})\\n</code></pre>\\n\";","export default \"<h3 id=\\\"introduction\\\">Introduction</h3>\\n<p>之前我们了解过 GC 的很多行为和特点了，也大致知道 OOM 发生的地点和原因，然后还深入了解了 Java 中的 Reference</p>\\n<p>接下来我们简单说一下如何避免 OOM，帮 GCor 们一个小忙</p>\\n<h3 id=\\\"help-gc\\\">Help GC</h3>\\n<h4 id=\\\"make-object-eligible-for-gc\\\">Make Object Eligible For GC</h4>\\n<ol>\\n<li><p><strong>Object Inside A Method</strong></p>\\n<p>之前有提到过一嘴<em>“对象分配在堆上变得不是那么绝对了”</em>，对，对象并不都是分配在堆，对象还可以直接分配在每个线程的栈空间中，这个事情后面再说</p>\\n<p>我们在<strong>方法内定义的新对象</strong>，在没有指派方法外的强引用引用这些对象的时候，<strong>等到方法结束之后，这些对象就变为了匿名对象</strong>，转变为不可达状态，于是它们成为了 GCor 的关注对象之一</p>\\n</li>\\n<li><p><strong>Reassigning reference variable</strong></p>\\n<p>重新指派引用，一个对象没有其他引用引用它了，那它也就凉了</p>\\n</li>\\n<li><p><strong>Nullifying reference variable</strong></p>\\n<p>将引用置空，原来它指派的对象如果没有其他引用引用的时候，也凉</p>\\n</li>\\n<li><p><strong>Anonymous object</strong></p>\\n<p>匿名对象，差不多只能存活在方法栈桢当中，和第一个一样</p>\\n</li>\\n</ol>\\n<h4 id=\\\"java-oom\\\">Java OOM</h4>\\n<p>除了程序计数器之外，JVM 的其他运行时数据区都有可能发生 OOM</p>\\n<h5 id=\\\"heap-overflow\\\">Heap Overflow</h5>\\n<p>Java 堆用于存储对象实例，只需要不停的创建对象，并且保证 GCRoots 到对象之间有可达路径来避免垃圾回收清理掉对象，那么在对象数量达到最大堆容量之后就会产生内存溢出异常</p>\\n<p>溢出异常有两种情况：</p>\\n<ul>\\n<li>内存泄漏（<strong>Memory Leak</strong>）：泄露出来的对象都是不需要了的对象，是应该被回收掉的，但是还有可达路径能够访问到这些对象，所以<strong>导致这些垃圾对象无法被回收</strong>，一直占着空间，于是 JVM 没办法有去申请新的空间，不够了就 OOM；</li>\\n<li>内存溢出（<strong>Memory Overflow</strong>）：内存溢出就是物理内存不够了，这时候需要通过增大虚拟机内存配置或者检查是否有过长生命周期的对象，在代码中尽早断开和这些对象的之间的可达路径，让它被回收；</li>\\n</ul>\\n<p>于是在堆上出现 OOM，就要判断内存中的对象是否还有必要存在，有可能是程序没写好，没有将垃圾对象即使处理，最终导致 OOM；也有可能是实际上需要的对象内存不够了，直接导致的 OOM；</p>\\n<h6 id=\\\"heap-overflow-solution\\\">Heap Overflow Solution</h6>\\n<ul>\\n<li><p>修改 JVM 启动参数，直接增加内存</p>\\n<ul>\\n<li><strong>-Xms</strong>:初始堆大小</li>\\n<li><strong>-Xmx</strong>:最大堆大小</li>\\n<li><strong>-Xmn</strong>:设置年轻代大小</li>\\n</ul>\\n</li>\\n<li><p>检查错误日志，查看<strong>OOM 错误前</strong>是否有其它异常或错误</p>\\n</li>\\n<li><p>对代码进行走查和分析，找出可能发生内存溢出的位置</p>\\n<p>重点排查以下几点：</p>\\n<ol>\\n<li>检查对<strong>数据库查询</strong>中，是否有一次获得全部数据的查询。一般来说，如果一次取十万条记录到内存，就可能引起内存溢出。这个问题比较隐蔽，在上线前，数据库中数据较少，不容易出问题，上线后，数据库中数据多了，一次查询就有可能引起内存溢出。因此对于数据库查询尽量采用分页的方式查询。</li>\\n<li>检查代码中是否有<strong>死循环</strong>或<strong>递归</strong>调用</li>\\n<li>检查是否有<strong>大循环重复产生新对象</strong>实体</li>\\n<li>检查<strong>List、MAP 等集合对象是否有使用完后，未清除</strong>的问题。List、MAP 等集合对象会始终存有对对象的引用，使得这些对象不能被 GC 回收</li>\\n</ol>\\n</li>\\n<li><p>使用内存查看工具动态查看内存使用情况</p>\\n</li>\\n</ul>\\n<h5 id=\\\"stack-overflow\\\">Stack Overflow</h5>\\n<p>栈容量可以由<code>-Xss</code>设置</p>\\n<ul>\\n<li><code>StackOverflowError</code>：线程请求栈深达到虚拟机最大允许栈深；</li>\\n<li><code>OutOfMemoryError</code>：扩展栈的时候无法申请到内存；</li>\\n</ul>\\n<p>栈深度溢出这个很好理解，一个递归方法可能无限递归下去，这时候就会出现栈深度不够导致溢出；</p>\\n<p>而在栈内存要出现 OOM，多数情况下是在多线程开发的时候，无法申请到更多的线程，而导致栈空间的 OOM；</p>\\n<p>整个内存其实是由各运行时数据区瓜分的，其他数据区分完了之后，剩下的就是栈内存，如果说线程数量总是多到栈内存 OOM 的时候，而且不能减少线程数量或者增大内存的时候，可以考虑调小其他运行时数据区的内存，从而让栈分配到更多的内存，以申请更多的线程数</p>\\n<h5 id=\\\"method-area--constant-pool-overflow\\\">Method Area & Constant Pool Overflow</h5>\\n<p>我们知道方法区也叫永久代（至少在 Java 8 之前是这么叫的），所以在 Java 8 之前我们能够通过<code>-XX:PermSize</code>和<code>-XX:MaxPermSize</code>来调整方法区的大小</p>\\n<ul>\\n<li>运行时常量池在常量存放过多的时候会溢出，比如无限产生随机字符串；</li>\\n<li>因为方法区用来存放类相关信息，所以我们只需要产生大量的类就可以造成方法区内存溢出；</li>\\n</ul>\\n<h4 id=\\\"the-8-symptoms-that-surface-oom\\\">The 8 symptoms that surface OOM</h4>\\n<p>上面我们根据运行时数据区来大致为 OOM 做出分类，接下来我们按照情况来进一步了解常用的 OOM，一次偶尔写出：</p>\\n<pre><code class=\\\"hljs language-java\\\"><span class=\\\"hljs-keyword\\\">new</span> <span class=\\\"hljs-title class_\\\">int</span>[Integer.MAX_VALUE]\\n</code></pre>\\n<p>这样的语句的时候，我发现它抛出了一个<code>java.lang.OutOfMemoryError: Requested array size exceeds VM limit</code>异常，这个异常之前没有提到过，我就知道，OOM 还有东西可以挖，然后在网上找参考，第一篇就是<a href=\\\"https://www.jianshu.com/p/2fdee831ed03\\\">Java 内存溢出(OOM)异常完全指南</a>，而它是<a href=\\\"https://plumbr.io/outofmemoryerror\\\">https://plumbr.io</a>的一篇技术 blog 的译文，于是我尝试参考原文，一下是原文引言：</p>\\n<blockquote>\\n<p>The many thousands of java.lang.OutOfMemoryErrors that I’ve met during my career all bear one of the below eight symptoms. This handbook explains what causes a particular error to be thrown, offers code examples that can cause such errors, and gives you solution guidelines for a fix. The content is all based on my own experience.</p>\\n<p><strong>Nikita Salnikov-Tarnovski</strong>\\nPlumbr Co-Founder and VP of Engineering</p>\\n</blockquote>\\n<h5 id=\\\"1-java-heap-space\\\">1. Java-Heap-Space</h5>\\n<p>这个 OOM 之前已经很熟悉了，我们也知道是因为堆内存爆掉了才会出现这个 OOM，然而之前我们分析原因的时候有提到过，主要原因是内存溢出或者内存泄漏导致的内存溢出，而文中还更进一步地详细地描述了这两个方面：</p>\\n<ul>\\n<li><strong>Spikes in usage/data volume</strong>. The application was designed to handle a certain amount of users or a certain amount of data. When the number of users or the volume of data suddenly spikes and crosses that expected threshold, the operation which functioned normally before the spike ceases to operate and triggers the <em>java.lang.OutOfMemoryError: Java heap space</em> error.</li>\\n<li><strong>Memory leaks</strong>. A particular type of programming error will lead your application to constantly consume more memory. Every time the leaking functionality of the application is used it leaves some objects behind into the Java heap space. Over time the leaked objects consume all of the available Java heap space and trigger the already familiar <em>java.lang.OutOfMemoryError: Java heap space</em> error.</li>\\n</ul>\\n<p>激增就是并没有泄漏，而是瞬时增加的内存需求峰值高出预取而直接导致的堆爆；泄漏就不再解释了；</p>\\n<h5 id=\\\"2-gc-overhead-limit-exceeded\\\">2. GC overhead limit exceeded</h5>\\n<blockquote>\\n<p>The <em>java.lang.OutOfMemoryError: GC overhead limit exceeded</em> error is displayed when <strong>your application has exhausted pretty much all the available memory and GC has repeatedly failed to clean it</strong>.</p>\\n</blockquote>\\n<p><img src=\\\"../../../public/img/20190317135716.png\\\" alt=\\\"\\\"></p>\\n<p>其根本原因就是你写的程序创造出太多难以 GC 的对象了，导致 GC 效率非常低，于是 GCor 们都不干了；</p>\\n<p>默认的情况下，如果 JVM 花费了**98%<strong>的时间，却只回收了</strong>2%**不到的内存的话，那么就就抛出这个 OOM；</p>\\n<h5 id=\\\"3-permgen-space\\\">3. Permgen space</h5>\\n<p>我们之前了解过永久代的事情，也清楚它在 Java8 中到底变成什么样子了，更多就不再赘述了，原文和译文里有很多参考</p>\\n<h5 id=\\\"4-metaspace\\\">4. Metaspace</h5>\\n<p>虽然永久代已经被无默认限制的 Metaspace 替代了，但是主机上 Metaspace 还是有限制的，它一样能被打爆，而且它被打爆的后果可能就是主机宕机，关于这个可以参考：<a href=\\\"http://ifeve.com/java-permgen-removed/\\\">Java PermGen 去哪里了?</a></p>\\n<p><img src=\\\"../../../public/img/./public/img/20190317143413.png\\\" alt=\\\"\\\"></p>\\n<h5 id=\\\"5-unable-to-create-new-native-thread\\\">5. Unable to create new native thread</h5>\\n<p>JVM 的线程也是需要消耗空间的，当你的线程过多而还在不断地申请线程的时候，OS 对进程是会有默认的线程申请现在的，如果超过这个限制，OS 就不会分配线程给你了，这时候就会报这个 OOM，</p>\\n<p><img src=\\\"../../../public/img/20190317144032.png\\\" alt=\\\"\\\"></p>\\n<p>我们虽然可以增大这个限制，但我觉得你还是重新考虑一下优化你的程序，不要再给 JVM 甚至是 OS 压力了</p>\\n<h5 id=\\\"6-out-of-swap-space\\\">6. Out of swap space?</h5>\\n<p>本质上是 OS 的交换空间被其他进程消耗了，可能的原因有：</p>\\n<ul>\\n<li>The operating system is configured with <strong>insufficient swap space</strong>.</li>\\n<li><strong>Another process on the system</strong> is consuming all memory resources.</li>\\n<li>Application fails due to <strong>a native leak</strong>, for example, if application or library code continuously allocates memory but does not release it to the operating system.</li>\\n</ul>\\n<h5 id=\\\"7-requested-array-size-exceeds-vm-limit\\\">7. Requested array size exceeds VM limit</h5>\\n<p><img src=\\\"../../../public/img/20190317145042.png\\\" alt=\\\"\\\"></p>\\n<p>请求数组长度过长，一般来说，数组长度限制是根据主机自身的可寻址限制不同而不同的，所以申请这么大的数组之前，首先考虑好是否需要这么多的空间；</p>\\n<p>Java 中数组的索引范围是<code>Integer.MAX_VALUE</code>，即 2^31 - 1，一个 int 占 4 byte，于是 2^31 个 4 byte 大约是<strong>8G</strong>，加上数组其他额外需要的元数据，一个这么大的数组就会要 8G 以上的内存，JVM 可不会允许你干这样的事；</p>\\n<h5 id=\\\"8-kill-process-or-sacrifice-child\\\">8. Kill process or sacrifice child</h5>\\n<p>为了理解这个错误，我们需要补充一点操作系统的基础知识。</p>\\n<p>操作系统是建立在进程的概念之上，这些进程在内核中作业，其中有一个非常特殊的进程，名叫“内存杀手（Out of memory killer）”。当内核检测到系统内存不足时，OOM killer 被激活，然后选择一个进程杀掉。哪一个进程这么倒霉呢？选择的算法和想法都很朴实：谁占用内存最多，谁就被干掉。</p>\\n<h4 id=\\\"request-a-gc\\\">Request A GC</h4>\\n<ol>\\n<li><strong>Using System.gc() method</strong> : System class contain static method <em>gc()</em> for requesting JVM to run Garbage Collector.</li>\\n<li><strong>Using Runtime.getRuntime().gc() method</strong> : <a href=\\\"https://www.geeksforgeeks.org/java-lang-runtime-class-in-java/\\\">Runtime class</a> allows the application to interface with the JVM in which the application is running. Hence by using its gc() method, we can request JVM to run Garbage Collector.</li>\\n</ol>\\n<p><strong>Note :</strong></p>\\n<ol>\\n<li>There is <strong>no guarantee</strong> that any one of above two methods will definitely run Garbage Collector.</li>\\n<li>The call <em>System.gc()</em> is <strong>effectively equivalent</strong> to the call : <em>Runtime.getRuntime().gc()</em></li>\\n</ol>\\n<h3 id=\\\"jit\\\">JIT</h3>\\n<p><div class=\\\"saying mb-4\\\"><div class=\\\"saying-quote saying-left-quote\\\">“</div><div class=\\\"saying-quote saying-right-quote\\\">”</div></p>\\n<p>The just-in-time (JIT) compiler is the heart of the Java Virtual Machine. Nothing in the JVM affects performance more than the compiler, and choosing a compiler is one of the first decisions made when running a Java application—whether you are a Java developer or an end-user.</p>\\n<p></div></p>\\n<p>这句话摘自<a href=\\\"https://www.oreilly.com/library/view/java-performance-the/9781449363512/ch04.html\\\">《Java Performance》Chapter 4. Working with the JIT Compiler</a>，可见 JIT 对 JVM 的重要性！</p>\\n<p>在早期的一些商用虚拟机，Java 代码最初是通过解释器（<strong>Interpreter</strong>）解释执行的，它将代码翻译成 JVM 能读懂的字节码（<strong>bytecode</strong>），但是这些字节码要运行起来，JVM 需要花费时间去解释，并且重复的热点代码可能会重复解释，于是为了提高效率，JIT 就出现了</p>\\n<p>Just In Time Compiler，即时编译器，它负责在 JVM 运行的时候对特定的代码进行编译<strong>（有针对性的优化编译）</strong>，将它们编译成机器码，下次再运行这段逻辑的时候，直接执行机器码，提高运行时效率，这项技术大大地提高了 Java 程序的运行速度</p>\\n<p><img src=\\\"../../../public/img/20190305203935.png\\\" alt=\\\"\\\"></p>\\n<p>需要声明的一点是，JIT 只在运行时适当地编译部分运行频率很高的代码</p>\\n<p>那么为什么不一开始就编译执行呢？因为有的代码只运行一次，也即是说，JVM 是经过运行时分析过后，才用 JIT 对代码进行优化，它不立即编译代码，这么做的原因主要有两个：</p>\\n<ul>\\n<li>如果代码只运行一次，那么还不如直接翻译，因为编译耗费的时间比翻译执行多很多</li>\\n<li>JIT 的最终目的是<strong>优化代码</strong>，然后编译为本地机器码，所以只有循环过多次的 code，JVM 才能更了解 code 的结构，才能进行针对性的分析，编译出优化的 code</li>\\n</ul>\\n<h4 id=\\\"optimizations\\\">Optimizations</h4>\\n<h5 id=\\\"0-register--main-memory\\\">0. Register & Main Memory</h5>\\n<p>寄存器和主存的读取策略优化，很多时候，比如循环中的 code，一个连加的 code，当 sum 存于主存的时候，频繁从主存中读取是有点浪费的，经过编译优化之后会将 sum 存在寄存器中，在寄存器中做完运算再返回给主存，这样的 code 执行效率非常高</p>\\n<p>当然这里还涉及寄存器在线程之间同步的线程安全问题，这里略</p>\\n<h5 id=\\\"1-client--server\\\">1. Client & Server</h5>\\n<p>JIT 编译器在运行程序时有两种编译模式可以选择，并且其会在运行时决定使用哪一种以达到最优性能。这两种编译模式的命名源自于命令行参数（eg: -client 或者 -server）</p>\\n<p>JVM Server 模式与 client 模式启动，最主要的差别在于：-server 模式启动时，速度较慢，但是一旦运行起来后，性能将会有很大的提升</p>\\n<ul>\\n<li>当虚拟机运行在-client 模式的时候，使用的是一个代号为 C1 的轻量级编译器</li>\\n<li>而-server 模式启动的虚拟机采用相对重量级代号为 C2 的编译器。C2 比 C1 编译器编译的相对彻底，服务起来之后，性能更高</li>\\n</ul>\\n<h5 id=\\\"2-more\\\">2. More</h5>\\n<p>更多的优化策略可以继续参考：<a href=\\\"https://www.ibm.com/developerworks/cn/java/j-lo-just-in-time/index.html\\\">深入浅出 JIT 编译器</a></p>\\n<h5 id=\\\"-escape-analysis\\\">+. Escape Analysis</h5>\\n<p>在 Hollis 前辈的一篇文章<a href=\\\"https://mp.weixin.qq.com/s?__biz=MzI3NzE0NjcwMg==&mid=2650121307&idx=1&sn=5526473d0248cca8385d2a18ba6b25af&chksm=f36bb97ac41c306c354ebf0335cd2fd77cac03f3434894e4e5b44a01754a5494b04350d26d14&scene=21#wechat_redirect\\\">对象并不一定都是在堆上分配内存的</a>中提到：</p>\\n<blockquote>\\n<p>逃逸分析(Escape Analysis)是目前 Java 虚拟机中比较前沿的优化技术。这是一种可以有效减少 Java 程序中同步负载和内存堆分配压力的跨函数全局数据流分析算法。通过逃逸分析，Java Hotspot 编译器能够分析出一个新的对象的引用的使用范围从而决定是否要将这个对象分配到堆上。</p>\\n<p>逃逸分析的基本行为就是分析对象动态作用域：当一个对象在方法中被定义后，它可能被外部方法所引用，例如作为调用参数传递到其他地方中，称为方法逃逸。</p>\\n<p>....</p>\\n<p>使用逃逸分析，编译器可以对代码做如下优化：</p>\\n<ol>\\n<li><p>同步省略。如果一个对象被发现只能从一个线程被访问到，那么对于这个对象的操作可以不考虑同步。</p>\\n</li>\\n<li><p>将堆分配转化为栈分配。如果一个对象在子程序中被分配，要使指向该对象的指针永远不会逃逸，对象可能是栈分配的候选，而不是堆分配。</p>\\n</li>\\n<li><p>分离对象或标量替换。有的对象可能不需要作为一个连续的内存结构存在也可以被访问到，那么对象的部分（或全部）可以不存储在内存，而是存储在 CPU 寄存器中。</p>\\n</li>\\n</ol>\\n</blockquote>\\n<p>于是说，为什么《深入理解 Java 虚拟机》中会有一句：<em>“但是，随着 JIT 编译期的发展与逃逸分析技术逐渐成熟，栈上分配、标量替换优化技术将会导致一些微妙的变化，所有的对象都分配到堆上也渐渐变得不那么“绝对”了。”</em></p>\\n<p>背后的含义就明白了，关于更多 JIT 和逃逸分析的参考于：</p>\\n<ul>\\n<li><a href=\\\"https://dzone.com/articles/escape-analysis\\\">https://dzone.com/articles/escape-analysis</a></li>\\n<li><a href=\\\"https://www.beyondjava.net/escape-analysis-java\\\">https://www.beyondjava.net/escape-analysis-java</a></li>\\n<li><a href=\\\"https://www.oreilly.com/library/view/java-performance-the/9781449363512/ch04.html\\\">https://www.oreilly.com/library/view/java-performance-the/9781449363512/ch04.html</a></li>\\n</ul>\\n\";","export default \"<h3 id=\\\"前言\\\">前言</h3>\\n<p>不知不觉写到第六坎了，前面刀剑磨刀石内功心法都有了，感觉自己应该很厉害了，其实不是，这一个月因为考试末尾和实习，断断续续的看，反反复复的看，越看越精神，越看越心虚。</p>\\n<p>无论怎么说，短板还是得慢慢补上来，保持谦逊，虚心学习。</p>\\n<p>回到整体，前面由内到外说了Java并发中很基本的几件事：</p>\\n<ul>\\n<li>基本的线程API和使用</li>\\n<li>基本的并发概念</li>\\n<li>volatile和synchronized和锁概念</li>\\n</ul>\\n<p>我觉得是时候得停一下，综合一下这些东西，真刀真枪干几次，所以这篇算是我们并发游戏世界中，主人翁的<strong>“初出茅庐”</strong>篇，又可以叫做小试牛刀，在这篇我尝试例出并发编程中最基本的场景如：</p>\\n<ul>\\n<li><strong>死锁</strong></li>\\n<li><strong>“等待-通知”</strong></li>\\n<li><strong>有超时的“等待-通知”</strong></li>\\n<li><strong>“生产者-消费者”模式</strong></li>\\n<li><strong>双重检查锁延迟初始化的错误与正确示范</strong></li>\\n</ul>\\n<hr>\\n<h3 id=\\\"死锁\\\">死锁</h3>\\n<p>死锁是多个以上的process互相等待对方释放资源而进入永久等待的一种情况，要产生死锁，就必须同时满足一下四个条件：</p>\\n<ul>\\n<li><p><strong>互斥条件</strong></p>\\n<p>  ​    即某个资源在一段时间内只能由一个进程占有，不能同时被两个或两个以上的进程占有。这种独占资源如CD-ROM驱动器，打印机等等，必须在占有该资源的进程主动释放它之后，其它进程才能占有该资源。这是由资源本身的属性所决定的。如独木桥就是一种独占资源，两方的人不能同时过桥。</p>\\n</li>\\n<li><p><strong>不可抢占条件</strong></p>\\n<p>  ​    进程所获得的资源在未使用完毕之前，资源申请者不能强行地从资源占有者手中夺取资源，而只能由该资源的占有者进程自行释放。如过独木桥的人不能强迫对方后退，也不能非法地将对方推下桥，必须是桥上的人自己过桥后空出桥面（即主动释放占有资源），对方的人才能过桥。</p>\\n</li>\\n<li><p><strong>占有且申请条件</strong></p>\\n<p>  ​    进程至少已经占有一个资源，但又申请新的资源；由于该资源已被另外进程占有，此时该进程阻塞；但是，它在等待新资源之时，仍继续占用已占有的资源。还以过独木桥为例，甲乙两人在桥上相遇。甲走过一段桥面（即占有了一些资源），还需要走其余的桥面（申请新的资源），但那部分桥面被乙占有（乙走过一段桥面）。甲过不去，前进不能，又不后退；乙也处于同样的状况。</p>\\n</li>\\n<li><p><strong>循环等待条件</strong></p>\\n<p>  ​    存在一个进程等待序列{P1，P2，...，Pn}，其中P1等待P2所占有的某一资源，P2等待P3所占有的某一源，......，而Pn等待P1所占有的的某一资源，形成一个进程循环等待环。就像前面的过独木桥问题，甲等待乙占有的桥面，而乙又等待甲占有的桥面，从而彼此循环等待。</p>\\n</li>\\n</ul>\\n<p>死锁的处理可以分为：预防，避免，检测和解除</p>\\n<h4 id=\\\"死锁预防\\\">死锁预防</h4>\\n<p>这是一种较为简单、直观的事先预防方法，方法是破坏产生死锁的4个条件，就算破坏一个，死锁也不会产生。这是一种静态方法。</p>\\n<h4 id=\\\"死锁避免\\\">死锁避免</h4>\\n<p>系统在运行时分配资源的时候，能够对资源分配情况进行动态检查，如果结果良好，则允许分配，如果结果显示分配后会出现死锁，则不予分配。这是一种动态方法。</p>\\n<h4 id=\\\"检测和解除\\\">检测和解除</h4>\\n<ul>\\n<li><p>检测</p>\\n<p>  ​    不事先采取限制措施，也不检测系统是否进入安全区，运行系统在运行时发生死锁，但是会通过系统设置的检查机制，检测出死锁发生的地方。</p>\\n</li>\\n<li><p>解除</p>\\n<p>  ​    检测到死锁地点之后，解除死锁状态</p>\\n</li>\\n</ul>\\n<p>例：</p>\\n<pre><code class=\\\"hljs language-java\\\"><span class=\\\"hljs-keyword\\\">public</span> <span class=\\\"hljs-keyword\\\">class</span> <span class=\\\"hljs-title class_\\\">DeadLock</span> {\\n    <span class=\\\"hljs-keyword\\\">private</span> <span class=\\\"hljs-keyword\\\">static</span> <span class=\\\"hljs-type\\\">StringBuffer</span> <span class=\\\"hljs-variable\\\">a</span> <span class=\\\"hljs-operator\\\">=</span> <span class=\\\"hljs-keyword\\\">new</span> <span class=\\\"hljs-title class_\\\">StringBuffer</span>();\\n    <span class=\\\"hljs-keyword\\\">private</span> <span class=\\\"hljs-keyword\\\">static</span> <span class=\\\"hljs-type\\\">StringBuffer</span> <span class=\\\"hljs-variable\\\">b</span> <span class=\\\"hljs-operator\\\">=</span> <span class=\\\"hljs-keyword\\\">new</span> <span class=\\\"hljs-title class_\\\">StringBuffer</span>();\\n    <span class=\\\"hljs-keyword\\\">public</span> <span class=\\\"hljs-keyword\\\">static</span> <span class=\\\"hljs-keyword\\\">void</span> <span class=\\\"hljs-title function_\\\">main</span><span class=\\\"hljs-params\\\">(String[] args)</span> {\\n        <span class=\\\"hljs-keyword\\\">new</span> <span class=\\\"hljs-title class_\\\">Thread</span>(() -&gt; {\\n            <span class=\\\"hljs-keyword\\\">synchronized</span> (a){\\n                <span class=\\\"hljs-keyword\\\">try</span> {\\n                    Thread.sleep(<span class=\\\"hljs-number\\\">10</span>);\\n                } <span class=\\\"hljs-keyword\\\">catch</span> (InterruptedException e) {\\n                    e.printStackTrace();\\n                }\\n                <span class=\\\"hljs-keyword\\\">synchronized</span> (b){}\\n            }\\n        }).start();\\n        <span class=\\\"hljs-keyword\\\">new</span> <span class=\\\"hljs-title class_\\\">Thread</span>(() -&gt; {\\n            <span class=\\\"hljs-keyword\\\">synchronized</span> (b){\\n              <span class=\\\"hljs-keyword\\\">synchronized</span> (a){}\\n            }\\n        }).start();\\n    }\\n}\\n</code></pre>\\n<h3 id=\\\"等待-通知\\\">“等待-通知”</h3>\\n<blockquote>\\n<p>在就餐的时候，厨师和服务员之间的交互就是一种等待通知模式：</p>\\n<ol>\\n<li>厨师需要一定的时间去做菜</li>\\n<li>厨师没做好菜的时候，服务员就没活干了，所以服务员就有（wait）的状态</li>\\n<li>服务员取菜的时机是取决于厨师的，只有当厨师将菜放到“台面”上，并“通知（notify）”服务员，服务员菜开始干活</li>\\n</ol>\\n</blockquote>\\n<h4 id=\\\"范式\\\">范式</h4>\\n<pre><code class=\\\"hljs language-java\\\"><span class=\\\"hljs-keyword\\\">synchronized</span>(对象) {\\n    <span class=\\\"hljs-keyword\\\">while</span>(退出等待的条件不满足){\\n        对象.wait();\\n    }\\n    <span class=\\\"hljs-comment\\\">// 等待完后的工作</span>\\n}\\n</code></pre>\\n<pre><code class=\\\"hljs language-java\\\"><span class=\\\"hljs-keyword\\\">synchronized</span>(对象){\\n    <span class=\\\"hljs-comment\\\">// 改变退出等待的条件</span>\\n    对象.notifyAll()；\\n}\\n</code></pre>\\n<h4 id=\\\"实现\\\">实现</h4>\\n<pre><code class=\\\"hljs language-java\\\"><span class=\\\"hljs-keyword\\\">public</span> <span class=\\\"hljs-keyword\\\">class</span> <span class=\\\"hljs-title class_\\\">WaitNotifyParadigm</span> {\\n\\n    <span class=\\\"hljs-keyword\\\">private</span> <span class=\\\"hljs-keyword\\\">static</span> <span class=\\\"hljs-type\\\">String</span> <span class=\\\"hljs-variable\\\">lock</span> <span class=\\\"hljs-operator\\\">=</span> <span class=\\\"hljs-string\\\">&quot;lock&quot;</span>;\\n    <span class=\\\"hljs-keyword\\\">private</span> <span class=\\\"hljs-keyword\\\">static</span> <span class=\\\"hljs-type\\\">boolean</span> <span class=\\\"hljs-variable\\\">wait</span> <span class=\\\"hljs-operator\\\">=</span> <span class=\\\"hljs-literal\\\">true</span>;\\n\\n    <span class=\\\"hljs-keyword\\\">public</span> <span class=\\\"hljs-keyword\\\">static</span> <span class=\\\"hljs-keyword\\\">void</span> <span class=\\\"hljs-title function_\\\">main</span><span class=\\\"hljs-params\\\">(String[] args)</span> {\\n        <span class=\\\"hljs-keyword\\\">new</span> <span class=\\\"hljs-title class_\\\">Thread</span>(() -&gt; {\\n            <span class=\\\"hljs-keyword\\\">synchronized</span> (lock) {\\n                System.out.println(<span class=\\\"hljs-string\\\">&quot;T1 started to wait...&quot;</span>);\\n                <span class=\\\"hljs-keyword\\\">while</span> (wait) {\\n                    <span class=\\\"hljs-keyword\\\">try</span> {\\n                        lock.wait(<span class=\\\"hljs-number\\\">1000</span>);\\n                    } <span class=\\\"hljs-keyword\\\">catch</span> (InterruptedException e) {\\n                        e.printStackTrace();\\n                    }\\n                }\\n                System.out.println(<span class=\\\"hljs-string\\\">&quot;T1 stop waitting !&quot;</span>);\\n            }\\n        }).start();\\n        <span class=\\\"hljs-keyword\\\">new</span> <span class=\\\"hljs-title class_\\\">Thread</span>(() -&gt; {\\n            <span class=\\\"hljs-keyword\\\">for</span> (<span class=\\\"hljs-type\\\">int</span> <span class=\\\"hljs-variable\\\">i</span> <span class=\\\"hljs-operator\\\">=</span> <span class=\\\"hljs-number\\\">0</span>; i &lt; <span class=\\\"hljs-number\\\">3</span>; i++) {\\n                System.out.println(<span class=\\\"hljs-string\\\">&quot;T2 processing: &quot;</span> + (i + <span class=\\\"hljs-number\\\">1</span>));\\n                <span class=\\\"hljs-keyword\\\">try</span> {\\n                    Thread.sleep(<span class=\\\"hljs-number\\\">1000</span>);\\n                } <span class=\\\"hljs-keyword\\\">catch</span> (InterruptedException e) {\\n                    e.printStackTrace();\\n                }\\n            }\\n            <span class=\\\"hljs-keyword\\\">synchronized</span> (lock) {\\n                System.out.println(<span class=\\\"hljs-string\\\">&quot;T2 done process, notifyAll...&quot;</span>);\\n                wait = <span class=\\\"hljs-literal\\\">false</span>;\\n                lock.notifyAll();\\n            }\\n        }).start();\\n    }\\n}\\n</code></pre>\\n<p>结果：</p>\\n<pre><code class=\\\"hljs language-console\\\">T1 started to wait...\\nT2 processing: 1\\nT2 processing: 2\\nT2 processing: 3\\nT2 done process, notifyAll...\\nT1 stop waitting !\\n</code></pre>\\n<h4 id=\\\"有超时的等待-通知\\\">有超时的“等待-通知”</h4>\\n<p>要搭配<code>wait()</code>的超时机制的话，就得在条件中也考虑超时，我们可以加两个变量来完成超时：</p>\\n<ul>\\n<li>left：表示剩余多少时间就超时</li>\\n<li>end：表示超时时间的完整毫秒数</li>\\n</ul>\\n<pre><code class=\\\"hljs language-java\\\"><span class=\\\"hljs-keyword\\\">public</span> <span class=\\\"hljs-keyword\\\">class</span> <span class=\\\"hljs-title class_\\\">WaitNotifyParadigmWithTimeout</span> {\\n\\n    <span class=\\\"hljs-keyword\\\">private</span> <span class=\\\"hljs-keyword\\\">static</span> <span class=\\\"hljs-type\\\">String</span> <span class=\\\"hljs-variable\\\">lock</span> <span class=\\\"hljs-operator\\\">=</span> <span class=\\\"hljs-string\\\">&quot;lock&quot;</span>;\\n    <span class=\\\"hljs-keyword\\\">private</span> <span class=\\\"hljs-keyword\\\">static</span> <span class=\\\"hljs-type\\\">boolean</span> <span class=\\\"hljs-variable\\\">wait</span> <span class=\\\"hljs-operator\\\">=</span> <span class=\\\"hljs-literal\\\">true</span>;\\n    <span class=\\\"hljs-keyword\\\">private</span> <span class=\\\"hljs-keyword\\\">static</span> <span class=\\\"hljs-type\\\">long</span> <span class=\\\"hljs-variable\\\">timeout</span> <span class=\\\"hljs-operator\\\">=</span> <span class=\\\"hljs-number\\\">5000</span>;\\n\\n    <span class=\\\"hljs-keyword\\\">public</span> <span class=\\\"hljs-keyword\\\">static</span> <span class=\\\"hljs-keyword\\\">void</span> <span class=\\\"hljs-title function_\\\">main</span><span class=\\\"hljs-params\\\">(String[] args)</span> {\\n        <span class=\\\"hljs-keyword\\\">new</span> <span class=\\\"hljs-title class_\\\">Thread</span>(() -&gt; {\\n            <span class=\\\"hljs-keyword\\\">synchronized</span> (lock) {\\n                System.out.println(<span class=\\\"hljs-string\\\">&quot;T1 started to wait...&quot;</span>);\\n                <span class=\\\"hljs-type\\\">long</span> <span class=\\\"hljs-variable\\\">left</span> <span class=\\\"hljs-operator\\\">=</span> timeout;\\n                <span class=\\\"hljs-type\\\">long</span> <span class=\\\"hljs-variable\\\">end</span> <span class=\\\"hljs-operator\\\">=</span> System.currentTimeMillis() + timeout;\\n                <span class=\\\"hljs-keyword\\\">while</span> (wait && left &gt; <span class=\\\"hljs-number\\\">0</span>) {\\n                    <span class=\\\"hljs-keyword\\\">try</span> {\\n                        lock.wait(left);\\n                    } <span class=\\\"hljs-keyword\\\">catch</span> (InterruptedException e) {\\n                        e.printStackTrace();\\n                    }\\n                    left = end - System.currentTimeMillis();\\n                }\\n                System.out.println(<span class=\\\"hljs-string\\\">&quot;T1 stop waitting !&quot;</span>);\\n            }\\n        }).start();\\n        <span class=\\\"hljs-keyword\\\">new</span> <span class=\\\"hljs-title class_\\\">Thread</span>(() -&gt; {\\n            <span class=\\\"hljs-keyword\\\">for</span> (<span class=\\\"hljs-type\\\">int</span> <span class=\\\"hljs-variable\\\">i</span> <span class=\\\"hljs-operator\\\">=</span> <span class=\\\"hljs-number\\\">0</span>; i &lt; <span class=\\\"hljs-number\\\">10</span>; i++) {\\n                System.out.println(<span class=\\\"hljs-string\\\">&quot;T2 processing: &quot;</span> + (i + <span class=\\\"hljs-number\\\">1</span>));\\n                <span class=\\\"hljs-keyword\\\">try</span> {\\n                    Thread.sleep(<span class=\\\"hljs-number\\\">1000</span>);\\n                } <span class=\\\"hljs-keyword\\\">catch</span> (InterruptedException e) {\\n                    e.printStackTrace();\\n                }\\n            }\\n            <span class=\\\"hljs-keyword\\\">synchronized</span> (lock) {\\n                System.out.println(<span class=\\\"hljs-string\\\">&quot;T2 done process, notifyAll...&quot;</span>);\\n                wait = <span class=\\\"hljs-literal\\\">false</span>;\\n                lock.notifyAll();\\n            }\\n        }).start();\\n    }\\n}\\n</code></pre>\\n<h3 id=\\\"生产者消费者\\\">“生产者/消费者”</h3>\\n<p>利用wait/notify机制，先上一段多消费者/多生产者的示例</p>\\n<pre><code class=\\\"hljs language-java\\\"><span class=\\\"hljs-keyword\\\">public</span> <span class=\\\"hljs-keyword\\\">class</span> <span class=\\\"hljs-title class_\\\">TestProducerConsumer2</span> {\\n\\n    <span class=\\\"hljs-keyword\\\">static</span> <span class=\\\"hljs-type\\\">Integer</span> <span class=\\\"hljs-variable\\\">limit</span> <span class=\\\"hljs-operator\\\">=</span> <span class=\\\"hljs-number\\\">50</span>;\\n    <span class=\\\"hljs-keyword\\\">static</span> <span class=\\\"hljs-keyword\\\">volatile</span> <span class=\\\"hljs-type\\\">Integer</span> <span class=\\\"hljs-variable\\\">stock</span> <span class=\\\"hljs-operator\\\">=</span> <span class=\\\"hljs-number\\\">0</span>;\\n    <span class=\\\"hljs-keyword\\\">static</span> <span class=\\\"hljs-keyword\\\">final</span> <span class=\\\"hljs-type\\\">String</span> <span class=\\\"hljs-variable\\\">P_LOCK</span> <span class=\\\"hljs-operator\\\">=</span> <span class=\\\"hljs-string\\\">&quot;p&quot;</span>;\\n    <span class=\\\"hljs-keyword\\\">static</span> <span class=\\\"hljs-keyword\\\">final</span> <span class=\\\"hljs-type\\\">String</span> <span class=\\\"hljs-variable\\\">C_LOCK</span> <span class=\\\"hljs-operator\\\">=</span> <span class=\\\"hljs-string\\\">&quot;c&quot;</span>;\\n\\n    <span class=\\\"hljs-keyword\\\">public</span> <span class=\\\"hljs-keyword\\\">static</span> <span class=\\\"hljs-keyword\\\">void</span> <span class=\\\"hljs-title function_\\\">main</span><span class=\\\"hljs-params\\\">(String[] args)</span> {\\n        <span class=\\\"hljs-keyword\\\">new</span> <span class=\\\"hljs-title class_\\\">Thread</span>(<span class=\\\"hljs-keyword\\\">new</span> <span class=\\\"hljs-title class_\\\">Producer2</span>(<span class=\\\"hljs-string\\\">&quot;P-1&quot;</span>)).start();\\n        <span class=\\\"hljs-keyword\\\">new</span> <span class=\\\"hljs-title class_\\\">Thread</span>(<span class=\\\"hljs-keyword\\\">new</span> <span class=\\\"hljs-title class_\\\">Consumer2</span>(<span class=\\\"hljs-string\\\">&quot;C-1&quot;</span>)).start();\\n        <span class=\\\"hljs-keyword\\\">new</span> <span class=\\\"hljs-title class_\\\">Thread</span>(<span class=\\\"hljs-keyword\\\">new</span> <span class=\\\"hljs-title class_\\\">Consumer2</span>(<span class=\\\"hljs-string\\\">&quot;C-2&quot;</span>)).start();\\n    }\\n}\\n\\n<span class=\\\"hljs-keyword\\\">class</span> <span class=\\\"hljs-title class_\\\">Producer2</span> <span class=\\\"hljs-keyword\\\">implements</span> <span class=\\\"hljs-title class_\\\">Runnable</span> {\\n\\n    <span class=\\\"hljs-keyword\\\">private</span> String name;\\n\\n    <span class=\\\"hljs-keyword\\\">public</span> <span class=\\\"hljs-title function_\\\">Producer2</span><span class=\\\"hljs-params\\\">(String name)</span> {\\n        <span class=\\\"hljs-built_in\\\">this</span>.name = name;\\n    }\\n\\n    <span class=\\\"hljs-meta\\\">@Override</span>\\n    <span class=\\\"hljs-keyword\\\">public</span> <span class=\\\"hljs-keyword\\\">void</span> <span class=\\\"hljs-title function_\\\">run</span><span class=\\\"hljs-params\\\">()</span> {\\n        <span class=\\\"hljs-keyword\\\">while</span> (<span class=\\\"hljs-literal\\\">true</span>) {\\n            <span class=\\\"hljs-keyword\\\">if</span> (TestProducerConsumer2.stock &lt; TestProducerConsumer2.limit) {\\n                System.out.println(<span class=\\\"hljs-string\\\">&quot;Producing&quot;</span>);\\n                <span class=\\\"hljs-keyword\\\">while</span> (TestProducerConsumer2.stock &lt; TestProducerConsumer2.limit) {\\n                    <span class=\\\"hljs-keyword\\\">synchronized</span> (TestProducerConsumer2.P_LOCK) {\\n                        <span class=\\\"hljs-keyword\\\">try</span> {\\n                            Thread.sleep(<span class=\\\"hljs-number\\\">10</span>);\\n                        } <span class=\\\"hljs-keyword\\\">catch</span> (InterruptedException e) {\\n                            e.printStackTrace();\\n                        }\\n                        TestProducerConsumer2.stock++;\\n                        System.out.println(<span class=\\\"hljs-string\\\">&quot;Produced the &quot;</span> + TestProducerConsumer2.stock + <span class=\\\"hljs-string\\\">&quot; stock&quot;</span>);\\n                    }\\n                }\\n                System.out.println(<span class=\\\"hljs-string\\\">&quot;Produce process done&quot;</span>);\\n                <span class=\\\"hljs-keyword\\\">synchronized</span> (TestProducerConsumer2.C_LOCK) {\\n                    TestProducerConsumer2.C_LOCK.notifyAll();\\n                }\\n            }\\n            <span class=\\\"hljs-keyword\\\">synchronized</span> (TestProducerConsumer2.P_LOCK) {\\n                <span class=\\\"hljs-keyword\\\">try</span> {\\n                    TestProducerConsumer2.P_LOCK.wait();\\n                } <span class=\\\"hljs-keyword\\\">catch</span> (InterruptedException e) {\\n                    e.printStackTrace();\\n                }\\n            }\\n        }\\n    }\\n}\\n\\n<span class=\\\"hljs-keyword\\\">class</span> <span class=\\\"hljs-title class_\\\">Consumer2</span> <span class=\\\"hljs-keyword\\\">implements</span> <span class=\\\"hljs-title class_\\\">Runnable</span> {\\n\\n    <span class=\\\"hljs-keyword\\\">private</span> String name;\\n\\n    <span class=\\\"hljs-keyword\\\">public</span> <span class=\\\"hljs-title function_\\\">Consumer2</span><span class=\\\"hljs-params\\\">(String name)</span> {\\n        <span class=\\\"hljs-built_in\\\">this</span>.name = name;\\n    }\\n\\n    <span class=\\\"hljs-meta\\\">@Override</span>\\n    <span class=\\\"hljs-keyword\\\">public</span> <span class=\\\"hljs-keyword\\\">void</span> <span class=\\\"hljs-title function_\\\">run</span><span class=\\\"hljs-params\\\">()</span> {\\n        <span class=\\\"hljs-keyword\\\">while</span> (<span class=\\\"hljs-literal\\\">true</span>) {\\n            <span class=\\\"hljs-keyword\\\">if</span> (TestProducerConsumer2.stock &gt;= TestProducerConsumer2.limit) {\\n                System.out.println(name + <span class=\\\"hljs-string\\\">&quot; consuming&quot;</span>);\\n                <span class=\\\"hljs-keyword\\\">while</span> (TestProducerConsumer2.stock &gt; <span class=\\\"hljs-number\\\">0</span>) {\\n                    <span class=\\\"hljs-keyword\\\">synchronized</span> (TestProducerConsumer2.C_LOCK) {\\n                        System.out.println(name + <span class=\\\"hljs-string\\\">&quot; consumed the &quot;</span> + TestProducerConsumer2.stock + <span class=\\\"hljs-string\\\">&quot; stock&quot;</span>);\\n                        TestProducerConsumer2.stock--;\\n                    }\\n                }\\n                System.out.println(name + <span class=\\\"hljs-string\\\">&quot;consume process done&quot;</span>);\\n                <span class=\\\"hljs-keyword\\\">synchronized</span> (TestProducerConsumer2.P_LOCK) {\\n                    TestProducerConsumer2.P_LOCK.notifyAll();\\n                }\\n            }\\n            <span class=\\\"hljs-keyword\\\">synchronized</span> (TestProducerConsumer2.C_LOCK) {\\n                <span class=\\\"hljs-keyword\\\">try</span> {\\n                    TestProducerConsumer2.C_LOCK.wait();\\n                } <span class=\\\"hljs-keyword\\\">catch</span> (InterruptedException e) {\\n                    e.printStackTrace();\\n                }\\n            }\\n        }\\n    }\\n}\\n</code></pre>\\n<p>目标item是stock，我们用<code>volatile</code>来保证其在P/C之间的可见性</p>\\n<p>P/C之间各通过对方的LOCK来唤醒对方</p>\\n<p>生产/消费到达limit之后，各在自己的LOCK上等待</p>\\n<p>消费者之间通过消费者LOCK保证消费同步，生产者之间通过生产者LOCK保证生产同步</p>\\n<h3 id=\\\"双重检查锁延迟初始化的错误与正确示范\\\">双重检查锁延迟初始化的错误与正确示范</h3>\\n<p>关于双重检查锁的由来就不再多说，我们看看双重检查的错误示范：</p>\\n<pre><code class=\\\"hljs language-java\\\"><span class=\\\"hljs-keyword\\\">public</span> <span class=\\\"hljs-keyword\\\">class</span> <span class=\\\"hljs-title class_\\\">DoubleCheckLocking</span> {\\n    <span class=\\\"hljs-keyword\\\">private</span> <span class=\\\"hljs-keyword\\\">static</span> Instance instance;\\n    <span class=\\\"hljs-keyword\\\">public</span> <span class=\\\"hljs-keyword\\\">static</span> Instance <span class=\\\"hljs-title function_\\\">getInstance</span><span class=\\\"hljs-params\\\">()</span> {\\n        <span class=\\\"hljs-keyword\\\">if</span> (instance == <span class=\\\"hljs-literal\\\">null</span>) {                            <span class=\\\"hljs-comment\\\">// 第一次检查</span>\\n            <span class=\\\"hljs-keyword\\\">synchronized</span>(DoubleCheckLocking.class) {    <span class=\\\"hljs-comment\\\">// 加锁</span>\\n                <span class=\\\"hljs-keyword\\\">if</span> (instance == <span class=\\\"hljs-literal\\\">null</span>) {                    <span class=\\\"hljs-comment\\\">// 第二次检查</span>\\n                    instance = <span class=\\\"hljs-keyword\\\">new</span> <span class=\\\"hljs-title class_\\\">Instance</span>();            <span class=\\\"hljs-comment\\\">// 初始化：这里有坑</span>\\n                }\\n            }\\n        }\\n        <span class=\\\"hljs-keyword\\\">return</span> instance;\\n    }\\n}\\n</code></pre>\\n<blockquote>\\n<p>双重检查锁看起来很完美，但是这是一个没有考虑完整的优化！</p>\\n<p>在线程执行到line4的时候，代码读取到instance不为空，但是instance所引用的对象可能还没有完成对象初始化</p>\\n<p>即现在不为空的对象其实并不具备工作能力</p>\\n</blockquote>\\n<h4 id=\\\"探究\\\">探究</h4>\\n<p>代码的第七行（<code>instance = new Instance();</code>）问题就出在这里，我们可以把这句话分解为以下三行：</p>\\n<ol>\\n<li>memory = allocate();        // 1 分配对象的内存空间</li>\\n<li>ctorInstance(memory);       // 2 初始化对象</li>\\n<li>instance = memory;            // 3 设置instance指向刚分配的内存地址</li>\\n<li>// 后续对instance对象的访问</li>\\n</ol>\\n<p>上面的2、3行代码，在某些编译器中可能会被重排序，可能是3先2后，这就是所谓的，对象不为空，但是对象并不具备工作的可能，为什么JMM会允许这样的重排序？说白了，JMM重排序，允许这样的重排序因为在单线程情况下这样的重排序并不影响程序结果，1234无论怎样，只要保证2在4之前就好了</p>\\n<p>这样的重排序在<code>单线程</code>的情况下是能安全地起到优化作用的，但是在多线程的情况下就会出问题了，我们看一个表：</p>\\n<table>\\n<thead>\\n<tr>\\n<th align=\\\"center\\\">时间</th>\\n<th align=\\\"center\\\">线程A</th>\\n<th align=\\\"center\\\">线程B</th>\\n</tr>\\n</thead>\\n<tbody><tr>\\n<td align=\\\"center\\\">t1</td>\\n<td align=\\\"center\\\">A1：分配对象的内存空间</td>\\n<td align=\\\"center\\\"></td>\\n</tr>\\n<tr>\\n<td align=\\\"center\\\">t2</td>\\n<td align=\\\"center\\\">A3：设置instance指向内存空间</td>\\n<td align=\\\"center\\\"></td>\\n</tr>\\n<tr>\\n<td align=\\\"center\\\">t3</td>\\n<td align=\\\"center\\\"></td>\\n<td align=\\\"center\\\">B1：判断instance是否为空</td>\\n</tr>\\n<tr>\\n<td align=\\\"center\\\">t4</td>\\n<td align=\\\"center\\\"></td>\\n<td align=\\\"center\\\">B2：不为空，访问instance引用的对象</td>\\n</tr>\\n<tr>\\n<td align=\\\"center\\\">t5</td>\\n<td align=\\\"center\\\">A2：初始化对象</td>\\n<td align=\\\"center\\\"></td>\\n</tr>\\n<tr>\\n<td align=\\\"center\\\">t6</td>\\n<td align=\\\"center\\\">A4：访问instance引用的对象</td>\\n<td align=\\\"center\\\"></td>\\n</tr>\\n</tbody></table>\\n<p>在t4时刻，线程B访问到的对象是不具备工作能力的对象，这样的对象没有意义。</p>\\n<p>我们要修正这个错误，有两种办法：</p>\\n<ul>\\n<li>禁止2和3的重排序</li>\\n<li>允许重排序，但是禁止其他线程感知到这个重排序</li>\\n</ul>\\n<h4 id=\\\"基于volatile的解决方法\\\">基于volatile的解决方法</h4>\\n<pre><code class=\\\"hljs language-java\\\"><span class=\\\"hljs-keyword\\\">public</span> <span class=\\\"hljs-keyword\\\">class</span> <span class=\\\"hljs-title class_\\\">SafeDoubleCheckLocking</span> {\\n    <span class=\\\"hljs-keyword\\\">private</span> <span class=\\\"hljs-keyword\\\">static</span> <span class=\\\"hljs-keyword\\\">volatile</span> Instance instance;\\n    <span class=\\\"hljs-keyword\\\">public</span> <span class=\\\"hljs-keyword\\\">static</span> Instance <span class=\\\"hljs-title function_\\\">getInstance</span><span class=\\\"hljs-params\\\">()</span> {\\n        <span class=\\\"hljs-keyword\\\">if</span> (instance == <span class=\\\"hljs-literal\\\">null</span>) {                            \\n            <span class=\\\"hljs-keyword\\\">synchronized</span>(SafeDoubleCheckLocking.class) {    \\n                <span class=\\\"hljs-keyword\\\">if</span> (instance == <span class=\\\"hljs-literal\\\">null</span>) {                    \\n                    instance = <span class=\\\"hljs-keyword\\\">new</span> <span class=\\\"hljs-title class_\\\">Instance</span>();            \\n                }\\n            }\\n        }\\n        <span class=\\\"hljs-keyword\\\">return</span> instance;\\n    }\\n}\\n</code></pre>\\n<p>将instance声明为volatile变量，这样做可以<strong>禁止2和3的重排序</strong></p>\\n<h4 id=\\\"基于内部类和类初始化的解决方案\\\">基于内部类和类初始化的解决方案</h4>\\n<p>在JVM初始化类的时候，JVM首先会获取一个锁，保证多个线程同时初始化这个类的同步性，而类的加载和初始化工作，会准备好类中所有的静态变量</p>\\n<p>基于这个特性，我们可以有另外一种线程安全的延迟初始化方案——<code>Initialization On Demand Holder idiom</code></p>\\n<pre><code class=\\\"hljs language-java\\\"><span class=\\\"hljs-keyword\\\">public</span> <span class=\\\"hljs-keyword\\\">class</span> <span class=\\\"hljs-title class_\\\">InstanceFactory</span> {\\n    <span class=\\\"hljs-keyword\\\">private</span> statci <span class=\\\"hljs-keyword\\\">class</span> <span class=\\\"hljs-title class_\\\">InstanceHolder</span> {\\n        <span class=\\\"hljs-keyword\\\">public</span> <span class=\\\"hljs-keyword\\\">static</span> <span class=\\\"hljs-type\\\">Instance</span> <span class=\\\"hljs-variable\\\">instance</span> <span class=\\\"hljs-operator\\\">=</span> <span class=\\\"hljs-keyword\\\">new</span> <span class=\\\"hljs-title class_\\\">Instance</span>();\\n    }\\n    <span class=\\\"hljs-keyword\\\">public</span> <span class=\\\"hljs-keyword\\\">static</span> Instance <span class=\\\"hljs-title function_\\\">getInstance</span><span class=\\\"hljs-params\\\">()</span> {\\n        <span class=\\\"hljs-keyword\\\">return</span> InstanceHolder.instance;    <span class=\\\"hljs-comment\\\">// 如果是第一次引用，那么在这个地方就会加载上面那个内部类</span>\\n    }\\n}\\n</code></pre>\\n<p>这个方案的本质是：让其他线程看不到初始化类线程的内部重排序，只能感知到结果</p>\\n<p>等于说，我们做线程安全单例，其实只需要一个<strong>“一次性锁”</strong>，而类初始化的这个特性恰好就是一个<strong>“一次性锁”</strong></p>\\n<p>这个锁称之为——<strong>初始化锁（LC）</strong>，我们来看看书里是怎么介绍的：</p>\\n<blockquote>\\n<p>Java语言规范规定，对于每一个类或接口C，都有一个唯一的初始化锁（LC）与之对应。从C到LC的映射，由JVM自由实现。JVM在类初始化期间会获取这个初始化锁，并且每个线程至少要获取一次锁来确保这个类已经被初始化过了。</p>\\n</blockquote>\\n\";","export default \"<h3 id=\\\"introduction\\\">Introduction</h3>\\n<p>本篇主要内容：</p>\\n<ol>\\n<li>Java 到底是值传递还是引用传递</li>\\n<li>Java 中的引用类型详解以其应用场景</li>\\n</ol>\\n<h3 id=\\\"pass-by-value-or-pass-by-reference-\\\">Pass-By-Value Or Pass-By-Reference ?</h3>\\n<p>Java中的所有传递都是值传递，并不存在所谓的引用传递</p>\\n<p>要理解这个问题的关键在于：</p>\\n<pre><code class=\\\"hljs language-java\\\">Dog myDog;\\n</code></pre>\\n<p>其中的<code>myDog</code>并不是真正的Dog对象，而是一个<em>pointer</em>，这个指针可以指向一个Dog对象</p>\\n<p>意思是说：</p>\\n<pre><code class=\\\"hljs language-java\\\"><span class=\\\"hljs-type\\\">Dog</span> <span class=\\\"hljs-variable\\\">myDog</span> <span class=\\\"hljs-operator\\\">=</span> <span class=\\\"hljs-keyword\\\">new</span> <span class=\\\"hljs-title class_\\\">Dog</span>(<span class=\\\"hljs-string\\\">&quot;Rover&quot;</span>);\\nfoo(myDog);\\n</code></pre>\\n<p>本质上来说，这仅仅只是将这个被创建的Dog对象的地址传递给了<code>foo</code>方法</p>\\n<p>假如说<code>myDog</code> 这个<em>pointer</em>的地址是<strong>0x19</strong>，而它指向的这个<code>Dog</code>对象的地址是<strong>0x42</strong>，那么我们其实是把<strong>0x42</strong>这个值，传递给了方法，而不是将<strong>0x19</strong>传递给了方法</p>\\n<p>如果说方法里面的逻辑是这样的：</p>\\n<pre><code class=\\\"hljs language-java\\\"><span class=\\\"hljs-keyword\\\">public</span> <span class=\\\"hljs-keyword\\\">void</span> <span class=\\\"hljs-title function_\\\">foo</span><span class=\\\"hljs-params\\\">(Dog someDog)</span> {\\n    someDog.setName(<span class=\\\"hljs-string\\\">&quot;Max&quot;</span>);     <span class=\\\"hljs-comment\\\">// 1</span>\\n    someDog = <span class=\\\"hljs-keyword\\\">new</span> <span class=\\\"hljs-title class_\\\">Dog</span>(<span class=\\\"hljs-string\\\">&quot;Fifi&quot;</span>);  <span class=\\\"hljs-comment\\\">// 2</span>\\n    someDog.setName(<span class=\\\"hljs-string\\\">&quot;Rowlf&quot;</span>);   <span class=\\\"hljs-comment\\\">// 3</span>\\n}\\n</code></pre>\\n<p>我们来分析一下这个方法里发生了什么事：</p>\\n<ul>\\n<li>参数<code>someDog</code>指向<strong>0x42</strong></li>\\n<li>在<code>//1</code><ul>\\n<li><code>someDog</code> 指向的<strong>0x42</strong>被setName成<strong>Max</strong>了</li>\\n</ul>\\n</li>\\n<li>在<code>//2</code><ul>\\n<li>一个名称为<strong>Fifi</strong>的新<code>Dog</code>对象（<strong>0x97</strong>）被<code>someDog</code>指向了</li>\\n</ul>\\n</li>\\n<li>在<code>//3</code><ul>\\n<li><code>someDog</code>指向的<strong>0x97</strong>被setName成<strong>Rowlf</strong>了</li>\\n</ul>\\n</li>\\n<li>方法返回</li>\\n</ul>\\n<p>那么接下来是灵魂拷问：<em>方法外面的<code>myDog</code>这时候叫什么名字？</em></p>\\n<p>这里就是关键！</p>\\n<p>它叫<strong>Max</strong>，但是！</p>\\n<p>从始至终请记住，<code>myDog</code>是一个pointer，它从始至终只指向了<strong>0x42</strong>，它还是原来那条一无是处的狗，只不过在<code>//1</code>的时候被人改了名字而已；</p>\\n<p>至于<code>someDog</code>，它只是一个容易变心的指针而已，所以方法内外的<code>myDog</code>和<code>someDog</code>，它们是两个世界的指针，谁也不会真正影响到谁变心；</p>\\n<h3 id=\\\"reference-type\\\">Reference Type</h3>\\n<p>之前在JVM学习的时候学过几种引用的含义，这里再引用一些<a href=\\\"https://blog.csdn.net/xlinsist/article/details/57089288\\\">参考</a>，深入了解一下</p>\\n<blockquote>\\n<p>作者：Xurtle \\n来源：CSDN \\n原文：<a href=\\\"https://blog.csdn.net/xlinsist/article/details/57089288\\\">https://blog.csdn.net/xlinsist/article/details/57089288</a> </p>\\n</blockquote>\\n<h4 id=\\\"strong-reference\\\">Strong reference</h4>\\n<p>显式写出来的引用就是它，除非显式引用断开了否则就回收它，而这背后JVM正是直接通过可达性判断来回收的，每个强引用的对象都能通过可达性判断；</p>\\n<pre><code class=\\\"hljs language-java\\\"><span class=\\\"hljs-type\\\">String</span> <span class=\\\"hljs-variable\\\">a</span> <span class=\\\"hljs-operator\\\">=</span> <span class=\\\"hljs-keyword\\\">new</span> <span class=\\\"hljs-title class_\\\">String</span>(<span class=\\\"hljs-string\\\">&quot;xixi&quot;</span>);    <span class=\\\"hljs-comment\\\">// ’xixi‘ is at 0x42</span>\\n<span class=\\\"hljs-comment\\\">// some work</span>\\na = <span class=\\\"hljs-literal\\\">null</span>;    <span class=\\\"hljs-comment\\\">// ‘xixi’ which means 0x42 is now available for GC</span>\\n</code></pre>\\n<h4 id=\\\"soft-reference\\\">Soft reference</h4>\\n<p>它引用的对象只有在内存不足时<strong>且没有强引用同时引用这个对象的时候</strong>，才会被回收，也即是在下次OOM之前，JVM一定会清理掉所有的<strong>soft reference</strong></p>\\n<p>虽然GCor们已经很努力地在工作了，但是我们作为Java开发，也不能为所欲为，不当的代码会造成冗余的对象，变成GCor们无法清理的垃圾，甚至造成内存泄漏问题</p>\\n<p>我们来看一段代码：</p>\\n<pre><code class=\\\"hljs language-java\\\"><span class=\\\"hljs-keyword\\\">public</span> <span class=\\\"hljs-keyword\\\">class</span> <span class=\\\"hljs-title class_\\\">LeakyChecksum</span> {\\n    <span class=\\\"hljs-keyword\\\">private</span> <span class=\\\"hljs-type\\\">byte</span>[] byteArray;\\n\\n    <span class=\\\"hljs-keyword\\\">public</span> <span class=\\\"hljs-keyword\\\">synchronized</span> <span class=\\\"hljs-type\\\">int</span> <span class=\\\"hljs-title function_\\\">getFileChecksum</span><span class=\\\"hljs-params\\\">(String fileName)</span> {\\n        <span class=\\\"hljs-type\\\">int</span> <span class=\\\"hljs-variable\\\">len</span> <span class=\\\"hljs-operator\\\">=</span> getFileSize(fileName);\\n        <span class=\\\"hljs-keyword\\\">if</span> (byteArray == <span class=\\\"hljs-literal\\\">null</span> || byteArray.length &lt; len)\\n            byteArray = <span class=\\\"hljs-keyword\\\">new</span> <span class=\\\"hljs-title class_\\\">byte</span>[len];\\n        readFileContents(fileName, byteArray);\\n        <span class=\\\"hljs-comment\\\">// calculate checksum and return it</span>\\n    }\\n}\\n</code></pre>\\n<p>在没有对<code>byteArray</code>进行手动数据清理的时候，<code>byteArray</code>会不断重用数组，除非<code>LeakyChecksum</code>对象被GC，否则它不会被GC，它的大小会始终和它处理过的最大的文件一样大，这样会增加GC的频率；</p>\\n<p>而且因为方法后续没有手动清理，所以这个字节数组就一直存在内存中的垃圾，造成内存泄漏</p>\\n<p>于是我们可以使用软引用去描述这个字节数组，一旦内存紧张的时候，它就会被回收掉，从而释放多余的空间</p>\\n<pre><code class=\\\"hljs language-java\\\"><span class=\\\"hljs-keyword\\\">public</span> <span class=\\\"hljs-keyword\\\">class</span> <span class=\\\"hljs-title class_\\\">CachingChecksum</span> {\\n    <span class=\\\"hljs-keyword\\\">private</span> SoftReference&lt;<span class=\\\"hljs-type\\\">byte</span>[]&gt; bufferRef;\\n\\n    <span class=\\\"hljs-keyword\\\">public</span> <span class=\\\"hljs-keyword\\\">synchronized</span> <span class=\\\"hljs-type\\\">int</span> <span class=\\\"hljs-title function_\\\">getFileChecksum</span><span class=\\\"hljs-params\\\">(String fileName)</span> {\\n        <span class=\\\"hljs-type\\\">int</span> <span class=\\\"hljs-variable\\\">len</span> <span class=\\\"hljs-operator\\\">=</span> getFileSize(fileName);\\n        <span class=\\\"hljs-type\\\">byte</span>[] byteArray = bufferRef.get();\\n        <span class=\\\"hljs-keyword\\\">if</span> (byteArray == <span class=\\\"hljs-literal\\\">null</span> || byteArray.length &lt; len) {\\n            byteArray = <span class=\\\"hljs-keyword\\\">new</span> <span class=\\\"hljs-title class_\\\">byte</span>[len];\\n            bufferRef.set(byteArray);\\n        }\\n        readFileContents(fileName, byteArray);\\n        <span class=\\\"hljs-comment\\\">// calculate checksum and return it</span>\\n    }\\n}\\n</code></pre>\\n<p>可以看到，我们每次都尝试获取软引用对象，如果它为null，证明它是第一次访问或者被GC清理掉了</p>\\n<h4 id=\\\"weak-reference\\\">Weak reference</h4>\\n<p>被声明为弱引用的对象，<strong>如果没有强引用同时引用这个对象</strong>，那么它只能存活到下一次GC之前</p>\\n<pre><code class=\\\"hljs language-java\\\">WeakReference&lt;String&gt; sr = <span class=\\\"hljs-keyword\\\">new</span> <span class=\\\"hljs-title class_\\\">WeakReference</span>&lt;String&gt;(<span class=\\\"hljs-keyword\\\">new</span> <span class=\\\"hljs-title class_\\\">String</span>(<span class=\\\"hljs-string\\\">&quot;hello&quot;</span>));\\n\\nSystem.out.println(sr.get()); <span class=\\\"hljs-comment\\\">// hello</span>\\nSystem.gc();                  <span class=\\\"hljs-comment\\\">// 通知JVM的gc进行垃圾回收</span>\\nSystem.out.println(sr.get()); <span class=\\\"hljs-comment\\\">// might be null</span>\\n</code></pre>\\n<h4 id=\\\"phantom-reference\\\">Phantom reference</h4>\\n<p><strong>Phantom References</strong>与上面的几个引用存在很大的不同，至少上面的<code>Reference</code> 对象通过它们的<code>get()</code> 方法可以获取到它们所引用的对象，但是，<code>PhantomReference</code> 的只会返回<code>null</code>，因为虚引用的意义不在于get到引用，而在于<strong>它能提醒我们哪些对象不应该继续存在了</strong></p>\\n<p><a href=\\\"https://blog.csdn.net/xlinsist/article/details/57089288\\\">这篇里</a>说：<em>“Phantom reference 的唯一作用就是它可以监测到对象的死亡，即，当你的对象真正从内存中移除时，指向这个对象的<code>PhantomReference</code> 就会被加入到队列中”</em></p>\\n<p>这句话其实后半句有误，应该是<em>“这个被回收对象生前所引用的虚引用对象会被加入到<strong>引用队列</strong>中”</em>才对</p>\\n<p>关于<strong>引用队列</strong>，具体是什么，我们下节再细说，先来整理一下虚引用到底有什么神通</p>\\n<p>它首先会表现出来的行为是：当且仅当虚引用对象的<strong>参照对象（referent）</strong>被GC回收掉的时候，那么这个虚引对象用会被加入到<code>ReferenceQueue</code>中，<strong>这时候虚引用对象还没被回收</strong></p>\\n<pre><code class=\\\"hljs language-java\\\"><span class=\\\"hljs-keyword\\\">public</span> <span class=\\\"hljs-keyword\\\">class</span> <span class=\\\"hljs-title class_\\\">PhantomReferenceDemo</span> {\\n    <span class=\\\"hljs-keyword\\\">private</span> <span class=\\\"hljs-keyword\\\">static</span> ReferenceQueue&lt;Person&gt; rq = <span class=\\\"hljs-keyword\\\">new</span> <span class=\\\"hljs-title class_\\\">ReferenceQueue</span>&lt;&gt;();\\n    <span class=\\\"hljs-keyword\\\">static</span> Person p;\\n    <span class=\\\"hljs-keyword\\\">static</span> Dog d;\\n    <span class=\\\"hljs-keyword\\\">public</span> <span class=\\\"hljs-keyword\\\">static</span> <span class=\\\"hljs-keyword\\\">void</span> <span class=\\\"hljs-title function_\\\">main</span><span class=\\\"hljs-params\\\">(String[] args)</span>{\\n        p = <span class=\\\"hljs-keyword\\\">new</span> <span class=\\\"hljs-title class_\\\">Person</span>(<span class=\\\"hljs-string\\\">&quot;xixi&quot;</span>);\\n        d = <span class=\\\"hljs-keyword\\\">new</span> <span class=\\\"hljs-title class_\\\">Dog</span>(p, rq, <span class=\\\"hljs-string\\\">&quot;haha&quot;</span>);\\n        printRQ();\\n        p = <span class=\\\"hljs-literal\\\">null</span>;\\n        System.gc();\\n        waitMoment(<span class=\\\"hljs-number\\\">2000</span>);    <span class=\\\"hljs-comment\\\">// wait gc</span>\\n        printRQ();\\n    }\\n\\n    <span class=\\\"hljs-keyword\\\">static</span> <span class=\\\"hljs-keyword\\\">class</span> <span class=\\\"hljs-title class_\\\">Person</span> {\\n        String name;Dog dog;\\n        <span class=\\\"hljs-keyword\\\">public</span> <span class=\\\"hljs-title function_\\\">Person</span><span class=\\\"hljs-params\\\">(String name)</span> {<span class=\\\"hljs-built_in\\\">this</span>.name = name;}\\n        <span class=\\\"hljs-keyword\\\">public</span> <span class=\\\"hljs-keyword\\\">void</span> <span class=\\\"hljs-title function_\\\">setDog</span><span class=\\\"hljs-params\\\">(Dog dog)</span> {<span class=\\\"hljs-built_in\\\">this</span>.dog = dog;}\\n    }\\n\\n    <span class=\\\"hljs-keyword\\\">static</span> <span class=\\\"hljs-keyword\\\">class</span> <span class=\\\"hljs-title class_\\\">Dog</span> <span class=\\\"hljs-keyword\\\">extends</span> <span class=\\\"hljs-title class_\\\">PhantomReference</span>&lt;Person&gt; {\\n        String name;\\n        <span class=\\\"hljs-comment\\\">// Person person;</span>\\n        <span class=\\\"hljs-keyword\\\">public</span> <span class=\\\"hljs-title function_\\\">Dog</span><span class=\\\"hljs-params\\\">(Person referent, ReferenceQueue&lt;? <span class=\\\"hljs-built_in\\\">super</span> Person&gt; q, String name)</span> {\\n            <span class=\\\"hljs-built_in\\\">super</span>(referent, q);\\n            <span class=\\\"hljs-comment\\\">// this.person = referent;</span>\\n            <span class=\\\"hljs-built_in\\\">this</span>.name = name;\\n        }\\n    }\\n\\n    <span class=\\\"hljs-keyword\\\">private</span> <span class=\\\"hljs-keyword\\\">static</span> <span class=\\\"hljs-keyword\\\">void</span> <span class=\\\"hljs-title function_\\\">waitMoment</span><span class=\\\"hljs-params\\\">(<span class=\\\"hljs-type\\\">long</span> time)</span> {\\n        <span class=\\\"hljs-keyword\\\">try</span> {\\n            Thread.sleep(time);\\n        } <span class=\\\"hljs-keyword\\\">catch</span> (InterruptedException e) {\\n            e.printStackTrace();\\n        }\\n    }\\n\\n    <span class=\\\"hljs-keyword\\\">private</span> <span class=\\\"hljs-keyword\\\">static</span> <span class=\\\"hljs-keyword\\\">void</span> <span class=\\\"hljs-title function_\\\">printRQ</span><span class=\\\"hljs-params\\\">()</span> {\\n        <span class=\\\"hljs-type\\\">int</span> <span class=\\\"hljs-variable\\\">size</span> <span class=\\\"hljs-operator\\\">=</span> <span class=\\\"hljs-number\\\">0</span>;\\n        Object obj;\\n        <span class=\\\"hljs-keyword\\\">while</span> ( ( obj = rq.poll() ) != <span class=\\\"hljs-literal\\\">null</span> ) {\\n            System.out.println(<span class=\\\"hljs-string\\\">&quot;reference: &quot;</span> + obj);\\n            size++;\\n        }\\n        System.out.println(<span class=\\\"hljs-string\\\">&quot;size of rq： &quot;</span> + size);\\n    }\\n}\\n\\n<span class=\\\"hljs-comment\\\">// size of rq： 0</span>\\n<span class=\\\"hljs-comment\\\">// reference: _reference.PhantomReferenceDemo$Dog@45ee12a7</span>\\n<span class=\\\"hljs-comment\\\">// size of rq： 1</span>\\n</code></pre>\\n<p>虚引用的正确实现方式就是如<code>Dog</code>对象一样，继承<code>PhantomReference&lt;Person&gt;</code>，因为狗是跟随人的，如果人没有了，那么狗就没有存在的必要了（请不要带有感情地去读这句话，客观的看代码- -）所以说，狗对象的<strong>参照对象（referent）</strong>是人！</p>\\n<p>所以在<code>line:9</code>之后，当人对象变为<strong>不可达状态</strong>的时候，被GC处理掉了之后，因为两者之间的虚引用关系，狗对象被加入到了指定的引用队列中，表面需要对这个没有存在必要的狗对象也进行处理，我们可以重写虚引用对象的<code>clear()</code>方法，在方法里面去掉狗的强引用，去然后在处理引用队列的时候，调用虚引用对象的<code>clear()</code>方法</p>\\n<pre><code class=\\\"hljs language-java\\\"><span class=\\\"hljs-comment\\\">// Dog</span>\\n<span class=\\\"hljs-meta\\\">@Override</span>\\n<span class=\\\"hljs-keyword\\\">public</span> <span class=\\\"hljs-keyword\\\">void</span> <span class=\\\"hljs-title function_\\\">clear</span><span class=\\\"hljs-params\\\">()</span> {\\n    <span class=\\\"hljs-built_in\\\">super</span>.clear();\\n    System.out.println(<span class=\\\"hljs-string\\\">&quot;clear dog&quot;</span>);\\n    d = <span class=\\\"hljs-literal\\\">null</span>;\\n}\\n<span class=\\\"hljs-comment\\\">// printRQ</span>\\n<span class=\\\"hljs-keyword\\\">private</span> <span class=\\\"hljs-keyword\\\">static</span> <span class=\\\"hljs-keyword\\\">void</span> <span class=\\\"hljs-title function_\\\">printRQ</span><span class=\\\"hljs-params\\\">()</span> {\\n    <span class=\\\"hljs-comment\\\">// ...</span>\\n    <span class=\\\"hljs-keyword\\\">while</span> ( ( obj = rq.poll() ) != <span class=\\\"hljs-literal\\\">null</span> ) {\\n        <span class=\\\"hljs-comment\\\">// ...</span>\\n        ((Reference) obj).clear();\\n    }\\n    <span class=\\\"hljs-comment\\\">// ...</span>\\n}\\n</code></pre>\\n<p>那么上一句说到的不可达状态如何验证？狗对象的Person字段相关被注释掉了，如果解开注释之后，即使全局q对象已经设置为null，但是人对象还有狗对象去引用，人对象还是处于可达状态的，所以第二次<code>printRQ</code>方法依旧是没有任何对象入队</p>\\n<h3 id=\\\"reference-abstract-class--referencequeue\\\">Reference Abstract Class & ReferenceQueue</h3>\\n<p>上面提到的4种引用类型中的后3种，在Java中其实都是<code>Reference</code>的子类实现，并且<code>Reference</code>和<code>ReferenceQueue</code>的关系很密切</p>\\n<p>其实我感觉虚引用的作用可以人为替代，比如上文的人和狗的关系，只要狗没有强引用，那么人没了狗也就没了</p>\\n<p>所以更多的时候，虚引用是用来监听虚引用的参照对象是否被GC掉了</p>\\n<p>上节已经说过虚引用和引用队列的关系了，它必须指定一个引用队列，软引用和弱引用可以选择性地和引用队列合作</p>\\n<p>以下参考自<a href=\\\"https://juejin.im/entry/5b28f605f265da59942344d4\\\">java 源码系列 - 带你读懂 Reference 和 ReferenceQueue</a></p>\\n<h4 id=\\\"reference\\\">Reference</h4>\\n<p>主要是负责内存的一个状态，当然它还和java虚拟机，垃圾回收器打交道。Reference类首先把内存分为4种状态Active，Pending，Enqueued，Inactive。</p>\\n<ul>\\n<li>Active，一般来说内存一开始被分配的状态都是 Active，</li>\\n<li>Pending 大概是指快要被放进队列的对象，也就是马上要回收的对象，</li>\\n<li>Enqueued 就是对象的内存已经被回收了，我们已经把这个对象放入到一个队列中，方便以后我们查询某个对象是否被回收，</li>\\n<li>Inactive就是最终的状态，不能再变为其它状态。</li>\\n</ul>\\n<h4 id=\\\"referencequeue\\\">ReferenceQueue</h4>\\n<p>引用队列，在检测到适当的<strong>可到达性更改</strong>后，垃圾回收器将已注册的引用对象添加到队列中，ReferenceQueue实现了入队（enqueue）和出队（poll），还有remove操作，内部元素head就是泛型的Reference。</p>\\n<h4 id=\\\"sample\\\">Sample</h4>\\n<pre><code class=\\\"hljs language-java\\\"><span class=\\\"hljs-keyword\\\">public</span> <span class=\\\"hljs-keyword\\\">static</span> <span class=\\\"hljs-keyword\\\">void</span> <span class=\\\"hljs-title function_\\\">main</span><span class=\\\"hljs-params\\\">(String[] args)</span> <span class=\\\"hljs-keyword\\\">throws</span> InterruptedException {\\n    <span class=\\\"hljs-type\\\">ReferenceQueue</span> <span class=\\\"hljs-variable\\\">queue</span> <span class=\\\"hljs-operator\\\">=</span> <span class=\\\"hljs-keyword\\\">new</span> <span class=\\\"hljs-title class_\\\">ReferenceQueue</span>();\\n\\n    <span class=\\\"hljs-comment\\\">// 创建弱引用，此时状态为Active，并且Reference.pending为空</span>\\n    <span class=\\\"hljs-comment\\\">// 当前Reference.queue = 上面创建的queue，并且next=null</span>\\n    <span class=\\\"hljs-type\\\">WeakReference</span> <span class=\\\"hljs-variable\\\">reference</span> <span class=\\\"hljs-operator\\\">=</span> <span class=\\\"hljs-keyword\\\">new</span> <span class=\\\"hljs-title class_\\\">WeakReference</span>(<span class=\\\"hljs-keyword\\\">new</span> <span class=\\\"hljs-title class_\\\">Object</span>(), queue);\\n    System.out.println(reference);\\n    <span class=\\\"hljs-comment\\\">// 当GC执行后，由于是虚引用，所以回收该object对象</span>\\n    <span class=\\\"hljs-comment\\\">//并且置于pending上，此时reference的状态为PENDING</span>\\n    System.gc();\\n\\n    <span class=\\\"hljs-comment\\\">/* ReferenceHandler从pending中取下该元素，并且将该元素放入到queue中，\\n    此时Reference状态为ENQUEUED，Reference.queue = ReferenceENQUEUED */</span>\\n\\n    <span class=\\\"hljs-comment\\\">/* 当从queue里面取出该元素，则变为INACTIVE，Reference.queue = Reference.NULL */</span>\\n    <span class=\\\"hljs-type\\\">Reference</span> <span class=\\\"hljs-variable\\\">reference1</span> <span class=\\\"hljs-operator\\\">=</span> queue.remove();\\n    System.out.println(reference1);\\n}\\n</code></pre>\\n<p>我们很容易就想到，<code>reference</code>和<code>reference1</code>是同一个对象，而且这段代码也揭示了一个事实：<strong>匿名对象都是虚引用</strong></p>\\n<h3 id=\\\"conclusion\\\">Conclusion</h3>\\n<p>有效地利用3种引用类型，可以帮助我们提高GC效率，防止OOM</p>\\n<p>在Java中也有许多应用实例，比如有<code>WeakHashMap</code>等等，他在<code>ThreadLocal</code>里就运用到了，以后有空再研究</p>\\n\";","export default \"<h3 id=\\\"什么是ci\\\">什么是CI</h3>\\n<p><strong>持续集成（Continuous integration）</strong> 不是什么新概念</p>\\n<blockquote>\\n<p><em>持续集成是一种软件开发实践，即团队开发成员经常集成他们的工作，通过每个成员每天至少集成一次，也就意味着每天可能会发生多次集成。每次集成都通过自动化的构建（包括编译，发布，自动化测试）来验证，从而尽早地发现集成错误。</em></p>\\n</blockquote>\\n<p>以上引自百度百科的定义。</p>\\n<p>通俗来说，持续集成的操作很明确，我可以根据自己的实际开发经验，而分别从两个层次去说明：</p>\\n<h4 id=\\\"小层次\\\">小层次</h4>\\n<p>首先我们得有一个前提，软件组中的一个小组在开发一个模块，这个模块由若干名成员开发，模块的成品标准已经定义好，模块也已经开发好第一版基础版，即可以投入小范围使用的版本，我们称这个版本为<strong>主模块版本</strong>。</p>\\n<p><img src=\\\"https://user-images.githubusercontent.com/23525754/39910988-3c8e44d0-552c-11e8-9b85-1606425a0330.png\\\" alt=\\\"image\\\"></p>\\n<p>现在我们需要对这个模块进行改良和升级，假设为<strong>Module-A</strong>，我们对这此升级定好几个方向和目标，假设有<strong>Module-A-1、Module-A-2、Module-A-3…Module-A-n</strong>，每个成员负责一个小模块或者一个小目标<strong>Module-A-k</strong>，当成员完成小模块<strong>Module-A-k</strong>之后，就把小模块和小组开发的<strong>主模块版本</strong>进行<strong>合并与测试</strong>，<strong>如果测试通过</strong>，则合并的结果直接进行<strong>发布</strong>，并将这个结果更新为当前的<strong>主模块版本</strong>，而不用等待整体的<strong>Module-A</strong>的其他子任务完成之后，统一整合再发布。</p>\\n<p><img src=\\\"https://user-images.githubusercontent.com/23525754/39957078-2c57e780-561f-11e8-838f-81400c5db289.png\\\" alt=\\\"image\\\"></p>\\n<h4 id=\\\"大层次\\\">大层次</h4>\\n<p>我们延续小层次的过程，软件成品标准已经定好，也有已经开发好可以投入小范围运行的<strong>主成品版本</strong>。</p>\\n<p>现在我们需要开发一个新的<strong>Feature-A</strong>，这个<strong>Feature</strong>需要更新升级若干<strong>Modules</strong>，这样任务分配下去。每一个小组开发完一个模块<strong>Module-k</strong>之后，就会发布一个新的模块版本<strong>Module-K</strong>，我们把这个模块版本和<strong>主成品版本</strong>进行<strong>合并与测试</strong>，测试通过即将结果直接进行<strong>发布</strong>。并将这个结果更新为当前的<strong>主成品版本</strong>，而不用等待整体的<strong>Feature-A</strong>的其他子<strong>Module</strong>完成之后，统一整合再发布。</p>\\n<p>从这两个层次来理解持续集成就非常简单了，一旦我们开发的新模块可以是可以稳定接入主程序/主模块的，我们就毫不犹豫地和主程序/模块合并与发布。</p>\\n<h3 id=\\\"ci的目的\\\">CI的目的</h3>\\n<ol>\\n<li>是为了尽早地测试我们开发的部分在生产环境中的可靠性。</li>\\n<li>减少整体返工的次数和成本。</li>\\n<li>这也便于尽早发现新模块的BUG，避免整体集成之后的返工，也有利于准确定位BUG的出现的地方。</li>\\n<li>同时这样的方式也可以提高成员软件开发效率，避免一个Module-A开发完之后，还得等待其他Module-B开发完毕而造成负责Module-A的小组成员出现空闲。</li>\\n<li>尽早让用户体验到新功能。</li>\\n</ol>\\n\";","export default \"<h3 id=\\\"ⅰ开始使用jetty\\\">Ⅰ.开始使用Jetty</h3>\\n<p><span id=\\\"top\\\"></span></p>\\n<ul>\\n<li><ol>\\n<li><a href=\\\"#1%E5%85%B3%E4%BA%8Ejetty%E7%9A%84%E4%BB%8B%E7%BB%8D\\\">关于Jetty的介绍</a></li>\\n</ol>\\n<ul>\\n<li><a href=\\\"#11%E4%BB%80%E4%B9%88%E6%98%AFjetty\\\">什么是Jetty</a></li>\\n<li><a href=\\\"#12%E6%88%91%E5%BA%94%E8%AF%A5%E4%BD%BF%E7%94%A8%E5%93%AA%E4%B8%AA%E7%89%88%E6%9C%AC\\\">我应该使用哪个版本</a></li>\\n<li><a href=\\\"#13jetty%E5%92%8Cjavaee%E7%9A%84web%E8%A7%84%E8%8C%83\\\">Jetty和JavaEE的Web规范</a></li>\\n<li><a href=\\\"#14%E5%9C%A8maven%E9%87%8C%E9%9D%A2%E6%89%BE%E5%88%B0jetty\\\">在Maven里面找到Jetty</a></li>\\n</ul>\\n</li>\\n<li><ol start=\\\"2\\\">\\n<li><a href=\\\"#2%E4%BD%BF%E7%94%A8jetty\\\">使用Jetty</a></li>\\n</ol>\\n<ul>\\n<li><a href=\\\"#21%E4%B8%8B%E8%BD%BDjetty\\\">下载Jetty</a></li>\\n<li><a href=\\\"#22%E8%BF%90%E8%A1%8Cjetty\\\">运行Jetty</a><ul>\\n<li><a href=\\\"#221demo-base\\\">Demo Base</a></li>\\n<li><a href=\\\"#222%E5%88%9B%E5%BB%BAjetty-base\\\">创建Jetty Base</a></li>\\n<li><a href=\\\"#223%E6%9B%B4%E6%94%B9jetty%E7%9A%84%E7%AB%AF%E5%8F%A3%E5%8F%B7\\\">更改Jetty的端口号</a></li>\\n<li><a href=\\\"#224%E4%B8%BAhttps%E5%92%8Chttp2%E6%B7%BB%E5%8A%A0ssl\\\">为HTTPS和HTTP2添加SSL</a></li>\\n<li><a href=\\\"#225%E6%9B%B4%E6%94%B9https%E7%9A%84%E7%AB%AF%E5%8F%A3%E5%8F%B7\\\">更改HTTPS的端口号</a></li>\\n<li><a href=\\\"#226%E8%8E%B7%E5%8F%96%E6%9B%B4%E5%A4%9A%E7%9A%84startjar%E9%80%89%E9%A1%B9\\\">获取更多的start.jar选项</a></li>\\n</ul>\\n</li>\\n<li><a href=\\\"#23%E9%83%A8%E7%BD%B2web%E5%BA%94%E7%94%A8\\\">部署Web应用</a></li>\\n</ul>\\n</li>\\n<li><ol start=\\\"3\\\">\\n<li><a href=\\\"#3%E5%85%B3%E4%BA%8Ejetty-configuration%E7%9A%84%E4%BB%8B%E7%BB%8D\\\">关于Jetty Configuration的介绍</a></li>\\n</ol>\\n<ul>\\n<li><a href=\\\"#31%E5%A6%82%E4%BD%95%E9%85%8D%E7%BD%AEjetty\\\">如何配置Jetty</a><ul>\\n<li><a href=\\\"#311%E4%BD%BF%E7%94%A8pojo%E7%9A%84%E6%96%B9%E6%B3%95%E9%85%8D%E7%BD%AE\\\">使用POJO的方法配置</a></li>\\n<li><a href=\\\"#312%E4%BD%BF%E7%94%A8start%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E9%85%8D%E7%BD%AE\\\">使用Start配置文件配置</a></li>\\n<li><a href=\\\"#313%E5%85%B6%E4%BB%96%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6\\\">其他配置文件</a></li>\\n<li><a href=\\\"#314jetty%E7%9A%84ioc-xml%E7%9A%84%E5%BD%A2%E5%BC%8F%E9%85%8D%E7%BD%AE\\\">Jetty的IoC XML的形式配置</a></li>\\n</ul>\\n</li>\\n<li><a href=\\\"#32%E5%8F%AF%E4%BB%A5%E5%9C%A8jetty%E9%87%8C%E9%9D%A2%E9%85%8D%E7%BD%AE%E4%BB%80%E4%B9%88\\\">可以在Jetty里面配置什么</a><ul>\\n<li><a href=\\\"#321%E9%85%8D%E7%BD%AEserver\\\">配置Server</a></li>\\n<li><a href=\\\"#322%E9%85%8D%E7%BD%AEconnectors\\\">配置Connectors</a></li>\\n<li><a href=\\\"#323%E9%85%8D%E7%BD%AEcontexts\\\">配置Contexts</a></li>\\n</ul>\\n</li>\\n</ul>\\n</li>\\n</ul>\\n<hr>\\n<p><span id=\\\"1关于jetty的介绍\\\"></span></p>\\n<h3 id=\\\"1、关于jetty的介绍\\\">1、关于Jetty的介绍</h3>\\n<ul>\\n<li>1.1、<a href=\\\"#11%E4%BB%80%E4%B9%88%E6%98%AFjetty\\\">什么是Jetty</a></li>\\n<li>1.2、<a href=\\\"#12%E6%88%91%E5%BA%94%E8%AF%A5%E4%BD%BF%E7%94%A8%E5%93%AA%E4%B8%AA%E7%89%88%E6%9C%AC\\\">我应该使用哪个版本</a></li>\\n<li>1.3、<a href=\\\"#13jetty%E5%92%8Cjavaee%E7%9A%84web%E8%A7%84%E8%8C%83\\\">Jetty和JavaEE的Web规范</a></li>\\n<li>1.4、<a href=\\\"#14%E5%9C%A8maven%E9%87%8C%E9%9D%A2%E6%89%BE%E5%88%B0jetty\\\">在Maven里面找到Jetty</a></li>\\n</ul>\\n<p><span id=\\\"11什么是jetty\\\"></span></p>\\n<h4 id=\\\"11、什么是jetty\\\">1.1、什么是Jetty</h4>\\n<p>Jetty是一个开源的项目，它可以作为HTTP服务器，HTTP客户端，和Servlet容器来使用。</p>\\n<p>这个指南总共分为以下5个部分：</p>\\n<blockquote>\\n<ul>\\n<li>第一部分，告诉你怎么开始使用Jetty。 它提供了Jetty的相关信息以及你可以在哪里下载到它，以及你可以在哪些仓库源中找到它，比如Maven的中央仓库。它还提供了一个Quick Start，告诉你如何启动和运行Jetty，以及一个关于如何配置Jetty和Jetty可以配置些什么的概述。</li>\\n</ul>\\n</blockquote>\\n<blockquote>\\n<ul>\\n<li>第二部分，更加详细的给予你配置Jetty的指南。它解释了Jetty如何去部署一个Web应用，如何配置上下文和连接，以及如何实现SSL和其他的安全措施。</li>\\n</ul>\\n</blockquote>\\n<blockquote>\\n<ul>\\n<li>第三部分，这是如何管理Jetty的重点指南。它从服务器的启动到session的管理，日志记录，HTTP/2的支持，再到Jetty的优化，这些章节会帮助管理者学到很多Jetty实例以外的知识。这个部分当然也会告诉你怎么配置和其他servlet容器一样都会有的许多配置，比如JNDI和JMX。</li>\\n</ul>\\n</blockquote>\\n<blockquote>\\n<ul>\\n<li>第四部分，这个部分注重的是Jetty的开发，是给更高级的Jetty用户准备的。里面很大一部分是告诉你如何在一个现有项目里面去使用嵌入式Jetty。它还包含了几个栗子，里面讲述了许多Jetty架构之外的东西。这个部分也会告诉你如何使用Maven中的Jetty插件，同时也会介绍如何debugJetty。</li>\\n</ul>\\n</blockquote>\\n<blockquote>\\n<ul>\\n<li>第五部分，这部分是一些参考内容，包括一些Jetty架构的指南、JettyXML的语法、Jetty的分布式指南和一些常见问题的排查。同样会告诉你怎么才可以参与到Jetty社区中，参与贡献。</li>\\n</ul>\\n</blockquote>\\n<p><a href=\\\"#top\\\">回到顶部</a></p>\\n<hr>\\n<p><span id=\\\"12我应该使用哪个版本\\\"></span></p>\\n<h4 id=\\\"12、我应该使用哪个版本\\\">1.2、我应该使用哪个版本</h4>\\n<blockquote>\\n<p><em>这里使用表格介绍了Jetty版本对应的发布年、持有者、支持的JDK版本、支持的协议、servlet规范版本、JSP规范版本、以及是否是稳定还是已经被遗弃。</em></p>\\n<p><em>Markdown作表格实在是太蛋疼了我就不搞了，大家可以在<a href=\\\"http://www.eclipse.org/jetty/documentation/9.4.6.v20170531/what-jetty-version.html\\\">这里</a>去参照。</em></p>\\n</blockquote>\\n<blockquote>\\n<p><em>大致说一下，Jetty8之前的版本都已经被弃用（Deprecated）了，更不要说是远古时期甚至是神话时期了（官网就这么描述的，好中二），从9.2开始就是稳定版了。92是jdk7、93以上就是jdk8了。</em></p>\\n</blockquote>\\n<p><a href=\\\"#top\\\">回到顶部</a></p>\\n<hr>\\n<p><span id=\\\"13jetty和javaee的web规范\\\"></span></p>\\n<h4 id=\\\"13、jetty和javaee的web规范\\\">1.3、Jetty和JavaEE的Web规范</h4>\\n<blockquote>\\n<p><em>这里介绍的也是Jetty对JavaEE规范的支持程度，值得一提的是，Jetty并没有实现完整的规范，部分规范需要以Jetty插件的形式去支持。</em></p>\\n<p><em>表格我也不搞了，大家可以在<a href=\\\"http://www.eclipse.org/jetty/documentation/9.4.6.v20170531/jetty-javaee.html\\\">这里</a>去参照。</em></p>\\n</blockquote>\\n<p><a href=\\\"#top\\\">回到顶部</a></p>\\n<hr>\\n<p><span id=\\\"14在maven里面找到jetty\\\"></span></p>\\n<h4 id=\\\"14、在maven里面找到jetty\\\">1.4、在Maven里面找到Jetty</h4>\\n<blockquote>\\n<p><em>就是告诉你Jetty的maven坐标，但是官网在这里比较坑，文档中说，Jetty是从项目成立初始就把项目发布到maven上了，由于历史原因，它的坐标变动了很多次，但是文档给出的示例代码也太不负责任了：</em></p>\\n</blockquote>\\n<pre><code>&lt;dependency&gt;\\n  &lt;groupId&gt;org.eclipse.jetty&lt;/groupId&gt;\\n  &lt;artifactId&gt;jetty-project&lt;/artifactId&gt;\\n  &lt;version&gt;${project.version}&lt;/version&gt;\\n&lt;/dependency&gt;\\n</code></pre>\\n<blockquote>\\n<p><em>如果是<code>jetty-project</code>这个A值你能找到东西就有鬼了。</em></p>\\n</blockquote>\\n<blockquote>\\n<p><em>我在README中给出了依赖的模板，大家去参照那个。</em></p>\\n</blockquote>\\n<blockquote>\\n<p><em>然后还给出了一个Changelogs的坐标，这个没啥卵用。</em></p>\\n</blockquote>\\n<p><a href=\\\"#top\\\">回到顶部</a></p>\\n<hr>\\n<p><span id=\\\"2使用jetty\\\"></span></p>\\n<h3 id=\\\"2、使用jetty\\\">2、使用Jetty</h3>\\n<ul>\\n<li>2.1、<a href=\\\"#21%E4%B8%8B%E8%BD%BDjetty\\\">下载Jetty</a></li>\\n<li>2.2、<a href=\\\"#22%E8%BF%90%E8%A1%8Cjetty\\\">运行Jetty</a></li>\\n<li>2.3、<a href=\\\"#23%E9%83%A8%E7%BD%B2web%E5%BA%94%E7%94%A8\\\">部署Web应用</a></li>\\n</ul>\\n<p><span id=\\\"21下载jetty\\\"></span></p>\\n<h4 id=\\\"21、下载jetty\\\">2.1、下载Jetty</h4>\\n<h5 id=\\\"独立版本：\\\">独立版本：</h5>\\n<p>独立的Jetty版本你可以在eclipse公司主页上下载：</p>\\n<p><strong>Jetty</strong> <a href=\\\"https://www.eclipse.org/jetty/download.html\\\">https://www.eclipse.org/jetty/download.html</a></p>\\n<p>它包含了zip和gzip两种格式，去下载一个最适合你系统的版本吧。让你下载好并且解压好之后，你会得到一个<code>jetty-distribution-VERSION</code>的目录。</p>\\n<p>把这个目录放在你常用的位置，文章后面的部分会引用到这个目录，我们使用<code>JETTY_HOME</code>或者<code>${jetty.home}</code>来在环境变量和Java程序中引用它。</p>\\n<blockquote>\\n<p><strong>注意</strong></p>\\n<p>你必须要知道的一点是：只有稳定版（stable releases）才能使用在生产环境。如果是被舍弃版本（deprecated）或者是里程碑版本（Milestones）即M版，或者是候选版（Release Candidates）即RC版，并不适合在生产环境中使用，因为它们可能会造成安全隐患或者是功能不完善等问题。</p>\\n</blockquote>\\n<p>目录包含的内容：</p>\\n<blockquote>\\n<p>license-eplv10-aslv20.html</p>\\n<p>这是Jetty的开源许可文件</p>\\n</blockquote>\\n<blockquote>\\n<p>README.txt</p>\\n<p>包含一些快速开始的指南</p>\\n</blockquote>\\n<blockquote>\\n<p>VERSION.txt</p>\\n<p>版本信息</p>\\n</blockquote>\\n<blockquote>\\n<p>bin/</p>\\n<p>帮助Jetty运行的shell程序</p>\\n</blockquote>\\n<blockquote>\\n<p>demo-base/</p>\\n<p>Jetty Base的演示目录</p>\\n</blockquote>\\n<blockquote>\\n<p>etc/</p>\\n<p>Jetty的XML配置文件目录</p>\\n</blockquote>\\n<blockquote>\\n<p>lib/</p>\\n<p>Jetty运行所必须jar包</p>\\n</blockquote>\\n<blockquote>\\n<p>logs/</p>\\n<p>请求日志目录</p>\\n</blockquote>\\n<blockquote>\\n<p>modules/</p>\\n<p>模块定义的目录</p>\\n</blockquote>\\n<blockquote>\\n<p>notice.html</p>\\n<p>开源许可介绍和注意事项</p>\\n</blockquote>\\n<blockquote>\\n<p>resources/</p>\\n<p>包含额外的资源、配置</p>\\n</blockquote>\\n<blockquote>\\n<p>start.ini</p>\\n<p>包含有效的命令行参数的启动文件（模块、配置、xml配置文件）</p>\\n</blockquote>\\n<blockquote>\\n<p>start.jar</p>\\n<p>运行Jetty的jar文件</p>\\n</blockquote>\\n<blockquote>\\n<p>webapps/</p>\\n<p>包含在Jetty默认配置下运行的web项目</p>\\n</blockquote>\\n<h5 id=\\\"家用版\\\">家用版</h5>\\n<blockquote>\\n<p><em>这个我也不知道怎么介绍，官网的意思是说，这个是较小的Jetty版本，适合对Jetty比较熟悉了的高级的Jetty用户使用，下载地址和目录说明我就不写了，大家有能力自己去了解。</em></p>\\n</blockquote>\\n<p><a href=\\\"#top\\\">回到顶部</a></p>\\n<hr>\\n<p><span id=\\\"22运行jetty\\\"></span></p>\\n<h4 id=\\\"22、运行jetty\\\">2.2、运行Jetty</h4>\\n<ul>\\n<li><a href=\\\"#221demo-base\\\">2.2.1、Demo Base</a></li>\\n<li><a href=\\\"#222%E5%88%9B%E5%BB%BAjetty-base\\\">2.2.2、创建Jetty Base</a></li>\\n<li><a href=\\\"#223%E6%9B%B4%E6%94%B9jetty%E7%9A%84%E7%AB%AF%E5%8F%A3%E5%8F%B7\\\">2.2.3、更改Jetty的端口号</a></li>\\n<li><a href=\\\"#224%E4%B8%BAhttps%E5%92%8Chttp2%E6%B7%BB%E5%8A%A0ssl\\\">2.2.4、为HTTPS和HTTP2添加SSL</a></li>\\n<li><a href=\\\"#225%E6%9B%B4%E6%94%B9https%E7%9A%84%E7%AB%AF%E5%8F%A3%E5%8F%B7\\\">2.2.5、更改HTTPS的端口号</a></li>\\n<li><a href=\\\"#226%E8%8E%B7%E5%8F%96%E6%9B%B4%E5%A4%9A%E7%9A%84startjar%E9%80%89%E9%A1%B9\\\">2.2.6、获取更多的start.jar选项</a></li>\\n</ul>\\n<h5 id=\\\"220、一个helloworld：\\\">2.2.0、一个HelloWorld：</h5>\\n<p>你可以使用一下命令来启动Jetty，默认使用8080端口，在这之前你得把Jetty的根目录配置到环境变量中：</p>\\n<pre><code>&gt; cd $JETTY_HOME\\n&gt; java -jar start.jar\\n\\n2015-06-04 10:50:44.806:INFO::main: Logging initialized @334ms\\n2015-06-04 10:50:44.858:WARN:oejs.HomeBaseWarning:main: This instance of Jetty is not running from a separate {jetty.base} directory, this is not recommended.  See documentation at http://www.eclipse.org/jetty/documentation/current/startup.html\\n2015-06-04 10:50:44.995:INFO:oejs.Server:main: jetty-9.3.0.v20150601\\n2015-06-04 10:50:45.012:INFO:oejdp.ScanningAppProvider:main: Deployment monitor [file:///opt/jetty-distribution-9.3.0.v20150601/webapps/] at interval 1\\n2015-06-04 10:50:45.030:INFO:oejs.ServerConnector:main: Started ServerConnector@19dfb72a{HTTP/1.1,[http/1.1]}{0.0.0.0:8080}\\n2015-06-04 10:50:45.030:INFO:oejs.Server:main: Started @558ms\\n</code></pre>\\n<p>然后你可以在浏览器地址栏上输入 <a href=\\\"http://localhost:8080\\\">http://localhost:8080</a> 。当然，当前目录下没有任何有效的web项目，所以你访问任何url都是404页面</p>\\n<p>从警告信息中我们可以看到，它告诉我们，我们的命令并不是执行在<code>{jetty.base}</code>目录中，这样的做法是不被推荐的。</p>\\n<p><a href=\\\"#%E5%88%9B%E5%BB%BAjetty-base\\\">下面</a>会告诉你如何创建Jetty Base目录。</p>\\n<p><span id=\\\"221demo-base\\\"></span></p>\\n<h5 id=\\\"221、demo-base\\\">2.2.1、Demo Base</h5>\\n<p>在标准Jetty目录中，有一个名为<code>demo-base</code>的目录，它演示了不在<code>JETTY_HOME</code>目录下运行Jetty Base项目的推荐做法：</p>\\n<pre><code>&gt; cd $JETTY_HOME/demo-base/\\n&gt; java -jar $JETTY_HOME/start.jar\\n\\n2015-06-04 10:55:24.161:INFO::main: Logging initialized @308ms\\n2015-06-04 10:55:24.431:WARN::main: demo test-realm is deployed. DO NOT USE IN PRODUCTION!\\n2015-06-04 10:55:24.434:INFO:oejs.Server:main: jetty-9.3.0.v20150601\\n2015-06-04 10:55:24.457:INFO:oejdp.ScanningAppProvider:main: Deployment monitor [file:///opt/jetty-distribution-9.3.0.v20150601/demo-base/webapps/] at interval 1\\n2015-06-04 10:55:24.826:INFO:oejsh.ContextHandler:main: Started o.e.j.w.WebAppContext@c038203{/,file:///opt/jetty-distribution-9.3.0.v20150601/demo-base/webapps/ROOT/,AVAILABLE}{/ROOT}\\n2015-06-04 10:55:24.929:WARN::main: test-jaas webapp is deployed. DO NOT USE IN PRODUCTION!\\n2015-06-04 10:55:24.978:INFO:oejsh.ContextHandler:main: Started o.e.j.w.WebAppContext@46238e3f{/test-jaas,file:///tmp/jetty-0.0.0.0-8080-test-jaas.war-_test-jaas-any-9105214562680121772.dir/webapp/,AVAILABLE}{/test-jaas.war}\\n2015-06-04 10:55:25.162:WARN::main: async-rest webapp is deployed. DO NOT USE IN PRODUCTION!\\n2015-06-04 10:55:25.208:INFO:oejsh.ContextHandler:main: Started o.e.j.w.WebAppContext@6b67034{/async-rest,[file:///tmp/jetty-0.0.0.0-8080-async-rest.war-_async-rest-any-1023939491558622183.dir/webapp/, jar:file:///tmp/jetty-0.0.0.0-8080-async-rest.war-_async-rest-any-1023939491558622183.dir/webapp/WEB-INF/lib/example-async-rest-jar-9.3.0.v20150601.jar!/META-INF/resources],AVAILABLE}{/async-rest.war}\\n2015-06-04 10:55:25.311:WARN::main: test-jndi webapp is deployed. DO NOT USE IN PRODUCTION!\\n2015-06-04 10:55:25.386:INFO:oejsh.ContextHandler:main: Started o.e.j.w.WebAppContext@8b96fde{/test-jndi,file:///tmp/jetty-0.0.0.0-8080-test-jndi.war-_test-jndi-any-1692053319754270133.dir/webapp/,AVAILABLE}{/test-jndi.war}\\n2015-06-04 10:55:25.508:WARN::main: test-spec webapp is deployed. DO NOT USE IN PRODUCTION!\\n2015-06-04 10:55:25.594:INFO:oejsh.ContextHandler:main: Started o.e.j.w.WebAppContext@69930714{/test-spec,[file:///tmp/jetty-0.0.0.0-8080-test-spec.war-_test-spec-any-5518740932795802823.dir/webapp/, jar:file:///tmp/jetty-0.0.0.0-8080-test-spec.war-_test-spec-any-5518740932795802823.dir/webapp/WEB-INF/lib/test-web-fragment-9.3.0.v20150601.jar!/META-INF/resources],AVAILABLE}{/test-spec.war}\\n2015-06-04 10:55:25.781:INFO:oejsh.ContextHandler:main: Started o.e.j.w.WebAppContext@3eb7fc54{/proxy,file:///tmp/jetty-0.0.0.0-8080-xref-proxy.war-_xref-proxy-any-3068657547009829038.dir/webapp/,AVAILABLE}{/xref-proxy.war}\\n2015-06-04 10:55:25.786:INFO:oejsh.ContextHandler:main: Started o.e.j.s.h.MovedContextHandler@59662a0b{/oldContextPath,null,AVAILABLE}\\n2015-06-04 10:55:25.951:WARN::main: test webapp is deployed. DO NOT USE IN PRODUCTION!\\n2015-06-04 10:55:26.248:INFO:oejsh.ContextHandler:main: Started o.e.j.w.WebAppContext@4f83df68{/test,file:///tmp/jetty-0.0.0.0-8080-test.war-_test-any-5238659347611323540.dir/webapp/,AVAILABLE}{/test.war}\\n2015-06-04 10:55:26.255:INFO:oejs.ServerConnector:main: Started ServerConnector@5a9c4ad9{HTTP/1.1,[http/1.1]}{0.0.0.0:8080}\\n2015-06-04 10:55:26.259:INFO:oejus.SslContextFactory:main: x509={jetty.eclipse.org=jetty} wild={} alias=null for SslContextFactory@23941fb4(file:///opt/jetty-distribution-9.3.0.v20150601/demo-base/etc/keystore,file:///opt/jetty-distribution-9.3.0.v20150601/demo-base/etc/keystore)\\n2015-06-04 10:55:26.269:INFO:oejs.ServerConnector:main: Started ServerConnector@5d908d47{SSL,[ssl, http/1.1]}{0.0.0.0:8443}\\n2015-06-04 10:55:26.270:INFO:oejs.Server:main: Started @2417ms\\n</code></pre>\\n<p>同样，你可以访问8080网站去查看这个项目。上面部署了一些简单的页面和demo。</p>\\n<p>你还可以使用以下命令，来查看这个demo-base的运行配置：</p>\\n<pre><code>&gt; cd $JETTY_HOME/demo-base/\\n&gt; java -jar $JETTY_HOME/start.jar --list-modules\\n...\\n\\n&gt; java -jar %JETTY_HOME/start.jar --list-config\\n...\\n</code></pre>\\n<p><code>--list-modules</code>命令会返回一张完整的列表，这个列表包含了服务器可用的并且正在使用的模块，它同时还会显示模块所在的目录，以及它们是怎样、用什么命令实现的，当前项目所依赖的模块，以及相关的jar包等。</p>\\n<p><code>--list-config</code>命令会显示一些关于服务器重要信息。包含Java和Jetty和环境变量、配置命令、任何的JVM参数或者系统变量设置、基础服务器配置、全列的Jetty服务器的类路径、被激活使用的JettyXML配置文件。</p>\\n<p><a href=\\\"#top\\\">回到顶部</a>\\n<br></p>\\n<p><span id=\\\"222创建jetty-base\\\"></span></p>\\n<h5 id=\\\"222、创建jetty-base\\\">2.2.2、创建Jetty Base</h5>\\n<p>上述demo-bases目录给我们展示了Jetty的Jetty Base机制。一个Jetty Base目录允许使用单独的配置并且可以在Jetty目录以外的地方建立一个Jetty服务器实例，这样一来可以减小升级带来的代价。Jetty的默认配置是基于以下两个配置项：</p>\\n<p><strong>jetty.home</strong>：用来定义Jetty根目录的位置的配置项，根目录包含：libs、默认模块、默认XML文件（具体的如 start.jar、lib、etc）。\\n<strong>jetty.base</strong>：用来定义一个Jetty服务器的特殊实现，这个目录同时包含：它的配置文件、日志文件、web项目（具体如 start.d/*.ini文件，logs、webapps）。</p>\\n<blockquote>\\n<p><strong>注意</strong></p>\\n<p>你必须认真对待JettyHome目录和保持它不变。如果你需要变动一些目录或者配置，你应该在JettyBase目录中进行。</p>\\n</blockquote>\\n<p><code>jetty.home</code>和<code>jetty.base</code>可以使用命令行去显示的配置，或者它们可以从环境变量中判断该使用什么配置，你可以这样写命令：</p>\\n<pre><code>&gt; cd $JETTY_BASE\\n&gt; java -jar $JETTY_HOME/start.jar\\n</code></pre>\\n<p>下面的命令会创建一个base目录，这个目录支持HTTP连接和web项目的部署模块，然后把demo项目复制到我们创建的这个目录下部署：</p>\\n<pre><code>&gt; JETTY_BASE=/tmp/mybase\\n&gt; mkdir $JETTY_BASE\\n&gt; cd $JETTY_BASE\\n&gt; java -jar $JETTY_HOME/start.jar\\n\\nWARNING: Nothing to start, exiting ...\\n\\nUsage: java -jar start.jar [options] [properties] [configs]\\n       java -jar start.jar --help  # for more information\\n\\n&gt; java -jar $JETTY_HOME/start.jar --create-startd\\nINFO : Base directory was modified\\n&gt; java -jar $JETTY_HOME/start.jar --add-to-start=http,deploy\\n\\nINFO: server          initialised (transitively) in ${jetty.base}/start.d/server.ini\\nINFO: http            initialised in ${jetty.base}/start.d/http.ini\\nINFO: security        initialised (transitively) in ${jetty.base}/start.d/security.ini\\nINFO: servlet         initialised (transitively) in ${jetty.base}/start.d/servlet.ini\\nINFO: webapp          initialised (transitively) in ${jetty.base}/start.d/webapp.ini\\nINFO: deploy          initialised in ${jetty.base}/start.d/deploy.ini\\nMKDIR: ${jetty.base}/webapps\\nINFO: Base directory was modified\\n\\n&gt; cp $JETTY_HOME/demo-base/webapps/async-rest.war webapps/ROOT.war\\n&gt; java -jar $JETTY_HOME/start.jar\\n\\n2015-06-04 11:10:16.286:INFO::main: Logging initialized @274ms\\n2015-06-04 11:10:16.440:INFO:oejs.Server:main: jetty-9.3.0.v20150601\\n2015-06-04 11:10:16.460:INFO:oejdp.ScanningAppProvider:main: Deployment monitor [file:///tmp/mybase/webapps/] at interval 1\\n2015-06-04 11:10:16.581:WARN::main: async-rest webapp is deployed. DO NOT USE IN PRODUCTION!\\n2015-06-04 11:10:16.589:INFO:oejw.StandardDescriptorProcessor:main: NO JSP Support for /, did not find org.eclipse.jetty.jsp.JettyJspServlet\\n2015-06-04 11:10:16.628:INFO:oejsh.ContextHandler:main: Started o.e.j.w.WebAppContext@1a407d53{/,[file:///tmp/jetty-0.0.0.0-8080-ROOT.war-_-any-4510228025526425427.dir/webapp/, jar:file:///tmp/jetty-0.0.0.0-8080-ROOT.war-_-any-4510228025526425427.dir/webapp/WEB-INF/lib/example-async-rest-jar-9.3.0.v20150601.jar!/META-INF/resources],AVAILABLE}{/ROOT.war}\\n2015-06-04 11:10:16.645:INFO:oejs.ServerConnector:main: Started ServerConnector@3abbfa04{HTTP/1.1,[http/1.1]}{0.0.0.0:8080}\\n2015-06-04 11:10:16.646:INFO:oejs.Server:main: Started @634ms\\n</code></pre>\\n<br>\\n\\n<blockquote>\\n<p><em>译者文外补充：第一行命令是在当前运行时环境变量中添加一条环境变量，把<code>JETTY_BASE</code>目录指定为<code>/tmp/mybase</code>，第二行创建这个目录，第三行是进入到这个目录，第四行是尝试运行这个目录，但是提示失败因为目录里啥也没有。然后使用<code>--create-startd</code>命令和<code>--add-to-start=http,deploy</code>命令去初始化和添加HTTP连接和Web部署模块，然后把之前demo-base目录中的一个war包复制过来，最后启动项目</em></p>\\n</blockquote>\\n<p><a href=\\\"#top\\\">回到顶部</a>\\n<br></p>\\n<p><span id=\\\"223更改jetty的端口号\\\"></span></p>\\n<h5 id=\\\"223、更改jetty的端口号\\\">2.2.3、更改Jetty的端口号</h5>\\n<pre><code>&gt; cd $JETTY_BASE\\n&gt; java -jar $JETTY_HOME/start.jar jetty.http.port=8081\\n...\\n</code></pre>\\n<p>当项目运行的时候，就会在8081端口中运行，你需要注意的是，使用命令行配置只对当次的JettyBase中的web项目有效，如果你想永久地改变当前JettyBase的web项目运行的端口号，你可以修改start.d目录中http.ini文件的配置。</p>\\n<blockquote>\\n<p><em>译者文外补充：前提是你为这个JettyBase添加了HTTP连接模块</em></p>\\n</blockquote>\\n<blockquote>\\n<p><strong>NOTE：</strong></p>\\n<p>配置通过以下的链来生效：</p>\\n<ul>\\n<li><p><code>start.d/http.ini</code>文件是有效执行的命令行的一部分，它还包含了<code>--modules-http</code>参数，这个参数会激活http模块。</p>\\n</li>\\n<li><p><code>modules/http.mod</code>文件定义了http模块，这个模块规定了它所使用的etc/jetty-http.xml配置文件和template.ini文件。</p>\\n</li>\\n<li><p><code>jetty.http.port</code>这个配置是被在<code>etc/jetty.http.xml</code>文件中的<code>PropertyXML</code>对象把端口设置注入到<code>ServerConnector</code>实例中去的。</p>\\n</li>\\n</ul>\\n<p>你可以在后面的章节中学到配置的更详细的说明。</p>\\n</blockquote>\\n<p><a href=\\\"#top\\\">回到顶部</a>\\n<br></p>\\n<p><span id=\\\"224为https和http2添加ssl\\\"></span></p>\\n<h5 id=\\\"224、为https和http2添加ssl\\\">2.2.4、为HTTPS和HTTP2添加SSL</h5>\\n<p>在上面的栗子中，我们可以为服务器激活附加的HTTPS模块和HTTP2模块。你可以使用以下命令添加：</p>\\n<pre><code>&gt; java -jar $JETTY_HOME/start.jar --add-to-start=https,http2\\n\\nALERT: There are enabled module(s) with licenses.\\nThe following 1 module(s):\\n + contains software not provided by the Eclipse Foundation!\\n + contains software not covered by the Eclipse Public License!\\n + has not been audited for compliance with its license\\n\\n Module: alpn-impl/alpn-8\\n  + ALPN is a hosted at github under the GPL v2 with ClassPath Exception.\\n  + ALPN replaces/modifies OpenJDK classes in the sun.security.ssl package.\\n  + http://github.com/jetty-project/jetty-alpn\\n  + http://openjdk.java.net/legal/gplv2+ce.html\\n\\nProceed (y/N)? y\\nINFO  : alpn-impl/alpn-1.8.0_92 dynamic dependency of alpn-impl/alpn-8\\nINFO  : alpn            transitively enabled, ini template available with --add-to-start=alpn\\nINFO  : alpn-impl/alpn-8 dynamic dependency of alpn\\nINFO  : http2           initialized in ${jetty.base}/start.d/http2.ini\\nINFO  : https           initialized in ${jetty.base}/start.d/https.ini\\nINFO  : ssl             transitively enabled, ini template available with --add-to-start=ssl\\nMKDIR : ${jetty.base}/lib/alpn\\nDOWNLD: http://central.maven.org/maven2/org/mortbay/jetty/alpn/alpn-boot/8.1.8.v20160420/alpn-boot-8.1.8.v20160420.jar to ${jetty.base}/lib/alpn/alpn-boot-8.1.8.v20160420.jar\\nMKDIR : ${jetty.base}/etc\\nCOPY  : ${jetty.home}/modules/ssl/keystore to ${jetty.base}/etc/keystore\\nINFO  : Base directory was modified\\n\\n&gt; java -jar $JETTY_HOME/start.jar\\n[...]\\n2017-05-22 12:48:23.271:INFO:oejs.AbstractConnector:main: Started ServerConnector@134d0064{SSL,[ssl, alpn, h2, http/1.1]}{0.0.0.0:8443}\\n[...]\\n</code></pre>\\n<p><code>--add-to-start</code>为ini文件添加了一行有效的命令行命令，它可以运行一个支持HTTPS和HTTP2的SSL连接，下面是过程参照：</p>\\n<ul>\\n<li><p>过渡性地激活SSL模块，这会在<code>etc/jetty-ssl.xml</code>和<code>etc/jetty-ssl-context.xml</code>文件中添加有效的命令行，这样就给服务器配置好了SSL连接。</p>\\n</li>\\n<li><p>过渡性地激活APLN模块，这会在<code>etc/jetty-alpn.xml</code>文件中添加有效的命令行，这样就为SSL连接配置好了应用层协议。</p>\\n</li>\\n<li><p>在<code>etc/jetty-https.xml</code>文件中添加有效的命令行，这会创建<code>start.d/https.ini</code>，这样就为SSL连接配置上了HTTPS协议。</p>\\n</li>\\n<li><p>在<code>etc/jetty-http2.xml</code>文件中添加有效的命令行，这会创建<code>start.d/http2.ini</code>，这样就为SSL连接配置上了HTTP/2协议。</p>\\n</li>\\n<li><p>检查是否存在<code>etc/keystore</code>文件，如果不存在，就联网下载一个示范用的keystore文件。</p>\\n</li>\\n</ul>\\n<p><a href=\\\"#top\\\">回到顶部</a>\\n<br></p>\\n<p><span id=\\\"225更改https的端口号\\\"></span></p>\\n<h5 id=\\\"225、更改https的端口号\\\">2.2.5、更改HTTPS的端口号</h5>\\n<p>你可以通过命令：</p>\\n<pre><code>&gt; cd $JETTY_BASE\\n&gt; java -jar $JETTY_HOME/start.jar jetty.ssl.port=8444\\n</code></pre>\\n<p>除此之外，你还可以在<code>start.ini</code>或者<code>start.d/*.ini</code>中设置有效的命令行去修改ssl端口号，你可以在“<a href=\\\"\\\">Start.ini vs Start.d</a>”中了解到更多。</p>\\n<p><a href=\\\"#top\\\">回到顶部</a>\\n<br></p>\\n<p><span id=\\\"226获取更多的startjar选项\\\"></span></p>\\n<h5 id=\\\"226、获取更多的startjar选项\\\">2.2.6、获取更多的start.jar选项</h5>\\n<p><code>start.jar</code>的工作有：</p>\\n<ul>\\n<li><p>解释start.ini和start.d目录下的配置文件的命令行来建立Java类路径环境。</p>\\n</li>\\n<li><p>罗列出所有配置和配置文件并通过JettyXML配置机制的主类去加载到环境中。</p>\\n</li>\\n</ul>\\n<blockquote>\\n<p><em>原文这两段话如下：</em> The job of the start.jar is to interpret the command line, start.ini and start.d directory (and associated .ini files) to build a Java classpath and list of properties and configuration files to pass to the main class of the Jetty XML configuration mechanism.</p>\\n</blockquote>\\n<p>你可以通过以下命令行去获取更多的选项：</p>\\n<pre><code>&gt; java -jar $JETTY_HOME/start.jar --help\\n</code></pre>\\n<p><a href=\\\"#top\\\">回到顶部</a></p>\\n<hr>\\n<p><span id=\\\"23部署web应用\\\"></span></p>\\n<h4 id=\\\"23、部署web应用\\\">2.3、部署Web应用</h4>\\n<p>一个配置了deploy模块的Jetty服务器实例（即一个JettyBase）会有一个web应用部署器在webapps目录，它支持对web应用的热部署。按照下面的协定方式把标准的WAR文件和Jetty配置文件放置在webapps目录下你就可以在服务器上实现热部署了。</p>\\n<ul>\\n<li><p>一个名为<code>example/</code>的目录作为将要被部署的Web应用，它需要包含<code>WEB-INF</code>子目录，不然这个应用就会被当作静态内容。一般的情况下路由路径会是<code>http://localhost:8080/example/</code>，除非你的目录名为<code>ROOT</code>，这样你的路径就会是<code>http://localhost:8080/</code>。如果目录名以.d结尾，那么它将被忽略（它可以作为额外的配置文件的放置目录使用）</p>\\n</li>\\n<li><p>一个名为<code>example.war</code>的文件会作为标准web应用被部署，路径如上，如果名为<code>ROOT.war</code>路径也如上。如果<code>example.war</code>和<code>example/</code>同时存在，则会部署war文件（就会部署war中未解压的wab项目）。</p>\\n</li>\\n<li><p>一个example.xml文件，会被配置为上下文环境（context）。文件中必须设置上下文环境的路径（context path）。如果xml文件和war文件同时存在，则会部署xml文件对应的web项目（就会部署里面配置的war文件）。</p>\\n</li>\\n</ul>\\n<p>在demo-base/wabapps中示例了多种目录以及多种部署方式。</p>\\n<p><a href=\\\"#top\\\">回到顶部</a></p>\\n<hr>\\n<p><span id=\\\"3关于jetty-configuration的介绍\\\"></span></p>\\n<h3 id=\\\"3、关于jetty-configuration的介绍\\\">3、关于Jetty Configuration的介绍</h3>\\n<ul>\\n<li>3.1、<a href=\\\"#31%E5%A6%82%E4%BD%95%E9%85%8D%E7%BD%AEjetty\\\">如何配置Jetty</a></li>\\n<li>3.2、<a href=\\\"#32%E5%8F%AF%E4%BB%A5%E5%9C%A8jetty%E9%87%8C%E9%9D%A2%E9%85%8D%E7%BD%AE%E4%BB%80%E4%B9%88\\\">可以在Jetty里面配置什么</a></li>\\n</ul>\\n<h4 id=\\\"31、如何配置jetty\\\">3.1、如何配置Jetty</h4>\\n<ul>\\n<li><a href=\\\"#311%E4%BD%BF%E7%94%A8pojo%E7%9A%84%E6%96%B9%E6%B3%95%E9%85%8D%E7%BD%AE\\\">3.1.1、使用POJO的方法配置</a></li>\\n<li><a href=\\\"#312%E4%BD%BF%E7%94%A8start%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E9%85%8D%E7%BD%AE\\\">3.1.2、使用Start配置文件配置</a></li>\\n<li><a href=\\\"#313%E5%85%B6%E4%BB%96%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6\\\">3.1.3、其他配置文件</a></li>\\n<li><a href=\\\"#314jetty%E7%9A%84ioc-xml%E7%9A%84%E5%BD%A2%E5%BC%8F%E9%85%8D%E7%BD%AE\\\">3.1.4、Jetty的IoC XML的形式配置</a></li>\\n</ul>\\n<p><span id=\\\"311使用pojo的方法配置\\\"></span></p>\\n<h5 id=\\\"311、使用pojo的方法配置\\\">3.1.1、使用POJO的方法配置</h5>\\n<p>Jetty的核心组件就是POJO，配置的过程就是实例化的POJO、给POJO装配属性的过程。你可以通过以下的方法实现：</p>\\n<ul>\\n<li><p>在嵌入式开发中，把Jetty对象写在Java代码里。</p>\\n</li>\\n<li><p>使用JettyXML配置机制，这是一种实现了IoC机制的框架，会把配置好的XML对象作为Jetty对象装配好。<code>etc/jetty.xml</code>文件是主要的JettyXML配置文件，但是在Jetty目录中也有许多其他的类似<code>etc/jetty-__feature__.xml</code>文件。</p>\\n</li>\\n<li><p>使用第三方的IoC框架，比如Spring，来实例化Jetty成JavaBean。</p>\\n</li>\\n</ul>\\n<p> 因为Jetty的主要配置是通过IoC来完成的，所以你可以在“<a href=\\\"\\\">Jetty API 文档</a>”中参考最终的完整的配置。</p>\\n<p> <a href=\\\"#top\\\">回到顶部</a>\\n <br></p>\\n<p><span id=\\\"312使用start配置文件配置\\\"></span></p>\\n<h5 id=\\\"312、使用start配置文件配置\\\">3.1.2、使用Start配置文件配置</h5>\\n<p>Jetty使用以下的配置文件去实例化，通过start.jar机制去注入和启动服务器。</p>\\n<ul>\\n<li><strong>ini文件：</strong>\\nJetty的启动机制是使用命令行来完成的，<code>$JETTY_BASE/start.ini</code>或者是<code>$JETTY_BASE/start.d/*.ini</code>文件写好了有效的命令行参数来启动Jetty，这些参数可能是：<ul>\\n<li><blockquote>\\n<p>模块的激活：<code>--modules=name</code></p>\\n</blockquote>\\n</li>\\n<li><blockquote>\\n<p>配置参数：<code>name=value</code>可以在JettyIoC中使用</p>\\n</blockquote>\\n</li>\\n<li><blockquote>\\n<p>在JettyXML中或者Spring中的XML文件</p>\\n</blockquote>\\n</li>\\n<li><blockquote>\\n<p>标准的Java配置文件</p>\\n</blockquote>\\n</li>\\n<li><blockquote>\\n<p>其他<code>start.jar</code>的配置选项（详见 java -jar start.jar --help）</p>\\n</blockquote>\\n</li>\\n<li><blockquote>\\n<p>一些JVM的选项\\n<strong>NOTE：</strong></p>\\n<p>只有在JettyBase目录（如果JettyBase目录不是JettyHome目录）下的ini文件，才能特别的更改配置。</p>\\n<p><em>文档原文：It is the ini files located in the Jetty base directory (if different from Jetty home) that are typically edited to change the configuration (e.g. change ports).</em></p>\\n</blockquote>\\n</li>\\n</ul>\\n</li>\\n</ul>\\n<p><a href=\\\"#top\\\">回到顶部</a>\\n<br></p>\\n<ul>\\n<li><strong>mod文件：</strong>\\n<code>$JETTY_HOME/modules/*.mod</code>文件定义了可使用的模块，你可以用<code>--modules=name</code>配置去激活它们。每一个mod都定义了：<ul>\\n<li><blockquote>\\n<p>模块依赖的命令和激活指令</p>\\n</blockquote>\\n</li>\\n<li><blockquote>\\n<p>模块需要添加到类路径中的库文件</p>\\n</blockquote>\\n</li>\\n<li><blockquote>\\n<p>模块需要加载到有效启动命令行的XML文件</p>\\n</blockquote>\\n</li>\\n<li><blockquote>\\n<p>模块启动所需要的必要文件</p>\\n</blockquote>\\n</li>\\n<li><blockquote>\\n<p>模板ini文件的内容，你可以使用<code>--add-to-start=name</code>命令选项添加ini文件到你的JettyBase/start.d/目录中</p>\\n</blockquote>\\n<p>我们提供的module文件尽量不要编辑，除非是在一些重要的构建变更的时候。mod文件通常被默认放置在<code>$JETTY_HOME/modules/</code>目录下，但是你可以在<code>$JETTY_BASE/modules/</code>中添加额外的mod配置文件。如果需要改变模块，你最好从<code>$JETTY_HOME/modules/</code>目录中复制特定的mod文件到<code>$JETTY_BASE/modules/</code>中去，然后再对其进行修改。</p>\\n</li>\\n</ul>\\n</li>\\n</ul>\\n<br>\\n\\n<ul>\\n<li><strong>XML文件：</strong>\\n在<a href=\\\"\\\">Jetty IoC XML形式</a>或者Spring IoC形式中的XML文件。\\n后面的我就不翻译了，有需要的自己看，就一段话，并没有说明如何配置。<blockquote>\\n<p><em>文档原文：</em>\\nXML files in Jetty IoC XML format or Spring IoC format are listed either on the command line, in ini files, or are added to the effective command line by a module definition.</p>\\n<p>The XML files instantiate and inject the actual Java objects that comprise the server, connectors and contexts. Because Jetty IoC XML files use properties, most common configuration tasks can be accomplished without editing these XML files and can instead be achieved by editing the property in the corresponding ini files.</p>\\n<p>XML files are normally located in <code>$JETTY_HOME/etc/</code>, but extra or edited XML files may be added to <code>$JETTY_BASE/etc/</code>. Note If XML configuration changes are required, it is best practice to copy the XML file from <code>$JETTY_HOME/etc/</code> to <code>$JETTY_BASE/etc/</code> before being modified.</p>\\n</blockquote>\\n</li>\\n</ul>\\n<p>下图描述了Jetty的各种各样的配置文件是如何联系起来的：</p>\\n<p><img src=\\\"https://github.com/youyinnn/JettyDocTranslation/raw/master/doc/img/Jetty_Configuration_File_Relationships.png\\\" alt=\\\"Jetty_Configuration_File_Relationships\\\"></p>\\n<p><a href=\\\"#top\\\">回到顶部</a>\\n<br></p>\\n<p><span id=\\\"313其他配置文件\\\"></span></p>\\n<h5 id=\\\"313、其他的配置文件\\\">3.1.3、其他的配置文件</h5>\\n<ul>\\n<li><strong>Context XML文件</strong></li>\\n<li><strong>web.xml文件</strong></li>\\n<li><strong>properties文件</strong></li>\\n</ul>\\n<p>关于这三种配置文件的介绍内容就不再翻译，有需要的同学可以去<a href=\\\"http://www.eclipse.org/jetty/documentation/9.4.6.v20170531/quick-start-configure.html#quickstart-config-how\\\">原文</a>学习。</p>\\n<p><a href=\\\"#top\\\">回到顶部</a>\\n<br></p>\\n<p><span id=\\\"314jetty的ioc-xml的形式配置\\\"></span></p>\\n<h5 id=\\\"314、jetty的ioc-xml的形式配置\\\">3.1.4、Jetty的IoC XML的形式配置</h5>\\n<p>你可以在Java代码里面启动服务器：</p>\\n<pre><code>package org.eclipse.jetty.embedded;\\n\\nimport org.eclipse.jetty.server.Connector;\\nimport org.eclipse.jetty.server.Handler;\\nimport org.eclipse.jetty.server.Server;\\nimport org.eclipse.jetty.server.ServerConnector;\\nimport org.eclipse.jetty.server.handler.DefaultHandler;\\nimport org.eclipse.jetty.server.handler.HandlerCollection;\\nimport org.eclipse.jetty.servlet.ServletContextHandler;\\n\\npublic class ExampleServer\\n{\\n    public static void main( String[] args ) throws Exception\\n    {\\n        Server server = new Server();\\n\\n        ServerConnector connector = new ServerConnector(server);\\n        connector.setPort(8080);\\n        server.setConnectors(new Connector[] { connector });\\n\\n        ServletContextHandler context = new ServletContextHandler();\\n        context.setContextPath(&quot;/&quot;);\\n        context.addServlet(HelloServlet.class, &quot;/hello&quot;);\\n        context.addServlet(AsyncEchoServlet.class, &quot;/echo/*&quot;);\\n\\n        HandlerCollection handlers = new HandlerCollection();\\n        handlers.setHandlers(new Handler[] { context, new DefaultHandler() });\\n        server.setHandler(handlers);\\n\\n        server.start();\\n        server.join();\\n    }\\n}\\n</code></pre>\\n<p>你也可以使用Jetty IoC XML的形式去配置一个一模一样的服务器，完全不用写任何代码：</p>\\n<pre><code>&lt;?xml version=&quot;1.0&quot;?&gt;\\n&lt;!DOCTYPE Configure PUBLIC &quot;-//Jetty//Configure//EN&quot; &quot;http://www.eclipse.org/jetty/configure_9_3.dtd&quot;&gt;\\n\\n&lt;Configure id=&quot;ExampleServer&quot; class=&quot;org.eclipse.jetty.server.Server&quot;&gt;\\n\\n  &lt;Set name=&quot;connectors&quot;&gt;\\n    &lt;Array type=&quot;org.eclipse.jetty.server.Connector&quot;&gt;\\n      &lt;Item&gt;\\n        &lt;New class=&quot;org.eclipse.jetty.server.ServerConnector&quot;&gt;\\n          &lt;Arg&gt;&lt;Ref refid=&quot;ExampleServer&quot;/&gt;&lt;/Arg&gt;\\n          &lt;Set name=&quot;port&quot;&gt;8080&lt;/Set&gt;\\n        &lt;/New&gt;\\n      &lt;/Item&gt;\\n    &lt;/Array&gt;\\n  &lt;/Set&gt;\\n\\n  &lt;New id=&quot;context&quot; class=&quot;org.eclipse.jetty.servlet.ServletContextHandler&quot;&gt;\\n    &lt;Set name=&quot;contextPath&quot;&gt;/hello&lt;/Set&gt;\\n    &lt;Call name=&quot;addServlet&quot;&gt;\\n      &lt;Arg&gt;org.eclipse.jetty.embedded.HelloServlet&lt;/Arg&gt;\\n      &lt;Arg&gt;/&lt;/Arg&gt;\\n    &lt;/Call&gt;\\n  &lt;/New&gt;\\n\\n  &lt;Set name=&quot;handler&quot;&gt;\\n    &lt;New class=&quot;org.eclipse.jetty.server.handler.HandlerCollection&quot;&gt;\\n      &lt;Set name=&quot;handlers&quot;&gt;\\n        &lt;Array type=&quot;org.eclipse.jetty.server.Handler&quot;&gt;\\n          &lt;Item&gt;\\n            &lt;Ref refid=&quot;context&quot; /&gt;\\n          &lt;/Item&gt;\\n          &lt;Item&gt;\\n            &lt;New class=&quot;org.eclipse.jetty.server.handler.DefaultHandler&quot; /&gt;\\n          &lt;/Item&gt;\\n        &lt;/Array&gt;\\n      &lt;/Set&gt;\\n    &lt;/New&gt;\\n  &lt;/Set&gt;\\n&lt;/Configure&gt;\\n</code></pre>\\n<br>\\n\\n<blockquote>\\n<p><em>译者文外补充：JettyIOC的注入方式的使用非常蠢，不建议使用。</em></p>\\n</blockquote>\\n<p><a href=\\\"#top\\\">回到顶部</a></p>\\n<hr>\\n<p><span id=\\\"32可以在jetty里面配置什么\\\"></span></p>\\n<h4 id=\\\"32、可以在jetty里面配置什么\\\">3.2、可以在Jetty里面配置什么</h4>\\n<ul>\\n<li><a href=\\\"#321%E9%85%8D%E7%BD%AEserver\\\">配置Server</a></li>\\n<li><a href=\\\"#322%E9%85%8D%E7%BD%AEconnectors\\\">配置Connectors</a></li>\\n<li><a href=\\\"#323%E9%85%8D%E7%BD%AEcontexts\\\">配置Contexts</a></li>\\n</ul>\\n<p>这一部分会给出一些之前的章节没有介绍过的配置机制的概述。在整个文档的最后一部分中的“<a href=\\\"\\\">Jetty Architecture</a>”章节会为你解释Jetty服务器的整体架构，这对于你了解Jetty的运行机制会非常有帮助，如果你还想修改Jetty默认的架构的话，你可以得到一些非常重要的指导。当然，Jetty的默认架构已经满足绝大部分的需求了。</p>\\n<p><span id=\\\"321配置server\\\"></span></p>\\n<h5 id=\\\"321、配置server\\\">3.2.1、配置Server</h5>\\n<p>Server实例是Jetty服务器的中央协调对象（central coordination object），它提供了所有Jetty服务器组件所需要的服务以及生命周期的管理。在标准的Jetty发行版里面，核心的server服务的配置是在<code>etc/jetty.xml</code>文件中，但是你可以混合其他的服务器配置，可配置内容如下：</p>\\n<blockquote>\\n<p>ThreadPool</p>\\n<p>Handlers</p>\\n<p>Server Attributes</p>\\n<p>Server fields</p>\\n<p>Connectors</p>\\n<p>Services</p>\\n</blockquote>\\n<p><a href=\\\"#top\\\">回到顶部</a>\\n<br></p>\\n<p><span id=\\\"322配置connectors\\\"></span></p>\\n<h5 id=\\\"322、配置connectors\\\">3.2.2、配置Connectors</h5>\\n<p>Jetty服务器连接器是一个网络端点接受连接一个或多个协议产生Jetty服务器的请求或消息。在标准Jetty服务器中，可以通过额外的文件增加Jetty服务器支持的协议，例如http.ini，https.ini 和jetty-http2.xml，连接的配置一般都是典型的，如下：</p>\\n<blockquote>\\n<p>Port</p>\\n<p>Host</p>\\n<p>Idle Timeout</p>\\n<p>HTTP Configuration</p>\\n<p>SSL Context Factory</p>\\n</blockquote>\\n<p><a href=\\\"#top\\\">回到顶部</a>\\n<br></p>\\n<p><span id=\\\"323配置contexts\\\"></span></p>\\n<h5 id=\\\"323、配置contexts\\\">3.2.3、配置Contexts</h5>\\n<p>常见的Context配置：</p>\\n<blockquote>\\n<p>contextPath</p>\\n<p>virtualHost</p>\\n<p>classPath</p>\\n<p>attributes</p>\\n<p>resourceBase</p>\\n</blockquote>\\n<p>你可以通过API去配置Context：</p>\\n<pre><code>package org.eclipse.jetty.embedded;\\n\\nimport org.eclipse.jetty.server.Server;\\nimport org.eclipse.jetty.server.handler.ContextHandler;\\n\\npublic class OneContext\\n{\\n    public static void main( String[] args ) throws Exception\\n    {\\n        Server server = new Server( 8080 );\\n\\n        // Add a single handler on context &quot;/hello&quot;\\n        ContextHandler context = new ContextHandler();\\n        context.setContextPath( &quot;/hello&quot; );\\n        context.setHandler( new HelloHandler() );\\n\\n        // Can be accessed using http://localhost:8080/hello\\n\\n        server.setHandler( context );\\n\\n        // Start the server\\n        server.start();\\n        server.join();\\n    }\\n}\\n</code></pre>\\n<br>\\n\\n<blockquote>\\n<p><em>译者文外补充：</em></p>\\n<p>后面还有使用JettyIoC去配置的示例代码我也不贴了。</p>\\n<p>这三种配置我并没有翻译在哪里配置以及每个配置项的具体含义，有需要的可以自己查看原文去配置，原文是有的。</p>\\n<p>后面还有一些关于web的配置介绍、ContextPath的配置介绍、Web应用的部署规则、认证Realm的设置等等，我感觉都不是什么有用的干活，也就不再翻译下去了。</p>\\n</blockquote>\\n<p><a href=\\\"#top\\\">回到顶部</a></p>\\n<hr>\\n\";","export default \"<h3 id=\\\"hotspot-虚拟机对象内存\\\">HotSpot 虚拟机对象内存</h3>\\n<p>深入讨论 HotSpot 虚拟机在 Java 堆中的对象分配、内存布局和对象访问的过程</p>\\n<h4 id=\\\"对象创建流程\\\">对象创建流程</h4>\\n<h5 id=\\\"过程\\\">过程</h5>\\n<ol>\\n<li><p><strong>加载类</strong></p>\\n<p>当虚拟机遇到一个<strong>new 指令</strong>的时候，就会检查指令参数是否能在常量池中定位到一个类的符号引用，并坚持这个符号代表的类是否已经被加载、解析和初始化过，如果没有，则需要必须进行类加载过程</p>\\n<p>在类加载的过程完成后，<strong>对象所需的内存大小已经完全可以确定</strong></p>\\n</li>\\n<li><p><strong>选择内存分配算法</strong></p>\\n</li>\\n</ol>\\n<ul>\\n<li><p><strong>指针碰撞（Bump the Pointer）</strong></p>\\n<p>假设<strong>Java 堆的内存是绝对规整</strong>，即所有<strong>用过的内存放一边</strong>，<strong>空闲的内存放另一边</strong>，中间有一个指针作为<strong>分界点</strong>，此时对象内存分配仅是把指针向<strong>空闲方向</strong>挪动<strong>一个对象内存的距离</strong></p>\\n</li>\\n<li><p><strong>空闲列表（Free List）</strong></p>\\n<p>假设<strong>Java 堆内存并不是规整的</strong>，即已使用的内存和未使用的内存<strong>互相交错</strong>，虚拟机就必须维护一个<strong>列表</strong>，这个列表记录着哪些内存块是<strong>可用的</strong>，在分配的时候就在列表中找到一块<strong>足够大的空间</strong>划分给对象实例，并更新列表记录</p>\\n<p>因此我们选择内存分配算法的根据就是：<strong>Java 堆内存的划分是否规整</strong></p>\\n</li>\\n</ul>\\n<ol>\\n<li><p><strong>选择内存分配并发问题的解决方案</strong></p>\\n<p><img src=\\\"../../../public/img/objectmemorypointer.png\\\" alt=\\\"objectmemorypointer\\\"></p>\\n<p>如图的并发指针分配问题，我们解决这个问题有两种方式：</p>\\n<ol>\\n<li>对<strong>内存分配的动作</strong>进行<strong>同步</strong>处理</li>\\n<li>把<strong>内存分配的动作</strong>按照线程划分<strong>在不同的空间中进行</strong>，即每个线程在 Java 堆中预先分配一小块内存，这样的内存成为<strong>本地线程分配缓冲（Thread Local Allocation Buffer，TLAB）</strong>，哪个线程需要分配内存，就在哪个线程的<strong>TLAB</strong>上分配，只有当<strong>TLAB</strong>用完并分配新的<strong>TLAB</strong>的时候，再进行同步锁定</li>\\n</ol>\\n</li>\\n<li><p><strong>设置对象基本信息</strong></p>\\n<ol>\\n<li><p><strong>对象头（Object Header）</strong>信息的设置</p>\\n</li>\\n<li><p><strong>执行<code>init</code>方法</strong></p>\\n<p>在此之前，对于 JVM 来说，对象已经产生了，但是对象的字段还都是 0，对于 Java 程序来说，执行完<strong>new 指令</strong>之后还得执行**<code>init</code>方法**，初始化对象数据</p>\\n</li>\\n</ol>\\n</li>\\n</ol>\\n<h4 id=\\\"对象内存布局\\\">对象内存布局</h4>\\n<h5 id=\\\"划分\\\">划分</h5>\\n<ul>\\n<li>对象头（Header）</li>\\n<li>实例数据（Instance Data）</li>\\n<li>对齐填充（Padding）</li>\\n</ul>\\n<h5 id=\\\"1-对象头（header）\\\">1. 对象头（Header）</h5>\\n<p>HotSpot 的对象头分为两部分信息：</p>\\n<ul>\\n<li><p>第一部分：<strong>Mark Word</strong></p>\\n<p>用于存储对象自身的<strong>运行时数据</strong>如哈希码、GC 分代年龄、锁状态标志、线程持有的锁、偏向线程 ID、偏向时间戳</p>\\n</li>\\n<li><p>第二部分：<strong>类型指针</strong></p>\\n<p>虚拟机通过这个指针来<strong>确定对象是哪个类的实例</strong>，<strong>但是</strong>并不是所有的虚拟机实现都必须在对象数据上保留类型指针，也就是查找对象所属类的元数据信息并不一定要经过类本身</p>\\n</li>\\n<li><p>第三部分：<strong>数组长度数据</strong></p>\\n<p>如果对象是一个<strong>数组</strong>，则对象头还需要用一块内存来记录数组长度数据</p>\\n</li>\\n</ul>\\n<h5 id=\\\"2-实例数据（instance-data）\\\">2. 实例数据（Instance Data）</h5>\\n<p>这一部分是对象真正存储的<strong>有效信息</strong>，也是在程序代码中锁定义的各种类型的字段内容，包括继承下来的信息</p>\\n<h5 id=\\\"3-对齐填充（padding）\\\">3. 对齐填充（Padding）</h5>\\n<p>这部分不是必然的实现，也没有特殊含义，但是由于 HotSpot VM 的自动内存管理系统要求<strong>对象起始地址必须是 8 字节的整倍数</strong>，一个对象内存分配完之后，并不一定占 8 字节的整倍数空间，所以填充一些空间以补齐 8 字节整倍数，保证下一个对象内存分配的起始位置是 8 字节整倍数</p>\\n<h4 id=\\\"对象访问定位\\\">对象访问定位</h4>\\n<p><strong>Java 程序通过虚拟机栈上的 reference 数据来操作堆上的具体对象（重点）</strong></p>\\n<p>JVM 规范<strong>只说了 reference 是一个指向对象的引用，但是没有说怎么引用</strong>，所以对象访问方式还是取决于虚拟机的实现，主流的实现有<strong>句柄访问</strong>和<strong>直接指针访问</strong>两种</p>\\n<h5 id=\\\"句柄访问\\\">句柄访问</h5>\\n<p>如果使用这种方式，Java 堆中会划分一块内存来作为<strong>句柄池</strong>，<strong>reference</strong>中存储的就是对象的<strong>句柄地址</strong>，句柄中包含了<strong>对象实例数据地址信息</strong>和<strong>类型实例数据地址信息</strong></p>\\n<p><img src=\\\"../../../public/img/jubingdangwen.png\\\" alt=\\\"jubingdangwen\\\"></p>\\n<h5 id=\\\"直接指针访问\\\">直接指针访问</h5>\\n<p>reference 中存储的直接就是对象地址</p>\\n<p><img src=\\\"../../../public/img/zhijiezhizhenfangwen.png\\\" alt=\\\"zhijiezhizhenfangwen\\\"></p>\\n<blockquote>\\n<p>直观一点解释就是</p>\\n<p>假如我有一个 Person 类：</p>\\n<pre><code class=\\\"hljs language-java\\\"><span class=\\\"hljs-keyword\\\">public</span> <span class=\\\"hljs-keyword\\\">class</span> <span class=\\\"hljs-title class_\\\">Person</span>{\\n    <span class=\\\"hljs-keyword\\\">private</span> <span class=\\\"hljs-keyword\\\">static</span> <span class=\\\"hljs-type\\\">String</span> <span class=\\\"hljs-variable\\\">kind</span> <span class=\\\"hljs-operator\\\">=</span> <span class=\\\"hljs-string\\\">&quot;human&quot;</span>;\\n    <span class=\\\"hljs-keyword\\\">private</span> String name;\\n    <span class=\\\"hljs-keyword\\\">private</span> Integer age;\\n    <span class=\\\"hljs-comment\\\">// ...</span>\\n}\\n</code></pre>\\n<p>然后有：</p>\\n<pre><code class=\\\"hljs language-java\\\">    <span class=\\\"hljs-type\\\">Person</span> <span class=\\\"hljs-variable\\\">jack</span> <span class=\\\"hljs-operator\\\">=</span> <span class=\\\"hljs-keyword\\\">new</span> <span class=\\\"hljs-title class_\\\">Person</span>(<span class=\\\"hljs-string\\\">&quot;Jack&quot;</span>, <span class=\\\"hljs-number\\\">21</span>);\\n</code></pre>\\n<p>这个时候，语句会有两部分，左边<code>Person</code>类型的指针<code>jack</code>，指向右边<code>Person</code>对象实例，且如果是第一次 new，则会进行一系列的<code>Person</code>类的加载，这时候：</p>\\n<ol>\\n<li>在 Java 栈中的本地变量表（当前线程中）会存在一个 reference 类型指针<code>jack</code>，该指针指向一个对象的<strong>句柄地址/对象地址（4.）</strong></li>\\n<li>在方法区内会存在<code>Person</code>类的静态变量<code>kind</code>的数据</li>\\n<li>在 Java 堆内会存在<code>Person</code>类的静态变量<code>kind</code>的索引指针，该指针指向（2.）</li>\\n<li>在 Java 堆内会存在一个<code>Person</code>类型对象数据，数据中有<code>name=jack，age=12</code>，如果是直接指针访问，则它会包含（3.）</li>\\n<li>如果是句柄访问，那么在 Java 堆内会存在一个<strong>句柄地址</strong>，地址包含两个指针，一个指针是（3.），另一个指针指向对象实例数据（4.）</li>\\n</ol>\\n</blockquote>\\n<h5 id=\\\"两种方式的对比\\\">两种方式的对比</h5>\\n<ul>\\n<li><strong>句柄稳定</strong>：句柄访问的好处是 reference 中存储的是稳定的句柄地址，<strong>对象被移动的时候（特别是垃圾回收的时候）</strong>，只需要改句柄指针就好了，reference 不需要修改</li>\\n<li><strong>直接更快</strong>：节省了多一次指针定位的开销，对象的访问在 Java 中很频繁，所以指针定位开销也是较为可观的执行成本</li>\\n<li><strong>HotSpot 用的是直接指针访问</strong></li>\\n</ul>\\n\";","export default \"<h3 id=\\\"大声bb\\\">大声BB</h3>\\n<p>为了以后看到一道我知道是用DP但是不知道如何去DP的问题再也不会束手无策</p>\\n<p>决心做一个地痞，至少下次看到一个DP不会再被它DP</p>\\n<hr>\\n<h3 id=\\\"什么是dp？\\\">什么是DP？</h3>\\n<p>动态规划（Dynamic Programming），最初并不是应用于计算机科学当中，而是一种数学方法，在20世纪50年代初由美国数学家<em>Richard Bellman</em>发明，意图用来求解某类最优问题。</p>\\n<p>在DP的思想当中：如果问题是由交叠的子问题构成的，我们就可以用DP去解决这个问题。一般这样的子问题出现在对给定问题的求解<strong>递推关系</strong>中，这个<strong>递推关系</strong>中包含了相同类型的更小子问题的解<strong>（已经解出来了的）</strong>。</p>\\n<p>DP建议我们，与其对交叠子问题一次次的求解，还不如将每个子问题的解记录在<strong>一张表</strong>中，这样就可以在表中直接得到原始问题的解。</p>\\n<h3 id=\\\"dp怎么操作？\\\">DP怎么操作？</h3>\\n<h4 id=\\\"斐波那契引例\\\">斐波那契引例</h4>\\n<p>我们先来看一个斐波那契数列第n个数是多少的例子，寻常<strong>递归解法</strong>：</p>\\n<pre><code class=\\\"hljs language-java\\\"><span class=\\\"hljs-keyword\\\">public</span> <span class=\\\"hljs-type\\\">int</span> <span class=\\\"hljs-title function_\\\">fibonacci</span><span class=\\\"hljs-params\\\">(<span class=\\\"hljs-type\\\">int</span> n)</span> {\\n    <span class=\\\"hljs-keyword\\\">if</span> (n == <span class=\\\"hljs-number\\\">0</span>) <span class=\\\"hljs-keyword\\\">return</span> <span class=\\\"hljs-number\\\">0</span>;\\n    <span class=\\\"hljs-keyword\\\">if</span> (n == <span class=\\\"hljs-number\\\">1</span>) <span class=\\\"hljs-keyword\\\">return</span> <span class=\\\"hljs-number\\\">1</span>;\\n    <span class=\\\"hljs-keyword\\\">return</span> fibonacci(n-<span class=\\\"hljs-number\\\">1</span>) + fibonacci(n-<span class=\\\"hljs-number\\\">2</span>);\\n}\\n</code></pre>\\n<p>这个解法的时间复杂度，我们可以从它兵分两路去将它看成是一棵满二叉树：</p>\\n<p><img src=\\\"http://img.mp.sohu.com/upload/20170702/07bc2cc044c245588e0873e773dd9079_th.png\\\" alt=\\\"img\\\"></p>\\n<p>二叉树的结点就是递归次数，这个结果近似是2的n-1次方，也就是<strong>O(2^n)</strong></p>\\n<p>显然，指数级的效率是非常低的，我们观察一下这棵树，其中有很多结点是重复计算的：</p>\\n<p><img src=\\\"http://img.mp.sohu.com/upload/20170702/148d4dfd369240efbd2e28e0f44e8adc_th.png\\\" alt=\\\"img\\\"></p>\\n<p>为了避免这种重复计算，我们可以将每个子问题求出的结果，放在<strong>一张表</strong>中，每次求解当前问题的时候，索引表中已经求好的子问题，如果说将<strong>递归法</strong>视为自顶向下的方法，那么这种开辟空间存结果的方法，我们称之为<strong>备忘录法</strong>，这是一种自底向上的考虑方法</p>\\n<pre><code class=\\\"hljs language-java\\\"><span class=\\\"hljs-keyword\\\">public</span> <span class=\\\"hljs-type\\\">int</span> <span class=\\\"hljs-title function_\\\">fibonacci</span><span class=\\\"hljs-params\\\">(<span class=\\\"hljs-type\\\">int</span> n)</span> {\\n    <span class=\\\"hljs-keyword\\\">if</span> (n == <span class=\\\"hljs-number\\\">0</span>) <span class=\\\"hljs-keyword\\\">return</span> <span class=\\\"hljs-number\\\">0</span>;\\n    <span class=\\\"hljs-keyword\\\">if</span> (n == <span class=\\\"hljs-number\\\">1</span>) <span class=\\\"hljs-keyword\\\">return</span> <span class=\\\"hljs-number\\\">1</span>;\\n    <span class=\\\"hljs-type\\\">int</span>[] memo = <span class=\\\"hljs-keyword\\\">new</span> <span class=\\\"hljs-title class_\\\">int</span>[n];\\n    memo[<span class=\\\"hljs-number\\\">0</span>] = <span class=\\\"hljs-number\\\">0</span>;\\n    memo[<span class=\\\"hljs-number\\\">1</span>] = <span class=\\\"hljs-number\\\">1</span>;\\n    <span class=\\\"hljs-type\\\">int</span> <span class=\\\"hljs-variable\\\">i</span> <span class=\\\"hljs-operator\\\">=</span> <span class=\\\"hljs-number\\\">2</span>;\\n    <span class=\\\"hljs-keyword\\\">while</span>(i &lt; n) {\\n        memo[i++] = memo[i - <span class=\\\"hljs-number\\\">1</span>] + memo[i - <span class=\\\"hljs-number\\\">2</span>];\\n    }\\n    <span class=\\\"hljs-keyword\\\">return</span> memo[i];\\n}\\n</code></pre>\\n<p>这个算法，性能是<strong>O(n)<strong>，但是空间耗费也变成了</strong>O(n)<strong>，说实话，我们一次次备忘，其实真正需要的总不就是n的前两个n-1和n-2么，至于前面的n-3一直到0，其实已经不需要了，所以这</strong>备忘录之法</strong>还是可以进一步优化的，优化了之后，才是真正的、最简单的动态规划</p>\\n<pre><code class=\\\"hljs language-java\\\"><span class=\\\"hljs-keyword\\\">public</span> <span class=\\\"hljs-type\\\">int</span> <span class=\\\"hljs-title function_\\\">fibonacci</span><span class=\\\"hljs-params\\\">(<span class=\\\"hljs-type\\\">int</span> n)</span> {\\n    <span class=\\\"hljs-keyword\\\">if</span> (n == <span class=\\\"hljs-number\\\">0</span>) <span class=\\\"hljs-keyword\\\">return</span> <span class=\\\"hljs-number\\\">0</span>;\\n    <span class=\\\"hljs-keyword\\\">if</span> (n == <span class=\\\"hljs-number\\\">1</span>) <span class=\\\"hljs-keyword\\\">return</span> <span class=\\\"hljs-number\\\">1</span>;\\n    <span class=\\\"hljs-type\\\">int</span> <span class=\\\"hljs-variable\\\">n1</span> <span class=\\\"hljs-operator\\\">=</span> <span class=\\\"hljs-number\\\">0</span>;\\n    <span class=\\\"hljs-type\\\">int</span> <span class=\\\"hljs-variable\\\">n2</span> <span class=\\\"hljs-operator\\\">=</span> <span class=\\\"hljs-number\\\">1</span>;\\n    <span class=\\\"hljs-type\\\">int</span> <span class=\\\"hljs-variable\\\">i</span> <span class=\\\"hljs-operator\\\">=</span> <span class=\\\"hljs-number\\\">2</span>;\\n    <span class=\\\"hljs-type\\\">int</span> <span class=\\\"hljs-variable\\\">get</span> <span class=\\\"hljs-operator\\\">=</span> <span class=\\\"hljs-number\\\">0</span>;\\n    <span class=\\\"hljs-keyword\\\">while</span>(i &lt; n) {\\n        get = n1 + n2;\\n        n2 = n1;\\n        n1 = get;\\n        i++;\\n    }\\n    <span class=\\\"hljs-keyword\\\">return</span> get;\\n}\\n</code></pre>\\n<p>在这样的情况下，既不需要**O(n)<strong>的空间，又可以保持</strong>O(n)**的时间</p>\\n<h4 id=\\\"分析这个引例\\\">分析这个引例</h4>\\n<p>通过这个小小的斐波那契，我们经历了从：<strong>递归法</strong>——<strong>备忘录</strong>——<strong>动态规划</strong>等三个阶段，在这个过程中，我们不断得将无意义的计算精简下来，将我们的思维由自顶向下，往前索取子问题的解，转变为自底向上，拿着子问题的解去找原问题的解，从整表的备忘录，到两个变量足矣运算的效率；</p>\\n<h4 id=\\\"dp要素\\\">DP要素</h4>\\n<ol>\\n<li><strong>最优子结构：</strong>我们从最优解，看到什么子问题，比如<code>Fibonacci(10)=Fibonacci(9)+Fibonacci(8)</code></li>\\n<li><strong>边界：</strong>最低端的子问题，如<code>Fibonacci(0)=0,Fibonacci(1)=1;</code></li>\\n<li><strong>状态转移公式：</strong>问题求解的公式，我们要靠这个公式去推进结果，如：<code>Fibonacci(n)=Fibonacci(n-1)+Fibonacci(n-2)</code></li>\\n</ol>\\n<p>但是，仅仅做到到以上3要素，顶多只是个递归level，动态规划真正的精髓在于：<strong>减少无用功，利用已做工，权衡时空效率</strong></p>\\n<p>我们来练习一下新的题目</p>\\n<h4 id=\\\"练习：上台阶\\\">练习：上台阶</h4>\\n<blockquote>\\n<p>有一座高度是<strong>10</strong>级台阶的楼梯，从下往上走，每跨一步只能向上<strong>1</strong>级或者<strong>2</strong>级台阶。要求用程序来求出一共有多少种走法。</p>\\n</blockquote>\\n<p>我们从上到下考虑问题，我们要知道最后一步有两个情况，一个是从第8阶上2级，一个是从第9阶上1级，所以上到第10阶的最后一步可能的情况是这两个情况的总和，于是得出<code>F(10)=F(9)+F(8)</code>，这个式子是不是很眼熟？别急，我们得到了<strong>最优子结构</strong>，接下来看边界，我们很容易得知<code>F(3)=F(2)+F(1)</code>，于是<strong>边界</strong><code>F(2)=2，F(1)=1</code>，<strong>状态转移公式</strong>也就出来了<code>F(n)=F(n-1)+F(n-2)</code></p>\\n<p>这道题和斐波那契几乎如出一辙，仅仅是边界数据不一样而已，复现出来的代码</p>\\n<pre><code class=\\\"hljs language-java\\\"><span class=\\\"hljs-keyword\\\">public</span> <span class=\\\"hljs-type\\\">int</span> <span class=\\\"hljs-title function_\\\">climbingWay</span><span class=\\\"hljs-params\\\">(<span class=\\\"hljs-type\\\">int</span> n)</span> {\\n    <span class=\\\"hljs-keyword\\\">if</span> (n == <span class=\\\"hljs-number\\\">1</span>) <span class=\\\"hljs-keyword\\\">return</span> <span class=\\\"hljs-number\\\">1</span>;\\n    <span class=\\\"hljs-keyword\\\">if</span> (n == <span class=\\\"hljs-number\\\">2</span>) <span class=\\\"hljs-keyword\\\">return</span> <span class=\\\"hljs-number\\\">2</span>;\\n    <span class=\\\"hljs-type\\\">int</span> <span class=\\\"hljs-variable\\\">n1</span> <span class=\\\"hljs-operator\\\">=</span> <span class=\\\"hljs-number\\\">1</span>;\\n    <span class=\\\"hljs-type\\\">int</span> <span class=\\\"hljs-variable\\\">n2</span> <span class=\\\"hljs-operator\\\">=</span> <span class=\\\"hljs-number\\\">2</span>;\\n    <span class=\\\"hljs-type\\\">int</span> <span class=\\\"hljs-variable\\\">i</span> <span class=\\\"hljs-operator\\\">=</span> <span class=\\\"hljs-number\\\">3</span>;\\n    <span class=\\\"hljs-type\\\">int</span> <span class=\\\"hljs-variable\\\">get</span> <span class=\\\"hljs-operator\\\">=</span> <span class=\\\"hljs-number\\\">0</span>;\\n    <span class=\\\"hljs-keyword\\\">while</span>(i &lt; n) {\\n        get = n1 + n2;\\n        n2 = n1;\\n        n1 = get;\\n        i++;\\n    }\\n    <span class=\\\"hljs-keyword\\\">return</span> get;\\n}\\n</code></pre>\\n<hr>\\n<h3 id=\\\"dp练习\\\">DP练习</h3>\\n<h4 id=\\\"1：国王和金矿\\\">1：国王和金矿</h4>\\n<blockquote>\\n<p>有一个国家发现了5座金矿，每座金矿的黄金储量不同，需要参与挖掘的工人数也不同。参与挖矿工人的总数是10人。<strong>每座金矿要么全挖，要么不挖，不能派出一半人挖取一半金矿。</strong>要求用程序求解出，要想得到尽可能多的黄金，应该选择挖取哪几座金矿？</p>\\n<p>金矿信息：</p>\\n<table>\\n<thead>\\n<tr>\\n<th align=\\\"center\\\"></th>\\n<th align=\\\"center\\\">1金矿</th>\\n<th align=\\\"center\\\">2金矿</th>\\n<th align=\\\"center\\\">3金矿</th>\\n<th align=\\\"center\\\">4金矿</th>\\n<th align=\\\"center\\\">5金矿</th>\\n</tr>\\n</thead>\\n<tbody><tr>\\n<td align=\\\"center\\\"><strong>储金</strong></td>\\n<td align=\\\"center\\\">400</td>\\n<td align=\\\"center\\\">500</td>\\n<td align=\\\"center\\\">200</td>\\n<td align=\\\"center\\\">300</td>\\n<td align=\\\"center\\\">350</td>\\n</tr>\\n<tr>\\n<td align=\\\"center\\\"><strong>需要工人</strong></td>\\n<td align=\\\"center\\\">5</td>\\n<td align=\\\"center\\\">5</td>\\n<td align=\\\"center\\\">3</td>\\n<td align=\\\"center\\\">4</td>\\n<td align=\\\"center\\\">3</td>\\n</tr>\\n</tbody></table>\\n</blockquote>\\n<p>下至上分析用备忘录法去分析：</p>\\n<p>我们用<strong>W代表所用的工人数</strong>，<strong>M代表所考虑的金矿前几座的座数</strong>，<strong>每格代表用这么多工人考虑这么多座矿所能获得的最大金量G</strong>，首先我们要明确<code>G(m)={400, 500, 200, 300, 350}</code>，且每个<strong>G</strong>都要付出相应的<strong>W</strong></p>\\n<p>比如第一格代表考虑前1座金矿，只用一个工人，于是第一行的数据我们很容易得出：</p>\\n<table>\\n<thead>\\n<tr>\\n<th align=\\\"center\\\"></th>\\n<th align=\\\"center\\\">w=1</th>\\n<th align=\\\"center\\\">w=2</th>\\n<th align=\\\"center\\\">w=3</th>\\n<th align=\\\"center\\\">w=4</th>\\n<th align=\\\"center\\\">w=5</th>\\n<th align=\\\"center\\\">w=6</th>\\n<th align=\\\"center\\\">w=7</th>\\n<th align=\\\"center\\\">w=8</th>\\n<th align=\\\"center\\\">w=9</th>\\n<th align=\\\"center\\\">w=10</th>\\n</tr>\\n</thead>\\n<tbody><tr>\\n<td align=\\\"center\\\"><strong>m=1</strong></td>\\n<td align=\\\"center\\\">0</td>\\n<td align=\\\"center\\\">0</td>\\n<td align=\\\"center\\\">0</td>\\n<td align=\\\"center\\\">0</td>\\n<td align=\\\"center\\\">400</td>\\n<td align=\\\"center\\\">400</td>\\n<td align=\\\"center\\\">400</td>\\n<td align=\\\"center\\\">400</td>\\n<td align=\\\"center\\\">400</td>\\n<td align=\\\"center\\\">400</td>\\n</tr>\\n<tr>\\n<td align=\\\"center\\\"><strong>m=2</strong></td>\\n<td align=\\\"center\\\">0</td>\\n<td align=\\\"center\\\">0</td>\\n<td align=\\\"center\\\">0</td>\\n<td align=\\\"center\\\">0</td>\\n<td align=\\\"center\\\">500⭐</td>\\n<td align=\\\"center\\\">500</td>\\n<td align=\\\"center\\\">500</td>\\n<td align=\\\"center\\\">500</td>\\n<td align=\\\"center\\\">500</td>\\n<td align=\\\"center\\\">900⭐</td>\\n</tr>\\n<tr>\\n<td align=\\\"center\\\"><strong>m=3</strong></td>\\n<td align=\\\"center\\\">0</td>\\n<td align=\\\"center\\\">0</td>\\n<td align=\\\"center\\\">200</td>\\n<td align=\\\"center\\\">200</td>\\n<td align=\\\"center\\\">500</td>\\n<td align=\\\"center\\\">500</td>\\n<td align=\\\"center\\\">500</td>\\n<td align=\\\"center\\\">700</td>\\n<td align=\\\"center\\\">700</td>\\n<td align=\\\"center\\\">900</td>\\n</tr>\\n<tr>\\n<td align=\\\"center\\\"><strong>m=4</strong></td>\\n<td align=\\\"center\\\">0</td>\\n<td align=\\\"center\\\">0</td>\\n<td align=\\\"center\\\">200</td>\\n<td align=\\\"center\\\">300</td>\\n<td align=\\\"center\\\">500</td>\\n<td align=\\\"center\\\">500</td>\\n<td align=\\\"center\\\">500</td>\\n<td align=\\\"center\\\">700</td>\\n<td align=\\\"center\\\">800</td>\\n<td align=\\\"center\\\">900</td>\\n</tr>\\n<tr>\\n<td align=\\\"center\\\"><strong>m=5</strong></td>\\n<td align=\\\"center\\\">0</td>\\n<td align=\\\"center\\\">0</td>\\n<td align=\\\"center\\\">350</td>\\n<td align=\\\"center\\\">350</td>\\n<td align=\\\"center\\\">500</td>\\n<td align=\\\"center\\\">550</td>\\n<td align=\\\"center\\\">650</td>\\n<td align=\\\"center\\\">850</td>\\n<td align=\\\"center\\\">850</td>\\n<td align=\\\"center\\\">900</td>\\n</tr>\\n</tbody></table>\\n<p>到了w=5，m=2的时候，我们就需要考虑一下了：</p>\\n<ol>\\n<li><p>当我只有5个人的时候，我有2座矿可以挖，一个挖400一个挖500，不做考虑<strong>肯定</strong>挖500，那这个考虑是怎么做的呢？这会还看不出，总之这里就有</p>\\n<p><code>F（m=2，w=5）=Max（G（m=1，w=5），G（m=2，w=5）+G（m=1，w=5-5））=Max（400，500+0）=500</code></p>\\n</li>\\n<li><p>w=6，n=2的时候，这时候可以出5个人挖500，剩下一个人去算的话，就是n=1，w=1，即是0金，所以w=6，n=2也是500，这里有</p>\\n<p><code>F（m=2，w=6）=Max（G（m=1，w=6），G（m=2，w=5）+G（m=1，w=6-5））=Max（400，500+0）=500</code></p>\\n</li>\\n<li><p>最后我们看到w=10，n=2这块，首先5人去挖500，剩下还有5人，可以考虑w=5，n=1，挖400，这500和400肯定是加起来了得900，所以有</p>\\n<p><code>F（m=2，w=10）=Max（G（m=1，w=10），G（m=2，w=5）+G（m=1，w=10-5））=Max（400，500+400）=900</code></p>\\n</li>\\n</ol>\\n<p>于是我们可以看出，Max中的前半部分代表着<strong>我不挖现在考虑到的这座矿，w人全部去挖考虑之前的矿能挖到的</strong>，后半部分代表<strong>我出本矿所需要的人挖本矿，剩下的W-Wn人去挖之前的矿能挖到的</strong></p>\\n<p>于是我们尝试推算一下<strong>最优子结构：</strong></p>\\n<p><code>F（m=5，w=10）=Max（G（m=4，w=10），G（m=5，w=3）+G（m=4，w=10-3））</code></p>\\n<p>我们的<strong>边界：</strong></p>\\n<p><code>F（m=1，w={1，10}）={0，0，0，0，400，400，400，400，400，400}</code></p>\\n<p>就是第一行的结果，然后很容易得出<strong>状态转移公式：</strong></p>\\n<p><code>F（m，w）=Max（G（m -1 ，w），G（m，Wm）+G（m - 1，w-Wm））</code>其中m为当前考虑的前几座金矿数，w为当前分配的工人数，Wm为挖m需要的刚好的人数，w-Wm就是剩下的人数了；</p>\\n<p>不难发现，下一行的结果都是前一行推导出来的，所以我们每次只需要记录前一行的内容就好了，并不需要将整个二维表记录下来，于是地痞该出场了：</p>\\n<pre><code class=\\\"hljs language-java\\\"><span class=\\\"hljs-meta\\\">@Test</span>\\n<span class=\\\"hljs-keyword\\\">public</span> <span class=\\\"hljs-keyword\\\">void</span> <span class=\\\"hljs-title function_\\\">testDig</span><span class=\\\"hljs-params\\\">()</span>{\\n    <span class=\\\"hljs-type\\\">int</span>[] g = {<span class=\\\"hljs-number\\\">400</span>, <span class=\\\"hljs-number\\\">500</span>, <span class=\\\"hljs-number\\\">200</span>, <span class=\\\"hljs-number\\\">300</span>, <span class=\\\"hljs-number\\\">350</span>};\\n    <span class=\\\"hljs-type\\\">int</span>[] gw = {<span class=\\\"hljs-number\\\">5</span>, <span class=\\\"hljs-number\\\">5</span>, <span class=\\\"hljs-number\\\">3</span>, <span class=\\\"hljs-number\\\">4</span>, <span class=\\\"hljs-number\\\">3</span>};\\n    dig(g, gw, <span class=\\\"hljs-number\\\">10</span>);\\n}\\n\\n<span class=\\\"hljs-keyword\\\">private</span> <span class=\\\"hljs-keyword\\\">void</span> <span class=\\\"hljs-title function_\\\">dig</span><span class=\\\"hljs-params\\\">(<span class=\\\"hljs-type\\\">int</span>[] g, <span class=\\\"hljs-type\\\">int</span>[] gw, <span class=\\\"hljs-type\\\">int</span> w)</span>{\\n    <span class=\\\"hljs-type\\\">int</span>[] preResult = <span class=\\\"hljs-keyword\\\">new</span> <span class=\\\"hljs-title class_\\\">int</span>[w];\\n    <span class=\\\"hljs-comment\\\">// 准备第一行的数据</span>\\n    <span class=\\\"hljs-keyword\\\">for</span> (<span class=\\\"hljs-type\\\">int</span> <span class=\\\"hljs-variable\\\">useWorker</span> <span class=\\\"hljs-operator\\\">=</span> <span class=\\\"hljs-number\\\">1</span>; useWorker &lt;= w; useWorker++) {\\n        preResult[useWorker - <span class=\\\"hljs-number\\\">1</span>] = useWorker &gt;= gw[<span class=\\\"hljs-number\\\">0</span>] ? g[<span class=\\\"hljs-number\\\">0</span>] : <span class=\\\"hljs-number\\\">0</span>;\\n    }\\n    <span class=\\\"hljs-type\\\">int</span>[] nowResult = <span class=\\\"hljs-keyword\\\">new</span> <span class=\\\"hljs-title class_\\\">int</span>[w];\\n    <span class=\\\"hljs-comment\\\">// 从第二座矿开始算</span>\\n    <span class=\\\"hljs-keyword\\\">for</span> (<span class=\\\"hljs-type\\\">int</span> <span class=\\\"hljs-variable\\\">m</span> <span class=\\\"hljs-operator\\\">=</span> <span class=\\\"hljs-number\\\">1</span>; m &lt; g.length; m++){\\n        System.out.println(Arrays.toString(preResult));\\n        <span class=\\\"hljs-comment\\\">// 从第一个工人开始算</span>\\n        <span class=\\\"hljs-keyword\\\">for</span> (<span class=\\\"hljs-type\\\">int</span> <span class=\\\"hljs-variable\\\">useWorker</span> <span class=\\\"hljs-operator\\\">=</span> <span class=\\\"hljs-number\\\">1</span>; useWorker &lt;= w; useWorker++) {\\n            <span class=\\\"hljs-comment\\\">// 如果当前的工人数不能挖当前的矿，那么就挖之前的矿</span>\\n            <span class=\\\"hljs-keyword\\\">if</span> (useWorker &lt; gw[m]) {\\n                nowResult[useWorker - <span class=\\\"hljs-number\\\">1</span>] = preResult[useWorker - <span class=\\\"hljs-number\\\">1</span>];\\n            } <span class=\\\"hljs-keyword\\\">else</span> {\\n                <span class=\\\"hljs-comment\\\">// 在：1.挖当前的矿，剩余的人挖之前的矿；2.当前可用的工人挖之前的矿；中选一个最多金量的</span>\\n                nowResult[useWorker - <span class=\\\"hljs-number\\\">1</span>] = \\n                    Math.max(preResult[useWorker - <span class=\\\"hljs-number\\\">1</span>], \\n                             (useWorker - gw[m] - <span class=\\\"hljs-number\\\">1</span> &gt; <span class=\\\"hljs-number\\\">0</span> ? \\n                              preResult[useWorker - gw[m] - <span class=\\\"hljs-number\\\">1</span>] : <span class=\\\"hljs-number\\\">0</span>) + g[m]);\\n            }\\n        }\\n        System.arraycopy(nowResult, <span class=\\\"hljs-number\\\">0</span>, preResult, <span class=\\\"hljs-number\\\">0</span>, w);\\n    }\\n    System.out.println(Arrays.toString(nowResult));\\n}\\n</code></pre>\\n<pre><code class=\\\"hljs language-java\\\">[<span class=\\\"hljs-number\\\">0</span>, <span class=\\\"hljs-number\\\">0</span>, <span class=\\\"hljs-number\\\">0</span>, <span class=\\\"hljs-number\\\">0</span>, <span class=\\\"hljs-number\\\">400</span>, <span class=\\\"hljs-number\\\">400</span>, <span class=\\\"hljs-number\\\">400</span>, <span class=\\\"hljs-number\\\">400</span>, <span class=\\\"hljs-number\\\">400</span>, <span class=\\\"hljs-number\\\">400</span>]\\n[<span class=\\\"hljs-number\\\">0</span>, <span class=\\\"hljs-number\\\">0</span>, <span class=\\\"hljs-number\\\">0</span>, <span class=\\\"hljs-number\\\">0</span>, <span class=\\\"hljs-number\\\">500</span>, <span class=\\\"hljs-number\\\">500</span>, <span class=\\\"hljs-number\\\">500</span>, <span class=\\\"hljs-number\\\">500</span>, <span class=\\\"hljs-number\\\">500</span>, <span class=\\\"hljs-number\\\">900</span>]\\n[<span class=\\\"hljs-number\\\">0</span>, <span class=\\\"hljs-number\\\">0</span>, <span class=\\\"hljs-number\\\">200</span>, <span class=\\\"hljs-number\\\">200</span>, <span class=\\\"hljs-number\\\">500</span>, <span class=\\\"hljs-number\\\">500</span>, <span class=\\\"hljs-number\\\">500</span>, <span class=\\\"hljs-number\\\">700</span>, <span class=\\\"hljs-number\\\">700</span>, <span class=\\\"hljs-number\\\">900</span>]\\n[<span class=\\\"hljs-number\\\">0</span>, <span class=\\\"hljs-number\\\">0</span>, <span class=\\\"hljs-number\\\">200</span>, <span class=\\\"hljs-number\\\">300</span>, <span class=\\\"hljs-number\\\">500</span>, <span class=\\\"hljs-number\\\">500</span>, <span class=\\\"hljs-number\\\">500</span>, <span class=\\\"hljs-number\\\">700</span>, <span class=\\\"hljs-number\\\">800</span>, <span class=\\\"hljs-number\\\">900</span>]\\n[<span class=\\\"hljs-number\\\">0</span>, <span class=\\\"hljs-number\\\">0</span>, <span class=\\\"hljs-number\\\">350</span>, <span class=\\\"hljs-number\\\">350</span>, <span class=\\\"hljs-number\\\">500</span>, <span class=\\\"hljs-number\\\">550</span>, <span class=\\\"hljs-number\\\">650</span>, <span class=\\\"hljs-number\\\">850</span>, <span class=\\\"hljs-number\\\">850</span>, <span class=\\\"hljs-number\\\">900</span>]\\n</code></pre>\\n<p>输出的结果和我们用备忘录推算的结果一致，但是在实现的时候要注意2点：</p>\\n<ol>\\n<li>工人数（useWorker）使用的是自然数1-10，而记录数组的下标却是0-9，我们使用自然数的原因是为了更好地和gw（每个矿需要多少人挖）做差运算；</li>\\n<li>第26行的preResult和nowResult的结果替换，并不能直接<code>preResult=nowResult</code>，Java毕竟是直接引用，所以还是老老实实地一个个复制过去；有的实现是直接赋值，估计是c的代码，指针机制不一样；</li>\\n</ol>\\n<p>分解实现：</p>\\n<pre><code class=\\\"hljs language-java\\\"><span class=\\\"hljs-keyword\\\">private</span> <span class=\\\"hljs-keyword\\\">void</span> <span class=\\\"hljs-title function_\\\">dig2</span><span class=\\\"hljs-params\\\">(<span class=\\\"hljs-type\\\">int</span>[] g, <span class=\\\"hljs-type\\\">int</span>[] gw, <span class=\\\"hljs-type\\\">int</span> w)</span>{\\n    <span class=\\\"hljs-type\\\">int</span>[] preResult = <span class=\\\"hljs-keyword\\\">new</span> <span class=\\\"hljs-title class_\\\">int</span>[w];\\n    <span class=\\\"hljs-comment\\\">// 准备第一行的数据</span>\\n    <span class=\\\"hljs-keyword\\\">for</span> (<span class=\\\"hljs-type\\\">int</span> <span class=\\\"hljs-variable\\\">useWorker</span> <span class=\\\"hljs-operator\\\">=</span> <span class=\\\"hljs-number\\\">1</span>; useWorker &lt;= w; useWorker++) {\\n        preResult[useWorker - <span class=\\\"hljs-number\\\">1</span>] = useWorker &gt;= gw[<span class=\\\"hljs-number\\\">0</span>] ? g[<span class=\\\"hljs-number\\\">0</span>] : <span class=\\\"hljs-number\\\">0</span>;\\n    }\\n    <span class=\\\"hljs-type\\\">int</span>[] nowResult = <span class=\\\"hljs-keyword\\\">new</span> <span class=\\\"hljs-title class_\\\">int</span>[w];\\n    <span class=\\\"hljs-comment\\\">// 从第二座矿开始算</span>\\n    <span class=\\\"hljs-keyword\\\">for</span> (<span class=\\\"hljs-type\\\">int</span> <span class=\\\"hljs-variable\\\">m</span> <span class=\\\"hljs-operator\\\">=</span> <span class=\\\"hljs-number\\\">1</span>; m &lt; g.length; m++){\\n        System.out.println(Arrays.toString(preResult));\\n        <span class=\\\"hljs-comment\\\">// 从第一个工人开始算</span>\\n        <span class=\\\"hljs-keyword\\\">for</span> (<span class=\\\"hljs-type\\\">int</span> <span class=\\\"hljs-variable\\\">useWorker</span> <span class=\\\"hljs-operator\\\">=</span> <span class=\\\"hljs-number\\\">1</span>; useWorker &lt;= w; useWorker++) {\\n            <span class=\\\"hljs-comment\\\">// 前矿</span>\\n            <span class=\\\"hljs-type\\\">int</span> <span class=\\\"hljs-variable\\\">front</span> <span class=\\\"hljs-operator\\\">=</span> preResult[useWorker - <span class=\\\"hljs-number\\\">1</span>];\\n            <span class=\\\"hljs-comment\\\">// 当前工人能不能挖当前这个矿 能就耗费wm人 不能就耗费0个人</span>\\n            <span class=\\\"hljs-type\\\">int</span> <span class=\\\"hljs-variable\\\">wm</span> <span class=\\\"hljs-operator\\\">=</span> useWorker &gt;= gw[m] ? gw[m] : <span class=\\\"hljs-number\\\">0</span>;\\n            <span class=\\\"hljs-comment\\\">// 剩下多少人</span>\\n            <span class=\\\"hljs-type\\\">int</span> <span class=\\\"hljs-variable\\\">left</span> <span class=\\\"hljs-operator\\\">=</span> useWorker - wm;\\n            <span class=\\\"hljs-comment\\\">// 后矿：如果挖不了当前的矿，就挖前矿；如果能挖，剩下的人去挖前矿剩下的人能挖的</span>\\n            <span class=\\\"hljs-type\\\">int</span> <span class=\\\"hljs-variable\\\">back</span> <span class=\\\"hljs-operator\\\">=</span> wm == <span class=\\\"hljs-number\\\">0</span> ? \\n                preResult[useWorker - <span class=\\\"hljs-number\\\">1</span>] : \\n                g[m] + (left &gt; <span class=\\\"hljs-number\\\">0</span> ? preResult[left - <span class=\\\"hljs-number\\\">1</span>] : <span class=\\\"hljs-number\\\">0</span>);\\n            <span class=\\\"hljs-comment\\\">// 前矿后矿谁大挖谁</span>\\n            nowResult[useWorker - <span class=\\\"hljs-number\\\">1</span>] = front &gt; back ? front : back;\\n        }\\n        System.arraycopy(nowResult, <span class=\\\"hljs-number\\\">0</span>, preResult, <span class=\\\"hljs-number\\\">0</span>, w);\\n    }\\n    System.out.println(Arrays.toString(nowResult));\\n}\\n</code></pre>\\n<h5 id=\\\"从金矿再分析一下dp\\\">从金矿再分析一下DP</h5>\\n<p>别高兴太早，我们做出了DP确实很开心，但是你有没有想过DP是否合适同一道题的所有情况？</p>\\n<p>我们做DP，时间复杂度<strong>O(m*w)<strong>，也就是</strong>矿数（m）</strong>和<strong>工人数（w）</strong>之积，空间复杂度<strong>O(w)</strong></p>\\n<p>而如果使用递归法的话，时间复杂度就为<strong>O(2^m)<strong>，</strong>空间复杂度O(m)（递归深度）</strong></p>\\n<p>如果有这样的场景，1000个工人，每个矿工人用量如下：</p>\\n<blockquote>\\n<table>\\n<thead>\\n<tr>\\n<th align=\\\"center\\\"></th>\\n<th align=\\\"center\\\">1金矿</th>\\n<th align=\\\"center\\\">2金矿</th>\\n<th align=\\\"center\\\">3金矿</th>\\n<th align=\\\"center\\\">4金矿</th>\\n<th align=\\\"center\\\">5金矿</th>\\n</tr>\\n</thead>\\n<tbody><tr>\\n<td align=\\\"center\\\"><strong>储金</strong></td>\\n<td align=\\\"center\\\">400</td>\\n<td align=\\\"center\\\">500</td>\\n<td align=\\\"center\\\">200</td>\\n<td align=\\\"center\\\">300</td>\\n<td align=\\\"center\\\">350</td>\\n</tr>\\n<tr>\\n<td align=\\\"center\\\"><strong>需要工人</strong></td>\\n<td align=\\\"center\\\">430</td>\\n<td align=\\\"center\\\">450</td>\\n<td align=\\\"center\\\">320</td>\\n<td align=\\\"center\\\">420</td>\\n<td align=\\\"center\\\">350</td>\\n</tr>\\n</tbody></table>\\n</blockquote>\\n<p>那我们用DP去算的话效率为：<strong>O(5000)/O(1000)</strong></p>\\n<p>用递归去算的话效率为：<strong>O(2^5)/O(5)</strong></p>\\n<p>其实这只是一道简单的数学问题，DP和w的数量成正比，递归只和m有关</p>\\n<p>所以一种算法并不是完美适合一道题，要根据场景去选择算法</p>\\n<h6 id=\\\"递归实现\\\">递归实现</h6>\\n<pre><code class=\\\"hljs language-java\\\"><span class=\\\"hljs-comment\\\">// dig3(g, gw, 1000, 4);</span>\\n<span class=\\\"hljs-keyword\\\">private</span> <span class=\\\"hljs-type\\\">int</span>[] dig3(<span class=\\\"hljs-type\\\">int</span>[] g, <span class=\\\"hljs-type\\\">int</span>[] gw, <span class=\\\"hljs-type\\\">int</span> w, <span class=\\\"hljs-type\\\">int</span> m) {\\n    <span class=\\\"hljs-type\\\">int</span>[] nowResult = <span class=\\\"hljs-keyword\\\">new</span> <span class=\\\"hljs-title class_\\\">int</span>[w];\\n    <span class=\\\"hljs-keyword\\\">if</span> (m == <span class=\\\"hljs-number\\\">0</span>) {\\n        nowResult = <span class=\\\"hljs-keyword\\\">new</span> <span class=\\\"hljs-title class_\\\">int</span>[]{<span class=\\\"hljs-number\\\">0</span>,<span class=\\\"hljs-number\\\">0</span>,<span class=\\\"hljs-number\\\">0</span>,<span class=\\\"hljs-number\\\">0</span>,<span class=\\\"hljs-number\\\">400</span>,<span class=\\\"hljs-number\\\">400</span>,<span class=\\\"hljs-number\\\">400</span>,<span class=\\\"hljs-number\\\">400</span>,<span class=\\\"hljs-number\\\">400</span>,<span class=\\\"hljs-number\\\">400</span>};\\n    } <span class=\\\"hljs-keyword\\\">else</span> {\\n        <span class=\\\"hljs-type\\\">int</span>[] preResult = dig3(g, gw, w, m - <span class=\\\"hljs-number\\\">1</span>);\\n        <span class=\\\"hljs-keyword\\\">for</span> (<span class=\\\"hljs-type\\\">int</span> <span class=\\\"hljs-variable\\\">useWorker</span> <span class=\\\"hljs-operator\\\">=</span> <span class=\\\"hljs-number\\\">1</span>; useWorker &lt;= w; useWorker++) {\\n            <span class=\\\"hljs-keyword\\\">if</span> (useWorker &lt; gw[m]) {\\n                nowResult[useWorker - <span class=\\\"hljs-number\\\">1</span>] = preResult[useWorker - <span class=\\\"hljs-number\\\">1</span>];\\n            } <span class=\\\"hljs-keyword\\\">else</span> {\\n                nowResult[useWorker - <span class=\\\"hljs-number\\\">1</span>] = \\n                    Math.max(preResult[useWorker - <span class=\\\"hljs-number\\\">1</span>], \\n                             (useWorker - gw[m] - <span class=\\\"hljs-number\\\">1</span> &gt; <span class=\\\"hljs-number\\\">0</span> ? \\n                                  preResult[useWorker - gw[m] - <span class=\\\"hljs-number\\\">1</span>] : <span class=\\\"hljs-number\\\">0</span>) + g[m]);\\n            }\\n        }\\n    }\\n    System.out.println(Arrays.toString(nowResult));\\n    <span class=\\\"hljs-keyword\\\">return</span> nowResult;\\n}\\n</code></pre>\\n<h4 id=\\\"2：最大子序列和\\\">2：最大子序列和</h4>\\n<blockquote>\\n<p>leetcode:<a href=\\\"https://leetcode-cn.com/problems/maximum-subarray/description/\\\">https://leetcode-cn.com/problems/maximum-subarray/description/</a></p>\\n<p>给定一个整数数组 <code>nums</code> ，找到一个具有最大和的连续子数组（子数组最少包含一个元素），返回其最大和。</p>\\n<p><strong>示例:</strong></p>\\n<pre><code>输入: [-2,1,-3,4,-1,2,1,-5,4],\\n输出: 6\\n解释: 连续子数组 [4,-1,2,1] 的和最大，为 6。\\n</code></pre>\\n<p><strong>进阶:</strong></p>\\n<p>如果你已经实现复杂度为 O(<em>n</em>) 的解法，尝试使用更为精妙的分治法求解。</p>\\n</blockquote>\\n<p>这是一道既简单又复杂的DP，因为这道题咋一眼看去，实在是不好分析DP的3要素，边界无法确定，谁都有可能是边界，最优子结构无法确定，多长多短都不清楚，有可能解是在序列的前半部分，有可能在后半部分，有可能是在中间，子结构都没出来，更别说状态转移方程了</p>\\n<h5 id=\\\"暴力解on2\\\">暴力解O(n^2)</h5>\\n<p>带着诸多考虑，无论如何都无法独立想出DP来，尽管如此，我们先做暴力解，枚举出所有可能的序列和：</p>\\n<pre><code class=\\\"hljs language-java\\\"><span class=\\\"hljs-keyword\\\">private</span> <span class=\\\"hljs-type\\\">int</span> <span class=\\\"hljs-title function_\\\">ms</span><span class=\\\"hljs-params\\\">(<span class=\\\"hljs-type\\\">int</span>[] nums)</span> {\\n    <span class=\\\"hljs-type\\\">int</span> <span class=\\\"hljs-variable\\\">max</span> <span class=\\\"hljs-operator\\\">=</span> Integer.MIN_VALUE;\\n    <span class=\\\"hljs-keyword\\\">for</span> (<span class=\\\"hljs-type\\\">int</span> <span class=\\\"hljs-variable\\\">i</span> <span class=\\\"hljs-operator\\\">=</span> <span class=\\\"hljs-number\\\">0</span>; i &lt; nums.length; i++) {\\n        <span class=\\\"hljs-type\\\">int</span> <span class=\\\"hljs-variable\\\">rSum</span> <span class=\\\"hljs-operator\\\">=</span> <span class=\\\"hljs-number\\\">0</span>;\\n        <span class=\\\"hljs-keyword\\\">for</span> (<span class=\\\"hljs-type\\\">int</span> <span class=\\\"hljs-variable\\\">j</span> <span class=\\\"hljs-operator\\\">=</span> i; j &lt; nums.length; j++) {\\n            rSum += nums[j];\\n            max = max &gt; rSum ? max : rSum;\\n        }\\n    }\\n    <span class=\\\"hljs-keyword\\\">return</span> max;\\n}\\n</code></pre>\\n<p>其中max一开始就是int的最小值，这里不能用0，万一序列全是负数的话，最后求出的序列max就是0；</p>\\n<p>从i开始遍历序列，每次i里面又从<code>j=i</code>开始往后遍历，从<code>j=i</code>到<code>j=nums.length</code>的每个可能的序列和都求出来，取最大的那个rSum，每次i遍历完第二个for循环之后，比较rSum和max谁大，取大的为max；</p>\\n<p>这是一种什么思路？拿[-2,1,-3,4,-1,2,1,-5,4]来举例：</p>\\n<p>从<code>i=0，num[i]=-2</code>开始考虑，然后第二层for循环就是计算（-2+1）、（-2+1+-3）、（-2+1+-3+4）....即以-2开头的子序列和都算过一次了，然后将以-2开头的所有子序列和中最大的那个当作当前i循环轮次最大的rSum，然后取最大的rSum为max</p>\\n<p>也就是说，这是一种从序列<strong>开头</strong>往后考虑的暴力解，时间复杂度为<strong>O(n^2)</strong></p>\\n<h5 id=\\\"看似简单\\\">看似简单</h5>\\n<p>先前的3例DP，我们都是从递归去入手，然后分析备忘录，然后精简备忘录为DP，每到题都可以很直接的以一种递归的思想去求解问题，因为这些题都有一个共同的鲜明的特点：<strong>解答一定在问题规模的最后</strong></p>\\n<p>但是这道题根本无从下手递归，因为我固化了思维：<strong>解答不一定是在最后，可以在任何地方，所以不知道从哪开始递</strong>，所以我不能代入递归的思想去求解</p>\\n<p>但是我们先不看答案可能在哪里，本质上说，我们处理序列的过程依然是一个从一端到另一端，<strong>这也是一个传递的过程！</strong>至于答案在哪，我们在边传递的时候，<strong>就边比较边记录就好了！</strong></p>\\n<h5 id=\\\"转变思维到可传递\\\">转变思维到可传递</h5>\\n<p>所以我们隐约看出，貌似有一种可传递的求解过程，如果我们将序列从头到尾传递求解的话，不难想出，这个<strong>“递归”</strong>的<strong>边界</strong>就是序列的第一个元素，而我们递到最后一个元素，则是<strong>最优子序列</strong></p>\\n<p>现在还剩最重要的问题——<strong>状态转移方程的求解</strong>，我们再从传递过程的角度来深入分析一下，假如边界是<code>nums[0]</code>，则可以直接从<code>nums[1]</code>开始，且此时rMax=-2：</p>\\n<ol>\\n<li>当前考虑<code>[-2， 1]</code>，程序从-2传递到1，那么在1这里我要进行什么样的选择呢？我得考虑（-2+1）和（1）谁更大，而且既然考虑到1了，那么我们每次的考虑都得包含1，因为题目要求的是连续子序列；考虑完的结果是当前最大的rMax是（1）=1；往下传递；</li>\\n<li>当前考虑<code>[-2，1，-3]</code>，有（-2+1+-3）、（1+-3）、（-3），如何进行选择呢？首先（-2+1+-3）可以不用考虑，为什么？因为（-2+1）在上一轮已经被否定掉了，所以我们直接拿上一轮的rMax和-3一起考虑，因为必须是连续的子序列，所以就在（rMax）+（-3）和（-3）当作选择，选出的这轮选择的rMax=（rMax）+（-3）=（1+-3）=-2</li>\\n<li>当前考虑<code>[-2，1，-3，4]</code>，前面的就不用再多考虑了，直接对比（rMax）+（4）和（4），选中rMax=（4）=4</li>\\n<li>当前考虑<code>[-2，1，-3，4，-1]</code>，rMax=Max（（rMax）+（-1），（-1））=（4，-1）=3</li>\\n<li>当前考虑<code>[-2，1，-3，4，-1，2]</code>，rMax=Max（（rMax）+（2），（2））=（4，-1，2）=5</li>\\n<li>当前考虑<code>[-2，1，-3，4，-1，2，1]</code>，rMax=Max（（rMax）+（1），（1））=（4，-1，2，1）=6</li>\\n<li>当前考虑<code>[-2，1，-3，4，-1，2，1，-5]</code>，rMax=Max（（rMax）+（-5），（-5））=（4，-1，2，1，-5）=-1</li>\\n<li>当前考虑<code>[-2，1，-3，4，-1，2，1，-5，4]</code>，rMax=Max（（rMax）+（4），（4））=（4，-1，2，1，-5，4）=3</li>\\n</ol>\\n<p>传递完毕，我们每一轮都将当前的<code>nums[i]</code>当作最大子序列和的<strong>结尾</strong>去考虑的话，这样就只需要在循环一次的情况下从后往前考虑到每一个序列了，于是我们可以推算出<strong>状态转移方程：rMax=Max（rMax+nums[i]，nums[i]）</strong></p>\\n<p>且与此同时我们可以顺便筛选出max，每次rMax求出之后就可以放到max中去（如果比上一次的max大的话）</p>\\n<pre><code class=\\\"hljs language-java\\\"><span class=\\\"hljs-keyword\\\">private</span> <span class=\\\"hljs-type\\\">int</span> <span class=\\\"hljs-title function_\\\">ms3</span><span class=\\\"hljs-params\\\">(<span class=\\\"hljs-type\\\">int</span>[] nums)</span> {\\n    <span class=\\\"hljs-type\\\">int</span> <span class=\\\"hljs-variable\\\">max</span> <span class=\\\"hljs-operator\\\">=</span> nums[<span class=\\\"hljs-number\\\">0</span>];\\n    <span class=\\\"hljs-type\\\">int</span> <span class=\\\"hljs-variable\\\">rMax</span>  <span class=\\\"hljs-operator\\\">=</span> nums[<span class=\\\"hljs-number\\\">0</span>];\\n    <span class=\\\"hljs-keyword\\\">for</span> (<span class=\\\"hljs-type\\\">int</span> <span class=\\\"hljs-variable\\\">i</span> <span class=\\\"hljs-operator\\\">=</span> <span class=\\\"hljs-number\\\">1</span>; i &lt; nums.length; i++) {\\n        rMax = Math.max(nums[i], rMax + nums[i]);\\n        max = Math.max(max, rMax);\\n    }\\n    <span class=\\\"hljs-keyword\\\">return</span> max;\\n}\\n</code></pre>\\n<h5 id=\\\"递归？\\\">递归？</h5>\\n<p>这道题也有一种递归的解法，基本思想就是，答案的位置只有3种可能性：序列的前半部分、序列的后半部分、前半部分的后面一点加上后半部分的前面一点，我们递归左右两部分然后再算中间；</p>\\n<p>这种实现最后可以做出证明，效率是**O(nlogn)**，但是实现比较难理解</p>\\n<h5 id=\\\"题目变种\\\">题目变种</h5>\\n<h6 id=\\\"21：挑菜问题\\\">2.1：挑菜问题</h6>\\n<blockquote>\\n<p>2018年9月10日，快手校招笔试</p>\\n<p>n个菜，每个菜有好吃程度，求出一个连续吃到的好吃程度最多的菜，可以选多次，但是每道菜只吃一次，比如7道菜选2次，菜好吃程度依次为1 2 3 -2 3 -10 3，则可以选出[1,2,3,-2,3]，剩下-10，3还可以再选一次[3]，总的好吃程度是10；也可以不选菜，比如7道菜选4次，1 2 3 -2 3 -10 3中可以选[1,2,3]是一次[3]是一次[3]又是一次，最后一次不选任何菜，因为只剩下-10和-2，总的好吃程度是12。</p>\\n<p>输入</p>\\n<p>7 2</p>\\n<p>1 2 3 -2 3 -10 3</p>\\n<p>输出</p>\\n<p>10</p>\\n<p>解释</p>\\n<p>[1,2,3,-2,3] -10 [3]</p>\\n<p>输入</p>\\n<p>7 4</p>\\n<p>1 2 3 -2 3 -10 3</p>\\n<p>输出</p>\\n<p>12</p>\\n<p>解释</p>\\n<p>[1,2,3] -2 [3] -10 [3]</p>\\n</blockquote>\\n<p>这题还不止是简单的最大子序列和，还涉及到选择分界的问题，比如72的case，pick one为什么可以包含-2，然后74的case中，为什么又可以避开负数</p>\\n<p>时隔许久又看到这道题，一时半会没想出解，等洗个澡回来的功夫，就想到了解题思路</p>\\n<p>我们使用变治法，问题是有选择地求最大子序列和，变为二分求最小某段区域的最小子序列和，这个最小子序列和必然将当前段分为最大子序列的两部分：</p>\\n<ul>\\n<li>比如72的case中整段的最小子序列和为-10，它将整段分为两部分，这两部分就是解；</li>\\n<li>比如74的case中又72case递归而来的话，左边又求最小子序列，求得-2，又分为两部分；</li>\\n</ul>\\n<p>再更新，不解了这道题，这是道傻逼题；</p>\\n<h4 id=\\\"3：机器人走方格\\\">3：机器人走方格</h4>\\n<blockquote>\\n<p>newcoder:<a href=\\\"https://www.nowcoder.com/questionTerminal/e8bb8e68434e42acbcdff0341f2a32c5\\\">https://www.nowcoder.com/questionTerminal/e8bb8e68434e42acbcdff0341f2a32c5</a></p>\\n<p>有一个XxY的网格，一个机器人只能走格点且只能向右或向下走，要从左上角走到右下角。请设计一个算法，计算机器人有多少种走法。</p>\\n<p>给定两个正整数int <strong>x</strong>,int <strong>y</strong>，请返回机器人的走法数目。保证x＋y小于等于12。</p>\\n<p>测试样例：</p>\\n<pre><code>2,2\\n返回：2\\n</code></pre>\\n</blockquote>\\n<p>刚开始可能不清楚怎么用DP，直到我看到<strong>“只能向右或向下走”</strong>，这句话心想，嘿，最后一格有多少种走法，不就是要么从上面下来的走法，要么从左边过来的么走法么，这俩的走法加起来就是最后一格的走法，于是马上得出：<code>F(2，2)=F（1，2）+F（2，1）</code>，这是<strong>最优子结构</strong></p>\\n<p>然后一切的事情都迎刃而解了，<strong>边界</strong>：</p>\\n<ol>\\n<li><code>F（0，0）=0</code></li>\\n<li>当x=0 || y=0时<code>F（x，y）=1</code></li>\\n</ol>\\n<p><strong>状态转移方程：</strong><code>F(x，y)=F（x，y - 1）+F（x - 1，y）</code></p>\\n<p>接下来不多BB了，DP三连：</p>\\n<pre><code class=\\\"hljs language-java\\\"><span class=\\\"hljs-keyword\\\">private</span> <span class=\\\"hljs-type\\\">int</span> <span class=\\\"hljs-title function_\\\">countWays</span><span class=\\\"hljs-params\\\">(<span class=\\\"hljs-type\\\">int</span> x, <span class=\\\"hljs-type\\\">int</span> y)</span> {\\n    <span class=\\\"hljs-keyword\\\">if</span> (x == <span class=\\\"hljs-number\\\">0</span> || y == <span class=\\\"hljs-number\\\">0</span>) {\\n        <span class=\\\"hljs-keyword\\\">return</span> <span class=\\\"hljs-number\\\">0</span>;\\n    } <span class=\\\"hljs-keyword\\\">else</span> <span class=\\\"hljs-keyword\\\">if</span> (x == <span class=\\\"hljs-number\\\">1</span> || y == <span class=\\\"hljs-number\\\">1</span>) {\\n        <span class=\\\"hljs-keyword\\\">return</span> <span class=\\\"hljs-number\\\">1</span>;\\n    }\\n    <span class=\\\"hljs-keyword\\\">return</span> countWays(x - <span class=\\\"hljs-number\\\">1</span>, y) + countWays(x, y - <span class=\\\"hljs-number\\\">1</span>);\\n}\\n</code></pre>\\n<p>这是递归</p>\\n<pre><code class=\\\"hljs language-java\\\"><span class=\\\"hljs-keyword\\\">private</span> <span class=\\\"hljs-type\\\">int</span> <span class=\\\"hljs-title function_\\\">countWaysMemo</span><span class=\\\"hljs-params\\\">(<span class=\\\"hljs-type\\\">int</span> x, <span class=\\\"hljs-type\\\">int</span> y)</span> {\\n    <span class=\\\"hljs-type\\\">int</span>[][] memo = <span class=\\\"hljs-keyword\\\">new</span> <span class=\\\"hljs-title class_\\\">int</span>[x][y];\\n    <span class=\\\"hljs-keyword\\\">for</span> (<span class=\\\"hljs-type\\\">int</span> <span class=\\\"hljs-variable\\\">i</span> <span class=\\\"hljs-operator\\\">=</span> <span class=\\\"hljs-number\\\">0</span>; i &lt; x; i++) {\\n        <span class=\\\"hljs-keyword\\\">for</span> (<span class=\\\"hljs-type\\\">int</span> <span class=\\\"hljs-variable\\\">j</span> <span class=\\\"hljs-operator\\\">=</span> <span class=\\\"hljs-number\\\">0</span>; j &lt; y; j++) {\\n            <span class=\\\"hljs-keyword\\\">if</span> (i == <span class=\\\"hljs-number\\\">0</span> && j == <span class=\\\"hljs-number\\\">0</span>) {\\n                memo[i][j] = <span class=\\\"hljs-number\\\">0</span>;\\n            } <span class=\\\"hljs-keyword\\\">else</span> <span class=\\\"hljs-keyword\\\">if</span> (i == <span class=\\\"hljs-number\\\">0</span> || j == <span class=\\\"hljs-number\\\">0</span>) {\\n                memo[i][j] = <span class=\\\"hljs-number\\\">1</span>;\\n            } <span class=\\\"hljs-keyword\\\">else</span> {\\n                memo[i][j] = memo[i - <span class=\\\"hljs-number\\\">1</span>][j] + memo[i][j - <span class=\\\"hljs-number\\\">1</span>];\\n            }\\n        }\\n    }\\n    <span class=\\\"hljs-keyword\\\">return</span> memo[x - <span class=\\\"hljs-number\\\">1</span>][y - <span class=\\\"hljs-number\\\">1</span>];\\n}\\n</code></pre>\\n<p>这是备忘录</p>\\n<pre><code class=\\\"hljs language-java\\\"><span class=\\\"hljs-keyword\\\">private</span> <span class=\\\"hljs-type\\\">int</span> <span class=\\\"hljs-title function_\\\">countWaysDp</span><span class=\\\"hljs-params\\\">(<span class=\\\"hljs-type\\\">int</span> x, <span class=\\\"hljs-type\\\">int</span> y)</span> {\\n    <span class=\\\"hljs-type\\\">int</span>[] pre = <span class=\\\"hljs-keyword\\\">new</span> <span class=\\\"hljs-title class_\\\">int</span>[x];\\n    <span class=\\\"hljs-type\\\">int</span>[] now = <span class=\\\"hljs-keyword\\\">new</span> <span class=\\\"hljs-title class_\\\">int</span>[x];\\n    <span class=\\\"hljs-keyword\\\">for</span> (<span class=\\\"hljs-type\\\">int</span> <span class=\\\"hljs-variable\\\">i</span> <span class=\\\"hljs-operator\\\">=</span> <span class=\\\"hljs-number\\\">1</span>; i &lt; x; i++) {\\n        pre[i] = <span class=\\\"hljs-number\\\">1</span>;\\n    }\\n    <span class=\\\"hljs-keyword\\\">for</span> (<span class=\\\"hljs-type\\\">int</span> <span class=\\\"hljs-variable\\\">i</span> <span class=\\\"hljs-operator\\\">=</span> <span class=\\\"hljs-number\\\">1</span>; i &lt; y; i++) {\\n        <span class=\\\"hljs-keyword\\\">for</span> (<span class=\\\"hljs-type\\\">int</span> <span class=\\\"hljs-variable\\\">j</span> <span class=\\\"hljs-operator\\\">=</span> <span class=\\\"hljs-number\\\">0</span>; j &lt; x; j++) {\\n            <span class=\\\"hljs-keyword\\\">if</span> (j == <span class=\\\"hljs-number\\\">0</span>) {\\n                now[j] = <span class=\\\"hljs-number\\\">1</span>;\\n            } <span class=\\\"hljs-keyword\\\">else</span> {\\n                now[j] = now[j - <span class=\\\"hljs-number\\\">1</span>] + pre[j];\\n            }\\n        }\\n        System.arraycopy(now, <span class=\\\"hljs-number\\\">0</span>, pre, <span class=\\\"hljs-number\\\">0</span>, x);\\n    }\\n    <span class=\\\"hljs-keyword\\\">return</span> now[x - <span class=\\\"hljs-number\\\">1</span>];\\n}\\n</code></pre>\\n<p>DP</p>\\n<p>这道题是我第一道按照经典的DP三连的方法独立做出来的，稍微和头3例不同点，但是模式几乎一模一样，但是因为有2个输入，所以递归法的时间复杂度暂时先不好推，但是DP的时间复杂度是<strong>O(xy)<strong>，空间是</strong>O(2x)</strong></p>\\n<h4 id=\\\"4：币值最大化问题\\\">4：币值最大化问题</h4>\\n<blockquote>\\n<p>来源：紫皮书</p>\\n<p>给定一排n个硬币，其面值均为正数c1，c2，...，cn，这些整数不一定两两不同。请问如何选择硬币，使得在其原始位置互不相邻的情况下，所选的硬币币值之和最大。</p>\\n</blockquote>\\n<p>分析：</p>\\n<p>题目里面有一句很关键的话：<strong>“使得在其原始位置互不相邻的情况下”</strong>，那我从递归的角度去看：最后一个硬币和F（n），可能的值只有F（n-1）和F（n-2）+cn，这里又有一点不同了，这里是递归选最大值，那么状态转移方程也比较明显了：<strong>F（n）=Max（F（n-1），F（n-2）+cn）</strong></p>\\n<p>来，试着一步到位：</p>\\n<pre><code class=\\\"hljs language-java\\\"><span class=\\\"hljs-keyword\\\">private</span> <span class=\\\"hljs-keyword\\\">static</span> <span class=\\\"hljs-type\\\">int</span> <span class=\\\"hljs-title function_\\\">coinRowDp</span><span class=\\\"hljs-params\\\">(<span class=\\\"hljs-type\\\">int</span>[] coins)</span> {\\n    <span class=\\\"hljs-type\\\">int</span> <span class=\\\"hljs-variable\\\">n</span> <span class=\\\"hljs-operator\\\">=</span> <span class=\\\"hljs-number\\\">2</span>;\\n    <span class=\\\"hljs-type\\\">int</span> <span class=\\\"hljs-variable\\\">f2</span> <span class=\\\"hljs-operator\\\">=</span> <span class=\\\"hljs-number\\\">0</span>;\\n    <span class=\\\"hljs-type\\\">int</span> <span class=\\\"hljs-variable\\\">f1</span> <span class=\\\"hljs-operator\\\">=</span> coins[<span class=\\\"hljs-number\\\">0</span>];\\n    <span class=\\\"hljs-type\\\">int</span> <span class=\\\"hljs-variable\\\">fn</span> <span class=\\\"hljs-operator\\\">=</span> <span class=\\\"hljs-number\\\">0</span>;\\n    <span class=\\\"hljs-keyword\\\">while</span> (n &lt; coins.length + <span class=\\\"hljs-number\\\">1</span>) {\\n        fn = Math.max(f1, f2 + coins[n - <span class=\\\"hljs-number\\\">1</span>]);\\n        f2 = f1;\\n        f1 = fn;\\n        n += <span class=\\\"hljs-number\\\">1</span>;\\n    }\\n    <span class=\\\"hljs-keyword\\\">return</span> fn;\\n}\\n</code></pre>\\n<p>这里稍微有一点点绕，我们先解释一下<code>F（n）=Max（F（n-1），F（n-2）+cn）</code>，他代表的是我如果要拿第n个选择可能是什么，它可能是拿第n个硬币+第n-2个硬币，有可能是，不拿第n个硬币，拿n-1个，我们来演算一遍，假设有硬币<code>[5，1，2，10，6，2]</code>：</p>\\n<ol>\\n<li><code>F(0)</code>：一个硬币也不拿，币值<code>c0=0</code>；</li>\\n<li><code>F(1)</code>：考虑前1个硬币，拿或者不拿的最大币值，当然是拿了：<code>c1=coins[0]</code>，5</li>\\n<li><code>F(2)</code>：考虑前2个硬币，拿或者不拿第2个硬币，这个选择相当于：选<code>F(1)</code>，或者<code>c2+F(0)</code>，5</li>\\n<li><code>F(3)</code>：考虑前3个硬币，拿或者不拿第3个硬币，这个选择相当于：选<code>F(2)</code>，或者<code>F(1)+c3</code>，5+2</li>\\n<li><code>F(4)</code>：考虑前4个硬币，那或者不拿第4个硬币，这个选择相当于：选<code>F(3)</code>，或者<code>F(2)+c4</code>，5+10</li>\\n<li><code>F(5)</code>：考虑前5个硬币，那或者不拿第5个硬币，这个选择相当于：选<code>F(4)</code>，或者<code>F(3)+c5</code>，5+10</li>\\n<li><code>F(6)</code>：考虑前6个硬币，那或者不拿第6个硬币，这个选择相当于：选<code>F(5)</code>，或者<code>F(4)+c6</code>，5+10+2</li>\\n</ol>\\n<p>这么来说的话，一目了然了吧？其中f1代表的是F(n-1)，f2代表F(n-2)</p>\\n<h4 id=\\\"5：硬币找零问题\\\">5：硬币找零问题</h4>\\n<blockquote>\\n<p>有硬币d1-dj，且d1 &lt; d2 &lt; d3 &lt; ... &lt; dj，其中d1=1</p>\\n<p>，需要找零n，求最少的硬币数；</p>\\n<p>比如有硬币1，3，4；找零6，输出2（两个3硬币）</p>\\n</blockquote>\\n<p>这道题还是递归考虑，定义<code>F(n)</code>为找n需要的最少硬币数，那么<code>F(6)</code>那么我最后一颗硬币有3种取法：</p>\\n<ol>\\n<li>我可以取1，那么<code>F(6)=F(6-1)+1</code>，也就是找零5的时候所需最少硬币数+1</li>\\n<li>我可以取3，那么<code>F(6)=F(6-3)+1</code>，</li>\\n<li>我可以取4，那么<code>F(6)=F(6-4)+1</code>，</li>\\n</ol>\\n<p>这几种取法取最小的硬币数，再比如<code>F(3)</code>有如下取法：<code>F(3)=F(3-1)+1</code>或者<code>F(3)=F(3-3)+1</code>，在这里我们可以触摸到<strong>边界</strong>，<code>F(0)=0</code>，顺便补上<code>F(1)=1</code>（因为d1=1），于是最优子结构出来了，用单一的式子可能难以描述：<code>F(n)=min{F(n-dj)}+1</code>，<strong>其中j从1开始，一直到dj&lt;=n</strong></p>\\n<p>为什么我会提它？它有两点值得我们注意：</p>\\n<ol>\\n<li>你发现他即使到了F(6)，也还是会用到F(2)，所以这个DP可不能简化掉备忘录，备忘录是必须的；</li>\\n<li>申请备忘录的技巧，数组的下标和问题中的自然数总是会引起严重的逻辑偏差问题，所以申请备忘录的时候，还是严格对齐自然数吧，详细的我们贴了代码再说；</li>\\n</ol>\\n<pre><code class=\\\"hljs language-java\\\"><span class=\\\"hljs-keyword\\\">private</span> <span class=\\\"hljs-keyword\\\">static</span> <span class=\\\"hljs-type\\\">int</span> <span class=\\\"hljs-title function_\\\">changeMaking</span><span class=\\\"hljs-params\\\">(<span class=\\\"hljs-type\\\">int</span>[] coins, <span class=\\\"hljs-type\\\">int</span> n)</span> {\\n    <span class=\\\"hljs-type\\\">int</span>[] fn = <span class=\\\"hljs-keyword\\\">new</span> <span class=\\\"hljs-title class_\\\">int</span>[n + <span class=\\\"hljs-number\\\">1</span>];\\n    fn[<span class=\\\"hljs-number\\\">0</span>] = <span class=\\\"hljs-number\\\">0</span>;\\n    fn[<span class=\\\"hljs-number\\\">1</span>] = <span class=\\\"hljs-number\\\">1</span>;\\n    <span class=\\\"hljs-keyword\\\">for</span> (<span class=\\\"hljs-type\\\">int</span> <span class=\\\"hljs-variable\\\">i</span> <span class=\\\"hljs-operator\\\">=</span> <span class=\\\"hljs-number\\\">2</span>; i &lt; n + <span class=\\\"hljs-number\\\">1</span>; i++) {\\n        <span class=\\\"hljs-type\\\">int</span> <span class=\\\"hljs-variable\\\">temp</span> <span class=\\\"hljs-operator\\\">=</span> n;\\n        <span class=\\\"hljs-type\\\">int</span> <span class=\\\"hljs-variable\\\">coinIndex</span> <span class=\\\"hljs-operator\\\">=</span> <span class=\\\"hljs-number\\\">0</span>;\\n        <span class=\\\"hljs-keyword\\\">while</span> (coinIndex &lt; coins.length && i &gt;= coins[coinIndex]) {\\n            temp = Math.min(fn[i - coins[coinIndex]], temp);\\n            coinIndex++;\\n        }\\n        fn[i] = temp + <span class=\\\"hljs-number\\\">1</span>;\\n    }\\n    <span class=\\\"hljs-keyword\\\">return</span> fn[n];\\n}\\n</code></pre>\\n<p>可以看到，我们的fn是申请的n+1个空间，为什么？因为我们要严格对齐自然数和题意，防止逻辑错乱，比如说你真的不能偷懒去用<code>fn[0]</code>去代表<code>F(1)</code></p>\\n<h4 id=\\\"6：硬币收集问题\\\">6：硬币收集问题</h4>\\n<blockquote>\\n<p>在n*m格木板中放有一些硬币，每格的硬币数目最多为1个。机器人从木板左上方走到右下方，只能往下走或者往右走一格，求机器人可能收集到的最大硬币数。</p>\\n<p>输入：一个n*m的二维数组，元素值为1代表有硬币，0代表没有；</p>\\n<p>输出：最大硬币数</p>\\n</blockquote>\\n<pre><code class=\\\"hljs language-java\\\"><span class=\\\"hljs-keyword\\\">public</span> <span class=\\\"hljs-keyword\\\">static</span> <span class=\\\"hljs-keyword\\\">void</span> <span class=\\\"hljs-title function_\\\">main</span><span class=\\\"hljs-params\\\">(String[] args)</span> {\\n    <span class=\\\"hljs-type\\\">int</span>[][] coinMap = {{<span class=\\\"hljs-number\\\">0</span>,<span class=\\\"hljs-number\\\">0</span>,<span class=\\\"hljs-number\\\">0</span>,<span class=\\\"hljs-number\\\">0</span>,<span class=\\\"hljs-number\\\">1</span>,<span class=\\\"hljs-number\\\">0</span>},{<span class=\\\"hljs-number\\\">0</span>,<span class=\\\"hljs-number\\\">1</span>,<span class=\\\"hljs-number\\\">0</span>,<span class=\\\"hljs-number\\\">1</span>,<span class=\\\"hljs-number\\\">0</span>,<span class=\\\"hljs-number\\\">0</span>},{<span class=\\\"hljs-number\\\">0</span>,<span class=\\\"hljs-number\\\">0</span>,<span class=\\\"hljs-number\\\">0</span>,<span class=\\\"hljs-number\\\">1</span>,<span class=\\\"hljs-number\\\">0</span>,<span class=\\\"hljs-number\\\">1</span>},{<span class=\\\"hljs-number\\\">0</span>,<span class=\\\"hljs-number\\\">0</span>,<span class=\\\"hljs-number\\\">1</span>,<span class=\\\"hljs-number\\\">0</span>,<span class=\\\"hljs-number\\\">0</span>,<span class=\\\"hljs-number\\\">1</span>},{<span class=\\\"hljs-number\\\">1</span>,<span class=\\\"hljs-number\\\">0</span>,<span class=\\\"hljs-number\\\">0</span>,<span class=\\\"hljs-number\\\">0</span>,<span class=\\\"hljs-number\\\">1</span>,<span class=\\\"hljs-number\\\">0</span>}};\\n    System.out.println(collectionMemo(coinMap));\\n    System.out.println(collectionDp(coinMap));\\n}\\n\\n<span class=\\\"hljs-keyword\\\">private</span> <span class=\\\"hljs-keyword\\\">static</span> <span class=\\\"hljs-type\\\">int</span> <span class=\\\"hljs-title function_\\\">collectionMemo</span><span class=\\\"hljs-params\\\">(<span class=\\\"hljs-type\\\">int</span>[][] coinMap)</span> {\\n    <span class=\\\"hljs-type\\\">int</span>[][] fn = <span class=\\\"hljs-keyword\\\">new</span> <span class=\\\"hljs-title class_\\\">int</span>[coinMap.length][coinMap[<span class=\\\"hljs-number\\\">0</span>].length];\\n    fn[<span class=\\\"hljs-number\\\">0</span>][<span class=\\\"hljs-number\\\">0</span>] = coinMap[<span class=\\\"hljs-number\\\">0</span>][<span class=\\\"hljs-number\\\">0</span>];\\n    <span class=\\\"hljs-keyword\\\">for</span> (<span class=\\\"hljs-type\\\">int</span> <span class=\\\"hljs-variable\\\">i</span> <span class=\\\"hljs-operator\\\">=</span> <span class=\\\"hljs-number\\\">0</span>; i &lt; coinMap.length; i++) {\\n        <span class=\\\"hljs-keyword\\\">for</span> (<span class=\\\"hljs-type\\\">int</span> <span class=\\\"hljs-variable\\\">j</span> <span class=\\\"hljs-operator\\\">=</span> <span class=\\\"hljs-number\\\">0</span>; j &lt; coinMap[<span class=\\\"hljs-number\\\">0</span>].length; j++) {\\n            <span class=\\\"hljs-type\\\">int</span> <span class=\\\"hljs-variable\\\">n1</span> <span class=\\\"hljs-operator\\\">=</span> <span class=\\\"hljs-number\\\">0</span>;\\n            <span class=\\\"hljs-type\\\">int</span> <span class=\\\"hljs-variable\\\">m1</span> <span class=\\\"hljs-operator\\\">=</span> <span class=\\\"hljs-number\\\">0</span>;\\n            <span class=\\\"hljs-keyword\\\">if</span> (i != <span class=\\\"hljs-number\\\">0</span>) {\\n                n1 = fn[i - <span class=\\\"hljs-number\\\">1</span>][j];\\n            }\\n            <span class=\\\"hljs-keyword\\\">if</span> (j != <span class=\\\"hljs-number\\\">0</span>) {\\n                m1 = fn[i][j - <span class=\\\"hljs-number\\\">1</span>];\\n            }\\n            fn[i][j] = Math.max(n1, m1) + coinMap[i][j];\\n        }\\n    }\\n    <span class=\\\"hljs-keyword\\\">return</span> fn[coinMap.length - <span class=\\\"hljs-number\\\">1</span>][coinMap[<span class=\\\"hljs-number\\\">0</span>].length - <span class=\\\"hljs-number\\\">1</span>];\\n}\\n\\n<span class=\\\"hljs-keyword\\\">private</span> <span class=\\\"hljs-keyword\\\">static</span> <span class=\\\"hljs-type\\\">int</span> <span class=\\\"hljs-title function_\\\">collectionDp</span><span class=\\\"hljs-params\\\">(<span class=\\\"hljs-type\\\">int</span>[][] coinMap)</span> {\\n    <span class=\\\"hljs-type\\\">int</span>[] preFn = <span class=\\\"hljs-keyword\\\">new</span> <span class=\\\"hljs-title class_\\\">int</span>[coinMap[<span class=\\\"hljs-number\\\">0</span>].length];\\n    preFn[<span class=\\\"hljs-number\\\">0</span>] = coinMap[<span class=\\\"hljs-number\\\">0</span>][<span class=\\\"hljs-number\\\">0</span>];\\n    <span class=\\\"hljs-keyword\\\">for</span> (<span class=\\\"hljs-type\\\">int</span> <span class=\\\"hljs-variable\\\">i</span> <span class=\\\"hljs-operator\\\">=</span> <span class=\\\"hljs-number\\\">1</span>; i &lt; preFn.length; i++) {\\n        preFn[i] = preFn[i - <span class=\\\"hljs-number\\\">1</span>] + coinMap[<span class=\\\"hljs-number\\\">0</span>][i];\\n    }\\n    <span class=\\\"hljs-type\\\">int</span> m1;\\n    <span class=\\\"hljs-type\\\">int</span> <span class=\\\"hljs-variable\\\">fn</span> <span class=\\\"hljs-operator\\\">=</span> <span class=\\\"hljs-number\\\">0</span>;\\n    <span class=\\\"hljs-keyword\\\">for</span> (<span class=\\\"hljs-type\\\">int</span> <span class=\\\"hljs-variable\\\">i</span> <span class=\\\"hljs-operator\\\">=</span> <span class=\\\"hljs-number\\\">1</span>; i &lt; coinMap.length; i++) {\\n        m1 = preFn[<span class=\\\"hljs-number\\\">0</span>];\\n        <span class=\\\"hljs-keyword\\\">for</span> (<span class=\\\"hljs-type\\\">int</span> <span class=\\\"hljs-variable\\\">j</span> <span class=\\\"hljs-operator\\\">=</span> <span class=\\\"hljs-number\\\">1</span>; j &lt; coinMap[<span class=\\\"hljs-number\\\">0</span>].length; j++) {\\n            fn = Math.max(m1, preFn[j]) + coinMap[i][j];\\n            m1 = fn;\\n            preFn[j] = fn;\\n        }\\n    }\\n    <span class=\\\"hljs-keyword\\\">return</span> fn;\\n}\\n</code></pre>\\n<h4 id=\\\"7：-背包问题\\\">7： 背包问题</h4>\\n<blockquote>\\n<p>给定n个重量为W1,W2,W3...Wn且价值为V1,V2,V3...Vn的物品，现有一个称重为W的背包，求背包能装下物品的最大价值</p>\\n<p>具体解析参考紫皮书，把状态转移公式写出来了就没什么问题了</p>\\n</blockquote>\\n<pre><code class=\\\"hljs language-java\\\"><span class=\\\"hljs-keyword\\\">public</span> <span class=\\\"hljs-type\\\">int</span> <span class=\\\"hljs-title function_\\\">mostValuableLoading</span><span class=\\\"hljs-params\\\">(<span class=\\\"hljs-type\\\">int</span>[] iw, <span class=\\\"hljs-type\\\">int</span>[] iv, <span class=\\\"hljs-type\\\">int</span> w)</span> {\\n    <span class=\\\"hljs-type\\\">int</span>[] tmp = <span class=\\\"hljs-keyword\\\">new</span> <span class=\\\"hljs-title class_\\\">int</span>[w + <span class=\\\"hljs-number\\\">1</span>];\\n    <span class=\\\"hljs-type\\\">int</span>[] next = <span class=\\\"hljs-keyword\\\">new</span> <span class=\\\"hljs-title class_\\\">int</span>[w + <span class=\\\"hljs-number\\\">1</span>];\\n    tmp[<span class=\\\"hljs-number\\\">0</span>] = <span class=\\\"hljs-number\\\">0</span>;\\n    <span class=\\\"hljs-keyword\\\">for</span> (<span class=\\\"hljs-type\\\">int</span> <span class=\\\"hljs-variable\\\">i</span> <span class=\\\"hljs-operator\\\">=</span> <span class=\\\"hljs-number\\\">1</span>; i &lt; tmp.length; i++) {\\n        <span class=\\\"hljs-keyword\\\">if</span> (i &gt;= iw[<span class=\\\"hljs-number\\\">0</span>]) {\\n            tmp[i] = iv[<span class=\\\"hljs-number\\\">0</span>];\\n        }\\n    }\\n    <span class=\\\"hljs-comment\\\">// F (i, j) = / max(F(i - 1, j), Vi + F(i - 1, j - Wi))    j - Wi &gt;= 0</span>\\n    <span class=\\\"hljs-comment\\\">//            \\\\ F(i - i, j)                                j - Wi &lt; 0</span>\\n    <span class=\\\"hljs-comment\\\">// i represent as item number</span>\\n    <span class=\\\"hljs-comment\\\">// j represent as weight</span>\\n    <span class=\\\"hljs-keyword\\\">for</span> (<span class=\\\"hljs-type\\\">int</span> <span class=\\\"hljs-variable\\\">i</span> <span class=\\\"hljs-operator\\\">=</span> <span class=\\\"hljs-number\\\">1</span>; i &lt; iw.length; i++) {\\n        <span class=\\\"hljs-keyword\\\">for</span> (<span class=\\\"hljs-type\\\">int</span> <span class=\\\"hljs-variable\\\">j</span> <span class=\\\"hljs-operator\\\">=</span> <span class=\\\"hljs-number\\\">0</span>; j &lt; next.length; j++) {\\n            <span class=\\\"hljs-keyword\\\">if</span> (j - iw[i] &lt; <span class=\\\"hljs-number\\\">0</span>) {\\n                next[j] = tmp[j];\\n            } <span class=\\\"hljs-keyword\\\">else</span> {\\n                next[j] = Math.max(tmp[j], iv[i] + tmp[j - iw[i]]);\\n            }\\n        }\\n        System.arraycopy(next, <span class=\\\"hljs-number\\\">0</span>, tmp, <span class=\\\"hljs-number\\\">0</span>, w + <span class=\\\"hljs-number\\\">1</span>);\\n    }\\n    <span class=\\\"hljs-keyword\\\">return</span> next[w];\\n}\\n</code></pre>\\n<h3 id=\\\"参考：\\\">参考：</h3>\\n<blockquote>\\n<p>[1]DP到金矿的参考</p>\\n<p><a href=\\\"https://www.sohu.com/a/153858619_466939\\\">https://www.sohu.com/a/153858619_466939</a>\\n《算法设计与分析基础》（紫皮书）</p>\\n<p>[2]Maximum-SubArray的参考</p>\\n<p><a href=\\\"https://blog.csdn.net/zwzsdy/article/details/80029796\\\">https://blog.csdn.net/zwzsdy/article/details/80029796</a>\\n<a href=\\\"https://www.cnblogs.com/coderJiebao/p/Algorithmofnotes27.html\\\">https://www.cnblogs.com/coderJiebao/p/Algorithmofnotes27.html</a></p>\\n</blockquote>\\n\";","export default \"<p><span id=\\\"top\\\"></span></p>\\n<h3 id=\\\"ⅳ-jetty开发指南-21嵌入式开发\\\">Ⅳ. Jetty开发指南-21.嵌入式开发</h3>\\n<ul>\\n<li><ol start=\\\"21\\\">\\n<li><a href=\\\"#21%E5%B5%8C%E5%85%A5%E5%BC%8F%E5%BC%80%E5%8F%91\\\">嵌入式开发</a></li>\\n</ol>\\n<ul>\\n<li><a href=\\\"#211jetty%E7%9A%84%E5%B5%8C%E5%85%A5%E5%BC%8Fhello-world\\\">Jetty的嵌入式Hello World</a><ul>\\n<li><a href=\\\"#2111%E4%B8%8B%E8%BD%BDjar%E5%8C%85\\\">下载Jar包</a></li>\\n<li><a href=\\\"#2112hello-world%E6%A0%97%E5%AD%90\\\">Hello World栗子</a></li>\\n<li><a href=\\\"#2113%E7%BC%96%E8%AF%91hello-world%E6%A0%97%E5%AD%90\\\">编译Hello World栗子</a></li>\\n<li><a href=\\\"#2114%E8%BF%90%E8%A1%8Chandler%E5%92%8Cserver\\\">运行Handler和Server</a></li>\\n<li><a href=\\\"#2115%E4%B8%8B%E4%B8%80%E6%AD%A5\\\">下一步</a></li>\\n</ul>\\n</li>\\n<li><a href=\\\"#212jetty%E7%9A%84%E5%B5%8C%E5%85%A5%E5%BC%8F%E5%BC%80%E5%8F%91\\\">Jetty的嵌入式开发</a><ul>\\n<li><a href=\\\"#2121%E6%A6%82%E8%BF%B0\\\">概述</a></li>\\n<li><a href=\\\"#2122%E5%88%9B%E5%BB%BAserver\\\">创建Server</a></li>\\n<li><a href=\\\"#2123%E4%BD%BF%E7%94%A8handler\\\">使用Handler</a><ul>\\n<li><a href=\\\"#21231%E4%B8%80%E4%B8%AAhandler%E7%9A%84hello-world\\\">一个Handler的Hello World</a></li>\\n<li><a href=\\\"#21232%E8%BF%90%E8%A1%8Chelloworldhandler\\\">运行HelloWorldHandler</a></li>\\n<li><a href=\\\"#21233handler-collections%E5%92%8Cwrappers\\\">Handler Collections和Wrappers</a></li>\\n<li><a href=\\\"#21234scoped-handlers\\\">Scoped Handlers</a></li>\\n<li><a href=\\\"#21235resource-handler\\\">Resource Handler</a></li>\\n</ul>\\n</li>\\n<li><a href=\\\"#2124%E5%B5%8C%E5%85%A5connectors\\\">嵌入Connectors</a><ul>\\n<li><a href=\\\"#21241%E4%B8%80%E4%B8%AAconnectors\\\">一个Connectors</a></li>\\n<li><a href=\\\"#21242%E5%A4%9A%E4%B8%AAconnectors\\\">多个Connectors</a></li>\\n</ul>\\n</li>\\n<li><a href=\\\"#2125%E5%B5%8C%E5%85%A5servlets\\\">嵌入Servlets</a></li>\\n<li><a href=\\\"#2126%E5%B5%8C%E5%85%A5contexts\\\">嵌入Contexts</a></li>\\n<li><a href=\\\"#2127%E5%B5%8C%E5%85%A5servletcontexts\\\">嵌入ServletContexts</a></li>\\n<li><a href=\\\"#2128%E5%B5%8C%E5%85%A5web%E5%BA%94%E7%94%A8%E7%A8%8B%E5%BA%8F\\\">嵌入Web应用程序</a></li>\\n<li><a href=\\\"#2129%E5%83%8Fjettyxml%E4%B8%80%E6%A0%B7%E8%BF%9B%E8%A1%8C%E5%B5%8C%E5%85%A5%E5%BC%8F%E5%BC%80%E5%8F%91\\\">像JettyXML一样进行嵌入式开发</a></li>\\n</ul>\\n</li>\\n<li><a href=\\\"#213%E5%B5%8C%E5%85%A5%E5%BC%8F%E5%BC%80%E5%8F%91%E7%9A%84%E6%A0%97%E5%AD%90\\\">嵌入式开发的栗子</a><ul>\\n<li><a href=\\\"#2131%E7%AE%80%E5%8D%95%E7%9A%84%E6%96%87%E4%BB%B6%E6%9C%8D%E5%8A%A1%E5%99%A8\\\">简单的文件服务器</a></li>\\n<li><a href=\\\"#2132%E5%8F%AF%E5%88%86%E5%B8%83%E7%9A%84%E6%96%87%E4%BB%B6%E6%9C%8D%E5%8A%A1%E5%99%A8\\\">可分布的文件服务器</a></li>\\n<li><a href=\\\"#2133%E5%A4%9Aconnectors\\\">多Connectors</a></li>\\n<li><a href=\\\"#2134%E5%AE%89%E5%85%A8%E6%96%B9%E9%9D%A2handler%E7%9A%84hello-world\\\">安全方面Handler的Hello World</a></li>\\n<li><a href=\\\"#2135%E6%9C%80%E7%AE%80%E5%8D%95%E7%9A%84servlet\\\">最简单的Servlet</a></li>\\n<li><a href=\\\"#2136web-application\\\">Web Application</a></li>\\n<li><a href=\\\"#2137web-application%E4%BB%A5%E5%8F%8Ajsp\\\">Web Application以及JSP</a></li>\\n</ul>\\n</li>\\n</ul>\\n</li>\\n</ul>\\n<hr>\\n<p><span id=\\\"21嵌入式开发\\\"></span></p>\\n<h3 id=\\\"21、嵌入式开发\\\">21、嵌入式开发</h3>\\n<ul>\\n<li>21.1、<a href=\\\"#211jetty%E7%9A%84%E5%B5%8C%E5%85%A5%E5%BC%8Fhello-world\\\">Jetty的嵌入式Hello World</a></li>\\n<li>21.2、<a href=\\\"#212jetty%E7%9A%84%E5%B5%8C%E5%85%A5%E5%BC%8F%E5%BC%80%E5%8F%91\\\">Jetty的嵌入式开发</a></li>\\n<li>21.3、<a href=\\\"#213%E5%B5%8C%E5%85%A5%E5%BC%8F%E5%BC%80%E5%8F%91%E7%9A%84%E6%A0%97%E5%AD%90\\\">嵌入式开发的栗子</a></li>\\n</ul>\\n<p><span id=\\\"211jetty的嵌入式hello-world\\\"></span></p>\\n<h4 id=\\\"211、jetty的嵌入式helloworld\\\">21.1、Jetty的嵌入式HelloWorld</h4>\\n<ul>\\n<li>21.1.1、<a href=\\\"#2111%E4%B8%8B%E8%BD%BDjar%E5%8C%85\\\">下载Jar包</a></li>\\n<li>21.1.2、<a href=\\\"#2112hello-world%E6%A0%97%E5%AD%90\\\">Hello World栗子</a></li>\\n<li>21.1.3、<a href=\\\"#2113%E7%BC%96%E8%AF%91hello-world%E6%A0%97%E5%AD%90\\\">编译Hello World栗子</a></li>\\n<li>21.1.4、<a href=\\\"#2114%E8%BF%90%E8%A1%8Chandler%E5%92%8Cserver\\\">运行Handler和Server</a></li>\\n<li>21.1.5、<a href=\\\"#2115%E4%B8%8B%E4%B8%80%E6%AD%A5\\\">下一步</a></li>\\n</ul>\\n<p><span id=\\\"2111下载jar包\\\"></span></p>\\n<h5 id=\\\"2111、下载jar包\\\">21.1.1、下载Jar包</h5>\\n<p>Jetty把整体分解为许多的jar包，我们可以按需导入依赖。典型的做法是使用Maven去管理jar包，然而本节教程是使用的整体jar包，它包含了所有的Jetty服务。你可以通过curl或者浏览器去手动下载这个完整的jar包<code>jetty-all.jar</code>：<a href=\\\"http://central.maven.org/maven2/org/eclipse/jetty/aggregate/jetty-all/9.4.6.v20170531/jetty-all-9.4.6.v20170531-uber.jar%E3%80%82\\\">http://central.maven.org/maven2/org/eclipse/jetty/aggregate/jetty-all/9.4.6.v20170531/jetty-all-9.4.6.v20170531-uber.jar。</a></p>\\n<blockquote>\\n<p><strong>NOTE：</strong></p>\\n<p>这个地址拒绝使用wget去下载，你可以使用curl的方式下载。</p>\\n</blockquote>\\n<blockquote>\\n<p><strong>注意：</strong></p>\\n<p>jetty-all.jar包只是在本节作举例假设的引用，千万不要在教程以外的地方使用。你可以在后面的Maven章节了解到如何使用Maven去管理你的项目依赖。</p>\\n</blockquote>\\n<p>按照以下的方式使用curl下载：</p>\\n<pre><code>&gt; mkdir Demo\\n&gt; cd Demo\\n&gt; curl -o jetty-all-uber.jar http://central.maven.org/maven2/org/eclipse/jetty/aggregate/jetty-all/9.4.6.v20170531/jetty-all-9.4.6.v20170531-uber.jar\\n</code></pre>\\n<p><a href=\\\"#top\\\">回到顶部</a>\\n<br></p>\\n<p><span id=\\\"2112hello-world栗子\\\"></span></p>\\n<h5 id=\\\"2112、hello-world栗子\\\">21.1.2、Hello World栗子</h5>\\n<p>这个栗子中包含了许多关于JettyAPI的用例，这个教程会在主函数里面用到一个简单的Handler的Hello World来运行服务器：</p>\\n<pre><code>package org.eclipse.jetty.embedded;\\n\\nimport java.io.IOException;\\n\\nimport javax.servlet.ServletException;\\nimport javax.servlet.http.HttpServletRequest;\\nimport javax.servlet.http.HttpServletResponse;\\n\\nimport org.eclipse.jetty.server.Request;\\nimport org.eclipse.jetty.server.Server;\\nimport org.eclipse.jetty.server.handler.AbstractHandler;\\n\\npublic class HelloWorld extends AbstractHandler\\n{\\n    @Override\\n    public void handle( String target,\\n                        Request baseRequest,\\n                        HttpServletRequest request,\\n                        HttpServletResponse response ) throws IOException,\\n                                                      ServletException\\n    {\\n        // Declare response encoding and types\\n        response.setContentType(&quot;text/html; charset=utf-8&quot;);\\n\\n        // Declare response status code\\n        response.setStatus(HttpServletResponse.SC_OK);\\n\\n        // Write back response\\n        response.getWriter().println(&quot;&lt;h1&gt;Hello World&lt;/h1&gt;&quot;);\\n\\n        // Inform jetty that this request has now been handled\\n        baseRequest.setHandled(true);\\n    }\\n\\n    public static void main( String[] args ) throws Exception\\n    {\\n        Server server = new Server(8080);\\n        server.setHandler(new HelloWorld());\\n\\n        server.start();\\n        server.join();\\n    }\\n}\\n</code></pre>\\n<p><a href=\\\"#top\\\">回到顶部</a>\\n<br></p>\\n<p><span id=\\\"2113编译hello-world栗子\\\"></span></p>\\n<h5 id=\\\"2113、编译hello-world栗子\\\">21.1.3、编译Hello World栗子</h5>\\n<pre><code>&gt; mkdir classes\\n&gt; javac -d classes -cp jetty-all-uber.jar HelloWorld.java\\n</code></pre>\\n<br>\\n\\n<p><span id=\\\"2114运行handler和server\\\"></span></p>\\n<h5 id=\\\"2114、运行handler和server\\\">21.1.4、运行Handler和Server</h5>\\n<pre><code>&gt; java -cp classes:jetty-all-uber.jar org.eclipse.jetty.embedded.HelloWorld\\n</code></pre>\\n<br>\\n\\n<p><span id=\\\"2115下一步\\\"></span></p>\\n<h5 id=\\\"2115、下一步\\\">21.1.5、下一步</h5>\\n<p>如果你想了解更多的内容，请按照下面的步骤来：</p>\\n<ul>\\n<li>跟着<a href=\\\"#212jetty%E7%9A%84%E5%B5%8C%E5%85%A5%E5%BC%8F%E5%BC%80%E5%8F%91\\\">21.2、Jetty的嵌入式开发</a>继续学习。</li>\\n<li>探索整个<a href=\\\"#http://www.eclipse.org/jetty/javadoc/9.4.6.v20170531/\\\">Jetty javadoc</a>。</li>\\n<li>考虑使用<a href=\\\"#\\\">Jetty和Maven</a>去管理你的项目依赖。</li>\\n</ul>\\n<p><a href=\\\"#top\\\">回到顶部</a></p>\\n<hr>\\n<p><span id=\\\"212jetty的嵌入式开发\\\"></span></p>\\n<h4 id=\\\"212、jetty的嵌入式开发\\\">21.2、Jetty的嵌入式开发</h4>\\n<ul>\\n<li>21.2.1、<a href=\\\"#2121%E6%A6%82%E8%BF%B0\\\">概述</a></li>\\n<li>21.2.2、<a href=\\\"#2122%E5%88%9B%E5%BB%BAserver\\\">创建Server</a></li>\\n<li>21.2.3、<a href=\\\"#2123%E4%BD%BF%E7%94%A8handler\\\">使用Handler</a></li>\\n<li>21.2.4、<a href=\\\"#2124%E5%B5%8C%E5%85%A5connectors\\\">嵌入Connectors</a></li>\\n<li>21.2.5、<a href=\\\"#2125%E5%B5%8C%E5%85%A5servlets\\\">嵌入Servlets</a></li>\\n<li>21.2.6、<a href=\\\"#2126%E5%B5%8C%E5%85%A5contexts\\\">嵌入Contexts</a></li>\\n<li>21.2.7、<a href=\\\"#2127%E5%B5%8C%E5%85%A5servletcontexts\\\">嵌入ServletContexts</a></li>\\n<li>21.2.8、<a href=\\\"#2128%E5%B5%8C%E5%85%A5web%E5%BA%94%E7%94%A8%E7%A8%8B%E5%BA%8F\\\">嵌入Web应用程序</a></li>\\n<li>21.2.9、<a href=\\\"#2129%E5%83%8Fjettyxml%E4%B8%80%E6%A0%B7%E8%BF%9B%E8%A1%8C%E5%B5%8C%E5%85%A5%E5%BC%8F%E5%BC%80%E5%8F%91\\\">像JettyXML一样进行嵌入式开发</a></li>\\n</ul>\\n<p>Jetty有一句口号“不要把你的应用部署到Jetty，要把Jetty部署到你的应用中！”，Jetty被设计成是可以被实例化并且拿来使用的一个组件，就像一个Java的POJO对象一样。把Jetty服务嵌入到你的应用中，这意味着嵌入一个HTTP模块进你的应用中去。</p>\\n<p>这个教程会一步步地教你如何用最简单的方式使用Jetty服务器去运行多个Web应用。栗子中的许多代码来自于Jetty项目的源码。</p>\\n<p><span id=\\\"2121概述\\\"></span></p>\\n<h5 id=\\\"2121、概述\\\">21.2.1、概述</h5>\\n<p>想要嵌入Jetty，以下是标准的步骤，在栗子里面会有详细的说明：</p>\\n<ol>\\n<li>创建Server实例</li>\\n<li>添加/配置Connectors</li>\\n<li>添加/配置Handlers、Contexts、Servlets</li>\\n<li>开启Server</li>\\n<li>泡杯咖啡</li>\\n</ol>\\n<br>\\n\\n<p><span id=\\\"2122创建server\\\"></span></p>\\n<h5 id=\\\"2122、创建server\\\">21.2.2、创建Server</h5>\\n<p>下面的代码会简单的向你介绍一个JettyServer：</p>\\n<pre><code>package org.eclipse.jetty.embedded;\\n\\nimport org.eclipse.jetty.server.Server;\\n\\n/**\\n * The simplest possible Jetty server.\\n */\\npublic class SimplestServer\\n{\\n    public static void main( String[] args ) throws Exception\\n    {\\n        Server server = new Server(8080);\\n        server.start();\\n        server.dumpStdErr();\\n        server.join();\\n    }\\n}\\n</code></pre>\\n<p>这会在8080端口运行一个HTTP服务器，并且没有任何服务，任何请求都会是404。\\n<a href=\\\"#top\\\">回到顶部</a>\\n<br></p>\\n<p><span id=\\\"2123使用handler\\\"></span></p>\\n<h5 id=\\\"2123、使用handler\\\">21.2.3、使用Handler</h5>\\n<ul>\\n<li>21.2.3.1、<a href=\\\"#21231%E4%B8%80%E4%B8%AAhandler%E7%9A%84hello-world\\\">一个Handler的Hello World</a></li>\\n<li>21.2.3.2、<a href=\\\"#21232%E8%BF%90%E8%A1%8Chelloworldhandler\\\">运行HelloWorldHandler</a></li>\\n<li>21.2.3.3、<a href=\\\"#21233handler-collections%E5%92%8Cwrappers\\\">Handler Collections和Wrappers</a></li>\\n<li>21.2.3.4、<a href=\\\"#21234scoped-handlers\\\">Scoped Handlers</a></li>\\n<li>21.2.3.5、<a href=\\\"#21235resource-handler\\\">Resource Handler</a></li>\\n</ul>\\n<p>为了对请求做出响应，Jetty要求你在server里面设置一个Handler，这个Handler可以：</p>\\n<ul>\\n<li>检查/修改HTTP请求</li>\\n<li>生成一个完整的HTTP响应</li>\\n<li>调用另外一个Handler（参见API：<a href=\\\"http://www.eclipse.org/jetty/javadoc/9.4.6.v20170531/org/eclipse/jetty/server/handler/HandlerWrapper.html\\\">HandlerWrapper</a>）</li>\\n<li>选择一个或多个Handler来调用（参见API：<a href=\\\"http://www.eclipse.org/jetty/javadoc/9.4.6.v20170531/org/eclipse/jetty/server/handler/HandlerCollection.html\\\">HandlerCollection</a>）</li>\\n</ul>\\n<p><a href=\\\"#top\\\">回到顶部</a>\\n<br></p>\\n<p><span id=\\\"21231一个handler的hello-world\\\"></span></p>\\n<h6 id=\\\"21231、一个handler的hello-world\\\">21.2.3.1、一个Handler的Hello World</h6>\\n<p>这是<code>HelloHandler.java</code>代码：</p>\\n<pre><code>package org.eclipse.jetty.embedded;\\n\\nimport java.io.IOException;\\nimport java.io.PrintWriter;\\n\\nimport javax.servlet.ServletException;\\nimport javax.servlet.http.HttpServletRequest;\\nimport javax.servlet.http.HttpServletResponse;\\n\\nimport org.eclipse.jetty.server.Request;\\nimport org.eclipse.jetty.server.handler.AbstractHandler;\\n\\npublic class HelloHandler extends AbstractHandler\\n{\\n    final String greeting;\\n    final String body;\\n\\n    public HelloHandler()\\n    {\\n        this(&quot;Hello World&quot;);\\n    }\\n\\n    public HelloHandler( String greeting )\\n    {\\n        this(greeting, null);\\n    }\\n\\n    public HelloHandler( String greeting, String body )\\n    {\\n        this.greeting = greeting;\\n        this.body = body;\\n    }\\n\\n    public void handle( String target,\\n                        Request baseRequest,\\n                        HttpServletRequest request,\\n                        HttpServletResponse response ) throws IOException,\\n                                                      ServletException\\n    {\\n        response.setContentType(&quot;text/html; charset=utf-8&quot;);\\n        response.setStatus(HttpServletResponse.SC_OK);\\n\\n        PrintWriter out = response.getWriter();\\n\\n        out.println(&quot;&lt;h1&gt;&quot; + greeting + &quot;&lt;/h1&gt;&quot;);\\n        if (body != null)\\n        {\\n            out.println(body);\\n        }\\n\\n        baseRequest.setHandled(true);\\n    }\\n}\\n</code></pre>\\n<p>传到handle方法的参数是：</p>\\n<ul>\\n<li>target：发起请求的目标，可以是一个URL或者发送者的name值。</li>\\n<li>baseRequest：Jetty的可变请求对象，这个对象是未经包装的。</li>\\n<li>request：不可变的请求对象，这个对象可能经过filter或者servlet包装过。</li>\\n<li>response：响应，这个对象可能经过filter或者servlet包装过。</li>\\n</ul>\\n<p>handler可以在响应的body生成之前进行响应的status设置、content-type设置、把请求标记为已处理。</p>\\n<p><a href=\\\"#top\\\">回到顶部</a>\\n<br></p>\\n<p><span id=\\\"21232运行helloworldhandler\\\"></span></p>\\n<h6 id=\\\"21232、运行helloworldhandler\\\">21.2.3.2、运行HelloWorldHandler</h6>\\n<p>为了Handler能够处理HTTP请求，你必须把它添加到Server实例中，下面这个<code>OneHandler.java</code>代码就会向你展示Jetty服务器如何才能使用HelloWorldHandler：</p>\\n<pre><code>package org.eclipse.jetty.embedded;\\n\\nimport org.eclipse.jetty.server.HttpConnectionFactory;\\nimport org.eclipse.jetty.server.Server;\\n\\npublic class OneHandler\\n{\\n    public static void main( String[] args ) throws Exception\\n    {\\n        Server server = new Server(8080);\\n        server.setHandler(new HelloHandler());\\n\\n        server.start();\\n        server.join();\\n    }\\n}\\n</code></pre>\\n<p>当有一个或多个handlers处理所有的请求的时候，一些hanlders会选择其他指定的handlers（比如，一个ContextHandlerCollection会根据context path去选择ContextHandler）；</p>\\n<p>其他handlers则使用业务逻辑去生成对应的响应（比如说，ServletHandler传递请求到一个web应用Servlet）；</p>\\n<p>还有的其他handlers会处理一些业务无关的请求响应（比如，RequestLogHandler或者是StatisticsHandler）。</p>\\n<p>后面的部分会告诉你怎么才能把handlers连接起来组成一个切面，你可以在Jetty的<code>org.eclipse.jetty.server.handler</code>类中找到更多的有用的handlers实例。</p>\\n<p><a href=\\\"#top\\\">回到顶部</a>\\n<br></p>\\n<p><span id=\\\"21233handler-collections和wrappers\\\"></span></p>\\n<h6 id=\\\"21233、handler-collections和wrappers\\\">21.2.3.3、Handler Collections和Wrappers</h6>\\n<p>一个完整的请求处理是从多个Handlers中建立的，你可用以多种方式将多个Handler连接起来，Jetty提供了几种实现了<code>HandlerContainer</code>的实例：</p>\\n<blockquote>\\n<p><em>译者文外补充：HandlerContainer是Handler的容器，你可以把一套业务的Handler放在一个容器里面，再把这个容器添加到Server中，Handler容器的本质也是一个Handler。</em></p>\\n</blockquote>\\n<ul>\\n<li><p>HandlerCollection\\n持有一个含有其他Handler的collection，处理请求的时候会调用collection顺序中的每一个handler。你可用使用它把一些作统计用的handlers和一些作日志用的handlers练成一串，统一生成响应。</p>\\n</li>\\n<li><p>HandlerList\\n持有一个含有其他Handler的collection，和HandlerCollection不同的是，如果某个handler返回异常或者响应已经被确认或者<code>request.isHandled()</code>方法返回true的时候才会停止。你可用使用这种连接方式去连接按照条件处理的handler，比如匹配不同的虚拟主机。</p>\\n</li>\\n</ul>\\n<blockquote>\\n<p><em>译者文外补充：异常就是handler内报错；响应被确认应该是整条链跑到底了；而isHandled()则是某个在handler里面调用<code>baseRequest.setHandled(true)</code>方法。</em></p>\\n</blockquote>\\n<ul>\\n<li>HandlerWrapper\\n一个Handler的基类，你可用它来把很多handler以良好的链式处理连在一起形成一个AOP切面。比如说一个标准的Web程序是由一个context handlers、一个session handlers、一个security handlers和一个servlet handlers组成。</li>\\n</ul>\\n<blockquote>\\n<p><em>译者文外补充：在其Javadoc中定义所描述：<code>HandlerWrapper</code>虽然拥有Handler一样的行为，但是它更加代表着Handler方法和<code>LifeCycle</code>接口，它不像<code>HandlerCollection</code>那样专注实现为一个Handler容器，这个基类常常被用来实现为具有装饰模式的容器。</em></p>\\n</blockquote>\\n<ul>\\n<li>ConetextHandlerCollection\\n一个专门的HandlerCollection，它用请求URL的最长的前缀来选择包含这个前缀的ContextHandler去处理请求。</li>\\n</ul>\\n<blockquote>\\n<p><em>译者文外补充：它是继承于<code>HandlerCollection</code>的，在其Javadoc中定义所描述：这个<code>HandlerCollection</code>的子类可以对contexts和这个容器里面包含的handlers基于context path和<code>ContextHandlers</code>类的关系生成一一对应的映射。contexts并不需要直接装进这个容器中，你只需要把handlers装进去就可以了。多个contexts可能会有一样的context path，它们会按照顺序被调用直到其中一个handler处理了这次请求。</em></p>\\n</blockquote>\\n<p><a href=\\\"#top\\\">回到顶部</a>\\n<br></p>\\n<p><span id=\\\"21234scoped-handlers\\\"></span></p>\\n<h6 id=\\\"21234、scoped-handlers\\\">21.2.3.4、Scoped Handlers</h6>\\n<p>许多标准Servlet容器，Jetty是用<code>HandlerWrapper</code>实现的，它把很多handler以良好的链式处理连在一起：<code>ContextHandler</code>-<code>SessionHandler</code>-<code>SecurityHandler</code>-<code>ServletHandler</code>。然而，因为Servlet规范的特性，这种链式处理并不能就这么单纯的就把handler嵌套起来，因为外层handler有时候会需要内层handler处理过的信息。比如说当ContextHandler调用应用的监听器以通知有请求进到context的时候，ServletHandler必须提前知道请求该转发到哪一个servlet，这样才好返回正确的servletPath值。</p>\\n<p><code>HandlerWrapper</code>是<code>ScopedHandler</code>抽象类的父类，这个抽象类提供了一个良好的链式范围。比如说一个ServletHandler嵌套在ContextHandler中，执行嵌套的顺序如下：</p>\\n<pre><code>Server.handle(...)\\n  ContextHandler.doScope(...)\\n    ServletHandler.doScope(...)\\n      ContextHandler.doHandle(...)\\n        ServletHandler.doHandle(...)\\n          SomeServlet.service(...)\\n</code></pre>\\n<p>这样一来，当ContextHandler处理到请求后，在指定的ServletHandler里面也会处理一遍。</p>\\n<blockquote>\\n<p><em>译者文外补充：<code>ServletHandler</code>和<code>ContextHandler</code>都是<code>ScopedHandler</code>的具体实现。</em></p>\\n</blockquote>\\n<p><a href=\\\"#top\\\">回到顶部</a>\\n<br></p>\\n<p><span id=\\\"21235resource-handler\\\"></span></p>\\n<h6 id=\\\"21235、resource-handler\\\">21.2.3.5、Resource Handler</h6>\\n<p>FileServer栗子展示了如何使用Resource Handler去为当前工作目录下的静态资源服务：</p>\\n<pre><code>package org.eclipse.jetty.embedded;\\n\\nimport org.eclipse.jetty.server.Handler;\\nimport org.eclipse.jetty.server.Server;\\nimport org.eclipse.jetty.server.handler.DefaultHandler;\\nimport org.eclipse.jetty.server.handler.HandlerList;\\nimport org.eclipse.jetty.server.handler.ResourceHandler;\\n\\n/**\\n * Simple Jetty FileServer.\\n * This is a simple example of Jetty configured as a FileServer.\\n */\\npublic class FileServer\\n{\\n    public static void main(String[] args) throws Exception\\n    {\\n        // 创建Jetty的server到8080端口\\n        // 如果你设置的端口号为0 那么Jetty会随机为你选择一个当前系统可用的端口号\\n        // 你可以在启动的时候通过log看到随机选择的端口号\\n        // 或者使用测试案例来获取\\n        Server server = new Server(8080);\\n\\n        // 创建ResourceHandler\\n        // 这会为给定的资源文件处理请求\\n        // 这是Jetty Handler对象 所以你可以把它放在链式处理过程中\\n        // 你可以在其他栗子中看到这个用法\\n        ResourceHandler resource_handler = new ResourceHandler();\\n\\n        // 配置ResourceHandler\\n        // 设置resource base 来表明应该服务于那个目录下的文件\\n        // 在当前的栗子中 resource base 设置的是当前目录\\n        // 除此之外它还可以设置到其他任何JVM可以访问到的目录\\n        resource_handler.setDirectoriesListed(true);\\n        resource_handler.setWelcomeFiles(new String[]{ &quot;index.html&quot; });\\n        resource_handler.setResourceBase(&quot;.&quot;);\\n\\n        // Add the ResourceHandler to the server.\\n        HandlerList handlers = new HandlerList();\\n        handlers.setHandlers(new Handler[] { resource_handler, new DefaultHandler() });\\n        server.setHandler(handlers);\\n\\n        // Start things up! By using the server.join() the server thread will join with the current thread.\\n        // See &quot;http://docs.oracle.com/javase/1.5.0/docs/api/java/lang/Thread.html#join()&quot; for more details.\\n        server.start();\\n        server.join();\\n    }\\n}\\n</code></pre>\\n<p>你会注意到有一个HandlerList对象，里面链接了ResourceHandler和DefaultHandler，这样DefaultHandler会在访问到不存在资源的情况下生成404响应。</p>\\n<p><a href=\\\"#top\\\">回到顶部</a>\\n<br></p>\\n<p><span id=\\\"2124嵌入connectors\\\"></span></p>\\n<h5 id=\\\"2124、嵌入connectors\\\">21.2.4、嵌入Connectors</h5>\\n<ul>\\n<li>21.2.4.1、<a href=\\\"#21241%E4%B8%80%E4%B8%AAconnectors\\\">一个Connectors</a></li>\\n<li>21.2.4.2、<a href=\\\"#21242%E5%A4%9A%E4%B8%AAconnectors\\\">多个Connectors</a></li>\\n</ul>\\n<p>在上一个栗子中，<code>Server</code>通过端口号在内部创建了一个默认的Connector来监听所有通过这个端口号进来的请求。然而，一般我们用Jetty作嵌入式开发的时候，正确的做法是显示地去配置一个或多个connector提供给<code>Server</code>实例。</p>\\n<p><span id=\\\"21241一个connectors\\\"></span></p>\\n<h6 id=\\\"21241、一个connectors\\\">21.2.4.1、一个Connectors</h6>\\n<p>举个例子，<code>OneConnector.java</code>，实例化、配置、添加好了一个简单的HTTP Connector实例，并把这个实例添加到server中：</p>\\n<pre><code>package org.eclipse.jetty.embedded;\\n\\nimport org.eclipse.jetty.server.Server;\\nimport org.eclipse.jetty.server.ServerConnector;\\n\\n/**\\n * A Jetty server with one connectors.\\n */\\npublic class OneConnector\\n{\\n    public static void main( String[] args ) throws Exception\\n    {\\n        // The Server\\n        Server server = new Server();\\n\\n        // HTTP connector\\n        ServerConnector http = new ServerConnector(server);\\n        http.setHost(&quot;localhost&quot;);\\n        http.setPort(8080);\\n        http.setIdleTimeout(30000);\\n\\n        // Set the connector\\n        server.addConnector(http);\\n\\n        // Set a handler\\n        server.setHandler(new HelloHandler());\\n\\n        // Start the server\\n        server.start();\\n        server.join();\\n    }\\n}\\n</code></pre>\\n<p>上栗的connector可以处理HTTP协议的请求，这样的实现方式是<code>ServerConnector</code>类的默认方式是一样的。</p>\\n<p><a href=\\\"#top\\\">回到顶部</a>\\n<br></p>\\n<p><span id=\\\"21242多个connectors\\\"></span></p>\\n<h6 id=\\\"21242、多个connectors\\\">21.2.4.2、多个Connectors</h6>\\n<p>如果想要配置多个connectors的时候（比如HTTP+HTTPS），可能需要共享一些为HTTP连接配置过的参数。为了做到这一点，你需要显示地使用<code>ConnectionFactory</code>实例去配置<code>ServerConnector</code>类，然后提供它们通用的HTTP配置。</p>\\n<blockquote>\\n<p><em>译者文外补充：这里文档并没有给出示例代码，代码的下载链接也挂了，后面仅有一段关于这个多连接栗子的描述，我就不翻译了。关于这多链接的示例代码，“已往之不谏”前辈的博客里面有，大家可以在<a href=\\\"http://www.cnblogs.com/yiwangzhibujian/p/5845623.html\\\">这里</a>去参考。</em></p>\\n</blockquote>\\n<blockquote>\\n<p><em>栗子描述原文：The ManyConnectors example, configures a server with two <code>ServerConnector</code> instances: the http connector has a <code>HTTPConnectionFactory</code> instance; the https connector has a <code>SslConnectionFactory</code> chained to a <code>HttpConnectionFactory</code>. Both <code>HttpConnectionFactory</code> are configured based on the same <code>HttpConfiguration</code> instance, however the HTTPS factory uses a wrapped configuration so that a <code>SecureRequestCustomizer</code> can be added.</em></p>\\n</blockquote>\\n<p><a href=\\\"#top\\\">回到顶部</a>\\n<br></p>\\n<p><span id=\\\"2125嵌入servlets\\\"></span></p>\\n<h5 id=\\\"2125、嵌入servlets\\\">21.2.5、嵌入Servlets</h5>\\n<p>Servlet是为HTTP请求提供业务逻辑的标准解决方案。Servlet除了它里面的request对象是不可变的之外，在其他方面和Jetty的Handler很像。在Jetty里面Servlet通过<code>ServletHandler</code>类去接入处理。这个类使用标准的路径映射去为请求匹配一个Servlet，你还需要设置请求的<code>servletPath</code>和<code>pathInfo</code>，然后通过一些Filters处理之后，把请求传递到servlet，以生成项响应。</p>\\n<p>以下的栗子展示了一个简答的Servlet mapping过程</p>\\n<pre><code>package org.eclipse.jetty.embedded;\\n\\nimport java.io.IOException;\\n\\nimport javax.servlet.ServletException;\\nimport javax.servlet.http.HttpServlet;\\nimport javax.servlet.http.HttpServletRequest;\\nimport javax.servlet.http.HttpServletResponse;\\n\\nimport org.eclipse.jetty.server.Server;\\nimport org.eclipse.jetty.servlet.ServletHandler;\\n\\npublic class MinimalServlets\\n{\\n    public static void main( String[] args ) throws Exception\\n    {\\n        Server server = new Server(8080);\\n\\n        // ServletHandler是最最最简单的方式去创建context handler\\n        // 来返回一个Servlet实例\\n        // 这个handler需要注册Servlet对象\\n        ServletHandler handler = new ServletHandler();\\n        server.setHandler(handler);\\n\\n        // 通过这个类 Jetty可以实例化一个Servlet实例并把它嵌入到给定的context path上\\n\\n        // 重要：\\n        // 这是一个原生的Servlet\\n        // 不是平常的那种被`@WebServlet`或者web.xml或者其他类似方式配置过的Servlet\\n        handler.addServletWithMapping(HelloServlet.class, &quot;/*&quot;);\\n\\n        // 开启\\n        server.start();\\n\\n        // server.join()方法会让当前线程join并且wait\\n        server.join();\\n    }\\n\\n    @SuppressWarnings(&quot;serial&quot;)\\n    public static class HelloServlet extends HttpServlet\\n    {\\n        @Override\\n        protected void doGet( HttpServletRequest request,\\n                              HttpServletResponse response ) throws ServletException,\\n                                                            IOException\\n        {\\n            response.setContentType(&quot;text/html&quot;);\\n            response.setStatus(HttpServletResponse.SC_OK);\\n            response.getWriter().println(&quot;&lt;h1&gt;Hello from HelloServlet&lt;/h1&gt;&quot;);\\n        }\\n    }\\n}\\n</code></pre>\\n<p><a href=\\\"#top\\\">回到顶部</a>\\n<br></p>\\n<p><span id=\\\"2126嵌入contexts\\\"></span></p>\\n<h5 id=\\\"2126、嵌入contexts\\\">21.2.6、嵌入Contexts</h5>\\n<p>一个<code>ContextHandler</code>是一个<code>ScopedHandler</code>，只有请求过来的URL前缀和我们设定的context path相匹配才会响应。请求匹配到它们对应的context path之后，会有它们对应的path方法，并且context范围内的资源是可用的，以下是可能的范围情况：</p>\\n<ul>\\n<li>当请求到某个context的时候，加载这个context的类加载器范围是可用的。</li>\\n<li>通过<code>ServletContext</code>API设置的attribute集合都可用被使用。</li>\\n<li>通过<code>ServletContext</code>API设置的paramenters集合都可用被使用。</li>\\n<li>通过<code>ServletContext</code>API设置的用做静态资源请求的Resource库中的资源都可用被使用。</li>\\n<li>虚拟机的名字集合都可用被使用。</li>\\n</ul>\\n<p>下面这个栗子就是通过包装<code>HelloHandler</code>来展示如何建立context：</p>\\n<pre><code>package org.eclipse.jetty.embedded;\\n\\nimport org.eclipse.jetty.server.Server;\\nimport org.eclipse.jetty.server.handler.ContextHandler;\\n\\npublic class OneContext\\n{\\n    public static void main( String[] args ) throws Exception\\n    {\\n        Server server = new Server( 8080 );\\n\\n        // 在&quot;/hello&quot;上添加一个handler\\n        ContextHandler context = new ContextHandler();\\n        context.setContextPath( &quot;/hello&quot; );\\n        context.setHandler( new HelloHandler() );\\n\\n        // 现在可以访问 http://localhost:8080/hello\\n\\n        server.setHandler( context );\\n\\n        // Start the server\\n        server.start();\\n        server.join();\\n    }\\n}\\n</code></pre>\\n<p>当有许多context的时候，你可以嵌入一个<code>ContextHandlerCollection</code>来有效地检查请求URI，然后选择匹配的ContextHandler来处理请求。下面这个栗子就是告诉你如何配置多少context：</p>\\n<pre><code>package org.eclipse.jetty.embedded;\\n\\nimport org.eclipse.jetty.server.Handler;\\nimport org.eclipse.jetty.server.Server;\\nimport org.eclipse.jetty.server.handler.ContextHandler;\\nimport org.eclipse.jetty.server.handler.ContextHandlerCollection;\\n\\npublic class ManyContexts\\n{\\n    public static void main( String[] args ) throws Exception\\n    {\\n        Server server = new Server(8080);\\n\\n        ContextHandler context = new ContextHandler(&quot;/&quot;);\\n        context.setContextPath(&quot;/&quot;);\\n        context.setHandler(new HelloHandler(&quot;Root Hello&quot;));\\n\\n        ContextHandler contextFR = new ContextHandler(&quot;/fr&quot;);\\n        contextFR.setHandler(new HelloHandler(&quot;Bonjoir&quot;));\\n\\n        ContextHandler contextIT = new ContextHandler(&quot;/it&quot;);\\n        contextIT.setHandler(new HelloHandler(&quot;Bongiorno&quot;));\\n\\n        ContextHandler contextV = new ContextHandler(&quot;/&quot;);\\n        contextV.setVirtualHosts(new String[] { &quot;127.0.0.2&quot; });\\n        contextV.setHandler(new HelloHandler(&quot;Virtual Hello&quot;));\\n\\n        ContextHandlerCollection contexts = new ContextHandlerCollection();\\n        contexts.setHandlers(new Handler[] { context, contextFR, contextIT,\\n                contextV });\\n\\n        server.setHandler(contexts);\\n\\n        server.start();\\n        server.join();\\n    }\\n}\\n</code></pre>\\n<p><a href=\\\"#top\\\">回到顶部</a>\\n<br></p>\\n<p><span id=\\\"2127嵌入servletcontexts\\\"></span></p>\\n<h5 id=\\\"2127、嵌入servletcontexts\\\">21.2.7、嵌入ServletContexts</h5>\\n<p><code>ServletContextHandler</code>的<code>ContextHandler</code>的一个重要子类，它支持标准的Servlet和sessions机制。接下来的栗子实例化了一个<code>DefaultServlet</code>来为/tmp/目录下的静态资源服务，还有一个<code>DumpServlet</code>，它负责创建session和传储请求中的一些基本细节：</p>\\n<pre><code>package org.eclipse.jetty.embedded;\\n\\nimport org.eclipse.jetty.server.Server;\\nimport org.eclipse.jetty.servlet.DefaultServlet;\\nimport org.eclipse.jetty.servlet.ServletContextHandler;\\n\\npublic class OneServletContext\\n{\\n    public static void main( String[] args ) throws Exception\\n    {\\n        Server server = new Server(8080);\\n\\n        ServletContextHandler context = new ServletContextHandler(\\n                ServletContextHandler.SESSIONS);\\n        context.setContextPath(&quot;/&quot;);\\n        context.setResourceBase(System.getProperty(&quot;java.io.tmpdir&quot;));\\n        server.setHandler(context);\\n\\n        // Add dump servlet\\n        context.addServlet(DumpServlet.class, &quot;/dump/*&quot;);\\n        // Add default servlet\\n        context.addServlet(DefaultServlet.class, &quot;/&quot;);\\n\\n        server.start();\\n        server.join();\\n    }\\n}\\n</code></pre>\\n<br>\\n\\n<blockquote>\\n<p><em>译者文外补充：这里的<code>DumpServlet</code>只是示例，不是JettyAPI提供的实例。这里的<code>setResourceBase()</code>方法很重要，这跟我们一般使用Tomcat服务器，而我们的资源路径默认就是项目下的webapp目录是一样的，我们需要靠这个来设置Jetty，以达到同样的效果。</em></p>\\n</blockquote>\\n<p><a href=\\\"#top\\\">回到顶部</a>\\n<br></p>\\n<p><span id=\\\"2128嵌入web应用程序\\\"></span></p>\\n<h5 id=\\\"2128、嵌入web应用程序\\\">21.2.8、嵌入Web应用程序</h5>\\n<p>一个<code>WebAppContext</code>是一个<code>ServletContextHandler</code>的拓展，它使用标准布局和<code>web.xml</code>来配置使用注解或者在web.xml中配置的Servlet、filters和其他功能。下面这个栗子配置了一个Jetty的测试webapp。Web应用可以使用容器提供的资源，在这个栗子里面的<code>LoginService</code>正是这样配置的：</p>\\n<pre><code>package org.eclipse.jetty.embedded;\\n\\nimport java.io.File;\\nimport java.lang.management.ManagementFactory;\\n\\nimport org.eclipse.jetty.jmx.MBeanContainer;\\nimport org.eclipse.jetty.server.Server;\\nimport org.eclipse.jetty.server.handler.AllowSymLinkAliasChecker;\\nimport org.eclipse.jetty.webapp.WebAppContext;\\n\\npublic class OneWebApp\\n{\\n    public static void main( String[] args ) throws Exception\\n    {\\n        Server server = new Server(8080);\\n\\n        // 设置JMX\\n        MBeanContainer mbContainer = new MBeanContainer(\\n                ManagementFactory.getPlatformMBeanServer());\\n        server.addBean(mbContainer);\\n\\n        // WebAppContext对象是用来控制它自己赖以生存的环境的。\\n        // 在这个栗子里面，context path设置为“/”\\n        // 这样它就可以处理根context下的请求了\\n        // 我们还可以看到它设置了war的位置\\n        // 整个host的其他配置都是可用的可配置的\\n        // 你可用配置注解扫描的支持（需要通过PlusConfiguration）\\n        // 还可用选择webapp在哪里自动解压\\n        WebAppContext webapp = new WebAppContext();\\n        webapp.setContextPath(&quot;/&quot;);\\n        File warFile = new File(\\n                &quot;../../tests/test-jmx/jmx-webapp/target/jmx-webapp&quot;);\\n        webapp.setWar(warFile.getAbsolutePath());\\n\\n        // 一个WebAppContext是一个ContextHandler\\n        // 所以它也需要被配置到server里面这样server才会知道请求将被送往哪里\\n        server.setHandler(webapp);\\n\\n        // Start things up!\\n        server.start();\\n\\n        server.dumpStdErr();\\n\\n        server.join();\\n    }\\n}\\n</code></pre>\\n<br>\\n\\n<blockquote>\\n<p><em>译者文外补充：栗子中的JMX是一种额外组件，不是Jetty的服务。你可以准备一些war包自己测试。也可以不使用war包，直接使用有标准web应用布局的目录。如果你想要Jetty支持Servlet注解配置，你可以在<a href=\\\"\\\">这里</a>了解到更多。</em></p>\\n</blockquote>\\n<br>\\n<span id=\\\"2129像jettyxml一样进行嵌入式开发\\\"></span>\\n##### 21.2.9、像JettyXML一样进行嵌入式开发\\n\\n<p>典型的Jetty服务器配置的做法是通过Jetty.xml文件进行配置。然而Jetty XML配置只是一个简单的渲染，它在起到配置作用的同时还向你展示了在代码里面是如何配置的。照着jetty.xml的做法，你很简单就可以在代码里面配置JettyServer。</p>\\n<blockquote>\\n<p><em>译者文外补充：文档后面这贴出了代码展示如何在代码像JettyXML配置一样做JettyServer的配置，这里对我的学习价值不大，所以我就不贴了，大家有兴趣自己去原文看。</em></p>\\n</blockquote>\\n<br>\\n\\n<p><a href=\\\"#top\\\">回到顶部</a></p>\\n<hr>\\n<p><span id=\\\"213嵌入式开发的栗子\\\"></span></p>\\n<h4 id=\\\"213、嵌入式开发的栗子\\\">21.3、嵌入式开发的栗子</h4>\\n<p>Jetty在各种各样的应用中有着非常丰富的嵌入式开发历史。这个部分我们会向你介绍一些简单应用的嵌入式开发的栗子。你也可以在我们的<a href=\\\"https://github.com/jetty-project?utf8=%E2%9C%93&q=&type=&language=\\\">git仓库</a>找到许多的Jetty嵌入式开发的示例项目。</p>\\n<ul>\\n<li>21.3.1、<a href=\\\"#2131%E7%AE%80%E5%8D%95%E7%9A%84%E6%96%87%E4%BB%B6%E6%9C%8D%E5%8A%A1%E5%99%A8\\\">简单的文件服务器</a></li>\\n<li>21.3.2、<a href=\\\"#2132%E5%8F%AF%E5%88%86%E5%B8%83%E7%9A%84%E6%96%87%E4%BB%B6%E6%9C%8D%E5%8A%A1%E5%99%A8\\\">可分布的文件服务器</a></li>\\n<li>21.3.3、<a href=\\\"#2133%E5%A4%9Aconnectors\\\">多Connectors</a></li>\\n<li>21.3.4、<a href=\\\"#2134%E5%AE%89%E5%85%A8%E6%96%B9%E9%9D%A2handler%E7%9A%84hello-world\\\">安全方面Handler的Hello World</a></li>\\n<li>21.3.5、<a href=\\\"#2135%E6%9C%80%E7%AE%80%E5%8D%95%E7%9A%84servlet\\\">最简单的Servlet</a></li>\\n<li>21.3.6、<a href=\\\"#2136web-application\\\">Web Application</a></li>\\n<li>21.3.7、<a href=\\\"#2137web-application%E4%BB%A5%E5%8F%8Ajsp\\\">Web Application以及JSP</a></li>\\n</ul>\\n<p><span id=\\\"2131简单的文件服务器\\\"></span></p>\\n<h5 id=\\\"2131、简单的文件服务器\\\">21.3.1、简单的文件服务器</h5>\\n<p>这个栗子展示了如何使用Jetty创建一个简单的文件服务器。这对于你想要一个具有获取文件功能的服务器来说是一个非常适合的栗子，它可以非常简单的就配置好并且为指定资源目录下的文件进行服务。你需要注意的是，这里没有任何的业务逻辑来做文件缓存，同样服务器设置和响应头里面也没有。</p>\\n<pre><code>package org.eclipse.jetty.embedded;\\n\\nimport org.eclipse.jetty.server.Handler;\\nimport org.eclipse.jetty.server.Server;\\nimport org.eclipse.jetty.server.handler.DefaultHandler;\\nimport org.eclipse.jetty.server.handler.HandlerList;\\nimport org.eclipse.jetty.server.handler.ResourceHandler;\\n\\n/**\\n * Simple Jetty FileServer.\\n * This is a simple example of Jetty configured as a FileServer.\\n */\\npublic class FileServer\\n{\\n    public static void main(String[] args) throws Exception\\n    {\\n        Server server = new Server(8080);\\n\\n        // 创建ResoueceHandler\\n        // 这个对象会处理对资源文件的请求\\n        // 这是Jetty的Handler对象 所以它可以和其它Handler在一起做链式处理\\n        ResourceHandler resource_handler = new ResourceHandler();\\n\\n        // 配置ResoueceHandler\\n        // 设置资源的base来表明服务器要服务于哪个路径下的文件\\n        // 本例是设置为当前目录 你可以设置jvm可以访问到的任何地方\\n        resource_handler.setDirectoriesListed(true);\\n        resource_handler.setWelcomeFiles(new String[]{ &quot;index.html&quot; });\\n        resource_handler.setResourceBase(&quot;.&quot;);\\n\\n        // Add the ResourceHandler to the server.\\n        HandlerList handlers = new HandlerList();\\n        handlers.setHandlers(new Handler[] { resource_handler, new DefaultHandler() });\\n        server.setHandler(handlers);\\n\\n        server.start();\\n        server.join();\\n    }\\n}\\n</code></pre>\\n<p>然后打开8080网页你就可以看到当前目录的情况了。</p>\\n<p>这里你会使用到的Maven依赖坐标：</p>\\n<pre><code>&lt;dependency&gt;\\n  &lt;groupId&gt;org.eclipse.jetty&lt;/groupId&gt;\\n  &lt;artifactId&gt;jetty-server&lt;/artifactId&gt;\\n  &lt;version&gt;${project.version}&lt;/version&gt;\\n&lt;/dependency&gt;\\n</code></pre>\\n<blockquote>\\n<p><em>译者文外补充：栗子中设置的index.html是来搞笑的，没什么卵用。当然如果你当前目录下有这个文件，代码里面就正好把这个文件配置为欢迎页面，但是即使你没使用代码设置为欢迎页面，只要你当前目录下有这个页面，也会默认刷这个页面，所以我建议目录下最好不要有index.html文件，然后<code>setWelcomeFiles(null)</code>，这样就会直接进入文件系统。</em></p>\\n</blockquote>\\n<p><a href=\\\"#top\\\">回到顶部</a>\\n<br></p>\\n<p><span id=\\\"2132可分布的文件服务器\\\"></span></p>\\n<h5 id=\\\"2132、可分布的文件服务器\\\">21.3.2、可分布的文件服务器</h5>\\n<p>这个栗子是基于上栗来向你展示如何把多个<code>ResourceHandler</code>链式处理到一起，让你可以集中多个目录下的文件到一个context path下，还向你展示了如何使用<code>ContextHandlers</code>把这些path连在一起：</p>\\n<pre><code>package org.eclipse.jetty.embedded;\\n\\nimport java.io.File;\\n\\nimport org.eclipse.jetty.server.Connector;\\nimport org.eclipse.jetty.server.Handler;\\nimport org.eclipse.jetty.server.Server;\\nimport org.eclipse.jetty.server.ServerConnector;\\nimport org.eclipse.jetty.server.handler.ContextHandler;\\nimport org.eclipse.jetty.server.handler.ContextHandlerCollection;\\nimport org.eclipse.jetty.server.handler.ResourceHandler;\\nimport org.eclipse.jetty.toolchain.test.MavenTestingUtils;\\nimport org.eclipse.jetty.util.resource.Resource;\\n\\n/**\\n * A {@link ContextHandlerCollection} handler may be used to direct a request to\\n * a specific Context. The URI path prefix and optional virtual host is used to\\n * select the context.\\n */\\npublic class SplitFileServer\\n{\\n    public static void main( String[] args ) throws Exception\\n    {\\n        Server server = new Server();\\n        ServerConnector connector = new ServerConnector(server);\\n        connector.setPort(8090);\\n        server.setConnectors(new Connector[] { connector });\\n\\n        // 创建一个Context Handler 和ResourceHandler\\n        // ContextHandler设置为“/” 但你可以设置其它你想要的路径\\n        // 你需要注意的是我们设置ResourceBase使用的是maven testing utilities工具\\n        // 来获取资源的目录 你可以不需要这样做 你可以简单的提供一个能找得到的路径就可以了\\n        ResourceHandler rh0 = new ResourceHandler();\\n\\n        ContextHandler context0 = new ContextHandler();\\n        context0.setContextPath(&quot;/&quot;);\\n        File dir0 = MavenTestingUtils.getTestResourceDir(&quot;dir0&quot;);\\n        context0.setBaseResource(Resource.newResource(dir0));\\n        context0.setHandler(rh0);\\n\\n        // 重复上述的工作 指定一个不同的目录\\n        ResourceHandler rh1 = new ResourceHandler();\\n\\n        ContextHandler context1 = new ContextHandler();\\n        context1.setContextPath(&quot;/&quot;);\\n        File dir1 = MavenTestingUtils.getTestResourceDir(&quot;dir1&quot;);\\n        context1.setBaseResource(Resource.newResource(dir1));\\n        context1.setHandler(rh1);\\n\\n        // 创建一个ContextHandlerCollection\\n        // 把context handler 设置进去\\n        // jetty程序会把context和对应的内容相匹配\\n        ContextHandlerCollection contexts = new ContextHandlerCollection();\\n        contexts.setHandlers(new Handler[] { context0, context1 });\\n\\n        server.setHandler(contexts);\\n\\n        // Start things up!\\n        server.start();\\n\\n        // 转储服务器状态\\n        System.out.println(server.dump());\\n        server.join();\\n    }\\n}\\n</code></pre>\\n<p>这里你会使用到的Maven依赖坐标：</p>\\n<pre><code>&lt;dependency&gt;\\n  &lt;groupId&gt;org.eclipse.jetty&lt;/groupId&gt;\\n  &lt;artifactId&gt;jetty-server&lt;/artifactId&gt;\\n  &lt;version&gt;${project.version}&lt;/version&gt;\\n&lt;/dependency&gt;\\n&lt;dependency&gt;\\n  &lt;groupId&gt;org.eclipse.jetty.toolchain&lt;/groupId&gt;\\n  &lt;artifactId&gt;jetty-test-helper&lt;/artifactId&gt;\\n  &lt;version&gt;2.2&lt;/version&gt;\\n&lt;/dependency&gt;\\n</code></pre>\\n<blockquote>\\n<p><em>译者文外补充：熟悉handler的人马上就知道这些配置是怎么肥事了。里面还有个<code>server.dump()</code>我也不知道怎么肥事。</em></p>\\n</blockquote>\\n<p><a href=\\\"#top\\\">回到顶部</a>\\n<br></p>\\n<p><span id=\\\"2133多connectors\\\"></span></p>\\n<h5 id=\\\"2133、多connectors\\\">21.3.3、多Connectors</h5>\\n<p>这部分展示如何使用多连接来处理不同的请求，如http和https。</p>\\n<blockquote>\\n<p><em>译者文外补充：这部分我的学习需求不大，代码也就不贴了不翻译了，可能日后有需求了会再来补充的，大家有需要去的去参阅<a href=\\\"http://www.eclipse.org/jetty/documentation/9.4.6.v20170531/embedded-examples.html\\\">原文</a>。</em></p>\\n</blockquote>\\n<p><a href=\\\"#top\\\">回到顶部</a>\\n<br></p>\\n<p><span id=\\\"2134安全方面handler的hello-world\\\"></span></p>\\n<h5 id=\\\"2134、安全方面handler的hello-world\\\">21.3.4、安全方面Handler的Hello World</h5>\\n<p>这个栗子展示了如何使用一个负责安全的handler来包装另外一个handler。这里有一个简单的Hello Handler，它返回一句问候语，但是在这之前你必须先通过身份验证。另一个需要注意的是这个栗子是使用的<code>ConstraintSecurityHandler</code>，它可以在servletAPI中提供安全映射支持，我们简单的展示了一下它的用法，但是<code>Constraint</code>还可以提供更强大的功能。如果你不需要，那么你可以不使用它而仅仅使用<code>SecurityHandler</code>。</p>\\n<blockquote>\\n<p><em>译者文外补充：这部分我的学习需求不大，代码也就不贴了不翻译了，可能日后有需求了会再来补充的，大家有需要去的去参阅<a href=\\\"http://www.eclipse.org/jetty/documentation/9.4.6.v20170531/embedded-examples.html\\\">原文</a>。</em></p>\\n</blockquote>\\n<p><a href=\\\"#top\\\">回到顶部</a>\\n<br></p>\\n<p><span id=\\\"2135最简单的servlet\\\"></span></p>\\n<h5 id=\\\"2135、最简单的servlet\\\">21.3.5、最简单的Servlet</h5>\\n<p>这个栗子展示了最简单最简单的在Jetty中部署servlet的方式。你需要注意到的是，这里使用的是一个严格意义上的servlet，并不是web应用的context中的servlet，这种会在后面提到。这是一个单纯的servlet，它仅仅是部署和挂载在context上，让我们可以请求而已。这个栗子完美的展现了当你有一个简单的servlet，而你正需要对他进行单元测试的时候，你只需要把它挂载到context中，然后使用你最喜欢的http客户端库去发起请求。（可以参考Jetty的HTTP Client）</p>\\n<pre><code>package org.eclipse.jetty.embedded;\\n\\nimport java.io.IOException;\\n\\nimport javax.servlet.ServletException;\\nimport javax.servlet.http.HttpServlet;\\nimport javax.servlet.http.HttpServletRequest;\\nimport javax.servlet.http.HttpServletResponse;\\n\\nimport org.eclipse.jetty.server.Server;\\nimport org.eclipse.jetty.servlet.ServletHandler;\\n\\npublic class MinimalServlets\\n{\\n    public static void main( String[] args ) throws Exception\\n    {\\n        Server server = new Server(8080);\\n\\n        ServletHandler handler = new ServletHandler();\\n        server.setHandler(handler);\\n\\n        // 通过这个类实例你可以把servlet挂载到context里\\n\\n        // 重要:\\n        // 这是一个原生的servlet，不是像以前那种被web.xml或者注解配置的servlet\\n        handler.addServletWithMapping(HelloServlet.class, &quot;/*&quot;);\\n\\n        server.start();\\n        server.join();\\n    }\\n\\n    @SuppressWarnings(&quot;serial&quot;)\\n    public static class HelloServlet extends HttpServlet\\n    {\\n        @Override\\n        protected void doGet( HttpServletRequest request,\\n                              HttpServletResponse response ) throws ServletException,\\n                                                            IOException\\n        {\\n            response.setContentType(&quot;text/html&quot;);\\n            response.setStatus(HttpServletResponse.SC_OK);\\n            response.getWriter().println(&quot;&lt;h1&gt;Hello from HelloServlet&lt;/h1&gt;&quot;);\\n        }\\n    }\\n}\\n</code></pre>\\n<p>通过这个栗子，你可以非常简单的就配置一个servlet到http服务器中，作为简单的测试单元。</p>\\n<p>这里你会使用到的Maven依赖坐标：</p>\\n<pre><code>&lt;dependency&gt;\\n  &lt;groupId&gt;org.eclipse.jetty&lt;/groupId&gt;\\n  &lt;artifactId&gt;jetty-servlet&lt;/artifactId&gt;\\n  &lt;version&gt;${project.version}&lt;/version&gt;\\n&lt;/dependency&gt;\\n</code></pre>\\n<p><a href=\\\"#top\\\">回到顶部</a>\\n<br></p>\\n<p><span id=\\\"2136web-application\\\"></span></p>\\n<h5 id=\\\"2136、web-application\\\">21.3.6、Web Application</h5>\\n<p>这里会向你展示如何使用一个嵌入式的Jetty服务器去部署一个简单的web应用。这对你想要以编程的方式管理服务器的生命周期非常有帮助，不管是生产项目或者是部署和调试一个完整规模的应用也好。当你控制住classpath之后，那么在许多方面，Jetty的这种部署方式要比传统的部署方式要简单得多。</p>\\n<blockquote>\\n<p><em>译者文外补充：这里贴的代码和<a href=\\\"#2128%E5%B5%8C%E5%85%A5web%E5%BA%94%E7%94%A8%E7%A8%8B%E5%BA%8F\\\">上面</a>是一样的。</em></p>\\n</blockquote>\\n<p>这里你会使用到的Maven依赖坐标：</p>\\n<pre><code>&lt;dependency&gt;\\n  &lt;groupId&gt;org.eclipse.jetty&lt;/groupId&gt;\\n  &lt;artifactId&gt;jetty-webapp&lt;/artifactId&gt;\\n  &lt;version&gt;${project.version}&lt;/version&gt;\\n&lt;/dependency&gt;\\n</code></pre>\\n<p><a href=\\\"#top\\\">回到顶部</a>\\n<br></p>\\n<p><span id=\\\"2137web-application以及jsp\\\"></span></p>\\n<h5 id=\\\"2137、web-application以及jsp\\\">21.3.7、Web Application以及JSP</h5>\\n<p>这个栗子和上一个栗子非常像，因为它只是支持了内嵌web应用可以使用jsp而已。从Jetty9.2以来，我们一直使用的是Apache的JSP引擎，这种做法需要<code>ServletContainerInitializer</code>去实例化它自己以支持Servlet3.1规范。为了让Jetty做到这些，你需要开启注解处理机制：</p>\\n<pre><code>package org.eclipse.jetty.embedded;\\n\\nimport java.io.File;\\nimport java.lang.management.ManagementFactory;\\n\\nimport org.eclipse.jetty.jmx.MBeanContainer;\\nimport org.eclipse.jetty.security.HashLoginService;\\nimport org.eclipse.jetty.server.Server;\\nimport org.eclipse.jetty.webapp.Configuration;\\nimport org.eclipse.jetty.webapp.WebAppContext;\\n\\npublic class OneWebAppWithJsp\\n{\\n    public static void main( String[] args ) throws Exception\\n    {\\n        Server server = new Server( 8080 );\\n\\n        // Setup JMX\\n        MBeanContainer mbContainer = new MBeanContainer(\\n                ManagementFactory.getPlatformMBeanServer() );\\n        server.addBean( mbContainer );\\n\\n        // WebAppContext对象是用来控制它自己赖以生存的环境的。\\n        // 在这个栗子里面，context path设置为“/”\\n        // 这样它就可以处理根context下的请求了\\n        // 我们还可以看到它设置了war的位置\\n        // 整个host的其他配置都是可用的可配置的\\n        // 你可用配置注解扫描的支持（需要通过PlusConfiguration）\\n        // 还可用选择webapp在哪里自动解压\\n        WebAppContext webapp = new WebAppContext();\\n        webapp.setContextPath( &quot;/&quot; );\\n        File warFile = new File(\\n                &quot;../../jetty-distribution/target/distribution/demo-base/webapps/test.war&quot; );\\n        if (!warFile.exists())\\n        {\\n            throw new RuntimeException( &quot;Unable to find WAR File: &quot;\\n                    + warFile.getAbsolutePath() );\\n        }\\n        webapp.setWar( warFile.getAbsolutePath() );\\n        webapp.setExtractWAR(true);\\n\\n        // 这个webapp会使用jsp和jstl\\n        // 我们需要激活AnnotationConfiguration\\n        // 这样才能正确的设置jsp容器\\n        Configuration.ClassList classlist = Configuration.ClassList\\n                .setServerDefault( server );\\n        classlist.addBefore(\\n                &quot;org.eclipse.jetty.webapp.JettyWebXmlConfiguration&quot;,\\n                &quot;org.eclipse.jetty.annotations.AnnotationConfiguration&quot; );\\n\\n        // 设置ContainerIncludeJarPattern\\n        // 这样jetty才会去检查container path 的jar\\n        // 这样才好为顶级域名以及web片段服务\\n        // 如果你省略了包含jstl和域名的jar jsp引擎会来扫描它们\\n        webapp.setAttribute(\\n                &quot;org.eclipse.jetty.server.webapp.ContainerIncludeJarPattern&quot;,\\n                &quot;.*/[^/]*servlet-api-[^/]*\\\\\\\\.jar$|.*/javax.servlet.jsp.jstl-.*\\\\\\\\.jar$|.*/[^/]*taglibs.*\\\\\\\\.jar$&quot; );\\n\\n\\n        server.setHandler( webapp );\\n\\n        // Configure a LoginService.\\n        // Since this example is for our test webapp, we need to setup a\\n        // LoginService so this shows how to create a very simple hashmap based\\n        // one. The name of the LoginService needs to correspond to what is\\n        // configured in the webapp&#x27;s web.xml and since it has a lifecycle of\\n        // its own we register it as a bean with the Jetty server object so it\\n        // can be started and stopped according to the lifecycle of the server\\n        // itself.\\n        HashLoginService loginService = new HashLoginService();\\n        loginService.setName( &quot;Test Realm&quot; );\\n        loginService.setConfig( &quot;src/test/resources/realm.properties&quot; );\\n        server.addBean( loginService );\\n\\n        // Start things up!\\n        server.start();\\n        server.dumpStdErr();\\n        server.join();\\n    }\\n}\\n</code></pre>\\n<p>你会用到的Maven依赖坐标：</p>\\n<pre><code>&lt;dependency&gt;\\n  &lt;groupId&gt;org.eclipse.jetty&lt;/groupId&gt;\\n  &lt;artifactId&gt;jetty-annotations&lt;/artifactId&gt;\\n  &lt;version&gt;${project.version}&lt;/version&gt;\\n&lt;/dependency&gt;\\n&lt;dependency&gt;\\n  &lt;groupId&gt;org.eclipse.jetty&lt;/groupId&gt;\\n  &lt;artifactId&gt;apache-jsp&lt;/artifactId&gt;\\n  &lt;version&gt;${project.version}&lt;/version&gt;\\n&lt;/dependency&gt;\\n&lt;dependency&gt;\\n  &lt;groupId&gt;org.eclipse.jetty&lt;/groupId&gt;\\n  &lt;artifactId&gt;apache-jstl&lt;/artifactId&gt;\\n  &lt;version&gt;${project.version}&lt;/version&gt;\\n&lt;/dependency&gt;\\n</code></pre>\\n<p><a href=\\\"#top\\\">回到顶部</a></p>\\n<hr>\\n\";","export default \"<h1 id=\\\"cron4j--a-pure-java-cron-like-scheduler\\\">Cron4j : A pure Java cron-like scheduler</h1>\\n<p>创立时间：2017年8月20日13:35:01</p>\\n<p>官方文档地址：<a href=\\\"http://www.sauronsoftware.it/projects/cron4j/\\\">http://www.sauronsoftware.it/projects/cron4j/</a></p>\\n<hr>\\n<p>Maven依赖：</p>\\n<pre><code>&lt;dependency&gt;\\n    &lt;groupId&gt;it.sauronsoftware.cron4j&lt;/groupId&gt;\\n    &lt;artifactId&gt;cron4j&lt;/artifactId&gt;\\n    &lt;version&gt;2.2.5&lt;/version&gt;\\n&lt;/dependency&gt;\\n</code></pre>\\n<hr>\\n<h4 id=\\\"前言：\\\">前言：</h4>\\n<blockquote>\\n<p>这是一篇针对cron4j官方英文文档的翻译。</p>\\n<p>虽然官方文档并不难看懂，但是本着高尚的自学精神，再加上暑假有点无聊，我尝试着翻译这篇Java工具包的技术文档。</p>\\n<p>该翻译并不是来自官方的，仅仅是自学用的翻译，如有翻译错误，请在issue中指出。</p>\\n<p>本人并仅仅英语四级压线水平，所以文档并没有严格按照语法规范翻译，首先遵从本人自己的理解（如有理解错误也请在issue中指出），再尽量翻译成通俗的语句，要求的是能根据本文快速掌握cron4j工具。一切以实践为标准，我在学习的时候也会先实践，再结合实践翻译到文档中。</p>\\n<p>在JavaWeb开发中，一些后台业务场景会有需要定时任务的需求，这些定时任务如果人工去执行的话就会显得非常蠢，所以就有了定时任务工具包/框架的出现。</p>\\n<p>其实流行的定时任务框架就像Quartz这样的，应该是运用到生产环境中比较好的选择，但是Quartz的官方文档结构有点蛋疼（也可能是我没细看），并不能简明直接的让开发者循序渐进的掌握它。而在一些博客中对比也谈到Quartz比Cron4j臃肿一些，这也是增加学习成本的原因之意。它们的性能对比不知道怎么样，不过我猜应该是Quartz要好一点，毕竟持续到近两个月前Quartz还在继续维护当中，而Cron4j最近的发布时间是：28-Dec-2011（膜拜）。</p>\\n<p>我为什么选择cron4j，是因为最近在学JFinal3.2，里面插件扩展的章节介绍到了cron4j，之前也有思考过定时任务的解决方案，恰好再此了解到它。在学习cron4j的过程中也确实感受到了它的“pure”之意，所以我也愿意花一些时间来去翻译它的官方文档和学习它。</p>\\n<p>在完成文档的过程中有一点比较难受的是，我每次实践都至少要等上一分钟才能验证结果...</p>\\n</blockquote>\\n<hr>\\n<h4 id=\\\"overview部分：\\\">Overview部分：</h4>\\n<p>cron4j是Java平台的一个调度器（也就是任务调度工具/框架），它非常像UNIX系统下的具有进程守护的定时任务工具cron。</p>\\n<p>有了cron4j，你可以在你规定好的时间内在Java应用程序中执行你指定的任务，而这只需要你制定一些简单的规则。</p>\\n<p>虽然Java平台已经内置了一个由<code>java.util.Timer</code>类实例化的调度器，但是cron4j走的是和前者不同的另一条路子。</p>\\n<p>你可以说<code>java.util.Timer</code>调度器是</p>\\n<blockquote>\\n<p>“从现在开始过5分钟后启动这个任务”</p>\\n</blockquote>\\n<p>或者说</p>\\n<blockquote>\\n<p>“从现在开始过5分钟后执行这个任务，然后每10分钟重复执行它”。</p>\\n</blockquote>\\n<p>这就是<code>java.util.Timer</code>。</p>\\n<p>而cron4j调度器会让你稍微多做一些复杂的事情，\\n比如：</p>\\n<blockquote>\\n<p>“在每个周一的12时执行这个任务”</p>\\n<p>“每隔5分钟执行这个任务，但是周末期间可以不执行”</p>\\n<p>“在8：00am到8：00pm之间的每个小时执行一次任务，而在8：00pm到8：00am之间的每5分钟执行一次任务”</p>\\n<p>“除了7月和8月之外的月份内并且在一周内除了周日之外，每天都执行一次任务”</p>\\n</blockquote>\\n<p>这些蜜汁操作，想要实现它们你只需要简单的写一小行代码就可以Duang出来。</p>\\n<p>把cron4j使用到你的项目里面其实非常简单，你只需要掌握一些常用API就足够了。启动定时任务的启动规则必须是一个字符串表达式，它被称为<strong>scheduling pattern（调度模式）</strong>，它的语法等同于UNIX系统中crontab所使用的语法一样。如果你了解过UNIX中crontab的操作，那么恭喜你，你已经掌握本工具的一大半了。如果你不会，don&#39;t worry：crontab的调度模式你只需要花上几分钟就能掌握（骗人！），再说了，后面还有documentation给你学习呢。</p>\\n<hr>\\n<p>运行要求：</p>\\n<p>你可以在任何Java平台使用它。</p>\\n<p>License:</p>\\n<pre><code>cron4j is Free Software and it is licensed under LGPL (you will find a copy of the license bundled into the downloadable software distribution).\\n</code></pre>\\n<p>Feedback</p>\\n<p>...</p>\\n<p>Make a donation</p>\\n<p>...</p>\\n<hr>\\n<p>翻译进度：</p>\\n<blockquote>\\n<p>第一阶段</p>\\n<p>时间：2017年8月20日21:03:12</p>\\n<p>内容：Overview、doc的前三节</p>\\n</blockquote>\\n<blockquote>\\n<p>第二阶段</p>\\n<p>时间：2017年8月21日00:01:13</p>\\n<p>内容：doc第四、五节 第六节的大部分</p>\\n</blockquote>\\n<blockquote>\\n<p>第三阶段</p>\\n<p>时间：2017年8月21日22:15:33</p>\\n<p>内容：doc第七到末节</p>\\n</blockquote>\\n<p><a href=\\\"https://youyinnn.github.io/article/1ngl1pm.html\\\">正文</a></p>\\n\";","export default \"<h3 id=\\\"introduction\\\">Introduction</h3>\\n<blockquote>\\n<p><strong>Volumes are the preferred mechanism for persisting data generated by and used by Docker containers.</strong> While <a href=\\\"https://docs.docker.com/storage/bind-mounts/\\\">bind mounts</a> are dependent on the directory structure of the host machine, <strong>volumes are completely managed by Docker</strong>. Volumes have several advantages over bind mounts:</p>\\n<ul>\\n<li>Volumes are easier to back up or migrate than bind mounts.</li>\\n<li>You can manage volumes using Docker CLI commands or the Docker API.</li>\\n<li>Volumes work on both Linux and Windows containers.</li>\\n<li>Volumes can be more safely shared among multiple containers.</li>\\n<li>Volume drivers let you store volumes on remote hosts or cloud providers, to encrypt the contents of volumes, or to add other functionality.</li>\\n<li>New volumes can have their content pre-populated by a container.</li>\\n</ul>\\n<p>In addition, volumes are often a better choice than persisting data in a container’s writable layer, because a volume does not increase the size of the containers using it, and the volume’s contents exist outside the lifecycle of a given container.</p>\\n<p><img src=\\\"https://docs.docker.com/storage/images/types-of-mounts-volume.png\\\" alt=\\\"volumes on the Docker host\\\"></p>\\n<p>If your container generates non-persistent state data, consider using a <a href=\\\"https://docs.docker.com/storage/tmpfs/\\\">tmpfs mount</a> to avoid storing the data anywhere permanently, and to increase the container’s performance by avoiding writing into the container’s writable layer.</p>\\n<p>Volumes use <code>rprivate</code> bind propagation, and bind propagation is not configurable for volumes.</p>\\n</blockquote>\\n<h3 id=\\\"use-volumes-with--v-and---mount-flag\\\">Use volumes with <code>-v</code> and <code>--mount</code> flag</h3>\\n<p>There is two ways we could use volume on our target, with <code>-v</code> or <code>--volum</code> flag, or with <code>--mount</code> flag.</p>\\n<p>In general, <code>--mount</code> is more explicit and verbose, but it was available for standalone containers since Docker 17.06, before that it only use on swarm services. And the <code>-v</code> flag only support for container, not for services.</p>\\n<p>The biggest difference is that the <code>-v</code> or <code>--volume</code> syntax combines all the options together <strong>in one field</strong>, while the <code>--mount</code> syntax separates them.</p>\\n<p>If you need to specify volume driver options, you must use <code>--mount</code>.</p>\\n<ul>\\n<li><p><code>-v</code> or <code>--volume</code> : Consists of three fields, separated by colon characters (<code>:</code>). The fields must be in the correct order, and the meaning of each field is not immediately obvious.</p>\\n<ul>\\n<li>In the case of named volumes, the first field is the name of the volume, and is unique on a given host machine. For anonymous volumes, the first field is omitted.</li>\\n<li>The second field is the path where the file or directory are mounted in the container.</li>\\n<li>The third field is optional, and is a comma-separated list of options, such as <code>ro</code>. These options are discussed below.</li>\\n</ul>\\n</li>\\n<li><p><code>--mount</code>  : Consists of multiple key-value pairs, separated by commas and each consisting of a <code>&lt;key&gt;=&lt;value&gt;</code>tuple. The<code>--mount</code>syntax is more verbose than<code>-v</code> or <code>--volume</code>, but the order of the keys is not significant, and the value of the flag is easier to understand.</p>\\n<ul>\\n<li>The <code>type</code> of the mount, which can be <a href=\\\"https://docs.docker.com/storage/bind-mounts/\\\"><code>bind</code></a>, <code>volume</code>, or <a href=\\\"https://docs.docker.com/storage/tmpfs/\\\"><code>tmpfs</code></a>. This topic discusses volumes, so the type is always<code>volume</code>.</li>\\n<li>The <code>source</code> of the mount. For named volumes, this is the name of the volume. For anonymous volumes, this field is omitted. May be specified as <code>source</code> or <code>src</code>.</li>\\n<li>The <code>destination</code> takes as its value the path where the file or directory is mounted in the container. May be specified as <code>destination</code>, <code>dst</code>, or <code>target</code>.</li>\\n<li>The <code>readonly</code> option, if present, causes the bind mount to be <a href=\\\"https://docs.docker.com/storage/volumes/#use-a-read-only-volume\\\">mounted into the container as read-only</a>.</li>\\n<li>The <code>volume-opt</code> option, which can be specified more than once, takes a key-value pair consisting of the option name and its value.</li>\\n</ul>\\n</li>\\n</ul>\\n<blockquote>\\n<p>At this article, I just show the <code>--mount</code> flag.</p>\\n</blockquote>\\n<h3 id=\\\"create-and-manage-volumes\\\">Create and manage volumes</h3>\\n<ul>\\n<li><p>create</p>\\n<pre><code class=\\\"hljs language-bash\\\">$ docker volume create my-vol\\n</code></pre>\\n</li>\\n<li><p>list volumes</p>\\n<pre><code class=\\\"hljs language-bash\\\">$ docker volume <span class=\\\"hljs-built_in\\\">ls</span>\\n</code></pre>\\n</li>\\n<li><p>inspect volume</p>\\n<pre><code class=\\\"hljs language-bash\\\">$ docker volume inspect my-vol\\n[\\n    {\\n        <span class=\\\"hljs-string\\\">&quot;Driver&quot;</span>: <span class=\\\"hljs-string\\\">&quot;local&quot;</span>,\\n        <span class=\\\"hljs-string\\\">&quot;Labels&quot;</span>: {},\\n        <span class=\\\"hljs-string\\\">&quot;Mountpoint&quot;</span>: <span class=\\\"hljs-string\\\">&quot;/var/lib/docker/volumes/my-vol/_data&quot;</span>,\\n        <span class=\\\"hljs-string\\\">&quot;Name&quot;</span>: <span class=\\\"hljs-string\\\">&quot;my-vol&quot;</span>,\\n        <span class=\\\"hljs-string\\\">&quot;Options&quot;</span>: {},\\n        <span class=\\\"hljs-string\\\">&quot;Scope&quot;</span>: <span class=\\\"hljs-string\\\">&quot;local&quot;</span>\\n    }\\n]\\n</code></pre>\\n</li>\\n<li><p>remove volume</p>\\n<pre><code class=\\\"hljs language-bash\\\">$ docker volume <span class=\\\"hljs-built_in\\\">rm</span> my-vol\\n</code></pre>\\n</li>\\n</ul>\\n<h3 id=\\\"use-case\\\">Use case</h3>\\n<p>If you start a container with a volume that does not yet exist, Docker creates the volume for you. The following example mounts the volume <code>myvol2</code> into <code>/app/</code> in the container.</p>\\n<p>The <code>-v</code> and <code>--mount</code> examples below produce the same result. You can’t run them both unless you remove the <code>devtest</code> container and the <code>myvol2</code> volume after running the first one.</p>\\n<h4 id=\\\"start-with-container\\\">Start with container</h4>\\n<pre><code class=\\\"hljs language-bash\\\">$ docker run -d \\\\\\n  --name devtest \\\\\\n  --mount <span class=\\\"hljs-built_in\\\">source</span>=myvol2,target=/app \\\\\\n  nginx:latest\\n</code></pre>\\n<p>Use <code>docker inspect devtest</code> to verify that the volume was created and mounted correctly. Look for the <code>Mounts</code> section:</p>\\n<pre><code class=\\\"hljs language-bash\\\"><span class=\\\"hljs-string\\\">&quot;Mounts&quot;</span>: [\\n    {\\n        <span class=\\\"hljs-string\\\">&quot;Type&quot;</span>: <span class=\\\"hljs-string\\\">&quot;volume&quot;</span>,\\n        <span class=\\\"hljs-string\\\">&quot;Name&quot;</span>: <span class=\\\"hljs-string\\\">&quot;myvol2&quot;</span>,\\n        <span class=\\\"hljs-string\\\">&quot;Source&quot;</span>: <span class=\\\"hljs-string\\\">&quot;/var/lib/docker/volumes/myvol2/_data&quot;</span>,\\n        <span class=\\\"hljs-string\\\">&quot;Destination&quot;</span>: <span class=\\\"hljs-string\\\">&quot;/app&quot;</span>,\\n        <span class=\\\"hljs-string\\\">&quot;Driver&quot;</span>: <span class=\\\"hljs-string\\\">&quot;local&quot;</span>,\\n        <span class=\\\"hljs-string\\\">&quot;Mode&quot;</span>: <span class=\\\"hljs-string\\\">&quot;&quot;</span>,\\n        <span class=\\\"hljs-string\\\">&quot;RW&quot;</span>: <span class=\\\"hljs-literal\\\">true</span>,\\n        <span class=\\\"hljs-string\\\">&quot;Propagation&quot;</span>: <span class=\\\"hljs-string\\\">&quot;&quot;</span>\\n    }\\n],\\n</code></pre>\\n<p>This shows that the mount is a volume, it shows the correct source and destination, and that the mount is read-write.</p>\\n<p>Stop the container and remove the volume. Note volume removal is a separate step.</p>\\n<pre><code class=\\\"hljs language-bash\\\">$ docker container stop devtest\\n\\n$ docker container <span class=\\\"hljs-built_in\\\">rm</span> devtest\\n\\n$ docker volume <span class=\\\"hljs-built_in\\\">rm</span> myvol2\\n</code></pre>\\n<h4 id=\\\"start-with-service\\\">Start with service</h4>\\n<p>When you start a service and define a volume, each service container uses its own local volume. None of the containers can share this data if you use the <code>local</code> volume driver, but some volume drivers do support shared storage. Docker for AWS and Docker for Azure both support persistent storage using the Cloudstor plugin.</p>\\n<p>The following example starts a <code>nginx</code> service with four replicas, each of which uses a local volume called <code>myvol2</code>.</p>\\n<pre><code class=\\\"hljs language-bash\\\">$ docker service create -d \\\\\\n  --replicas=4 \\\\\\n  --name devtest-service \\\\\\n  --mount <span class=\\\"hljs-built_in\\\">source</span>=myvol2,target=/app \\\\\\n  nginx:latest\\n</code></pre>\\n<p>Use <code>docker service ps devtest-service</code> to verify that the service is running:</p>\\n<pre><code class=\\\"hljs language-bash\\\">$ docker service ps devtest-service\\n\\nID                  NAME                IMAGE               NODE                DESIRED STATE       CURRENT STATE            ERROR               PORTS\\n4d7oz1j85wwn        devtest-service.1   nginx:latest        moby                Running             Running 14 seconds ago\\n</code></pre>\\n<p>Remove the service, which stops all its tasks:</p>\\n<pre><code class=\\\"hljs language-bash\\\">$ docker service <span class=\\\"hljs-built_in\\\">rm</span> devtest-service\\n</code></pre>\\n<p>Removing the service does not remove any volumes created by the service. Volume removal is a separate step.</p>\\n<h4 id=\\\"populate-a-volume-using-a-container\\\">Populate a volume using a container</h4>\\n<p>If you start a container which creates a new volume, as above, and the container has files or directories in the directory to be mounted (such as <code>/app/</code> above), the directory’s contents are copied into the volume. The container then mounts and uses the volume, and other containers which use the volume also have access to the pre-populated content.</p>\\n<p>To illustrate this, this example starts an <code>nginx</code> container and populates the new volume <code>nginx-vol</code> with the contents of the container’s <code>/usr/share/nginx/html</code> directory, which is where Nginx stores its default HTML content.</p>\\n<p>The <code>--mount</code> and <code>-v</code> examples have the same end result.</p>\\n<pre><code class=\\\"hljs language-bash\\\">$ docker run -d \\\\\\n  --name=nginxtest \\\\\\n  --mount <span class=\\\"hljs-built_in\\\">source</span>=nginx-vol,destination=/usr/share/nginx/html \\\\\\n  nginx:latest\\n</code></pre>\\n<p>After running either of these examples, run the following commands to clean up the containers and volumes. Note volume removal is a separate step.</p>\\n<pre><code class=\\\"hljs language-bash\\\">$ docker container stop nginxtest\\n\\n$ docker container <span class=\\\"hljs-built_in\\\">rm</span> nginxtest\\n\\n$ docker volume <span class=\\\"hljs-built_in\\\">rm</span> nginx-vol\\n</code></pre>\\n<h4 id=\\\"read-only\\\">Read-only</h4>\\n<p>Because the volume could be mount at multiple containers, so there might containers only needs read access to the data.</p>\\n<pre><code class=\\\"hljs language-bash\\\">$ docker run -d \\\\\\n  --name=nginxtest \\\\\\n  --mount <span class=\\\"hljs-built_in\\\">source</span>=nginx-vol,destination=/usr/share/nginx/html,<span class=\\\"hljs-built_in\\\">readonly</span> \\\\\\n  nginx:latest\\n</code></pre>\\n<h3 id=\\\"other-case\\\">Other case</h3>\\n<p>There are other use case on official doc like: <strong>Share data among machines</strong>, <strong>Back up, restore, migrate data volumes</strong> and so on.</p>\\n<p>You can check more information by refer to: <a href=\\\"https://docs.docker.com/storage/volumes\\\">https://docs.docker.com/storage/volumes</a></p>\\n\";","export default \"<h3 id=\\\"basic-algorithm-in-binary-tree\\\">Basic Algorithm In Binary Tree</h3>\\n<h4 id=\\\"traverse\\\">Traverse</h4>\\n<p>A Tree is typically traversed in two ways:</p>\\n<ul>\\n<li>Breadth First Traversal (Or Level Order Traversal)</li>\\n<li>Depth First Traversals<ul>\\n<li>Inorder Traversal (Left-Root-Right)</li>\\n<li>Preorder Traversal (Root-Left-Right)</li>\\n<li>Postorder Traversal (Left-Right-Root)</li>\\n</ul>\\n</li>\\n</ul>\\n<pre><code>            1\\n          /   \\\\\\n         2     3\\n       /  \\\\\\n      4    5\\n\\nBFS and DFSs of above Tree\\nBreadth First Traversal : 1 2 3 4 5\\nDepth First Traversals:\\n      Preorder  : 1 2 4 5 3 \\n      Inorder   : 4 2 5 1 3 \\n      Postorder : 4 5 2 3 1\\n</code></pre>\\n<p><strong>Is there any difference in terms of Time Complexity?</strong>\\nAll four traversals require <strong>O(n)</strong> time as they visit every node exactly once.</p>\\n<p><strong>Is there any difference in terms of Extra Space?</strong>\\nThere is difference in terms of extra space required.</p>\\n<ol>\\n<li>Extra Space required for <strong>Level Order</strong> Traversal is <strong>O(w) where w is maximum width</strong> of Binary Tree. In level order traversal, <strong>queue</strong> one by one stores nodes of different level.</li>\\n<li>Extra Space required for <strong>Depth First</strong> Traversals is <strong>O(h) where h is maximum height</strong> of Binary Tree. In Depth First Traversals, <strong>stack</strong> (or function call stack) stores all ancestors of a node.</li>\\n</ol>\\n<p><em><strong>It is evident from above points that extra space required for Level order traversal is likely to be more when tree is more balanced and extra space for Depth First Traversal is likely to be more when tree is less balanced.</strong></em></p>\\n<p><strong>How to Pick One?</strong></p>\\n<ol>\\n<li><p>Extra Space can be one factor (Explained above)</p>\\n</li>\\n<li><p>Depth First Traversals are typically recursive and recursive code requires function call overheads.</p>\\n</li>\\n<li><p>The most important points is:</p>\\n<blockquote>\\n<p><strong>BFS starts visiting nodes from root while DFS starts visiting nodes from leaves.</strong> </p>\\n<p>So if our problem is to search something that is more likely to closer to root, we would prefer BFS. And if the target node is close to a leaf, we would prefer DFS.</p>\\n</blockquote>\\n</li>\\n</ol>\\n<h5 id=\\\"bfsbreathfirstsearch\\\">BFS(BreathFirstSearch)</h5>\\n<p><strong>Idea:</strong></p>\\n<ol>\\n<li>need a <strong>queue</strong></li>\\n<li>need root node, and add it into queue</li>\\n<li>loop this while queue is not empty:<ol>\\n<li>dequeue the queue head as tmp</li>\\n<li>print tmp&#39;s value;</li>\\n<li>enqueue tmp&#39;s children(left first then right);</li>\\n</ol>\\n</li>\\n</ol>\\n<pre><code class=\\\"hljs language-java\\\"><span class=\\\"hljs-keyword\\\">public</span> <span class=\\\"hljs-keyword\\\">static</span> <span class=\\\"hljs-keyword\\\">void</span> <span class=\\\"hljs-title function_\\\">breathFirstTraversal</span><span class=\\\"hljs-params\\\">(Node root)</span> {\\n    LinkedList&lt;Node&gt; q = <span class=\\\"hljs-keyword\\\">new</span> <span class=\\\"hljs-title class_\\\">LinkedList</span>&lt;&gt;();\\n    q.add(root);\\n    <span class=\\\"hljs-keyword\\\">while</span> (!q.isEmpty()) {\\n        <span class=\\\"hljs-type\\\">Node</span> <span class=\\\"hljs-variable\\\">tmp</span> <span class=\\\"hljs-operator\\\">=</span> q.poll();\\n        System.out.print(tmp.val + <span class=\\\"hljs-string\\\">&quot; &quot;</span>);\\n        <span class=\\\"hljs-keyword\\\">if</span> (tmp.left != <span class=\\\"hljs-literal\\\">null</span>) {\\n            q.add(tmp.left);\\n        }\\n        <span class=\\\"hljs-keyword\\\">if</span> (tmp.right != <span class=\\\"hljs-literal\\\">null</span>) {\\n            q.add(tmp.right);\\n        }\\n    }\\n}\\n</code></pre>\\n<h5 id=\\\"dfsdepthfirstsearch\\\">DFS(DepthFirstSearch)</h5>\\n<p>With the different position of root&#39;s visit, their 3 types of DFS: <strong>pre-order</strong>, <strong>in-order</strong>, <strong>post-order</strong>.</p>\\n<p>There are two way we could use to implement it: <strong>1) loop with stack; 2) recursion</strong></p>\\n<p>And we omit the recursion solusion here.</p>\\n<h6 id=\\\"pre-order\\\"><strong>Pre-Order</strong></h6>\\n<pre><code class=\\\"hljs language-java\\\"><span class=\\\"hljs-keyword\\\">public</span> List&lt;Integer&gt; <span class=\\\"hljs-title function_\\\">preorderTraversal</span><span class=\\\"hljs-params\\\">(TreeNode root)</span> {\\n    LinkedList&lt;Integer&gt; ans = <span class=\\\"hljs-keyword\\\">new</span> <span class=\\\"hljs-title class_\\\">LinkedList</span>&lt;&gt;();\\n    <span class=\\\"hljs-keyword\\\">if</span> (root == <span class=\\\"hljs-literal\\\">null</span>) <span class=\\\"hljs-keyword\\\">return</span> ans;\\n    Stack&lt;TreeNode&gt; s = <span class=\\\"hljs-keyword\\\">new</span> <span class=\\\"hljs-title class_\\\">Stack</span>&lt;&gt;();\\n    s.push(root);\\n    <span class=\\\"hljs-keyword\\\">while</span> (!s.isEmpty()) {\\n        <span class=\\\"hljs-type\\\">TreeNode</span> <span class=\\\"hljs-variable\\\">tmp</span> <span class=\\\"hljs-operator\\\">=</span> s.pop();\\n        ans.add(tmp.val);\\n\\n        <span class=\\\"hljs-keyword\\\">if</span> (tmp.right != <span class=\\\"hljs-literal\\\">null</span>) s.push(tmp.right);\\n        <span class=\\\"hljs-keyword\\\">if</span> (tmp.left  != <span class=\\\"hljs-literal\\\">null</span>) s.push(tmp.left);\\n    }\\n    <span class=\\\"hljs-keyword\\\">return</span> ans;\\n}\\n</code></pre>\\n<h6 id=\\\"in-order\\\"><strong>In Order</strong></h6>\\n<pre><code class=\\\"hljs language-java\\\"><span class=\\\"hljs-keyword\\\">public</span> List&lt;Integer&gt; <span class=\\\"hljs-title function_\\\">inorderTraversal</span><span class=\\\"hljs-params\\\">(TreeNode root)</span> {\\n    LinkedList&lt;Integer&gt; ans = <span class=\\\"hljs-keyword\\\">new</span> <span class=\\\"hljs-title class_\\\">LinkedList</span>&lt;&gt;();\\n    Stack&lt;TreeNode&gt; s = <span class=\\\"hljs-keyword\\\">new</span> <span class=\\\"hljs-title class_\\\">Stack</span>&lt;&gt;();\\n    <span class=\\\"hljs-type\\\">TreeNode</span> <span class=\\\"hljs-variable\\\">tmp</span> <span class=\\\"hljs-operator\\\">=</span> root;\\n    <span class=\\\"hljs-keyword\\\">while</span> (tmp != <span class=\\\"hljs-literal\\\">null</span> || !s.isEmpty()) {\\n        <span class=\\\"hljs-keyword\\\">if</span> (tmp != <span class=\\\"hljs-literal\\\">null</span>) {\\n            s.push(tmp);\\n            tmp = tmp.left;\\n        } <span class=\\\"hljs-keyword\\\">else</span> {\\n            tmp = s.pop();\\n            ans.add(tmp.val);\\n            tmp = tmp.right;\\n        }\\n    }\\n    <span class=\\\"hljs-keyword\\\">return</span> ans;\\n}\\n</code></pre>\\n<h6 id=\\\"post-order\\\"><strong>Post Order</strong></h6>\\n<pre><code class=\\\"hljs language-java\\\"><span class=\\\"hljs-keyword\\\">public</span> List&lt;Integer&gt; <span class=\\\"hljs-title function_\\\">postorderTraversal</span><span class=\\\"hljs-params\\\">(TreeNode root)</span> {\\n    Stack&lt;TreeNode&gt; s = <span class=\\\"hljs-keyword\\\">new</span> <span class=\\\"hljs-title class_\\\">Stack</span>&lt;&gt;();\\n    LinkedList&lt;Integer&gt; ans = <span class=\\\"hljs-keyword\\\">new</span> <span class=\\\"hljs-title class_\\\">LinkedList</span>&lt;&gt;();\\n    <span class=\\\"hljs-keyword\\\">if</span> (root == <span class=\\\"hljs-literal\\\">null</span>) <span class=\\\"hljs-keyword\\\">return</span> ans;\\n    s.push(root);\\n    <span class=\\\"hljs-keyword\\\">while</span> (!s.isEmpty()) {\\n        <span class=\\\"hljs-type\\\">TreeNode</span> <span class=\\\"hljs-variable\\\">tmp</span> <span class=\\\"hljs-operator\\\">=</span> s.pop();\\n        ans.addFirst(tmp.val);\\n\\n        <span class=\\\"hljs-keyword\\\">if</span> (tmp.left  != <span class=\\\"hljs-literal\\\">null</span>) s.push(tmp.left);\\n        <span class=\\\"hljs-keyword\\\">if</span> (tmp.right != <span class=\\\"hljs-literal\\\">null</span>) s.push(tmp.right);\\n    }\\n    <span class=\\\"hljs-keyword\\\">return</span> ans;\\n}\\n</code></pre>\\n<h4 id=\\\"insertion-in-level-order\\\">Insertion in level order</h4>\\n<p><strong>Idea:</strong> Traverse tree with level order, find a node which didn&#39;t have two child, insert the new node at here with level order.</p>\\n<pre>\\ntree: \\n        10                                    10\\n      /    \\\\            insert 3            /    \\\\\\n    11      9           -------&gt;          11      9\\n      \\\\    /                             /  \\\\    /\\n       7  15                            3    7  15\\n</pre>\\n\\n\";","export default \"<h3 id=\\\"introductions\\\">Introductions</h3>\\n<p>首先 Jenkins 要吐槽一下，Jenkins 的 Logo 真的是太丑了，虽然很明显是一个管家形象- -</p>\\n<p><img src=\\\"../../../public/img/20181119145558.png\\\" alt=\\\"\\\"></p>\\n<p>Jenkins 的默认 UI 也有点丑，还不如官网的 UI 好看</p>\\n<p>但是不影响这玩意的强大表现</p>\\n<h3 id=\\\"installation-on-centos\\\">Installation on CentOS</h3>\\n<h4 id=\\\"fetch-yum-repo\\\">Fetch yum repo</h4>\\n<p>Add the Jenkins repository to the yum repos, and install Jenkins from here.</p>\\n<p>There is also <a href=\\\"http://pkg.jenkins-ci.org/redhat-stable/\\\">a LTS YUM repository</a> for the <a href=\\\"https://wiki.jenkins.io/display/JENKINS/LTS+Release+Line\\\">LTS Release Line</a></p>\\n<ul>\\n<li><code>sudo wget -O /etc/yum.repos.d/jenkins.repo</code> <code>http://pkg.jenkins-ci.org/redhat-stable/jenkins.repo</code></li>\\n<li><code>sudo rpm --import</code> <code>https://jenkins-ci.org/redhat/jenkins-ci.org.key</code></li>\\n<li><code>sudo yum install jenkins</code></li>\\n</ul>\\n<h4 id=\\\"installation-of-java\\\">Installation of Java</h4>\\n<p>Jenkins requires Java in order to run, yet certain distros don&#39;t include this by default. To install the Open Java Development Kit (OpenJDK) run the following:</p>\\n<pre><code class=\\\"hljs language-bash\\\">$ sudo yum install java\\n</code></pre>\\n<p><strong>Note:</strong> If running CentOS, ensure you follow the <a href=\\\"https://wiki.jenkins.io/display/JENKINS/Installing+Jenkins+on+Red+Hat+distributions#InstallingJenkinsonRedHatdistributions-ImportantNoteonCentOSJava\\\">guide below</a>.</p>\\n<h4 id=\\\"startstop\\\">Start/Stop</h4>\\n<ul>\\n<li><code>sudo service jenkins start/stop/restart</code></li>\\n<li><code>sudo chkconfig jenkins on</code></li>\\n</ul>\\n<p><strong>Note:</strong> if you get the following error message, ensure that Java has been installed:</p>\\n<pre><code class=\\\"hljs language-bash\\\">Starting jenkins (via systemctl):  Job `<span class=\\\"hljs-keyword\\\">for</span>` jenkins.service failed. See `<span class=\\\"hljs-string\\\">&#x27;systemctl status jenkins.service&#x27;</span>` and `<span class=\\\"hljs-string\\\">&#x27;journalctl -xn&#x27;</span>` `<span class=\\\"hljs-keyword\\\">for</span>` details.[FAILED]\\n</code></pre>\\n<h4 id=\\\"what-does-this-package-do\\\">What does this package do?</h4>\\n<ul>\\n<li>Jenkins will be launched as a daemon on startup. See <code>/etc/init.d/jenkins</code> for more details.</li>\\n<li>The &#39;<code>jenkins</code>&#39; user is created to run this service. If you change this to a different user via the config file, you must change the owner of /var/log/jenkins, /var/lib/jenkins, and /var/cache/jenkins.</li>\\n<li>Log file will be placed in <code>/var/log/jenkins/jenkins.log</code>. Check this file if you are troubleshooting Jenkins.</li>\\n<li><code>/etc/sysconfig/jenkins</code> will capture configuration parameters for the launch.</li>\\n<li>By default, Jenkins listen on port 8080. Access this port with your browser to start configuration. Note that the built-in firewall may have to be opened to access this port from other computers. (See <a href=\\\"http://www.cyberciti.biz/faq/disable-linux-firewall-under-centos-rhel-fedora/\\\">http://www.cyberciti.biz/faq/disable-linux-firewall-under-centos-rhel-fedora/</a> for instructions how to disable the firewall permanently)</li>\\n<li>A Jenkins RPM repository is added in <code>/etc/yum.repos.d/jenkins.repo</code></li>\\n</ul>\\n<blockquote>\\n<p><strong>Notice</strong>:</p>\\n<ul>\\n<li>可以在<code>/etc/sysconfig/jenkins</code>这个路径下找到 Jenkins 的配置文件</li>\\n<li>要在 CentOS 下支持 Jenkins，请不要使用 JDK，要安装 OpenJDK</li>\\n</ul>\\n</blockquote>\\n<h4 id=\\\"more-change-jenkins-run-as-with-root\\\">More: change Jenkins run as with root</h4>\\n<p>在 Jenkins 中运行 shell 脚本经常遇到权限问题，解决起来非常麻烦，我们索性来个终极解决办法，就是给 jenkins 一个 root 权限，这样就不会再遇到权限问题了。</p>\\n<ol>\\n<li><p><code>vim /etc/sysconfig/jenkins</code></p>\\n</li>\\n<li><p>找到 JENKINS_USER 改为 “root”:</p>\\n</li>\\n</ol>\\n<pre><code>JENKINS_USER=&quot;root&quot;\\n</code></pre>\\n<p>3)然后更改 Jenkins home，webroot 和日志的所有权：</p>\\n<pre><code class=\\\"hljs language-bash\\\">$ <span class=\\\"hljs-built_in\\\">chown</span> -R root:root /var/lib/jenkins\\n$ <span class=\\\"hljs-built_in\\\">chown</span> -R root:root /var/cache/jenkins\\n$ <span class=\\\"hljs-built_in\\\">chown</span> -R root:root /var/log/jenkins\\n</code></pre>\\n<p>4).重新启动 Jenkins 并检查用户是否已被更改</p>\\n<pre><code class=\\\"hljs language-bash\\\">$ service jenkins restart\\n</code></pre>\\n<p>这样我们就给 jenkins 设置了 root 权限，我们再运行 shell 脚本就不会提示权限问题了。</p>\\n<h4 id=\\\"wiki\\\">Wiki</h4>\\n<p><a href=\\\"https://wiki.jenkins.io/display/JENKINS/Installing+Jenkins+on+Red+Hat+distributions\\\">https://wiki.jenkins.io/display/JENKINS/Installing+Jenkins+on+Red+Hat+distributions</a></p>\\n<h3 id=\\\"create-your-first-pipline-by-using-github-repo-as-branch-source\\\">Create your first pipline by using github repo as branch source</h3>\\n<p>To get started quickly with Pipeline:</p>\\n<ol>\\n<li>Copy one of the <a href=\\\"https://jenkins.io/doc/pipeline/tour/hello-world/#examples\\\">examples below</a> into your repository and name it <code>Jenkinsfile</code></li>\\n<li>Click the <strong>New Item</strong> menu within Jenkins</li>\\n<li>Provide a name for your new item (e.g. <strong>My Pipeline</strong>) and select <strong>Multibranch Pipeline</strong></li>\\n<li>Click the <strong>Add Source</strong> button, choose the type of repository you want to use and fill in the details.</li>\\n<li>Click the <strong>Save</strong> button and watch your first Pipeline run!</li>\\n</ol>\\n<p><img src=\\\"../../../public/img/20181119184317.png\\\" alt=\\\"\\\"></p>\\n<p>Jinkinsfile:</p>\\n<pre><code class=\\\"hljs language-Jenkinsfile\\\">// Jenkinsfile (Declarative Pipeline)\\npipeline {\\n    agent { docker { image &#x27;maven:3.3.3&#x27; } }\\n    stages {\\n        stage(&#x27;build&#x27;) {\\n            steps {\\n                sh &#x27;mvn --version&#x27;\\n            }\\n        }\\n    }\\n}\\n</code></pre>\\n<p>Then when the pipline is building, you can see the console output at:</p>\\n<p><img src=\\\"../../../public/img/20181119185023.png\\\" alt=\\\"\\\"></p>\\n\";","export default \"<h3 id=\\\"术语\\\">术语</h3>\\n<p><strong>稳定性：</strong>算法排序前后，相同值的元素的相对位置是否不变，变了就不稳定</p>\\n<p><strong>在位性：</strong>算法排序是否要借助额外的内存空间，需要就不在位</p>\\n<h3 id=\\\"各数据对比\\\">各数据对比</h3>\\n<h4 id=\\\"小数据量\\\">小数据量</h4>\\n<table>\\n<thead>\\n<tr>\\n<th align=\\\"center\\\">算法</th>\\n<th align=\\\"center\\\">最好</th>\\n<th align=\\\"center\\\">平均</th>\\n<th align=\\\"center\\\">最坏</th>\\n<th align=\\\"center\\\">辅助空间</th>\\n<th align=\\\"center\\\">稳定性</th>\\n</tr>\\n</thead>\\n<tbody><tr>\\n<td align=\\\"center\\\">冒泡排序</td>\\n<td align=\\\"center\\\"><strong>O(n)</strong></td>\\n<td align=\\\"center\\\">O(n^2)</td>\\n<td align=\\\"center\\\">O(n^2)</td>\\n<td align=\\\"center\\\">O(1)</td>\\n<td align=\\\"center\\\">✔️</td>\\n</tr>\\n<tr>\\n<td align=\\\"center\\\">选择排序</td>\\n<td align=\\\"center\\\"><strong>O(n)</strong></td>\\n<td align=\\\"center\\\">O(n^2)</td>\\n<td align=\\\"center\\\">O(n^2)</td>\\n<td align=\\\"center\\\">O(1)</td>\\n<td align=\\\"center\\\">✖️</td>\\n</tr>\\n<tr>\\n<td align=\\\"center\\\">插入排序</td>\\n<td align=\\\"center\\\"><strong>O(n)</strong></td>\\n<td align=\\\"center\\\">O(n^2)</td>\\n<td align=\\\"center\\\">O(n^2)</td>\\n<td align=\\\"center\\\">O(1)</td>\\n<td align=\\\"center\\\">✔️</td>\\n</tr>\\n<tr>\\n<td align=\\\"center\\\">希尔排序</td>\\n<td align=\\\"center\\\"><strong>O(n^1.3)</strong></td>\\n<td align=\\\"center\\\"><strong>O(nlogn)~O(n^2)</strong></td>\\n<td align=\\\"center\\\"><strong>O(n^2)</strong></td>\\n<td align=\\\"center\\\">O(1)</td>\\n<td align=\\\"center\\\">✖️</td>\\n</tr>\\n</tbody></table>\\n<h4 id=\\\"大数据量\\\">大数据量</h4>\\n<table>\\n<thead>\\n<tr>\\n<th align=\\\"center\\\">算法</th>\\n<th align=\\\"center\\\">最好</th>\\n<th align=\\\"center\\\">平均</th>\\n<th align=\\\"center\\\">最坏</th>\\n<th align=\\\"center\\\">辅助空间</th>\\n<th align=\\\"center\\\">稳定性</th>\\n</tr>\\n</thead>\\n<tbody><tr>\\n<td align=\\\"center\\\">快速排序</td>\\n<td align=\\\"center\\\">O(nlogn)</td>\\n<td align=\\\"center\\\">O(nlogn)</td>\\n<td align=\\\"center\\\"><strong>O(n^2)</strong></td>\\n<td align=\\\"center\\\"><strong>O(logn)~O(n)</strong></td>\\n<td align=\\\"center\\\">✖️</td>\\n</tr>\\n<tr>\\n<td align=\\\"center\\\">归并排序</td>\\n<td align=\\\"center\\\">O(nlogn)</td>\\n<td align=\\\"center\\\">O(nlogn)</td>\\n<td align=\\\"center\\\">O(nlogn)</td>\\n<td align=\\\"center\\\"><strong>O(n)</strong></td>\\n<td align=\\\"center\\\">✔️</td>\\n</tr>\\n<tr>\\n<td align=\\\"center\\\">堆排序</td>\\n<td align=\\\"center\\\">O(nlogn)</td>\\n<td align=\\\"center\\\">O(nlogn)</td>\\n<td align=\\\"center\\\">O(nlogn)</td>\\n<td align=\\\"center\\\">O(1)</td>\\n<td align=\\\"center\\\">✖️</td>\\n</tr>\\n</tbody></table>\\n<hr>\\n<h3 id=\\\"bubblesort\\\">BubbleSort</h3>\\n<blockquote>\\n<p> 相邻元素之间两两比较，按照大小顺序作为交换，每一轮比较都把最大的元素安排到当前轮次的最后面</p>\\n<p> 每一轮都把当前待排序列的最大元素从前往后“移动”到最后面，移动的过程形象为“冒泡”；</p>\\n<p> 所用技术：<strong>蛮力法</strong></p>\\n<p> 稳定性：<strong>稳定</strong></p>\\n<p> 在位性：<strong>在位</strong></p>\\n<p> 使用场景：处理<strong>基本有序</strong>，<strong>小量数据</strong></p>\\n<p> 优化措施：设置一个<strong>标志</strong>，每轮比较时，如果发现没有进行交换操作，说明数组已经有序，退出循环，停止比较</p>\\n<p> 时间复杂度：</p>\\n<ul>\\n<li>最坏：<strong>O(n^2)</strong></li>\\n<li>最好：<strong>O(n)</strong></li>\\n<li>平均：<strong>O(n^2)</strong></li>\\n</ul>\\n</blockquote>\\n<pre><code class=\\\"hljs language-java\\\"><span class=\\\"hljs-keyword\\\">public</span> <span class=\\\"hljs-keyword\\\">static</span> <span class=\\\"hljs-keyword\\\">void</span> <span class=\\\"hljs-title function_\\\">bubbleSort</span><span class=\\\"hljs-params\\\">(<span class=\\\"hljs-type\\\">int</span>[] arr)</span>{\\n    <span class=\\\"hljs-keyword\\\">for</span> (<span class=\\\"hljs-type\\\">int</span> <span class=\\\"hljs-variable\\\">i</span> <span class=\\\"hljs-operator\\\">=</span> <span class=\\\"hljs-number\\\">0</span>; i &lt; arr.length - <span class=\\\"hljs-number\\\">1</span>; ++i) {\\n        <span class=\\\"hljs-keyword\\\">for</span> (<span class=\\\"hljs-type\\\">int</span> <span class=\\\"hljs-variable\\\">j</span> <span class=\\\"hljs-operator\\\">=</span> <span class=\\\"hljs-number\\\">0</span> ; j &lt; arr.length - <span class=\\\"hljs-number\\\">1</span> - i; ++j) {\\n            <span class=\\\"hljs-keyword\\\">if</span> (arr[j] &gt; arr[j+<span class=\\\"hljs-number\\\">1</span>]) {\\n                swap(arr, j, j+<span class=\\\"hljs-number\\\">1</span>);\\n            }\\n        }\\n    }\\n}\\n</code></pre>\\n<hr>\\n<h3 id=\\\"selectionsort\\\">SelectionSort</h3>\\n<blockquote>\\n<p>每次扫描后n-i个元素 选出当前参与扫描的最小值，扫描结束后把最小值放置当前轮次的最前面</p>\\n<p>每一轮都把最值放到端位置，例子中就是找的最小值，放到最前面，挑最值的过程称为“选择”</p>\\n<p>所用技术：<strong>蛮力法</strong></p>\\n<p>稳定性：<strong>不稳定</strong></p>\\n<p>在位性：<strong>在位的</strong></p>\\n<p>使用场景：处理<strong>基本有序</strong>，<strong>小量数据</strong></p>\\n<p>优化措施：每次寻找最小或最大元素时，同时记录最小最大元素的位置，每次使用3次比较寻找两个元素的位置，而不是4次比较</p>\\n<p>时间复杂度：</p>\\n<ul>\\n<li>最坏：<strong>O(n^2)</strong></li>\\n<li>最好：<strong>O(n^2)</strong></li>\\n<li>平均：<strong>O(n^2)</strong></li>\\n</ul>\\n</blockquote>\\n<pre><code class=\\\"hljs language-java\\\"><span class=\\\"hljs-keyword\\\">public</span> <span class=\\\"hljs-keyword\\\">static</span> <span class=\\\"hljs-keyword\\\">void</span> <span class=\\\"hljs-title function_\\\">selectionSort</span><span class=\\\"hljs-params\\\">(<span class=\\\"hljs-type\\\">int</span>[] arr)</span>{\\n    <span class=\\\"hljs-keyword\\\">for</span> (<span class=\\\"hljs-type\\\">int</span> <span class=\\\"hljs-variable\\\">i</span> <span class=\\\"hljs-operator\\\">=</span> <span class=\\\"hljs-number\\\">0</span> ; i &lt; arr.length - <span class=\\\"hljs-number\\\">1</span>; ++i) {\\n        <span class=\\\"hljs-type\\\">int</span> <span class=\\\"hljs-variable\\\">minIndex</span> <span class=\\\"hljs-operator\\\">=</span> i;\\n        <span class=\\\"hljs-keyword\\\">for</span> (<span class=\\\"hljs-type\\\">int</span> <span class=\\\"hljs-variable\\\">j</span> <span class=\\\"hljs-operator\\\">=</span> i + <span class=\\\"hljs-number\\\">1</span> ; j &lt; arr.length ; ++j) {\\n            <span class=\\\"hljs-keyword\\\">if</span> (arr[minIndex] &gt; arr[j]){\\n                minIndex = j;\\n            }\\n        }\\n        <span class=\\\"hljs-keyword\\\">if</span> (minIndex != i) {\\n            swap(arr, i, minIndex);\\n        }\\n    }\\n}\\n</code></pre>\\n<hr>\\n<h3 id=\\\"insertionsort\\\">InsertionSort</h3>\\n<h4 id=\\\"straightinsertionsort\\\">StraightInsertionSort</h4>\\n<blockquote>\\n<p>将数组分为两部分，一部分是已经排序好的，另一部分是待插入的数组</p>\\n<p>每次从待插入的数组中取出<strong>第一个元素</strong>元素和有序数组从后往前进行比较，待插入一个一个<strong>往前挤</strong>，直到找到合适的位置</p>\\n<p>直到待插入部分元素为0</p>\\n<p>所用技术：<strong>减治法</strong></p>\\n<p>稳定性：<strong>稳定</strong></p>\\n<p>在位性：<strong>在位</strong></p>\\n<p>使用场景：处理<strong>基本有序</strong>，<strong>小量数据</strong></p>\\n<p>优化措施：每次都是在已排序的情况下从后往前找位置插入，可以用二分查找到自己应该插入的位置</p>\\n<p>时间复杂度：</p>\\n<ul>\\n<li>最坏：<strong>O(n^2)</strong></li>\\n<li>最好：<strong>O(n)</strong></li>\\n<li>平均：<strong>O(n^2)</strong></li>\\n</ul>\\n</blockquote>\\n<pre><code class=\\\"hljs language-java\\\"><span class=\\\"hljs-keyword\\\">public</span> <span class=\\\"hljs-keyword\\\">static</span> <span class=\\\"hljs-keyword\\\">void</span> <span class=\\\"hljs-title function_\\\">straightInsertionSort</span><span class=\\\"hljs-params\\\">(<span class=\\\"hljs-type\\\">int</span>[] arr)</span>{\\n    <span class=\\\"hljs-keyword\\\">for</span> (<span class=\\\"hljs-type\\\">int</span> <span class=\\\"hljs-variable\\\">i</span> <span class=\\\"hljs-operator\\\">=</span> <span class=\\\"hljs-number\\\">1</span> ; i &lt; arr.length ; i++) {\\n        <span class=\\\"hljs-type\\\">int</span> <span class=\\\"hljs-variable\\\">j</span> <span class=\\\"hljs-operator\\\">=</span> i;\\n        <span class=\\\"hljs-keyword\\\">while</span> (j &gt; <span class=\\\"hljs-number\\\">0</span> && arr[j] &lt; arr[j - <span class=\\\"hljs-number\\\">1</span>]) {\\n            swap(arr, j, j - <span class=\\\"hljs-number\\\">1</span>);\\n            j--;\\n        }\\n    }\\n}\\n</code></pre>\\n<hr>\\n<h4 id=\\\"binaryinsertionsort\\\">BinaryInsertionSort</h4>\\n<blockquote>\\n<p>直接插入排序是将带插入元素从后往前比较和移动\\n目的是为了在以排序序列中找到自己该插入的位置\\n二分插入排序就是在查找该插入位置的时候，使用二分法去查找\\n而不是逆序查找，这样查找的次数就少了很多</p>\\n<p>属性大致同直接插入排序</p>\\n</blockquote>\\n<pre><code class=\\\"hljs language-java\\\"><span class=\\\"hljs-keyword\\\">public</span> <span class=\\\"hljs-keyword\\\">static</span> <span class=\\\"hljs-keyword\\\">void</span> <span class=\\\"hljs-title function_\\\">binaryInsertionSort</span><span class=\\\"hljs-params\\\">(<span class=\\\"hljs-type\\\">int</span>[] arr)</span> {\\n    <span class=\\\"hljs-keyword\\\">for</span> (<span class=\\\"hljs-type\\\">int</span> <span class=\\\"hljs-variable\\\">i</span> <span class=\\\"hljs-operator\\\">=</span> <span class=\\\"hljs-number\\\">1</span> ; i &lt; arr.length ; i++) {\\n        <span class=\\\"hljs-type\\\">int</span> <span class=\\\"hljs-variable\\\">key</span> <span class=\\\"hljs-operator\\\">=</span> arr[i];\\n        <span class=\\\"hljs-type\\\">int</span> <span class=\\\"hljs-variable\\\">low</span> <span class=\\\"hljs-operator\\\">=</span> <span class=\\\"hljs-number\\\">0</span>,high = i - <span class=\\\"hljs-number\\\">1</span> , mid;\\n        <span class=\\\"hljs-keyword\\\">while</span> (low &lt;= high) {\\n            mid = (low + high) &gt;&gt;&gt; <span class=\\\"hljs-number\\\">1</span>;\\n            <span class=\\\"hljs-keyword\\\">if</span> (key &lt; arr[mid]) {\\n                high = mid - <span class=\\\"hljs-number\\\">1</span>;\\n            } <span class=\\\"hljs-keyword\\\">else</span> {\\n                low = mid + <span class=\\\"hljs-number\\\">1</span>;\\n            }\\n        }\\n        <span class=\\\"hljs-keyword\\\">if</span> (high + <span class=\\\"hljs-number\\\">1</span> != i) {\\n            <span class=\\\"hljs-comment\\\">// 给key找到位置之后，先把位置到i上的元素往后移 给key腾个位置</span>\\n            <span class=\\\"hljs-keyword\\\">for</span> (<span class=\\\"hljs-type\\\">int</span> <span class=\\\"hljs-variable\\\">j</span> <span class=\\\"hljs-operator\\\">=</span> i ; j &gt; high + <span class=\\\"hljs-number\\\">1</span> ; j--) {\\n                arr[j] = arr[j - <span class=\\\"hljs-number\\\">1</span>];\\n            }\\n            <span class=\\\"hljs-comment\\\">// 把key放到位置上</span>\\n            arr[high + <span class=\\\"hljs-number\\\">1</span>] = key;\\n        }\\n    }\\n}\\n</code></pre>\\n<hr>\\n<h4 id=\\\"shellsort\\\">ShellSort</h4>\\n<blockquote>\\n<p>希尔排序，是插入排序的一种，是直接插入排序的改进版</p>\\n<p>希尔排序有好几种实现，根据选取的增量的不同而改变</p>\\n<p>希尔排序是<strong>不稳定的、在位的</strong></p>\\n<p>使用场景：处理<strong>基本有序</strong>，<strong>小量数据</strong></p>\\n<p>一般的Shell排序的时间复杂度为**O(n^2)<strong>，好一点的有</strong>O(n^(3/2))<strong>，下界为</strong>O(n(log2n))<strong>，没有快排</strong>O(n(logn))**快</p>\\n</blockquote>\\n<h5 id=\\\"swaphalfshellsort\\\">SwapHalfShellSort</h5>\\n<blockquote>\\n<p>常规实现，增量一半一半地砍，交换法做插入</p>\\n</blockquote>\\n<pre><code class=\\\"hljs language-java\\\">    <span class=\\\"hljs-keyword\\\">public</span> <span class=\\\"hljs-keyword\\\">static</span> <span class=\\\"hljs-keyword\\\">void</span> <span class=\\\"hljs-title function_\\\">shellSort1</span><span class=\\\"hljs-params\\\">(<span class=\\\"hljs-type\\\">int</span> []arr)</span>{\\n        <span class=\\\"hljs-comment\\\">//增量gap，并逐步缩小增量</span>\\n        <span class=\\\"hljs-keyword\\\">for</span>(<span class=\\\"hljs-type\\\">int</span> <span class=\\\"hljs-variable\\\">gap</span> <span class=\\\"hljs-operator\\\">=</span> arr.length / <span class=\\\"hljs-number\\\">2</span>; gap &gt; <span class=\\\"hljs-number\\\">0</span>; gap /= <span class=\\\"hljs-number\\\">2</span>){\\n            <span class=\\\"hljs-comment\\\">//从第gap个元素，逐个对其所在组进行直接插入排序操作</span>\\n            <span class=\\\"hljs-keyword\\\">for</span>(<span class=\\\"hljs-type\\\">int</span> <span class=\\\"hljs-variable\\\">i</span> <span class=\\\"hljs-operator\\\">=</span> gap; i &lt; arr.length; i++){\\n                <span class=\\\"hljs-type\\\">int</span> <span class=\\\"hljs-variable\\\">j</span> <span class=\\\"hljs-operator\\\">=</span> i;\\n                <span class=\\\"hljs-keyword\\\">while</span>(j - gap &gt;= <span class=\\\"hljs-number\\\">0</span> && arr[j] &lt; arr[j - gap]){\\n                    <span class=\\\"hljs-comment\\\">//插入排序采用交换法</span>\\n                    swap(arr,j,j - gap);\\n                    j -= gap;\\n                }\\n            }\\n        }\\n    }\\n</code></pre>\\n<p>我把插入排序再贴一遍，可以比较一下：</p>\\n<pre><code class=\\\"hljs language-java\\\"><span class=\\\"hljs-keyword\\\">public</span> <span class=\\\"hljs-keyword\\\">static</span> <span class=\\\"hljs-keyword\\\">void</span> <span class=\\\"hljs-title function_\\\">straightInsertionSort</span><span class=\\\"hljs-params\\\">(<span class=\\\"hljs-type\\\">int</span>[] arr)</span>{\\n    <span class=\\\"hljs-keyword\\\">for</span> (<span class=\\\"hljs-type\\\">int</span> <span class=\\\"hljs-variable\\\">i</span> <span class=\\\"hljs-operator\\\">=</span> <span class=\\\"hljs-number\\\">1</span> ; i &lt; arr.length ; i++) {\\n        <span class=\\\"hljs-type\\\">int</span> <span class=\\\"hljs-variable\\\">j</span> <span class=\\\"hljs-operator\\\">=</span> i;\\n        <span class=\\\"hljs-keyword\\\">while</span> (j &gt; <span class=\\\"hljs-number\\\">0</span> && arr[j] &lt; arr[j - <span class=\\\"hljs-number\\\">1</span>]) {\\n            swap(arr, j, j - <span class=\\\"hljs-number\\\">1</span>);\\n            j--;\\n        }\\n    }\\n}\\n</code></pre>\\n<h5 id=\\\"movehalfshellsort\\\">MoveHalfShellSort</h5>\\n<blockquote>\\n<p>移动法做插入，一半增量    ，这种实现意义不大</p>\\n</blockquote>\\n<pre><code class=\\\"hljs language-java\\\">    <span class=\\\"hljs-keyword\\\">public</span> <span class=\\\"hljs-keyword\\\">static</span> <span class=\\\"hljs-keyword\\\">void</span> <span class=\\\"hljs-title function_\\\">shellSort2</span><span class=\\\"hljs-params\\\">(<span class=\\\"hljs-type\\\">int</span> []arr)</span>{\\n        <span class=\\\"hljs-comment\\\">//增量gap，并逐步缩小增量</span>\\n        <span class=\\\"hljs-keyword\\\">for</span>(<span class=\\\"hljs-type\\\">int</span> <span class=\\\"hljs-variable\\\">gap</span> <span class=\\\"hljs-operator\\\">=</span> arr.length / <span class=\\\"hljs-number\\\">2</span>; gap &gt; <span class=\\\"hljs-number\\\">0</span>; gap /= <span class=\\\"hljs-number\\\">2</span>){\\n            <span class=\\\"hljs-comment\\\">//从第gap个元素，逐个对其所在组进行直接插入排序操作</span>\\n            <span class=\\\"hljs-keyword\\\">for</span>(<span class=\\\"hljs-type\\\">int</span> <span class=\\\"hljs-variable\\\">i</span> <span class=\\\"hljs-operator\\\">=</span> gap;i &lt; arr.length; i++){\\n                <span class=\\\"hljs-type\\\">int</span> <span class=\\\"hljs-variable\\\">j</span> <span class=\\\"hljs-operator\\\">=</span> i;\\n                <span class=\\\"hljs-type\\\">int</span> <span class=\\\"hljs-variable\\\">temp</span> <span class=\\\"hljs-operator\\\">=</span> arr[j];\\n                <span class=\\\"hljs-keyword\\\">if</span>(arr[j] &lt; arr[j - gap]){\\n                    <span class=\\\"hljs-keyword\\\">while</span>(j - gap &gt;= <span class=\\\"hljs-number\\\">0</span> && temp &lt; arr[j - gap]){\\n                        <span class=\\\"hljs-comment\\\">//移动法</span>\\n                        arr[j] = arr[j - gap];\\n                        j -= gap;\\n                    }\\n                    arr[j] = temp;\\n                }\\n            }\\n        }\\n    }\\n</code></pre>\\n<hr>\\n<h3 id=\\\"mergesort\\\">MergeSort</h3>\\n<blockquote>\\n<p>对于需要排序的数组，把它一分为二，递归分</p>\\n<p>分到不可再分为止就开始合并，并且是有序地合并</p>\\n<p>所用技术：<strong>分治法</strong></p>\\n<p>稳定性：<strong>稳定</strong></p>\\n<p>在位性：<strong>不在位</strong></p>\\n<p>应用场景：处理<strong>大量数据</strong>且要求<strong>排序稳定</strong>时</p>\\n<p>优化措施：由于使用递归，递归深度太深容易造成内存溢出，所以可使用非递归版本归并排序</p>\\n<p>时间复杂度：都是<strong>O(n(logn))</strong></p>\\n</blockquote>\\n<pre><code class=\\\"hljs language-java\\\"><span class=\\\"hljs-keyword\\\">public</span> <span class=\\\"hljs-keyword\\\">static</span> <span class=\\\"hljs-keyword\\\">void</span> <span class=\\\"hljs-title function_\\\">mergeSort</span><span class=\\\"hljs-params\\\">(<span class=\\\"hljs-type\\\">int</span>[] arr)</span> {\\n    <span class=\\\"hljs-keyword\\\">if</span> (arr.length &gt; <span class=\\\"hljs-number\\\">1</span>) {\\n        <span class=\\\"hljs-type\\\">int</span> <span class=\\\"hljs-variable\\\">half</span> <span class=\\\"hljs-operator\\\">=</span> arr.length &gt;&gt;&gt; <span class=\\\"hljs-number\\\">1</span>;\\n        <span class=\\\"hljs-type\\\">int</span>[] brr = <span class=\\\"hljs-keyword\\\">new</span> <span class=\\\"hljs-title class_\\\">int</span>[half];\\n        <span class=\\\"hljs-type\\\">int</span>[] crr = <span class=\\\"hljs-keyword\\\">new</span> <span class=\\\"hljs-title class_\\\">int</span>[arr.length - half];\\n        System.arraycopy(arr, <span class=\\\"hljs-number\\\">0</span>, brr, <span class=\\\"hljs-number\\\">0</span>, half);\\n        System.arraycopy(arr, half, crr, <span class=\\\"hljs-number\\\">0</span>, arr.length - half);    \\n        mergeSort(brr);\\n        mergeSort(crr);\\n        merge(brr, crr, arr);\\n    }\\n}\\n\\n<span class=\\\"hljs-keyword\\\">private</span> <span class=\\\"hljs-keyword\\\">static</span> <span class=\\\"hljs-keyword\\\">void</span> <span class=\\\"hljs-title function_\\\">merge</span><span class=\\\"hljs-params\\\">(<span class=\\\"hljs-type\\\">int</span>[] brr, <span class=\\\"hljs-type\\\">int</span>[] crr, <span class=\\\"hljs-type\\\">int</span>[] arr)</span>{\\n    <span class=\\\"hljs-type\\\">int</span> <span class=\\\"hljs-variable\\\">bLength</span> <span class=\\\"hljs-operator\\\">=</span> brr.length;\\n    <span class=\\\"hljs-type\\\">int</span> <span class=\\\"hljs-variable\\\">cLength</span> <span class=\\\"hljs-operator\\\">=</span> crr.length;\\n    <span class=\\\"hljs-type\\\">int</span> <span class=\\\"hljs-variable\\\">aIndex</span> <span class=\\\"hljs-operator\\\">=</span> <span class=\\\"hljs-number\\\">0</span>, cIndex = <span class=\\\"hljs-number\\\">0</span>, bIndex = <span class=\\\"hljs-number\\\">0</span>;\\n    <span class=\\\"hljs-keyword\\\">while</span> (bIndex &lt; bLength && cIndex &lt; cLength) {\\n        <span class=\\\"hljs-keyword\\\">if</span> (brr[bIndex] &lt;= crr[cIndex]) {\\n            arr[aIndex++] = brr[bIndex++];\\n        } <span class=\\\"hljs-keyword\\\">else</span> {\\n            arr[aIndex++] = crr[cIndex++];\\n        }\\n    }\\n    <span class=\\\"hljs-keyword\\\">while</span> (cIndex &lt; cLength) {\\n        arr[aIndex++] = crr[cIndex++];\\n    }\\n    <span class=\\\"hljs-keyword\\\">while</span> (bIndex &lt; bLength) {\\n        arr[aIndex++] = brr[bIndex++];\\n    }\\n}\\n</code></pre>\\n<h4 id=\\\"空间优化版本\\\">空间优化版本</h4>\\n<pre><code class=\\\"hljs language-java\\\"><span class=\\\"hljs-keyword\\\">public</span> <span class=\\\"hljs-keyword\\\">void</span> <span class=\\\"hljs-title function_\\\">sort</span><span class=\\\"hljs-params\\\">(<span class=\\\"hljs-type\\\">int</span>[] nums)</span> {\\n    <span class=\\\"hljs-type\\\">int</span>[] tmp = <span class=\\\"hljs-keyword\\\">new</span> <span class=\\\"hljs-title class_\\\">int</span>[nums.length];\\n    mergeSort(nums, tmp, <span class=\\\"hljs-number\\\">0</span>, nums.length - <span class=\\\"hljs-number\\\">1</span>);\\n}\\n\\n<span class=\\\"hljs-keyword\\\">public</span> <span class=\\\"hljs-keyword\\\">void</span> <span class=\\\"hljs-title function_\\\">mergeSort</span><span class=\\\"hljs-params\\\">(<span class=\\\"hljs-type\\\">int</span>[] arr, <span class=\\\"hljs-type\\\">int</span>[] tmp, <span class=\\\"hljs-type\\\">int</span> start, <span class=\\\"hljs-type\\\">int</span> end)</span> {\\n    <span class=\\\"hljs-keyword\\\">if</span> (start &gt;= end) <span class=\\\"hljs-keyword\\\">return</span>;\\n\\n    <span class=\\\"hljs-type\\\">int</span> <span class=\\\"hljs-variable\\\">mid</span> <span class=\\\"hljs-operator\\\">=</span> start + (end - start) / <span class=\\\"hljs-number\\\">2</span>;\\n\\n    mergeSort(arr, tmp, start,   mid);\\n    mergeSort(arr, tmp, mid + <span class=\\\"hljs-number\\\">1</span>, end);\\n\\n    <span class=\\\"hljs-comment\\\">// 前后数组已经有序了 可以直接返回</span>\\n    <span class=\\\"hljs-keyword\\\">if</span> (arr[mid] &lt;= arr[mid + <span class=\\\"hljs-number\\\">1</span>]) <span class=\\\"hljs-keyword\\\">return</span>;\\n\\n    <span class=\\\"hljs-type\\\">int</span> <span class=\\\"hljs-variable\\\">bi</span> <span class=\\\"hljs-operator\\\">=</span> start,   bEnd = mid;\\n    <span class=\\\"hljs-type\\\">int</span> <span class=\\\"hljs-variable\\\">ci</span> <span class=\\\"hljs-operator\\\">=</span> mid + <span class=\\\"hljs-number\\\">1</span>, cEnd = end;\\n    <span class=\\\"hljs-type\\\">int</span> <span class=\\\"hljs-variable\\\">ti</span> <span class=\\\"hljs-operator\\\">=</span> start;\\n    <span class=\\\"hljs-keyword\\\">while</span> (bi &lt;= bEnd && ci &lt;= cEnd) {\\n        <span class=\\\"hljs-keyword\\\">if</span> (arr[bi] &lt;= arr[ci]) {\\n            tmp[ti++] = arr[bi++];\\n        } <span class=\\\"hljs-keyword\\\">else</span> {\\n            tmp[ti++] = arr[ci++];\\n        }\\n    }\\n    <span class=\\\"hljs-keyword\\\">while</span> (bi &lt;= bEnd) {\\n        tmp[ti++] = arr[bi++];\\n    }\\n    <span class=\\\"hljs-keyword\\\">while</span> (ci &lt;= cEnd) {\\n        tmp[ti++] = arr[ci++];\\n    }\\n\\n    <span class=\\\"hljs-comment\\\">// 将排序结果刷到arr上</span>\\n    <span class=\\\"hljs-keyword\\\">for</span> (ti = start; ti &lt;= end; ti++) {\\n        arr[ti] = tmp[ti];\\n    }\\n}\\n</code></pre>\\n<h4 id=\\\"排序索引数组版本\\\">排序索引数组版本</h4>\\n<p>为什么需要索引数组？参考：<a href=\\\"https://leetcode-cn.com/problems/count-of-smaller-numbers-after-self/solution/gui-bing-pai-xu-suo-yin-shu-zu-python-dai-ma-java-/\\\">https://leetcode-cn.com/problems/count-of-smaller-numbers-after-self/solution/gui-bing-pai-xu-suo-yin-shu-zu-python-dai-ma-java-/</a></p>\\n<p><strong>一个元素在算法的执行过程中位置发生变化，我们还想定位它</strong>，这样的场景就可以使用索引数组：</p>\\n<blockquote>\\n<p>“原始数组” 不变，用于比较两个元素的大小，真正位置变换的是 “索引数组”。</p>\\n</blockquote>\\n<pre><code class=\\\"hljs language-java\\\"><span class=\\\"hljs-type\\\">int</span>[] tmp;\\n<span class=\\\"hljs-type\\\">int</span>[] index;\\n\\n<span class=\\\"hljs-keyword\\\">public</span> <span class=\\\"hljs-keyword\\\">void</span> <span class=\\\"hljs-title function_\\\">sortArrayForIndex</span><span class=\\\"hljs-params\\\">(<span class=\\\"hljs-type\\\">int</span>[] nums)</span> {\\n    tmp   = <span class=\\\"hljs-keyword\\\">new</span> <span class=\\\"hljs-title class_\\\">int</span>[nums.length];\\n    index = <span class=\\\"hljs-keyword\\\">new</span> <span class=\\\"hljs-title class_\\\">int</span>[nums.length];\\n    <span class=\\\"hljs-keyword\\\">for</span> (<span class=\\\"hljs-type\\\">int</span> <span class=\\\"hljs-variable\\\">i</span> <span class=\\\"hljs-operator\\\">=</span> <span class=\\\"hljs-number\\\">0</span>; i &lt; nums.length; i++) {\\n        index[i] = i;\\n    }\\n    mergeSortForIndex(nums, <span class=\\\"hljs-number\\\">0</span>, nums.length - <span class=\\\"hljs-number\\\">1</span>);\\n}\\n\\n<span class=\\\"hljs-keyword\\\">public</span> <span class=\\\"hljs-keyword\\\">void</span> <span class=\\\"hljs-title function_\\\">mergeSortForIndex</span><span class=\\\"hljs-params\\\">(<span class=\\\"hljs-type\\\">int</span>[] arr, <span class=\\\"hljs-type\\\">int</span> start, <span class=\\\"hljs-type\\\">int</span> end)</span> {\\n    <span class=\\\"hljs-keyword\\\">if</span> (start &gt;= end)\\n        <span class=\\\"hljs-keyword\\\">return</span>;\\n    <span class=\\\"hljs-type\\\">int</span> <span class=\\\"hljs-variable\\\">mid</span> <span class=\\\"hljs-operator\\\">=</span> start + (end - start &gt;&gt; <span class=\\\"hljs-number\\\">1</span>);\\n\\n    <span class=\\\"hljs-type\\\">int</span> <span class=\\\"hljs-variable\\\">bi</span> <span class=\\\"hljs-operator\\\">=</span> start,   bEnd = mid;\\n    <span class=\\\"hljs-type\\\">int</span> <span class=\\\"hljs-variable\\\">ci</span> <span class=\\\"hljs-operator\\\">=</span> mid + <span class=\\\"hljs-number\\\">1</span>, cEnd = end;\\n\\n    mergeSortForIndex(arr, bi, bEnd);\\n    mergeSortForIndex(arr, ci, cEnd);\\n\\n    <span class=\\\"hljs-keyword\\\">if</span> (arr[index[mid]] &lt;= arr[index[mid + <span class=\\\"hljs-number\\\">1</span>]]) <span class=\\\"hljs-keyword\\\">return</span>;\\n\\n    <span class=\\\"hljs-keyword\\\">for</span> (<span class=\\\"hljs-type\\\">int</span> <span class=\\\"hljs-variable\\\">i</span> <span class=\\\"hljs-operator\\\">=</span> start; i &lt;= end; i++) {\\n        tmp[i] = index[i];\\n    }\\n\\n    <span class=\\\"hljs-type\\\">int</span> <span class=\\\"hljs-variable\\\">ii</span> <span class=\\\"hljs-operator\\\">=</span> start;\\n    <span class=\\\"hljs-keyword\\\">while</span> (bi &lt;= bEnd && ci &lt;= cEnd) {\\n        <span class=\\\"hljs-keyword\\\">if</span> (arr[tmp[bi]] &lt;= arr[tmp[ci]]) {\\n            index[ii++] = tmp[bi++];\\n        } <span class=\\\"hljs-keyword\\\">else</span> {\\n            index[ii++] = tmp[ci++];\\n        }\\n    }\\n    <span class=\\\"hljs-keyword\\\">while</span> (bi &lt;= bEnd) {\\n        index[ii++] = tmp[bi++];\\n    }\\n    <span class=\\\"hljs-keyword\\\">while</span> (ci &lt;= cEnd) {\\n        index[ii++] = tmp[ci++];\\n    }\\n}\\n</code></pre>\\n<hr>\\n<h3 id=\\\"quicksort\\\">QuickSort</h3>\\n<blockquote>\\n<p> 以arr[l]为左界，arr[r]为右界，选择当前界限内的第一个元素作为分裂点</p>\\n<p> 从两界向中间扫描为分裂点寻找一个合适的位置，使得分裂点左边的元素都小于等于分裂点</p>\\n<p> 右边的元素都大于等于分裂点，再递归以分裂点对左右两边的子数组进行划分排序</p>\\n<p> 快排的实现有很多种，所谓的<strong>“简单快排”</strong>及俗称的挖坑法却是最难理解的（用代码去推结果的话），这里先po好理解的<strong>双路快排（左右指针实现）</strong>，还有一种前后指针法，具体没细看，但是双路的手算和挖坑的手算还是比较好写出来，特别是牛客上的快排第一趟结果的题都是挖坑去做的</p>\\n<p> 所用技术：<strong>分治法</strong></p>\\n<p> 稳定性在位性：<strong>不稳定、不在位</strong></p>\\n<blockquote>\\n<p>为什么不在位？虽然快排没有显示地创建辅助空间，但由于需要用到递归实现，所以递归栈需要占用空间</p>\\n</blockquote>\\n<p> 应用场景：<strong>处理大量数据</strong></p>\\n<p> 优化措施：由于如果每次选取基准元素时都选到了最小或最大的元素，会导致快排时间复杂度很高，所以可以<strong>随机选取基准元素</strong>，能有效的提高排序的平均性能，防止时间复杂度达到O(n2)。</p>\\n<p> 时间复杂度：</p>\\n<ul>\\n<li><p>最坏：<strong>O(n^2)</strong></p>\\n<blockquote>\\n<p>什么时候会退化为最坏情况？在元素完全逆序的情况下，快排会退化为冒泡排序。</p>\\n</blockquote>\\n</li>\\n<li><p>最好：<strong>O(nlogn)</strong></p>\\n</li>\\n<li><p>平均：<strong>O(nlogn)</strong></p>\\n</li>\\n</ul>\\n<p> 好文：</p>\\n<ul>\\n<li>挖坑、左右指针、前后指针：<a href=\\\"https://blog.csdn.net/qq_36528114/article/details/78667034\\\">https://blog.csdn.net/qq_36528114/article/details/78667034</a></li>\\n<li>单路、三路、双轴的简单实现和图片解析：<a href=\\\"https://rerun.me/2013/06/13/quicksorting-3-way-and-dual-pivot/\\\">https://rerun.me/2013/06/13/quicksorting-3-way-and-dual-pivot/</a></li>\\n</ul>\\n<p> 目前来说，实现最快的快排是双轴快排，它的表现非常好，在JDK7的时候，<code>Arrays.sort()</code>方法用的就是自实现的双轴快排<code>java.util.DualPivotQuicksort</code></p>\\n<p> 更多双轴快排的参考：</p>\\n<ul>\\n<li><a href=\\\"http://www.it610.com/article/2141917.htm\\\">双枢轴快排（JDK7快排）（译文）</a></li>\\n<li><a href=\\\"https://www.jianshu.com/p/6d26d525bb96\\\">DualPivotQuickSort 双轴快速排序 源码 笔记</a></li>\\n<li><a href=\\\"https://www.jianshu.com/p/2c6f79e8ce6e\\\">DualPivot的历史简介</a></li>\\n</ul>\\n</blockquote>\\n<h4 id=\\\"bothsidequicksortdoublepointerquicksort\\\">BothSideQuickSort/DoublePointerQuickSort</h4>\\n<pre><code class=\\\"hljs language-java\\\"><span class=\\\"hljs-keyword\\\">public</span> <span class=\\\"hljs-keyword\\\">static</span> <span class=\\\"hljs-keyword\\\">void</span> <span class=\\\"hljs-title function_\\\">bothSideQuickSort</span><span class=\\\"hljs-params\\\">(<span class=\\\"hljs-type\\\">int</span>[] arr, <span class=\\\"hljs-type\\\">int</span> left, <span class=\\\"hljs-type\\\">int</span> right)</span> {\\n    <span class=\\\"hljs-keyword\\\">if</span> (left &lt; right) {\\n        <span class=\\\"hljs-type\\\">int</span> <span class=\\\"hljs-variable\\\">s</span> <span class=\\\"hljs-operator\\\">=</span> partition(arr, left, right);\\n        bothSideQuickSort(arr, left, s - <span class=\\\"hljs-number\\\">1</span>);\\n        bothSideQuickSort(arr, s + <span class=\\\"hljs-number\\\">1</span>, right);\\n    }\\n}\\n\\n<span class=\\\"hljs-comment\\\">/*\\n * 思路参考：http://developer.51cto.com/art/201403/430986.htm\\n */</span>\\n<span class=\\\"hljs-keyword\\\">private</span> <span class=\\\"hljs-keyword\\\">static</span> <span class=\\\"hljs-type\\\">int</span> <span class=\\\"hljs-title function_\\\">partition</span><span class=\\\"hljs-params\\\">(<span class=\\\"hljs-type\\\">int</span>[] arr, <span class=\\\"hljs-type\\\">int</span> left, <span class=\\\"hljs-type\\\">int</span> right)</span> {\\n    <span class=\\\"hljs-type\\\">int</span> <span class=\\\"hljs-variable\\\">i</span> <span class=\\\"hljs-operator\\\">=</span> left;\\n    <span class=\\\"hljs-type\\\">int</span> <span class=\\\"hljs-variable\\\">var</span> <span class=\\\"hljs-operator\\\">=</span> arr[i];\\n    <span class=\\\"hljs-comment\\\">// 在一次快速排序中只要left的值比right小，我们就应该去移动，因为当前这次排序还没有完成</span>\\n    <span class=\\\"hljs-keyword\\\">while</span> (left &lt; right) {\\n        <span class=\\\"hljs-comment\\\">// 表示只有当前指针没有重合并且当前right指向的值大于val时，才会向左移动right</span>\\n        <span class=\\\"hljs-keyword\\\">while</span> (left &lt; right && arr[right] &gt;= <span class=\\\"hljs-keyword\\\">var</span>) {\\n            right--;\\n        }\\n        <span class=\\\"hljs-keyword\\\">while</span> (left &lt; right && arr[left] &lt;= <span class=\\\"hljs-keyword\\\">var</span>) {\\n            left++;\\n        }\\n        swap(arr, right, left);\\n    }\\n    <span class=\\\"hljs-comment\\\">// 找到了所属的位置，并且将我们选定的值val赋到这个位置上去</span>\\n    swap(arr, i, left);\\n    <span class=\\\"hljs-keyword\\\">return</span> left;\\n}\\n</code></pre>\\n<hr>\\n<h3 id=\\\"heapsort\\\">HeapSort</h3>\\n<blockquote>\\n<p>堆排序很有意思，它的思想就是：</p>\\n<p>将每个数组看作一个堆，然后我们将这个堆造成大顶堆（根的值在当前数组中最大）或者小顶堆（最小），然后如果是构造大顶堆，那么堆化成功的时候，将根交换到数组最后，这个时候等于找到了最大的元素了（排好了的意思），然后在这个最大元素之前的子数组规模中再造堆，直到造堆的规模为1为止</p>\\n<p>这么看下来的话，有点选择排序的意思</p>\\n<p>总结一下堆排序的步骤：</p>\\n<ol>\\n<li>构造顶堆</li>\\n<li>去顶</li>\\n<li>减小规模，重复1</li>\\n</ol>\\n<p>所属技术：<strong>变治法</strong></p>\\n<p>在位性稳定性：<strong>不稳定、在位</strong></p>\\n<p>应用场景：<strong>数据量大，或者数据呈流式输入时</strong></p>\\n<p>优化措施：建立堆的时候不需要对叶子结点进行维护堆性质操作，因此只需要对n/2个数进行维护堆操作</p>\\n<p>时间复杂度：都是<strong>O(n(logn))</strong></p>\\n</blockquote>\\n<pre><code class=\\\"hljs language-java\\\"><span class=\\\"hljs-keyword\\\">public</span> <span class=\\\"hljs-keyword\\\">static</span> <span class=\\\"hljs-keyword\\\">void</span> <span class=\\\"hljs-title function_\\\">heapSort</span><span class=\\\"hljs-params\\\">(<span class=\\\"hljs-type\\\">int</span>[] arr)</span> {\\n    <span class=\\\"hljs-comment\\\">// 初始堆化</span>\\n    <span class=\\\"hljs-keyword\\\">for</span> (<span class=\\\"hljs-type\\\">int</span> <span class=\\\"hljs-variable\\\">i</span> <span class=\\\"hljs-operator\\\">=</span> arr.length / <span class=\\\"hljs-number\\\">2</span> - <span class=\\\"hljs-number\\\">1</span>; i &gt;= <span class=\\\"hljs-number\\\">0</span>; i--)\\n        percDown(arr, i, arr.length);\\n\\n    <span class=\\\"hljs-comment\\\">// 删除顶、在堆化</span>\\n    <span class=\\\"hljs-keyword\\\">for</span> (<span class=\\\"hljs-type\\\">int</span> <span class=\\\"hljs-variable\\\">i</span> <span class=\\\"hljs-operator\\\">=</span> arr.length - <span class=\\\"hljs-number\\\">1</span>; i &gt; <span class=\\\"hljs-number\\\">0</span>; i--) {\\n        swap(arr, <span class=\\\"hljs-number\\\">0</span>, i);\\n        percDown(arr, <span class=\\\"hljs-number\\\">0</span>, i);\\n    }\\n}\\n\\n<span class=\\\"hljs-keyword\\\">public</span> <span class=\\\"hljs-keyword\\\">static</span> <span class=\\\"hljs-keyword\\\">void</span> <span class=\\\"hljs-title function_\\\">percDown</span><span class=\\\"hljs-params\\\">(<span class=\\\"hljs-type\\\">int</span>[] arr, <span class=\\\"hljs-type\\\">int</span> hole, <span class=\\\"hljs-type\\\">int</span> nowSize)</span> {\\n    <span class=\\\"hljs-type\\\">int</span> child;\\n    <span class=\\\"hljs-type\\\">int</span> <span class=\\\"hljs-variable\\\">tmp</span> <span class=\\\"hljs-operator\\\">=</span> arr[hole];\\n    <span class=\\\"hljs-keyword\\\">for</span> (; hole * <span class=\\\"hljs-number\\\">2</span> + <span class=\\\"hljs-number\\\">1</span> &lt; nowSize; hole = child) {\\n        child = hole * <span class=\\\"hljs-number\\\">2</span> + <span class=\\\"hljs-number\\\">1</span>;\\n        <span class=\\\"hljs-keyword\\\">if</span> (child != nowSize - <span class=\\\"hljs-number\\\">1</span> && arr[child] &lt; arr[child + <span class=\\\"hljs-number\\\">1</span>]) {\\n            child++;\\n        }\\n        <span class=\\\"hljs-keyword\\\">if</span> (tmp &lt; arr[child]) {\\n            arr[hole] = arr[child];\\n        } <span class=\\\"hljs-keyword\\\">else</span> <span class=\\\"hljs-keyword\\\">break</span>;\\n    }\\n    arr[hole] = tmp;\\n}\\n</code></pre>\\n<hr>\\n<h3 id=\\\"countingsort\\\">CountingSort</h3>\\n<blockquote>\\n<p>计数排序也是一种很有意思的算法，紫皮书上说到2种计数排序的思想，它是<strong>时空权衡</strong>思想的代表之一</p>\\n<p>比较计数：是最直观的思想，针对待排序的每一个元素，算出列表中小于该元素值的元素<strong>个数</strong>，并把结果记录在一张表上，于是这个<strong>“个数”</strong>就是该元素在有序表中的位置。</p>\\n<pre><code class=\\\"hljs language-graph\\\">A[0..5]     62  31  84  96  19  47\\ncounting     3   1   4   5   0   2\\n----------------------------------\\nS[0..5]     19  31  47  62  84  96\\nexplain：   比如有比62小的元素是2个，所以62应该在数组的2下标位置\\n</code></pre>\\n<p>时间复杂度：平方级</p>\\n<p>空间复杂度：2n</p>\\n<p>好处：算法使得键值移动次数最小化，直接放置键值</p>\\n</blockquote>\\n<pre><code class=\\\"hljs language-java\\\"><span class=\\\"hljs-keyword\\\">public</span> <span class=\\\"hljs-keyword\\\">static</span> <span class=\\\"hljs-type\\\">int</span>[] comparisonCountingSort(<span class=\\\"hljs-type\\\">int</span>[] arr) {\\n    <span class=\\\"hljs-type\\\">int</span>[] counts = <span class=\\\"hljs-keyword\\\">new</span> <span class=\\\"hljs-title class_\\\">int</span>[arr.length];\\n    <span class=\\\"hljs-type\\\">int</span>[] result = <span class=\\\"hljs-keyword\\\">new</span> <span class=\\\"hljs-title class_\\\">int</span>[arr.length];\\n    <span class=\\\"hljs-comment\\\">// 计数</span>\\n    <span class=\\\"hljs-keyword\\\">for</span> (<span class=\\\"hljs-type\\\">int</span> <span class=\\\"hljs-variable\\\">i</span> <span class=\\\"hljs-operator\\\">=</span> <span class=\\\"hljs-number\\\">0</span>; i &lt; arr.length - <span class=\\\"hljs-number\\\">1</span>; i++) {\\n        <span class=\\\"hljs-keyword\\\">for</span> (<span class=\\\"hljs-type\\\">int</span> <span class=\\\"hljs-variable\\\">j</span> <span class=\\\"hljs-operator\\\">=</span> i + <span class=\\\"hljs-number\\\">1</span>; j &lt; arr.length; j++) {\\n            <span class=\\\"hljs-keyword\\\">if</span> (arr[i] &lt; arr[j]) {\\n                counts[j]++;\\n            } <span class=\\\"hljs-keyword\\\">else</span> {\\n                counts[i]++;\\n            }\\n        }\\n    }\\n    <span class=\\\"hljs-comment\\\">// 还原</span>\\n    <span class=\\\"hljs-keyword\\\">for</span> (<span class=\\\"hljs-type\\\">int</span> <span class=\\\"hljs-variable\\\">i</span> <span class=\\\"hljs-operator\\\">=</span> <span class=\\\"hljs-number\\\">0</span>; i &lt; arr.length; i++) {\\n        result[counts[i]] = arr[i];\\n    }\\n    <span class=\\\"hljs-keyword\\\">return</span> result;\\n}\\n</code></pre>\\n<h3 id=\\\"bucketsort\\\">BucketSort</h3>\\n<blockquote>\\n<p>待排序列表中的元素假如都能映射到一个<strong>天然有序的集合</strong>里，我们只需要计算出所有待排序列表中的元素在有序集合中<strong>出现的次数</strong>，就能按照<strong>次数</strong>将待排序列表转换为有序列表</p>\\n<pre><code class=\\\"hljs language-java\\\">A[<span class=\\\"hljs-number\\\">0.</span><span class=\\\"hljs-number\\\">.5</span>]     <span class=\\\"hljs-number\\\">13</span>  <span class=\\\"hljs-number\\\">11</span>  <span class=\\\"hljs-number\\\">12</span>  <span class=\\\"hljs-number\\\">13</span>  <span class=\\\"hljs-number\\\">12</span>  <span class=\\\"hljs-number\\\">12</span>\\nmap         <span class=\\\"hljs-number\\\">11</span>  <span class=\\\"hljs-number\\\">12</span>  <span class=\\\"hljs-number\\\">13</span>\\ncounting     <span class=\\\"hljs-number\\\">1</span>   <span class=\\\"hljs-number\\\">3</span>   <span class=\\\"hljs-number\\\">2</span>\\n----------------------------------\\nS[<span class=\\\"hljs-number\\\">0.</span><span class=\\\"hljs-number\\\">.5</span>]     <span class=\\\"hljs-number\\\">11</span>  <span class=\\\"hljs-number\\\">12</span>  <span class=\\\"hljs-number\\\">12</span>  <span class=\\\"hljs-number\\\">12</span>  <span class=\\\"hljs-number\\\">13</span>  <span class=\\\"hljs-number\\\">13</span>\\nexplain：   比如<span class=\\\"hljs-number\\\">11</span>出现了<span class=\\\"hljs-number\\\">1</span>次，<span class=\\\"hljs-number\\\">12</span>出现了<span class=\\\"hljs-number\\\">3</span>次，<span class=\\\"hljs-number\\\">13</span>出现了<span class=\\\"hljs-number\\\">2</span>次，映射结果显而易见\\n</code></pre>\\n<p>分布式计数的思想：</p>\\n<ol>\\n<li>需要知道待排序序列的范围：<strong>rank</strong></li>\\n<li>准备一个map数组用于记录分布值：<strong>map</strong></li>\\n<li>计算待排序数组在<strong>rank</strong>中的分布值</li>\\n<li>映射<strong>rank</strong>和分布值为有序数组</li>\\n</ol>\\n<p>计数排序的核心思想就是利用了<strong>元素值和下标的关系</strong>，网上有很多实现，但我觉得都不太好，有的甚至说计数排序只能处理非负数，有的甚至说计数排序必须知道元素的最大值最小值才能使用（这样说也行8）</p>\\n<p>但我们可以利用核心思想去处理含有负数的序列，目前来说，计数排序唯一的限制就是：<strong>元素值得是整数</strong></p>\\n<p>从我的实现中可以看出，算法的时间复杂度是<strong>n+n+n+k</strong>，其中k是<strong>rank</strong>的大小，空间复杂度是<strong>n+k</strong></p>\\n<p>由于<strong>rank</strong>的原因，如果数据分布太散，可能会浪费很多空间，比如很多<strong>rank值</strong>根本就没有在待排序的序列中出现过；</p>\\n<p>从这样来看的话，它的应用场景大致是：<strong>空间允许的情况下，能够线性时间地处理大量整数数据，最好是数据分布较为集中的情况下</strong></p>\\n</blockquote>\\n<pre><code class=\\\"hljs language-java\\\"><span class=\\\"hljs-keyword\\\">public</span> <span class=\\\"hljs-keyword\\\">static</span> <span class=\\\"hljs-type\\\">int</span>[] bucketSort(<span class=\\\"hljs-type\\\">int</span>[] arr) {\\n    <span class=\\\"hljs-type\\\">int</span> <span class=\\\"hljs-variable\\\">low</span> <span class=\\\"hljs-operator\\\">=</span> arr[<span class=\\\"hljs-number\\\">0</span>];\\n    <span class=\\\"hljs-type\\\">int</span> <span class=\\\"hljs-variable\\\">high</span> <span class=\\\"hljs-operator\\\">=</span> arr[<span class=\\\"hljs-number\\\">0</span>];\\n    <span class=\\\"hljs-comment\\\">// calculate rank</span>\\n    <span class=\\\"hljs-keyword\\\">for</span> (<span class=\\\"hljs-type\\\">int</span> num : arr) {\\n        <span class=\\\"hljs-keyword\\\">if</span> (low &gt; num) {\\n            low = num;\\n        }\\n        <span class=\\\"hljs-keyword\\\">if</span> (high &lt; num) {\\n            high = num;\\n        }\\n    }\\n    <span class=\\\"hljs-comment\\\">// distribution rate in rank</span>\\n    <span class=\\\"hljs-type\\\">int</span>[] disRate = <span class=\\\"hljs-keyword\\\">new</span> <span class=\\\"hljs-title class_\\\">int</span>[high - low + <span class=\\\"hljs-number\\\">1</span>];\\n    <span class=\\\"hljs-type\\\">int</span>[] result = <span class=\\\"hljs-keyword\\\">new</span> <span class=\\\"hljs-title class_\\\">int</span>[arr.length];\\n    <span class=\\\"hljs-comment\\\">// calculate distribution rate</span>\\n    <span class=\\\"hljs-keyword\\\">for</span> (<span class=\\\"hljs-type\\\">int</span> num : arr) {\\n        disRate[num - low]++;\\n    }\\n    <span class=\\\"hljs-type\\\">int</span> <span class=\\\"hljs-variable\\\">index</span> <span class=\\\"hljs-operator\\\">=</span> <span class=\\\"hljs-number\\\">0</span>;\\n    <span class=\\\"hljs-comment\\\">// consume the distribution rate with order</span>\\n    <span class=\\\"hljs-keyword\\\">for</span> (<span class=\\\"hljs-type\\\">int</span> <span class=\\\"hljs-variable\\\">i</span> <span class=\\\"hljs-operator\\\">=</span> <span class=\\\"hljs-number\\\">0</span>; i &lt; result.length; i++) {\\n        <span class=\\\"hljs-keyword\\\">while</span> (disRate[index] == <span class=\\\"hljs-number\\\">0</span>) {\\n            index++;\\n        }\\n        result[i] = index + low;\\n        disRate[index]--;\\n    }\\n    <span class=\\\"hljs-keyword\\\">return</span> result;\\n}\\n</code></pre>\\n<h3 id=\\\"bucketsort2\\\">BucketSort2</h3>\\n<blockquote>\\n<p>再补充一个场景限制，现有实现的分布式计数排序<strong>无法表达整数以外的特性</strong>，比如稳定性</p>\\n<p>比方说我有一组元素**[3, 2, 2, 1]<strong>, 其中有两个2，第一个设为2a，后者2b，其他排序完成之后，能够表达出2a或者2b是否还在原来的</strong>相对位置<strong>，但是现在的分布率图，是无状态的，最终的结果仅是<code>result[i] = index + low</code>算出的，比如2元素的计数是</strong>2<strong>，这个</strong>2**无法区分到底是2a还是2b</p>\\n<p>有一个方法是用queue数组来存储分布率，所以上面的序列的分布率可以为：</p>\\n<p><strong>queue[] = { {1a}, {2a, 2b}, {3a} }</strong></p>\\n<p>它的时间复杂度依然是<strong>n+n+n+k</strong>，空间复杂度稍微要不一样点，是<strong>n+k+c</strong>，其中c是2b这样的同位元素的数量总和</p>\\n<p>关键的是：<strong>它保持了稳定性，结果中的元素还是原来的元素，而不是新算出来的元素</strong></p>\\n<p>⚠️需要注意的是，这个实现里的<strong>c</strong>，可能会很致命，如果序列的<strong>rank</strong>比较大的话，会造成<strong>更多</strong>的空间成本</p>\\n</blockquote>\\n<pre><code class=\\\"hljs language-java\\\"><span class=\\\"hljs-keyword\\\">public</span> <span class=\\\"hljs-keyword\\\">static</span> <span class=\\\"hljs-type\\\">int</span>[] bucketSort2(<span class=\\\"hljs-type\\\">int</span>[] arr) {\\n    <span class=\\\"hljs-type\\\">int</span> <span class=\\\"hljs-variable\\\">low</span> <span class=\\\"hljs-operator\\\">=</span> arr[<span class=\\\"hljs-number\\\">0</span>];\\n    <span class=\\\"hljs-type\\\">int</span> <span class=\\\"hljs-variable\\\">high</span> <span class=\\\"hljs-operator\\\">=</span> arr[<span class=\\\"hljs-number\\\">0</span>];\\n    <span class=\\\"hljs-comment\\\">// calculate rank</span>\\n    <span class=\\\"hljs-keyword\\\">for</span> (<span class=\\\"hljs-type\\\">int</span> num : arr) {\\n        <span class=\\\"hljs-keyword\\\">if</span> (low &gt; num) {\\n            low = num;\\n        }\\n        <span class=\\\"hljs-keyword\\\">if</span> (high &lt; num) {\\n            high = num;\\n        }\\n    }\\n    <span class=\\\"hljs-comment\\\">// distribution rate in rank</span>\\n    LinkedList[] disRate = <span class=\\\"hljs-keyword\\\">new</span> <span class=\\\"hljs-title class_\\\">LinkedList</span>[high - low + <span class=\\\"hljs-number\\\">1</span>];\\n    <span class=\\\"hljs-type\\\">int</span>[] result = <span class=\\\"hljs-keyword\\\">new</span> <span class=\\\"hljs-title class_\\\">int</span>[arr.length];\\n    <span class=\\\"hljs-comment\\\">// calculate distribution rate</span>\\n    <span class=\\\"hljs-keyword\\\">for</span> (<span class=\\\"hljs-type\\\">int</span> num : arr) {\\n        <span class=\\\"hljs-keyword\\\">if</span> (disRate[num - low] == <span class=\\\"hljs-literal\\\">null</span>) {\\n            disRate[num - low] = <span class=\\\"hljs-keyword\\\">new</span> <span class=\\\"hljs-title class_\\\">LinkedList</span>&lt;Integer&gt;();\\n        }\\n        disRate[num - low].add(num);\\n    }\\n    <span class=\\\"hljs-type\\\">int</span> <span class=\\\"hljs-variable\\\">index</span> <span class=\\\"hljs-operator\\\">=</span> <span class=\\\"hljs-number\\\">0</span>;\\n    <span class=\\\"hljs-comment\\\">// consume the distribution rate with order</span>\\n    <span class=\\\"hljs-keyword\\\">for</span> (LinkedList queue : disRate) {\\n        <span class=\\\"hljs-keyword\\\">if</span> (queue != <span class=\\\"hljs-literal\\\">null</span>) {\\n            <span class=\\\"hljs-keyword\\\">while</span> (!queue.isEmpty()) {\\n                result[index++] = (<span class=\\\"hljs-type\\\">int</span>) queue.poll();\\n            }\\n        }\\n    }\\n    <span class=\\\"hljs-keyword\\\">return</span> result;\\n}\\n</code></pre>\\n<hr>\\n<p><em>应用场景和优化措施的参考：<a href=\\\"https://blog.csdn.net/hairy_monsters/article/details/80154391\\\">https://blog.csdn.net/hairy_monsters/article/details/80154391</a></em></p>\\n\";","export default \"<p>Flow control syntax, Function definition, Modules.</p>\\n<h2 id=\\\"c\\\">C</h2>\\n<h3 id=\\\"flow-control\\\">Flow Control</h3>\\n<h4 id=\\\"if-statement\\\"><code>if</code> statement</h4>\\n<pre><code class=\\\"hljs language-python\\\"><span class=\\\"hljs-keyword\\\">if</span> x &gt; <span class=\\\"hljs-number\\\">0</span>:\\n    <span class=\\\"hljs-built_in\\\">print</span>(<span class=\\\"hljs-string\\\">&#x27;x &gt; 0&#x27;</span>)\\n<span class=\\\"hljs-keyword\\\">elif</span> x == <span class=\\\"hljs-number\\\">0</span>: \\n    <span class=\\\"hljs-built_in\\\">print</span>(<span class=\\\"hljs-string\\\">&#x27;x = 0&#x27;</span>)\\n<span class=\\\"hljs-keyword\\\">else</span>:\\n    <span class=\\\"hljs-built_in\\\">print</span>(<span class=\\\"hljs-string\\\">&#x27;x &lt; 0&#x27;</span>)\\n</code></pre>\\n<h4 id=\\\"for-statement\\\"><code>for</code> statement</h4>\\n<p>Example:</p>\\n<pre><code class=\\\"hljs language-python\\\">array = [<span class=\\\"hljs-number\\\">1</span>, <span class=\\\"hljs-number\\\">2</span>, <span class=\\\"hljs-number\\\">3</span>, <span class=\\\"hljs-number\\\">4</span>]\\n<span class=\\\"hljs-keyword\\\">for</span> i <span class=\\\"hljs-keyword\\\">in</span> array:\\n    <span class=\\\"hljs-built_in\\\">print</span>(i)\\n    \\n<span class=\\\"hljs-keyword\\\">for</span> i <span class=\\\"hljs-keyword\\\">in</span> <span class=\\\"hljs-built_in\\\">range</span>(<span class=\\\"hljs-number\\\">5</span>):\\n    <span class=\\\"hljs-built_in\\\">print</span>(i)\\n</code></pre>\\n<p>Else clause in the loop:</p>\\n<pre><code class=\\\"hljs language-python\\\"><span class=\\\"hljs-keyword\\\">for</span> i <span class=\\\"hljs-keyword\\\">in</span> <span class=\\\"hljs-built_in\\\">range</span>(<span class=\\\"hljs-number\\\">5</span>):\\n    <span class=\\\"hljs-keyword\\\">if</span> (i == <span class=\\\"hljs-number\\\">5</span>):\\n        <span class=\\\"hljs-keyword\\\">break</span>\\n    <span class=\\\"hljs-keyword\\\">else</span>:\\n        <span class=\\\"hljs-built_in\\\">print</span>(i)\\n<span class=\\\"hljs-keyword\\\">else</span>:\\n    <span class=\\\"hljs-built_in\\\">print</span>(<span class=\\\"hljs-string\\\">&#x27;No break &#x27;</span>, i)\\n\\n<span class=\\\"hljs-keyword\\\">for</span> i <span class=\\\"hljs-keyword\\\">in</span> <span class=\\\"hljs-built_in\\\">range</span>(<span class=\\\"hljs-number\\\">5</span>):\\n    <span class=\\\"hljs-keyword\\\">if</span> (i == <span class=\\\"hljs-number\\\">4</span>):\\n        <span class=\\\"hljs-built_in\\\">print</span>(<span class=\\\"hljs-string\\\">&#x27;break here&#x27;</span>)\\n        <span class=\\\"hljs-keyword\\\">break</span>\\n    <span class=\\\"hljs-keyword\\\">else</span>:\\n        <span class=\\\"hljs-built_in\\\">print</span>(i)\\n<span class=\\\"hljs-keyword\\\">else</span>:\\n    <span class=\\\"hljs-built_in\\\">print</span>(<span class=\\\"hljs-string\\\">&#x27;never be reached here because the break&#x27;</span>)\\n</code></pre>\\n<p>Key-pair iteration:</p>\\n<pre><code class=\\\"hljs language-python\\\"><span class=\\\"hljs-comment\\\"># key-pair </span>\\nclt = {<span class=\\\"hljs-string\\\">&#x27;a&#x27;</span>: <span class=\\\"hljs-string\\\">&#x27;b&#x27;</span>, <span class=\\\"hljs-string\\\">&#x27;c&#x27;</span>: <span class=\\\"hljs-string\\\">&#x27;d&#x27;</span>}\\n<span class=\\\"hljs-keyword\\\">for</span> key, val <span class=\\\"hljs-keyword\\\">in</span> clt.items():\\n    <span class=\\\"hljs-built_in\\\">print</span>(key, val)\\n</code></pre>\\n<h4 id=\\\"while-statement\\\"><code>while</code> statement</h4>\\n<pre><code class=\\\"hljs language-python\\\"><span class=\\\"hljs-keyword\\\">while</span> <span class=\\\"hljs-literal\\\">True</span>:\\n    num = <span class=\\\"hljs-built_in\\\">input</span>(<span class=\\\"hljs-string\\\">&#x27;Please enter a number bigger than 10&#x27;</span>)\\n    <span class=\\\"hljs-keyword\\\">if</span> (num &lt;= <span class=\\\"hljs-number\\\">10</span>):\\n        <span class=\\\"hljs-built_in\\\">print</span>(<span class=\\\"hljs-string\\\">&#x27;Too small!&#x27;</span>)\\n    <span class=\\\"hljs-keyword\\\">else</span>：\\n        <span class=\\\"hljs-built_in\\\">print</span>(<span class=\\\"hljs-string\\\">&#x27;Number is:&#x27;</span>, num)\\n        <span class=\\\"hljs-keyword\\\">break</span>\\n</code></pre>\\n<h4 id=\\\"pass-statement\\\"><code>pass</code> statement</h4>\\n<p>The <a href=\\\"https://docs.python.org/3/reference/simple_stmts.html#pass\\\"><code>pass</code></a> statement does nothing. It can be used when a statement is required syntactically but the program requires no action. For example:</p>\\n<pre><code class=\\\"hljs language-python\\\"><span class=\\\"hljs-keyword\\\">while</span> <span class=\\\"hljs-literal\\\">True</span>:\\n    <span class=\\\"hljs-keyword\\\">pass</span>  <span class=\\\"hljs-comment\\\"># Busy-wait for keyboard interrupt (Ctrl+C)</span>\\n</code></pre>\\n<p>This is commonly used for creating minimal classes:</p>\\n<pre><code class=\\\"hljs language-python\\\"><span class=\\\"hljs-keyword\\\">class</span> <span class=\\\"hljs-title class_\\\">MyEmptyClass</span>:\\n    <span class=\\\"hljs-keyword\\\">pass</span>\\n</code></pre>\\n<p>Another place <a href=\\\"https://docs.python.org/3/reference/simple_stmts.html#pass\\\"><code>pass</code></a> can be used is as a place-holder for a function or conditional body when you are working on new code, allowing you to keep thinking at a more abstract level. The <code>pass</code> is silently ignored:</p>\\n<pre><code class=\\\"hljs language-python\\\"><span class=\\\"hljs-keyword\\\">def</span> <span class=\\\"hljs-title function_\\\">initlog</span>(<span class=\\\"hljs-params\\\">*args</span>):\\n    <span class=\\\"hljs-keyword\\\">pass</span>   <span class=\\\"hljs-comment\\\"># Remember to implement this!</span>\\n</code></pre>\\n<h3 id=\\\"function\\\">Function</h3>\\n<h4 id=\\\"define-one\\\">Define One</h4>\\n<p>We must define a function with <code>def</code> keyword:</p>\\n<pre><code class=\\\"hljs language-python\\\"><span class=\\\"hljs-comment\\\"># fibonacci series to an arbitary boundary</span>\\n<span class=\\\"hljs-keyword\\\">def</span> <span class=\\\"hljs-title function_\\\">fib</span>(<span class=\\\"hljs-params\\\">n</span>):\\n    a, b = <span class=\\\"hljs-number\\\">0</span>, <span class=\\\"hljs-number\\\">1</span>\\n    <span class=\\\"hljs-keyword\\\">while</span> a &lt;= n:\\n        <span class=\\\"hljs-built_in\\\">print</span>(a, end=<span class=\\\"hljs-string\\\">&#x27; &#x27;</span>)\\n        a, b = b, a + b\\n    <span class=\\\"hljs-built_in\\\">print</span>()    \\nfib(<span class=\\\"hljs-number\\\">2000</span>)\\n\\n<span class=\\\"hljs-comment\\\"># with return statement</span>\\n<span class=\\\"hljs-keyword\\\">def</span> <span class=\\\"hljs-title function_\\\">fib2</span>(<span class=\\\"hljs-params\\\">n</span>):\\n    result = []\\n    a, b = <span class=\\\"hljs-number\\\">0</span>, <span class=\\\"hljs-number\\\">1</span>\\n    <span class=\\\"hljs-keyword\\\">while</span> a &lt;= n:\\n        result.append(a)\\n        a, b = b, a + b\\n    <span class=\\\"hljs-keyword\\\">return</span> result\\n\\nrs = fib2(<span class=\\\"hljs-number\\\">2000</span>)\\n<span class=\\\"hljs-built_in\\\">print</span>(rs)\\n</code></pre>\\n<h4 id=\\\"default-argument-values\\\">Default Argument Values</h4>\\n<pre><code class=\\\"hljs language-python\\\"><span class=\\\"hljs-comment\\\"># default arg values</span>\\n<span class=\\\"hljs-keyword\\\">def</span> <span class=\\\"hljs-title function_\\\">ask</span>(<span class=\\\"hljs-params\\\">name, age=<span class=\\\"hljs-number\\\">10</span>, gender=<span class=\\\"hljs-string\\\">&#x27;male&#x27;</span></span>):\\n    <span class=\\\"hljs-built_in\\\">print</span>(name, age, gender)\\n\\nask(<span class=\\\"hljs-string\\\">&#x27;Jack&#x27;</span>)\\nask(<span class=\\\"hljs-string\\\">&#x27;Jack&#x27;</span>, <span class=\\\"hljs-number\\\">12</span>)\\nask(<span class=\\\"hljs-string\\\">&#x27;Julia&#x27;</span>, gender=<span class=\\\"hljs-string\\\">&#x27;female&#x27;</span>)\\n\\n<span class=\\\"hljs-comment\\\"># default value is evaluated only once</span>\\n<span class=\\\"hljs-keyword\\\">def</span> <span class=\\\"hljs-title function_\\\">foo</span>(<span class=\\\"hljs-params\\\">a, l=[]</span>):\\n    l.append(a) <span class=\\\"hljs-comment\\\"># l will only be evaluated once at the first time calling this function</span>\\n    <span class=\\\"hljs-built_in\\\">print</span>(l)\\n\\nfoo(<span class=\\\"hljs-number\\\">1</span>)\\nfoo(<span class=\\\"hljs-number\\\">2</span>)\\nfoo(<span class=\\\"hljs-number\\\">3</span>)\\nfoo(<span class=\\\"hljs-number\\\">4</span>, l=[<span class=\\\"hljs-number\\\">0</span>]) <span class=\\\"hljs-comment\\\"># reassign l with a new list</span>\\n</code></pre>\\n<p>Output:</p>\\n<pre><code class=\\\"hljs language-console\\\">Jack 10 male\\nJack 12 male\\nJulia 10 female\\n[1]\\n[1, 2]\\n[1, 2, 3]\\n[0, 4]\\n</code></pre>\\n<h4 id=\\\"special-area-of-parameters\\\">Special Area Of Parameters</h4>\\n<p>Take a look on this:</p>\\n<pre><code class=\\\"hljs language-python\\\"><span class=\\\"hljs-keyword\\\">def</span> <span class=\\\"hljs-title function_\\\">f</span>(<span class=\\\"hljs-params\\\">pos1, pos2, /, pos_or_kwd, *, kwd1, kwd2</span>):\\n      -----------    ----------     ----------\\n        |               /                  |\\n        |     Positional <span class=\\\"hljs-keyword\\\">or</span> keyword area   |\\n        |                                   -- Keyword only area\\n         -- Positional only area\\n</code></pre>\\n<p>To define function&#39;s parameter list, we should follow the order above.</p>\\n<p><code>/</code> and <code>*</code> are optional. If used, these symbols indicate the kind of parameter by how the arguments may be passed to the function: positional-only, positional-or-keyword, and keyword-only. Keyword parameters are also referred to as named parameters.</p>\\n<p>Example:</p>\\n<pre><code class=\\\"hljs language-python\\\"><span class=\\\"hljs-meta\\\">&gt;&gt;&gt; </span><span class=\\\"hljs-keyword\\\">def</span> <span class=\\\"hljs-title function_\\\">standard_arg</span>(<span class=\\\"hljs-params\\\">arg</span>):\\n<span class=\\\"hljs-meta\\\">... </span>    <span class=\\\"hljs-built_in\\\">print</span>(arg)\\n...\\n<span class=\\\"hljs-meta\\\">&gt;&gt;&gt; </span><span class=\\\"hljs-keyword\\\">def</span> <span class=\\\"hljs-title function_\\\">pos_only_arg</span>(<span class=\\\"hljs-params\\\">arg, /</span>):\\n<span class=\\\"hljs-meta\\\">... </span>    <span class=\\\"hljs-built_in\\\">print</span>(arg)\\n...\\n<span class=\\\"hljs-meta\\\">&gt;&gt;&gt; </span><span class=\\\"hljs-keyword\\\">def</span> <span class=\\\"hljs-title function_\\\">kwd_only_arg</span>(<span class=\\\"hljs-params\\\">*, arg</span>):\\n<span class=\\\"hljs-meta\\\">... </span>    <span class=\\\"hljs-built_in\\\">print</span>(arg)\\n...\\n<span class=\\\"hljs-meta\\\">&gt;&gt;&gt; </span><span class=\\\"hljs-keyword\\\">def</span> <span class=\\\"hljs-title function_\\\">combined_example</span>(<span class=\\\"hljs-params\\\">pos_only, /, standard, *, kwd_only</span>):\\n<span class=\\\"hljs-meta\\\">... </span>    <span class=\\\"hljs-built_in\\\">print</span>(pos_only, standard, kwd_only)\\n</code></pre>\\n<p>As guidance:</p>\\n<ul>\\n<li>Use positional-only if you want the name of the parameters to not be available to the user. This is useful when parameter names have no real meaning, if you want to enforce the order of the arguments when the function is called or if you need to take some positional parameters and arbitrary keywords.</li>\\n<li>Use keyword-only when names have meaning and the function definition is more understandable by being explicit with names or you want to prevent users relying on the position of the argument being passed.</li>\\n<li>For an API, use positional-only to prevent breaking API changes if the parameter’s name is modified in the future.</li>\\n</ul>\\n<h4 id=\\\"keyword-arguments\\\">Keyword Arguments</h4>\\n<p>Functions can also be called using <a href=\\\"https://docs.python.org/3/glossary.html#term-keyword-argument\\\">keyword arguments</a> of the form <code>kwarg=value</code>. For instance, the following function:</p>\\n<pre><code class=\\\"hljs language-python\\\"><span class=\\\"hljs-keyword\\\">def</span> <span class=\\\"hljs-title function_\\\">parrot</span>(<span class=\\\"hljs-params\\\">voltage, state=<span class=\\\"hljs-string\\\">&#x27;a stiff&#x27;</span>, action=<span class=\\\"hljs-string\\\">&#x27;voom&#x27;</span>, <span class=\\\"hljs-built_in\\\">type</span>=<span class=\\\"hljs-string\\\">&#x27;Norwegian Blue&#x27;</span></span>):\\n    <span class=\\\"hljs-built_in\\\">print</span>(<span class=\\\"hljs-string\\\">&quot;-- This parrot wouldn&#x27;t&quot;</span>, action, end=<span class=\\\"hljs-string\\\">&#x27; &#x27;</span>)\\n    <span class=\\\"hljs-built_in\\\">print</span>(<span class=\\\"hljs-string\\\">&quot;if you put&quot;</span>, voltage, <span class=\\\"hljs-string\\\">&quot;volts through it.&quot;</span>)\\n    <span class=\\\"hljs-built_in\\\">print</span>(<span class=\\\"hljs-string\\\">&quot;-- Lovely plumage, the&quot;</span>, <span class=\\\"hljs-built_in\\\">type</span>)\\n    <span class=\\\"hljs-built_in\\\">print</span>(<span class=\\\"hljs-string\\\">&quot;-- It&#x27;s&quot;</span>, state, <span class=\\\"hljs-string\\\">&quot;!&quot;</span>)\\n</code></pre>\\n<p>accepts one required argument (<code>voltage</code>) and three optional arguments (<code>state</code>, <code>action</code>, and <code>type</code>). This function can be called in any of the following ways:</p>\\n<pre><code class=\\\"hljs language-python\\\">parrot(<span class=\\\"hljs-number\\\">1000</span>)                                          <span class=\\\"hljs-comment\\\"># 1 positional argument</span>\\nparrot(voltage=<span class=\\\"hljs-number\\\">1000</span>)                                  <span class=\\\"hljs-comment\\\"># 1 keyword argument</span>\\nparrot(voltage=<span class=\\\"hljs-number\\\">1000000</span>, action=<span class=\\\"hljs-string\\\">&#x27;VOOOOOM&#x27;</span>)             <span class=\\\"hljs-comment\\\"># 2 keyword arguments</span>\\nparrot(action=<span class=\\\"hljs-string\\\">&#x27;VOOOOOM&#x27;</span>, voltage=<span class=\\\"hljs-number\\\">1000000</span>)             <span class=\\\"hljs-comment\\\"># 2 keyword arguments</span>\\nparrot(<span class=\\\"hljs-string\\\">&#x27;a million&#x27;</span>, <span class=\\\"hljs-string\\\">&#x27;bereft of life&#x27;</span>, <span class=\\\"hljs-string\\\">&#x27;jump&#x27;</span>)         <span class=\\\"hljs-comment\\\"># 3 positional arguments</span>\\nparrot(<span class=\\\"hljs-string\\\">&#x27;a thousand&#x27;</span>, state=<span class=\\\"hljs-string\\\">&#x27;pushing up the daisies&#x27;</span>)  <span class=\\\"hljs-comment\\\"># 1 positional, 1 keyword</span>\\n</code></pre>\\n<p>All the following calls would be invalid:</p>\\n<pre><code class=\\\"hljs language-python\\\">parrot()                     <span class=\\\"hljs-comment\\\"># required argument missing</span>\\nparrot(voltage=<span class=\\\"hljs-number\\\">5.0</span>, <span class=\\\"hljs-string\\\">&#x27;dead&#x27;</span>)  <span class=\\\"hljs-comment\\\"># non-keyword argument after a keyword argument</span>\\nparrot(<span class=\\\"hljs-number\\\">110</span>, voltage=<span class=\\\"hljs-number\\\">220</span>)     <span class=\\\"hljs-comment\\\"># duplicate value for the same argument</span>\\nparrot(actor=<span class=\\\"hljs-string\\\">&#x27;John Cleese&#x27;</span>)  <span class=\\\"hljs-comment\\\"># unknown keyword argument</span>\\n</code></pre>\\n<p>In a function call, keyword arguments must follow positional arguments. All the keyword arguments passed must match one of the arguments accepted by the function (e.g. <code>actor</code> is not a valid argument for the <code>parrot</code> function), and their order is not important. This also includes non-optional arguments (e.g. <code>parrot(voltage=1000)</code> is valid too). No argument may receive a value more than once.</p>\\n<h4 id=\\\"packing-arguments\\\">Packing Arguments</h4>\\n<p>When a final formal parameter of the form <code>**name</code> is present, it receives a dictionary (see <a href=\\\"https://docs.python.org/3/library/stdtypes.html#typesmapping\\\">Mapping Types — dict</a>) <strong>containing all keyword arguments</strong> except for those corresponding to a formal parameter. </p>\\n<p>This may be combined with a formal parameter of the form <code>*name</code> (described in the next subsection) which receives a <a href=\\\"https://docs.python.org/3/tutorial/datastructures.html#tut-tuples\\\">tuple</a> <strong>containing the positional arguments</strong> beyond the formal parameter list. (<code>*name</code> must occur before <code>**name</code>.) </p>\\n<p>For example, if we define a function like this:</p>\\n<pre><code class=\\\"hljs language-python\\\"><span class=\\\"hljs-keyword\\\">def</span> <span class=\\\"hljs-title function_\\\">cheeseshop</span>(<span class=\\\"hljs-params\\\">kind, *arguments, **keywords</span>):\\n    <span class=\\\"hljs-comment\\\"># &#x27;kind&#x27; is a formal parameter</span>\\n    <span class=\\\"hljs-built_in\\\">print</span>(<span class=\\\"hljs-string\\\">&quot;-- Do you have any&quot;</span>, kind, <span class=\\\"hljs-string\\\">&quot;?&quot;</span>)\\n    <span class=\\\"hljs-built_in\\\">print</span>(<span class=\\\"hljs-string\\\">&quot;-- I&#x27;m sorry, we&#x27;re all out of&quot;</span>, kind)\\n    <span class=\\\"hljs-comment\\\"># collecting formal parameters after &#x27;kind&#x27; before keyword parameters as a list named &#x27;argements&#x27;</span>\\n    <span class=\\\"hljs-keyword\\\">for</span> arg <span class=\\\"hljs-keyword\\\">in</span> arguments:\\n        <span class=\\\"hljs-built_in\\\">print</span>(arg)\\n    <span class=\\\"hljs-built_in\\\">print</span>(<span class=\\\"hljs-string\\\">&quot;-&quot;</span> * <span class=\\\"hljs-number\\\">40</span>)\\n    <span class=\\\"hljs-comment\\\"># collectiong keyword parameters as a dict named &#x27;keywords&#x27;</span>\\n    <span class=\\\"hljs-keyword\\\">for</span> kw <span class=\\\"hljs-keyword\\\">in</span> keywords:\\n        <span class=\\\"hljs-built_in\\\">print</span>(kw, <span class=\\\"hljs-string\\\">&quot;:&quot;</span>, keywords[kw])\\n</code></pre>\\n<p>It could be called like this:</p>\\n<pre><code class=\\\"hljs language-python\\\">cheeseshop(<span class=\\\"hljs-string\\\">&quot;Limburger&quot;</span>, \\n           <span class=\\\"hljs-string\\\">&quot;It&#x27;s very runny, sir.&quot;</span>,\\n           <span class=\\\"hljs-string\\\">&quot;It&#x27;s really very, VERY runny, sir.&quot;</span>,\\n           shopkeeper=<span class=\\\"hljs-string\\\">&quot;Michael Palin&quot;</span>,\\n           client=<span class=\\\"hljs-string\\\">&quot;John Cleese&quot;</span>,\\n           sketch=<span class=\\\"hljs-string\\\">&quot;Cheese Shop Sketch&quot;</span>)\\n</code></pre>\\n<p>and of course it would print:</p>\\n<pre><code class=\\\"hljs language-console\\\">-- Do you have any Limburger ?\\n-- I&#x27;m sorry, we&#x27;re all out of Limburger\\nIt&#x27;s very runny, sir.\\nIt&#x27;s really very, VERY runny, sir.\\n----------------------------------------\\nshopkeeper : Michael Palin\\nclient : John Cleese\\nsketch : Cheese Shop Sketch\\n</code></pre>\\n<p>Note that the order in which the keyword arguments are printed is guaranteed to match the order in which they were provided in the function call.</p>\\n<h4 id=\\\"unpacking-arguments\\\">Unpacking Arguments</h4>\\n<p>Pass a list with <code>*</code> operator:</p>\\n<pre><code class=\\\"hljs language-python\\\"><span class=\\\"hljs-meta\\\">&gt;&gt;&gt; </span><span class=\\\"hljs-built_in\\\">list</span>(<span class=\\\"hljs-built_in\\\">range</span>(<span class=\\\"hljs-number\\\">3</span>, <span class=\\\"hljs-number\\\">6</span>))            <span class=\\\"hljs-comment\\\"># normal call with separate arguments</span>\\n[<span class=\\\"hljs-number\\\">3</span>, <span class=\\\"hljs-number\\\">4</span>, <span class=\\\"hljs-number\\\">5</span>]\\n<span class=\\\"hljs-meta\\\">&gt;&gt;&gt; </span>args = [<span class=\\\"hljs-number\\\">3</span>, <span class=\\\"hljs-number\\\">6</span>]\\n<span class=\\\"hljs-meta\\\">&gt;&gt;&gt; </span><span class=\\\"hljs-built_in\\\">list</span>(<span class=\\\"hljs-built_in\\\">range</span>(*args))            <span class=\\\"hljs-comment\\\"># call with arguments unpacked from a list</span>\\n[<span class=\\\"hljs-number\\\">3</span>, <span class=\\\"hljs-number\\\">4</span>, <span class=\\\"hljs-number\\\">5</span>]\\n</code></pre>\\n<p>Pass a dictionary with <code>**</code> operator:</p>\\n<pre><code class=\\\"hljs language-python\\\"><span class=\\\"hljs-meta\\\">&gt;&gt;&gt; </span><span class=\\\"hljs-keyword\\\">def</span> <span class=\\\"hljs-title function_\\\">parrot</span>(<span class=\\\"hljs-params\\\">voltage, state=<span class=\\\"hljs-string\\\">&#x27;a stiff&#x27;</span>, action=<span class=\\\"hljs-string\\\">&#x27;voom&#x27;</span></span>):\\n<span class=\\\"hljs-meta\\\">... </span>    <span class=\\\"hljs-built_in\\\">print</span>(<span class=\\\"hljs-string\\\">&quot;-- This parrot wouldn&#x27;t&quot;</span>, action, end=<span class=\\\"hljs-string\\\">&#x27; &#x27;</span>)\\n<span class=\\\"hljs-meta\\\">... </span>    <span class=\\\"hljs-built_in\\\">print</span>(<span class=\\\"hljs-string\\\">&quot;if you put&quot;</span>, voltage, <span class=\\\"hljs-string\\\">&quot;volts through it.&quot;</span>, end=<span class=\\\"hljs-string\\\">&#x27; &#x27;</span>)\\n<span class=\\\"hljs-meta\\\">... </span>    <span class=\\\"hljs-built_in\\\">print</span>(<span class=\\\"hljs-string\\\">&quot;E&#x27;s&quot;</span>, state, <span class=\\\"hljs-string\\\">&quot;!&quot;</span>)\\n...\\n<span class=\\\"hljs-meta\\\">&gt;&gt;&gt; </span>d = {<span class=\\\"hljs-string\\\">&quot;voltage&quot;</span>: <span class=\\\"hljs-string\\\">&quot;four million&quot;</span>, <span class=\\\"hljs-string\\\">&quot;state&quot;</span>: <span class=\\\"hljs-string\\\">&quot;bleedin&#x27; demised&quot;</span>, <span class=\\\"hljs-string\\\">&quot;action&quot;</span>: <span class=\\\"hljs-string\\\">&quot;VOOM&quot;</span>}\\n<span class=\\\"hljs-meta\\\">&gt;&gt;&gt; </span>parrot(**d)\\n-- This parrot wouldn<span class=\\\"hljs-string\\\">&#x27;t VOOM if you put four million volts through it. E&#x27;</span>s bleedin<span class=\\\"hljs-string\\\">&#x27; demised !</span>\\n</code></pre>\\n<h4 id=\\\"function-annotation\\\">Function Annotation</h4>\\n<p><a href=\\\"https://docs.python.org/3/glossary.html#term-function-annotation\\\">Annotations</a> are stored in the <code>__annotations__</code> attribute of the function as a dictionary and have no effect on any other part of the function.</p>\\n<p><strong>Parameter annotations</strong> are defined by a colon(<code>:</code>) after the parameter name, followed by an expression evaluating to the value of the annotation.</p>\\n<p><strong>Return annotations</strong> are defined by a literal <code>-&gt;</code>, followed by an expression, between the parameter list and the colon denoting the end of the <a href=\\\"https://docs.python.org/3/reference/compound_stmts.html#def\\\"><code>def</code></a> statement.</p>\\n<p>The following example has a positional argument, a keyword argument, and the return value annotated:</p>\\n<pre><code class=\\\"hljs language-python\\\"><span class=\\\"hljs-meta\\\">&gt;&gt;&gt; </span><span class=\\\"hljs-keyword\\\">def</span> <span class=\\\"hljs-title function_\\\">f</span>(<span class=\\\"hljs-params\\\">ham: <span class=\\\"hljs-built_in\\\">str</span>, eggs: <span class=\\\"hljs-built_in\\\">str</span> = <span class=\\\"hljs-string\\\">&#x27;eggs&#x27;</span></span>) -&gt; <span class=\\\"hljs-built_in\\\">str</span>:\\n<span class=\\\"hljs-meta\\\">... </span>    <span class=\\\"hljs-built_in\\\">print</span>(<span class=\\\"hljs-string\\\">&quot;Annotations:&quot;</span>, f.__annotations__)\\n<span class=\\\"hljs-meta\\\">... </span>    <span class=\\\"hljs-built_in\\\">print</span>(<span class=\\\"hljs-string\\\">&quot;Arguments:&quot;</span>, ham, eggs)\\n<span class=\\\"hljs-meta\\\">... </span>    <span class=\\\"hljs-keyword\\\">return</span> ham + <span class=\\\"hljs-string\\\">&#x27; and &#x27;</span> + eggs\\n...\\n<span class=\\\"hljs-meta\\\">&gt;&gt;&gt; </span>f(<span class=\\\"hljs-string\\\">&#x27;spam&#x27;</span>)\\nAnnotations: {<span class=\\\"hljs-string\\\">&#x27;ham&#x27;</span>: &lt;<span class=\\\"hljs-keyword\\\">class</span> <span class=\\\"hljs-string\\\">&#x27;str&#x27;</span>&gt;, <span class=\\\"hljs-string\\\">&#x27;return&#x27;</span>: &lt;<span class=\\\"hljs-keyword\\\">class</span> <span class=\\\"hljs-string\\\">&#x27;str&#x27;</span>&gt;, <span class=\\\"hljs-string\\\">&#x27;eggs&#x27;</span>: &lt;<span class=\\\"hljs-keyword\\\">class</span> <span class=\\\"hljs-string\\\">&#x27;str&#x27;</span>&gt;}\\nArguments: spam eggs\\n<span class=\\\"hljs-string\\\">&#x27;spam and eggs&#x27;</span>\\n</code></pre>\\n<h4 id=\\\"generator-function\\\">Generator Function</h4>\\n<p>This part is a bit advancing, I recommend reading this after reading the <strong>(EF)</strong> chapter.</p>\\n<h5 id=\\\"generator-expression\\\">Generator Expression</h5>\\n<p>A generator expression is a compact generator notation in parentheses:</p>\\n<pre><code class=\\\"hljs language-python\\\">generator_expression ::=  <span class=\\\"hljs-string\\\">&quot;(&quot;</span> expression comp_for <span class=\\\"hljs-string\\\">&quot;)&quot;</span>\\n</code></pre>\\n<p>In the part of Data Structures, we have learned creating a list by using expression:</p>\\n<pre><code class=\\\"hljs language-python\\\">l = [x * <span class=\\\"hljs-number\\\">2</span> <span class=\\\"hljs-keyword\\\">for</span> x <span class=\\\"hljs-keyword\\\">in</span> <span class=\\\"hljs-built_in\\\">range</span>(<span class=\\\"hljs-number\\\">3</span>)]\\n</code></pre>\\n<p>Actually, it was generator expression that repersenting an iterating process which generate a list:</p>\\n<pre><code class=\\\"hljs language-python\\\">g = (x * <span class=\\\"hljs-number\\\">2</span> <span class=\\\"hljs-keyword\\\">for</span> x <span class=\\\"hljs-keyword\\\">in</span> <span class=\\\"hljs-built_in\\\">range</span>(<span class=\\\"hljs-number\\\">3</span>))\\nl = [g]\\n</code></pre>\\n<p>And it act like an iterator object:</p>\\n<pre><code class=\\\"hljs language-python\\\">g = (x ** x <span class=\\\"hljs-keyword\\\">for</span> x <span class=\\\"hljs-keyword\\\">in</span> <span class=\\\"hljs-built_in\\\">range</span>(<span class=\\\"hljs-number\\\">5</span>))\\n\\n<span class=\\\"hljs-keyword\\\">for</span> i <span class=\\\"hljs-keyword\\\">in</span> <span class=\\\"hljs-built_in\\\">range</span>(<span class=\\\"hljs-number\\\">6</span>):\\n    <span class=\\\"hljs-built_in\\\">print</span>(<span class=\\\"hljs-built_in\\\">next</span>(g))\\n</code></pre>\\n<p>Will get:</p>\\n<pre><code class=\\\"hljs language-console\\\">1\\n1\\n4\\n27\\n256\\nTraceback (most recent call last):\\n  File &quot;/MyPython/practice/class/generator.py&quot;, line 24, in &lt;module&gt;\\n    print(next(g))\\nStopIteration\\n</code></pre>\\n<h5 id=\\\"yield-statement\\\"><code>yield</code> statement</h5>\\n<p>We can turn a generator expression into a function by using <code>yield</code> statement:</p>\\n<pre><code class=\\\"hljs language-python\\\">g = (x ** x <span class=\\\"hljs-keyword\\\">for</span> x <span class=\\\"hljs-keyword\\\">in</span> <span class=\\\"hljs-built_in\\\">range</span>(<span class=\\\"hljs-number\\\">5</span>))\\n<span class=\\\"hljs-comment\\\"># is equivilant to </span>\\n<span class=\\\"hljs-keyword\\\">def</span> <span class=\\\"hljs-title function_\\\">g</span>():\\n    <span class=\\\"hljs-keyword\\\">for</span> i <span class=\\\"hljs-keyword\\\">in</span> <span class=\\\"hljs-built_in\\\">range</span>(<span class=\\\"hljs-number\\\">5</span>)\\n        x = i ** i\\n        <span class=\\\"hljs-keyword\\\">yield</span> x\\ng = g() <span class=\\\"hljs-comment\\\"># it has to be call</span>\\n</code></pre>\\n<h6 id=\\\"more-examples\\\">More Examples</h6>\\n<pre><code class=\\\"hljs language-python\\\"><span class=\\\"hljs-keyword\\\">def</span> <span class=\\\"hljs-title function_\\\">f</span>():\\n    <span class=\\\"hljs-keyword\\\">try</span>:\\n        <span class=\\\"hljs-keyword\\\">yield</span> <span class=\\\"hljs-number\\\">1</span>\\n        <span class=\\\"hljs-keyword\\\">try</span>:\\n            <span class=\\\"hljs-keyword\\\">yield</span> <span class=\\\"hljs-number\\\">2</span>\\n            <span class=\\\"hljs-number\\\">1</span>/<span class=\\\"hljs-number\\\">0</span>\\n            <span class=\\\"hljs-keyword\\\">yield</span> <span class=\\\"hljs-number\\\">3</span>  <span class=\\\"hljs-comment\\\"># never get here</span>\\n        <span class=\\\"hljs-keyword\\\">except</span> ZeroDivisionError:\\n            <span class=\\\"hljs-keyword\\\">yield</span> <span class=\\\"hljs-number\\\">4</span>\\n            <span class=\\\"hljs-keyword\\\">yield</span> <span class=\\\"hljs-number\\\">5</span>\\n            <span class=\\\"hljs-keyword\\\">raise</span>\\n        <span class=\\\"hljs-keyword\\\">except</span>:\\n            <span class=\\\"hljs-keyword\\\">yield</span> <span class=\\\"hljs-number\\\">6</span>\\n        <span class=\\\"hljs-keyword\\\">yield</span> <span class=\\\"hljs-number\\\">7</span>     <span class=\\\"hljs-comment\\\"># the &quot;raise&quot; above stops this</span>\\n    <span class=\\\"hljs-keyword\\\">except</span>:\\n        <span class=\\\"hljs-keyword\\\">yield</span> <span class=\\\"hljs-number\\\">8</span>\\n    <span class=\\\"hljs-keyword\\\">yield</span> <span class=\\\"hljs-number\\\">9</span>\\n    <span class=\\\"hljs-keyword\\\">try</span>:\\n        x = <span class=\\\"hljs-number\\\">12</span>\\n    <span class=\\\"hljs-keyword\\\">finally</span>:\\n       <span class=\\\"hljs-keyword\\\">yield</span> <span class=\\\"hljs-number\\\">10</span>\\n    <span class=\\\"hljs-keyword\\\">yield</span> <span class=\\\"hljs-number\\\">11</span>\\n<span class=\\\"hljs-built_in\\\">print</span> <span class=\\\"hljs-built_in\\\">list</span>(f()) <span class=\\\"hljs-comment\\\"># [1, 2, 4, 5, 8, 9, 10, 11]</span>\\n</code></pre>\\n<p>refer to: <a href=\\\"https://www.python.org/dev/peps/pep-0255/#example\\\">https://www.python.org/dev/peps/pep-0255/#example</a></p>\\n<h2 id=\\\"d\\\">D</h2>\\n<h3 id=\\\"modules\\\">Modules</h3>\\n<p>Python has a way to put definitions in a file and use them in a script or in an interactive instance of the interpreter. Such a file is called a <em>module</em>; definitions from a module can be <em><strong>imported</strong></em> into other modules or into the <em>main</em> module.</p>\\n<p>Before that, we should introduce a global variable  named <code>__name__</code> which can be used to identify whether a <code>.py</code> file is <strong>run directly</strong> from command line or <strong>is imported</strong> to other file as a module.</p>\\n<p>For example, say we got a file named <code>fibo.py</code>:</p>\\n<pre><code class=\\\"hljs language-python\\\"><span class=\\\"hljs-built_in\\\">print</span>(<span class=\\\"hljs-string\\\">&#x27;name in fibo&#x27;</span>, __name__) <span class=\\\"hljs-comment\\\"># will print &#x27;fibo&#x27; when imported as a module</span>\\n<span class=\\\"hljs-keyword\\\">def</span> <span class=\\\"hljs-title function_\\\">fibo</span>(<span class=\\\"hljs-params\\\">n</span>):\\n    <span class=\\\"hljs-comment\\\"># ...</span>\\n<span class=\\\"hljs-keyword\\\">def</span> <span class=\\\"hljs-title function_\\\">fiboprint</span>(<span class=\\\"hljs-params\\\">n</span>):\\n    <span class=\\\"hljs-comment\\\"># ...</span>\\n\\n<span class=\\\"hljs-comment\\\"># response when executing modules files as scripts</span>\\n<span class=\\\"hljs-keyword\\\">if</span> (__name__ == <span class=\\\"hljs-string\\\">&#x27;__main__&#x27;</span>):\\n    <span class=\\\"hljs-comment\\\"># to get command line arguments</span>\\n    <span class=\\\"hljs-keyword\\\">import</span> sys\\n    <span class=\\\"hljs-keyword\\\">if</span> (sys.argv.__len__() &gt; <span class=\\\"hljs-number\\\">1</span>):\\n        fiboprint(<span class=\\\"hljs-built_in\\\">int</span>(sys.argv[<span class=\\\"hljs-number\\\">1</span>]))\\n    <span class=\\\"hljs-keyword\\\">else</span>:\\n        <span class=\\\"hljs-built_in\\\">print</span>(<span class=\\\"hljs-string\\\">&#x27;Please set n&#x27;</span>)\\n</code></pre>\\n<p>A module can contain excutable statement for the purpos of initializing the modules:</p>\\n<pre><code class=\\\"hljs language-python\\\">rs = [] <span class=\\\"hljs-comment\\\"># collecting result</span>\\n<span class=\\\"hljs-keyword\\\">def</span> <span class=\\\"hljs-title function_\\\">fibo</span>(<span class=\\\"hljs-params\\\">n</span>):\\n    <span class=\\\"hljs-comment\\\"># put the result into the &#x27;rs&#x27;</span>\\n</code></pre>\\n<p>Or we can just run it as a command line script:</p>\\n<pre><code class=\\\"hljs language-bash\\\">python fibo.py 10\\n</code></pre>\\n<h4 id=\\\"import\\\">Import</h4>\\n<pre><code class=\\\"hljs language-python\\\"><span class=\\\"hljs-comment\\\"># import as object</span>\\n<span class=\\\"hljs-keyword\\\">import</span> fibo <span class=\\\"hljs-comment\\\"># this will import an object named &#x27;fibo&#x27; which file name is &#x27;fibo.py&#x27;</span>\\n<span class=\\\"hljs-comment\\\"># usage</span>\\nfibo.fibo(<span class=\\\"hljs-number\\\">10</span>)\\nfibp.fiboprint(<span class=\\\"hljs-number\\\">10</span>)\\n\\n<span class=\\\"hljs-comment\\\"># import object with new name</span>\\n<span class=\\\"hljs-keyword\\\">import</span> fibo <span class=\\\"hljs-keyword\\\">as</span> fiiboo\\nfiiboo.fibo(<span class=\\\"hljs-number\\\">10</span>)\\n\\n<span class=\\\"hljs-comment\\\"># import function only</span>\\n<span class=\\\"hljs-keyword\\\">from</span> fibo <span class=\\\"hljs-keyword\\\">import</span> fibo, fiboprint\\nfibo(<span class=\\\"hljs-number\\\">10</span>)\\nfiboprint(<span class=\\\"hljs-number\\\">10</span>)\\n\\n<span class=\\\"hljs-comment\\\"># import function with new name</span>\\n<span class=\\\"hljs-keyword\\\">from</span> fibo <span class=\\\"hljs-keyword\\\">import</span> fib <span class=\\\"hljs-keyword\\\">as</span> fibonacci\\nfibonacci(<span class=\\\"hljs-number\\\">10</span>)\\n\\n<span class=\\\"hljs-comment\\\"># import all function</span>\\n<span class=\\\"hljs-keyword\\\">from</span> fibo <span class=\\\"hljs-keyword\\\">import</span> *\\n</code></pre>\\n<h4 id=\\\"module-search-path\\\">Module Search Path</h4>\\n<p>When a module named <code>fibo</code> is imported, the interpreter first searches for a built-in module with that name. If not found, it then searches for a file named <code>fibo.py</code> in a list of directories given by the variable <a href=\\\"https://docs.python.org/3/library/sys.html#sys.path\\\"><code>sys.path</code></a>. <a href=\\\"https://docs.python.org/3/library/sys.html#sys.path\\\"><code>sys.path</code></a> is initialized from these locations:</p>\\n<ul>\\n<li>The directory containing the input script (or the current directory when no file is specified).</li>\\n<li><a href=\\\"https://docs.python.org/3/using/cmdline.html#envvar-PYTHONPATH\\\"><code>PYTHONPATH</code></a> (a list of directory names, with the same syntax as the shell variable <code>PATH</code>).</li>\\n<li>The installation-dependent default.</li>\\n</ul>\\n<h4 id=\\\"in-packages\\\">In Packages</h4>\\n<p>Here’s a possible structure for your package (expressed in terms of a hierarchical filesystem):</p>\\n<pre><code class=\\\"hljs language-python\\\">sound/                          Top-level package\\n      __init__.py               Initialize the sound package\\n      formats/                  Subpackage <span class=\\\"hljs-keyword\\\">for</span> file <span class=\\\"hljs-built_in\\\">format</span> conversions\\n              __init__.py\\n              wavread.py\\n              wavwrite.py\\n              ...\\n      effects/                  Subpackage <span class=\\\"hljs-keyword\\\">for</span> sound effects\\n              __init__.py\\n              echo.py\\n              surround.py\\n              ...\\n      filters/                  Subpackage <span class=\\\"hljs-keyword\\\">for</span> filters\\n              __init__.py\\n              equalizer.py\\n              ...\\n</code></pre>\\n<p>When importing the package, Python searches through the directories on <code>sys.path</code> looking for the package subdirectory.</p>\\n<p>The <code>__init__.py</code> files are required to make Python treat directories containing the file as packages. This prevents directories with a common name, such as <code>string</code>, unintentionally hiding valid modules that occur later on the module search path. </p>\\n<p>In the simplest case, <code>__init__.py</code> <strong>can just be an empty file</strong>, but it can also execute initialization code for the package or set the <code>__all__</code> variable, described later.</p>\\n<p>Users of the package can import individual modules from the package, for example:</p>\\n<pre><code class=\\\"hljs language-python\\\"><span class=\\\"hljs-keyword\\\">import</span> sound.effects.echo <span class=\\\"hljs-keyword\\\">as</span> echo\\necho.makesound()\\n</code></pre>\\n<h5 id=\\\"import--from-packages\\\">Import * From Packages</h5>\\n<p>For example, the file <code>sound/effects/__init__.py</code> could contain the following code:</p>\\n<pre><code class=\\\"hljs language-python\\\">__all__ = [<span class=\\\"hljs-string\\\">&quot;echo&quot;</span>, <span class=\\\"hljs-string\\\">&quot;surround&quot;</span>, <span class=\\\"hljs-string\\\">&quot;reverse&quot;</span>]\\n\\n<span class=\\\"hljs-keyword\\\">def</span> <span class=\\\"hljs-title function_\\\">do</span>():\\n    <span class=\\\"hljs-comment\\\"># do something</span>\\n</code></pre>\\n<p>This would mean that <code>from sound.effects import *</code> would import the three named submodules of the <code>sound</code> package.</p>\\n<p>What&#39;s more, we can define function in <code>sound/effects/__init__.py</code>，file and use it by:</p>\\n<pre><code class=\\\"hljs language-python\\\"><span class=\\\"hljs-keyword\\\">import</span> sound.effects <span class=\\\"hljs-keyword\\\">as</span> effects\\neffects.do()\\n</code></pre>\\n\";","export default \"<p><div class=\\\"saying mb-4\\\"><div class=\\\"saying-quote saying-left-quote\\\">“</div><div class=\\\"saying-quote saying-right-quote\\\">”</div></p>\\n<p>本文从为知笔记迁移过来, 本文的写作时间是 : 2016/10/18 下午1:41:28, 两年前的文章, 言语难免幼稚, 思维难免浅显, 多多包含.</p>\\n<p></div></p>\\n<blockquote>\\n<p>在学习这个东西的时候，找了很多资料，网上说的也都很笼统，找不到一个比较容易上手的例子，直到我看到一篇文章，作者在整体讲述Java5-8的新特性，其中讲完Java8的lambda表达式之后，马上就讲方法引用这个特性，我才更加清楚的意识到，方法引用其实是比lambda更加简洁的一个语法糖（不知道我这样理解对不对），但是，常识告诉我们，越简单的技术，限制条件就越多，为什么网上的关于方法引用的讲解都很散，因为方法引用的使用条件有点多。</p>\\n</blockquote>\\n<p>根据这篇文章，我又自己写了一个例子，来说明为什么方法引用可以是一个更加简洁的lambda：</p>\\n<h4 id=\\\"引例\\\">引例</h4>\\n<pre><code class=\\\"hljs language-java\\\"><span class=\\\"hljs-keyword\\\">public</span> <span class=\\\"hljs-keyword\\\">class</span> <span class=\\\"hljs-title class_\\\">methodReferences</span> {\\n    \\n    <span class=\\\"hljs-comment\\\">//标准FI</span>\\n    <span class=\\\"hljs-keyword\\\">interface</span> <span class=\\\"hljs-title class_\\\">methodReferencesFI</span>{\\n        List&lt;String&gt; <span class=\\\"hljs-title function_\\\">toList</span><span class=\\\"hljs-params\\\">(String[] string)</span>;\\n    }\\n    \\n    <span class=\\\"hljs-keyword\\\">public</span> <span class=\\\"hljs-keyword\\\">static</span> <span class=\\\"hljs-keyword\\\">void</span> <span class=\\\"hljs-title function_\\\">main</span><span class=\\\"hljs-params\\\">(String[] args)</span> {\\n        \\n        <span class=\\\"hljs-comment\\\">//lambda登场，这时候干了哪两件事？</span>\\n        <span class=\\\"hljs-type\\\">methodReferencesFI</span> <span class=\\\"hljs-variable\\\">lam</span> <span class=\\\"hljs-operator\\\">=</span> person-&gt;{<span class=\\\"hljs-keyword\\\">return</span> Arrays.asList(person);};\\n        \\n        <span class=\\\"hljs-comment\\\">//MethodReferences登场，这时候其实也干了两件事</span>\\n        <span class=\\\"hljs-type\\\">methodReferencesFI</span> <span class=\\\"hljs-variable\\\">mr</span> <span class=\\\"hljs-operator\\\">=</span> Arrays::asList;\\n        \\n        <span class=\\\"hljs-comment\\\">//给定数组</span>\\n        String[] person = {<span class=\\\"hljs-string\\\">&quot;Tom&quot;</span>,<span class=\\\"hljs-string\\\">&quot;Jack&quot;</span>,<span class=\\\"hljs-string\\\">&quot;Jimy&quot;</span>};\\n        \\n        System.out.println(<span class=\\\"hljs-string\\\">&quot;lambda &#x27;s toList :&quot;</span>+lam.toList(person));\\n        \\n        <span class=\\\"hljs-comment\\\">//神奇的事情</span>\\n        System.out.println(<span class=\\\"hljs-string\\\">&quot;MethodReferances &#x27;s toList :&quot;</span>+mr.toList(person));\\n        \\n        <span class=\\\"hljs-comment\\\">//更神奇的事</span>\\n        List&lt;String&gt; personlist = mr.toList(person);\\n        \\n        <span class=\\\"hljs-comment\\\">//这也是静态方法引用</span>\\n        personlist.forEach(System.out::println);\\n        \\n    }\\n​\\n}\\n</code></pre>\\n<p>你看，两种方式，同样实现了<code>methodReferencesFI</code> ，只是MR更加简便。这里同时也演示了昨天我没举例的有返回值的FI方法是如何使用lambda的。</p>\\n<p>这样看来，方法引用，好像更6一点啊？但是，但是，前面说了，越简单的技术，使用条件就越多，这里的使用条件就是，引用的方法是静态方法 ，比如asList是Arrays这个工具类下面的静态方法，这种工具类一般不用创建对象，可以直接用类名调用方法。这就是方法引用的其中一个限制条件。</p>\\n<p>刚才我又看了一篇文章，让我对于lambda表达式和方法引用之间的关系又有了新的理解。</p>\\n<p>上面说到，我们通常用lambda表达式来创建匿名方法，然而，我们有时候仅仅是调用了一个已经存在的方法：</p>\\n<pre><code class=\\\"hljs language-java\\\">Arrays.sort(stringsArray,(s1,s2)-&gt;s1.compareToIgnoreCase(s2));\\n</code></pre>\\n<p>但是在JAVA8中，还可以直接通过方法引用来简写lambda表达式中已经存在的方法。</p>\\n<pre><code class=\\\"hljs language-java\\\">Arrays.sort(stringsArray, String::compareToIgnoreCase);\\n</code></pre>\\n<h4 id=\\\"四种方法引用的形式\\\">四种方法引用的形式</h4>\\n<h5 id=\\\"1-引用某个对象的实例方法：\\\">1. 引用某个对象的实例方法：</h5>\\n<pre><code class=\\\"hljs language-java\\\"><span class=\\\"hljs-keyword\\\">class</span> <span class=\\\"hljs-title class_\\\">ComparisonProvider</span>{\\n            <span class=\\\"hljs-keyword\\\">public</span> <span class=\\\"hljs-type\\\">int</span> <span class=\\\"hljs-title function_\\\">compareByName</span><span class=\\\"hljs-params\\\">(Person a,Person b)</span>{\\n                <span class=\\\"hljs-keyword\\\">return</span> a.getName().compareTo(b.getName());\\n            }\\n​\\n            <span class=\\\"hljs-keyword\\\">public</span> <span class=\\\"hljs-type\\\">int</span> <span class=\\\"hljs-title function_\\\">compareByAge</span><span class=\\\"hljs-params\\\">(Person a,Person b)</span>{\\n                <span class=\\\"hljs-keyword\\\">return</span> a.getBirthday().compareTo(b.getBirthday());\\n            }\\n        }\\n​\\n<span class=\\\"hljs-type\\\">ComparisonProvider</span> <span class=\\\"hljs-variable\\\">provider</span> <span class=\\\"hljs-operator\\\">=</span> <span class=\\\"hljs-keyword\\\">new</span> <span class=\\\"hljs-title class_\\\">ComparisonProvider</span>();\\n​\\n<span class=\\\"hljs-comment\\\">//使用lambda表达式</span>\\n<span class=\\\"hljs-comment\\\">//对象的实例方法</span>\\nArrays.sort(persons,(a,b)-&gt;provider.compareByAge(a,b));\\n​\\n<span class=\\\"hljs-comment\\\">//使用方法引用</span>\\n<span class=\\\"hljs-comment\\\">//引用的是对象的实例方法</span>\\nArrays.sort(persons, provider::compareByAge);\\n</code></pre>\\n<p>首先我们来分析一下这里为什么可以用lambda，我们来看一下这个Arrays.sort的源码：</p>\\n<pre><code class=\\\"hljs language-java\\\">    <span class=\\\"hljs-keyword\\\">public</span> <span class=\\\"hljs-keyword\\\">static</span> &lt;T&gt; <span class=\\\"hljs-keyword\\\">void</span> <span class=\\\"hljs-title function_\\\">sort</span><span class=\\\"hljs-params\\\">(T[] a, Comparator&lt;? <span class=\\\"hljs-built_in\\\">super</span> T&gt; c)</span> {\\n        <span class=\\\"hljs-keyword\\\">if</span> (c == <span class=\\\"hljs-literal\\\">null</span>) {\\n            sort(a);\\n        } <span class=\\\"hljs-keyword\\\">else</span> {\\n            <span class=\\\"hljs-keyword\\\">if</span> (LegacyMergeSort.userRequested)\\n                legacyMergeSort(a, c);\\n            <span class=\\\"hljs-keyword\\\">else</span>\\n                TimSort.sort(a, <span class=\\\"hljs-number\\\">0</span>, a.length, c, <span class=\\\"hljs-literal\\\">null</span>, <span class=\\\"hljs-number\\\">0</span>, <span class=\\\"hljs-number\\\">0</span>);\\n        }\\n    }\\n</code></pre>\\n<p>这里看不出什么花，再看第二个参数：Comparator&lt;? super T&gt; c ，行，看源码之后我发现，这是一个FI，里面定义了唯一的一个抽象方法。。。？？唉不对？有两个抽象方法。。这就很尴尬了。。这和官方给出的FI的定义不符啊，这不是打脸嘛，后面我去查资料和看源码注释了解到，虽然这个接口显式定义了两个类方法，但是equals是一个明确声明为继承自Object的具体的函数！！！ </p>\\n<p>但是，例子上这个lambda的使用方式，和我昨天学的有点不太一样，昨天的是，首先有一个FI，然后一步做两步，实现FI，实现FI方法，再调用该方法，但是呢，这里一步做了三件事情。我们先来看看如果用按照昨天的步骤做会如何。</p>\\n<pre><code class=\\\"hljs language-java\\\">    <span class=\\\"hljs-comment\\\">//开始肯定是一步做两步了</span>\\n    Comparator&lt;Person&gt; comparator = (Person a,Person b)-&gt;provider.compareByName(a,b);\\n    ​\\n    <span class=\\\"hljs-comment\\\">//然后调用</span>\\n    Arrays.sort(persons,comparator);\\n    现在直接：\\n    Arrays.sort(persons,(a,b)-&gt;provider.compareByAge(a,b));\\n    而方法引用更直接：\\n    Arrays.sort(persons, provider::compareByAge);\\n</code></pre>\\n<h5 id=\\\"2-引用特定类的类型对象的实例方法\\\">2. 引用特定类的类型对象的实例方法</h5>\\n<p>这个引用在文章里面被介绍为<code>难以理解的</code>，难以理解的东西，所以也难以维护，建议不使用这种引用。</p>\\n<h5 id=\\\"3-构造函数的引用\\\">3. 构造函数的引用</h5>\\n<p>其实这挺简单的。但是我觉得也没必要，因为new Class()；这种形式就已经够简单的了。</p>\\n<h5 id=\\\"4-静态方法引用\\\">4. 静态方法引用</h5>\\n<p>格式<code>Class::static_method</code></p>\\n<p>到这里方法引用总算是粗略的过了一遍，但是回想前面这一路学习下来，我还是有一个地方，不是很理解。</p>\\n<pre><code class=\\\"hljs language-java\\\">    <span class=\\\"hljs-comment\\\">//这也是静态方法引用</span>\\n    personlist.forEach(System.out::println);\\n</code></pre>\\n<p>上文有一个地方说道这个...我们把这句话用lambda表示出来看看：</p>\\n<pre><code class=\\\"hljs language-java\\\">    personlist.forEach((p)-&gt;System.out.println(p));\\n</code></pre>\\n<p>但是...静态在哪？往上找源码我发现，只有out这个对象是静态的 ，其他的类都没有静态方法和这个相关，首先，System里面有一个静态的PrintStream对象out，然后PrintStream里面有一个已经实现的非静态方法println。静态对象应用非静态方法，算是静态引用么？</p>\\n\";","export default \"<p><span id=\\\"top\\\"></span></p>\\n<h3 id=\\\"ⅳ-jetty开发指南-23jetty和maven\\\">Ⅳ. Jetty开发指南-23.Jetty和Maven</h3>\\n<ul>\\n<li><ol start=\\\"23\\\">\\n<li><a href=\\\"#23jetty%E5%92%8Cmaven\\\">Jetty和Maven</a></li>\\n</ol>\\n<ul>\\n<li><a href=\\\"#231%E4%BD%BF%E7%94%A8maven\\\">使用Maven</a><ul>\\n<li><a href=\\\"#2311%E4%BD%BF%E7%94%A8maven%E5%81%9A%E5%B5%8C%E5%85%A5%E5%BC%8Fjetty%E5%BC%80%E5%8F%91\\\">使用Maven做嵌入式Jetty开发</a></li>\\n<li><a href=\\\"#2321%E4%BD%BF%E7%94%A8maven%E5%BC%80%E5%8F%91%E6%A0%87%E5%87%86%E7%9A%84wabapp\\\">使用Maven开发标准的WebApp</a></li>\\n</ul>\\n</li>\\n<li><a href=\\\"#232%E9%85%8D%E7%BD%AEjetty%E7%9A%84maven%E6%8F%92%E4%BB%B6\\\">配置Jetty的Maven插件</a><ul>\\n<li><a href=\\\"#2321%E5%BF%AB%E9%80%9F%E5%BC%80%E5%A7%8B\\\">快速开始</a></li>\\n<li><a href=\\\"#2322%E6%94%AF%E6%8C%81%E7%9B%AE%E6%A0%87\\\">支持目标</a></li>\\n<li><a href=\\\"#2323%E9%85%8D%E7%BD%AEjetty%E5%AE%B9%E5%99%A8\\\">配置Jetty容器</a></li>\\n<li><a href=\\\"#2324%E9%85%8D%E7%BD%AE%E4%BD%A0%E7%9A%84webapp\\\">配置你的WebApp</a></li>\\n<li><a href=\\\"#2325jettyrun\\\">jetty:run</a></li>\\n<li><a href=\\\"#2326jettyrunwar\\\">jetty:run-war</a></li>\\n<li><a href=\\\"#2327jettyrunexploded\\\">jetty:run-exploded</a></li>\\n<li><a href=\\\"#2328jettyrunforked\\\">jetty:run-forked</a></li>\\n<li><a href=\\\"#2329jettystart\\\">jetty:start</a></li>\\n<li><a href=\\\"#23210jettystop\\\">jetty:stop</a></li>\\n<li><a href=\\\"#23211jettyeffectivewebxml\\\">jetty:effective-web-xml</a></li>\\n<li><a href=\\\"#23212%E4%BD%BF%E7%94%A8%E8%A6%86%E7%9B%96war\\\">使用覆盖war</a></li>\\n<li><a href=\\\"#23213%E9%85%8D%E7%BD%AEsecurity\\\">配置Security</a></li>\\n<li><a href=\\\"#23214%E4%BD%BF%E7%94%A8%E5%A4%9A%E4%B8%AAwebapproot%E7%9B%AE%E5%BD%95\\\">使用多个WebappRoot目录</a></li>\\n<li><a href=\\\"#23215%E8%BF%90%E8%A1%8C%E4%B8%80%E4%B8%AA%E4%BB%A5%E4%B8%8A%E7%9A%84webapp\\\">运行一个以上的Webapp</a></li>\\n<li><a href=\\\"#23216%E8%AE%BE%E7%BD%AE%E7%B3%BB%E7%BB%9F%E5%B1%9E%E6%80%A7\\\">设置系统属性</a></li>\\n</ul>\\n</li>\\n<li><a href=\\\"#233jetty-maven%E6%8F%92%E4%BB%B6%E7%9A%84%E6%96%87%E4%BB%B6%E6%89%AB%E6%8F%8F\\\">Jetty Maven插件的文件扫描</a></li>\\n<li><a href=\\\"#234jetty-jspc-maven%E6%8F%92%E4%BB%B6\\\">Jetty Jspc Maven插件</a></li>\\n</ul>\\n</li>\\n</ul>\\n<hr>\\n<p><span id=\\\"23jetty和maven\\\"></span></p>\\n<h3 id=\\\"23、jetty和maven\\\">23、Jetty和Maven</h3>\\n<ul>\\n<li>23.1、<a href=\\\"#231%E4%BD%BF%E7%94%A8maven\\\">使用Maven</a></li>\\n<li>23.2、<a href=\\\"#232%E9%85%8D%E7%BD%AEjetty%E7%9A%84maven%E6%8F%92%E4%BB%B6\\\">配置Jetty的Maven插件</a></li>\\n<li>23.3、<a href=\\\"#233jetty-maven%E6%8F%92%E4%BB%B6%E7%9A%84%E6%96%87%E6%A1%A3%E6%89%AB%E6%8F%8F\\\">Jetty Maven插件的文件扫描</a></li>\\n<li>23.4、<a href=\\\"#234jetty-jspc-maven%E6%8F%92%E4%BB%B6\\\">Jetty Jspc Maven插件</a></li>\\n</ul>\\n<p><span id=\\\"231使用maven\\\"></span></p>\\n<h4 id=\\\"231、使用maven\\\">23.1、使用Maven</h4>\\n<ul>\\n<li>23.1.1、<a href=\\\"#2311%E4%BD%BF%E7%94%A8maven%E5%81%9A%E5%B5%8C%E5%85%A5%E5%BC%8Fjetty%E5%BC%80%E5%8F%91\\\">使用Maven做嵌入式Jetty开发</a></li>\\n<li>23.1.2、<a href=\\\"#2321%E4%BD%BF%E7%94%A8maven%E5%BC%80%E5%8F%91%E6%A0%87%E5%87%86%E7%9A%84wabapp\\\">使用Maven开发标准的WebApp</a></li>\\n</ul>\\n<blockquote>\\n<p><em>插播原文：Apache Maven is a software project management and comprehension tool. Based on the concept of a project object model (POM), Maven can manage a project’s build, reporting and documentation from a central piece of information.</em></p>\\n</blockquote>\\n<p>所以这是一个理想的用来构建web应用的工具，一些插件比如<code>jetty-maven-plugin</code>可以很容易的就运行一个web应用，以节省了部署操作所花费的时间。你可以非常容易地使用Maven去构建、测试、运行一个嵌入了Jetty服务器的web项目。</p>\\n<blockquote>\\n<p><strong>NOTE</strong></p>\\n<p>使用<code>jetty-maven-plugin</code>并不是必须的。但是用Maven来实现Jetty是一种流行的做法，不过你还是可以根据你的业务需求来选择其它流行的工具，比如ant和gradle。</p>\\n</blockquote>\\n<p>首先我们来看一个非常简单的java应用的HelloWorld，它嵌入了Jetty。然后看一个简单的web应用，它使用<code>jetty-maven-plugin</code>来加快了开发周期。</p>\\n<p><span id=\\\"2311使用maven做嵌入式jetty开发\\\"></span></p>\\n<h5 id=\\\"2311、使用maven做嵌入式jetty开发\\\">23.1.1、使用Maven做嵌入式Jetty开发</h5>\\n<p>为了理解对Jetty的构建和运行的基本操作，你首先得了解“Jetty的嵌入式开发”。</p>\\n<p>俗话说得好，“约定大于配置”，所以你最好使用Maven推荐的标准web应用目录结构。你可以使用<code>archetypes </code>去快速地设置好基本的Maven项目结构，但在本教程中我们将会手动地创建项目结构：</p>\\n<pre><code>&gt; mkdir JettyMavenHelloWorld\\n&gt; cd JettyMavenHelloWorld\\n&gt; mkdir -p src/main/java/org/example\\n</code></pre>\\n<br>\\n\\n<h6 id=\\\"23111、创建helloworld类\\\">23.1.1.1、创建HelloWorld类</h6>\\n<p>路径<code>src/main/java/org/example/HelloWorld.java</code>:</p>\\n<pre><code>package org.example;\\n\\nimport javax.servlet.http.HttpServletRequest;\\nimport javax.servlet.http.HttpServletResponse;\\nimport javax.servlet.ServletException;\\nimport java.io.IOException;\\nimport org.eclipse.jetty.server.Server;\\nimport org.eclipse.jetty.server.Request;\\nimport org.eclipse.jetty.server.handler.AbstractHandler;\\n\\npublic class HelloWorld extends AbstractHandler\\n{\\n    public void handle(String target,\\n                       Request baseRequest,\\n                       HttpServletRequest request,\\n                       HttpServletResponse response)\\n        throws IOException, ServletException\\n    {\\n        response.setContentType(&quot;text/html;charset=utf-8&quot;);\\n        response.setStatus(HttpServletResponse.SC_OK);\\n        baseRequest.setHandled(true);\\n        response.getWriter().println(&quot;&lt;h1&gt;Hello World&lt;/h1&gt;&quot;);\\n    }\\n\\n    public static void main(String[] args) throws Exception\\n    {\\n        Server server = new Server(8080);\\n        server.setHandler(new HelloWorld());\\n\\n        server.start();\\n        server.join();\\n    }\\n}\\n</code></pre>\\n<br>\\n\\n<h6 id=\\\"23112、创建pom文件\\\">23.1.1.2、创建POM文件</h6>\\n<pre><code>&lt;project xmlns=&quot;http://maven.apache.org/POM/4.0.0&quot;\\n         xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;\\n         xsi:schemaLocation=&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd&quot;&gt;\\n\\n  &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;\\n  &lt;groupId&gt;org.example&lt;/groupId&gt;\\n  &lt;artifactId&gt;hello-world&lt;/artifactId&gt;\\n  &lt;version&gt;0.1-SNAPSHOT&lt;/version&gt;\\n  &lt;packaging&gt;jar&lt;/packaging&gt;\\n  &lt;name&gt;Jetty HelloWorld&lt;/name&gt;\\n\\n  &lt;properties&gt;\\n      &lt;!-- Adapt this to a version found on\\n           http://central.maven.org/maven2/org/eclipse/jetty/jetty-maven-plugin/\\n        --&gt;\\n      &lt;jettyVersion&gt;9.3.9.v20160517&lt;/jettyVersion&gt;\\n  &lt;/properties&gt;\\n\\n  &lt;dependencies&gt;\\n    &lt;dependency&gt;\\n      &lt;groupId&gt;org.eclipse.jetty&lt;/groupId&gt;\\n      &lt;artifactId&gt;jetty-server&lt;/artifactId&gt;\\n      &lt;version&gt;${jettyVersion}&lt;/version&gt;\\n    &lt;/dependency&gt;\\n  &lt;/dependencies&gt;\\n\\n  &lt;build&gt;\\n    &lt;plugins&gt;\\n      &lt;plugin&gt;\\n        &lt;groupId&gt;org.codehaus.mojo&lt;/groupId&gt;\\n        &lt;artifactId&gt;exec-maven-plugin&lt;/artifactId&gt;\\n        &lt;version&gt;1.1&lt;/version&gt;\\n        &lt;executions&gt;\\n          &lt;execution&gt;&lt;goals&gt;&lt;goal&gt;java&lt;/goal&gt;&lt;/goals&gt;&lt;/execution&gt;\\n        &lt;/executions&gt;\\n        &lt;configuration&gt;\\n          &lt;mainClass&gt;org.example.HelloWorld&lt;/mainClass&gt;\\n        &lt;/configuration&gt;\\n      &lt;/plugin&gt;\\n    &lt;/plugins&gt;\\n  &lt;/build&gt;\\n&lt;/project&gt;\\n</code></pre>\\n<br>\\n\\n<h6 id=\\\"23113、构建和运行嵌入式helloworld\\\">23.1.1.3、构建和运行嵌入式HelloWorld</h6>\\n<p>你现在可以使用以下命令编译和执行Hello World类：</p>\\n<pre><code>&gt; mvn clean compile exec:java\\n</code></pre>\\n<p>使用浏览器访问<code>http://localhost:8080</code>页面，你就可以看见HelloWorld页面了。你可以观察一下Maven到底干了什么，使用<code>mvn dependency:tree</code>命令，它会揭示传递依赖关系以及下载内容：</p>\\n<pre><code>&gt; mvn dependency:tree\\n[INFO] Scanning for projects...\\n...\\n[INFO]\\n[INFO] ------------------------------------------------------------------------\\n[INFO] Building Jetty HelloWorld 0.1-SNAPSHOT\\n[INFO] ------------------------------------------------------------------------\\n[INFO]\\n[INFO] --- maven-dependency-plugin:2.8:tree (default-cli) @ hello-world ---\\n...\\n[INFO] org.example:hello-world:jar:0.1-SNAPSHOT\\n[INFO] \\\\- org.eclipse.jetty:jetty-server:jar:9.3.9.v20160517:compile\\n[INFO]    +- javax.servlet:javax.servlet-api:jar:3.1.0:compile\\n[INFO]    +- org.eclipse.jetty:jetty-http:jar:9.3.9.v20160517:compile\\n[INFO]    |  \\\\- org.eclipse.jetty:jetty-util:jar:9.3.9.v20160517:compile\\n[INFO]    \\\\- org.eclipse.jetty:jetty-io:jar:9.3.9.v20160517:compile\\n[INFO] ------------------------------------------------------------------------\\n[INFO] BUILD SUCCESS\\n[INFO] ------------------------------------------------------------------------\\n[INFO] Total time: 4.145 s\\n[INFO] Finished at: 2016-08-01T13:46:42-04:00\\n[INFO] Final Memory: 15M/209M\\n[INFO] ------------------------------------------------------------------------\\n</code></pre>\\n<p><a href=\\\"#top\\\">回到顶部</a>\\n<br></p>\\n<p><span id=\\\"2321使用maven开发标准的wabapp\\\"></span></p>\\n<h5 id=\\\"2312、使用maven开发标准的webapp\\\">23.1.2、使用Maven开发标准的WebApp</h5>\\n<p>之前的部分演示了在应用中如何使用maven去做嵌入式Jetty。现在我们将研究如何使用Maven和Jetty开发一个标准的web应用，首先创建Maven标准web目录结构：</p>\\n<pre><code>&gt; mkdir JettyMavenHelloWarApp\\n&gt; cd JettyMavenHelloWebApp\\n&gt; mkdir -p src/main/java/org/example\\n&gt; mkdir -p src/main/webapp/WEB-INF\\n</code></pre>\\n<br>\\n\\n<h6 id=\\\"23121、创建一个servlet\\\">23.1.2.1、创建一个Servlet</h6>\\n<p>路径<code>src/main/java/org/example/HelloServlet.java</code>：</p>\\n<pre><code>package org.example;\\n\\nimport java.io.IOException;\\nimport javax.servlet.ServletException;\\nimport javax.servlet.http.HttpServlet;\\nimport javax.servlet.http.HttpServletRequest;\\nimport javax.servlet.http.HttpServletResponse;\\n\\npublic class HelloServlet extends HttpServlet\\n{\\n    protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException\\n    {\\n        response.setContentType(&quot;text/html&quot;);\\n        response.setStatus(HttpServletResponse.SC_OK);\\n        response.getWriter().println(&quot;&lt;h1&gt;Hello Servlet&lt;/h1&gt;&quot;);\\n        response.getWriter().println(&quot;session=&quot; + request.getSession(true).getId());\\n    }\\n}\\n</code></pre>\\n<p>你需要在<code>web.xml</code>中声明这个servlet：</p>\\n<pre><code>&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;\\n&lt;web-app\\n   xmlns=&quot;http://xmlns.jcp.org/xml/ns/javaee&quot;\\n   xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;\\n   xsi:schemaLocation=&quot;http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_3_1.xsd&quot;\\n   metadata-complete=&quot;false&quot;\\n   version=&quot;3.1&quot;&gt;\\n\\n  &lt;servlet&gt;\\n    &lt;servlet-name&gt;Hello&lt;/servlet-name&gt;\\n    &lt;servlet-class&gt;org.example.HelloServlet&lt;/servlet-class&gt;\\n  &lt;/servlet&gt;\\n  &lt;servlet-mapping&gt;\\n    &lt;servlet-name&gt;Hello&lt;/servlet-name&gt;\\n    &lt;url-pattern&gt;/hello/*&lt;/url-pattern&gt;\\n  &lt;/servlet-mapping&gt;\\n\\n&lt;/web-app&gt;\\n</code></pre>\\n<br>\\n\\n<h6 id=\\\"23122、创建pom\\\">23.1.2.2、创建POM</h6>\\n<p>特别注意里面有<code>jetty-maven-plugin</code>插件：</p>\\n<pre><code>&lt;project xmlns=&quot;http://maven.apache.org/POM/4.0.0&quot;\\n         xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;\\n         xsi:schemaLocation=&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd&quot;&gt;\\n\\n  &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;\\n  &lt;groupId&gt;org.example&lt;/groupId&gt;\\n  &lt;artifactId&gt;hello-world&lt;/artifactId&gt;\\n  &lt;version&gt;0.1-SNAPSHOT&lt;/version&gt;\\n  &lt;packaging&gt;war&lt;/packaging&gt;\\n  &lt;name&gt;Jetty HelloWorld WebApp&lt;/name&gt;\\n\\n  &lt;properties&gt;\\n      &lt;jettyVersion&gt;9.4.6.v20170531&lt;/jettyVersion&gt;\\n  &lt;/properties&gt;\\n\\n  &lt;dependencies&gt;\\n    &lt;dependency&gt;\\n      &lt;groupId&gt;javax.servlet&lt;/groupId&gt;\\n      &lt;artifactId&gt;javax.servlet-api&lt;/artifactId&gt;\\n      &lt;version&gt;3.1.0&lt;/version&gt;\\n      &lt;scope&gt;provided&lt;/scope&gt;\\n    &lt;/dependency&gt;\\n  &lt;/dependencies&gt;\\n\\n  &lt;build&gt;\\n    &lt;plugins&gt;\\n      &lt;plugin&gt;\\n        &lt;groupId&gt;org.eclipse.jetty&lt;/groupId&gt;\\n        &lt;artifactId&gt;jetty-maven-plugin&lt;/artifactId&gt;\\n        &lt;version&gt;${jettyVersion}&lt;/version&gt;\\n      &lt;/plugin&gt;\\n    &lt;/plugins&gt;\\n  &lt;/build&gt;\\n\\n&lt;/project&gt;\\n</code></pre>\\n<br>\\n\\n<h6 id=\\\"23123、构建和运行web项目\\\">23.1.2.3、构建和运行Web项目</h6>\\n<p>现在你可以同时构建和运行web应用，不需要把项目组装成一个war，你只需要使用<code>jetty-maven-plugin</code>提供的命令就可以了：</p>\\n<pre><code>&gt; mvn jetty:run\\n</code></pre>\\n<p>然后你可以在<code>http://localhost:8080/hello</code>地址中看到静态和动态的内容。</p>\\n<h6 id=\\\"23124、创建一个war文件\\\">23.1.2.4、创建一个war文件</h6>\\n<p>你可以通过以下的命令，从项目中创建一个Web应用存档（Web Application Archive (WAR)）文件：</p>\\n<pre><code>&gt; mvn package\\n</code></pre>\\n<p>生产的war文件会在target目录，并且它可以部署在任何的标准servlet服务器，包括Jetty。</p>\\n<p><a href=\\\"#top\\\">回到顶部</a></p>\\n<hr>\\n<p><span id=\\\"232配置jetty的maven插件\\\"></span></p>\\n<h4 id=\\\"232、配置jetty的maven插件\\\">23.2、配置Jetty的Maven插件</h4>\\n<ul>\\n<li>23.2.1、<a href=\\\"#2321%E5%BF%AB%E9%80%9F%E5%BC%80%E5%A7%8B\\\">快速开始</a></li>\\n<li>23.2.2、<a href=\\\"#2322%E6%94%AF%E6%8C%81%E7%9B%AE%E6%A0%87\\\">支持目标</a></li>\\n<li>23.2.3、<a href=\\\"#2323%E9%85%8D%E7%BD%AEjetty%E5%AE%B9%E5%99%A8\\\">配置Jetty容器</a></li>\\n<li>23.2.4、<a href=\\\"#2324%E9%85%8D%E7%BD%AE%E4%BD%A0%E7%9A%84webapp\\\">配置你的WebApp</a></li>\\n<li>23.2.5、<a href=\\\"#2325jettyrun\\\">jetty:run</a></li>\\n<li>23.2.6、<a href=\\\"#2326jettyrunwar\\\">jetty:run-war</a></li>\\n<li>23.2.7、<a href=\\\"#2327jettyrunexploded\\\">jetty:run-exploded</a></li>\\n<li>23.2.8、<a href=\\\"#2328jettyrunforked\\\">jetty:run-forked</a></li>\\n<li>23.2.9、<a href=\\\"#2329jettystart\\\">jetty:start</a></li>\\n<li>23.2.10、<a href=\\\"#23210jettystop\\\">jetty:stop</a></li>\\n<li>23.2.11、<a href=\\\"#23211jettyeffectivewebxml\\\">jetty:effective-web-xml</a></li>\\n<li>23.2.12、<a href=\\\"#23212%E4%BD%BF%E7%94%A8%E8%A6%86%E7%9B%96war\\\">使用覆盖war</a></li>\\n<li>23.2.13、<a href=\\\"#23213%E9%85%8D%E7%BD%AEsecurity\\\">配置Security</a></li>\\n<li>23.2.14、<a href=\\\"#23214%E4%BD%BF%E7%94%A8%E5%A4%9A%E4%B8%AAwebapproot%E7%9B%AE%E5%BD%95\\\">使用多个WebappRoot目录</a></li>\\n<li>23.2.15、<a href=\\\"#23215%E8%BF%90%E8%A1%8C%E4%B8%80%E4%B8%AA%E4%BB%A5%E4%B8%8A%E7%9A%84webapp\\\">运行一个以上的Webapp</a></li>\\n<li>23.2.16、<a href=\\\"#23216%E8%AE%BE%E7%BD%AE%E7%B3%BB%E7%BB%9F%E5%B1%9E%E6%80%A7\\\">设置系统属性</a></li>\\n</ul>\\n<p>Jetty Maven插件插件对于快速开发和快速测试来说是非常有用的。你可以把它添加到任意一个webapp项目中，只要这个项目的结构符合Maven标准。插件会定期的扫描你的项目的变化，并且自动的重新部署项目。这让生产周期大大缩减，因为你不用做部署和构建的步骤：你只需要在IDE里面做出修改，然后运行的web容器会自动地重新部署这些修改，所以在这样的情况下，你可以非常直接地做测试工作。</p>\\n<blockquote>\\n<p><strong>重要：</strong></p>\\n<p>你需要Maven3.3以上才能支持这个插件。</p>\\n</blockquote>\\n<p>虽然Jetty Maven插件可以非常有效地进行开发，但是我们并不推荐把它运用到生产环境。因为Maven插件的运作本身需要许多内置Maven API，并且Maven它本身并不是一个生产部署工具。我们还是推荐你使用传统的开发版部署方法或者使用嵌入式Jetty。</p>\\n<br>\\n\\n<p><span id=\\\"2321快速开始\\\"></span></p>\\n<h5 id=\\\"2321、快速开始\\\">23.2.1、快速开始</h5>\\n<p>首先，在pom中配置插件：</p>\\n<pre><code>&lt;plugin&gt;\\n  &lt;groupId&gt;org.eclipse.jetty&lt;/groupId&gt;\\n  &lt;artifactId&gt;jetty-maven-plugin&lt;/artifactId&gt;\\n  &lt;version&gt;9.4.6.v20170531&lt;/version&gt;\\n&lt;/plugin&gt;\\n</code></pre>\\n<p>然后在和pom同级的目录下，执行以下命令：</p>\\n<pre><code>mvn jetty:run\\n</code></pre>\\n<p>然后你可以在<code>http://localhost:8080/</code>访问你的项目。</p>\\n<p>Jetty会一直执行下去直到你停止它。当它在运行的时候，它会定期扫描你项目文件是否有变动，如果文件有变动并且重编译了成class文件的话，Jetty会重新部署你的项目，然后你可以直接测试你刚才的变更结果。</p>\\n<p>你可以在终端窗口使用<code>ctrl-c</code>热键来终止这个插件的运行。</p>\\n<blockquote>\\n<p><strong>注意：</strong></p>\\n<p>运行Jetty实例的类路径和它下面部署的web应用都是通过Maven来管理的，这可能和你期待的有点不同。比如说：一个web应用的依赖jar可能会引用本地maven仓库中的版本，而不是WEB-INF/lib目录下的jar包。</p>\\n</blockquote>\\n<p><a href=\\\"#top\\\">回到顶部</a>\\n<br></p>\\n<p><span id=\\\"2322支持目标\\\"></span></p>\\n<h5 id=\\\"2322、支持目标\\\">23.2.2、支持目标</h5>\\n<p>Jetty Maven插件有大量的Maven目标。这其中最有用的目标就是run目标，它可以运行一个未装配的webapp。还有其它的目标，可以帮助你完成不同的任务。比如说，你可能需要在另外一个Jetty的实例上运行你的webapp而不是就在当前的maven进程里面运行；或者你可能需要在你想部署的webapp上，对项目的生命周期的各个阶段进行更细致粒度的控制。</p>\\n<p>Maven中有很多目标都可以完成这些任务，你可以通过命令来查看Jetty Maven插件支持哪些目标：</p>\\n<pre><code>mvn jetty:help\\n</code></pre>\\n<p>为了看到更多详细信息，你可以传入特定目标的名字：</p>\\n<pre><code>mvn jetty:help -Ddetail=true -Dgoal= &lt;goal name&gt;\\n</code></pre>\\n<p><a href=\\\"#top\\\">回到顶部</a>\\n<br></p>\\n<p><span id=\\\"2323配置jetty容器\\\"></span></p>\\n<h5 id=\\\"2323、配置jetty容器\\\">23.2.3、配置Jetty容器</h5>\\n<ul>\\n<li>httpConnector\\n可选项。如果没有指定，Jetty会创建一个<code>ServerConnector</code>实例来监听8080端口。你可以通过命令行在启动的时候更改这些默认的设置，比如说<code>mvn -Djetty.http.port=9999 jetty:run</code>。除此之外，你可以使用配置对象来设置<code>ServerConnector</code>信息。以下是可配置的子对象：<ul>\\n<li>port：<ul>\\n<li>可修改的端口号，默认是8080。</li>\\n</ul>\\n</li>\\n<li>host：<ul>\\n<li>特定的connector接口，默认是所有接口。</li>\\n</ul>\\n</li>\\n<li>name：<ul>\\n<li>connector的名字。</li>\\n</ul>\\n</li>\\n<li>idleTimeout：<ul>\\n<li>最大等待连接时间。</li>\\n</ul>\\n</li>\\n<li>soLinger：<ul>\\n<li>socket的延迟时间。</li>\\n</ul>\\n</li>\\n</ul>\\n</li>\\n</ul>\\n<p>示例：</p>\\n<pre><code>&lt;plugin&gt;\\n    &lt;groupId&gt;org.eclipse.jetty&lt;/groupId&gt;\\n    &lt;artifactId&gt;jetty-maven-plugin&lt;/artifactId&gt;\\n    &lt;version&gt;${jetty-version}&lt;/version&gt;\\n    &lt;configuration&gt;\\n        &lt;httpConnector&gt;\\n            &lt;port&gt;8888&lt;/port&gt;\\n        &lt;/httpConnector&gt;\\n    &lt;/configuration&gt;\\n&lt;/plugin&gt;\\n</code></pre>\\n<br>\\n\\n<ul>\\n<li>jettyXml\\n可选项。这里可以配置你需要加载的jetty的xml文件，需要用逗号分开。</li>\\n</ul>\\n<p>示例：</p>\\n<pre><code>&lt;plugin&gt;\\n  &lt;groupId&gt;org.eclipse.jetty&lt;/groupId&gt;\\n  &lt;artifactId&gt;jetty-maven-plugin&lt;/artifactId&gt;\\n  &lt;version&gt;9.4.6.v20170531&lt;/version&gt;\\n  &lt;configuration&gt;\\n    &lt;jettyXml&gt;jetty.xml,jetty-ssl.xml,jetty-https.xml&lt;/jettyXml&gt;\\n  &lt;/configuration&gt;\\n&lt;/plugin&gt;\\n</code></pre>\\n<br>\\n\\n<ul>\\n<li>scanIntervalSeconds\\n扫描和检查webapp变更的时间间隔，这可以用来做自动的热部署。默认情况下为0，意思是不开启热部署，取一个大于1 的值就开启了热部署。</li>\\n</ul>\\n<br>\\n\\n<ul>\\n<li>reload\\n默认值是“automatic”，也就是自动的，只要你配置了一个非0的<code>scanIntervalSeconds</code>。你可以设置为“manual”，也就是手动的，这时你需要手动触发扫描，你得在插件运行的情况下在控制台键入一个换行键。这对于你在做一些重要的变更的时候比较有用。</li>\\n</ul>\\n<br>\\n\\n<ul>\\n<li>dumpOnStart\\n可选项。默认是false。如果为true，Jetty会在启动的时候转储出服务器结构。</li>\\n</ul>\\n<br>\\n\\n<blockquote>\\n<p><em>译者文外补充：后面的部分我感觉配置不上，也就不翻译了。</em></p>\\n</blockquote>\\n<ul>\\n<li>loginServices\\nOptional. A list of org.eclipse.jetty.security.LoginService implementations. Note that there is no default realm. If you use a realm in your web.xml you can specify a corresponding realm here. You could instead configure the login services in a jetty xml file and add its location to the jettyXml parameter.</li>\\n</ul>\\n<br>\\n\\n<ul>\\n<li><p>requestLog\\nOptional. An implementation of the org.eclipse.jetty.server.RequestLog request log interface. An implementation that respects the NCSA format is available as org.eclipse.jetty.server.NCSARequestLog. There are three other ways to configure the RequestLog:</p>\\n<ul>\\n<li>In a jetty xml config file, as specified in the jettyXml parameter.</li>\\n<li>In a context xml config file, as specified in the contextXml parameter.</li>\\n<li>In the webApp element.\\nSee Configuring Request Logs for more information.</li>\\n</ul>\\n</li>\\n</ul>\\n<br>\\n\\n<ul>\\n<li>server\\nOptional as of Jetty 9.3.1. This would configure an instance of the org.eclipse.jetty.server.Server for the plugin to use, however it is usually NOT necessary to configure this, as the plugin will automatically configure one for you. In particular, if you use the jettyXml element, then you generally DON’T want to define this element, as you are probably using the jettyXml file to configure up a Server with a special constructor argument, such as a custom threadpool. If you define both a server element AND use a jetty xml element which points to a config file that has a line like <Configure id=\\\"Server\\\" class=\\\"org.eclipse.jetty.server.Server\\\"> then the the xml configuration will override what you configure for the server in the pom.xml.</li>\\n</ul>\\n<br>\\n\\n<ul>\\n<li>stopPort\\nOptional. Port to listen on for stop commands. Useful to use in conjunction with the stop or run-forked goals.</li>\\n</ul>\\n<br>\\n\\n<ul>\\n<li>stopKey\\nOptional. Used in conjunction with stopPort for stopping jetty. Useful when used in conjunction with the stop or run-forked goals.</li>\\n</ul>\\n<br>\\n\\n<ul>\\n<li>systemProperties\\nOptional. Allows you to configure System properties for the execution of the plugin. For more information, see Setting System Properties.</li>\\n</ul>\\n<br>\\n\\n<ul>\\n<li>systemPropertiesFile\\nOptional. A file containing System properties to set for the execution of the plugin. By default, settings that you make here do not override any system properties already set on the command line, by the JVM, or in the POM via systemProperties. Read Setting System Properties for how to force overrides.</li>\\n</ul>\\n<br>\\n\\n<ul>\\n<li>skip\\nDefault is false. If true, the execution of the plugin exits. Same as setting the SystemProperty -Djetty.skip on the command line. This is most useful when configuring Jetty for execution during integration testing and you want to skip the tests.</li>\\n</ul>\\n<br>\\n\\n<ul>\\n<li>useProvidedScope\\nDefault value is false. If true, the dependencies with <scope>provided</scope> are placed onto the container classpath. Be aware that this is NOT the webapp classpath, as &quot;provided&quot; indicates that these dependencies would normally be expected to be provided by the container. You should very rarely ever need to use this. Instead, you should copy the provided dependencies as explicit dependencies of the plugin instead.</li>\\n</ul>\\n<br>\\n\\n<ul>\\n<li>excludedGoals\\nOptional. A list of Jetty plugin goal names that will cause the plugin to print an informative message and exit. Useful if you want to prevent users from executing goals that you know cannot work with your project.</li>\\n</ul>\\n<br>\\n\\n<hr>\\n<p><span id=\\\"233jetty-maven插件的文档扫描\\\"></span></p>\\n<h4 id=\\\"233、jetty-maven插件的文件扫描\\\">23.3、Jetty Maven插件的文件扫描</h4>\\n<p><a href=\\\"#top\\\">回到顶部</a></p>\\n<hr>\\n<p><span id=\\\"234jetty-jspc-maven插件\\\"></span></p>\\n<h4 id=\\\"234、jetty-jspc-maven插件\\\">23.4、Jetty Jspc Maven插件</h4>\\n<p><a href=\\\"#top\\\">回到顶部</a></p>\\n<hr>\\n\";","export default \"<h3 id=\\\"前言\\\">前言</h3>\\n<p>前一篇基本说了线程的基本概念和如何创建一个线程，以及非常基本的几个线程方法，接下来我们说说线程的前几个控制相关的方法，包括和暂停一个线程（PAUSE）、让暂停的线程恢复（RESUME）、让线程终止（STOP）</p>\\n<p>这篇我们但是这几个方法不能直接去用，因为这些方法都<strong>过期了</strong>！下面就着Java官方的文档解释，说说为什么过期这几个方法，以及贴出官方给的模板方法去实现这几个过期方法，具体的实现会在后面有例子</p>\\n<hr>\\n<h4 id=\\\"中断线程\\\">中断线程</h4>\\n<p>我们现在已经可以跑起来一个线程了，但是对于线程的控制力度还不够，我们希望在处理线程子任务的时候，碰到需要暂停任务的情况的时候，我们有能力马上就退出</p>\\n<p>但是停止线程的任务并不简单，总的来说，停止线程的方式有这么三种：</p>\\n<ul>\\n<li><strong>让run方法执行完</strong>，线程就停了</li>\\n<li><strong>使用stop方法</strong>，但是这个方法<strong>绝对不能够使用</strong>，因为不安全而被列为<strong>过期方法</strong></li>\\n<li><strong>使用interrupt方法去中断线程</strong></li>\\n</ul>\\n<p>这么看来，如果要在线程任务中间去停止线程，只能使用<strong>interrupt方法</strong>，但是这个方法也<strong>不是说停就停</strong>的</p>\\n<h5 id=\\\"interrupt\\\">interrupt()</h5>\\n<p>我们来看看方法的源码介绍，方法注释就不解释了，注释里主要说的是一些异常信息，其实这个方法的本质<strong>只是在当前线程中打了一个中断标志，并不是真正地停止线程！</strong>我们看看源码：</p>\\n<pre><code class=\\\"hljs language-java\\\"><span class=\\\"hljs-keyword\\\">public</span> <span class=\\\"hljs-keyword\\\">void</span> <span class=\\\"hljs-title function_\\\">interrupt</span><span class=\\\"hljs-params\\\">()</span> {\\n    <span class=\\\"hljs-keyword\\\">if</span> (<span class=\\\"hljs-built_in\\\">this</span> != Thread.currentThread())\\n        checkAccess();\\n\\n    <span class=\\\"hljs-keyword\\\">synchronized</span> (blockerLock) {\\n        <span class=\\\"hljs-type\\\">Interruptible</span> <span class=\\\"hljs-variable\\\">b</span> <span class=\\\"hljs-operator\\\">=</span> blocker;\\n        <span class=\\\"hljs-keyword\\\">if</span> (b != <span class=\\\"hljs-literal\\\">null</span>) {\\n            interrupt0();           <span class=\\\"hljs-comment\\\">// Just to set the interrupt flag</span>\\n            b.interrupt(<span class=\\\"hljs-built_in\\\">this</span>);\\n            <span class=\\\"hljs-keyword\\\">return</span>;\\n        }\\n    }\\n    interrupt0();\\n}\\n</code></pre>\\n<h5 id=\\\"判断线程中断\\\">判断线程中断</h5>\\n<p><strong>Thread类</strong>中有两个方法可以用于判断线程是否中断，分别是：</p>\\n<ol>\\n<li><strong>Thread.interrupted()：测试当前线程是否已经中断</strong></li>\\n<li><strong>this.isInterrupted()：测试线程是否已经中断</strong></li>\\n</ol>\\n<p>很明显，这两个方法是有区别的，区别就在于<strong>“当前线程”</strong>是谁了，当前线程指的是运行**Thread.interrupted()**方法的代码段所在的线程</p>\\n<p>我们看源码：</p>\\n<pre><code class=\\\"hljs language-java\\\"><span class=\\\"hljs-keyword\\\">public</span> <span class=\\\"hljs-keyword\\\">static</span> <span class=\\\"hljs-type\\\">boolean</span> <span class=\\\"hljs-title function_\\\">interrupted</span><span class=\\\"hljs-params\\\">()</span> {\\n    <span class=\\\"hljs-keyword\\\">return</span> currentThread().isInterrupted(<span class=\\\"hljs-literal\\\">true</span>);\\n}\\n<span class=\\\"hljs-keyword\\\">public</span> <span class=\\\"hljs-type\\\">boolean</span> <span class=\\\"hljs-title function_\\\">isInterrupted</span><span class=\\\"hljs-params\\\">()</span> {\\n    <span class=\\\"hljs-keyword\\\">return</span> isInterrupted(<span class=\\\"hljs-literal\\\">false</span>);\\n}\\n<span class=\\\"hljs-keyword\\\">private</span> <span class=\\\"hljs-keyword\\\">native</span> <span class=\\\"hljs-type\\\">boolean</span> <span class=\\\"hljs-title function_\\\">isInterrupted</span><span class=\\\"hljs-params\\\">(<span class=\\\"hljs-type\\\">boolean</span> ClearInterrupted)</span>;\\n</code></pre>\\n<p>可以看到，<strong>interrupted()<strong>其实也是调用的</strong>本地方法isInterrupted(boolean clearInterrupted)<strong>，而且是</strong>当前线程（currendThread）去调用</strong>，所以这个方法是静态方法，而**isInterrupted()<strong>同样也是调用</strong>本地方法isInterrupted(boolean clearInterrupted)**，只是这个调用是通过this去调用的</p>\\n<p>还需要注意的是，<strong>interrupted()会清楚中断标识，而isInterrupted()不会</strong></p>\\n<h5 id=\\\"有效中断的方法\\\">有效中断的方法</h5>\\n<p>前面我们说了，**interrupted()**方法只是设置中断flag，到底怎么真正停止线程呢？</p>\\n<p><strong>方法1：</strong></p>\\n<p>我们就可以使用上面的<strong>判断中断方法+程序流程设计</strong>去实行有效地中断</p>\\n<pre><code class=\\\"hljs language-java\\\"><span class=\\\"hljs-type\\\">int</span> <span class=\\\"hljs-variable\\\">i</span> <span class=\\\"hljs-operator\\\">=</span> <span class=\\\"hljs-number\\\">0</span>;\\n\\n<span class=\\\"hljs-meta\\\">@Test</span>\\n<span class=\\\"hljs-keyword\\\">public</span> <span class=\\\"hljs-keyword\\\">void</span> <span class=\\\"hljs-title function_\\\">testEffectedInterrupt</span><span class=\\\"hljs-params\\\">()</span> <span class=\\\"hljs-keyword\\\">throws</span> InterruptedException {\\n    <span class=\\\"hljs-type\\\">Runnable</span> <span class=\\\"hljs-variable\\\">run</span> <span class=\\\"hljs-operator\\\">=</span> () -&gt; {\\n        System.out.println(Thread.currentThread().getName());\\n        <span class=\\\"hljs-keyword\\\">while</span> (<span class=\\\"hljs-literal\\\">true</span>) {\\n            <span class=\\\"hljs-keyword\\\">if</span> (Thread.currentThread().isInterrupted()) {\\n                System.out.println(<span class=\\\"hljs-string\\\">&quot;interrupted!&quot;</span>);\\n                <span class=\\\"hljs-keyword\\\">break</span>;\\n            }\\n            System.out.println(Thread.currentThread().isInterrupted());\\n            System.out.println(i++);\\n        }\\n    };\\n    <span class=\\\"hljs-type\\\">Thread</span> <span class=\\\"hljs-variable\\\">t</span> <span class=\\\"hljs-operator\\\">=</span> <span class=\\\"hljs-keyword\\\">new</span> <span class=\\\"hljs-title class_\\\">Thread</span>(run, <span class=\\\"hljs-string\\\">&quot;runThread&quot;</span>);\\n    t.start();\\n    Thread.sleep(<span class=\\\"hljs-number\\\">10</span>);\\n    t.interrupt();\\n}\\n</code></pre>\\n<p><strong>runThread</strong>一直在跑，只不过在跑之前会判断一下自身线程的<strong>中断标志</strong>，如果被设置了<strong>中断标志</strong>，那while就break，也就是说方法已经执行完毕了，<strong>线程自然死亡</strong></p>\\n<p>当然这里是在main线程里面调用<strong>runThread</strong>的中断方法，<strong>runThread</strong>内部也可以不依靠中断方法去break语句，这里只是示例外部中断</p>\\n<p><strong>方法2：</strong></p>\\n<p>也许你可以使用<strong>interrupt()方法+return语句</strong>，和上面的break差不多骚，都是为了到达run方法的底部</p>\\n<blockquote>\\n<p>2018年7月9日 13点12分 补充如下：</p>\\n<p>我在Servlet中尝试使用interrupt()设置中断标识的方法去中断线程，但是很遗憾的是失败了，但是单独写在Main数中，或者在Android代码中去验证却是可以，不太清楚是不是Servlet对线程有什么影响，所以中断线程可以用官方给的模型去中断，即用一个volatile布尔变量去设置<code>run(){while()}</code>的run方法的while循环退出条件</p>\\n<p>搞懂为什么失败了，我在线程run方法中有<strong>Thread.sleep()<strong>方法，虽然我while循环最开始就有isInterrupt()方法做判断，但是大部分时间线程是在sleep()方法中的<code>TIMED_WAITING</code>状态下，在这个状态下使用interrupt()方法去中断线程会在sleep方法被调用处抛出<code>InterruptedException</code>异常，如果在catch语句中没有跳出循环的语句的话，下次while循环中的isInterrupt()仍然是false，因为一旦抛出<code>InterruptedException</code>异常就会</strong>清除线程的中断标志</strong></p>\\n<p>我们看看sleep的源码说明：</p>\\n<pre><code class=\\\"hljs language-java\\\">    <span class=\\\"hljs-comment\\\">/**\\n     * Causes the currently executing thread to sleep (temporarily cease\\n     * execution) for the specified number of milliseconds, subject to\\n     * the precision and accuracy of system timers and schedulers. The thread\\n     * does not lose ownership of any monitors.\\n     *\\n     * <span class=\\\"hljs-doctag\\\">@param</span>  millis\\n     *         the length of time to sleep in milliseconds\\n     *\\n     * <span class=\\\"hljs-doctag\\\">@throws</span>  IllegalArgumentException\\n     *          if the value of {<span class=\\\"hljs-doctag\\\">@code</span> millis} is negative\\n     *\\n     * <span class=\\\"hljs-doctag\\\">@throws</span>  InterruptedException\\n     *          if any thread has interrupted the current thread. The\\n     *          &lt;i&gt;interrupted status&lt;/i&gt; of the current thread is\\n     *          cleared when this exception is thrown.\\n     */</span>\\n    <span class=\\\"hljs-keyword\\\">public</span> <span class=\\\"hljs-keyword\\\">static</span> <span class=\\\"hljs-keyword\\\">native</span> <span class=\\\"hljs-keyword\\\">void</span> <span class=\\\"hljs-title function_\\\">sleep</span><span class=\\\"hljs-params\\\">(<span class=\\\"hljs-type\\\">long</span> millis)</span> <span class=\\\"hljs-keyword\\\">throws</span> InterruptedException;\\n</code></pre>\\n<p>之前实验的时候，使用到了sleep，使用interrupt怎么都测不到isInterrupted()为true，然后catch语句块里也没有做任何处理，所以线程始终无法停止，搞得我以为哪里出错了</p>\\n<p>关于怎么写stop、suspend、resume方法的代码贴在后面</p>\\n</blockquote>\\n<h5 id=\\\"关于stop强制停止\\\">关于stop()强制停止</h5>\\n<p>关于这个作废的方法，我们还是要说一下为什么这方法被作废了，当然最权威的介绍还是官方解释了*<a href=\\\"https://docs.oracle.com/javase/8/docs/technotes/guides/concurrency/threadPrimitiveDeprecation.html\\\">Why are Thread.stop, Thread.suspend and Thread.resume Deprecated?</a>*</p>\\n<p>官方给出的<strong>stop()过期解释</strong>：</p>\\n<blockquote>\\n<p>强制性地使用<strong>stop()<strong>方法会</strong>释放当前线程所持有的所有锁（监控器会因为ThreadDeath异常被抛到方法栈的最上层而解锁）</strong>，有的锁并不是我们期望释放掉的，所以这样会<strong>导致某些同步数据在并发且不完全锁上</strong>的情况下被修改，如果在这种<strong>状态</strong>不一致的情况下，事先有任何对象被这些监视器所保护着的话，其他的对象也会看到这些不一致的<strong>状态</strong>，我们可以认为，这些对象已经被<strong>破坏（damaged）</strong>了，再用这些对象去执行任务已经没有意义了</p>\\n<p>而且上述的影响很微妙，短时间内是无法检测出来的，因为不像其他<strong>非受检异常（unchecked exceptions）</strong>，<strong>ThreadDeath</strong>异常是一种<strong>静默异常</strong>，因此，如果程序因为这个异常而出错，用户通常是不会收到任何警告的，可能过个几个小时或者几天，程序才会因为最开始的<strong>强制停止</strong>所带来的长久影响而抛出某个业务中的异常</p>\\n</blockquote>\\n<p>官方解释中说明了，虽然从理论上，你可以抓取<strong>ThreadDeath</strong>异常去尝试修复被破坏的对象，<strong>但是这样的做法是不现实的：</strong>因为你需要非常严谨的逻辑去处理整个子任务，在这个严谨的过程中你还需要更严谨地去处理强制中断的破坏修复，这样的做法得不偿失，甚至代价超过任务本身，而且<strong>ThreadDeath</strong>这个异常在任何地方、任何时间都可以抛，你不确定这个异常是不是你想要的那个</p>\\n<p>最终官方给出了一个<strong>简单且有效</strong>的方法去实现线程停止：</p>\\n<pre><code class=\\\"hljs language-java\\\"><span class=\\\"hljs-keyword\\\">private</span> <span class=\\\"hljs-keyword\\\">volatile</span> Thread blinker;\\n\\n<span class=\\\"hljs-keyword\\\">public</span> <span class=\\\"hljs-keyword\\\">void</span> <span class=\\\"hljs-title function_\\\">stop</span><span class=\\\"hljs-params\\\">()</span> {\\n    blinker = <span class=\\\"hljs-literal\\\">null</span>;\\n}\\n\\n<span class=\\\"hljs-keyword\\\">public</span> <span class=\\\"hljs-keyword\\\">void</span> <span class=\\\"hljs-title function_\\\">run</span><span class=\\\"hljs-params\\\">()</span> {\\n    <span class=\\\"hljs-type\\\">Thread</span> <span class=\\\"hljs-variable\\\">thisThread</span> <span class=\\\"hljs-operator\\\">=</span> Thread.currentThread();\\n    <span class=\\\"hljs-keyword\\\">while</span> (blinker == thisThread) {\\n        <span class=\\\"hljs-keyword\\\">try</span> {\\n            Thread.sleep(interval);\\n        } <span class=\\\"hljs-keyword\\\">catch</span> (InterruptedException e){\\n        }\\n        repaint();\\n    }\\n}\\n</code></pre>\\n<p>如代码里面所示，线程一旦开启，就进入到<strong>run()<strong>方法的</strong>while循环</strong>里面，<strong>while循环</strong>退出的点是<strong>blinker等于当前线程</strong>的时候，我们只需要简单的<strong>在外部将这个同步变量置空</strong>，这样线程就会<strong>结束while循环——方法结束——退出线程</strong>，达到暂停线程的效果</p>\\n<p>但是这个方法还不够强，如果说，我们要让一个<strong>陷入长时间wait的线程（比方说在等待某个输入流）中断的话（陷入wait就意味着线程卡在某个代码段那不继续往下执行了，而是等着抢资源）</strong>这个时候你就别指望说线程会跑到<strong>line：9</strong>去判断了</p>\\n<p>所以这里就该是我们的<strong>interrupt()方法</strong>登场了~</p>\\n<p>官方称，<strong>interrupt()<strong>方法就是为了这一刻而诞生的，上述例子的</strong>blinker = null</strong>也是一种有效的<strong>“基于状态”的信号机制</strong>，**interrupt()**方法也差不多是这个概念，它甚至可以中断等待</p>\\n<pre><code class=\\\"hljs language-java\\\"><span class=\\\"hljs-keyword\\\">public</span> <span class=\\\"hljs-keyword\\\">void</span> <span class=\\\"hljs-title function_\\\">stop</span><span class=\\\"hljs-params\\\">()</span> {\\n    <span class=\\\"hljs-type\\\">Thread</span> <span class=\\\"hljs-variable\\\">moribund</span> <span class=\\\"hljs-operator\\\">=</span> waiter;\\n    waiter = <span class=\\\"hljs-literal\\\">null</span>;\\n    moribund.interrupt();\\n}\\n</code></pre>\\n<blockquote>\\n<p> 这个机制，对于在任何<strong>捕获到中断异常并且还没有准备好马上重新处理该异常</strong>的方法来说很重要，我们常说<strong>宁可处理掉这个新的异常也不要往上层抛这个异常</strong>，这样做回带来额外的麻烦</p>\\n<p>如果一个方法捕获到了<strong>没有声明过的中断异常</strong>，你应该让这个线程<strong>再中断它自己一次</strong></p>\\n<pre><code class=\\\"hljs language-java\\\">Thread.currentThread().interrupt();\\n</code></pre>\\n<p>以保证它尽可能及时地发出中断异常</p>\\n</blockquote>\\n<p>而在这节的最后，官方又提到了一个事情<em>“如果某个线程对<code>Thread.interrupt</code>没有反应怎么办？”</em></p>\\n<p>在某些情况下，你可能将程序设计得很独特。比如说一个线程正在等待一个已知的socket资源，这时候你可以关闭这个socket来让这个线程马上从等待中返回。非常不幸的是，目前（JDK 8）还没有能够解决这种情况的技术。而且一旦某个线程不响应<code>Thread.interrupt</code>，那么它们也绝对不会响应<code>Thread.stop</code>。</p>\\n<blockquote>\\n<p>Such cases include deliberate denial-of-service attacks, and I/O operations for which thread.stop and thread.interrupt do not work properly.</p>\\n</blockquote>\\n<h5 id=\\\"在sleep里中断线程\\\">在sleep()里中断线程</h5>\\n<p>没什么说的，<strong>sleep()<strong>的调用需要捕获中断异常，如果在</strong>sleep()<strong>的过程中中断异常的话，就会抛出</strong>中断异常</strong>，在<strong>catch语句块中处理中断的后续逻辑</strong>就好了，**<u>请一定要在catch块中做出中断处理！！！（原因见前一章的<a href=\\\"./bu9klx.html?hash=479c457a\\\">sleep的注意</a>）</u>**</p>\\n<h4 id=\\\"暂停恢复线程\\\">暂停/恢复线程</h4>\\n<p>同样的，因为不安全，**suspend()和resume()<strong>方法也都过期了，禁止使用，在和</strong>stop()**被过期的官方介绍中同样介绍了原因：</p>\\n<blockquote>\\n<p><strong>Thread.suspend</strong>方法有天生的死锁倾向</p>\\n<p>如果目标线程持有一个<strong>非常重要的系统资源的锁</strong>的时候，如果我们使用<strong>Thread.suspend</strong>去试图暂停这个线程的话，没有任何其它的线程可以访问到这个<strong>系统资源</strong>，除非再调用<strong>Thread.resume</strong>方法，线程执行完毕才有可能重新竞争这个资源</p>\\n<p>如果这个想要恢复已经暂停了的目标线程的线程<strong>试图要在监视器的锁内</strong>调用<strong>Thread.resume</strong>方法，这就是一个死锁，因为你把钥匙锁里面了</p>\\n<p>这种类型的死锁线程就是典型的<strong>“冻结”程序</strong></p>\\n</blockquote>\\n<p>官方也给出了安全实现暂停和恢复线程的示例：</p>\\n<p>比如说，你的应用程序中包含这个鼠标点击事件的事件处理器，这个处理器会触发一个叫<strong>blinker</strong>的线程</p>\\n<pre><code class=\\\"hljs language-java\\\"><span class=\\\"hljs-keyword\\\">private</span> <span class=\\\"hljs-type\\\">boolean</span> threadSuspended;\\n\\nPublic <span class=\\\"hljs-keyword\\\">void</span> <span class=\\\"hljs-title function_\\\">mousePressed</span><span class=\\\"hljs-params\\\">(MouseEvent e)</span> {\\n    e.consume();\\n\\n    <span class=\\\"hljs-keyword\\\">if</span> (threadSuspended)\\n        blinker.resume();\\n    <span class=\\\"hljs-keyword\\\">else</span>\\n        blinker.suspend();  <span class=\\\"hljs-comment\\\">// DEADLOCK-PRONE!</span>\\n\\n    threadSuspended = !threadSuspended;\\n}\\n</code></pre>\\n<p>上面这样的程序就会出现死锁倾向，<strong>自己暂停自己，自己又怎么能恢复自己呢？</strong>所以官方给出的解决代码是</p>\\n<h5 id=\\\"官方恢复代码\\\">官方“恢复”代码</h5>\\n<pre><code class=\\\"hljs language-java\\\"><span class=\\\"hljs-keyword\\\">public</span> <span class=\\\"hljs-keyword\\\">synchronized</span> <span class=\\\"hljs-keyword\\\">void</span> <span class=\\\"hljs-title function_\\\">mousePressed</span><span class=\\\"hljs-params\\\">(MouseEvent e)</span> {\\n    e.consume();\\n\\n    threadSuspended = !threadSuspended;\\n\\n    <span class=\\\"hljs-keyword\\\">if</span> (!threadSuspended)\\n        notify();\\n}\\n</code></pre>\\n<p>然后在线程的run循环里面加上：</p>\\n<pre><code class=\\\"hljs language-java\\\"><span class=\\\"hljs-keyword\\\">synchronized</span>(<span class=\\\"hljs-built_in\\\">this</span>) {\\n    <span class=\\\"hljs-keyword\\\">while</span> (threadSuspended)\\n        wait();\\n}\\n</code></pre>\\n<p>因为<strong>wait()<strong>方法会抛出</strong>中断异常</strong>，所以得包在try-catch语句中，你不妨在这里顺便睡上一小段时间，给程序一些缓冲时间好让线程在<strong>“恢复”</strong>之后可以马上执行<strong>repaint()方法（这里的repaint方法代表恢复之后要做的事情）</strong></p>\\n<pre><code class=\\\"hljs language-java\\\"><span class=\\\"hljs-keyword\\\">public</span> <span class=\\\"hljs-keyword\\\">void</span> <span class=\\\"hljs-title function_\\\">run</span><span class=\\\"hljs-params\\\">()</span> {\\n    <span class=\\\"hljs-keyword\\\">while</span> (<span class=\\\"hljs-literal\\\">true</span>) {\\n        <span class=\\\"hljs-keyword\\\">try</span> {\\n            Thread.sleep(interval);\\n            <span class=\\\"hljs-keyword\\\">synchronized</span>(<span class=\\\"hljs-built_in\\\">this</span>) {\\n                <span class=\\\"hljs-keyword\\\">while</span> (threadSuspended)\\n                    wait();\\n            }\\n        } <span class=\\\"hljs-keyword\\\">catch</span> (InterruptedException e){\\n        }\\n        repaint();\\n    }\\n}\\n</code></pre>\\n<p>特别注意到：<strong>notify()和wait()<strong>方法都被包在</strong>同步块（synchronized block）</strong>中，这是Java语法要求这么做的，以保证这两个方法是<strong>绝对串行</strong>地工作，然而，保证同步的代价确实有点大，为了减小同步带来的代价，我们可以简单的用一些伎俩去优化上述的两段代码，这个伎俩也很简单，在进<strong>同步块</strong>之前，先判断一次<strong>threadSuspended</strong></p>\\n<pre><code class=\\\"hljs language-java\\\"><span class=\\\"hljs-keyword\\\">if</span> (threadSuspended) {\\n    <span class=\\\"hljs-keyword\\\">synchronized</span>(<span class=\\\"hljs-built_in\\\">this</span>) {\\n        <span class=\\\"hljs-keyword\\\">while</span> (threadSuspended)\\n            wait();\\n    }\\n}\\n</code></pre>\\n<p>这样一来，我们得保证<strong>threadSuspended</strong>也得是<strong>线程安全</strong>的，我们可以用<strong>volatile</strong>关键字去修饰它</p>\\n<h5 id=\\\"官方暂停代码\\\">官方”暂停“代码</h5>\\n<pre><code class=\\\"hljs language-java\\\"><span class=\\\"hljs-keyword\\\">private</span> <span class=\\\"hljs-keyword\\\">volatile</span> <span class=\\\"hljs-type\\\">boolean</span> threadSuspended;\\n\\n<span class=\\\"hljs-keyword\\\">public</span> <span class=\\\"hljs-keyword\\\">void</span> <span class=\\\"hljs-title function_\\\">run</span><span class=\\\"hljs-params\\\">()</span> {\\n    <span class=\\\"hljs-keyword\\\">while</span> (<span class=\\\"hljs-literal\\\">true</span>) {\\n        <span class=\\\"hljs-keyword\\\">try</span> {\\n            Thread.sleep(interval);\\n\\n            <span class=\\\"hljs-keyword\\\">if</span> (threadSuspended) {\\n                <span class=\\\"hljs-keyword\\\">synchronized</span>(<span class=\\\"hljs-built_in\\\">this</span>) {\\n                    <span class=\\\"hljs-keyword\\\">while</span> (threadSuspended)\\n                        wait();\\n                }\\n            }\\n        } <span class=\\\"hljs-keyword\\\">catch</span> (InterruptedException e){\\n        }\\n        repaint();\\n    }\\n}\\n</code></pre>\\n<h4 id=\\\"实例\\\">实例</h4>\\n<p>为了有多线程效果，把例子装在了servlet中用网页请求去运行</p>\\n<pre><code class=\\\"hljs language-java\\\"><span class=\\\"hljs-keyword\\\">package</span> mythread;\\n\\n<span class=\\\"hljs-keyword\\\">import</span> java.io.IOException;\\n<span class=\\\"hljs-keyword\\\">import</span> javax.servlet.ServletException;\\n<span class=\\\"hljs-keyword\\\">import</span> javax.servlet.annotation.WebServlet;\\n<span class=\\\"hljs-keyword\\\">import</span> javax.servlet.http.HttpServlet;\\n<span class=\\\"hljs-keyword\\\">import</span> javax.servlet.http.HttpServletRequest;\\n<span class=\\\"hljs-keyword\\\">import</span> javax.servlet.http.HttpServletResponse;\\n\\n<span class=\\\"hljs-meta\\\">@WebServlet(&quot;/xixi&quot;)</span>\\n<span class=\\\"hljs-keyword\\\">public</span> <span class=\\\"hljs-keyword\\\">class</span> <span class=\\\"hljs-title class_\\\">AThreadTest</span> <span class=\\\"hljs-keyword\\\">extends</span> <span class=\\\"hljs-title class_\\\">HttpServlet</span> {\\n    \\n    <span class=\\\"hljs-keyword\\\">private</span> <span class=\\\"hljs-keyword\\\">static</span> Thread timer;\\n    <span class=\\\"hljs-keyword\\\">private</span> <span class=\\\"hljs-keyword\\\">volatile</span> <span class=\\\"hljs-type\\\">boolean</span> <span class=\\\"hljs-variable\\\">stoped</span> <span class=\\\"hljs-operator\\\">=</span> <span class=\\\"hljs-literal\\\">false</span>;\\n    <span class=\\\"hljs-keyword\\\">private</span> <span class=\\\"hljs-keyword\\\">volatile</span> <span class=\\\"hljs-type\\\">boolean</span> <span class=\\\"hljs-variable\\\">suspended</span> <span class=\\\"hljs-operator\\\">=</span> <span class=\\\"hljs-literal\\\">false</span>;\\n    \\n    <span class=\\\"hljs-meta\\\">@Override</span>\\n    <span class=\\\"hljs-keyword\\\">public</span> <span class=\\\"hljs-keyword\\\">void</span> <span class=\\\"hljs-title function_\\\">init</span><span class=\\\"hljs-params\\\">()</span> <span class=\\\"hljs-keyword\\\">throws</span> ServletException {\\n        timer = <span class=\\\"hljs-keyword\\\">new</span> <span class=\\\"hljs-title class_\\\">Thread</span>() {\\n            <span class=\\\"hljs-keyword\\\">private</span> <span class=\\\"hljs-type\\\">int</span> <span class=\\\"hljs-variable\\\">count</span> <span class=\\\"hljs-operator\\\">=</span> <span class=\\\"hljs-number\\\">0</span>;\\n            \\n            <span class=\\\"hljs-meta\\\">@Override</span>\\n            <span class=\\\"hljs-keyword\\\">public</span> <span class=\\\"hljs-keyword\\\">void</span> <span class=\\\"hljs-title function_\\\">run</span><span class=\\\"hljs-params\\\">()</span> {\\n                <span class=\\\"hljs-keyword\\\">if</span> (!timer.getName().equals(<span class=\\\"hljs-string\\\">&quot;Timer&quot;</span>)) {                    \\n                    timer.setName(<span class=\\\"hljs-string\\\">&quot;Timer&quot;</span>);\\n                }\\n                System.out.println(Thread.currentThread() + <span class=\\\"hljs-string\\\">&quot; started&quot;</span>);\\n                <span class=\\\"hljs-keyword\\\">while</span> (!stoped) {\\n                    <span class=\\\"hljs-keyword\\\">if</span> (timer.isInterrupted()) {\\n                        System.out.println(<span class=\\\"hljs-string\\\">&quot;interrupted break&quot;</span>);\\n                        <span class=\\\"hljs-keyword\\\">break</span>;\\n                    }\\n                    <span class=\\\"hljs-keyword\\\">try</span> {\\n                        <span class=\\\"hljs-keyword\\\">if</span> (!stoped && !suspended) {\\n                            count += <span class=\\\"hljs-number\\\">1</span>;\\n                            System.out.println(Thread.currentThread() +  <span class=\\\"hljs-string\\\">&quot; &quot;</span> + count);\\n                            <span class=\\\"hljs-keyword\\\">if</span> (suspended) {\\n                                <span class=\\\"hljs-keyword\\\">synchronized</span> (timer) {\\n                                    <span class=\\\"hljs-keyword\\\">while</span> (suspended) {\\n                                        timer.wait();\\n                                    }\\n                                }                                                            \\n                            }\\n                        }\\n                        Thread.sleep(<span class=\\\"hljs-number\\\">1000</span>);\\n                    } <span class=\\\"hljs-keyword\\\">catch</span> (Exception e) {\\n                        System.out.println(<span class=\\\"hljs-string\\\">&quot;exception because the interrupt when thread was in sleeping&quot;</span>);\\n                        <span class=\\\"hljs-keyword\\\">return</span>;\\n                    }\\n                }\\n            }\\n        };\\n    }\\n\\n    <span class=\\\"hljs-keyword\\\">protected</span> <span class=\\\"hljs-keyword\\\">void</span> <span class=\\\"hljs-title function_\\\">doGet</span><span class=\\\"hljs-params\\\">(HttpServletRequest request, HttpServletResponse response)</span> <span class=\\\"hljs-keyword\\\">throws</span> ServletException, IOException {\\n        <span class=\\\"hljs-type\\\">String</span> <span class=\\\"hljs-variable\\\">act</span> <span class=\\\"hljs-operator\\\">=</span> request.getParameter(<span class=\\\"hljs-string\\\">&quot;act&quot;</span>);\\n        <span class=\\\"hljs-keyword\\\">switch</span> (act) {\\n        <span class=\\\"hljs-keyword\\\">case</span> <span class=\\\"hljs-string\\\">&quot;start&quot;</span>:\\n            <span class=\\\"hljs-keyword\\\">if</span> (timer == <span class=\\\"hljs-literal\\\">null</span>) {\\n                init();\\n            }\\n            timer.start();\\n            <span class=\\\"hljs-keyword\\\">break</span>;\\n        <span class=\\\"hljs-keyword\\\">case</span> <span class=\\\"hljs-string\\\">&quot;stop&quot;</span>:\\n            stop();\\n            <span class=\\\"hljs-keyword\\\">break</span>;\\n        <span class=\\\"hljs-keyword\\\">case</span> <span class=\\\"hljs-string\\\">&quot;pause&quot;</span>:\\n            pause();\\n            <span class=\\\"hljs-keyword\\\">break</span>;\\n        <span class=\\\"hljs-keyword\\\">case</span> <span class=\\\"hljs-string\\\">&quot;resume&quot;</span>:\\n            resume();\\n            <span class=\\\"hljs-keyword\\\">break</span>;\\n        <span class=\\\"hljs-keyword\\\">case</span> <span class=\\\"hljs-string\\\">&quot;state&quot;</span>:\\n            state();\\n            <span class=\\\"hljs-keyword\\\">break</span>;\\n        <span class=\\\"hljs-keyword\\\">default</span>:\\n            <span class=\\\"hljs-keyword\\\">break</span>;\\n        }\\n        response.sendRedirect(<span class=\\\"hljs-string\\\">&quot;/Learning_zoom&quot;</span>);\\n    }\\n\\n    <span class=\\\"hljs-keyword\\\">public</span> <span class=\\\"hljs-keyword\\\">void</span> <span class=\\\"hljs-title function_\\\">stop</span><span class=\\\"hljs-params\\\">()</span> {\\n        timer.interrupt();\\n<span class=\\\"hljs-comment\\\">//        stoped = true;</span>\\n        System.out.println(<span class=\\\"hljs-string\\\">&quot;stop&quot;</span>);\\n    }\\n    \\n    <span class=\\\"hljs-keyword\\\">public</span> <span class=\\\"hljs-keyword\\\">void</span> <span class=\\\"hljs-title function_\\\">pause</span><span class=\\\"hljs-params\\\">()</span> {\\n        suspended = <span class=\\\"hljs-literal\\\">true</span>;\\n        System.out.println(<span class=\\\"hljs-string\\\">&quot;pause&quot;</span>);\\n    }\\n    \\n    <span class=\\\"hljs-keyword\\\">public</span> <span class=\\\"hljs-keyword\\\">void</span> <span class=\\\"hljs-title function_\\\">resume</span><span class=\\\"hljs-params\\\">()</span> {\\n        suspended = <span class=\\\"hljs-literal\\\">false</span>;\\n        <span class=\\\"hljs-keyword\\\">if</span> (!suspended) {\\n            <span class=\\\"hljs-keyword\\\">synchronized</span> (timer) {\\n                timer.notify();\\n                System.out.println(<span class=\\\"hljs-string\\\">&quot;resume&quot;</span>);\\n            }\\n        }\\n    }\\n    \\n    <span class=\\\"hljs-keyword\\\">public</span> <span class=\\\"hljs-keyword\\\">void</span> <span class=\\\"hljs-title function_\\\">state</span><span class=\\\"hljs-params\\\">()</span> {\\n        System.out.print(<span class=\\\"hljs-string\\\">&quot;status: &quot;</span>);\\n        <span class=\\\"hljs-keyword\\\">if</span> (timer == <span class=\\\"hljs-literal\\\">null</span>) {\\n            System.out.println(<span class=\\\"hljs-string\\\">&quot;null&quot;</span>);\\n        } <span class=\\\"hljs-keyword\\\">else</span> {            \\n            System.out.println(timer.getState());            \\n        }\\n    }\\n    \\n}\\n</code></pre>\\n<p>网页如下，线程过程中顺便还可以监控线程的状态</p>\\n<pre><code class=\\\"hljs language-html\\\"><span class=\\\"hljs-meta\\\">&lt;!DOCTYPE <span class=\\\"hljs-keyword\\\">html</span> <span class=\\\"hljs-keyword\\\">PUBLIC</span> <span class=\\\"hljs-string\\\">&quot;-//W3C//DTD HTML 4.01 Transitional//EN&quot;</span> <span class=\\\"hljs-string\\\">&quot;http://www.w3.org/TR/html4/loose.dtd&quot;</span>&gt;</span>\\n<span class=\\\"hljs-tag\\\">&lt;<span class=\\\"hljs-name\\\">html</span>&gt;</span>\\n<span class=\\\"hljs-tag\\\">&lt;<span class=\\\"hljs-name\\\">head</span>&gt;</span>\\n<span class=\\\"hljs-tag\\\">&lt;<span class=\\\"hljs-name\\\">meta</span> <span class=\\\"hljs-attr\\\">http-equiv</span>=<span class=\\\"hljs-string\\\">&quot;Content-Type&quot;</span> <span class=\\\"hljs-attr\\\">content</span>=<span class=\\\"hljs-string\\\">&quot;text/html; charset=UTF-8&quot;</span>&gt;</span>\\n<span class=\\\"hljs-tag\\\">&lt;<span class=\\\"hljs-name\\\">title</span>&gt;</span>Insert title here<span class=\\\"hljs-tag\\\">&lt;/<span class=\\\"hljs-name\\\">title</span>&gt;</span>\\n<span class=\\\"hljs-tag\\\">&lt;/<span class=\\\"hljs-name\\\">head</span>&gt;</span>\\n<span class=\\\"hljs-tag\\\">&lt;<span class=\\\"hljs-name\\\">body</span>&gt;</span>\\n\\nHelloWorld!\\n\\n<span class=\\\"hljs-tag\\\">&lt;<span class=\\\"hljs-name\\\">hr</span>&gt;</span>\\nTimer Test<span class=\\\"hljs-tag\\\">&lt;<span class=\\\"hljs-name\\\">br</span>&gt;</span>\\n\\n    <span class=\\\"hljs-tag\\\">&lt;<span class=\\\"hljs-name\\\">a</span> <span class=\\\"hljs-attr\\\">href</span>=<span class=\\\"hljs-string\\\">&quot;http://localhost:8080/Learning_zoom/xixi?act=start&quot;</span>&gt;</span>Start<span class=\\\"hljs-tag\\\">&lt;/<span class=\\\"hljs-name\\\">a</span>&gt;</span><span class=\\\"hljs-tag\\\">&lt;<span class=\\\"hljs-name\\\">br</span>&gt;</span>\\n    <span class=\\\"hljs-tag\\\">&lt;<span class=\\\"hljs-name\\\">a</span> <span class=\\\"hljs-attr\\\">href</span>=<span class=\\\"hljs-string\\\">&quot;http://localhost:8080/Learning_zoom/xixi?act=stop&quot;</span>&gt;</span>Stop<span class=\\\"hljs-tag\\\">&lt;/<span class=\\\"hljs-name\\\">a</span>&gt;</span><span class=\\\"hljs-tag\\\">&lt;<span class=\\\"hljs-name\\\">br</span>&gt;</span>\\n    <span class=\\\"hljs-tag\\\">&lt;<span class=\\\"hljs-name\\\">a</span> <span class=\\\"hljs-attr\\\">href</span>=<span class=\\\"hljs-string\\\">&quot;http://localhost:8080/Learning_zoom/xixi?act=pause&quot;</span>&gt;</span>Pause<span class=\\\"hljs-tag\\\">&lt;/<span class=\\\"hljs-name\\\">a</span>&gt;</span><span class=\\\"hljs-tag\\\">&lt;<span class=\\\"hljs-name\\\">br</span>&gt;</span>\\n    <span class=\\\"hljs-tag\\\">&lt;<span class=\\\"hljs-name\\\">a</span> <span class=\\\"hljs-attr\\\">href</span>=<span class=\\\"hljs-string\\\">&quot;http://localhost:8080/Learning_zoom/xixi?act=resume&quot;</span>&gt;</span>Resume<span class=\\\"hljs-tag\\\">&lt;/<span class=\\\"hljs-name\\\">a</span>&gt;</span><span class=\\\"hljs-tag\\\">&lt;<span class=\\\"hljs-name\\\">br</span>&gt;</span>\\n    <span class=\\\"hljs-tag\\\">&lt;<span class=\\\"hljs-name\\\">a</span> <span class=\\\"hljs-attr\\\">href</span>=<span class=\\\"hljs-string\\\">&quot;http://localhost:8080/Learning_zoom/xixi?act=state&quot;</span>&gt;</span>State<span class=\\\"hljs-tag\\\">&lt;/<span class=\\\"hljs-name\\\">a</span>&gt;</span><span class=\\\"hljs-tag\\\">&lt;<span class=\\\"hljs-name\\\">br</span>&gt;</span>\\n\\n<span class=\\\"hljs-tag\\\">&lt;<span class=\\\"hljs-name\\\">hr</span>&gt;</span>\\n\\n<span class=\\\"hljs-tag\\\">&lt;/<span class=\\\"hljs-name\\\">body</span>&gt;</span>\\n<span class=\\\"hljs-tag\\\">&lt;/<span class=\\\"hljs-name\\\">html</span>&gt;</span>\\n</code></pre>\\n<p>上面的例子中对于暂停的做法有三个处理，因为有45行的sleep代码，所以线程大多数时候都是处于sleep状态，这时候你想要用中断标志去停止线程是有点不太可能，所以我们需要在catch块中对sleep中断错误的处理进行停止的逻辑，比如可以直接return</p>\\n<p>如果想要看中断标志去停止线程的效果，可以把45行的sleep注掉，然后就可以看到用29-32行的那种中断标志+break的方式去中断了，当然你可能还会注意到还有一个volatile变量：stoped</p>\\n<p>你可以把84行的注释打开，这样可以用和暂停一样的思想去做中断，效果也是一样的</p>\\n<hr>\\n<p>好了<strong>第二坎</strong>就到这啦，神兵利器已经准备好啦！开始修炼内功！</p>\\n\";","export default \"<h3 id=\\\"前言\\\">前言</h3>\\n<p>2月份的时候，疫情原因，学校实验室和学院要开发一款帮助小区居民批量采购的小程序，实验室团队人手不足，说是少后台开发，所以我就上了，看着微信的文档还有学长的帮助，也就吭哧吭哧写上线了</p>\\n<h3 id=\\\"操作流程\\\">操作流程</h3>\\n<p><img src=\\\"https://pay.weixin.qq.com/wiki/doc/api/img/wxa-7-2.jpg\\\" alt=\\\"小程序支付时序图\\\"></p>\\n<p style=\\\"text-align: center;\\\">图源：<a href=\\\"https://pay.weixin.qq.com/wiki/doc/api/wxa/wxa_api.php?chapter=7_4&index=3\\\" target=\\\"_blank\\\">微信文档</a></p>\\n这个图其实过于细分，有的步骤可以简化：openId不必由**商户后台**发送请求来获取，**小程序方**可以直接发送openId过来。\\n\\n<ol>\\n<li><strong>用户</strong>通过<strong>小程序</strong>发送<strong>“请求下单”</strong>的请求到<strong>商户后台</strong>；</li>\\n<li><strong>商户后台</strong>调用微信官方依赖提供的接口，发送请求到<strong>微信后台</strong>（统一下单API），获取<code>prepay_id</code>；</li>\\n<li><strong>商户后台</strong>生成签名，返回5个参数和sign；</li>\\n<li><strong>小程序</strong>获取到正常的5个参数和sign之后，调用JS的SDK中的支付API，<strong>用户</strong>界面拉起支付，支付成功；</li>\\n</ol>\\n<p>这个图展示的部分就这么多，但是我们还需要操作后续的业务，就是用户在<strong>小程序</strong>支付之后，发送一个请求把支付结果告诉到<strong>商户后台</strong>，这样<strong>商户后台</strong>才能够即使回写这个订单的支付状态到商户自己的数据库中，虽然<strong>微信后台</strong>会推送支付结果给<strong>商户后台</strong>，但是微信<a href=\\\"https://pay.weixin.qq.com/wiki/doc/api/wxa/wxa_api.php?chapter=9_7\\\">不保证及时性以及请求必达</a>，所以我们需要靠自己强制回写。</p>\\n<ol start=\\\"5\\\">\\n<li>支付成功/失败后，<strong>小程序</strong>都需要强制发送支付结果到<strong>商户后台</strong>；</li>\\n<li><strong>商户后台</strong>处理支付结果，回写到数据库；</li>\\n</ol>\\n<h3 id=\\\"后端\\\">后端</h3>\\n<p>后端项目参考：</p>\\n<h4 id=\\\"前置参考\\\">前置参考</h4>\\n<ul>\\n<li><a href=\\\"https://pay.weixin.qq.com/wiki/doc/api/wxa/wxa_api.php?chapter=9_1\\\">请求参数参考</a></li>\\n<li><a href=\\\"https://github.com/Wechat-Group/WxJava/wiki/%E5%BE%AE%E4%BF%A1%E6%94%AF%E4%BB%98\\\">代码参考</a></li>\\n<li><a href=\\\"https://github.com/binarywang/weixin-java-pay-demo/blob/5ea0ad02efb734751dce18eee35817af82c3ee13/src/main/java/com/github/binarywang/demo/wx/pay/controller/WxPayController.java#L106\\\">官方Demo</a></li>\\n<li><a href=\\\"https://pay.weixin.qq.com/wiki/doc/api/wxa/wxa_api.php?chapter=7_7&index=5\\\">签名方式</a></li>\\n</ul>\\n<h4 id=\\\"自己的实现\\\">自己的实现</h4>\\n<h5 id=\\\"获取5个参数和sign\\\">获取5个参数和sign</h5>\\n<p>下面这个接口完成了流程的2和3：</p>\\n<pre><code class=\\\"hljs language-java\\\"><span class=\\\"hljs-meta\\\">@PostMapping(&quot;/unifiedOrder&quot;)</span>\\n<span class=\\\"hljs-meta\\\">@ResponseBody</span>\\n<span class=\\\"hljs-keyword\\\">public</span> Object <span class=\\\"hljs-title function_\\\">unifiedOrder</span><span class=\\\"hljs-params\\\">(<span class=\\\"hljs-meta\\\">@RequestBody</span> WxPayUnifiedOrderRequest request, HttpServletRequest realReq)</span> {\\n    request.setAppid(WeChatConfigParam.WX_LOGIN_APPID);\\n    request.setMchId(WeChatConfigParam.WX_PAY_MCHID);\\n    request.setBody(WeChatConfigParam.WX_PAY_BODY);\\n    request.setTradeType(WeChatConfigParam.WX_PAY_TRADE_TYPE);\\n    request.setNotifyUrl(WeChatConfigParam.WX_PAY_NOTIFY_URL);\\n    request.setSpbillCreateIp(IpUtil.getIpAddr(realReq));\\n\\n    Map&lt;String, String&gt; result = <span class=\\\"hljs-keyword\\\">new</span> <span class=\\\"hljs-title class_\\\">HashMap</span>&lt;&gt;(<span class=\\\"hljs-number\\\">8</span>);\\n    <span class=\\\"hljs-comment\\\">// 获取 prepay_id</span>\\n    <span class=\\\"hljs-type\\\">WxPayUnifiedOrderResult</span> <span class=\\\"hljs-variable\\\">wxPayUnifiedOrderResult</span> <span class=\\\"hljs-operator\\\">=</span> <span class=\\\"hljs-literal\\\">null</span>;\\n    <span class=\\\"hljs-keyword\\\">try</span> {\\n        wxPayUnifiedOrderResult = <span class=\\\"hljs-built_in\\\">this</span>.wxService.unifiedOr1zzder(request);\\n        result.put(<span class=\\\"hljs-string\\\">&quot;returnCode&quot;</span>, wxPayUnifiedOrderResult.getReturnCode());\\n        result.put(<span class=\\\"hljs-string\\\">&quot;returnMsg&quot;</span>, wxPayUnifiedOrderResult.getReturnMsg());\\n        <span class=\\\"hljs-keyword\\\">if</span> (wxPayUnifiedOrderResult.getReturnCode().equalsIgnoreCase(WeChatConfigParam.WX_PAY_SUCCESS_FLAG) &&\\n                wxPayUnifiedOrderResult.getResultCode().equalsIgnoreCase(WeChatConfigParam.WX_PAY_SUCCESS_FLAG)) {\\n            <span class=\\\"hljs-comment\\\">// 利用prepay_id 签MD5</span>\\n            <span class=\\\"hljs-type\\\">String</span> <span class=\\\"hljs-variable\\\">key</span> <span class=\\\"hljs-operator\\\">=</span> WeChatConfigParam.WX_PAY_MCHKEY;\\n            <span class=\\\"hljs-type\\\">String</span> <span class=\\\"hljs-variable\\\">appId</span> <span class=\\\"hljs-operator\\\">=</span> WeChatConfigParam.WX_LOGIN_APPID;\\n            <span class=\\\"hljs-type\\\">long</span> <span class=\\\"hljs-variable\\\">timeStamp</span> <span class=\\\"hljs-operator\\\">=</span> System.currentTimeMillis() / <span class=\\\"hljs-number\\\">1000</span>;\\n            <span class=\\\"hljs-type\\\">String</span> <span class=\\\"hljs-variable\\\">nonceStr</span> <span class=\\\"hljs-operator\\\">=</span> DigestUtils.md5Hex(UUID.randomUUID().toString());\\n            <span class=\\\"hljs-type\\\">String</span> <span class=\\\"hljs-variable\\\">packageStr</span> <span class=\\\"hljs-operator\\\">=</span> <span class=\\\"hljs-string\\\">&quot;prepay_id=&quot;</span> + wxPayUnifiedOrderResult.getPrepayId();\\n            <span class=\\\"hljs-type\\\">String</span> <span class=\\\"hljs-variable\\\">sign</span> <span class=\\\"hljs-operator\\\">=</span> DigestUtils.md5Hex(<span class=\\\"hljs-string\\\">&quot;appId=&quot;</span> + appId + <span class=\\\"hljs-string\\\">&quot;&nonceStr=&quot;</span> + nonceStr + <span class=\\\"hljs-string\\\">&quot;&package=&quot;</span> + packageStr + <span class=\\\"hljs-string\\\">&quot;&signType=MD5&timeStamp=&quot;</span> + timeStamp + <span class=\\\"hljs-string\\\">&quot;&key=&quot;</span> + key);\\n            result.put(<span class=\\\"hljs-string\\\">&quot;appId&quot;</span>, appId);\\n            result.put(<span class=\\\"hljs-string\\\">&quot;timeStamp&quot;</span>, timeStamp + <span class=\\\"hljs-string\\\">&quot;&quot;</span>);\\n            result.put(<span class=\\\"hljs-string\\\">&quot;nonceStr&quot;</span>, nonceStr);\\n            result.put(<span class=\\\"hljs-string\\\">&quot;package&quot;</span>, packageStr);\\n            result.put(<span class=\\\"hljs-string\\\">&quot;signType&quot;</span>, <span class=\\\"hljs-string\\\">&quot;MD5&quot;</span>);\\n            result.put(<span class=\\\"hljs-string\\\">&quot;paySign&quot;</span>, sign);\\n        }\\n        result.put(<span class=\\\"hljs-string\\\">&quot;resultCode&quot;</span>, wxPayUnifiedOrderResult.getResultCode());\\n    } <span class=\\\"hljs-keyword\\\">catch</span> (WxPayException e) {\\n        result.put(<span class=\\\"hljs-string\\\">&quot;returnCode&quot;</span>, e.getReturnCode());\\n        result.put(<span class=\\\"hljs-string\\\">&quot;returnMsg&quot;</span>, e.getReturnMsg());\\n        result.put(<span class=\\\"hljs-string\\\">&quot;resultCode&quot;</span>, e.getResultCode());\\n        result.put(<span class=\\\"hljs-string\\\">&quot;errCode&quot;</span>, e.getErrCode());\\n        result.put(<span class=\\\"hljs-string\\\">&quot;errCodeDes&quot;</span>, e.getErrCodeDes());\\n    }\\n\\n    <span class=\\\"hljs-comment\\\">// 直接返回result给前端 前端根据result直接调起支付API</span>\\n    <span class=\\\"hljs-keyword\\\">return</span> result;\\n}\\n</code></pre>\\n<p>这里需要和前端约定好，前端发送请求的时候只需要带上3个参数：</p>\\n<pre><code class=\\\"hljs language-json\\\"><span class=\\\"hljs-punctuation\\\">{</span>\\n    “outTradeNo”<span class=\\\"hljs-punctuation\\\">:</span> <span class=\\\"hljs-string\\\">&quot;xxxxx&quot;</span><span class=\\\"hljs-punctuation\\\">,</span>\\n    <span class=\\\"hljs-attr\\\">&quot;openId&quot;</span><span class=\\\"hljs-punctuation\\\">:</span> <span class=\\\"hljs-string\\\">&quot;xxxxx&quot;</span><span class=\\\"hljs-punctuation\\\">,</span>\\n    <span class=\\\"hljs-attr\\\">&quot;totalFee&quot;</span><span class=\\\"hljs-punctuation\\\">:</span> <span class=\\\"hljs-number\\\">1000</span>\\n<span class=\\\"hljs-punctuation\\\">}</span>\\n</code></pre>\\n<h5 id=\\\"主动查询支付结果并回写\\\">主动查询支付结果并回写</h5>\\n<pre><code class=\\\"hljs language-java\\\"><span class=\\\"hljs-meta\\\">@GetMapping(&quot;/checkOrderPaymentState&quot;)</span>\\n<span class=\\\"hljs-meta\\\">@ResponseBody</span>\\n<span class=\\\"hljs-keyword\\\">public</span> Object <span class=\\\"hljs-title function_\\\">queryOrder</span><span class=\\\"hljs-params\\\">(<span class=\\\"hljs-meta\\\">@RequestParam(required = false)</span> String transactionId, <span class=\\\"hljs-meta\\\">@RequestParam</span> String outTradeNo)</span> {\\n    Map&lt;String, String&gt; result = <span class=\\\"hljs-keyword\\\">new</span> <span class=\\\"hljs-title class_\\\">HashMap</span>&lt;&gt;(<span class=\\\"hljs-number\\\">8</span>);\\n    <span class=\\\"hljs-keyword\\\">try</span> {\\n        <span class=\\\"hljs-type\\\">WxPayOrderQueryResult</span> <span class=\\\"hljs-variable\\\">wxPayOrderQueryResult</span> <span class=\\\"hljs-operator\\\">=</span> <span class=\\\"hljs-built_in\\\">this</span>.wxService.queryOrder(transactionId, outTradeNo);\\n        <span class=\\\"hljs-type\\\">Oder</span> <span class=\\\"hljs-variable\\\">od</span> <span class=\\\"hljs-operator\\\">=</span> orderService.getOrderByOId(Integer.parseInt(outTradeNo));\\n\\n        <span class=\\\"hljs-comment\\\">// 仅在该情况下主动更新数据库的支付状态</span>\\n        <span class=\\\"hljs-comment\\\">// 1. 该订单在数据库存在； 2. 该订单的支付状态在数据库为未支付； 3. 该订单的支付状态在微信数据库为已支付</span>\\n        <span class=\\\"hljs-keyword\\\">if</span> (od != <span class=\\\"hljs-literal\\\">null</span>\\n                && od.getPaymentStatus() == <span class=\\\"hljs-number\\\">0</span>\\n                && wxPayOrderQueryResult.getTradeState().equalsIgnoreCase(WeChatConfigParam.WX_PAY_SUCCESS_FLAG)) {\\n            <span class=\\\"hljs-keyword\\\">if</span> (orderService.updateOrderPaymentStatusByOid(od.getOid()) == <span class=\\\"hljs-number\\\">1</span>) {\\n                result.put(<span class=\\\"hljs-string\\\">&quot;resultMsg&quot;</span>, <span class=\\\"hljs-string\\\">&quot;UPDATE_SUCCESS&quot;</span>);\\n            } <span class=\\\"hljs-keyword\\\">else</span> {\\n                result.put(<span class=\\\"hljs-string\\\">&quot;resultMsg&quot;</span>, <span class=\\\"hljs-string\\\">&quot;UPDATE_FAIL&quot;</span>);\\n            }\\n        } <span class=\\\"hljs-keyword\\\">else</span> {\\n            result.put(<span class=\\\"hljs-string\\\">&quot;resultMsg&quot;</span>, <span class=\\\"hljs-string\\\">&quot;UNABLE_TO_UPDATE&quot;</span>);\\n        }\\n    } <span class=\\\"hljs-keyword\\\">catch</span> (WxPayException e) {\\n        log.warn(<span class=\\\"hljs-string\\\">&quot;No such pay order with oid:&quot;</span> + outTradeNo);\\n        result.put(<span class=\\\"hljs-string\\\">&quot;resultMsg&quot;</span>, <span class=\\\"hljs-string\\\">&quot;NO_SUCH_PAYMENT_ORDER_IN_WECHAT&quot;</span>);\\n        <span class=\\\"hljs-keyword\\\">return</span> result;\\n    }\\n    <span class=\\\"hljs-keyword\\\">return</span> result;\\n}\\n</code></pre>\\n<h5 id=\\\"提供给微信后台的notify接口\\\">提供给微信后台的notify接口</h5>\\n<pre><code class=\\\"hljs language-java\\\"><span class=\\\"hljs-meta\\\">@PostMapping(&quot;/notify/order&quot;)</span>\\n<span class=\\\"hljs-keyword\\\">public</span> String <span class=\\\"hljs-title function_\\\">parseOrderNotifyResult</span><span class=\\\"hljs-params\\\">(<span class=\\\"hljs-meta\\\">@RequestBody</span> String xmlData)</span> <span class=\\\"hljs-keyword\\\">throws</span> WxPayException {\\n    <span class=\\\"hljs-keyword\\\">final</span> <span class=\\\"hljs-type\\\">WxPayOrderNotifyResult</span> <span class=\\\"hljs-variable\\\">notifyResult</span> <span class=\\\"hljs-operator\\\">=</span> <span class=\\\"hljs-built_in\\\">this</span>.wxService.parseOrderNotifyResult(xmlData);\\n    <span class=\\\"hljs-type\\\">String</span> <span class=\\\"hljs-variable\\\">outTradeNo</span> <span class=\\\"hljs-operator\\\">=</span> notifyResult.getOutTradeNo();\\n    <span class=\\\"hljs-type\\\">Oder</span> <span class=\\\"hljs-variable\\\">od</span> <span class=\\\"hljs-operator\\\">=</span> orderService.getOrderByOId(Integer.parseInt(outTradeNo));\\n    <span class=\\\"hljs-comment\\\">// 从数据库获取该订单的总金额 单位为 ‘元’ 乘以100转为 ‘分’</span>\\n    <span class=\\\"hljs-type\\\">Float</span> <span class=\\\"hljs-variable\\\">totalPrice</span> <span class=\\\"hljs-operator\\\">=</span> od.getTotalPrice() * <span class=\\\"hljs-number\\\">100</span>;\\n    <span class=\\\"hljs-comment\\\">// 微信后台通知的支付结果中的交易金额 单位为 ‘分’</span>\\n    <span class=\\\"hljs-type\\\">Float</span> <span class=\\\"hljs-variable\\\">totalFee</span> <span class=\\\"hljs-operator\\\">=</span> Float.valueOf(notifyResult.getTotalFee());\\n    <span class=\\\"hljs-keyword\\\">if</span> (totalFee.equals(totalPrice)) {\\n        <span class=\\\"hljs-type\\\">int</span> <span class=\\\"hljs-variable\\\">updateCount</span>  <span class=\\\"hljs-operator\\\">=</span> orderService.updateOrderPaymentStatusByOid(od.getOid());\\n        <span class=\\\"hljs-keyword\\\">if</span> (updateCount != <span class=\\\"hljs-number\\\">1</span>){\\n            <span class=\\\"hljs-keyword\\\">return</span> WxPayNotifyResponse.success(WeChatConfigParam.WX_PAY_FAIL_FLAG);\\n        }\\n        <span class=\\\"hljs-keyword\\\">return</span> WxPayNotifyResponse.success(WeChatConfigParam.WX_PAY_SUCCESS_FLAG);\\n    } <span class=\\\"hljs-keyword\\\">else</span> {\\n        <span class=\\\"hljs-keyword\\\">return</span> WxPayNotifyResponse.success(WeChatConfigParam.WX_PAY_FAIL_FLAG);\\n    }\\n}\\n</code></pre>\\n<h3 id=\\\"后话\\\">后话</h3>\\n<p>需求简单，所以只用到了请求支付下单以及查询支付结果这两个接口，退款的接口什么的都没写，用了大概1天的时间调通，3天的时间完善上线</p>\\n\";","export default \"<h3 id=\\\"61rotate-listmedium\\\">61.Rotate List(Medium)</h3>\\n<p>Given a linked list, rotate the list to the right by <em>k</em> places, where <em>k</em> is non-negative.</p>\\n<p><strong>Example 1:</strong></p>\\n<pre><code>Input: 1-&gt;2-&gt;3-&gt;4-&gt;5-&gt;NULL, k = 2\\nOutput: 4-&gt;5-&gt;1-&gt;2-&gt;3-&gt;NULL\\nExplanation:\\nrotate 1 steps to the right: 5-&gt;1-&gt;2-&gt;3-&gt;4-&gt;NULL\\nrotate 2 steps to the right: 4-&gt;5-&gt;1-&gt;2-&gt;3-&gt;NULL\\n</code></pre>\\n<p><strong>Example 2:</strong></p>\\n<pre><code>Input: 0-&gt;1-&gt;2-&gt;NULL, k = 4\\nOutput: 2-&gt;0-&gt;1-&gt;NULL\\nExplanation:\\nrotate 1 steps to the right: 2-&gt;0-&gt;1-&gt;NULL\\nrotate 2 steps to the right: 1-&gt;2-&gt;0-&gt;NULL\\nrotate 3 steps to the right: 0-&gt;1-&gt;2-&gt;NULL\\nrotate 4 steps to the right: 2-&gt;0-&gt;1-&gt;NULL\\n</code></pre>\\n<h4 id=\\\"solution\\\">Solution</h4>\\n<p>追踪指针，简单直接</p>\\n<pre><code class=\\\"hljs language-java\\\"><span class=\\\"hljs-keyword\\\">public</span> ListNode <span class=\\\"hljs-title function_\\\">rotateRight</span><span class=\\\"hljs-params\\\">(ListNode head, <span class=\\\"hljs-type\\\">int</span> k)</span> {\\n    <span class=\\\"hljs-keyword\\\">if</span> (head == <span class=\\\"hljs-literal\\\">null</span>) {\\n        <span class=\\\"hljs-keyword\\\">return</span> <span class=\\\"hljs-literal\\\">null</span>;\\n    }\\n    ListNode newHead, tail = <span class=\\\"hljs-literal\\\">null</span>;\\n    <span class=\\\"hljs-type\\\">int</span> <span class=\\\"hljs-variable\\\">length</span> <span class=\\\"hljs-operator\\\">=</span> <span class=\\\"hljs-number\\\">0</span>;\\n    <span class=\\\"hljs-type\\\">ListNode</span> <span class=\\\"hljs-variable\\\">now</span> <span class=\\\"hljs-operator\\\">=</span> head;\\n    <span class=\\\"hljs-comment\\\">// 遍历一般计算长度 标志尾巴</span>\\n    <span class=\\\"hljs-keyword\\\">while</span> (now != <span class=\\\"hljs-literal\\\">null</span>) {\\n        <span class=\\\"hljs-keyword\\\">if</span> (now.next == <span class=\\\"hljs-literal\\\">null</span>) {\\n            tail = now;\\n        }\\n        now = now.next;\\n        length++;\\n    }\\n    \\n    <span class=\\\"hljs-comment\\\">// 处理k</span>\\n    k %= length;\\n    <span class=\\\"hljs-keyword\\\">if</span> (k == <span class=\\\"hljs-number\\\">0</span>) {\\n        <span class=\\\"hljs-keyword\\\">return</span> head;\\n    }\\n    <span class=\\\"hljs-type\\\">int</span> <span class=\\\"hljs-variable\\\">count</span> <span class=\\\"hljs-operator\\\">=</span> <span class=\\\"hljs-number\\\">0</span>;\\n    <span class=\\\"hljs-type\\\">ListNode</span> <span class=\\\"hljs-variable\\\">pre</span> <span class=\\\"hljs-operator\\\">=</span> <span class=\\\"hljs-keyword\\\">new</span> <span class=\\\"hljs-title class_\\\">ListNode</span>(<span class=\\\"hljs-number\\\">0</span>);\\n    now = head;\\n    pre.next = head;\\n    <span class=\\\"hljs-comment\\\">// 遍历到转轴点</span>\\n    <span class=\\\"hljs-keyword\\\">while</span> (count &lt; length - k) {\\n        pre = pre.next;\\n        now = now.next;\\n        count++;\\n    }\\n    <span class=\\\"hljs-comment\\\">// 断开转轴点</span>\\n    pre.next = <span class=\\\"hljs-literal\\\">null</span>;\\n    <span class=\\\"hljs-comment\\\">// 转轴点为新的头部</span>\\n    newHead = now;\\n    <span class=\\\"hljs-comment\\\">// 尾部接上旧头部</span>\\n    tail.next = head;\\n    <span class=\\\"hljs-keyword\\\">return</span> newHead;\\n}\\n</code></pre>\\n<h3 id=\\\"62unique-pathsmedium\\\">62.Unique Paths(Medium)</h3>\\n<p>A robot is located at the top-left corner of a <em>m</em> x <em>n</em> grid (marked &#39;Start&#39; in the diagram below).</p>\\n<p>The robot can only move either down or right at any point in time. The robot is trying to reach the bottom-right corner of the grid (marked &#39;Finish&#39; in the diagram below).</p>\\n<p>How many possible unique paths are there?</p>\\n<p><img src=\\\"https://assets.leetcode.com/uploads/2018/10/22/robot_maze.png\\\" alt=\\\"img\\\">\\nAbove is a 7 x 3 grid. How many possible unique paths are there?</p>\\n<p><strong>Note:</strong> <em>m</em> and <em>n</em> will be at most 100.</p>\\n<p><strong>Example 1:</strong></p>\\n<pre><code>Input: m = 3, n = 2\\nOutput: 3\\nExplanation:\\nFrom the top-left corner, there are a total of 3 ways to reach the bottom-right corner:\\n1. Right -&gt; Right -&gt; Down\\n2. Right -&gt; Down -&gt; Right\\n3. Down -&gt; Right -&gt; Right\\n</code></pre>\\n<p><strong>Example 2:</strong></p>\\n<pre><code>Input: m = 7, n = 3\\nOutput: 28\\n</code></pre>\\n<h4 id=\\\"dp\\\">DP</h4>\\n<p>机器人走方格，有多少种走法题目，在<a href=\\\"./188zp6j.html?hash=c401ac5d\\\">地痞</a>解过的，这遍解不同的是，我简化了之前的思路，并不需要预置好pre数组的结果</p>\\n<pre><code class=\\\"hljs language-java\\\"><span class=\\\"hljs-keyword\\\">public</span> <span class=\\\"hljs-type\\\">int</span> <span class=\\\"hljs-title function_\\\">uniquePaths</span><span class=\\\"hljs-params\\\">(<span class=\\\"hljs-type\\\">int</span> m, <span class=\\\"hljs-type\\\">int</span> n)</span> {\\n    <span class=\\\"hljs-type\\\">int</span>[] pre = <span class=\\\"hljs-keyword\\\">new</span> <span class=\\\"hljs-title class_\\\">int</span>[n];\\n    <span class=\\\"hljs-type\\\">int</span>[] now = <span class=\\\"hljs-keyword\\\">new</span> <span class=\\\"hljs-title class_\\\">int</span>[n];\\n    <span class=\\\"hljs-keyword\\\">for</span> (<span class=\\\"hljs-type\\\">int</span> <span class=\\\"hljs-variable\\\">i</span> <span class=\\\"hljs-operator\\\">=</span> <span class=\\\"hljs-number\\\">0</span>; i &lt; m; i++) {\\n        <span class=\\\"hljs-keyword\\\">for</span> (<span class=\\\"hljs-type\\\">int</span> <span class=\\\"hljs-variable\\\">j</span> <span class=\\\"hljs-operator\\\">=</span> <span class=\\\"hljs-number\\\">0</span>; j &lt; n; j++) {\\n            now[j] = j &gt; <span class=\\\"hljs-number\\\">0</span> ? (now[j - <span class=\\\"hljs-number\\\">1</span>] + pre[j]) : <span class=\\\"hljs-number\\\">1</span>;\\n        }\\n        pre = Arrays.copyOf(now, now.length);\\n    }\\n    <span class=\\\"hljs-keyword\\\">return</span> now[n - <span class=\\\"hljs-number\\\">1</span>];\\n}\\n</code></pre>\\n<h3 id=\\\"63unique-paths-ii-medium\\\">63.Unique Paths II (Medium)</h3>\\n<p>A robot is located at the top-left corner of a <em>m</em> x <em>n</em> grid (marked &#39;Start&#39; in the diagram below).</p>\\n<p>The robot can only move either down or right at any point in time. The robot is trying to reach the bottom-right corner of the grid (marked &#39;Finish&#39; in the diagram below).</p>\\n<p>Now consider if some obstacles are added to the grids. How many unique paths would there be?</p>\\n<p><img src=\\\"https://assets.leetcode.com/uploads/2018/10/22/robot_maze.png\\\" alt=\\\"img\\\"></p>\\n<p>An obstacle and empty space is marked as <code>1</code> and <code>0</code> respectively in the grid.</p>\\n<p><strong>Note:</strong> <em>m</em> and <em>n</em> will be at most 100.</p>\\n<p><strong>Example 1:</strong></p>\\n<pre><code>Input:\\n[\\n  [0,0,0],\\n  [0,1,0],\\n  [0,0,0]\\n]\\nOutput: 2\\nExplanation:\\nThere is one obstacle in the middle of the 3x3 grid above.\\nThere are two ways to reach the bottom-right corner:\\n1. Right -&gt; Right -&gt; Down -&gt; Down\\n2. Down -&gt; Down -&gt; Right -&gt; Right\\n</code></pre>\\n<h4 id=\\\"dp-1\\\">DP</h4>\\n<p>稍微变种一下，因为有障碍物，所以我们处理第一行now的时候，还是预处理一下pre比较好</p>\\n<pre><code class=\\\"hljs language-java\\\"><span class=\\\"hljs-keyword\\\">public</span> <span class=\\\"hljs-type\\\">int</span> <span class=\\\"hljs-title function_\\\">uniquePathsWithObstacles</span><span class=\\\"hljs-params\\\">(<span class=\\\"hljs-type\\\">int</span>[][] obstacleGrid)</span> {\\n    <span class=\\\"hljs-type\\\">int</span> <span class=\\\"hljs-variable\\\">m</span> <span class=\\\"hljs-operator\\\">=</span> obstacleGrid.length;\\n    <span class=\\\"hljs-type\\\">int</span> <span class=\\\"hljs-variable\\\">n</span> <span class=\\\"hljs-operator\\\">=</span> obstacleGrid[<span class=\\\"hljs-number\\\">0</span>].length;\\n    <span class=\\\"hljs-type\\\">int</span>[] pre = <span class=\\\"hljs-keyword\\\">new</span> <span class=\\\"hljs-title class_\\\">int</span>[n];\\n    <span class=\\\"hljs-comment\\\">// 如果起点没有障碍物</span>\\n    <span class=\\\"hljs-keyword\\\">if</span> (obstacleGrid[<span class=\\\"hljs-number\\\">0</span>][<span class=\\\"hljs-number\\\">0</span>] != <span class=\\\"hljs-number\\\">1</span>) {\\n        pre[<span class=\\\"hljs-number\\\">0</span>] = <span class=\\\"hljs-number\\\">1</span>;\\n        <span class=\\\"hljs-keyword\\\">for</span> (<span class=\\\"hljs-type\\\">int</span> <span class=\\\"hljs-variable\\\">i</span> <span class=\\\"hljs-operator\\\">=</span> <span class=\\\"hljs-number\\\">1</span>; i &lt; pre.length; i++) {\\n            <span class=\\\"hljs-keyword\\\">if</span> (obstacleGrid[<span class=\\\"hljs-number\\\">0</span>][i] != <span class=\\\"hljs-number\\\">0</span>) {\\n                pre[i] = <span class=\\\"hljs-number\\\">1</span>;\\n            } <span class=\\\"hljs-keyword\\\">else</span> {\\n                <span class=\\\"hljs-comment\\\">// 一旦碰到障碍物 后面的路就断了</span>\\n                <span class=\\\"hljs-keyword\\\">break</span>;\\n            }\\n        }\\n    }\\n    <span class=\\\"hljs-type\\\">int</span>[] now = <span class=\\\"hljs-keyword\\\">new</span> <span class=\\\"hljs-title class_\\\">int</span>[n];\\n    <span class=\\\"hljs-keyword\\\">for</span> (<span class=\\\"hljs-type\\\">int</span> <span class=\\\"hljs-variable\\\">i</span> <span class=\\\"hljs-operator\\\">=</span> <span class=\\\"hljs-number\\\">0</span>; i &lt; m; i++) {\\n        <span class=\\\"hljs-keyword\\\">for</span> (<span class=\\\"hljs-type\\\">int</span> <span class=\\\"hljs-variable\\\">j</span> <span class=\\\"hljs-operator\\\">=</span> <span class=\\\"hljs-number\\\">0</span>; j &lt; n; j++) {\\n            <span class=\\\"hljs-keyword\\\">if</span> (obstacleGrid[i][j] == <span class=\\\"hljs-number\\\">1</span>) {\\n                now[j] = <span class=\\\"hljs-number\\\">0</span>;\\n            } <span class=\\\"hljs-keyword\\\">else</span> {\\n                now[j] = j &gt; <span class=\\\"hljs-number\\\">0</span> ? (now[j - <span class=\\\"hljs-number\\\">1</span>] + pre[j]) : pre[j];\\n            }\\n        }\\n        pre = Arrays.copyOf(now, now.length);\\n    }\\n    <span class=\\\"hljs-keyword\\\">return</span> now[n - <span class=\\\"hljs-number\\\">1</span>];\\n}\\n</code></pre>\\n<h3 id=\\\"64minimun-path-summedium\\\">64.Minimun Path Sum(Medium)</h3>\\n<p>Given a <em>m</em> x <em>n</em> grid filled with non-negative numbers, find a path from top left to bottom right which <em>minimizes</em> the sum of all numbers along its path.</p>\\n<p><strong>Note:</strong> You can only move either down or right at any point in time.</p>\\n<p><strong>Example:</strong></p>\\n<pre><code>Input:\\n[\\n  [1,3,1],\\n  [1,5,1],\\n  [4,2,1]\\n]\\nOutput: 7\\nExplanation: Because the path 1→3→1→1→1 minimizes the sum.\\n</code></pre>\\n<h4 id=\\\"dp-2\\\">DP</h4>\\n<p>曾经有一道题，<a href=\\\"./188zp6j.html?hash=d2258ac5\\\">硬币收集问题</a>，这个就相当于收集到的最小币值</p>\\n<pre><code class=\\\"hljs language-java\\\"><span class=\\\"hljs-keyword\\\">public</span> <span class=\\\"hljs-type\\\">int</span> <span class=\\\"hljs-title function_\\\">minPathSum</span><span class=\\\"hljs-params\\\">(<span class=\\\"hljs-type\\\">int</span>[][] grid)</span> {\\n    <span class=\\\"hljs-keyword\\\">if</span> (grid.length == <span class=\\\"hljs-number\\\">0</span> || grid[<span class=\\\"hljs-number\\\">0</span>].length == <span class=\\\"hljs-number\\\">0</span>) {\\n        <span class=\\\"hljs-keyword\\\">return</span> <span class=\\\"hljs-number\\\">0</span>;\\n    }\\n    <span class=\\\"hljs-type\\\">int</span>[] pre = <span class=\\\"hljs-keyword\\\">new</span> <span class=\\\"hljs-title class_\\\">int</span>[grid[<span class=\\\"hljs-number\\\">0</span>].length];\\n    <span class=\\\"hljs-type\\\">int</span>[] now = <span class=\\\"hljs-keyword\\\">new</span> <span class=\\\"hljs-title class_\\\">int</span>[grid[<span class=\\\"hljs-number\\\">0</span>].length];\\n    <span class=\\\"hljs-keyword\\\">for</span> (<span class=\\\"hljs-type\\\">int</span> <span class=\\\"hljs-variable\\\">i</span> <span class=\\\"hljs-operator\\\">=</span> <span class=\\\"hljs-number\\\">0</span>; i &lt; grid.length; i++) {\\n        <span class=\\\"hljs-keyword\\\">for</span> (<span class=\\\"hljs-type\\\">int</span> <span class=\\\"hljs-variable\\\">j</span> <span class=\\\"hljs-operator\\\">=</span> <span class=\\\"hljs-number\\\">0</span>; j &lt; grid[<span class=\\\"hljs-number\\\">0</span>].length; j++) {\\n            <span class=\\\"hljs-keyword\\\">if</span> (i == <span class=\\\"hljs-number\\\">0</span> && j == <span class=\\\"hljs-number\\\">0</span>) {\\n                now[<span class=\\\"hljs-number\\\">0</span>] = grid[<span class=\\\"hljs-number\\\">0</span>][<span class=\\\"hljs-number\\\">0</span>];\\n            } <span class=\\\"hljs-keyword\\\">else</span> <span class=\\\"hljs-keyword\\\">if</span> (i == <span class=\\\"hljs-number\\\">0</span>) {\\n                now[j] = grid[<span class=\\\"hljs-number\\\">0</span>][j] + now[j - <span class=\\\"hljs-number\\\">1</span>];\\n            } <span class=\\\"hljs-keyword\\\">else</span> <span class=\\\"hljs-keyword\\\">if</span> (j == <span class=\\\"hljs-number\\\">0</span>) {\\n                now[j] = grid[i][<span class=\\\"hljs-number\\\">0</span>] + pre[j];\\n            } <span class=\\\"hljs-keyword\\\">else</span> {\\n                now[j] = grid[i][j] + Math.min(now[j - <span class=\\\"hljs-number\\\">1</span>], pre[j]);\\n            }\\n        }\\n        pre = Arrays.copyOf(now, now.length);\\n    }\\n    <span class=\\\"hljs-keyword\\\">return</span> now[now.length - <span class=\\\"hljs-number\\\">1</span>];\\n}\\n</code></pre>\\n<h3 id=\\\"65valid-numberhard\\\">65.Valid Number(Hard)</h3>\\n<p>不做，傻逼题</p>\\n\";","export default \"<h3 id=\\\"introduction\\\">Introduction</h3>\\n<p>二维坐标中有一堆点集，记为 P，假设 P 中至少有 2 个点，那么求出 P 中距离最近的两个点；</p>\\n<p>首先为了问题准备好点和求两点距离的方法，其中如果两点距离的输入只有一个点，那么它的距离代表无穷大，它表示没有解</p>\\n<pre><code class=\\\"hljs language-java\\\"><span class=\\\"hljs-keyword\\\">class</span> <span class=\\\"hljs-title class_\\\">Point</span> {\\n    <span class=\\\"hljs-type\\\">double</span> x;\\n    <span class=\\\"hljs-type\\\">double</span> y;\\n\\n    Point(<span class=\\\"hljs-type\\\">double</span> x, <span class=\\\"hljs-type\\\">double</span> y) {\\n        <span class=\\\"hljs-built_in\\\">this</span>.x = x;\\n        <span class=\\\"hljs-built_in\\\">this</span>.y = y;\\n    }\\n\\n    <span class=\\\"hljs-meta\\\">@Override</span>\\n    <span class=\\\"hljs-keyword\\\">public</span> String <span class=\\\"hljs-title function_\\\">toString</span><span class=\\\"hljs-params\\\">()</span> {\\n        <span class=\\\"hljs-keyword\\\">return</span> <span class=\\\"hljs-string\\\">&quot;Point{&quot;</span> +\\n                <span class=\\\"hljs-string\\\">&quot;x=&quot;</span> + x +\\n                <span class=\\\"hljs-string\\\">&quot;, y=&quot;</span> + y +\\n                <span class=\\\"hljs-string\\\">&#x27;}&#x27;</span>;\\n    }\\n}\\n\\n<span class=\\\"hljs-keyword\\\">private</span> <span class=\\\"hljs-type\\\">double</span> <span class=\\\"hljs-title function_\\\">distanceOfTwoPoint</span><span class=\\\"hljs-params\\\">(Point a, Point b)</span> {\\n    <span class=\\\"hljs-keyword\\\">if</span> (a == <span class=\\\"hljs-literal\\\">null</span> || b == <span class=\\\"hljs-literal\\\">null</span>) {\\n        <span class=\\\"hljs-keyword\\\">return</span> Double.MAX_VALUE;\\n    }\\n    <span class=\\\"hljs-keyword\\\">return</span> Math.sqrt(Math.pow(a.x - b.x, <span class=\\\"hljs-number\\\">2</span>) + Math.pow(a.y - b.y, <span class=\\\"hljs-number\\\">2</span>));\\n}\\n</code></pre>\\n<h4 id=\\\"brute-force---on2\\\">Brute Force - O(n^2)</h4>\\n<p>枚举，没什么说的</p>\\n<pre><code class=\\\"hljs language-java\\\"><span class=\\\"hljs-keyword\\\">public</span> Point[] shortestDistance(Point[] set) {\\n    Point[] ans = <span class=\\\"hljs-keyword\\\">new</span> <span class=\\\"hljs-title class_\\\">Point</span>[<span class=\\\"hljs-number\\\">2</span>];\\n    <span class=\\\"hljs-type\\\">double</span> <span class=\\\"hljs-variable\\\">get</span> <span class=\\\"hljs-operator\\\">=</span> Double.MAX_VALUE;\\n    <span class=\\\"hljs-keyword\\\">for</span> (Point a : set) {\\n        <span class=\\\"hljs-keyword\\\">for</span> (Point b : set) {\\n            <span class=\\\"hljs-type\\\">double</span> <span class=\\\"hljs-variable\\\">tmp</span> <span class=\\\"hljs-operator\\\">=</span> distanceOfTwoPoint(a, b);\\n            <span class=\\\"hljs-keyword\\\">if</span> (tmp &lt; get && a != b) {\\n                get = tmp;\\n                ans[<span class=\\\"hljs-number\\\">0</span>] = a;\\n                ans[<span class=\\\"hljs-number\\\">1</span>] = b;\\n            }\\n        }\\n    }\\n    <span class=\\\"hljs-keyword\\\">return</span> ans;\\n}\\n</code></pre>\\n<h4 id=\\\"divide-and-conque---onlogn\\\">Divide And Conque - O(nlogn)</h4>\\n<p>利用分治法的思想，我们将点集分为三种情况：</p>\\n<ol>\\n<li><p>点数小于等于二时：直接计算，求该两点之间的距离。</p>\\n</li>\\n<li><p>集合中有三个点：两两比较，求三个点中的最近的两个点距离。</p>\\n</li>\\n<li><p>点数大于三时：首先<strong>划分</strong>集合 S 为 SL 和 SR，使得 SL 中的每一个点位于 SR 中每一个点的左边，并且 SL 和 SR 中点数相同。分别在 SL 和 SR 中解决最近点对问题，得到 DL 和 DR，分别表示 SL 和 SR 中的最近点对的距离。令 d=min(DL,DR)。如果 S 中的最近点对(P1,P2)。P1、P2 两点一个在 SL 和一个在 SR 中，那么 P1 和 P2 一定在以 L 为中心的间隙内，以 L-d 和 L+d 为界。</p>\\n<p><img src=\\\"../../../public/img/20211210131802.png\\\" alt=\\\"\\\"></p>\\n</li>\\n</ol>\\n<p>针对这个基本思想，我们肯定是得有一个前提的，那就是怎么<strong>划分</strong>？如果说集合<strong>P</strong>是按照 x 坐标或者 y 坐标升降任意去排序的，那么我们就可以取集合中间下标的位置为<strong>MID</strong>，那么<strong>MID</strong>左右两边的点就是以 x 坐标或者 y 坐标值均匀分为两个子集，记为<strong>P1，P2</strong>；</p>\\n<p><strong>于是我们要求 P 必须是可划分的，也就是按照 x 或者 y 值去有序排列好的，否则得先对 P 进行排序，然后再划分</strong></p>\\n<p>然后就可以通过递归求解各自<strong>n/2</strong>的问题规模的解，各自的解记为<strong>d1，d2</strong>，定义<code>d = min{d1, d2}</code></p>\\n<p>这时候，<strong>dis</strong>不一定是问题的解，因为解有可能跨两个子集，所以我们还得检查<strong>MID 附近</strong>可能的点集的解，最后再和<strong>dis</strong>比较，求出真正的解</p>\\n<p>假如说<strong>P</strong>以 x 坐标值为排序了，那么<strong>MID 的附近</strong>的点一定存在**范围关系：| MID.x - pi.x | &lt; dis **，只有在这个范围内的点，才有可能存在解</p>\\n<p><strong>并且有以下事实：</strong>如果有<strong>跨 MID</strong>的解的话，设解左边的点为<strong>pl</strong>，那么在上式范围内，右边的点存在的可能性不超过 6 个，于是说我们在范围关系内，左范围中的每一个点顶多再往后考虑 6 次右边范围内的点就行了，这样这个子过程时间就由线性缩为常量</p>\\n<p>于是我们整理一下逻辑：</p>\\n<ol>\\n<li>首先要求点集有序；</li>\\n<li>如果点集只有一个点，则返回无穷大，表明这个点集绝对没有解；</li>\\n<li>如果点集只有两个点，则直接返回两点距离，表明这个点集只有一个解；</li>\\n<li>如果点集有三个点，则直接暴力解；</li>\\n<li>如果三个点以上：<ol>\\n<li>根据中点<strong>MID</strong>划分；</li>\\n<li>递归传入左右子集；</li>\\n<li>得到左右子集的解之后，取最小值为<strong>dis</strong>；</li>\\n<li>考虑<strong>跨 MID</strong>情况：<ol>\\n<li>在当前递归集合范围中，以 <strong>i = P.startIndex</strong> 开始遍历<strong>MID</strong>左边的点，且只取符合 <strong>pi.x &gt;= MID.x - dis <strong>的点作为</strong>pl</strong></li>\\n<li>在当前递归集合范围中，针对<strong>pl</strong>，以 <strong>j = MID</strong> 开始遍历，且只取符合 <strong>pj.x &lt;= MID.x + dis</strong> 的点作为<strong>pr</strong>，且最多只找 6 次</li>\\n<li>若 pl 和 pr 的距离小于 dis，则讲 pl 和 pr 作为备选解，继续往后</li>\\n</ol>\\n</li>\\n<li>考虑完<strong>跨 MID</strong>情况后，选最小的一个情况为解；</li>\\n</ol>\\n</li>\\n</ol>\\n<pre><code class=\\\"hljs language-java\\\"><span class=\\\"hljs-keyword\\\">public</span> Point[] shortestDistance2(Point[] set, <span class=\\\"hljs-type\\\">int</span> start, <span class=\\\"hljs-type\\\">int</span> end) {\\n    Point[] ans = <span class=\\\"hljs-keyword\\\">new</span> <span class=\\\"hljs-title class_\\\">Point</span>[<span class=\\\"hljs-number\\\">2</span>];\\n    <span class=\\\"hljs-type\\\">int</span> <span class=\\\"hljs-variable\\\">length</span> <span class=\\\"hljs-operator\\\">=</span> end - start + <span class=\\\"hljs-number\\\">1</span>;\\n    <span class=\\\"hljs-keyword\\\">if</span> (length == <span class=\\\"hljs-number\\\">1</span>) {\\n        ans[<span class=\\\"hljs-number\\\">0</span>] = set[start];\\n    } <span class=\\\"hljs-keyword\\\">else</span> <span class=\\\"hljs-keyword\\\">if</span> (length == <span class=\\\"hljs-number\\\">2</span>) {\\n        ans[<span class=\\\"hljs-number\\\">0</span>] = set[start];\\n        ans[<span class=\\\"hljs-number\\\">1</span>] = set[end];\\n    } <span class=\\\"hljs-keyword\\\">else</span> <span class=\\\"hljs-keyword\\\">if</span> (length == <span class=\\\"hljs-number\\\">3</span>) {\\n        <span class=\\\"hljs-comment\\\">// brute force</span>\\n        <span class=\\\"hljs-keyword\\\">return</span> shortestInThree(set);\\n    } <span class=\\\"hljs-keyword\\\">else</span> {\\n        <span class=\\\"hljs-type\\\">int</span> <span class=\\\"hljs-variable\\\">mid</span> <span class=\\\"hljs-operator\\\">=</span> (length / <span class=\\\"hljs-number\\\">2</span>) + start;\\n        Point[] leftAns = shortestDistance2(set, start, mid);\\n        Point[] rightAns = shortestDistance2(set, mid + <span class=\\\"hljs-number\\\">1</span>, end);\\n        <span class=\\\"hljs-type\\\">double</span> <span class=\\\"hljs-variable\\\">ld</span> <span class=\\\"hljs-operator\\\">=</span> Double.MAX_VALUE, rd = Double.MAX_VALUE;\\n        <span class=\\\"hljs-keyword\\\">if</span> (leftAns.length == <span class=\\\"hljs-number\\\">2</span>) {\\n            ld = distanceOfTwoPoint(leftAns[<span class=\\\"hljs-number\\\">0</span>], leftAns[<span class=\\\"hljs-number\\\">1</span>]);\\n        }\\n        <span class=\\\"hljs-keyword\\\">if</span> (rightAns.length == <span class=\\\"hljs-number\\\">2</span>) {\\n            rd = distanceOfTwoPoint(rightAns[<span class=\\\"hljs-number\\\">0</span>], rightAns[<span class=\\\"hljs-number\\\">1</span>]);\\n        }\\n        <span class=\\\"hljs-type\\\">double</span> <span class=\\\"hljs-variable\\\">dis</span> <span class=\\\"hljs-operator\\\">=</span> Math.min(ld, rd);\\n        <span class=\\\"hljs-type\\\">Point</span> <span class=\\\"hljs-variable\\\">midP</span> <span class=\\\"hljs-operator\\\">=</span> set[mid];\\n        <span class=\\\"hljs-type\\\">double</span> <span class=\\\"hljs-variable\\\">midAnsD</span> <span class=\\\"hljs-operator\\\">=</span> Double.MAX_VALUE;\\n        <span class=\\\"hljs-comment\\\">// process 5.4.1</span>\\n        <span class=\\\"hljs-keyword\\\">for</span> (<span class=\\\"hljs-type\\\">int</span> <span class=\\\"hljs-variable\\\">i</span> <span class=\\\"hljs-operator\\\">=</span> start; i &lt;= end && set[i].x &lt;= midP.x; i++) {\\n            <span class=\\\"hljs-type\\\">Point</span> <span class=\\\"hljs-variable\\\">pl</span> <span class=\\\"hljs-operator\\\">=</span> set[i];\\n            <span class=\\\"hljs-keyword\\\">if</span> (pl.x &gt;= midP.x - dis) {\\n                <span class=\\\"hljs-comment\\\">// process 5.4.2</span>\\n                <span class=\\\"hljs-keyword\\\">for</span> (<span class=\\\"hljs-type\\\">int</span> <span class=\\\"hljs-variable\\\">j</span> <span class=\\\"hljs-operator\\\">=</span> mid, count = <span class=\\\"hljs-number\\\">0</span>;\\n                     j &lt;= end && count &lt; <span class=\\\"hljs-number\\\">6</span> && set[j].x &lt;= midP.x + dis;\\n                     j++, count++) {\\n                    <span class=\\\"hljs-type\\\">Point</span> <span class=\\\"hljs-variable\\\">pr</span> <span class=\\\"hljs-operator\\\">=</span> set[j];\\n                    <span class=\\\"hljs-type\\\">double</span> <span class=\\\"hljs-variable\\\">tmp</span> <span class=\\\"hljs-operator\\\">=</span> distanceOfTwoPoint(pl, pr);\\n                    <span class=\\\"hljs-comment\\\">// process 5.4.3</span>\\n                    <span class=\\\"hljs-keyword\\\">if</span> (tmp &lt; dis && tmp != <span class=\\\"hljs-number\\\">0</span>) {\\n                        ans[<span class=\\\"hljs-number\\\">0</span>] = pl;\\n                        ans[<span class=\\\"hljs-number\\\">1</span>] = pr;\\n                        midAnsD = tmp;\\n                    }\\n                }\\n            }\\n        }\\n        <span class=\\\"hljs-keyword\\\">if</span> (midAnsD &lt;= dis) {\\n            <span class=\\\"hljs-keyword\\\">return</span> ans;\\n        } <span class=\\\"hljs-keyword\\\">else</span> <span class=\\\"hljs-keyword\\\">if</span> (ld &lt;= rd) {\\n            <span class=\\\"hljs-keyword\\\">return</span> leftAns;\\n        } <span class=\\\"hljs-keyword\\\">else</span> {\\n            <span class=\\\"hljs-keyword\\\">return</span> rightAns;\\n        }\\n    }\\n    <span class=\\\"hljs-keyword\\\">return</span> ans;\\n}\\n</code></pre>\\n<h4 id=\\\"conclution\\\">Conclution</h4>\\n<p>解法如果不知道<strong>那个事实</strong>的话，一般人是想不到的，而且还有更优化的理论，能把 6 个点缩为 4 个点，具体的引用可以<a href=\\\"https://blog.csdn.net/sinat_35678407/article/details/82874216\\\">参考</a></p>\\n<p>反正在解法中，无论是规模减半还是合并子问题，算法都只需要线性的时间，而对 P 的排序我们可以选择一个**O(nlogn)**的算法，那么整体的算法效率也将是这个值，这也是该问题的最优效率</p>\\n<p>这也是这个问题很 tricky 的地方，关于排序，我自己选择是经过我自己优化的短几行的堆排序，它的效率正好是**O(nlogn)**：</p>\\n<pre><code class=\\\"hljs language-java\\\"><span class=\\\"hljs-keyword\\\">public</span> Point[] sortByX(Point[] set) {\\n    <span class=\\\"hljs-keyword\\\">for</span> (<span class=\\\"hljs-type\\\">int</span> <span class=\\\"hljs-variable\\\">i</span> <span class=\\\"hljs-operator\\\">=</span> <span class=\\\"hljs-number\\\">0</span>; i &lt; set.length - <span class=\\\"hljs-number\\\">1</span>; i++) {\\n        <span class=\\\"hljs-type\\\">int</span> <span class=\\\"hljs-variable\\\">heapLength</span> <span class=\\\"hljs-operator\\\">=</span> set.length - i;\\n        <span class=\\\"hljs-type\\\">int</span> <span class=\\\"hljs-variable\\\">lastParentIndex</span> <span class=\\\"hljs-operator\\\">=</span> (heapLength - <span class=\\\"hljs-number\\\">2</span>) / <span class=\\\"hljs-number\\\">2</span>;\\n        <span class=\\\"hljs-keyword\\\">for</span> (<span class=\\\"hljs-type\\\">int</span> <span class=\\\"hljs-variable\\\">j</span> <span class=\\\"hljs-operator\\\">=</span> lastParentIndex; j &gt;= <span class=\\\"hljs-number\\\">0</span>; j--) {\\n            <span class=\\\"hljs-type\\\">int</span> <span class=\\\"hljs-variable\\\">leftChildIndex</span> <span class=\\\"hljs-operator\\\">=</span> j * <span class=\\\"hljs-number\\\">2</span> + <span class=\\\"hljs-number\\\">1</span>;\\n            <span class=\\\"hljs-type\\\">int</span> <span class=\\\"hljs-variable\\\">rightChildIndex</span> <span class=\\\"hljs-operator\\\">=</span> leftChildIndex + <span class=\\\"hljs-number\\\">1</span>;\\n            <span class=\\\"hljs-type\\\">int</span> <span class=\\\"hljs-variable\\\">bigIndex</span> <span class=\\\"hljs-operator\\\">=</span> leftChildIndex;\\n            <span class=\\\"hljs-keyword\\\">if</span> (rightChildIndex &lt; heapLength\\n                    && set[rightChildIndex].x &gt; set[leftChildIndex].x) {\\n                bigIndex = rightChildIndex;\\n            }\\n            <span class=\\\"hljs-keyword\\\">if</span> (set[bigIndex].x &gt; set[j].x) {\\n                swap(set, bigIndex, j);\\n            }\\n        }\\n        swap(set, <span class=\\\"hljs-number\\\">0</span>, heapLength - <span class=\\\"hljs-number\\\">1</span>);\\n    }\\n    <span class=\\\"hljs-keyword\\\">return</span> set;\\n}\\n</code></pre>\\n<h4 id=\\\"test-case\\\">Test Case</h4>\\n<pre><code class=\\\"hljs language-java\\\"><span class=\\\"hljs-keyword\\\">private</span> Point[] set = {\\n        <span class=\\\"hljs-keyword\\\">new</span> <span class=\\\"hljs-title class_\\\">Point</span>(<span class=\\\"hljs-number\\\">0</span>, <span class=\\\"hljs-number\\\">0</span>),\\n        <span class=\\\"hljs-keyword\\\">new</span> <span class=\\\"hljs-title class_\\\">Point</span>(<span class=\\\"hljs-number\\\">0.5</span>, <span class=\\\"hljs-number\\\">2</span>),\\n        <span class=\\\"hljs-keyword\\\">new</span> <span class=\\\"hljs-title class_\\\">Point</span>(<span class=\\\"hljs-number\\\">1</span>, <span class=\\\"hljs-number\\\">1</span>),\\n        <span class=\\\"hljs-keyword\\\">new</span> <span class=\\\"hljs-title class_\\\">Point</span>(<span class=\\\"hljs-number\\\">1</span>, <span class=\\\"hljs-number\\\">3</span>),\\n        <span class=\\\"hljs-keyword\\\">new</span> <span class=\\\"hljs-title class_\\\">Point</span>(<span class=\\\"hljs-number\\\">1</span>, <span class=\\\"hljs-number\\\">5</span>),\\n        <span class=\\\"hljs-keyword\\\">new</span> <span class=\\\"hljs-title class_\\\">Point</span>(<span class=\\\"hljs-number\\\">1</span>, <span class=\\\"hljs-number\\\">7</span>),\\n        <span class=\\\"hljs-keyword\\\">new</span> <span class=\\\"hljs-title class_\\\">Point</span>(-<span class=\\\"hljs-number\\\">0.5</span>, <span class=\\\"hljs-number\\\">2</span>),\\n        <span class=\\\"hljs-keyword\\\">new</span> <span class=\\\"hljs-title class_\\\">Point</span>(-<span class=\\\"hljs-number\\\">1</span>, <span class=\\\"hljs-number\\\">1</span>),\\n        <span class=\\\"hljs-keyword\\\">new</span> <span class=\\\"hljs-title class_\\\">Point</span>(-<span class=\\\"hljs-number\\\">1</span>, <span class=\\\"hljs-number\\\">3</span>),\\n        <span class=\\\"hljs-keyword\\\">new</span> <span class=\\\"hljs-title class_\\\">Point</span>(-<span class=\\\"hljs-number\\\">1</span>, <span class=\\\"hljs-number\\\">5</span>),\\n        <span class=\\\"hljs-keyword\\\">new</span> <span class=\\\"hljs-title class_\\\">Point</span>(-<span class=\\\"hljs-number\\\">1</span>, <span class=\\\"hljs-number\\\">7</span>),\\n};\\n<span class=\\\"hljs-meta\\\">@Test</span>\\n<span class=\\\"hljs-keyword\\\">public</span> <span class=\\\"hljs-keyword\\\">void</span> <span class=\\\"hljs-title function_\\\">testSolution2</span><span class=\\\"hljs-params\\\">()</span>{\\n    Point[] points = sortByX(set);\\n    System.out.println(Arrays.toString(points));\\n    System.out.println(Arrays.toString(shortestDistance2(points, <span class=\\\"hljs-number\\\">0</span>, set.length - <span class=\\\"hljs-number\\\">1</span>)));\\n}\\n</code></pre>\\n\";","export default \"<p><div class=\\\"saying mb-4\\\"><div class=\\\"saying-quote saying-left-quote\\\">“</div><div class=\\\"saying-quote saying-right-quote\\\">”</div></p>\\n<p>小心点，一不小心你就栽跟头了 👻</p>\\n<p></div></p>\\n<h3 id=\\\"你画我猜\\\">你画我猜</h3>\\n<p>下面程序输出多少？</p>\\n<pre><code class=\\\"hljs language-java\\\"><span class=\\\"hljs-keyword\\\">public</span> <span class=\\\"hljs-keyword\\\">static</span> <span class=\\\"hljs-keyword\\\">void</span> <span class=\\\"hljs-title function_\\\">main</span><span class=\\\"hljs-params\\\">(String[] args)</span> {\\n    <span class=\\\"hljs-type\\\">int</span> <span class=\\\"hljs-variable\\\">i</span> <span class=\\\"hljs-operator\\\">=</span> <span class=\\\"hljs-number\\\">2</span>;\\n    i += i -= i *= i;\\n    System.out.println(i);\\n}\\n</code></pre>\\n<p>答案：0</p>\\n<h3 id=\\\"你对java运算符了解多少？\\\">你对Java运算符了解多少？</h3>\\n<ul>\\n<li>你知道Java里有哪几种运算符嘛？</li>\\n<li>你知道<code>-=</code>是算数运算符还是赋值运算符嘛？</li>\\n<li>你知道是<code>|</code>和<code>||</code>到底哪个才是短路嘛？</li>\\n<li>你知道怎么不用<code>*</code>或<code>/</code>做2的倍数的乘除运算嘛？</li>\\n<li>你知道<code>&gt;&gt;</code>和<code>&gt;&gt;&gt;</code>有什么区别嘛？</li>\\n<li>你知道<code>-1 &gt;&gt;&gt; 1 = 2147483647 </code>怎么来的嘛？</li>\\n<li>你知道<code>&lt;&lt;&lt;</code>代表什么意思嘛？</li>\\n<li>你知道还有一种运算符它里面全是字母没有符号嘛？</li>\\n<li>上面的问题你如果有一大半不会，那你还不觉得Java运算符里有阴谋吗？</li>\\n</ul>\\n<h3 id=\\\"运算符种类\\\">运算符种类</h3>\\n<h4 id=\\\"算数运算符\\\">算数运算符</h4>\\n<p>没得说，加减乘除模，+、-、*、/、%</p>\\n<h4 id=\\\"一元运算符\\\">一元运算符</h4>\\n<ul>\\n<li><strong>-，</strong>负号运算符</li>\\n<li><strong>+，</strong>正号运算符（还有这玩意？你不知道吧？）</li>\\n<li><strong>++，</strong>自加运算符，注意前后</li>\\n<li><strong>--，</strong>自减运算符，注意前后</li>\\n<li><strong>!，</strong>非运算符，用于逻辑语句改是非</li>\\n</ul>\\n<h4 id=\\\"赋值运算符\\\">赋值运算符</h4>\\n<ul>\\n<li><strong>=，</strong>就这一个</li>\\n</ul>\\n<h4 id=\\\"复合赋值运算符\\\">复合赋值运算符</h4>\\n<ul>\\n<li><strong>+=</strong>, for adding left operand with right operand and then assigning it to variable on the left.</li>\\n<li><strong>-=</strong>, for subtracting left operand with right operand and then assigning it to variable on the left.</li>\\n<li>***=**, for multiplying left operand with right operand and then assigning it to variable on the left.</li>\\n<li><strong>/=</strong>, for dividing left operand with right operand and then assigning it to variable on the left.</li>\\n<li><strong>^=</strong>, for raising power of left operand to right operand and assigning it to variable on the left.</li>\\n<li><strong>%=</strong>, for assigning modulo of left operand with right operand and then assigning it to variable on the left.</li>\\n</ul>\\n<p>都不解释了，需要注意的是，赋值运算式这个表达式本身的结果是求出的值，因为要赋值，所以运算式的左边必须是一个变量，因为只有变量才能够赋值</p>\\n<p>Leetcode有一道题：</p>\\n<p>求 <code>1+2+...+n</code> ，要求不能使用乘除法、for、while、if、else、switch、case等关键字及条件判断语句（A?B:C）。</p>\\n<p>因为不能使用循环，所以就使用递归去记录乘积，因为不能使用判断语句，所以我们使用逻辑运算符去短路递归</p>\\n<pre><code class=\\\"hljs language-java\\\"><span class=\\\"hljs-keyword\\\">public</span> <span class=\\\"hljs-type\\\">int</span> <span class=\\\"hljs-title function_\\\">sumNums</span><span class=\\\"hljs-params\\\">(<span class=\\\"hljs-type\\\">int</span> n)</span> {\\n    <span class=\\\"hljs-type\\\">boolean</span> <span class=\\\"hljs-variable\\\">f</span> <span class=\\\"hljs-operator\\\">=</span> n &gt; <span class=\\\"hljs-number\\\">0</span> && (n += sumNums(n - <span class=\\\"hljs-number\\\">1</span>)) &gt; <span class=\\\"hljs-number\\\">0</span>;\\n    <span class=\\\"hljs-keyword\\\">return</span> n;\\n}\\n</code></pre>\\n<p>第二行<code>n += sumNums(n - 1)</code>是即赋值又求值，所以该表达式的值为<code>n + sumNums(n - 1)</code>，因此可以配合比较运算符求出布尔值</p>\\n<h4 id=\\\"关系运算符\\\">关系运算符</h4>\\n<ul>\\n<li><strong>== , Equal to :</strong> returns true of left hand side is equal to right hand side.</li>\\n<li><strong>!= , Not Equal to :</strong> returns true of left hand side is not equal to right hand side.</li>\\n<li><strong>&lt; , less than :</strong> returns true of left hand side is less than right hand side.</li>\\n<li><strong>&lt;= , less than or equal to :</strong> returns true of left hand side is less than or equal to right hand side.</li>\\n<li><strong>&gt; , Greater than :</strong> returns true of left hand side is greater than right hand side.</li>\\n<li><strong>&gt;= , Greater than or equal to:</strong> returns true of left hand side is greater than or equal to right hand side.</li>\\n</ul>\\n<h4 id=\\\"逻辑运算符\\\">逻辑运算符</h4>\\n<ul>\\n<li>**&& , **短路与</li>\\n<li>**|| ,**短路或</li>\\n<li><strong>&，</strong>非短路与</li>\\n<li><strong>|，</strong>非短路或</li>\\n</ul>\\n<h4 id=\\\"三元运算符\\\">三元运算符</h4>\\n<pre><code class=\\\"hljs language-java\\\"><span class=\\\"hljs-type\\\">int</span> <span class=\\\"hljs-variable\\\">i</span> <span class=\\\"hljs-operator\\\">=</span> <span class=\\\"hljs-number\\\">1</span> &gt; <span class=\\\"hljs-number\\\">2</span> ? <span class=\\\"hljs-number\\\">1</span> : <span class=\\\"hljs-number\\\">2</span>;\\n</code></pre>\\n<h4 id=\\\"位运算符\\\">位运算符</h4>\\n<ul>\\n<li><strong>&，</strong>二进制和运算</li>\\n<li><strong>|，</strong>二进制或运算</li>\\n<li><strong>^，</strong>二进制异或预算</li>\\n<li><strong>~，</strong>二进制逆运算</li>\\n</ul>\\n<h4 id=\\\"位移运算符以及二进制补码位移规则\\\">位移运算符以及二进制补码位移规则</h4>\\n<ul>\\n<li><strong>&lt;&lt; ,<strong>有符号左移，</strong>丢弃最高位，低位补0</strong> </li>\\n<li><strong>&gt;&gt; , <strong>有符号右移，</strong>符号位不变，左边依次补上符号位，且与此同时最低位要舍弃</strong> </li>\\n<li><strong>&gt;&gt;&gt; ,</strong> 无符号左移，<strong>符号位跟着左移，左边依次补上0，且与此同时最低位要舍弃</strong></li>\\n</ul>\\n<pre><code class=\\\"hljs language-java\\\"><span class=\\\"hljs-meta\\\">@Test</span>\\n<span class=\\\"hljs-keyword\\\">public</span> <span class=\\\"hljs-keyword\\\">void</span> <span class=\\\"hljs-title function_\\\">testShift</span><span class=\\\"hljs-params\\\">()</span>{\\n    <span class=\\\"hljs-type\\\">int</span> <span class=\\\"hljs-variable\\\">a</span> <span class=\\\"hljs-operator\\\">=</span> <span class=\\\"hljs-number\\\">8</span>;\\n    <span class=\\\"hljs-type\\\">int</span> <span class=\\\"hljs-variable\\\">b</span> <span class=\\\"hljs-operator\\\">=</span> <span class=\\\"hljs-number\\\">7</span>;\\n    <span class=\\\"hljs-type\\\">int</span> <span class=\\\"hljs-variable\\\">c</span> <span class=\\\"hljs-operator\\\">=</span> -<span class=\\\"hljs-number\\\">1</span>;\\n    System.out.println(a &gt;&gt; <span class=\\\"hljs-number\\\">1</span>);\\n    System.out.println(a &gt;&gt; <span class=\\\"hljs-number\\\">2</span>);\\n    System.out.println(b &lt;&lt; <span class=\\\"hljs-number\\\">1</span>);\\n    System.out.println(b &lt;&lt; <span class=\\\"hljs-number\\\">2</span>);\\n    System.out.println(c &gt;&gt; <span class=\\\"hljs-number\\\">1</span>);\\n    System.out.println(c &gt;&gt;&gt; <span class=\\\"hljs-number\\\">1</span>);\\n    System.out.println(c &gt;&gt;&gt; <span class=\\\"hljs-number\\\">2</span>);\\n}\\n</code></pre>\\n<pre><code class=\\\"hljs language-console\\\">4 // 0000 ... 0000 1000 -&gt; 0000 ... 0000 0100 -&gt; 8 / 2\\n2 // 0000 ... 0000 1000 -&gt; 0000 ... 0000 0010 -&gt; 8 / 4\\n14 // 0000 ... 0000 0111 -&gt; 0000 ... 0000 1110 -&gt; 7 * 2\\n28 // 0000 ... 0000 0111 -&gt; 0000 ... 0001 1100 -&gt; 7 * 4\\n-1 \\n2147483647\\n1073741823\\n</code></pre>\\n<p>上面的<strong>负数计算</strong>可能看不懂，我们先复习一下数的二进制表示</p>\\n<p>以有符号数来说，数的二进制表示有<strong>原码表示法</strong>、<strong>补码表示法</strong>、<strong>移码表示法</strong>我们观察以下码表</p>\\n<table>\\n<thead>\\n<tr>\\n<th align=\\\"center\\\">真值x（十进制）</th>\\n<th align=\\\"center\\\">真值x（二进制）</th>\\n<th align=\\\"center\\\">原码</th>\\n<th align=\\\"center\\\">反码（过渡）</th>\\n<th align=\\\"center\\\">补码</th>\\n<th align=\\\"center\\\">移码</th>\\n</tr>\\n</thead>\\n<tbody><tr>\\n<td align=\\\"center\\\">-127</td>\\n<td align=\\\"center\\\">- 0111 1111</td>\\n<td align=\\\"center\\\"><strong>1</strong> 111 1111</td>\\n<td align=\\\"center\\\"><strong>1</strong> 000 0000</td>\\n<td align=\\\"center\\\"><strong>1</strong> 000 0001</td>\\n<td align=\\\"center\\\"><strong>0</strong> 000 0001</td>\\n</tr>\\n<tr>\\n<td align=\\\"center\\\">-1</td>\\n<td align=\\\"center\\\">- 0000 0001</td>\\n<td align=\\\"center\\\"><strong>1</strong> 000 0001</td>\\n<td align=\\\"center\\\"><strong>1</strong> 111 1110</td>\\n<td align=\\\"center\\\"><strong>1</strong> 111 1111</td>\\n<td align=\\\"center\\\"><strong>0</strong> 111 1111</td>\\n</tr>\\n<tr>\\n<td align=\\\"center\\\">+0</td>\\n<td align=\\\"center\\\">+ 0000 0000</td>\\n<td align=\\\"center\\\"><strong>0</strong> 000 0000</td>\\n<td align=\\\"center\\\"><strong>0</strong> 000 0000</td>\\n<td align=\\\"center\\\"><strong>0</strong> 000 0000</td>\\n<td align=\\\"center\\\"><strong>1</strong> 000 0001</td>\\n</tr>\\n<tr>\\n<td align=\\\"center\\\">-0</td>\\n<td align=\\\"center\\\">- 0000 0000</td>\\n<td align=\\\"center\\\"><strong>1</strong> 000 0000</td>\\n<td align=\\\"center\\\"><strong>1</strong> 111 1111</td>\\n<td align=\\\"center\\\"><strong>0</strong> 000 0000</td>\\n<td align=\\\"center\\\"><strong>1</strong> 000 0001</td>\\n</tr>\\n<tr>\\n<td align=\\\"center\\\">+1</td>\\n<td align=\\\"center\\\">+ 0000 0001</td>\\n<td align=\\\"center\\\"><strong>0</strong> 000 0001</td>\\n<td align=\\\"center\\\"><strong>0</strong> 000 0001</td>\\n<td align=\\\"center\\\"><strong>0</strong> 000 0001</td>\\n<td align=\\\"center\\\"><strong>1</strong> 000 0001</td>\\n</tr>\\n<tr>\\n<td align=\\\"center\\\">+127</td>\\n<td align=\\\"center\\\">+ 0111 1111</td>\\n<td align=\\\"center\\\"><strong>0</strong> 111 1111</td>\\n<td align=\\\"center\\\"><strong>0</strong> 111 1111</td>\\n<td align=\\\"center\\\"><strong>0</strong> 111 1111</td>\\n<td align=\\\"center\\\"><strong>1</strong> 111 1111</td>\\n</tr>\\n</tbody></table>\\n<p>所以对于**-1**，Java中的的int长度为32，一步步来</p>\\n<p><strong>二进制真值表示：</strong>- 0000 0000 0000 0000 0000 0000 0000 0001</p>\\n<p>**二进制原码表示： ** <strong>1</strong>000 0000 0000 0000 0000 0000 0000 0001</p>\\n<p>**二进制反码表示： ** <strong>1</strong>111 1111 1111 1111 1111 1111 1111 1110</p>\\n<p>**二进制补码表示： ** <strong>1</strong>111 1111 1111 1111 1111 1111 1111 1111</p>\\n<p>我们始终都得记住这一点，<strong>计算机中的负数都是用二进制补码存储的</strong>，所以负数的二进制运算也是基于补码来算的</p>\\n<p><strong>所以：</strong></p>\\n<ul>\\n<li><p>当我们运算：**-1 &gt;&gt; 1** 的时候，<strong>符号位不变，左边依次补上符号位，且与此同时最低位要舍弃</strong> </p>\\n<p>**原补码： ** <strong>1</strong>111 1111 1111 1111 1111 1111 1111 1111</p>\\n<p>**新补码： ** <strong>1</strong>111 1111 1111 1111 1111 1111 1111 1111 <span style=\\\"color:red;font-weight:bold;\\\">1</span> &lt;---去掉</p>\\n<p>**得结果： ** <strong>1</strong>111 1111 1111 1111 1111 1111 1111 1111</p>\\n<p>去掉尾部多出来的1之后，整个补码表示的负数还是**-1**</p>\\n</li>\\n<li><p>当我们运算：**-1 &gt;&gt;&gt; 1** 的时候，<strong>符号位跟着左移，左边依次补上0，且与此同时最低位要舍弃</strong> </p>\\n<p>**原补码： ** <strong>1</strong>111 1111 1111 1111 1111 1111 1111 1111</p>\\n<p>**新补码： ** <strong>0</strong>111 1111 1111 1111 1111 1111 1111 1111 <span style=\\\"color:red;font-weight:bold;\\\">1</span> &lt;---去掉</p>\\n<p>**得结果： ** <strong>0</strong>111 1111 1111 1111 1111 1111 1111 1111</p>\\n<p>这个结果我们可以简单地由：<strong>2^31 - 1 = 2147483648 - 1 = 2147483647</strong> 去计算</p>\\n<p><strong>2147483647的补码正是0111 1111 1111 1111 1111 1111 1111 1111</strong></p>\\n</li>\\n<li><p>我们继续验算：**-1 &gt;&gt;&gt; 2** </p>\\n<p>**原补码： ** <strong>1</strong>111 1111 1111 1111 1111 1111 1111 1111</p>\\n<p>**新补码： ** <strong>0</strong>011 1111 1111 1111 1111 1111 1111 1111 <span style=\\\"color:red;font-weight:bold;\\\">11</span> &lt;---去掉</p>\\n<p>**得结果： ** <strong>0</strong>011 1111 1111 1111 1111 1111 1111 1111</p>\\n<p>这个结果我们可以简单地由：<strong>2^30 - 1 = 1073741824 - 1 = 1073741823</strong> 去计算</p>\\n<p><strong>1073741823的补码正是0011 1111 1111 1111 1111 1111 1111 1111</strong></p>\\n</li>\\n<li><p>我们继续验算：**-9 &gt;&gt;&gt; 4**</p>\\n<p>**有原码： ** <strong>1</strong>000 0000 0000 0000 0000 0000 0000 1001</p>\\n<p>**有反码： ** <strong>1</strong>111 1111 1111 1111 1111 1111 1111 0110</p>\\n<p>**有补码： ** <strong>1</strong>111 1111 1111 1111 1111 1111 1111 0111</p>\\n<p>**新补码： ** <strong>0</strong>000 1111 1111 1111 1111 1111 1111 1111 <span style=\\\"color:red;font-weight:bold;\\\">0111</span> &lt;---去掉</p>\\n<p>**得结果： ** <strong>0</strong>000 1111 1111 1111 1111 1111 1111 1111</p>\\n<p>这个结果我们可以简单地由：<strong>2^28 - 1 = 268435456 - 1 = 268435455</strong> 去计算</p>\\n<p><strong>268435455的补码正是0000 1111 1111 1111 1111 1111 1111 1111</strong></p>\\n</li>\\n</ul>\\n<h4 id=\\\"类型判断运算符\\\">类型判断运算符</h4>\\n<p>使用格式：</p>\\n<pre><code class=\\\"hljs language-java\\\">    object <span class=\\\"hljs-keyword\\\">instanceof</span> Class/SubClass/Interface\\n</code></pre>\\n<h4 id=\\\"位运算符位移运算符的使用场景\\\">位运算符/位移运算符的使用场景</h4>\\n<h5 id=\\\"2的次幂快速乘除运算\\\">2的次幂快速乘除运算</h5>\\n<p>看上面，有符号左右移，每移n位是运算2的n次幂乘除</p>\\n<h5 id=\\\"快速模2奇偶判断（不要再只会x--2--0啦）\\\">快速模2/奇偶判断（不要再只会x % 2 == 0啦）</h5>\\n<p>任意数与1取位与，结果为1则是奇数</p>\\n<pre><code class=\\\"hljs language-java\\\"><span class=\\\"hljs-comment\\\">// x & 1 等价于 x % 2</span>\\nSystem.out.println(<span class=\\\"hljs-number\\\">3</span> & <span class=\\\"hljs-number\\\">1</span>); <span class=\\\"hljs-comment\\\">//1</span>\\nSystem.out.println(<span class=\\\"hljs-number\\\">2</span> & <span class=\\\"hljs-number\\\">1</span>); <span class=\\\"hljs-comment\\\">//0</span>\\n</code></pre>\\n<h5 id=\\\"快速两数交换不用中间值\\\">快速两数交换/不用中间值</h5>\\n<pre><code class=\\\"hljs language-java\\\"><span class=\\\"hljs-type\\\">int</span> <span class=\\\"hljs-variable\\\">a</span> <span class=\\\"hljs-operator\\\">=</span> <span class=\\\"hljs-number\\\">999</span>;\\n<span class=\\\"hljs-type\\\">int</span> <span class=\\\"hljs-variable\\\">b</span> <span class=\\\"hljs-operator\\\">=</span> <span class=\\\"hljs-number\\\">888</span>;\\na ^= b;\\nb ^= a;\\na ^= b;\\nSystem.out.println(a); <span class=\\\"hljs-comment\\\">// 888</span>\\nSystem.out.println(b); <span class=\\\"hljs-comment\\\">// 999</span>\\n</code></pre>\\n<h5 id=\\\"加密解密\\\">加密解密</h5>\\n<pre><code class=\\\"hljs language-java\\\"><span class=\\\"hljs-meta\\\">@Test</span>\\n<span class=\\\"hljs-keyword\\\">public</span> <span class=\\\"hljs-keyword\\\">void</span> <span class=\\\"hljs-title function_\\\">testEncript</span><span class=\\\"hljs-params\\\">()</span>{\\n    <span class=\\\"hljs-type\\\">int</span> <span class=\\\"hljs-variable\\\">plaintext</span> <span class=\\\"hljs-operator\\\">=</span> <span class=\\\"hljs-number\\\">0b00001111</span>; <span class=\\\"hljs-comment\\\">// 0000 1111</span>\\n    <span class=\\\"hljs-type\\\">int</span> <span class=\\\"hljs-variable\\\">key</span> <span class=\\\"hljs-operator\\\">=</span>       <span class=\\\"hljs-number\\\">0b01010101</span>; <span class=\\\"hljs-comment\\\">// 0101 0101</span>\\n    \\n    <span class=\\\"hljs-comment\\\">//encription</span>\\n    <span class=\\\"hljs-type\\\">int</span> <span class=\\\"hljs-variable\\\">cipher</span> <span class=\\\"hljs-operator\\\">=</span> plaintext ^ key; <span class=\\\"hljs-comment\\\">// 0101 1010</span>\\n    \\n    <span class=\\\"hljs-comment\\\">//decription</span>\\n    <span class=\\\"hljs-type\\\">int</span> <span class=\\\"hljs-variable\\\">plaintext2</span> <span class=\\\"hljs-operator\\\">=</span> cipher ^ key; <span class=\\\"hljs-comment\\\">// 0000 1111</span>\\n}\\n</code></pre>\\n<h5 id=\\\"bitmask\\\">BitMask</h5>\\n<p>什么是BitMask？一般翻译为<strong>位掩码</strong>，是一种以高效、省空间的方式对<strong>状态（status）</strong>进行<strong>设置（set）、清零（clear）、检查（check）</strong>的位运算运用。</p>\\n<p>比如我们在业务中<strong>某条记录</strong>需要记录16个<strong>A业务状态</strong>，也就是需要4个bit位来记录我们的<strong>A业务状态</strong>，假设我们这条记录还有其他<strong>业务的状态</strong>，我们选择记录的第<strong>5-8位</strong>来记录<strong>A业务状态</strong>，则可以假设有如下记录：</p>\\n<p><strong>record：</strong>1001 <strong>0111</strong> 0010</p>\\n<p>则中间的<strong>0111</strong>才是我们真正想要操作的记录位，我们可以用<strong>BitMask</strong>来操作：</p>\\n<ul>\\n<li>设置<strong>BitMask：</strong>0x0<strong>F</strong>0 -&gt; 0000 <strong>1111</strong> 0000</li>\\n<li>对于<strong>检查（check）</strong>：<strong>record & mask</strong></li>\\n<li>对于<strong>清零（clear）</strong>：<strong>record & ~mask</strong></li>\\n<li>对于<strong>设置（set）</strong>：<strong>record & ~mask | status binary code</strong></li>\\n</ul>\\n<pre><code class=\\\"hljs language-java\\\"><span class=\\\"hljs-meta\\\">@Test</span>\\n<span class=\\\"hljs-keyword\\\">public</span> <span class=\\\"hljs-keyword\\\">void</span> <span class=\\\"hljs-title function_\\\">testBitMask</span><span class=\\\"hljs-params\\\">()</span>{\\n    <span class=\\\"hljs-comment\\\">// Mask: 0000 1111 0000 -&gt; 0x0F0 -&gt; 240</span>\\n    <span class=\\\"hljs-type\\\">int</span> <span class=\\\"hljs-variable\\\">mask</span> <span class=\\\"hljs-operator\\\">=</span> <span class=\\\"hljs-number\\\">0x0F0</span>;\\n    <span class=\\\"hljs-comment\\\">// Record: 0111 0011 1111 -&gt; 0x73F -&gt; 1855</span>\\n    <span class=\\\"hljs-type\\\">int</span> <span class=\\\"hljs-variable\\\">record</span> <span class=\\\"hljs-operator\\\">=</span> <span class=\\\"hljs-number\\\">0x73F</span>;\\n    <span class=\\\"hljs-type\\\">int</span> status;\\n    <span class=\\\"hljs-comment\\\">// check</span>\\n    status = record & mask;\\n    System.out.println(status); <span class=\\\"hljs-comment\\\">// 48 -&gt; 0000 0011 0000</span>\\n    <span class=\\\"hljs-comment\\\">// clear</span>\\n    status = record & ~mask;\\n    System.out.println(status); <span class=\\\"hljs-comment\\\">// 1807 -&gt; 0111 0000 1111</span>\\n    <span class=\\\"hljs-comment\\\">// set</span>\\n    status = record & ~mask | <span class=\\\"hljs-number\\\">0x060</span>;\\n    System.out.println(status); <span class=\\\"hljs-comment\\\">// 1903 -&gt; 0111 0110 1111</span>\\n}\\n</code></pre>\\n<h3 id=\\\"bitmap算法\\\">BitMap算法</h3>\\n<p>类似于BitMask的思想，只不过BitMap是用于大量单一数据的状态，比如问题：</p>\\n<p>给定范围<code>[1-10]</code>中取任意5个数字，再任意给一个数字n，判断这个数字是否被获取过。</p>\\n<p>假设被取出的数字为<code>[5,7,1,9,3]</code>我们可以用一个数组表示范围内的数字，其中数组的元素占计算机中的1位：</p>\\n<pre><code class=\\\"hljs language-graph\\\">┌---┐┌---┐┌---┐┌---┐┌---┐┌---┐┌---┐┌---┐┌---┐┌---┐\\n| 1 || 0 || 1 || 0 || 1 || 0 || 1 || 0 || 1 || 0 |\\n└---┘└---┘└---┘└---┘└---┘└---┘└---┘└---┘└---┘└---┘\\n  0    1    2    3    4    5    6    7    8    9\\n</code></pre>\\n<p>而在Java中：</p>\\n<table>\\n<thead>\\n<tr>\\n<th>简单类型</th>\\n<th>boolean</th>\\n<th>byte</th>\\n<th>char</th>\\n<th>short</th>\\n<th>Int</th>\\n<th>long</th>\\n<th>float</th>\\n<th>double</th>\\n<th>void</th>\\n</tr>\\n</thead>\\n<tbody><tr>\\n<td>二进制位数</td>\\n<td>1</td>\\n<td>8</td>\\n<td>16</td>\\n<td>16</td>\\n<td>32</td>\\n<td>64</td>\\n<td>32</td>\\n<td>64</td>\\n<td>--</td>\\n</tr>\\n<tr>\\n<td>封装器类</td>\\n<td>Boolean</td>\\n<td>Byte</td>\\n<td>Character</td>\\n<td>Short</td>\\n<td>Integer</td>\\n<td>Long</td>\\n<td>Float</td>\\n<td>Double</td>\\n<td>Void</td>\\n</tr>\\n</tbody></table>\\n<p>布尔类型符合数组要求，于是申请<code>boolean[] map = new boolean[10]</code>，然后进行后续操作</p>\\n<h4 id=\\\"题1：40亿\\\">题1：40亿</h4>\\n<p><strong>给40亿个不重复的Unsigned Int的整数，乱序，然后再给一个数，如何快速判断这个数是否在那40亿个数当中，要求内存限制2GB；</strong></p>\\n<p>40亿个<strong>Unsigned Int</strong>的整数，如果放到内存， 那就是大约16G的空间：</p>\\n<p>一个整型32bit，占4B，那么40亿个4B就是160亿B，</p>\\n<p><span class=\\\"katex-display katexp\\\"><span class=\\\"katex-display\\\"><span class=\\\"katex\\\"><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.6833em;\\\"></span><span class=\\\"mord\\\">1</span><span class=\\\"mord mathnormal\\\">G</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2778em;\\\"></span><span class=\\\"mrel\\\">≈</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2778em;\\\"></span></span><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.8641em;\\\"></span><span class=\\\"mord\\\">1</span><span class=\\\"mord\\\"><span class=\\\"mord\\\">0</span><span class=\\\"msupsub\\\"><span class=\\\"vlist-t\\\"><span class=\\\"vlist-r\\\"><span class=\\\"vlist\\\" style=\\\"height:0.8641em;\\\"><span style=\\\"top:-3.113em;margin-right:0.05em;\\\"><span class=\\\"pstrut\\\" style=\\\"height:2.7em;\\\"></span><span class=\\\"sizing reset-size6 size3 mtight\\\"><span class=\\\"mord mtight\\\">3</span></span></span></span></span></span></span></span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.05017em;\\\">MB</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2778em;\\\"></span><span class=\\\"mrel\\\">≈</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2778em;\\\"></span></span><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.8641em;\\\"></span><span class=\\\"mord\\\">1</span><span class=\\\"mord\\\"><span class=\\\"mord\\\">0</span><span class=\\\"msupsub\\\"><span class=\\\"vlist-t\\\"><span class=\\\"vlist-r\\\"><span class=\\\"vlist\\\" style=\\\"height:0.8641em;\\\"><span style=\\\"top:-3.113em;margin-right:0.05em;\\\"><span class=\\\"pstrut\\\" style=\\\"height:2.7em;\\\"></span><span class=\\\"sizing reset-size6 size3 mtight\\\"><span class=\\\"mord mtight\\\">6</span></span></span></span></span></span></span></span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.07153em;\\\">K</span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.05017em;\\\">B</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2778em;\\\"></span><span class=\\\"mrel\\\">≈</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2778em;\\\"></span></span><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.8641em;\\\"></span><span class=\\\"mord\\\">1</span><span class=\\\"mord\\\"><span class=\\\"mord\\\">0</span><span class=\\\"msupsub\\\"><span class=\\\"vlist-t\\\"><span class=\\\"vlist-r\\\"><span class=\\\"vlist\\\" style=\\\"height:0.8641em;\\\"><span style=\\\"top:-3.113em;margin-right:0.05em;\\\"><span class=\\\"pstrut\\\" style=\\\"height:2.7em;\\\"></span><span class=\\\"sizing reset-size6 size3 mtight\\\"><span class=\\\"mord mtight\\\">9</span></span></span></span></span></span></span></span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.05017em;\\\">B</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2778em;\\\"></span><span class=\\\"mrel\\\">=</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2778em;\\\"></span></span><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.6833em;\\\"></span><span class=\\\"mord\\\">10</span><span class=\\\"mord cjk_fallback\\\">亿</span></span></span></span></span></span>\\n而<strong>Unsigned Int</strong>的整数的取值范围是<code>[0 ~ 2^32-1]</code>，最大值是<code>4,294,967,295</code>，约42亿</p>\\n<p>而在Java中，JDK也有可供使用的BitMap，叫做<code>BitSet</code>类，但是它只能存储0到<code>Integer.MAX_VALUE</code>也就是21亿多，所以我们可以使用Lucene提供的工具类<code>org.apache.lucene.util.LongBitSet</code>，它最大支持千亿量级的位图（具体应该是看机器配置）</p>\\n<p>我们设定一个43亿比特位的<code>LongBitSet</code>需要占用约520MB的内存</p>\\n<p>不要想当然地说使用boolean数组，虽然一个boolean变量占1比特，但是除了要补位之外，boolean数组的内存占用大小可不是单只按照bit来计算的，一样是4Byte来计算，所以初始化一个<code>new boolean[Integer.MAX_VALUE - 2]</code>这样的事情不可取，经过测试，一个<code>new boolean[Integer.MAX_VALUE / 2]</code>的数组就需要1G内存，所以还是使用<code>BitSet</code>或者<code>LongBitSet</code>好</p>\\n<hr>\\n<p><strong>参考</strong></p>\\n<p><a href=\\\"https://www.geeksforgeeks.org/operators-in-java/#Unary%20Operators\\\">https://www.geeksforgeeks.org/operators-in-java/#Unary%20Operators</a></p>\\n<p><a href=\\\"http://www.52ij.com/jishu/102.html\\\">http://www.52ij.com/jishu/102.html</a></p>\\n<p><a href=\\\"https://segmentfault.com/q/1010000005850046\\\">https://segmentfault.com/q/1010000005850046</a></p>\\n<p><a href=\\\"https://blog.csdn.net/tangxiaoyin/article/details/80123142\\\">https://blog.csdn.net/tangxiaoyin/article/details/80123142</a></p>\\n<p><a href=\\\"https://www.cnblogs.com/wuyudong/p/bitmap.html\\\">https://www.cnblogs.com/wuyudong/p/bitmap.html</a></p>\\n\";","export default \"<h3 id=\\\"docker-concepts\\\">Docker concepts</h3>\\n<p>Docker is a platform for developers and sysadmins to <strong>develop, deploy, and run</strong> applications with containers. The use of Linux containers to deploy applications is called <em>containerization</em>. Containers are not new, but their use for easily deploying applications is.</p>\\n<p>Containerization is increasingly popular because containers are:</p>\\n<ul>\\n<li>Flexible: Even the most complex applications can be containerized.</li>\\n<li>Lightweight: Containers leverage and share the host kernel.</li>\\n<li>Interchangeable: You can deploy updates and upgrades on-the-fly.</li>\\n<li>Portable: You can build locally, deploy to the cloud, and run anywhere.</li>\\n<li>Scalable: You can increase and automatically distribute container replicas.</li>\\n<li>Stackable: You can stack services vertically and on-the-fly.</li>\\n</ul>\\n<blockquote>\\n<p>优点巨多，这也是为什么开发中 vm 被 container 技术迅速淘汰的原因</p>\\n</blockquote>\\n<p><img src=\\\"https://docs.docker.com/get-started/images/laurel-docker-containers.png\\\" alt=\\\"Containers are portable\\\"></p>\\n<h4 id=\\\"images-and-containers\\\">Images and containers</h4>\\n<p>A container is launched by running an image. An <strong>image</strong> is an executable package that includes everything needed to run an application--the code, a runtime, libraries, environment variables, and configuration files.</p>\\n<p>A <strong>container</strong> is a runtime instance of an image--what the image becomes in memory when executed (that is, an image with state, or a user process). You can see a list of your running containers with the command, <code>docker ps</code>, just as you would in Linux.</p>\\n<blockquote>\\n<p>这里表明了 image 是一个只读的镜像，包含了运行 app 所需要的代码/运行库/运行环变量/配置文件</p>\\n<p>而 container 是一个运行时的 image 实例</p>\\n</blockquote>\\n<h4 id=\\\"containers-and-virtual-machines\\\">Containers and virtual machines</h4>\\n<p>A <strong>container</strong> runs <em>natively</em> on Linux and shares the kernel of the host machine with other containers. It runs a discrete process, taking no more memory than any other executable, making it lightweight.</p>\\n<p>By contrast, a <strong>virtual machine</strong> (VM) runs a full-blown “guest” operating system with <em>virtual</em> access to host resources through a hypervisor. In general, VMs provide an environment with more resources than most applications need.</p>\\n<p><img src=\\\"../../../public/img/20181116135034.png\\\" alt=\\\"\\\"></p>\\n<h3 id=\\\"setup\\\">Setup</h3>\\n<h4 id=\\\"installation\\\">Installation</h4>\\n<p>For more information, please go to the official site :</p>\\n<p><a href=\\\"https://docs.docker.com/install/linux/docker-ce/centos/#upgrade-docker-ce-1\\\">https://docs.docker.com/install/linux/docker-ce/centos/#upgrade-docker-ce-1</a></p>\\n<ol>\\n<li><p>update yum packages</p>\\n<pre><code class=\\\"hljs language-bash\\\">$ sudo yum update\\n</code></pre>\\n</li>\\n<li><p>perform the docker installation script(<a href=\\\"http://www.docker.org.cn/book/install/install-docker-on-rhel-29.html\\\" title=\\\"docker installation reference\\\">reference here</a>)</p>\\n<pre><code class=\\\"hljs language-bash\\\">$ curl -sSL https://get.docker.com/ | sh\\n</code></pre>\\n<p>if it&#39;s error because the fallowing problem:</p>\\n<pre><code class=\\\"hljs language-ba\\\">Error: Package: docker-ce-17.06.0.ce-1.el7.centos.x86_64 (docker-ce-stable)\\n           Requires: container-selinux &gt;= 2.9\\n You could try using --skip-broken to work around the problem\\n You could try running: rpm -Va --nofiles --nodigest\\n</code></pre>\\n<p>seems like you should update or get your container-selinux before your installation move forward, here is the solution reference on <a href=\\\"https://stackoverflow.com/questions/45272827/docker-ce-on-rhel-requires-container-selinux-2-9\\\" title=\\\"requires container-selinux\\\">requires container-selinux</a>:</p>\\n<blockquote>\\n<p>Installing the Selinux from the Centos repository worked for me:</p>\\n<ol>\\n<li>Go to <a href=\\\"http://mirror.centos.org/centos/7/extras/x86_64/Packages/\\\">http://mirror.centos.org/centos/7/extras/x86_64/Packages/</a></li>\\n<li>Find the latest version for container-selinux i.e. container-selinux-2.21-1.el7.noarch.rpm</li>\\n<li>Run the following command on your terminal: $ sudo yum install -y <a href=\\\"http://mirror.centos.org/centos/7/extras/x86_64/Packages/**Add_current_container-selinux_package_here\\\">http://mirror.centos.org/centos/7/extras/x86_64/Packages/**Add_current_container-selinux_package_here</a>**</li>\\n<li>The command should looks like the following $ sudo yum install -y <a href=\\\"http://mirror.centos.org/centos/7/extras/x86_64/Packages/container-selinux-2.21-1.el7.noarch.rpm\\\">http://mirror.centos.org/centos/7/extras/x86_64/Packages/container-selinux-2.21-1.el7.noarch.rpm</a>\\nNote: the container version is constantly being updated, that is why you should look for the latest version in the Centos&#39; repository</li>\\n</ol>\\n</blockquote>\\n<p>for now it may look like:</p>\\n<pre><code class=\\\"hljs language-bash\\\">$ sudo yum install -y http://mirror.centos.org/centos/7/extras/x86_64/Packages/container-selinux-2.55-1.el7.noarch.rpm\\n</code></pre>\\n<p>then you could try the installation script again and it should be done</p>\\n</li>\\n<li><p>start docker service</p>\\n<pre><code class=\\\"hljs language-bash\\\">$ sudo service docker start\\n[sudo] password <span class=\\\"hljs-keyword\\\">for</span> xxx:\\nRedirecting to /bin/systemctl start docker.service\\n</code></pre>\\n</li>\\n</ol>\\n<h4 id=\\\"verify-your-installation\\\">Verify your installation</h4>\\n<pre><code class=\\\"hljs language-bash\\\">$ sudo docker run hello-world\\nUnable to find image <span class=\\\"hljs-string\\\">&#x27;hello-world:latest&#x27;</span> locally\\nlatest: Pulling from library/hello-world\\nd1725b59e92d: Pull complete\\nDigest: sha256:0add3ace90ecb4adbf7777e9aacf18357296e799f81cabc9fde470971e499788\\nStatus: Downloaded newer image <span class=\\\"hljs-keyword\\\">for</span> hello-world:latest\\n\\nHello from Docker!\\nThis message shows that your installation appears to be working correctly.\\n\\nTo generate this message, Docker took the following steps:\\n1. The Docker client contacted the Docker daemon.\\n2. The Docker daemon pulled the <span class=\\\"hljs-string\\\">&quot;hello-world&quot;</span> image from the Docker Hub.\\n   (amd64)\\n3. The Docker daemon created a new container from that image <span class=\\\"hljs-built_in\\\">which</span> runs the\\n   executable that produces the output you are currently reading.\\n4. The Docker daemon streamed that output to the Docker client, <span class=\\\"hljs-built_in\\\">which</span> sent it\\n   to your terminal.\\n\\nTo try something more ambitious, you can run an Ubuntu container with:\\n$ docker run -it ubuntu bash\\n\\nShare images, automate workflows, and more with a free Docker ID:\\nhttps://hub.docker.com/\\n\\nFor more examples and ideas, visit:\\nhttps://docs.docker.com/get-started/\\n</code></pre>\\n<h3 id=\\\"optional-linux-post-installation-steps\\\">Optional Linux post-installation steps</h3>\\n<h4 id=\\\"manage-docker-as-a-non-root-user\\\">Manage Docker as a non-root user</h4>\\n<p>You might trouble with permissions problems like:</p>\\n<pre><code class=\\\"hljs language-bash\\\">$ docker ps\\nGot permission denied <span class=\\\"hljs-keyword\\\">while</span> trying to connect to the Docker daemon socket at unix:///var/run/docker.sock: Get http://%2Fvar%2Frun%2Fdocker.sock/v1.39/containers/json: dial unix /var/run/docker.sock: connect: permission denied\\n</code></pre>\\n<p>It&#39;s because the Docker daemon binds to a Unix socket instead of a TCP port. By default that Unix socket is owned by the user <code>root</code> and other users can only access it using <code>sudo</code>. The Docker daemon always runs as the <code>root</code> user.</p>\\n<p>If you don’t want to preface the <code>docker</code> command with <code>sudo</code>, create a Unix group called <code>docker</code> and add users to it. When the Docker daemon starts, it creates a Unix socket accessible by members of the <code>docker</code> group.</p>\\n<ol>\\n<li><p>create the docker group:</p>\\n<pre><code class=\\\"hljs language-bash\\\">$ sudo groupadd docker\\n</code></pre>\\n</li>\\n<li><p>add your user to the <code>docker</code> group</p>\\n<pre><code class=\\\"hljs language-bash\\\">$ sudo usermod -aG docker <span class=\\\"hljs-variable\\\">$USER</span>\\n</code></pre>\\n<p>or</p>\\n<pre><code class=\\\"hljs language-bash\\\">$ sudo gpasswd -a <span class=\\\"hljs-variable\\\">$USER</span> docker\\n</code></pre>\\n</li>\\n<li><p>update the group</p>\\n<pre><code class=\\\"hljs language-bash\\\">$ newgrp docker\\n</code></pre>\\n</li>\\n</ol>\\n<p>Then you can run docker commands without sudo.</p>\\n<h4 id=\\\"configure-docker-to-start-on-boot\\\">Configure Docker to start on boot</h4>\\n<p>Most current Linux distributions (RHEL, CentOS, Fedora, Ubuntu 16.04 and higher) use <a href=\\\"https://docs.docker.com/install/linux/linux-postinstall/#systemd\\\"><code>systemd</code></a> to manage which services start when the system boots. Ubuntu 14.10 and below use <a href=\\\"https://docs.docker.com/install/linux/linux-postinstall/#upstart\\\"><code>upstart</code></a>.</p>\\n<h5 id=\\\"systemd\\\"><code>systemd</code></h5>\\n<pre><code>$ sudo systemctl enable docker\\n</code></pre>\\n<p>To disable this behavior, use <code>disable</code> instead.</p>\\n<pre><code>$ sudo systemctl disable docker\\n</code></pre>\\n<p>If you need to add an HTTP Proxy, set a different directory or partition for the Docker runtime files, or make other customizations, see<a href=\\\"https://docs.docker.com/engine/admin/systemd/\\\">customize your systemd Docker daemon options</a>.</p>\\n<h4 id=\\\"more-options\\\">More options</h4>\\n<p>Please refer to <a href=\\\"https://docs.docker.com/install/linux/linux-postinstall\\\" title=\\\"docker post installation options\\\">post-install</a></p>\\n<p>Congrats and enjoy your journey of docker~</p>\\n<hr>\\n\";","export default \"<h3 id=\\\"what-is-hashtable\\\">What is HashTable</h3>\\n<p>Of all structure we learn before like &quot;array&quot; or &quot;stack&quot;, the element&#39;s position on their structure is not absolute, it&#39;s uncertain which means there is no pattern on it.  </p>\\n<p>So the searching operation was always base on &quot;comparing&quot;,  the searching efficiency of them were dependence on the times they perform compare.</p>\\n<p>In a perfect situation is that we don&#39;t want to do any comparing opts, them we grape the element at once. So we need something to record the relationship between key value and the place where it store. Then next time we seek a key, we would able to use this relationship to grape it immediately.</p>\\n<p>We define the relationship as <strong>&quot;Hash&quot;</strong>.</p>\\n<p><img src=\\\"https://www.geeksforgeeks.org/wp-content/uploads/HashingDataStructure-min-768x384.png\\\" alt=\\\"hashing ds\\\"></p>\\n<p>And we will discuss two aspect of it: <strong>&quot;Hash Method&quot;</strong> & <strong>&quot;Collision Handle&quot;</strong></p>\\n<h3 id=\\\"hash-method\\\">Hash Method</h3>\\n<p>There are many ways to hash, and we better know what is a good hash method before we code it.</p>\\n<p>A good hash method will mapping any key to a un-used place, which means there is no collision for all elements. The probability of it is all with the same. We call it <strong>Uniform Hash Method</strong>.</p>\\n<p><strong>Capture information on key</strong></p>\\n<p><span class=\\\"katex-display katexp\\\"><span class=\\\"katex-display\\\"><span class=\\\"katex\\\"><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:1em;vertical-align:-0.25em;\\\"></span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.08125em;\\\">H</span><span class=\\\"mopen\\\">(</span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.03148em;\\\">k</span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.03588em;\\\">ey</span><span class=\\\"mclose\\\">)</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2778em;\\\"></span><span class=\\\"mrel\\\">=</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2778em;\\\"></span></span><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.8889em;vertical-align:-0.1944em;\\\"></span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.03148em;\\\">k</span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.03588em;\\\">ey</span></span><span class=\\\"mspace newline\\\"></span><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:1em;vertical-align:-0.25em;\\\"></span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.08125em;\\\">H</span><span class=\\\"mopen\\\">(</span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.03148em;\\\">k</span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.03588em;\\\">ey</span><span class=\\\"mclose\\\">)</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2778em;\\\"></span><span class=\\\"mrel\\\">=</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2778em;\\\"></span></span><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.8889em;vertical-align:-0.1944em;\\\"></span><span class=\\\"mord mathnormal\\\">a</span><span class=\\\"mpunct\\\">⋅</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.1667em;\\\"></span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.03148em;\\\">k</span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.03588em;\\\">ey</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2222em;\\\"></span><span class=\\\"mbin\\\">+</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2222em;\\\"></span></span><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.6944em;\\\"></span><span class=\\\"mord mathnormal\\\">b</span></span></span></span></span></span></p>\\n<p><strong>Mod</strong>\\n<span class=\\\"katex-display katexp\\\"><span class=\\\"katex-display\\\"><span class=\\\"katex\\\"><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:1em;vertical-align:-0.25em;\\\"></span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.08125em;\\\">H</span><span class=\\\"mopen\\\">(</span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.03148em;\\\">k</span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.03588em;\\\">ey</span><span class=\\\"mclose\\\">)</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2778em;\\\"></span><span class=\\\"mrel\\\">=</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2778em;\\\"></span></span><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:1em;vertical-align:-0.25em;\\\"></span><span class=\\\"mord\\\">∣</span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.03148em;\\\">k</span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.03588em;\\\">ey</span><span class=\\\"mord\\\">∣</span><span class=\\\"mspace allowbreak\\\"></span><span class=\\\"mspace\\\" style=\\\"margin-right:1em;\\\"></span></span><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.6944em;\\\"></span><span class=\\\"mord\\\"><span class=\\\"mord\\\"><span class=\\\"mord mathrm\\\">mod</span></span></span><span class=\\\"mspace\\\" style=\\\"margin-right:0.1667em;\\\"></span><span class=\\\"mspace\\\" style=\\\"margin-right:0.1667em;\\\"></span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.02778em;\\\">r</span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.03148em;\\\">ank</span></span></span></span></span></span>\\nAssume thay our hash-table&#39;s length is <strong>rank</strong>, with this way, we could always get a rightful index of it.</p>\\n<h3 id=\\\"collision-handle\\\">Collision Handle</h3>\\n<p>Since a hash function gets us a small number for a big key, there is possibility that two keys result in same value. The situation where a newly inserted key maps to an already occupied slot in hash table is called collision and must be handled using some collision handling technique. Following are the ways to handle collisions:</p>\\n<ul>\\n<li><p>**Chaining:**The idea is to make each cell of hash table point to a linked list of records that have same hash function value. Chaining is simple, but requires additional memory outside the table.</p>\\n<p>  Like JDK&#39;s <code>HashMap</code>, link nodes when meet collision.</p>\\n</li>\\n<li><p><strong>Open Addressing:</strong> In open addressing, all elements are stored in the hash table itself. Each table entry contains either a record or NIL. When searching for an element, we one by one examine table slots until the desired element is found or it is clear that the element is not in the table.</p>\\n<p>  We need a offset to avoid the collision:</p>\\n<ol>\\n<li>Linear Detection：[1，2，3，4，┈，m - 1] <strong>forward</strong>, [-1，-2，-3，-4，┈，0] <strong>backward</strong></li>\\n<li>Quadratic Linear Detection：1^2, -1^2, 2^2, -2^2, 3^2 ┈</li>\\n</ol>\\n</li>\\n<li><p><strong>Re-Hashing:</strong> set multiple stage for hash method, hash util no collision</p>\\n</li>\\n</ul>\\n<h3 id=\\\"practice\\\">Practice</h3>\\n<pre><code class=\\\"hljs language-java\\\"><span class=\\\"hljs-keyword\\\">public</span> <span class=\\\"hljs-keyword\\\">interface</span> <span class=\\\"hljs-title class_\\\">HashableInteger</span> {\\n    <span class=\\\"hljs-type\\\">int</span> <span class=\\\"hljs-title function_\\\">hash</span><span class=\\\"hljs-params\\\">(<span class=\\\"hljs-type\\\">int</span> key)</span>;\\n    <span class=\\\"hljs-type\\\">int</span> <span class=\\\"hljs-title function_\\\">collisionHandle</span><span class=\\\"hljs-params\\\">(<span class=\\\"hljs-type\\\">int</span> key)</span>;\\n    <span class=\\\"hljs-keyword\\\">void</span> <span class=\\\"hljs-title function_\\\">setHashTable</span><span class=\\\"hljs-params\\\">(<span class=\\\"hljs-type\\\">int</span>[] originSequence)</span>;\\n    <span class=\\\"hljs-type\\\">int</span> <span class=\\\"hljs-title function_\\\">seek</span><span class=\\\"hljs-params\\\">(<span class=\\\"hljs-type\\\">int</span> key)</span>;\\n    <span class=\\\"hljs-keyword\\\">void</span> <span class=\\\"hljs-title function_\\\">showTable</span><span class=\\\"hljs-params\\\">()</span>;\\n}\\n</code></pre>\\n<h4 id=\\\"linear-detection-hashtable\\\">Linear Detection HashTable</h4>\\n<pre><code class=\\\"hljs language-java\\\"><span class=\\\"hljs-keyword\\\">public</span> <span class=\\\"hljs-keyword\\\">class</span> <span class=\\\"hljs-title class_\\\">LdHashTable</span> <span class=\\\"hljs-keyword\\\">implements</span> <span class=\\\"hljs-title class_\\\">HashableInteger</span> {\\n    <span class=\\\"hljs-keyword\\\">private</span> Integer[] table;\\n    <span class=\\\"hljs-keyword\\\">public</span> <span class=\\\"hljs-title function_\\\">LdHashTable</span><span class=\\\"hljs-params\\\">(<span class=\\\"hljs-type\\\">int</span>[] originSeq)</span> {setHashTable(originSeq);}\\n\\n    <span class=\\\"hljs-meta\\\">@Override</span>\\n    <span class=\\\"hljs-keyword\\\">public</span> <span class=\\\"hljs-type\\\">int</span> <span class=\\\"hljs-title function_\\\">hash</span><span class=\\\"hljs-params\\\">(<span class=\\\"hljs-type\\\">int</span> key)</span> {\\n        <span class=\\\"hljs-keyword\\\">return</span> Math.abs(key) % table.length;\\n    }\\n    <span class=\\\"hljs-meta\\\">@Override</span>\\n    <span class=\\\"hljs-keyword\\\">public</span> <span class=\\\"hljs-type\\\">int</span> <span class=\\\"hljs-title function_\\\">collisionHandle</span><span class=\\\"hljs-params\\\">(<span class=\\\"hljs-type\\\">int</span> key)</span> {\\n        <span class=\\\"hljs-keyword\\\">return</span> linearDetection(key, <span class=\\\"hljs-literal\\\">false</span>);\\n    }\\n    <span class=\\\"hljs-meta\\\">@Override</span>\\n    <span class=\\\"hljs-keyword\\\">public</span> <span class=\\\"hljs-keyword\\\">void</span> <span class=\\\"hljs-title function_\\\">setHashTable</span><span class=\\\"hljs-params\\\">(<span class=\\\"hljs-type\\\">int</span>[] originalSeq)</span> {\\n        <span class=\\\"hljs-comment\\\">// table&#x27;s rank is double</span>\\n        <span class=\\\"hljs-built_in\\\">this</span>.table = <span class=\\\"hljs-keyword\\\">new</span> <span class=\\\"hljs-title class_\\\">Integer</span>[originalSeq.length &lt;&lt; <span class=\\\"hljs-number\\\">1</span>];\\n        <span class=\\\"hljs-keyword\\\">for</span> (<span class=\\\"hljs-type\\\">int</span> key : originalSeq) {\\n            <span class=\\\"hljs-comment\\\">// detection the right place the key should set on hash table</span>\\n            <span class=\\\"hljs-type\\\">int</span> <span class=\\\"hljs-variable\\\">place</span> <span class=\\\"hljs-operator\\\">=</span> collisionHandle(key);\\n            table[place] = key;\\n        }\\n    }\\n    <span class=\\\"hljs-meta\\\">@Override</span>\\n    <span class=\\\"hljs-keyword\\\">public</span> <span class=\\\"hljs-type\\\">int</span> <span class=\\\"hljs-title function_\\\">seek</span><span class=\\\"hljs-params\\\">(<span class=\\\"hljs-type\\\">int</span> key)</span> {\\n        <span class=\\\"hljs-keyword\\\">return</span> linearDetection(key, <span class=\\\"hljs-literal\\\">true</span>);\\n    }\\n    <span class=\\\"hljs-meta\\\">@Override</span>\\n    <span class=\\\"hljs-keyword\\\">public</span> <span class=\\\"hljs-keyword\\\">void</span> <span class=\\\"hljs-title function_\\\">showTable</span><span class=\\\"hljs-params\\\">()</span> {\\n        System.out.println(Arrays.toString(table));\\n    }\\n    <span class=\\\"hljs-keyword\\\">private</span> <span class=\\\"hljs-type\\\">int</span> <span class=\\\"hljs-title function_\\\">linearDetection</span><span class=\\\"hljs-params\\\">(<span class=\\\"hljs-type\\\">int</span> key, <span class=\\\"hljs-type\\\">boolean</span> seek)</span> {\\n        <span class=\\\"hljs-type\\\">int</span> <span class=\\\"hljs-variable\\\">hash</span> <span class=\\\"hljs-operator\\\">=</span> hash(key);\\n        <span class=\\\"hljs-comment\\\">// detect key&#x27;s position in hash table at once hash()</span>\\n        <span class=\\\"hljs-keyword\\\">if</span> (!seek && table[hash] == <span class=\\\"hljs-literal\\\">null</span>) {\\n            <span class=\\\"hljs-keyword\\\">return</span> hash;\\n        } <span class=\\\"hljs-keyword\\\">else</span> <span class=\\\"hljs-keyword\\\">if</span> (seek && table[hash] == <span class=\\\"hljs-literal\\\">null</span>) {\\n            <span class=\\\"hljs-comment\\\">// no match found</span>\\n            <span class=\\\"hljs-keyword\\\">return</span> -<span class=\\\"hljs-number\\\">1</span>;\\n        } <span class=\\\"hljs-keyword\\\">else</span> <span class=\\\"hljs-keyword\\\">if</span> (seek && table[hash] == key) {\\n            <span class=\\\"hljs-comment\\\">// match key</span>\\n            <span class=\\\"hljs-keyword\\\">return</span> hash;\\n        } <span class=\\\"hljs-keyword\\\">else</span> {\\n            <span class=\\\"hljs-comment\\\">// collsion handle with linear detection</span>\\n            <span class=\\\"hljs-type\\\">int</span> <span class=\\\"hljs-variable\\\">offset</span> <span class=\\\"hljs-operator\\\">=</span> <span class=\\\"hljs-number\\\">1</span>;\\n            <span class=\\\"hljs-type\\\">boolean</span> <span class=\\\"hljs-variable\\\">after</span> <span class=\\\"hljs-operator\\\">=</span> <span class=\\\"hljs-literal\\\">false</span>;\\n            <span class=\\\"hljs-comment\\\">// linear detect forward</span>\\n            <span class=\\\"hljs-keyword\\\">while</span> (hash + offSet &lt; table.length) {\\n                <span class=\\\"hljs-keyword\\\">if</span> (!seek && table[hash + offSet] == <span class=\\\"hljs-literal\\\">null</span>) {\\n                    <span class=\\\"hljs-keyword\\\">break</span>;\\n                } <span class=\\\"hljs-keyword\\\">else</span> <span class=\\\"hljs-keyword\\\">if</span> (seek && table[hash + offSet] == <span class=\\\"hljs-literal\\\">null</span>) {\\n                    <span class=\\\"hljs-keyword\\\">return</span> -<span class=\\\"hljs-number\\\">1</span>;\\n                } <span class=\\\"hljs-keyword\\\">else</span> <span class=\\\"hljs-keyword\\\">if</span> (seek && table[hash + offSet] == key) {\\n                    <span class=\\\"hljs-keyword\\\">return</span> hash + offSet;\\n                }\\n                offSet++;\\n            }\\n            <span class=\\\"hljs-comment\\\">// liner detect backward</span>\\n            <span class=\\\"hljs-keyword\\\">if</span> (hash + offSet == table.length) {\\n                offSet = <span class=\\\"hljs-number\\\">1</span>;\\n                <span class=\\\"hljs-keyword\\\">while</span> (hash - offSet &gt;= <span class=\\\"hljs-number\\\">0</span>) {\\n                    <span class=\\\"hljs-keyword\\\">if</span> (!seek && table[hash - offSet] == <span class=\\\"hljs-literal\\\">null</span>) {\\n                        <span class=\\\"hljs-keyword\\\">break</span>;\\n                    } <span class=\\\"hljs-keyword\\\">else</span> <span class=\\\"hljs-keyword\\\">if</span> (seek && table[hash - offSet] == <span class=\\\"hljs-literal\\\">null</span>) {\\n                        <span class=\\\"hljs-keyword\\\">return</span> -<span class=\\\"hljs-number\\\">1</span>;\\n                    } <span class=\\\"hljs-keyword\\\">else</span> <span class=\\\"hljs-keyword\\\">if</span> (seek && table[hash - offSet] == key) {\\n                        <span class=\\\"hljs-keyword\\\">return</span> hash + offSet;\\n                    }\\n                    offSet++;\\n                }\\n            } <span class=\\\"hljs-keyword\\\">else</span> {\\n                after = <span class=\\\"hljs-literal\\\">true</span>;\\n            }\\n            <span class=\\\"hljs-keyword\\\">return</span> after ? hash + offSet : hash - offSet;\\n        }\\n    }\\n}\\n</code></pre>\\n\";","export default \"<h3 id=\\\"introduction\\\">Introduction</h3>\\n<p>我们先分析Leetcode的55题，是从45题Jump Game II 跳过来的，因为这题比II要简单一点，只需要判断序列是否能jump到终点就行，而45题是要找最小的jump次数；</p>\\n<p>为什么这题要拿出篇幅来分析？因为这题包含了很多东西： </p>\\n<ul>\\n<li><strong>纯回溯</strong></li>\\n<li><strong>纯回溯<code>---&gt;</code>回溯Top-down DP</strong></li>\\n<li><strong>回溯Top-Down DP<code>---&gt;</code>迭代Bottom-up DP</strong></li>\\n<li><strong>迭代Bottom-up DP<code>---&gt;</code>线性贪婪</strong></li>\\n</ul>\\n<p>分析完之后你会发现，原来算法可以这么美妙😃</p>\\n<h3 id=\\\"jump-game\\\">Jump Game</h3>\\n<p>Given an array of non-negative integers, you are initially positioned at the first index of the array.</p>\\n<p>Each element in the array represents your maximum jump length at that position.</p>\\n<p><strong>Determine if you are able to reach the last index.</strong></p>\\n<p><strong>Example 1:</strong></p>\\n<pre><code>Input: [2,3,1,1,4]\\nOutput: true\\nExplanation: Jump 1 step from index 0 to 1, then 3 steps to the last index.\\n</code></pre>\\n<p><strong>Example 2:</strong></p>\\n<pre><code>Input: [3,2,1,0,4]\\nOutput: false\\nExplanation: You will always arrive at index 3 no matter what. Its maximum\\n             jump length is 0, which makes it impossible to reach the last index.:\\n</code></pre>\\n<h4 id=\\\"1-backtracking\\\">1. Backtracking</h4>\\n<p>无论是I还是II，我最开始只能想到的就是回溯法，而回溯法用于解这两题是会炸的，因为时间复杂度和递归栈太多了，单作为DP的第一步，我们还是先把回溯写出来</p>\\n<pre><code class=\\\"hljs language-java\\\"><span class=\\\"hljs-keyword\\\">public</span> <span class=\\\"hljs-type\\\">boolean</span> <span class=\\\"hljs-title function_\\\">canJump</span><span class=\\\"hljs-params\\\">(<span class=\\\"hljs-type\\\">int</span>[] nums)</span> {\\n    <span class=\\\"hljs-keyword\\\">return</span> backtracking(nums, <span class=\\\"hljs-number\\\">0</span>);\\n}\\n\\n<span class=\\\"hljs-keyword\\\">private</span> <span class=\\\"hljs-type\\\">boolean</span> <span class=\\\"hljs-title function_\\\">backtracking</span><span class=\\\"hljs-params\\\">(<span class=\\\"hljs-type\\\">int</span>[] nums, <span class=\\\"hljs-type\\\">int</span> now)</span> {\\n    <span class=\\\"hljs-keyword\\\">if</span> (now == nums.length - <span class=\\\"hljs-number\\\">1</span>) {\\n        <span class=\\\"hljs-keyword\\\">return</span> <span class=\\\"hljs-literal\\\">true</span>;\\n    } <span class=\\\"hljs-keyword\\\">else</span> {\\n        <span class=\\\"hljs-comment\\\">// 从允许的最大跳数开始跳</span>\\n        <span class=\\\"hljs-type\\\">int</span> <span class=\\\"hljs-variable\\\">maxStep</span> <span class=\\\"hljs-operator\\\">=</span> nums[now];\\n        <span class=\\\"hljs-keyword\\\">if</span> (now + maxStep &gt;= nums.length) {\\n            maxStep = nums.length - now - <span class=\\\"hljs-number\\\">1</span>;\\n        }\\n        <span class=\\\"hljs-keyword\\\">for</span> (<span class=\\\"hljs-type\\\">int</span> <span class=\\\"hljs-variable\\\">i</span> <span class=\\\"hljs-operator\\\">=</span> maxStep; i &gt;= <span class=\\\"hljs-number\\\">1</span>; i--) {\\n            <span class=\\\"hljs-keyword\\\">if</span> (backtracking(nums, now + i)) {\\n                <span class=\\\"hljs-keyword\\\">return</span> <span class=\\\"hljs-literal\\\">true</span>;\\n            }\\n        }\\n    }\\n    <span class=\\\"hljs-keyword\\\">return</span> <span class=\\\"hljs-literal\\\">false</span>;\\n}\\n</code></pre>\\n<p><strong>Complexity Analysis</strong></p>\\n<ul>\\n<li>Time complexity : <strong>O(2^n)</strong>. There are <strong>2^n</strong> (upper bound) ways of jumping from the first position to the last, where <em>n</em> is the length of array <code>nums</code>. For a complete proof, please refer to Appendix A.</li>\\n<li>Space complexity : <strong>O(n)</strong>. Recursion requires additional memory for the stack frames.</li>\\n</ul>\\n<h4 id=\\\"2-memorization-dp-top-down\\\">2. Memorization: DP Top-down</h4>\\n<p>也许你已经意识到了，我们仅仅是想知道每一个位置是否能跳到最后一格而已，但是某个位置可能会有从不同地方跳过来的，如果第一次跳过来的时候，这时候肯定不知道这个位置能不能到达，然后从这个位置继续往下跳的时候就能回溯出一个结果来，如果我们将这个结果记录下来的话，那么第二次有从其他地方跳过来的时候，我们就知道这个位置往下走到底是个什么结果，这样就不必再继续往下跳然后等回溯了；</p>\\n<p>于是我们将每个位置的回溯结果记忆化：能到终点代表<em><strong>GOOD</strong></em>、不能到终点代表<em><strong>BAD</strong></em>、没尝试过代表<em><strong>UNKNOWN</strong></em></p>\\n<p>比如Leetcode上的例子：</p>\\n<p>An example of a memorization table for input array <code>nums = [2, 4, 2, 1, 0, 2, 0]</code> can be seen in the diagram below. We write <strong>G</strong> for a <em>GOOD</em> position and <strong>B</strong> for a <em>BAD</em> one. We can see that we cannot start from indices 2, 3 or 4 and eventually reach last index (6), but we can do that from indices 0, 1, 5 and (trivially) 6.</p>\\n<table>\\n<thead>\\n<tr>\\n<th>Index</th>\\n<th>0</th>\\n<th>1</th>\\n<th>2</th>\\n<th>3</th>\\n<th>4</th>\\n<th>5</th>\\n<th>6</th>\\n</tr>\\n</thead>\\n<tbody><tr>\\n<td>nums</td>\\n<td>2</td>\\n<td>4</td>\\n<td>2</td>\\n<td>1</td>\\n<td>0</td>\\n<td>2</td>\\n<td>0</td>\\n</tr>\\n<tr>\\n<td>memo</td>\\n<td>G</td>\\n<td>G</td>\\n<td>B</td>\\n<td>B</td>\\n<td>B</td>\\n<td>G</td>\\n<td>G</td>\\n</tr>\\n</tbody></table>\\n<p><strong>Steps</strong></p>\\n<ol>\\n<li>Initially, all elements of the <code>memo</code> table are <em><strong>UNKNOWN</strong></em>, except for the last one, which is (trivially) <em><strong>GOOD</strong></em> (it can reach itself)</li>\\n<li>Modify the backtracking algorithm such that the recursive step first checks if the index is known (<em><strong>GOOD</strong></em>/ <em><strong>BAD</strong></em>)<ol>\\n<li>If it is known then return <em>True</em> / <em>False</em></li>\\n<li>Otherwise perform the backtracking steps as before</li>\\n</ol>\\n</li>\\n<li>Once we determine the value of the current index, we store it in the <code>memo</code> table</li>\\n</ol>\\n<pre><code class=\\\"hljs language-java\\\"><span class=\\\"hljs-keyword\\\">public</span> <span class=\\\"hljs-keyword\\\">class</span> <span class=\\\"hljs-title class_\\\">Solution</span> {\\n    <span class=\\\"hljs-keyword\\\">enum</span> <span class=\\\"hljs-title class_\\\">Index</span> {\\n        GOOD, BAD, UNKNOWN\\n    }\\n    Index[] memo;\\n    <span class=\\\"hljs-keyword\\\">public</span> <span class=\\\"hljs-type\\\">boolean</span> <span class=\\\"hljs-title function_\\\">canJumpFromPosition</span><span class=\\\"hljs-params\\\">(<span class=\\\"hljs-type\\\">int</span> position, <span class=\\\"hljs-type\\\">int</span>[] nums)</span> {\\n        <span class=\\\"hljs-keyword\\\">if</span> (memo[position] == Index.BAD) {\\n            <span class=\\\"hljs-keyword\\\">return</span> <span class=\\\"hljs-literal\\\">false</span>;\\n        } <span class=\\\"hljs-keyword\\\">else</span> <span class=\\\"hljs-keyword\\\">if</span> (memo[position] == Index.GOOD) {\\n            <span class=\\\"hljs-keyword\\\">return</span> <span class=\\\"hljs-literal\\\">true</span>;\\n        } <span class=\\\"hljs-keyword\\\">else</span> {\\n            <span class=\\\"hljs-type\\\">int</span> <span class=\\\"hljs-variable\\\">maxStep</span> <span class=\\\"hljs-operator\\\">=</span> Math.min(nums[position], nums.length - position - <span class=\\\"hljs-number\\\">1</span>);\\n            <span class=\\\"hljs-keyword\\\">for</span> (<span class=\\\"hljs-type\\\">int</span> <span class=\\\"hljs-variable\\\">i</span> <span class=\\\"hljs-operator\\\">=</span> maxStep; i &gt; <span class=\\\"hljs-number\\\">0</span>; i--) {\\n                <span class=\\\"hljs-keyword\\\">if</span> (canJumpFromPosition(position + i, nums)) {\\n                    memo[position + maxStep] = Index.GOOD;\\n                    <span class=\\\"hljs-keyword\\\">return</span> <span class=\\\"hljs-literal\\\">true</span>;\\n                }\\n            }\\n            memo[position] = Index.BAD;\\n            <span class=\\\"hljs-keyword\\\">return</span> <span class=\\\"hljs-literal\\\">false</span>;\\n        }\\n    }\\n\\n    <span class=\\\"hljs-keyword\\\">public</span> <span class=\\\"hljs-type\\\">boolean</span> <span class=\\\"hljs-title function_\\\">canJump</span><span class=\\\"hljs-params\\\">(<span class=\\\"hljs-type\\\">int</span>[] nums)</span> {\\n        memo = <span class=\\\"hljs-keyword\\\">new</span> <span class=\\\"hljs-title class_\\\">Index</span>[nums.length];\\n        <span class=\\\"hljs-keyword\\\">for</span> (<span class=\\\"hljs-type\\\">int</span> <span class=\\\"hljs-variable\\\">i</span> <span class=\\\"hljs-operator\\\">=</span> <span class=\\\"hljs-number\\\">0</span>; i &lt; nums.length; i++) {\\n            memo[i] = Index.UNKNOWN;\\n        }\\n        memo[nums.length - <span class=\\\"hljs-number\\\">1</span>] = Index.GOOD;\\n        <span class=\\\"hljs-keyword\\\">return</span> canJumpFromPosition(<span class=\\\"hljs-number\\\">0</span>, nums);\\n    }\\n}\\n</code></pre>\\n<p><strong>Complexity Analysis</strong></p>\\n<ul>\\n<li>Time complexity : <strong>O(n^2)</strong> For every element in the array, say <code>i</code>, we are looking at the next <code>nums[i]</code> elements to its right aiming to find a <em>GOOD</em> index. <code>nums[i]</code> can be at most <em>n</em>, where <em>n</em> is the length of array <code>nums</code>.</li>\\n<li>Space complexity : <strong>O(2n) =O(n)</strong>. First n originates from recursion. Second n comes from the usage of the memo table.</li>\\n</ul>\\n<p>送算减少了很多的回溯了，时间复杂度也从2的n次方降到n的2次方了，这回提交到Leetcode，打了11.11%</p>\\n<h4 id=\\\"3-memorization-dp-bottom-up\\\">3. Memorization: DP Bottom-up</h4>\\n<p>上篇练习过挺多DP的，但是都没仔细研究过<strong>自顶向下</strong>和<strong>自底向上</strong>，正好借这题来分析分析</p>\\n<p>我们的问题，若是要从一头到另一头，比如这一题，需要从起点跳到终点，然后从终点回溯回来（也许是跳到了之前回溯好了的结果），这样才能知道结果，形式化的想象一下，我们主动地发送请求到服务端，然后服务端返回结果，这是一个过去/回来的过程；</p>\\n<p>如果我们能直接从服务端返回结果，那么就少花一半以上的effort，也就是说，我们可以从终点直接往回走！</p>\\n<p>因为我们起点部分的点的结果，都是从终点附近的后半段点的结果递归回来的，我们这样做是提前从后半段算回结果</p>\\n<p>于是我们可以通过两个for循环，消除回溯调用栈</p>\\n<pre><code class=\\\"hljs language-java\\\"><span class=\\\"hljs-keyword\\\">enum</span> <span class=\\\"hljs-title class_\\\">Index</span> {\\n    GOOD, BAD, UNKNOWN\\n}\\n\\n<span class=\\\"hljs-keyword\\\">public</span> <span class=\\\"hljs-keyword\\\">class</span> <span class=\\\"hljs-title class_\\\">Solution</span> {\\n    <span class=\\\"hljs-keyword\\\">public</span> <span class=\\\"hljs-type\\\">boolean</span> <span class=\\\"hljs-title function_\\\">canJump</span><span class=\\\"hljs-params\\\">(<span class=\\\"hljs-type\\\">int</span>[] nums)</span> {\\n        Index[] memo = <span class=\\\"hljs-keyword\\\">new</span> <span class=\\\"hljs-title class_\\\">Index</span>[nums.length];\\n        <span class=\\\"hljs-keyword\\\">for</span> (<span class=\\\"hljs-type\\\">int</span> <span class=\\\"hljs-variable\\\">i</span> <span class=\\\"hljs-operator\\\">=</span> <span class=\\\"hljs-number\\\">0</span>; i &lt; nums.length; i++) {\\n            memo[i] = Index.UNKNOWN;\\n        }\\n        memo[nums.length - <span class=\\\"hljs-number\\\">1</span>] = Index.GOOD;\\n\\n        <span class=\\\"hljs-keyword\\\">for</span> (<span class=\\\"hljs-type\\\">int</span> <span class=\\\"hljs-variable\\\">i</span> <span class=\\\"hljs-operator\\\">=</span> nums.length - <span class=\\\"hljs-number\\\">2</span>; i &gt;= <span class=\\\"hljs-number\\\">0</span>; i--) {\\n            <span class=\\\"hljs-type\\\">int</span> <span class=\\\"hljs-variable\\\">maxStep</span> <span class=\\\"hljs-operator\\\">=</span> Math.min(nums[i], nums.length - i - <span class=\\\"hljs-number\\\">1</span>);\\n            <span class=\\\"hljs-comment\\\">// 从当前position的第一步开始</span>\\n            <span class=\\\"hljs-keyword\\\">for</span> (<span class=\\\"hljs-type\\\">int</span> <span class=\\\"hljs-variable\\\">j</span> <span class=\\\"hljs-operator\\\">=</span> i + <span class=\\\"hljs-number\\\">1</span>; j &lt;= i + maxStep; j++) {\\n                <span class=\\\"hljs-keyword\\\">if</span> (memo[j] == Index.GOOD) {\\n                    memo[i] = Index.GOOD;\\n                    <span class=\\\"hljs-keyword\\\">break</span>;\\n                }\\n            }\\n        }\\n\\n        <span class=\\\"hljs-keyword\\\">return</span> memo[<span class=\\\"hljs-number\\\">0</span>] == Index.GOOD;\\n    }\\n}\\n</code></pre>\\n<p><strong>Complexity Analysis</strong></p>\\n<ul>\\n<li>Time complexity : <strong>O(n^2)</strong>. For every element in the array, say <code>i</code>, we are looking at the next <code>nums[i]</code> elements to its right aiming to find a <em>GOOD</em> index. <code>nums[i]</code> can be at most <em>n</em>, where <em>n</em> is the length of array <code>nums</code>.</li>\\n<li>Space complexity : <strong>O(n)</strong>. This comes from the usage of the memo table.</li>\\n</ul>\\n<p>我们又优化了一下DP，这次打了30.77%，似乎还不错，再看看能不能再有什么优化的地方</p>\\n<h4 id=\\\"4-refine-the-dp\\\">4. Refine The DP</h4>\\n<p>如果我们减负去很多题目以外的概念的话，我们将会得到一个很简单的Memo模型：和自底向上一样，只不过我们不需要考虑什么<em><strong>UNKNOWN</strong></em></p>\\n<pre><code class=\\\"hljs language-java\\\"><span class=\\\"hljs-keyword\\\">public</span> <span class=\\\"hljs-type\\\">boolean</span> <span class=\\\"hljs-title function_\\\">canJump</span><span class=\\\"hljs-params\\\">(<span class=\\\"hljs-type\\\">int</span>[] nums)</span> {\\n    <span class=\\\"hljs-type\\\">boolean</span>[] can = <span class=\\\"hljs-keyword\\\">new</span> <span class=\\\"hljs-title class_\\\">boolean</span>[nums.length];\\n    can[nums.length - <span class=\\\"hljs-number\\\">1</span>] = <span class=\\\"hljs-literal\\\">true</span>;\\n    <span class=\\\"hljs-keyword\\\">for</span> (<span class=\\\"hljs-type\\\">int</span> <span class=\\\"hljs-variable\\\">i</span> <span class=\\\"hljs-operator\\\">=</span> nums.length - <span class=\\\"hljs-number\\\">2</span>; i &gt;= <span class=\\\"hljs-number\\\">0</span>; i--) {\\n        <span class=\\\"hljs-type\\\">int</span> <span class=\\\"hljs-variable\\\">steps</span> <span class=\\\"hljs-operator\\\">=</span> nums[i];\\n        <span class=\\\"hljs-keyword\\\">for</span> (<span class=\\\"hljs-type\\\">int</span> <span class=\\\"hljs-variable\\\">j</span> <span class=\\\"hljs-operator\\\">=</span> i + <span class=\\\"hljs-number\\\">1</span>; j &lt; nums.length && j &lt;= i + steps; j++) {\\n            <span class=\\\"hljs-keyword\\\">if</span>  (can[j]) {\\n                can[i] = <span class=\\\"hljs-literal\\\">true</span>;\\n                <span class=\\\"hljs-keyword\\\">break</span>;\\n            }\\n        }\\n    }\\n    <span class=\\\"hljs-keyword\\\">return</span> can[<span class=\\\"hljs-number\\\">0</span>];\\n}\\n</code></pre>\\n<p>这次打了34.76%，别看和上面的没提升多少，相比之下这已经减少了1倍以上的耗时了，我们似乎已经达到了这道题DP的极限了，再靠DP的思维已经无法再进行优化了，这时候我告诉你，差一步你就能将这个DP转为线性解法，你可能会崩溃</p>\\n<h4 id=\\\"5-greedy\\\">5. Greedy</h4>\\n<p>从上面的DP我们可以发现，每当我们的到达一个新的位置（i）的时候，它就会往后找，找到一个GOOD就break掉，于是我们就认为这个新位置也是GOOD，而这个被找到的GOOD，就是当前新位置能reach到的第一个GOOD，因为一旦reach到这个GOOD，那么其他case就不比再考虑了，所以我们才break；</p>\\n<table>\\n<thead>\\n<tr>\\n<th>Index</th>\\n<th>0</th>\\n<th>1</th>\\n<th>2</th>\\n<th>3</th>\\n<th>4</th>\\n<th>5</th>\\n<th>6</th>\\n</tr>\\n</thead>\\n<tbody><tr>\\n<td>nums</td>\\n<td>9</td>\\n<td>4</td>\\n<td>2</td>\\n<td>1</td>\\n<td>0</td>\\n<td>2</td>\\n<td>0</td>\\n</tr>\\n<tr>\\n<td>memo</td>\\n<td>U</td>\\n<td>G</td>\\n<td>B</td>\\n<td>B</td>\\n<td>B</td>\\n<td>G</td>\\n<td>G</td>\\n</tr>\\n</tbody></table>\\n<p>那么如果说，我们每次都记录最后的GOOD的位置，于是我们仅仅需要计算，<strong>当前位置能不能reach到这个GOOD</strong>就行了，而这一步甚至不需要迭代，只要当前位置能跳的距离大于等于这个GOOD的位置就好了，于是我们可以从后往前线性地得到题解：</p>\\n<pre><code class=\\\"hljs language-java\\\"><span class=\\\"hljs-keyword\\\">public</span> <span class=\\\"hljs-type\\\">boolean</span> <span class=\\\"hljs-title function_\\\">canJump</span><span class=\\\"hljs-params\\\">(<span class=\\\"hljs-type\\\">int</span>[] nums)</span> {\\n    <span class=\\\"hljs-type\\\">int</span> <span class=\\\"hljs-variable\\\">lastPos</span> <span class=\\\"hljs-operator\\\">=</span> nums.length - <span class=\\\"hljs-number\\\">1</span>;\\n    <span class=\\\"hljs-keyword\\\">for</span> (<span class=\\\"hljs-type\\\">int</span> <span class=\\\"hljs-variable\\\">i</span> <span class=\\\"hljs-operator\\\">=</span> nums.length - <span class=\\\"hljs-number\\\">1</span>; i &gt;= <span class=\\\"hljs-number\\\">0</span>; i--) {\\n        <span class=\\\"hljs-keyword\\\">if</span> (i + nums[i] &gt;= lastPos) {\\n            lastPos = i;\\n        }\\n    }\\n    <span class=\\\"hljs-type\\\">return</span> <span class=\\\"hljs-variable\\\">lastPos</span> <span class=\\\"hljs-operator\\\">=</span>= <span class=\\\"hljs-number\\\">0</span>;\\n}\\n</code></pre>\\n<h3 id=\\\"jump-game-ii\\\">Jump Game II</h3>\\n<p>Given an array of non-negative integers, you are initially positioned at the first index of the array.</p>\\n<p>Each element in the array represents your maximum jump length at that position.</p>\\n<p>Your goal is to reach the last index in the minimum number of jumps.</p>\\n<p><strong>Example:</strong></p>\\n<pre><code>Input: [2,3,1,1,4]\\nOutput: 2\\nExplanation: The minimum number of jumps to reach the last index is 2.\\n    Jump 1 step from index 0 to 1, then 3 steps to the last index.\\n</code></pre>\\n<h4 id=\\\"1-backtracking---o2n\\\">1. Backtracking - O(2^n)</h4>\\n<p>不多BB</p>\\n<pre><code class=\\\"hljs language-java\\\"><span class=\\\"hljs-keyword\\\">public</span> <span class=\\\"hljs-type\\\">int</span> <span class=\\\"hljs-title function_\\\">jump</span><span class=\\\"hljs-params\\\">(<span class=\\\"hljs-type\\\">int</span>[] nums)</span> {\\n    <span class=\\\"hljs-keyword\\\">return</span> dfs(nums, <span class=\\\"hljs-number\\\">0</span>, <span class=\\\"hljs-number\\\">0</span>, Integer.MAX_VALUE);\\n}\\n\\n<span class=\\\"hljs-keyword\\\">private</span> <span class=\\\"hljs-type\\\">int</span> <span class=\\\"hljs-title function_\\\">dfs</span><span class=\\\"hljs-params\\\">(<span class=\\\"hljs-type\\\">int</span>[] nums, <span class=\\\"hljs-type\\\">int</span> now, <span class=\\\"hljs-type\\\">int</span> jump, <span class=\\\"hljs-type\\\">int</span> minJump)</span> {\\n    <span class=\\\"hljs-keyword\\\">if</span> (jump &gt;= minJump) {\\n        <span class=\\\"hljs-keyword\\\">return</span> minJump;\\n    }\\n    <span class=\\\"hljs-keyword\\\">if</span> (now == nums.length - <span class=\\\"hljs-number\\\">1</span>) {\\n        <span class=\\\"hljs-keyword\\\">return</span> Math.min(jump, minJump);\\n    } <span class=\\\"hljs-keyword\\\">else</span> {\\n        <span class=\\\"hljs-type\\\">int</span> <span class=\\\"hljs-variable\\\">subJump</span> <span class=\\\"hljs-operator\\\">=</span> Integer.MAX_VALUE;\\n        <span class=\\\"hljs-keyword\\\">for</span> (<span class=\\\"hljs-type\\\">int</span> <span class=\\\"hljs-variable\\\">i</span> <span class=\\\"hljs-operator\\\">=</span> <span class=\\\"hljs-number\\\">1</span>; i &lt;= nums[now] && now + i &lt; nums.length; i++) {\\n            subJump = Math.min(dfs(nums, now + i, jump + <span class=\\\"hljs-number\\\">1</span>, minJump), subJump);\\n        }\\n        <span class=\\\"hljs-keyword\\\">return</span> Math.min(subJump, minJump);\\n    }\\n}\\n</code></pre>\\n<p>不用多想，时间复杂度爆掉了</p>\\n<h4 id=\\\"2-dp-bottom-up---o-n2\\\">2. DP Bottom-up - O (n^2)</h4>\\n<pre><code class=\\\"hljs language-java\\\"><span class=\\\"hljs-keyword\\\">public</span> <span class=\\\"hljs-type\\\">int</span> <span class=\\\"hljs-title function_\\\">jump</span><span class=\\\"hljs-params\\\">(<span class=\\\"hljs-type\\\">int</span>[] nums)</span> {\\n    <span class=\\\"hljs-type\\\">int</span>[] dp = <span class=\\\"hljs-keyword\\\">new</span> <span class=\\\"hljs-title class_\\\">int</span>[nums.length];\\n    <span class=\\\"hljs-keyword\\\">for</span> (<span class=\\\"hljs-type\\\">int</span> <span class=\\\"hljs-variable\\\">i</span> <span class=\\\"hljs-operator\\\">=</span> nums.length - <span class=\\\"hljs-number\\\">2</span>; i &gt;= <span class=\\\"hljs-number\\\">0</span>; i--) {\\n        <span class=\\\"hljs-comment\\\">// one jump to the end</span>\\n        <span class=\\\"hljs-keyword\\\">if</span> (i + nums[i] &gt;= nums.length) {\\n            dp[i] = <span class=\\\"hljs-number\\\">1</span>;\\n        } <span class=\\\"hljs-keyword\\\">else</span> {\\n            <span class=\\\"hljs-comment\\\">// jump max step if it can reach the end</span>\\n            <span class=\\\"hljs-type\\\">int</span> <span class=\\\"hljs-variable\\\">tmp</span> <span class=\\\"hljs-operator\\\">=</span> Integer.MAX_VALUE;\\n            <span class=\\\"hljs-keyword\\\">for</span> (<span class=\\\"hljs-type\\\">int</span> <span class=\\\"hljs-variable\\\">j</span> <span class=\\\"hljs-operator\\\">=</span> i + <span class=\\\"hljs-number\\\">1</span>; j &lt;= i + nums[i]; j++) {\\n                <span class=\\\"hljs-keyword\\\">if</span> (dp[j] != Integer.MAX_VALUE) {\\n                    tmp = Math.min(tmp, dp[j] + <span class=\\\"hljs-number\\\">1</span>);\\n                }\\n            }\\n            dp[i] = tmp;\\n        }\\n    }\\n    <span class=\\\"hljs-keyword\\\">return</span> dp[<span class=\\\"hljs-number\\\">0</span>];\\n}\\n</code></pre>\\n<h4 id=\\\"3-bfs---o-n\\\">3. BFS - O (n)</h4>\\n<p>参考自：<a href=\\\"https://leetcode.com/problems/jump-game-ii/discuss/18019/10-lines-C%252B%252B-(16ms)-Python-BFS-Solutions-with-Explanations\\\">10-lines C++ (16ms) / Python BFS Solutions with Explanations</a></p>\\n<p>如果我们仅观察步数的增长的话，我们其实能够把数组视为一棵以跳数来分层的数结构，这也是这道题能够用广度优先搜索来思考的关键点</p>\\n<p>比如<code>nums = [2, 3, 1, 1, 4]</code>，第一层是我们的起点<code>2</code>，它能够到达的下一层数字有<code>3,1</code>，而<code>3,1</code>的下一跳能够到达的是<code>1,4</code>如此一来我们仅需要跳2层就能够到达终点了；</p>\\n<p>再比如<code>nums = [2, 6, 5, 2, 3, 7, 4, 9, 8, 2, 1, 1]</code>，第一层<code>2</code>，第二层<code>6, 5</code>，第三层<code>2,3,7,4,9</code>，因为最多能从<code>i = 1, nums[1] = 6</code>跳到<code>nums[1 + 6] = nums[7] = 9</code>，然后第三层的第一个数必定是第二层结尾的下一个数，以此类推第四层<code>2, 1, 1</code></p>\\n<pre><code class=\\\"hljs language-java\\\"><span class=\\\"hljs-keyword\\\">public</span> <span class=\\\"hljs-type\\\">int</span> <span class=\\\"hljs-title function_\\\">jump</span><span class=\\\"hljs-params\\\">(<span class=\\\"hljs-type\\\">int</span>[] nums)</span> {\\n    <span class=\\\"hljs-type\\\">int</span> <span class=\\\"hljs-variable\\\">jump</span> <span class=\\\"hljs-operator\\\">=</span> <span class=\\\"hljs-number\\\">0</span>;\\n    <span class=\\\"hljs-type\\\">int</span> <span class=\\\"hljs-variable\\\">start</span> <span class=\\\"hljs-operator\\\">=</span> <span class=\\\"hljs-number\\\">0</span>, end = <span class=\\\"hljs-number\\\">0</span>;\\n    <span class=\\\"hljs-comment\\\">// when end reach the final index</span>\\n    <span class=\\\"hljs-comment\\\">// that means we finish the jump</span>\\n    <span class=\\\"hljs-keyword\\\">while</span> (end &lt; nums.length - <span class=\\\"hljs-number\\\">1</span>) {\\n        <span class=\\\"hljs-comment\\\">// jump first</span>\\n        jump++;\\n        <span class=\\\"hljs-comment\\\">// at least one position on next floor</span>\\n        <span class=\\\"hljs-type\\\">int</span> <span class=\\\"hljs-variable\\\">tmpEnd</span> <span class=\\\"hljs-operator\\\">=</span> end + <span class=\\\"hljs-number\\\">1</span>;\\n        <span class=\\\"hljs-keyword\\\">for</span> (<span class=\\\"hljs-type\\\">int</span> <span class=\\\"hljs-variable\\\">i</span> <span class=\\\"hljs-operator\\\">=</span> start; i &lt;= end; i++) {\\n            <span class=\\\"hljs-comment\\\">// hit the final straight</span>\\n            <span class=\\\"hljs-keyword\\\">if</span> (i + nums[i] &gt; nums.length) {\\n                <span class=\\\"hljs-keyword\\\">return</span> jump;\\n            }\\n            tmpEnd = Math.max(tmpEnd, i + nums[i]);\\n        }\\n        <span class=\\\"hljs-comment\\\">// visit next floor</span>\\n        start = end + <span class=\\\"hljs-number\\\">1</span>;\\n        end = tmpEnd;\\n    }\\n    <span class=\\\"hljs-keyword\\\">return</span> jump;\\n}\\n</code></pre>\\n<h3 id=\\\"edit-distance\\\">Edit Distance</h3>\\n<p>Given two words <em>word1</em> and <em>word2</em>, find the minimum number of operations required to convert <em>word1</em> to <em>word2</em>.</p>\\n<p>You have the following 3 operations permitted on a word:</p>\\n<ol>\\n<li>Insert a character</li>\\n<li>Delete a character</li>\\n<li>Replace a character</li>\\n</ol>\\n<p><strong>Example 1:</strong></p>\\n<pre><code>Input: word1 = &quot;horse&quot;, word2 = &quot;ros&quot;\\nOutput: 3\\nExplanation: \\nhorse -&gt; rorse (replace &#x27;h&#x27; with &#x27;r&#x27;)\\nrorse -&gt; rose (remove &#x27;r&#x27;)\\nrose -&gt; ros (remove &#x27;e&#x27;)\\n</code></pre>\\n<p><strong>Example 2:</strong></p>\\n<pre><code>Input: word1 = &quot;intention&quot;, word2 = &quot;execution&quot;\\nOutput: 5\\nExplanation: \\nintention -&gt; inention (remove &#x27;t&#x27;)\\ninention -&gt; enention (replace &#x27;i&#x27; with &#x27;e&#x27;)\\nenention -&gt; exention (replace &#x27;n&#x27; with &#x27;x&#x27;)\\nexention -&gt; exection (replace &#x27;n&#x27; with &#x27;c&#x27;)\\nexection -&gt; execution (insert &#x27;u&#x27;)\\n</code></pre>\\n<h4 id=\\\"dp-top-down-for-edit-distance\\\">DP Top-down For Edit Distance</h4>\\n<p>这题，乍一看一脸懵逼，咋还有3种情况！咋还随便什么位置都能有这三种情况！怎么玩！用什么思路！</p>\\n<p>思考几分钟后无果，果断去讨论区找思路，然后看到高评DP解，醍醐灌顶- -</p>\\n<p>简单来说，虽然对比到有不同有<strong>3</strong>种情况，但是我们还是可以按照顺序来给两个word做一个矩阵，于是熟悉的操作就来了，</p>\\n<pre><code class=\\\"hljs language-java\\\">a = ac, b = <span class=\\\"hljs-type\\\">ae</span>\\n \\n     <span class=\\\"hljs-variable\\\">j</span> <span class=\\\"hljs-operator\\\">=</span> <span class=\\\"hljs-number\\\">0</span> <span class=\\\"hljs-number\\\">1</span>\\n         a <span class=\\\"hljs-type\\\">e</span>\\n<span class=\\\"hljs-variable\\\">i</span> <span class=\\\"hljs-operator\\\">=</span> <span class=\\\"hljs-number\\\">0</span> a  <span class=\\\"hljs-number\\\">0</span> <span class=\\\"hljs-number\\\">1</span>\\n    <span class=\\\"hljs-number\\\">1</span> c  <span class=\\\"hljs-number\\\">1</span> <span class=\\\"hljs-number\\\">1</span>\\n    \\n我们看到，当我们走到i = <span class=\\\"hljs-number\\\">1</span>，j = <span class=\\\"hljs-number\\\">1</span>的时候，我们有<span class=\\\"hljs-number\\\">3</span>种选择：\\n<span class=\\\"hljs-number\\\">1.</span> 直接替换，于是操作数在a -&gt; a的基础上+<span class=\\\"hljs-number\\\">1</span>；\\n<span class=\\\"hljs-number\\\">2.</span> 删除c，我们在ac -&gt; a完成之后的基础上，继续进行a -&gt; ae；\\n<span class=\\\"hljs-number\\\">3.</span> 插入e，我们在ac -&gt; aec完成之后的基础上，继续进行aec -&gt; ae；\\n\\n（上面这一套是巨难理解的地方）\\n\\n于是在这<span class=\\\"hljs-number\\\">3</span>个选择中选最小值\\n</code></pre>\\n<p>矩阵都来了，dp就完事了，于是我们可以想象一下状态转移公式：</p>\\n<pre><code class=\\\"hljs language-java\\\">String a,b\\n\\n<span class=\\\"hljs-title function_\\\">F</span><span class=\\\"hljs-params\\\">(i, j)</span> = {\\n    <span class=\\\"hljs-keyword\\\">if</span> a.charAt(i) == b.charAt(j)\\n        dp[i][j] = dp[i - <span class=\\\"hljs-number\\\">1</span>][j - <span class=\\\"hljs-number\\\">1</span>];\\n    <span class=\\\"hljs-keyword\\\">else</span>\\n        dp[i][j] = min of {\\n            dp[i - <span class=\\\"hljs-number\\\">1</span>][j - <span class=\\\"hljs-number\\\">1</span>],    <span class=\\\"hljs-comment\\\">// replace</span>\\n            dp[i][j - <span class=\\\"hljs-number\\\">1</span>],        <span class=\\\"hljs-comment\\\">// insert</span>\\n            dp[i - <span class=\\\"hljs-number\\\">1</span>][j]        <span class=\\\"hljs-comment\\\">// delete</span>\\n        } + <span class=\\\"hljs-number\\\">1</span>\\n}\\n\\nbase <span class=\\\"hljs-keyword\\\">case</span>：\\n    dp[i][<span class=\\\"hljs-number\\\">0</span>] = i;\\n    dp[<span class=\\\"hljs-number\\\">0</span>][j] = j;\\n</code></pre>\\n<p>于是代码为：</p>\\n<pre><code class=\\\"hljs language-java\\\"><span class=\\\"hljs-keyword\\\">public</span> <span class=\\\"hljs-type\\\">int</span> <span class=\\\"hljs-title function_\\\">minDistance</span><span class=\\\"hljs-params\\\">(String word1, String word2)</span> {\\n    <span class=\\\"hljs-type\\\">int</span>[][] dp = <span class=\\\"hljs-keyword\\\">new</span> <span class=\\\"hljs-title class_\\\">int</span>[word1.length() + <span class=\\\"hljs-number\\\">1</span>][word2.length() + <span class=\\\"hljs-number\\\">1</span>];\\n    <span class=\\\"hljs-keyword\\\">for</span> (<span class=\\\"hljs-type\\\">int</span> <span class=\\\"hljs-variable\\\">i</span> <span class=\\\"hljs-operator\\\">=</span> <span class=\\\"hljs-number\\\">0</span>; i &lt;= word1.length(); i++) {\\n        dp[i][<span class=\\\"hljs-number\\\">0</span>] = i;\\n    }\\n    <span class=\\\"hljs-keyword\\\">for</span> (<span class=\\\"hljs-type\\\">int</span> <span class=\\\"hljs-variable\\\">j</span> <span class=\\\"hljs-operator\\\">=</span> <span class=\\\"hljs-number\\\">0</span>; j &lt;= word2.length(); j++) {\\n        dp[<span class=\\\"hljs-number\\\">0</span>][j] = j;\\n    }\\n    <span class=\\\"hljs-keyword\\\">for</span> (<span class=\\\"hljs-type\\\">int</span> <span class=\\\"hljs-variable\\\">i</span> <span class=\\\"hljs-operator\\\">=</span> <span class=\\\"hljs-number\\\">1</span>; i &lt;= word1.length(); i++) {\\n        <span class=\\\"hljs-keyword\\\">for</span> (<span class=\\\"hljs-type\\\">int</span> <span class=\\\"hljs-variable\\\">j</span> <span class=\\\"hljs-operator\\\">=</span> <span class=\\\"hljs-number\\\">1</span>; j &lt;= word2.length(); j++) {\\n            <span class=\\\"hljs-keyword\\\">if</span> (word1.charAt(i - <span class=\\\"hljs-number\\\">1</span>) == word2.charAt(j - <span class=\\\"hljs-number\\\">1</span>)) {\\n                <span class=\\\"hljs-comment\\\">// same as before</span>\\n                dp[i][j] = dp[i - <span class=\\\"hljs-number\\\">1</span>][j - <span class=\\\"hljs-number\\\">1</span>];\\n            } <span class=\\\"hljs-keyword\\\">else</span> {\\n                dp[i][j] = <span class=\\\"hljs-number\\\">1</span>\\n                        + Math.min(\\n                                <span class=\\\"hljs-comment\\\">// replace</span>\\n                                dp[i - <span class=\\\"hljs-number\\\">1</span>][j - <span class=\\\"hljs-number\\\">1</span>],\\n                        Math.min(\\n                                <span class=\\\"hljs-comment\\\">// delete</span>\\n                                dp[i - <span class=\\\"hljs-number\\\">1</span>][j],\\n                                <span class=\\\"hljs-comment\\\">// insert</span>\\n                                dp[i][j - <span class=\\\"hljs-number\\\">1</span>]));\\n            }\\n        }\\n    }\\n    <span class=\\\"hljs-keyword\\\">return</span> dp[word1.length()][word2.length()];\\n}\\n</code></pre>\\n<h4 id=\\\"dp-bottom-up--backtracking\\\">DP Bottom-up + Backtracking</h4>\\n<p>我们还可以用回溯的形式去计算dp，也就是说以自底向上的思路去求解</p>\\n<pre><code class=\\\"hljs language-java\\\"><span class=\\\"hljs-keyword\\\">public</span> <span class=\\\"hljs-type\\\">int</span> <span class=\\\"hljs-title function_\\\">minDistance</span><span class=\\\"hljs-params\\\">(String a, String b)</span> {\\n    <span class=\\\"hljs-type\\\">int</span>[][] dp = <span class=\\\"hljs-keyword\\\">new</span> <span class=\\\"hljs-title class_\\\">int</span>[a.length() + <span class=\\\"hljs-number\\\">1</span>][b.length() + <span class=\\\"hljs-number\\\">1</span>];\\n    <span class=\\\"hljs-keyword\\\">return</span> dfs(a, b, a.length() - <span class=\\\"hljs-number\\\">1</span>, b.length() - <span class=\\\"hljs-number\\\">1</span>, dp);\\n}\\n\\n<span class=\\\"hljs-keyword\\\">private</span> <span class=\\\"hljs-type\\\">int</span> <span class=\\\"hljs-title function_\\\">dfs</span><span class=\\\"hljs-params\\\">(String a, String b, <span class=\\\"hljs-type\\\">int</span> i, <span class=\\\"hljs-type\\\">int</span> j, <span class=\\\"hljs-type\\\">int</span>[][] dp)</span> {\\n    <span class=\\\"hljs-keyword\\\">if</span> (i == -<span class=\\\"hljs-number\\\">1</span>) {\\n        <span class=\\\"hljs-keyword\\\">return</span> j + <span class=\\\"hljs-number\\\">1</span>;\\n    }\\n    <span class=\\\"hljs-keyword\\\">if</span> (j == -<span class=\\\"hljs-number\\\">1</span>) {\\n        <span class=\\\"hljs-keyword\\\">return</span> i + <span class=\\\"hljs-number\\\">1</span>;\\n    }\\n    <span class=\\\"hljs-keyword\\\">if</span> (dp[i][j] == <span class=\\\"hljs-number\\\">0</span>) {\\n        <span class=\\\"hljs-keyword\\\">if</span> (a.charAt(i) == b.charAt(j)) {\\n            dp[i][j] = dfs(a, b, i - <span class=\\\"hljs-number\\\">1</span>, j - <span class=\\\"hljs-number\\\">1</span>, dp);\\n        } <span class=\\\"hljs-keyword\\\">else</span> {\\n            dp[i][j] = <span class=\\\"hljs-number\\\">1</span>\\n                    + Math.min(\\n                            dfs(a, b, i - <span class=\\\"hljs-number\\\">1</span>, j - <span class=\\\"hljs-number\\\">1</span>, dp),\\n                    Math.min(\\n                            dfs(a, b, i - <span class=\\\"hljs-number\\\">1</span>, j, dp),\\n                            dfs(a, b, i, j - <span class=\\\"hljs-number\\\">1</span>, dp)));\\n        }\\n    }\\n    <span class=\\\"hljs-keyword\\\">return</span> dp[i][j];\\n}\\n</code></pre>\\n<h3 id=\\\"new-21-game\\\">New 21 Game</h3>\\n<p>Alice plays the following game, loosely based on the card game &quot;21&quot;.</p>\\n<p>Alice starts with 0 points, and draws numbers while she has less than K points.  During each draw, she gains an integer number of points randomly from the range [1, W], where W is an integer.  Each draw is independent and the outcomes have equal probabilities.</p>\\n<p>Alice stops drawing numbers when she gets K or more points.  What is the probability that she has N or less points?</p>\\n<p>Example 1:</p>\\n<blockquote>\\n<p>Input: N = 10, K = 1, W = 10\\nOutput: 1.00000\\nExplanation:  Alice gets a single card, then stops.</p>\\n</blockquote>\\n<p>Example 2:</p>\\n<blockquote>\\n<p>Input: N = 6, K = 1, W = 10\\nOutput: 0.60000\\nExplanation:  Alice gets a single card, then stops.\\nIn 6 out of W = 10 possibilities, she is at or below N = 6 points.</p>\\n</blockquote>\\n<p>Example 3:</p>\\n<blockquote>\\n<p>Input: N = 21, K = 17, W = 10\\nOutput: 0.73278\\nNote:</p>\\n<p>0 &lt;= K &lt;= N &lt;= 10000\\n1 &lt;= W &lt;= 10000\\nAnswers will be accepted as correct if they are within 10^-5 of the correct answer.\\nThe judging time limit has been reduced for this question.</p>\\n</blockquote>\\n<h4 id=\\\"dp-top-down-for-21-game\\\">DP Top-down For 21 Game</h4>\\n<p>这题刚上手确实过于难，看了官方题解后才能有比较清晰的了解。</p>\\n<p>首先我们需要理解题中的3个值：</p>\\n<ul>\\n<li>N值：获胜目标分，想要获胜的话，我们的积分就必须低于等于N；</li>\\n<li>K值：停抽分，一旦我们最后一手牌抽到再累积积分超过K值，就停止抽牌，否则必须再抽一张；</li>\\n<li>W值：牌面最大分值，我们抽牌能够获取【0~W】值的积分；</li>\\n<li>起始积分：0分；</li>\\n</ul>\\n<p>然后我们再来分析例子：</p>\\n<ol>\\n<li>K为1，意味着我们最多只能抽一次牌，最多的积分只能为1~10分，总积分低于等于N值（10）的概率为100%；</li>\\n<li>K为1，意味着我们最多只能抽一次牌，最多的积分只能为1~10分，总积分低于等于N值（6）的概率为60%；</li>\\n</ol>\\n<p>再来分析例3，K为17时，我们看最后只能抽一手牌的情况，也就是积分为16的时候，这时候我们最好一手抽出的积分情况为：</p>\\n<pre><code class=\\\"hljs language-graph\\\">┌-----┐┌-----┐┌-----┐┌-----┐┌-----┐┌-----┐┌-----┐┌-----┐┌-----┐┌-----┐┌-----┐┌-----┐\\n| ... ||  16 ||  17 ||  18 ||  19 ||  20 ||  21 ||  22 ||  23 ||  24 ||  25 ||  26 | &lt;--- 总积分\\n└-----┘└-----┘└-----┘└-----┘└-----┘└-----┘└-----┘└-----┘└-----┘└-----┘└-----┘└-----┘\\n                 1      1      1      1      1      0      0      0      0      0    &lt;--- 是否获胜\\n</code></pre>\\n<p>于是我们可以知道在积分等于16的时候，获胜的概率：</p>\\n<p>我们设*f(x)*，为积分为x的时候，获胜的概率，于是有</p>\\n<p><span class=\\\"katex-display katexp\\\"><span class=\\\"katex-display\\\"><span class=\\\"katex\\\"><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:4.6149em;vertical-align:-2.0574em;\\\"></span><span class=\\\"mord\\\"><span class=\\\"mtable\\\"><span class=\\\"col-align-r\\\"><span class=\\\"vlist-t vlist-t2\\\"><span class=\\\"vlist-r\\\"><span class=\\\"vlist\\\" style=\\\"height:2.5574em;\\\"><span style=\\\"top:-4.5574em;\\\"><span class=\\\"pstrut\\\" style=\\\"height:3.3214em;\\\"></span><span class=\\\"mord\\\"><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.10764em;\\\">f</span><span class=\\\"mopen\\\">(</span><span class=\\\"mord\\\">16</span><span class=\\\"mclose\\\">)</span></span></span><span style=\\\"top:-2.25em;\\\"><span class=\\\"pstrut\\\" style=\\\"height:3.3214em;\\\"></span><span class=\\\"mord\\\"></span></span></span><span class=\\\"vlist-s\\\">​</span></span><span class=\\\"vlist-r\\\"><span class=\\\"vlist\\\" style=\\\"height:2.0574em;\\\"><span></span></span></span></span></span><span class=\\\"col-align-l\\\"><span class=\\\"vlist-t vlist-t2\\\"><span class=\\\"vlist-r\\\"><span class=\\\"vlist\\\" style=\\\"height:2.5574em;\\\"><span style=\\\"top:-4.5574em;\\\"><span class=\\\"pstrut\\\" style=\\\"height:3.3214em;\\\"></span><span class=\\\"mord\\\"><span class=\\\"mord\\\"></span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2778em;\\\"></span><span class=\\\"mrel\\\">=</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2778em;\\\"></span><span class=\\\"mord\\\"><span class=\\\"mopen nulldelimiter\\\"></span><span class=\\\"mfrac\\\"><span class=\\\"vlist-t vlist-t2\\\"><span class=\\\"vlist-r\\\"><span class=\\\"vlist\\\" style=\\\"height:1.3214em;\\\"><span style=\\\"top:-2.314em;\\\"><span class=\\\"pstrut\\\" style=\\\"height:3em;\\\"></span><span class=\\\"mord\\\"><span class=\\\"mord\\\">10</span></span></span><span style=\\\"top:-3.23em;\\\"><span class=\\\"pstrut\\\" style=\\\"height:3em;\\\"></span><span class=\\\"frac-line\\\" style=\\\"border-bottom-width:0.04em;\\\"></span></span><span style=\\\"top:-3.677em;\\\"><span class=\\\"pstrut\\\" style=\\\"height:3em;\\\"></span><span class=\\\"mord\\\"><span class=\\\"mord\\\">1</span></span></span></span><span class=\\\"vlist-s\\\">​</span></span><span class=\\\"vlist-r\\\"><span class=\\\"vlist\\\" style=\\\"height:0.686em;\\\"><span></span></span></span></span></span><span class=\\\"mclose nulldelimiter\\\"></span></span><span class=\\\"mpunct\\\">⋅</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.1667em;\\\"></span><span class=\\\"mopen\\\">(</span><span class=\\\"mord\\\">1</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2222em;\\\"></span><span class=\\\"mbin\\\">+</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2222em;\\\"></span><span class=\\\"mord\\\">1</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2222em;\\\"></span><span class=\\\"mbin\\\">+</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2222em;\\\"></span><span class=\\\"mord\\\">1</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2222em;\\\"></span><span class=\\\"mbin\\\">+</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2222em;\\\"></span><span class=\\\"mord\\\">1</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2222em;\\\"></span><span class=\\\"mbin\\\">+</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2222em;\\\"></span><span class=\\\"mord\\\">1</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2222em;\\\"></span><span class=\\\"mbin\\\">+</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2222em;\\\"></span><span class=\\\"mord\\\">0</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2222em;\\\"></span><span class=\\\"mbin\\\">+</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2222em;\\\"></span><span class=\\\"mord\\\">0</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2222em;\\\"></span><span class=\\\"mbin\\\">+</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2222em;\\\"></span><span class=\\\"mord\\\">0</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2222em;\\\"></span><span class=\\\"mbin\\\">+</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2222em;\\\"></span><span class=\\\"mord\\\">0</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2222em;\\\"></span><span class=\\\"mbin\\\">+</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2222em;\\\"></span><span class=\\\"mord\\\">0</span><span class=\\\"mclose\\\">)</span></span></span><span style=\\\"top:-2.25em;\\\"><span class=\\\"pstrut\\\" style=\\\"height:3.3214em;\\\"></span><span class=\\\"mord\\\"><span class=\\\"mord\\\"></span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2778em;\\\"></span><span class=\\\"mrel\\\">=</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2778em;\\\"></span><span class=\\\"mord\\\"><span class=\\\"mopen nulldelimiter\\\"></span><span class=\\\"mfrac\\\"><span class=\\\"vlist-t vlist-t2\\\"><span class=\\\"vlist-r\\\"><span class=\\\"vlist\\\" style=\\\"height:1.3214em;\\\"><span style=\\\"top:-2.314em;\\\"><span class=\\\"pstrut\\\" style=\\\"height:3em;\\\"></span><span class=\\\"mord\\\"><span class=\\\"mord\\\">10</span></span></span><span style=\\\"top:-3.23em;\\\"><span class=\\\"pstrut\\\" style=\\\"height:3em;\\\"></span><span class=\\\"frac-line\\\" style=\\\"border-bottom-width:0.04em;\\\"></span></span><span style=\\\"top:-3.677em;\\\"><span class=\\\"pstrut\\\" style=\\\"height:3em;\\\"></span><span class=\\\"mord\\\"><span class=\\\"mord\\\">5</span></span></span></span><span class=\\\"vlist-s\\\">​</span></span><span class=\\\"vlist-r\\\"><span class=\\\"vlist\\\" style=\\\"height:0.686em;\\\"><span></span></span></span></span></span><span class=\\\"mclose nulldelimiter\\\"></span></span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2778em;\\\"></span><span class=\\\"mrel\\\">=</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2778em;\\\"></span><span class=\\\"mord\\\">0.5</span></span></span></span><span class=\\\"vlist-s\\\">​</span></span><span class=\\\"vlist-r\\\"><span class=\\\"vlist\\\" style=\\\"height:2.0574em;\\\"><span></span></span></span></span></span></span></span></span></span></span></span></span></p>\\n<p>并且：</p>\\n<p><span class=\\\"katex-display katexp\\\"><span class=\\\"katex-display\\\"><span class=\\\"katex\\\"><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:1em;vertical-align:-0.25em;\\\"></span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.10764em;\\\">f</span><span class=\\\"mopen\\\">(</span><span class=\\\"mord\\\">17</span><span class=\\\"mclose\\\">)</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2778em;\\\"></span><span class=\\\"mrel\\\">=</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2778em;\\\"></span></span><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:1em;vertical-align:-0.25em;\\\"></span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.10764em;\\\">f</span><span class=\\\"mopen\\\">(</span><span class=\\\"mord\\\">18</span><span class=\\\"mclose\\\">)</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2778em;\\\"></span><span class=\\\"mrel\\\">=</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2778em;\\\"></span></span><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:1em;vertical-align:-0.25em;\\\"></span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.10764em;\\\">f</span><span class=\\\"mopen\\\">(</span><span class=\\\"mord\\\">19</span><span class=\\\"mclose\\\">)</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2778em;\\\"></span><span class=\\\"mrel\\\">=</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2778em;\\\"></span></span><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:1em;vertical-align:-0.25em;\\\"></span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.10764em;\\\">f</span><span class=\\\"mopen\\\">(</span><span class=\\\"mord\\\">20</span><span class=\\\"mclose\\\">)</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2778em;\\\"></span><span class=\\\"mrel\\\">=</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2778em;\\\"></span></span><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:1em;vertical-align:-0.25em;\\\"></span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.10764em;\\\">f</span><span class=\\\"mopen\\\">(</span><span class=\\\"mord\\\">21</span><span class=\\\"mclose\\\">)</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2778em;\\\"></span><span class=\\\"mrel\\\">=</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2778em;\\\"></span></span><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.6444em;\\\"></span><span class=\\\"mord\\\">1</span></span><span class=\\\"mspace newline\\\"></span><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:1em;vertical-align:-0.25em;\\\"></span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.10764em;\\\">f</span><span class=\\\"mopen\\\">(</span><span class=\\\"mord\\\">22</span><span class=\\\"mclose\\\">)</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2778em;\\\"></span><span class=\\\"mrel\\\">=</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2778em;\\\"></span></span><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:1em;vertical-align:-0.25em;\\\"></span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.10764em;\\\">f</span><span class=\\\"mopen\\\">(</span><span class=\\\"mord\\\">23</span><span class=\\\"mclose\\\">)</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2778em;\\\"></span><span class=\\\"mrel\\\">=</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2778em;\\\"></span></span><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:1em;vertical-align:-0.25em;\\\"></span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.10764em;\\\">f</span><span class=\\\"mopen\\\">(</span><span class=\\\"mord\\\">24</span><span class=\\\"mclose\\\">)</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2778em;\\\"></span><span class=\\\"mrel\\\">=</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2778em;\\\"></span></span><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:1em;vertical-align:-0.25em;\\\"></span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.10764em;\\\">f</span><span class=\\\"mopen\\\">(</span><span class=\\\"mord\\\">25</span><span class=\\\"mclose\\\">)</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2778em;\\\"></span><span class=\\\"mrel\\\">=</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2778em;\\\"></span></span><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:1em;vertical-align:-0.25em;\\\"></span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.10764em;\\\">f</span><span class=\\\"mopen\\\">(</span><span class=\\\"mord\\\">26</span><span class=\\\"mclose\\\">)</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2778em;\\\"></span><span class=\\\"mrel\\\">=</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2778em;\\\"></span></span><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.6444em;\\\"></span><span class=\\\"mord\\\">0</span></span></span></span></span></span></p>\\n<p> 于是我们可以得到初步的状态转移方程：</p>\\n<p><span class=\\\"katex-display katexp\\\"><span class=\\\"katex-display\\\"><span class=\\\"katex\\\"><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:9.0823em;vertical-align:-4.2912em;\\\"></span><span class=\\\"mord\\\"><span class=\\\"mtable\\\"><span class=\\\"col-align-r\\\"><span class=\\\"vlist-t vlist-t2\\\"><span class=\\\"vlist-r\\\"><span class=\\\"vlist\\\" style=\\\"height:4.7912em;\\\"><span style=\\\"top:-7.1572em;\\\"><span class=\\\"pstrut\\\" style=\\\"height:3.6875em;\\\"></span><span class=\\\"mord\\\"><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.10764em;\\\">f</span><span class=\\\"mopen\\\">(</span><span class=\\\"mord mathnormal\\\">x</span><span class=\\\"mclose\\\">)</span></span></span><span style=\\\"top:-4.8498em;\\\"><span class=\\\"pstrut\\\" style=\\\"height:3.6875em;\\\"></span><span class=\\\"mord\\\"><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.10764em;\\\">f</span><span class=\\\"mopen\\\">(</span><span class=\\\"mord mathnormal\\\">x</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2222em;\\\"></span><span class=\\\"mbin\\\">−</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2222em;\\\"></span><span class=\\\"mord\\\">1</span><span class=\\\"mclose\\\">)</span></span></span><span style=\\\"top:-2.3638em;\\\"><span class=\\\"pstrut\\\" style=\\\"height:3.6875em;\\\"></span><span class=\\\"mord\\\"><span class=\\\"mord\\\"><span class=\\\"mord\\\">⋮</span><span class=\\\"mord rule\\\" style=\\\"border-right-width:0em;border-top-width:1.5em;bottom:0em;\\\"></span></span></span></span><span style=\\\"top:-0.3823em;\\\"><span class=\\\"pstrut\\\" style=\\\"height:3.6875em;\\\"></span><span class=\\\"mord\\\"><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.10764em;\\\">f</span><span class=\\\"mopen\\\">(</span><span class=\\\"mord\\\">0</span><span class=\\\"mclose\\\">)</span></span></span></span><span class=\\\"vlist-s\\\">​</span></span><span class=\\\"vlist-r\\\"><span class=\\\"vlist\\\" style=\\\"height:4.2912em;\\\"><span></span></span></span></span></span><span class=\\\"col-align-l\\\"><span class=\\\"vlist-t vlist-t2\\\"><span class=\\\"vlist-r\\\"><span class=\\\"vlist\\\" style=\\\"height:4.7912em;\\\"><span style=\\\"top:-6.7912em;\\\"><span class=\\\"pstrut\\\" style=\\\"height:3.3214em;\\\"></span><span class=\\\"mord\\\"><span class=\\\"mord\\\"></span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2778em;\\\"></span><span class=\\\"mrel\\\">=</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2778em;\\\"></span><span class=\\\"mord\\\"><span class=\\\"mopen nulldelimiter\\\"></span><span class=\\\"mfrac\\\"><span class=\\\"vlist-t vlist-t2\\\"><span class=\\\"vlist-r\\\"><span class=\\\"vlist\\\" style=\\\"height:1.3214em;\\\"><span style=\\\"top:-2.314em;\\\"><span class=\\\"pstrut\\\" style=\\\"height:3em;\\\"></span><span class=\\\"mord\\\"><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.13889em;\\\">W</span></span></span><span style=\\\"top:-3.23em;\\\"><span class=\\\"pstrut\\\" style=\\\"height:3em;\\\"></span><span class=\\\"frac-line\\\" style=\\\"border-bottom-width:0.04em;\\\"></span></span><span style=\\\"top:-3.677em;\\\"><span class=\\\"pstrut\\\" style=\\\"height:3em;\\\"></span><span class=\\\"mord\\\"><span class=\\\"mord\\\">1</span></span></span></span><span class=\\\"vlist-s\\\">​</span></span><span class=\\\"vlist-r\\\"><span class=\\\"vlist\\\" style=\\\"height:0.686em;\\\"><span></span></span></span></span></span><span class=\\\"mclose nulldelimiter\\\"></span></span><span class=\\\"mpunct\\\">⋅</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.1667em;\\\"></span><span class=\\\"mopen\\\">(</span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.10764em;\\\">f</span><span class=\\\"mopen\\\">(</span><span class=\\\"mord mathnormal\\\">x</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2222em;\\\"></span><span class=\\\"mbin\\\">+</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2222em;\\\"></span><span class=\\\"mord\\\">1</span><span class=\\\"mclose\\\">)</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2222em;\\\"></span><span class=\\\"mbin\\\">+</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2222em;\\\"></span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.10764em;\\\">f</span><span class=\\\"mopen\\\">(</span><span class=\\\"mord mathnormal\\\">x</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2222em;\\\"></span><span class=\\\"mbin\\\">+</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2222em;\\\"></span><span class=\\\"mord\\\">2</span><span class=\\\"mclose\\\">)</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2222em;\\\"></span><span class=\\\"mbin\\\">+</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2222em;\\\"></span><span class=\\\"minner\\\">⋯</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2222em;\\\"></span><span class=\\\"mbin\\\">+</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2222em;\\\"></span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.10764em;\\\">f</span><span class=\\\"mopen\\\">(</span><span class=\\\"mord mathnormal\\\">x</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2222em;\\\"></span><span class=\\\"mbin\\\">+</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2222em;\\\"></span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.13889em;\\\">W</span><span class=\\\"mclose\\\">))</span></span></span><span style=\\\"top:-4.4837em;\\\"><span class=\\\"pstrut\\\" style=\\\"height:3.3214em;\\\"></span><span class=\\\"mord\\\"><span class=\\\"mord\\\"></span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2778em;\\\"></span><span class=\\\"mrel\\\">=</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2778em;\\\"></span><span class=\\\"mord\\\"><span class=\\\"mopen nulldelimiter\\\"></span><span class=\\\"mfrac\\\"><span class=\\\"vlist-t vlist-t2\\\"><span class=\\\"vlist-r\\\"><span class=\\\"vlist\\\" style=\\\"height:1.3214em;\\\"><span style=\\\"top:-2.314em;\\\"><span class=\\\"pstrut\\\" style=\\\"height:3em;\\\"></span><span class=\\\"mord\\\"><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.13889em;\\\">W</span></span></span><span style=\\\"top:-3.23em;\\\"><span class=\\\"pstrut\\\" style=\\\"height:3em;\\\"></span><span class=\\\"frac-line\\\" style=\\\"border-bottom-width:0.04em;\\\"></span></span><span style=\\\"top:-3.677em;\\\"><span class=\\\"pstrut\\\" style=\\\"height:3em;\\\"></span><span class=\\\"mord\\\"><span class=\\\"mord\\\">1</span></span></span></span><span class=\\\"vlist-s\\\">​</span></span><span class=\\\"vlist-r\\\"><span class=\\\"vlist\\\" style=\\\"height:0.686em;\\\"><span></span></span></span></span></span><span class=\\\"mclose nulldelimiter\\\"></span></span><span class=\\\"mpunct\\\">⋅</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.1667em;\\\"></span><span class=\\\"mopen\\\">(</span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.10764em;\\\">f</span><span class=\\\"mopen\\\">(</span><span class=\\\"mord mathnormal\\\">x</span><span class=\\\"mclose\\\">)</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2222em;\\\"></span><span class=\\\"mbin\\\">+</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2222em;\\\"></span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.10764em;\\\">f</span><span class=\\\"mopen\\\">(</span><span class=\\\"mord mathnormal\\\">x</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2222em;\\\"></span><span class=\\\"mbin\\\">+</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2222em;\\\"></span><span class=\\\"mord\\\">1</span><span class=\\\"mclose\\\">)</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2222em;\\\"></span><span class=\\\"mbin\\\">+</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2222em;\\\"></span><span class=\\\"minner\\\">⋯</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2222em;\\\"></span><span class=\\\"mbin\\\">+</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2222em;\\\"></span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.10764em;\\\">f</span><span class=\\\"mopen\\\">(</span><span class=\\\"mord mathnormal\\\">x</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2222em;\\\"></span><span class=\\\"mbin\\\">+</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2222em;\\\"></span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.13889em;\\\">W</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2222em;\\\"></span><span class=\\\"mbin\\\">−</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2222em;\\\"></span><span class=\\\"mord\\\">1</span><span class=\\\"mclose\\\">))</span></span></span><span style=\\\"top:-0.0163em;\\\"><span class=\\\"pstrut\\\" style=\\\"height:3.3214em;\\\"></span><span class=\\\"mord\\\"><span class=\\\"mord\\\"></span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2778em;\\\"></span><span class=\\\"mrel\\\">=</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2778em;\\\"></span><span class=\\\"mord\\\"><span class=\\\"mopen nulldelimiter\\\"></span><span class=\\\"mfrac\\\"><span class=\\\"vlist-t vlist-t2\\\"><span class=\\\"vlist-r\\\"><span class=\\\"vlist\\\" style=\\\"height:1.3214em;\\\"><span style=\\\"top:-2.314em;\\\"><span class=\\\"pstrut\\\" style=\\\"height:3em;\\\"></span><span class=\\\"mord\\\"><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.13889em;\\\">W</span></span></span><span style=\\\"top:-3.23em;\\\"><span class=\\\"pstrut\\\" style=\\\"height:3em;\\\"></span><span class=\\\"frac-line\\\" style=\\\"border-bottom-width:0.04em;\\\"></span></span><span style=\\\"top:-3.677em;\\\"><span class=\\\"pstrut\\\" style=\\\"height:3em;\\\"></span><span class=\\\"mord\\\"><span class=\\\"mord\\\">1</span></span></span></span><span class=\\\"vlist-s\\\">​</span></span><span class=\\\"vlist-r\\\"><span class=\\\"vlist\\\" style=\\\"height:0.686em;\\\"><span></span></span></span></span></span><span class=\\\"mclose nulldelimiter\\\"></span></span><span class=\\\"mpunct\\\">⋅</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.1667em;\\\"></span><span class=\\\"mopen\\\">(</span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.10764em;\\\">f</span><span class=\\\"mopen\\\">(</span><span class=\\\"mord\\\">1</span><span class=\\\"mclose\\\">)</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2222em;\\\"></span><span class=\\\"mbin\\\">+</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2222em;\\\"></span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.10764em;\\\">f</span><span class=\\\"mopen\\\">(</span><span class=\\\"mord\\\">2</span><span class=\\\"mclose\\\">)</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2222em;\\\"></span><span class=\\\"mbin\\\">+</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2222em;\\\"></span><span class=\\\"minner\\\">⋯</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2222em;\\\"></span><span class=\\\"mbin\\\">+</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2222em;\\\"></span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.10764em;\\\">f</span><span class=\\\"mopen\\\">(</span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.13889em;\\\">W</span><span class=\\\"mclose\\\">))</span></span></span></span><span class=\\\"vlist-s\\\">​</span></span><span class=\\\"vlist-r\\\"><span class=\\\"vlist\\\" style=\\\"height:4.2912em;\\\"><span></span></span></span></span></span></span></span></span></span></span></span></span></p>\\n<p>到这里为止，其实我们已经能够写出题解了，但是我们要是以高中生的眼光来看上面的公式，我们不难发现，后一项和前一项的公式中其实有部分个结果是有重复的部分，*f(x)<em>和</em>f(x - 1)<em>中有重叠的</em>f(x + 1) + ... + f(x + W - 1))*，于是我们可以两式相减来简化一下：</p>\\n<p><span class=\\\"katex-display katexp\\\"><span class=\\\"katex-display\\\"><span class=\\\"katex\\\"><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:6.9223em;vertical-align:-3.2112em;\\\"></span><span class=\\\"mord\\\"><span class=\\\"mtable\\\"><span class=\\\"col-align-r\\\"><span class=\\\"vlist-t vlist-t2\\\"><span class=\\\"vlist-r\\\"><span class=\\\"vlist\\\" style=\\\"height:3.7112em;\\\"><span style=\\\"top:-5.7112em;\\\"><span class=\\\"pstrut\\\" style=\\\"height:3.3214em;\\\"></span><span class=\\\"mord\\\"><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.10764em;\\\">f</span><span class=\\\"mopen\\\">(</span><span class=\\\"mord mathnormal\\\">x</span><span class=\\\"mclose\\\">)</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2222em;\\\"></span><span class=\\\"mbin\\\">−</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2222em;\\\"></span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.10764em;\\\">f</span><span class=\\\"mopen\\\">(</span><span class=\\\"mord mathnormal\\\">x</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2222em;\\\"></span><span class=\\\"mbin\\\">−</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2222em;\\\"></span><span class=\\\"mord\\\">1</span><span class=\\\"mclose\\\">)</span></span></span><span style=\\\"top:-3.4037em;\\\"><span class=\\\"pstrut\\\" style=\\\"height:3.3214em;\\\"></span><span class=\\\"mord\\\"></span></span><span style=\\\"top:-1.0963em;\\\"><span class=\\\"pstrut\\\" style=\\\"height:3.3214em;\\\"></span><span class=\\\"mord\\\"></span></span></span><span class=\\\"vlist-s\\\">​</span></span><span class=\\\"vlist-r\\\"><span class=\\\"vlist\\\" style=\\\"height:3.2112em;\\\"><span></span></span></span></span></span><span class=\\\"col-align-l\\\"><span class=\\\"vlist-t vlist-t2\\\"><span class=\\\"vlist-r\\\"><span class=\\\"vlist\\\" style=\\\"height:3.7112em;\\\"><span style=\\\"top:-5.7112em;\\\"><span class=\\\"pstrut\\\" style=\\\"height:3.3214em;\\\"></span><span class=\\\"mord\\\"><span class=\\\"mord\\\"></span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2778em;\\\"></span><span class=\\\"mrel\\\">=</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2778em;\\\"></span><span class=\\\"mord\\\"><span class=\\\"mopen nulldelimiter\\\"></span><span class=\\\"mfrac\\\"><span class=\\\"vlist-t vlist-t2\\\"><span class=\\\"vlist-r\\\"><span class=\\\"vlist\\\" style=\\\"height:1.3214em;\\\"><span style=\\\"top:-2.314em;\\\"><span class=\\\"pstrut\\\" style=\\\"height:3em;\\\"></span><span class=\\\"mord\\\"><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.13889em;\\\">W</span></span></span><span style=\\\"top:-3.23em;\\\"><span class=\\\"pstrut\\\" style=\\\"height:3em;\\\"></span><span class=\\\"frac-line\\\" style=\\\"border-bottom-width:0.04em;\\\"></span></span><span style=\\\"top:-3.677em;\\\"><span class=\\\"pstrut\\\" style=\\\"height:3em;\\\"></span><span class=\\\"mord\\\"><span class=\\\"mord\\\">1</span></span></span></span><span class=\\\"vlist-s\\\">​</span></span><span class=\\\"vlist-r\\\"><span class=\\\"vlist\\\" style=\\\"height:0.686em;\\\"><span></span></span></span></span></span><span class=\\\"mclose nulldelimiter\\\"></span></span><span class=\\\"mpunct\\\">⋅</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.1667em;\\\"></span><span class=\\\"mopen\\\">(</span><span class=\\\"mord cancel-lap\\\"><span class=\\\"vlist-t vlist-t2\\\"><span class=\\\"vlist-r\\\"><span class=\\\"vlist\\\" style=\\\"height:0.75em;\\\"><span style=\\\"top:-3em;\\\"><span class=\\\"pstrut\\\" style=\\\"height:3em;\\\"></span><span class=\\\"mord cancel-pad\\\"><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.10764em;\\\">f</span><span class=\\\"mopen\\\">(</span><span class=\\\"mord mathnormal\\\">x</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2222em;\\\"></span><span class=\\\"mbin\\\">+</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2222em;\\\"></span><span class=\\\"mord\\\">1</span><span class=\\\"mclose\\\">)</span></span></span><span class=\\\"svg-align\\\" style=\\\"top:-2.75em;\\\"><span class=\\\"pstrut\\\" style=\\\"height:3em;\\\"></span><span style=\\\"height:1em;\\\"><svg xmlns=\\\"http://www.w3.org/2000/svg\\\" width='100%' height='1em'><line x1='0' y1='0' x2='100%' y2='100%' stroke-width='0.046em'/></svg></span></span></span><span class=\\\"vlist-s\\\">​</span></span><span class=\\\"vlist-r\\\"><span class=\\\"vlist\\\" style=\\\"height:0.25em;\\\"><span></span></span></span></span></span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2222em;\\\"></span><span class=\\\"mbin\\\">+</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2222em;\\\"></span><span class=\\\"mord cancel-lap\\\"><span class=\\\"vlist-t vlist-t2\\\"><span class=\\\"vlist-r\\\"><span class=\\\"vlist\\\" style=\\\"height:0.75em;\\\"><span style=\\\"top:-3em;\\\"><span class=\\\"pstrut\\\" style=\\\"height:3em;\\\"></span><span class=\\\"mord cancel-pad\\\"><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.10764em;\\\">f</span><span class=\\\"mopen\\\">(</span><span class=\\\"mord mathnormal\\\">x</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2222em;\\\"></span><span class=\\\"mbin\\\">+</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2222em;\\\"></span><span class=\\\"mord\\\">2</span><span class=\\\"mclose\\\">)</span></span></span><span class=\\\"svg-align\\\" style=\\\"top:-2.75em;\\\"><span class=\\\"pstrut\\\" style=\\\"height:3em;\\\"></span><span style=\\\"height:1em;\\\"><svg xmlns=\\\"http://www.w3.org/2000/svg\\\" width='100%' height='1em'><line x1='0' y1='0' x2='100%' y2='100%' stroke-width='0.046em'/></svg></span></span></span><span class=\\\"vlist-s\\\">​</span></span><span class=\\\"vlist-r\\\"><span class=\\\"vlist\\\" style=\\\"height:0.25em;\\\"><span></span></span></span></span></span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2222em;\\\"></span><span class=\\\"mbin\\\">+</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2222em;\\\"></span><span class=\\\"mord\\\"><span class=\\\"vlist-t vlist-t2\\\"><span class=\\\"vlist-r\\\"><span class=\\\"vlist\\\" style=\\\"height:0.513em;\\\"><span style=\\\"top:-3em;\\\"><span class=\\\"pstrut\\\" style=\\\"height:3em;\\\"></span><span class=\\\"mord\\\"><span class=\\\"minner\\\">⋯</span></span></span><span class=\\\"svg-align\\\" style=\\\"top:-2.8em;\\\"><span class=\\\"pstrut\\\" style=\\\"height:3em;\\\"></span><span style=\\\"height:0.713em;\\\"><svg xmlns=\\\"http://www.w3.org/2000/svg\\\" width='100%' height='0.713em'><line x1='0' y1='0' x2='100%' y2='100%' stroke-width='0.046em'/></svg></span></span></span><span class=\\\"vlist-s\\\">​</span></span><span class=\\\"vlist-r\\\"><span class=\\\"vlist\\\" style=\\\"height:0.2em;\\\"><span></span></span></span></span></span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2222em;\\\"></span><span class=\\\"mbin\\\">+</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2222em;\\\"></span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.10764em;\\\">f</span><span class=\\\"mopen\\\">(</span><span class=\\\"mord mathnormal\\\">x</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2222em;\\\"></span><span class=\\\"mbin\\\">+</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2222em;\\\"></span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.13889em;\\\">W</span><span class=\\\"mclose\\\">))</span></span></span><span style=\\\"top:-3.4037em;\\\"><span class=\\\"pstrut\\\" style=\\\"height:3.3214em;\\\"></span><span class=\\\"mord\\\"><span class=\\\"mord\\\"></span><span class=\\\"mspace\\\" style=\\\"margin-right:1em;\\\"></span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2222em;\\\"></span><span class=\\\"mbin\\\">−</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2222em;\\\"></span><span class=\\\"mord\\\"><span class=\\\"mopen nulldelimiter\\\"></span><span class=\\\"mfrac\\\"><span class=\\\"vlist-t vlist-t2\\\"><span class=\\\"vlist-r\\\"><span class=\\\"vlist\\\" style=\\\"height:1.3214em;\\\"><span style=\\\"top:-2.314em;\\\"><span class=\\\"pstrut\\\" style=\\\"height:3em;\\\"></span><span class=\\\"mord\\\"><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.13889em;\\\">W</span></span></span><span style=\\\"top:-3.23em;\\\"><span class=\\\"pstrut\\\" style=\\\"height:3em;\\\"></span><span class=\\\"frac-line\\\" style=\\\"border-bottom-width:0.04em;\\\"></span></span><span style=\\\"top:-3.677em;\\\"><span class=\\\"pstrut\\\" style=\\\"height:3em;\\\"></span><span class=\\\"mord\\\"><span class=\\\"mord\\\">1</span></span></span></span><span class=\\\"vlist-s\\\">​</span></span><span class=\\\"vlist-r\\\"><span class=\\\"vlist\\\" style=\\\"height:0.686em;\\\"><span></span></span></span></span></span><span class=\\\"mclose nulldelimiter\\\"></span></span><span class=\\\"mpunct\\\">⋅</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.1667em;\\\"></span><span class=\\\"mopen\\\">(</span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.10764em;\\\">f</span><span class=\\\"mopen\\\">(</span><span class=\\\"mord mathnormal\\\">x</span><span class=\\\"mclose\\\">)</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2222em;\\\"></span><span class=\\\"mbin\\\">+</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2222em;\\\"></span><span class=\\\"mord cancel-lap\\\"><span class=\\\"vlist-t vlist-t2\\\"><span class=\\\"vlist-r\\\"><span class=\\\"vlist\\\" style=\\\"height:0.75em;\\\"><span style=\\\"top:-3em;\\\"><span class=\\\"pstrut\\\" style=\\\"height:3em;\\\"></span><span class=\\\"mord cancel-pad\\\"><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.10764em;\\\">f</span><span class=\\\"mopen\\\">(</span><span class=\\\"mord mathnormal\\\">x</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2222em;\\\"></span><span class=\\\"mbin\\\">+</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2222em;\\\"></span><span class=\\\"mord\\\">1</span><span class=\\\"mclose\\\">)</span></span></span><span class=\\\"svg-align\\\" style=\\\"top:-2.75em;\\\"><span class=\\\"pstrut\\\" style=\\\"height:3em;\\\"></span><span style=\\\"height:1em;\\\"><svg xmlns=\\\"http://www.w3.org/2000/svg\\\" width='100%' height='1em'><line x1='0' y1='0' x2='100%' y2='100%' stroke-width='0.046em'/></svg></span></span></span><span class=\\\"vlist-s\\\">​</span></span><span class=\\\"vlist-r\\\"><span class=\\\"vlist\\\" style=\\\"height:0.25em;\\\"><span></span></span></span></span></span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2222em;\\\"></span><span class=\\\"mbin\\\">+</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2222em;\\\"></span><span class=\\\"mord\\\"><span class=\\\"vlist-t vlist-t2\\\"><span class=\\\"vlist-r\\\"><span class=\\\"vlist\\\" style=\\\"height:0.513em;\\\"><span style=\\\"top:-3em;\\\"><span class=\\\"pstrut\\\" style=\\\"height:3em;\\\"></span><span class=\\\"mord\\\"><span class=\\\"minner\\\">⋯</span></span></span><span class=\\\"svg-align\\\" style=\\\"top:-2.8em;\\\"><span class=\\\"pstrut\\\" style=\\\"height:3em;\\\"></span><span style=\\\"height:0.713em;\\\"><svg xmlns=\\\"http://www.w3.org/2000/svg\\\" width='100%' height='0.713em'><line x1='0' y1='0' x2='100%' y2='100%' stroke-width='0.046em'/></svg></span></span></span><span class=\\\"vlist-s\\\">​</span></span><span class=\\\"vlist-r\\\"><span class=\\\"vlist\\\" style=\\\"height:0.2em;\\\"><span></span></span></span></span></span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2222em;\\\"></span><span class=\\\"mbin\\\">+</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2222em;\\\"></span><span class=\\\"mord cancel-lap\\\"><span class=\\\"vlist-t vlist-t2\\\"><span class=\\\"vlist-r\\\"><span class=\\\"vlist\\\" style=\\\"height:0.75em;\\\"><span style=\\\"top:-3em;\\\"><span class=\\\"pstrut\\\" style=\\\"height:3em;\\\"></span><span class=\\\"mord cancel-pad\\\"><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.10764em;\\\">f</span><span class=\\\"mopen\\\">(</span><span class=\\\"mord mathnormal\\\">x</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2222em;\\\"></span><span class=\\\"mbin\\\">+</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2222em;\\\"></span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.13889em;\\\">W</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2222em;\\\"></span><span class=\\\"mbin\\\">−</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2222em;\\\"></span><span class=\\\"mord\\\">1</span><span class=\\\"mclose\\\">)</span></span></span><span class=\\\"svg-align\\\" style=\\\"top:-2.75em;\\\"><span class=\\\"pstrut\\\" style=\\\"height:3em;\\\"></span><span style=\\\"height:1em;\\\"><svg xmlns=\\\"http://www.w3.org/2000/svg\\\" width='100%' height='1em'><line x1='0' y1='0' x2='100%' y2='100%' stroke-width='0.046em'/></svg></span></span></span><span class=\\\"vlist-s\\\">​</span></span><span class=\\\"vlist-r\\\"><span class=\\\"vlist\\\" style=\\\"height:0.25em;\\\"><span></span></span></span></span></span><span class=\\\"mclose\\\">)</span></span></span><span style=\\\"top:-1.0963em;\\\"><span class=\\\"pstrut\\\" style=\\\"height:3.3214em;\\\"></span><span class=\\\"mord\\\"><span class=\\\"mord\\\"></span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2778em;\\\"></span><span class=\\\"mrel\\\">=</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2778em;\\\"></span><span class=\\\"mord\\\"><span class=\\\"mopen nulldelimiter\\\"></span><span class=\\\"mfrac\\\"><span class=\\\"vlist-t vlist-t2\\\"><span class=\\\"vlist-r\\\"><span class=\\\"vlist\\\" style=\\\"height:1.3214em;\\\"><span style=\\\"top:-2.314em;\\\"><span class=\\\"pstrut\\\" style=\\\"height:3em;\\\"></span><span class=\\\"mord\\\"><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.13889em;\\\">W</span></span></span><span style=\\\"top:-3.23em;\\\"><span class=\\\"pstrut\\\" style=\\\"height:3em;\\\"></span><span class=\\\"frac-line\\\" style=\\\"border-bottom-width:0.04em;\\\"></span></span><span style=\\\"top:-3.677em;\\\"><span class=\\\"pstrut\\\" style=\\\"height:3em;\\\"></span><span class=\\\"mord\\\"><span class=\\\"mord\\\">1</span></span></span></span><span class=\\\"vlist-s\\\">​</span></span><span class=\\\"vlist-r\\\"><span class=\\\"vlist\\\" style=\\\"height:0.686em;\\\"><span></span></span></span></span></span><span class=\\\"mclose nulldelimiter\\\"></span></span><span class=\\\"mpunct\\\">⋅</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.1667em;\\\"></span><span class=\\\"mopen\\\">(</span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.10764em;\\\">f</span><span class=\\\"mopen\\\">(</span><span class=\\\"mord mathnormal\\\">x</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2222em;\\\"></span><span class=\\\"mbin\\\">+</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2222em;\\\"></span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.13889em;\\\">W</span><span class=\\\"mclose\\\">)</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2222em;\\\"></span><span class=\\\"mbin\\\">−</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2222em;\\\"></span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.10764em;\\\">f</span><span class=\\\"mopen\\\">(</span><span class=\\\"mord mathnormal\\\">x</span><span class=\\\"mclose\\\">))</span></span></span></span><span class=\\\"vlist-s\\\">​</span></span><span class=\\\"vlist-r\\\"><span class=\\\"vlist\\\" style=\\\"height:3.2112em;\\\"><span></span></span></span></span></span></span></span></span></span></span></span></span></p>\\n<p>于是有：</p>\\n<p><span class=\\\"katex-display katexp\\\"><span class=\\\"katex-display\\\"><span class=\\\"katex\\\"><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:1em;vertical-align:-0.25em;\\\"></span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.10764em;\\\">f</span><span class=\\\"mopen\\\">(</span><span class=\\\"mord mathnormal\\\">x</span><span class=\\\"mclose\\\">)</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2222em;\\\"></span><span class=\\\"mbin\\\">−</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2222em;\\\"></span></span><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:1em;vertical-align:-0.25em;\\\"></span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.10764em;\\\">f</span><span class=\\\"mopen\\\">(</span><span class=\\\"mord mathnormal\\\">x</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2222em;\\\"></span><span class=\\\"mbin\\\">−</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2222em;\\\"></span></span><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:1em;vertical-align:-0.25em;\\\"></span><span class=\\\"mord\\\">1</span><span class=\\\"mclose\\\">)</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2778em;\\\"></span><span class=\\\"mrel\\\">=</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2778em;\\\"></span></span><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:2.0074em;vertical-align:-0.686em;\\\"></span><span class=\\\"mord\\\"><span class=\\\"mopen nulldelimiter\\\"></span><span class=\\\"mfrac\\\"><span class=\\\"vlist-t vlist-t2\\\"><span class=\\\"vlist-r\\\"><span class=\\\"vlist\\\" style=\\\"height:1.3214em;\\\"><span style=\\\"top:-2.314em;\\\"><span class=\\\"pstrut\\\" style=\\\"height:3em;\\\"></span><span class=\\\"mord\\\"><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.13889em;\\\">W</span></span></span><span style=\\\"top:-3.23em;\\\"><span class=\\\"pstrut\\\" style=\\\"height:3em;\\\"></span><span class=\\\"frac-line\\\" style=\\\"border-bottom-width:0.04em;\\\"></span></span><span style=\\\"top:-3.677em;\\\"><span class=\\\"pstrut\\\" style=\\\"height:3em;\\\"></span><span class=\\\"mord\\\"><span class=\\\"mord\\\">1</span></span></span></span><span class=\\\"vlist-s\\\">​</span></span><span class=\\\"vlist-r\\\"><span class=\\\"vlist\\\" style=\\\"height:0.686em;\\\"><span></span></span></span></span></span><span class=\\\"mclose nulldelimiter\\\"></span></span><span class=\\\"mpunct\\\">⋅</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.1667em;\\\"></span><span class=\\\"mopen\\\">(</span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.10764em;\\\">f</span><span class=\\\"mopen\\\">(</span><span class=\\\"mord mathnormal\\\">x</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2222em;\\\"></span><span class=\\\"mbin\\\">+</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2222em;\\\"></span></span><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:1em;vertical-align:-0.25em;\\\"></span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.13889em;\\\">W</span><span class=\\\"mclose\\\">)</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2222em;\\\"></span><span class=\\\"mbin\\\">−</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2222em;\\\"></span></span><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:1em;vertical-align:-0.25em;\\\"></span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.10764em;\\\">f</span><span class=\\\"mopen\\\">(</span><span class=\\\"mord mathnormal\\\">x</span><span class=\\\"mclose\\\">))</span></span></span></span></span></span></p>\\n<p>到这里有两个化简选择：</p>\\n<ol>\\n<li><p>如果*f(x - 1)*右移：</p>\\n<p><span class=\\\"katex-display katexp\\\"><span class=\\\"katex-display\\\"><span class=\\\"katex\\\"><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:1em;vertical-align:-0.25em;\\\"></span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.10764em;\\\">f</span><span class=\\\"mopen\\\">(</span><span class=\\\"mord mathnormal\\\">x</span><span class=\\\"mclose\\\">)</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2778em;\\\"></span><span class=\\\"mrel\\\">=</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2778em;\\\"></span></span><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:2.0074em;vertical-align:-0.686em;\\\"></span><span class=\\\"mord\\\"><span class=\\\"mopen nulldelimiter\\\"></span><span class=\\\"mfrac\\\"><span class=\\\"vlist-t vlist-t2\\\"><span class=\\\"vlist-r\\\"><span class=\\\"vlist\\\" style=\\\"height:1.3214em;\\\"><span style=\\\"top:-2.314em;\\\"><span class=\\\"pstrut\\\" style=\\\"height:3em;\\\"></span><span class=\\\"mord\\\"><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.13889em;\\\">W</span></span></span><span style=\\\"top:-3.23em;\\\"><span class=\\\"pstrut\\\" style=\\\"height:3em;\\\"></span><span class=\\\"frac-line\\\" style=\\\"border-bottom-width:0.04em;\\\"></span></span><span style=\\\"top:-3.677em;\\\"><span class=\\\"pstrut\\\" style=\\\"height:3em;\\\"></span><span class=\\\"mord\\\"><span class=\\\"mord\\\">1</span></span></span></span><span class=\\\"vlist-s\\\">​</span></span><span class=\\\"vlist-r\\\"><span class=\\\"vlist\\\" style=\\\"height:0.686em;\\\"><span></span></span></span></span></span><span class=\\\"mclose nulldelimiter\\\"></span></span><span class=\\\"mpunct\\\">⋅</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.1667em;\\\"></span><span class=\\\"mopen\\\">(</span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.10764em;\\\">f</span><span class=\\\"mopen\\\">(</span><span class=\\\"mord mathnormal\\\">x</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2222em;\\\"></span><span class=\\\"mbin\\\">+</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2222em;\\\"></span></span><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:1em;vertical-align:-0.25em;\\\"></span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.13889em;\\\">W</span><span class=\\\"mclose\\\">)</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2222em;\\\"></span><span class=\\\"mbin\\\">−</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2222em;\\\"></span></span><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:1em;vertical-align:-0.25em;\\\"></span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.10764em;\\\">f</span><span class=\\\"mopen\\\">(</span><span class=\\\"mord mathnormal\\\">x</span><span class=\\\"mclose\\\">))</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2222em;\\\"></span><span class=\\\"mbin\\\">−</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2222em;\\\"></span></span><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:1em;vertical-align:-0.25em;\\\"></span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.10764em;\\\">f</span><span class=\\\"mopen\\\">(</span><span class=\\\"mord mathnormal\\\">x</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2222em;\\\"></span><span class=\\\"mbin\\\">−</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2222em;\\\"></span></span><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:1em;vertical-align:-0.25em;\\\"></span><span class=\\\"mord\\\">1</span><span class=\\\"mclose\\\">)</span></span></span></span></span></span></p>\\n<p>这样无法求解，因为我们是从后往前推到的转移公式，最终是要推导道*f(0)*，我们希望的是要有：</p>\\n<p><span class=\\\"katex-display katexp\\\"><span class=\\\"katex-display\\\"><span class=\\\"katex\\\"><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:1em;vertical-align:-0.25em;\\\"></span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.10764em;\\\">f</span><span class=\\\"mopen\\\">(</span><span class=\\\"mord mathnormal\\\">x</span><span class=\\\"mclose\\\">)</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2778em;\\\"></span><span class=\\\"mrel\\\">=</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2778em;\\\"></span></span><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.6833em;\\\"></span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.07153em;\\\">C</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2222em;\\\"></span><span class=\\\"mbin\\\">⋅</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2222em;\\\"></span></span><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:1em;vertical-align:-0.25em;\\\"></span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.10764em;\\\">f</span><span class=\\\"mopen\\\">(</span><span class=\\\"mord mathnormal\\\">x</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2222em;\\\"></span><span class=\\\"mbin\\\">+</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2222em;\\\"></span></span><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:1em;vertical-align:-0.25em;\\\"></span><span class=\\\"mord\\\">1</span><span class=\\\"mclose\\\">)</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2222em;\\\"></span><span class=\\\"mbin\\\">+</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2222em;\\\"></span></span><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.6944em;\\\"></span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.03148em;\\\">k</span></span></span></span></span></span></p>\\n<p>这样的公式，这样我们才能倒序循环，从后一项推出前一项的值，观察上面的化简式可以发现，式中有3个高一项的值，一个矮一项的值，我们把高的都放右边，矮的单独放左边，于是有第二种化简</p>\\n</li>\\n<li><p>*f(x - 1)*右移后，原式右边左移，最后左右翻转一下：\\n<span class=\\\"katex-display katexp\\\"><span class=\\\"katex-display\\\"><span class=\\\"katex\\\"><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:4.6149em;vertical-align:-2.0574em;\\\"></span><span class=\\\"mord\\\"><span class=\\\"mtable\\\"><span class=\\\"col-align-r\\\"><span class=\\\"vlist-t vlist-t2\\\"><span class=\\\"vlist-r\\\"><span class=\\\"vlist\\\" style=\\\"height:2.5574em;\\\"><span style=\\\"top:-4.5574em;\\\"><span class=\\\"pstrut\\\" style=\\\"height:3.3214em;\\\"></span><span class=\\\"mord\\\"><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.10764em;\\\">f</span><span class=\\\"mopen\\\">(</span><span class=\\\"mord mathnormal\\\">x</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2222em;\\\"></span><span class=\\\"mbin\\\">−</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2222em;\\\"></span><span class=\\\"mord\\\">1</span><span class=\\\"mclose\\\">)</span></span></span><span style=\\\"top:-2.25em;\\\"><span class=\\\"pstrut\\\" style=\\\"height:3.3214em;\\\"></span><span class=\\\"mord\\\"><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.10764em;\\\">f</span><span class=\\\"mopen\\\">(</span><span class=\\\"mord mathnormal\\\">x</span><span class=\\\"mclose\\\">)</span></span></span></span><span class=\\\"vlist-s\\\">​</span></span><span class=\\\"vlist-r\\\"><span class=\\\"vlist\\\" style=\\\"height:2.0574em;\\\"><span></span></span></span></span></span><span class=\\\"col-align-l\\\"><span class=\\\"vlist-t vlist-t2\\\"><span class=\\\"vlist-r\\\"><span class=\\\"vlist\\\" style=\\\"height:2.5574em;\\\"><span style=\\\"top:-4.5574em;\\\"><span class=\\\"pstrut\\\" style=\\\"height:3.3214em;\\\"></span><span class=\\\"mord\\\"><span class=\\\"mord\\\"></span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2778em;\\\"></span><span class=\\\"mrel\\\">=</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2778em;\\\"></span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.10764em;\\\">f</span><span class=\\\"mopen\\\">(</span><span class=\\\"mord mathnormal\\\">x</span><span class=\\\"mclose\\\">)</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2222em;\\\"></span><span class=\\\"mbin\\\">−</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2222em;\\\"></span><span class=\\\"mord\\\"><span class=\\\"mopen nulldelimiter\\\"></span><span class=\\\"mfrac\\\"><span class=\\\"vlist-t vlist-t2\\\"><span class=\\\"vlist-r\\\"><span class=\\\"vlist\\\" style=\\\"height:1.3214em;\\\"><span style=\\\"top:-2.314em;\\\"><span class=\\\"pstrut\\\" style=\\\"height:3em;\\\"></span><span class=\\\"mord\\\"><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.13889em;\\\">W</span></span></span><span style=\\\"top:-3.23em;\\\"><span class=\\\"pstrut\\\" style=\\\"height:3em;\\\"></span><span class=\\\"frac-line\\\" style=\\\"border-bottom-width:0.04em;\\\"></span></span><span style=\\\"top:-3.677em;\\\"><span class=\\\"pstrut\\\" style=\\\"height:3em;\\\"></span><span class=\\\"mord\\\"><span class=\\\"mord\\\">1</span></span></span></span><span class=\\\"vlist-s\\\">​</span></span><span class=\\\"vlist-r\\\"><span class=\\\"vlist\\\" style=\\\"height:0.686em;\\\"><span></span></span></span></span></span><span class=\\\"mclose nulldelimiter\\\"></span></span><span class=\\\"mpunct\\\">⋅</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.1667em;\\\"></span><span class=\\\"mopen\\\">(</span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.10764em;\\\">f</span><span class=\\\"mopen\\\">(</span><span class=\\\"mord mathnormal\\\">x</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2222em;\\\"></span><span class=\\\"mbin\\\">+</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2222em;\\\"></span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.13889em;\\\">W</span><span class=\\\"mclose\\\">)</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2222em;\\\"></span><span class=\\\"mbin\\\">−</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2222em;\\\"></span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.10764em;\\\">f</span><span class=\\\"mopen\\\">(</span><span class=\\\"mord mathnormal\\\">x</span><span class=\\\"mclose\\\">))</span></span></span><span style=\\\"top:-2.25em;\\\"><span class=\\\"pstrut\\\" style=\\\"height:3.3214em;\\\"></span><span class=\\\"mord\\\"><span class=\\\"mord\\\"></span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2778em;\\\"></span><span class=\\\"mrel\\\">=</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2778em;\\\"></span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.10764em;\\\">f</span><span class=\\\"mopen\\\">(</span><span class=\\\"mord mathnormal\\\">x</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2222em;\\\"></span><span class=\\\"mbin\\\">+</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2222em;\\\"></span><span class=\\\"mord\\\">1</span><span class=\\\"mclose\\\">)</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2222em;\\\"></span><span class=\\\"mbin\\\">−</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2222em;\\\"></span><span class=\\\"mord\\\"><span class=\\\"mopen nulldelimiter\\\"></span><span class=\\\"mfrac\\\"><span class=\\\"vlist-t vlist-t2\\\"><span class=\\\"vlist-r\\\"><span class=\\\"vlist\\\" style=\\\"height:1.3214em;\\\"><span style=\\\"top:-2.314em;\\\"><span class=\\\"pstrut\\\" style=\\\"height:3em;\\\"></span><span class=\\\"mord\\\"><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.13889em;\\\">W</span></span></span><span style=\\\"top:-3.23em;\\\"><span class=\\\"pstrut\\\" style=\\\"height:3em;\\\"></span><span class=\\\"frac-line\\\" style=\\\"border-bottom-width:0.04em;\\\"></span></span><span style=\\\"top:-3.677em;\\\"><span class=\\\"pstrut\\\" style=\\\"height:3em;\\\"></span><span class=\\\"mord\\\"><span class=\\\"mord\\\">1</span></span></span></span><span class=\\\"vlist-s\\\">​</span></span><span class=\\\"vlist-r\\\"><span class=\\\"vlist\\\" style=\\\"height:0.686em;\\\"><span></span></span></span></span></span><span class=\\\"mclose nulldelimiter\\\"></span></span><span class=\\\"mpunct\\\">⋅</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.1667em;\\\"></span><span class=\\\"mopen\\\">(</span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.10764em;\\\">f</span><span class=\\\"mopen\\\">(</span><span class=\\\"mord mathnormal\\\">x</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2222em;\\\"></span><span class=\\\"mbin\\\">+</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2222em;\\\"></span><span class=\\\"mord\\\">1</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2222em;\\\"></span><span class=\\\"mbin\\\">+</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2222em;\\\"></span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.13889em;\\\">W</span><span class=\\\"mclose\\\">)</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2222em;\\\"></span><span class=\\\"mbin\\\">−</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2222em;\\\"></span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.10764em;\\\">f</span><span class=\\\"mopen\\\">(</span><span class=\\\"mord mathnormal\\\">x</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2222em;\\\"></span><span class=\\\"mbin\\\">+</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2222em;\\\"></span><span class=\\\"mord\\\">1</span><span class=\\\"mclose\\\">))</span></span></span></span><span class=\\\"vlist-s\\\">​</span></span><span class=\\\"vlist-r\\\"><span class=\\\"vlist\\\" style=\\\"height:2.0574em;\\\"><span></span></span></span></span></span></span></span></span></span></span></span></span></p>\\n</li>\\n</ol>\\n<p>上式就是我们最终得出的简化的通项公式，然后我们兴高采烈地写出题解：</p>\\n<pre><code class=\\\"hljs language-java\\\"><span class=\\\"hljs-keyword\\\">public</span> <span class=\\\"hljs-type\\\">double</span> <span class=\\\"hljs-title function_\\\">new21Game</span><span class=\\\"hljs-params\\\">(<span class=\\\"hljs-type\\\">int</span> n, <span class=\\\"hljs-type\\\">int</span> k, <span class=\\\"hljs-type\\\">int</span> w)</span> {\\n    <span class=\\\"hljs-keyword\\\">if</span> (k == <span class=\\\"hljs-number\\\">0</span>) <span class=\\\"hljs-keyword\\\">return</span> <span class=\\\"hljs-number\\\">1.0</span>;\\n    <span class=\\\"hljs-type\\\">double</span>[] dp = <span class=\\\"hljs-keyword\\\">new</span> <span class=\\\"hljs-title class_\\\">double</span>[k + w + <span class=\\\"hljs-number\\\">1</span>];\\n    <span class=\\\"hljs-keyword\\\">for</span> (<span class=\\\"hljs-type\\\">int</span> <span class=\\\"hljs-variable\\\">i</span> <span class=\\\"hljs-operator\\\">=</span> k; i &lt;= k + w - <span class=\\\"hljs-number\\\">1</span> && i &lt;= n; i++) {\\n        dp[i] = <span class=\\\"hljs-number\\\">1.0</span>;\\n    }\\n    <span class=\\\"hljs-keyword\\\">for</span> (<span class=\\\"hljs-type\\\">int</span> <span class=\\\"hljs-variable\\\">i</span> <span class=\\\"hljs-operator\\\">=</span> k - <span class=\\\"hljs-number\\\">1</span>; i &gt;= <span class=\\\"hljs-number\\\">0</span>; i--) {\\n        dp[i] = dp[i + <span class=\\\"hljs-number\\\">1</span>] - (dp[i + w + <span class=\\\"hljs-number\\\">1</span>] - dp[i + <span class=\\\"hljs-number\\\">1</span>]) / w;\\n    }\\n    <span class=\\\"hljs-keyword\\\">return</span> dp[<span class=\\\"hljs-number\\\">0</span>];\\n}\\n</code></pre>\\n<p>结果爆炸，这到底是为什么呢？演算一下，我们发现*dp[16]<em>居然算出1.1000000，显然和事实的0.5不符，我们假设化简后通项公式不适用于</em>dp[K-1]<em>，那么我们需要先计算好这个值，再从</em>dp[K-2]<em>，开始去尝试，那么</em>dp[K-1]*等于多少呢？</p>\\n<p>我们在得到16分的时候，距离21分还有10张牌里有5种赢的可能，那就是21-16+1，也就是<em>N-K+1</em>，而如果说这时候W等于3，那么就最多只有3张牌里有3种赢的机会，所以我们可以得出公式：\\n<span class=\\\"katex-display katexp\\\"><span class=\\\"katex-display\\\"><span class=\\\"katex\\\"><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:1em;vertical-align:-0.25em;\\\"></span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.10764em;\\\">f</span><span class=\\\"mopen\\\">(</span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.07153em;\\\">K</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2222em;\\\"></span><span class=\\\"mbin\\\">−</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2222em;\\\"></span></span><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:1em;vertical-align:-0.25em;\\\"></span><span class=\\\"mord\\\">1</span><span class=\\\"mclose\\\">)</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2778em;\\\"></span><span class=\\\"mrel\\\">=</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2778em;\\\"></span></span><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:2.0074em;vertical-align:-0.686em;\\\"></span><span class=\\\"mord\\\"><span class=\\\"mopen nulldelimiter\\\"></span><span class=\\\"mfrac\\\"><span class=\\\"vlist-t vlist-t2\\\"><span class=\\\"vlist-r\\\"><span class=\\\"vlist\\\" style=\\\"height:1.3214em;\\\"><span style=\\\"top:-2.314em;\\\"><span class=\\\"pstrut\\\" style=\\\"height:3em;\\\"></span><span class=\\\"mord\\\"><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.13889em;\\\">W</span></span></span><span style=\\\"top:-3.23em;\\\"><span class=\\\"pstrut\\\" style=\\\"height:3em;\\\"></span><span class=\\\"frac-line\\\" style=\\\"border-bottom-width:0.04em;\\\"></span></span><span style=\\\"top:-3.677em;\\\"><span class=\\\"pstrut\\\" style=\\\"height:3em;\\\"></span><span class=\\\"mord\\\"><span class=\\\"mord\\\">1</span></span></span></span><span class=\\\"vlist-s\\\">​</span></span><span class=\\\"vlist-r\\\"><span class=\\\"vlist\\\" style=\\\"height:0.686em;\\\"><span></span></span></span></span></span><span class=\\\"mclose nulldelimiter\\\"></span></span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2222em;\\\"></span><span class=\\\"mbin\\\">⋅</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2222em;\\\"></span></span><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:1em;vertical-align:-0.25em;\\\"></span><span class=\\\"mord mathnormal\\\">min</span><span class=\\\"mopen\\\">(</span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.10903em;\\\">N</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2222em;\\\"></span><span class=\\\"mbin\\\">−</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2222em;\\\"></span></span><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.7667em;vertical-align:-0.0833em;\\\"></span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.07153em;\\\">K</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2222em;\\\"></span><span class=\\\"mbin\\\">+</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2222em;\\\"></span></span><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:1em;vertical-align:-0.25em;\\\"></span><span class=\\\"mord\\\">1</span><span class=\\\"mpunct\\\">,</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.1667em;\\\"></span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.13889em;\\\">W</span><span class=\\\"mclose\\\">)</span></span></span></span></span></span>\\n于是我们最终的代码为：</p>\\n<pre><code class=\\\"hljs language-java\\\"><span class=\\\"hljs-keyword\\\">public</span> <span class=\\\"hljs-type\\\">double</span> <span class=\\\"hljs-title function_\\\">new21Game</span><span class=\\\"hljs-params\\\">(<span class=\\\"hljs-type\\\">int</span> n, <span class=\\\"hljs-type\\\">int</span> k, <span class=\\\"hljs-type\\\">int</span> w)</span> {\\n    <span class=\\\"hljs-keyword\\\">if</span> (k == <span class=\\\"hljs-number\\\">0</span>) <span class=\\\"hljs-keyword\\\">return</span> <span class=\\\"hljs-number\\\">1.0</span>;\\n    <span class=\\\"hljs-type\\\">double</span>[] dp = <span class=\\\"hljs-keyword\\\">new</span> <span class=\\\"hljs-title class_\\\">double</span>[k + w + <span class=\\\"hljs-number\\\">1</span>];\\n    <span class=\\\"hljs-keyword\\\">for</span> (<span class=\\\"hljs-type\\\">int</span> <span class=\\\"hljs-variable\\\">i</span> <span class=\\\"hljs-operator\\\">=</span> k; i &lt;= k + w - <span class=\\\"hljs-number\\\">1</span> && i &lt;= n; i++) {\\n        dp[i] = <span class=\\\"hljs-number\\\">1.0</span>;\\n    }\\n    dp[k - <span class=\\\"hljs-number\\\">1</span>] = <span class=\\\"hljs-number\\\">1.0</span> * Math.min(n - k + <span class=\\\"hljs-number\\\">1</span>, w) / w;\\n    <span class=\\\"hljs-keyword\\\">for</span> (<span class=\\\"hljs-type\\\">int</span> <span class=\\\"hljs-variable\\\">i</span> <span class=\\\"hljs-operator\\\">=</span> k - <span class=\\\"hljs-number\\\">2</span>; i &gt;= <span class=\\\"hljs-number\\\">0</span>; i--) {\\n        dp[i] = dp[i + <span class=\\\"hljs-number\\\">1</span>] - (dp[i + w + <span class=\\\"hljs-number\\\">1</span>] - dp[i + <span class=\\\"hljs-number\\\">1</span>]) / w;\\n    }\\n    <span class=\\\"hljs-keyword\\\">return</span> dp[<span class=\\\"hljs-number\\\">0</span>];\\n}\\n</code></pre>\\n\";","export default \"<h4 id=\\\"前言\\\">前言</h4>\\n<p>最近在复习<strong>数据结构</strong>和<strong>算法</strong>，这两个玩意也是被称之为<strong>“程序员的基本素养”</strong>，我最近比较想干的一件事就是读集合框架的源码</p>\\n<p>基于这个伟大目标，我开启了源码阅读的<strong>“从头到尾读”</strong>系列，目前只完成了<strong>Collection接口、Iterable接口、Iterator接口</strong>这三个章节，正打算开始读<strong>ArrayList</strong>的源码</p>\\n<p>为什么想要写自实现的ArrayList，主要也是为了配合ArrayList的源码阅读</p>\\n<p>大二的时候也学过数据结构这门课，也用Java实现过简单的ArrayList和其他常见的结构，但是这次的自实现，我的目标是<strong>往JDK源码上面靠拢</strong>，意在学习大师级的<strong>设计手法以及精妙的算法</strong></p>\\n<p>话不多说，开搞</p>\\n<h4 id=\\\"热身\\\">热身</h4>\\n<p>在此之前还没开始阅读<code>ArrayList</code>，但是我们可以稍稍瞥一眼它的类头，</p>\\n<pre><code class=\\\"hljs language-java\\\"><span class=\\\"hljs-keyword\\\">public</span> <span class=\\\"hljs-keyword\\\">class</span> <span class=\\\"hljs-title class_\\\">ArrayList</span>&lt;E&gt; <span class=\\\"hljs-keyword\\\">extends</span> <span class=\\\"hljs-title class_\\\">AbstractList</span>&lt;E&gt;\\n        <span class=\\\"hljs-keyword\\\">implements</span> <span class=\\\"hljs-title class_\\\">List</span>&lt;E&gt;, RandomAccess, Cloneable, java.io.Serializable\\n{\\n    <span class=\\\"hljs-comment\\\">//...</span>\\n}\\n</code></pre>\\n<p>这里面重要的内容首先我们就盯着<code>AbstractList</code>这个抽象类，一直往深了摸，摸到了<code>Collection</code>这个接口，这个接口继承了<code>Iterable</code>接口，欸~摸到宝了，我们拿这个玩意去开展我们的<strong>自实现类</strong>，为什么其他的抽象类、其他的接口不用管呢？</p>\\n<p>在我看来，<strong>无论是Collection、List这类的接口，还是AbstractList、AbstractCollection这些抽象类</strong>它们仅是提供一个<strong>接口规范以及一定的实现</strong>，真正有意思的东西，还得是<strong>迭代器</strong>这个利器！</p>\\n<p>于是马上写好自实现的类头，加上泛型就不用说了</p>\\n<pre><code class=\\\"hljs language-java\\\"><span class=\\\"hljs-keyword\\\">public</span> <span class=\\\"hljs-keyword\\\">class</span> <span class=\\\"hljs-title class_\\\">MyArrayList</span>&lt;E&gt; <span class=\\\"hljs-keyword\\\">implements</span> <span class=\\\"hljs-title class_\\\">Iterable</span>&lt;E&gt;{\\n\\n    <span class=\\\"hljs-meta\\\">@Override</span>\\n    <span class=\\\"hljs-keyword\\\">public</span> Iterator&lt;E&gt; <span class=\\\"hljs-title function_\\\">iterator</span><span class=\\\"hljs-params\\\">()</span> {\\n        <span class=\\\"hljs-keyword\\\">return</span> <span class=\\\"hljs-literal\\\">null</span>;\\n    }\\n\\n    <span class=\\\"hljs-meta\\\">@Override</span>\\n    <span class=\\\"hljs-keyword\\\">public</span> <span class=\\\"hljs-keyword\\\">void</span> <span class=\\\"hljs-title function_\\\">forEach</span><span class=\\\"hljs-params\\\">(Consumer&lt;? <span class=\\\"hljs-built_in\\\">super</span> E&gt; action)</span> {\\n\\n    }\\n\\n    <span class=\\\"hljs-meta\\\">@Override</span>\\n    <span class=\\\"hljs-keyword\\\">public</span> Spliterator&lt;E&gt; <span class=\\\"hljs-title function_\\\">spliterator</span><span class=\\\"hljs-params\\\">()</span> {\\n        <span class=\\\"hljs-keyword\\\">return</span> <span class=\\\"hljs-literal\\\">null</span>;\\n    }\\n}\\n</code></pre>\\n<p>这里面除了<code>Iterator()</code>方法之外，另外两个方法不太熟，但首先我们保证好一个容器结构应有的几个基本接口：</p>\\n<ul>\\n<li><strong>get(int index)</strong></li>\\n<li><strong>int size()</strong></li>\\n<li><strong>E remove(int index)</strong></li>\\n<li><strong>void add(E element)</strong></li>\\n<li><strong>void add(int index, E element)</strong></li>\\n<li><strong>boolean contains(int index)</strong></li>\\n<li><strong>int indexOf(E element)</strong></li>\\n</ul>\\n<p>里面注意的几个点：</p>\\n<ul>\\n<li>凡是牵扯到<strong>索引操作</strong>的，都需要<strong>判断index是否合法</strong>，比如是负数或者超过界限了</li>\\n<li>add方法的<strong>扩容问题</strong></li>\\n</ul>\\n<p>准备就绪，咔咔咔就写下十几行代码：</p>\\n<pre><code class=\\\"hljs language-java\\\"><span class=\\\"hljs-keyword\\\">private</span> <span class=\\\"hljs-keyword\\\">final</span> <span class=\\\"hljs-type\\\">int</span> <span class=\\\"hljs-variable\\\">DEFAULT_CAPACTTY</span> <span class=\\\"hljs-operator\\\">=</span> <span class=\\\"hljs-number\\\">10</span>;\\n<span class=\\\"hljs-keyword\\\">private</span> <span class=\\\"hljs-type\\\">int</span> <span class=\\\"hljs-variable\\\">size</span> <span class=\\\"hljs-operator\\\">=</span> <span class=\\\"hljs-number\\\">0</span>;\\n<span class=\\\"hljs-keyword\\\">private</span> E[] array;\\n\\nMyArrayList() {\\n    array = (E[]) <span class=\\\"hljs-keyword\\\">new</span> <span class=\\\"hljs-title class_\\\">Object</span>[DEFAULT_CAPACTTY];\\n}\\n\\nMyArrayList(<span class=\\\"hljs-type\\\">int</span> capacity) {\\n    array = (E[]) <span class=\\\"hljs-keyword\\\">new</span> <span class=\\\"hljs-title class_\\\">Object</span>[capacity];\\n}\\n\\n<span class=\\\"hljs-keyword\\\">public</span> <span class=\\\"hljs-type\\\">int</span> <span class=\\\"hljs-title function_\\\">size</span><span class=\\\"hljs-params\\\">()</span> {\\n    <span class=\\\"hljs-keyword\\\">return</span> size;\\n}\\n<span class=\\\"hljs-keyword\\\">public</span> E <span class=\\\"hljs-title function_\\\">get</span><span class=\\\"hljs-params\\\">(<span class=\\\"hljs-type\\\">int</span> index)</span> {\\n    <span class=\\\"hljs-type\\\">E</span> <span class=\\\"hljs-variable\\\">element</span> <span class=\\\"hljs-operator\\\">=</span> <span class=\\\"hljs-literal\\\">null</span>;\\n    <span class=\\\"hljs-keyword\\\">if</span> (index &lt;= endIndex()) {\\n        element = array[index];\\n    }\\n    <span class=\\\"hljs-keyword\\\">return</span> element;\\n}\\n<span class=\\\"hljs-keyword\\\">public</span> <span class=\\\"hljs-type\\\">boolean</span> <span class=\\\"hljs-title function_\\\">contains</span><span class=\\\"hljs-params\\\">(E target)</span> {\\n    <span class=\\\"hljs-keyword\\\">if</span> (target != <span class=\\\"hljs-literal\\\">null</span>) {\\n        <span class=\\\"hljs-keyword\\\">for</span> (E e : <span class=\\\"hljs-built_in\\\">this</span>) {\\n            <span class=\\\"hljs-keyword\\\">if</span> (e.equals(target)) {\\n                <span class=\\\"hljs-keyword\\\">return</span> <span class=\\\"hljs-literal\\\">true</span>;\\n            }\\n        }\\n    }\\n    <span class=\\\"hljs-keyword\\\">return</span> <span class=\\\"hljs-literal\\\">false</span>;\\n}\\n\\n<span class=\\\"hljs-keyword\\\">public</span> <span class=\\\"hljs-type\\\">int</span> <span class=\\\"hljs-title function_\\\">indexOf</span><span class=\\\"hljs-params\\\">(E element)</span> {\\n    <span class=\\\"hljs-keyword\\\">if</span> (element != <span class=\\\"hljs-literal\\\">null</span>) {\\n        <span class=\\\"hljs-keyword\\\">for</span> (<span class=\\\"hljs-type\\\">int</span> <span class=\\\"hljs-variable\\\">i</span> <span class=\\\"hljs-operator\\\">=</span> <span class=\\\"hljs-number\\\">0</span>; i &lt; size; i++) {\\n            <span class=\\\"hljs-keyword\\\">if</span> (element.equals(array[i])) {\\n                <span class=\\\"hljs-keyword\\\">return</span> i;\\n            }\\n        }\\n    }\\n    <span class=\\\"hljs-keyword\\\">return</span> -<span class=\\\"hljs-number\\\">1</span>;\\n}\\n</code></pre>\\n<p>这些就不解释了，为了方便，我还写了一个获取末尾元素下标值的方法，这也是基本的</p>\\n<pre><code class=\\\"hljs language-java\\\"><span class=\\\"hljs-keyword\\\">private</span> <span class=\\\"hljs-type\\\">int</span> <span class=\\\"hljs-title function_\\\">endIndex</span><span class=\\\"hljs-params\\\">()</span> {\\n    <span class=\\\"hljs-keyword\\\">return</span> size - <span class=\\\"hljs-number\\\">1</span>;\\n}\\n</code></pre>\\n<h5 id=\\\"remove\\\">remove</h5>\\n<pre><code class=\\\"hljs language-java\\\"><span class=\\\"hljs-keyword\\\">public</span> E <span class=\\\"hljs-title function_\\\">remove</span><span class=\\\"hljs-params\\\">(<span class=\\\"hljs-type\\\">int</span> index)</span> {\\n    E element;\\n    <span class=\\\"hljs-keyword\\\">if</span> (index &gt;= <span class=\\\"hljs-number\\\">0</span> && index &lt;= endIndex()) {\\n        element = array[index];\\n        <span class=\\\"hljs-keyword\\\">if</span> (index &lt; endIndex()) {\\n            System.arraycopy(array, index + <span class=\\\"hljs-number\\\">1</span>, array, index, endIndex() - index);\\n        }\\n        size--;\\n        <span class=\\\"hljs-keyword\\\">return</span> element;\\n    } <span class=\\\"hljs-keyword\\\">else</span> {\\n        <span class=\\\"hljs-keyword\\\">throw</span> <span class=\\\"hljs-keyword\\\">new</span> <span class=\\\"hljs-title class_\\\">ArrayIndexOutOfBoundsException</span>(<span class=\\\"hljs-string\\\">&quot;index:&quot;</span> + index);\\n    }\\n}    \\n</code></pre>\\n<p>基本思路，如果index在可取范围内，则可以remove，否则抛出异常</p>\\n<p>在可取范围内，如果index不是最后一个的话，那么移除该元素就得：</p>\\n<ul>\\n<li><strong>index位之后的元素往前移一位</strong></li>\\n<li><strong>size--</strong></li>\\n</ul>\\n<p>否则只进行<code>size--</code></p>\\n<h5 id=\\\"add\\\">add</h5>\\n<pre><code class=\\\"hljs language-java\\\"><span class=\\\"hljs-keyword\\\">public</span> <span class=\\\"hljs-keyword\\\">void</span> <span class=\\\"hljs-title function_\\\">add</span><span class=\\\"hljs-params\\\">(E element)</span> {\\n    add(size, element);\\n}\\n\\n<span class=\\\"hljs-keyword\\\">public</span> <span class=\\\"hljs-keyword\\\">void</span> <span class=\\\"hljs-title function_\\\">add</span><span class=\\\"hljs-params\\\">(<span class=\\\"hljs-type\\\">int</span> index, E element)</span> {\\n    <span class=\\\"hljs-keyword\\\">if</span> (index &lt; <span class=\\\"hljs-number\\\">0</span>) {\\n        <span class=\\\"hljs-keyword\\\">throw</span> <span class=\\\"hljs-keyword\\\">new</span> <span class=\\\"hljs-title class_\\\">ArrayIndexOutOfBoundsException</span>(<span class=\\\"hljs-string\\\">&quot;index:&quot;</span> + index);\\n    } <span class=\\\"hljs-keyword\\\">else</span> {\\n        <span class=\\\"hljs-comment\\\">// 如果插入位置为当前数组尾部或者更后面 则统一插到尾部位置</span>\\n        adjustArray();\\n        <span class=\\\"hljs-keyword\\\">if</span> (index &lt; size) {\\n            System.arraycopy(array, index, array, index + <span class=\\\"hljs-number\\\">1</span>, endIndex() - index);\\n        }\\n        array[index] = element;\\n        size++;\\n    }\\n}\\n\\n<span class=\\\"hljs-keyword\\\">public</span> <span class=\\\"hljs-keyword\\\">void</span> <span class=\\\"hljs-title function_\\\">adjustArray</span><span class=\\\"hljs-params\\\">()</span> {\\n    <span class=\\\"hljs-keyword\\\">if</span> (size == array.length) {\\n        E[] newArr = (E[]) <span class=\\\"hljs-keyword\\\">new</span> <span class=\\\"hljs-title class_\\\">Object</span>[array.length * <span class=\\\"hljs-number\\\">2</span>];\\n        System.arraycopy(array, <span class=\\\"hljs-number\\\">0</span>, newArr, <span class=\\\"hljs-number\\\">0</span>, array.length);\\n        array = newArr;\\n    }\\n}\\n</code></pre>\\n<p>实现<code>add(int index, E element)</code>和传统的不太一样，我的这个方法更具体一些，我们把扩容的事情抽象成一个<code>adjustArray</code>方法，如果要插入的位置在当前列表的中间，我们将数组从要插入的位置开始往后移一位</p>\\n<h5 id=\\\"iterator\\\">Iterator</h5>\\n<p>每个集合的<strong>Iterator</strong>的实现和各自集合的特点有关，所以<strong>Iterator</strong>也需要我们自己实现</p>\\n<pre><code class=\\\"hljs language-java\\\"><span class=\\\"hljs-keyword\\\">private</span> <span class=\\\"hljs-keyword\\\">class</span> <span class=\\\"hljs-title class_\\\">MyArrayListIterator</span> <span class=\\\"hljs-keyword\\\">implements</span> <span class=\\\"hljs-title class_\\\">Iterator</span>&lt;E&gt;{\\n\\n    <span class=\\\"hljs-keyword\\\">private</span> <span class=\\\"hljs-type\\\">int</span> <span class=\\\"hljs-variable\\\">currentIndex</span> <span class=\\\"hljs-operator\\\">=</span> <span class=\\\"hljs-number\\\">0</span>;\\n\\n    <span class=\\\"hljs-meta\\\">@Override</span>\\n    <span class=\\\"hljs-keyword\\\">public</span> <span class=\\\"hljs-type\\\">boolean</span> <span class=\\\"hljs-title function_\\\">hasNext</span><span class=\\\"hljs-params\\\">()</span> {\\n        <span class=\\\"hljs-keyword\\\">return</span> currentIndex &lt; size;\\n    }\\n\\n    <span class=\\\"hljs-meta\\\">@Override</span>\\n    <span class=\\\"hljs-keyword\\\">public</span> E <span class=\\\"hljs-title function_\\\">next</span><span class=\\\"hljs-params\\\">()</span> {\\n        <span class=\\\"hljs-keyword\\\">return</span> array[currentIndex++];\\n    }\\n\\n    <span class=\\\"hljs-meta\\\">@Override</span>\\n    <span class=\\\"hljs-keyword\\\">public</span> <span class=\\\"hljs-keyword\\\">void</span> <span class=\\\"hljs-title function_\\\">remove</span><span class=\\\"hljs-params\\\">()</span> {\\n        MyArrayList.<span class=\\\"hljs-built_in\\\">this</span>.remove(--currentIndex);\\n    }\\n\\n    <span class=\\\"hljs-meta\\\">@Override</span>\\n    <span class=\\\"hljs-keyword\\\">public</span> <span class=\\\"hljs-keyword\\\">void</span> <span class=\\\"hljs-title function_\\\">forEachRemaining</span><span class=\\\"hljs-params\\\">(Consumer&lt;? <span class=\\\"hljs-built_in\\\">super</span> E&gt; action)</span> {\\n        MyArrayList.<span class=\\\"hljs-built_in\\\">this</span>.forEach(action);\\n    }\\n}\\n</code></pre>\\n<p>这是我们写在<strong>MyArrayList</strong>类中的内部类，由于是基于数组的实现，<strong>三大迭代器方法</strong>也很简单就实现了，我们写完之后，<strong>Iterable</strong>方法就可以写两个了：</p>\\n<pre><code class=\\\"hljs language-java\\\"><span class=\\\"hljs-meta\\\">@Override</span>\\n<span class=\\\"hljs-keyword\\\">public</span> Iterator&lt;E&gt; <span class=\\\"hljs-title function_\\\">iterator</span><span class=\\\"hljs-params\\\">()</span> {\\n    <span class=\\\"hljs-keyword\\\">return</span> <span class=\\\"hljs-keyword\\\">new</span> <span class=\\\"hljs-title class_\\\">MyArrayListIterator</span>();\\n}\\n\\n<span class=\\\"hljs-meta\\\">@Override</span>\\n<span class=\\\"hljs-keyword\\\">public</span> <span class=\\\"hljs-keyword\\\">void</span> <span class=\\\"hljs-title function_\\\">forEach</span><span class=\\\"hljs-params\\\">(Consumer&lt;? <span class=\\\"hljs-built_in\\\">super</span> E&gt; action)</span> {\\n    <span class=\\\"hljs-keyword\\\">if</span> (action != <span class=\\\"hljs-literal\\\">null</span>) {\\n        <span class=\\\"hljs-keyword\\\">for</span> (E e : <span class=\\\"hljs-built_in\\\">this</span>) {\\n            action.accept(e);\\n        }\\n    }\\n}\\n</code></pre>\\n<p>目前为止（2018年6月5日-08点55分）<a href=\\\"https://github.com/youyinnn/Algorithm_zoom/blob/a853c7bfa875ad032e4638562f5ae5d5a5483b79/src/main/java/datasrtuct/list/MyArrayList.java\\\">代码快照</a>，我们的自实现算是基本达标了，接下来我们进入阅读ArrayList的环节</p>\\n\";","export default \"<h3 id=\\\"tess-login-on-jenkins\\\">Tess login on Jenkins</h3>\\n<h4 id=\\\"use-tess-with-rheos-tess-base-agent\\\">Use tess with Rheos tess-base agent</h4>\\n<p>Assume that you are at &quot;Job Configure&quot; panel now.</p>\\n<h5 id=\\\"configure-agent\\\">Configure Agent</h5>\\n<p>In order to use tess <strong>effectively and legally</strong>, we should check <strong>&quot;Restrict where this project can be run&quot;</strong> on <strong>&quot;Job Notifications&quot;</strong> and select <code>tess-builder-numsg</code>, this is a image for tess-user that build from <em><strong>Rheos team</strong></em>, it prepared every thing we need for tess.</p>\\n<p>The configuration of this agent is at Jenkins: <strong>[Manage Jenkins(系统管理)] -&gt; [Configure System(系统设置)]-&gt;[Cloud(云)]-&gt;[Kubernetes]-&gt;[images]</strong> , named <strong>&quot;tess-builder-numsg&quot;</strong></p>\\n<h5 id=\\\"configure-parameterized-build参数化构建过程\\\">Configure &quot;Parameterized Build(参数化构建过程)&quot;</h5>\\n<h6 id=\\\"for-production-cluster-login\\\">For production cluster login</h6>\\n<p>We will need four parameters: <code>tess_username</code>,<code> tess_cluster</code>, <code>tess_pin</code>, <code>tess_yubikey_token_twice</code></p>\\n<blockquote>\\n<p> <strong>Notice:</strong> </p>\\n<ol>\\n<li>If your want to use two <strong>YubiKey Token</strong>, you have to configure a <strong>Multi-line String Parameter</strong>, to catch two <strong>YubiKey Token</strong> on a <strong>single parameter(<code>tess_yubikey_token_twice</code>)</strong>. It will prevent <strong>&quot;auto enter&quot;</strong> to trigger the build action while we use YubiKey to input access token.</li>\\n<li>From the usage above, the Jenkins parameter <code>tess_yubikey_token_twice</code> will separated to two parameters by line-separator.</li>\\n</ol>\\n</blockquote>\\n<h6 id=\\\"for-non-production-cluster-login\\\">For non-production cluster login</h6>\\n<p>We can use <code>--password</code> option of tess to login tess to non-production cluster, so we just need three parameters: <code>tess_username</code>,<code> tess_cluster</code>, <code>corp_passord</code></p>\\n<h5 id=\\\"configure-build-execute-shell\\\">Configure Build Execute Shell</h5>\\n<h6 id=\\\"for-production-cluster\\\">For production cluster</h6>\\n<pre><code class=\\\"hljs language-shell\\\"><span class=\\\"hljs-meta\\\"># </span><span class=\\\"language-bash\\\"><span class=\\\"hljs-built_in\\\">cd</span> to the diractory <span class=\\\"hljs-built_in\\\">where</span> tess login script is</span>\\n./tess-login.sh ${tess_username}  ${tess_cluster}  ${tess_pin} ${tess_yubikey_token_twice}\\n<span class=\\\"hljs-meta\\\"># </span><span class=\\\"language-bash\\\">your work with tess</span>\\n</code></pre>\\n<h6 id=\\\"for-non-production-cluster\\\">For non-production cluster</h6>\\n<pre><code class=\\\"hljs language-shell\\\"><span class=\\\"hljs-meta\\\"># </span><span class=\\\"language-bash\\\"><span class=\\\"hljs-built_in\\\">cd</span> to the diractory <span class=\\\"hljs-built_in\\\">where</span> tess login script is</span>\\n./tess-login.sh ${tess_username} ${corp_password} ${tess_cluster}\\n<span class=\\\"hljs-meta\\\"># </span><span class=\\\"language-bash\\\">your work with tess</span>\\n</code></pre>\\n<h5 id=\\\"for-production-cluster-1\\\">For production cluster</h5>\\n<h6 id=\\\"tess-loginsh\\\">tess-login.sh</h6>\\n<p>Reference: <a href=\\\"https://github.corp.ebay.com/jiaweizhang/NuMessage/blob/promethuesAndGrafanaConfig/numsg-deploy/metrics-deploy/spec/prod/tess-login.sh\\\">tess-login.sh</a></p>\\n<pre><code class=\\\"hljs language-shell\\\"><span class=\\\"hljs-meta\\\">#</span><span class=\\\"language-bash\\\">!/bin/bash</span>\\n<span class=\\\"hljs-meta\\\">\\n# </span><span class=\\\"language-bash\\\"><span class=\\\"hljs-built_in\\\">exit</span> when error & trace</span>\\nset -e\\nset -x\\n\\ntess_username=$1\\ntess_cluster=$2\\ntess_pin=$3\\n<span class=\\\"hljs-meta\\\">\\n# </span><span class=\\\"language-bash\\\"><span class=\\\"hljs-variable\\\">${tess_yubikey_token_twice}</span> will separated to <span class=\\\"hljs-variable\\\">$4</span> and <span class=\\\"hljs-variable\\\">$5</span> by line-separator</span>\\ntess_yubikey_token_1=$4\\ntess_yubikey_token_2=$5\\n\\necho &quot;token 1: $tess_yubikey_token_1&quot;\\necho &quot;token 2: $tess_yubikey_token_2&quot;\\n<span class=\\\"hljs-meta\\\">\\n# </span><span class=\\\"language-bash\\\">combine <span class=\\\"hljs-variable\\\">$tess_pin</span> and <span class=\\\"hljs-variable\\\">$tess_yubikey_token_1</span></span>\\nexpect tess-login-by-expect.sh $tess_username $tess_cluster $tess_pin$tess_yubikey_token_1 $tess_yubikey_token_2\\n</code></pre>\\n<h6 id=\\\"tess-login-by-expectsh\\\">tess-login-by-expect.sh</h6>\\n<p>Reference: <a href=\\\"https://github.corp.ebay.com/jiaweizhang/NuMessage/blob/promethuesAndGrafanaConfig/numsg-deploy/metrics-deploy/spec/prod/tess-login-by-expect.sh\\\">tess-login-by-expect.sh</a></p>\\n<p>You can also find it <a href=\\\"2.-Prepare-expect-on-your-image\\\">below</a>.</p>\\n<h5 id=\\\"for-non-production-cluster-1\\\">For non-production cluster</h5>\\n<h6 id=\\\"tess-loginsh-1\\\">tess-login.sh</h6>\\n<p>Reference: <a href=\\\"https://github.corp.ebay.com/jiaweizhang/NuMessage/blob/promethuesAndGrafanaConfig/numsg-deploy/metrics-deploy/spec/qa/tess-login.sh\\\">tess-login.sh</a></p>\\n<pre><code class=\\\"hljs language-shell\\\"><span class=\\\"hljs-meta\\\">#</span><span class=\\\"language-bash\\\">!/bin/bash</span>\\n\\nusername=$1\\ncorp_password=$2\\nserver=$3\\n\\nexpect tess-login-by-expect.sh $server $username $corp_password\\n</code></pre>\\n<h6 id=\\\"tess-login-by-expectsh-1\\\">tess-login-by-expect.sh</h6>\\n<p>Reference: <a href=\\\"https://github.corp.ebay.com/jiaweizhang/NuMessage/blob/promethuesAndGrafanaConfig/numsg-deploy/metrics-deploy/spec/qa/tess-login-by-expect.sh\\\">tess-login-by-expect.sh</a></p>\\n<h4 id=\\\"if-you-want-to-build-our-own-agent-for-tess\\\">If you want to build our own agent for tess</h4>\\n<p>Please make sure the agent environment contains the following two requirements for using tess <strong>effectively and legally</strong>.</p>\\n<h5 id=\\\"1-prepare-the-appropriate-version-of-tess-client-on-your-image\\\">1. Prepare the appropriate version of Tess client on your image</h5>\\n<p>To log in to the tess, you should at least use the version <code>release-0.29.x</code>, and I <strong>strongly recommend</strong> you should always use the <strong>latest release version of tess</strong>. From now it&#39;s <code>release-0.33.5</code>.</p>\\n<p>here are the details: </p>\\n<blockquote>\\n<p><strong>Logging in to Production cluster is not the same as logging in to Non-Production Cluster</strong></p>\\n<p>If we want to log in the production cluster like <strong>21/22/23</strong>, there are two verification:</p>\\n<ol>\\n<li><strong>eBay Account verification:</strong> check that you have a valid account.</li>\\n<li><strong>Production Cluster Access permission verification:</strong> check that you have the permission to access the production cluster</li>\\n</ol>\\n<p>each verification require an <strong>YubiKey Token</strong>, though it&#39;s the way they did after version <code>release-0.29.x</code>, before this version, the old version of tess client use just one <strong>YubiKey Token</strong>, so it&#39;s invalid for access the production cluster at present.</p>\\n</blockquote>\\n<h6 id=\\\"how-to-upgrade-tess-client\\\">How to upgrade tess client</h6>\\n<p>Perhaps we can&#39;t download the latest version of tess client on the <a href=\\\"http://tess.io\\\">http://tess.io</a>, we can still upgrade the latest version by tess client itself !</p>\\n<pre><code class=\\\"hljs language-bash\\\">$ tess version list\\n</code></pre>\\n<p>then you can get the latest version&#39;s number, and <strong>don&#39;t use <code>crul</code>or<code>wget</code>to download the tess client, the url that provide is unreachable on linux system.</strong></p>\\n<pre><code class=\\\"hljs language-bash\\\">$ tess install release-0.33.5\\n</code></pre>\\n<p>and your should add tess to <code>$PATH </code> for good.</p>\\n<h5 id=\\\"2-prepare-expect-on-your-image\\\">2. Prepare <code>expect</code> on your image</h5>\\n<p>We are trying to use shell script to handle all of our work on Jenkins. Perhaps there are some <strong>interactive</strong> client and they might blocked our building process and waiting user to input some command, such as tess login process:</p>\\n<pre><code class=\\\"hljs language-bash\\\">$ tess login -c 21 --username=numessage\\nUsername: numessage\\n****** Current Cluster Context 21 ******\\nCluster Name: 21\\nCluster URL: https://api.system.svc.21.tess.io\\n** You can use <span class=\\\"hljs-string\\\">&#x27;--cluster&#x27;</span> switch to a different cluster\\n** You can use <span class=\\\"hljs-string\\\">&#x27;tess clusters&#x27;</span> to list all available Tess clusters.\\n** You can use <span class=\\\"hljs-string\\\">&#x27;tess version list&#x27;</span> to list all available tess client versions.\\nPin + YubiKeyToken: \\n</code></pre>\\n<p>there is not options on tess client  to let us passing the parameter of <code>Pin + YubiKeyToken</code> ask interaction, besides, it require the second <code>YubiKey Token</code>. </p>\\n<p>To handle this situation, we can use <code>expect</code> to passing the parameter by just wrapping the interactive shell on a script named <code>tess-login-by-expect.sh</code>:</p>\\n<pre><code class=\\\"hljs language-bash\\\"><span class=\\\"hljs-meta\\\">#!/usr/bin/expect</span>\\n \\n<span class=\\\"hljs-built_in\\\">set</span> username [lindex <span class=\\\"hljs-variable\\\">$argv</span> 0]\\n<span class=\\\"hljs-built_in\\\">set</span> cluster [lindex <span class=\\\"hljs-variable\\\">$argv</span> 1]\\n<span class=\\\"hljs-built_in\\\">set</span> pin_token1 [lindex <span class=\\\"hljs-variable\\\">$argv</span> 2]\\n<span class=\\\"hljs-built_in\\\">set</span> token2 [lindex <span class=\\\"hljs-variable\\\">$argv</span> 3]\\n\\nspawn tess login -c <span class=\\\"hljs-variable\\\">$cluster</span> --username=<span class=\\\"hljs-variable\\\">$username</span>\\n\\nexpect {\\n   <span class=\\\"hljs-string\\\">&quot;Pin + YubiKeyToken:&quot;</span> {\\n       send <span class=\\\"hljs-string\\\">&quot;<span class=\\\"hljs-variable\\\">$pin_token1</span>\\\\n&quot;</span>\\n       exp_continue\\n   }\\n   <span class=\\\"hljs-string\\\">&quot;YubiKeyToken:&quot;</span> {\\n       send <span class=\\\"hljs-string\\\">&quot;<span class=\\\"hljs-variable\\\">$token2</span>\\\\n&quot;</span>\\n       exp_continue\\n   }\\n   <span class=\\\"hljs-string\\\">&quot;successfully authenticated&quot;</span> {\\n       send eof\\n   }\\n}\\nexpect eof\\n</code></pre>\\n<p>it will expect two interaction then send our token automatically and expect tess client return &quot;successfully authenticated&quot;.</p>\\n<p>Then you could run it on your shell script:</p>\\n<pre><code class=\\\"hljs language-bash\\\">expect tess-login-by-expect.sh <span class=\\\"hljs-variable\\\">$tess_username</span> <span class=\\\"hljs-variable\\\">$tess_cluster</span> $tess_pin<span class=\\\"hljs-variable\\\">$tess_yubikey_token_1</span> <span class=\\\"hljs-variable\\\">$tess_yubikey_token_2</span>\\n</code></pre>\\n<h4 id=\\\"installation\\\">Installation</h4>\\n<p>Need install <code>tcl</code> and <code>expect</code></p>\\n<p>e.g on CentOS:</p>\\n<pre><code class=\\\"hljs language-bash\\\">$ sudo yum install -y tcl expect\\n</code></pre>\\n\";","export default \"<p>You’re already writing decent commit messages. Let’s see if we can level you up to awesome. Other developers, especially you-in-two-weeks and you-from-next-year, will thank you for your forethought and verbosity when they run git blame to see why that conditional is there.</p>\\n<!-- more -->\\n\\n<ol>\\n<li><p>The first line should always be <u>50 characters</u> or less and that it should be followed by a blank line. Vim ships with syntax, indent, and filetype plugins for Git commits which can help here.</p>\\n</li>\\n<li><p>Add this line to your <code>~/.vimrc</code> to add spell checking and automatic wrapping at the recommended 72 columns to you commit messages.</p>\\n<pre><code class=\\\"hljs language-vim\\\"><span class=\\\"hljs-keyword\\\">autocmd</span> Filetype gitcommit <span class=\\\"hljs-keyword\\\">setlocal</span> spell textwidth=<span class=\\\"hljs-number\\\">72</span>\\n</code></pre>\\n</li>\\n<li><p>Never use the <code>-m &lt;msg&gt;</code> / <code>--message=&lt;msg&gt;</code> flag to <code>git commit</code>.</p>\\n<p>It gives you a poor mindset right off the bat as you will feel that you have to fit your commit message into the terminal command, and makes the commit feel more like a one-off argument than a page in history:</p>\\n<pre><code class=\\\"hljs language-bash\\\">git commit -m <span class=\\\"hljs-string\\\">&quot;Fix login bug&quot;</span>\\n</code></pre>\\n<p>A more useful commit message might be:</p>\\n<pre><code class=\\\"hljs language-vim\\\">Redirect user <span class=\\\"hljs-keyword\\\">to</span> the requested page after login\\n\\nhttps://trello.<span class=\\\"hljs-keyword\\\">com</span>/path/<span class=\\\"hljs-keyword\\\">to</span>/relevant/card\\n\\nUsers were being redirected <span class=\\\"hljs-keyword\\\">to</span> the home page after login, which <span class=\\\"hljs-keyword\\\">is</span> less\\nuseful than redirecting <span class=\\\"hljs-keyword\\\">to</span> the page they had originally requested before\\nbeing redirected <span class=\\\"hljs-keyword\\\">to</span> the login form.\\n\\n* Store requested path in <span class=\\\"hljs-keyword\\\">a</span> session variable\\n* Redirect <span class=\\\"hljs-keyword\\\">to</span> the stored location after successfully logging in the user\\n</code></pre>\\n</li>\\n<li><p>Answer the following questions:</p>\\n<ol>\\n<li><p>Why is this change necessary?</p>\\n<p>This question tells <u>reviewers of your pull request</u> what to expect in the commit, allowing them to more easily identify and point out unrelated changes.</p>\\n</li>\\n<li><p>How does it address the issue?</p>\\n<p>Describe, at a high level, what was done to affect change.\\n<code>Introduce a red/black tree to increase search speed or </code>\\n<code>Remove &lt;troublesome gem X&gt;, which was causing &lt;specific description of issue introduced by gem&gt; </code>\\nare good examples.</p>\\n<p>If your change is obvious, you may be able to omit addressing this question.</p>\\n</li>\\n<li><p>What side effects does this change have?</p>\\n<p>This is the most important question to answer, as it can point out problems where you are making too many changes in one commit or branch. One or two bullet points for related changes may be okay, but five or six are likely indicators of a commit that is doing too many things.</p>\\n<p>Your team should have guidelines and rules-of-thumb for how much can be done in a single commit/branch.</p>\\n</li>\\n</ol>\\n</li>\\n<li><p>Consider making including a link to the issue/story/card in the commit message a standard for your project. Full urls are more useful than issue numbers, as they are more permanent and avoid confusion over which issue tracker it references.</p>\\n<p>This is generally done as the first paragraph after the summary, on line 3.</p>\\n</li>\\n</ol>\\n<p><img src=\\\"../../../public/img/6c9c0fc1f7a32c23e57b689a5bf1aca8.png\\\" alt=\\\"git-commit-tips\\\"></p>\\n<p>Having a story in your git log will make a huge difference in how you and others perceive your project. By taking great care in commit messages, as you do in your code, you will help to increase overall quality.</p>\\n<p>Special thanks to Tim Pope, whose Note About Git Commit Messages literally sets the standard for a good commit message.</p>\\n<p>Additional thanks to the creator of Git and a real stickler for a good commit message, Linus Torvalds.</p>\\n<p><em>Reprinted from : <a href=\\\"https://robots.thoughtbot.com/5-useful-tips-for-a-better-commit-message?utm_medium=social&utm_source=qq\\\">https://robots.thoughtbot.com/5-useful-tips-for-a-better-commit-message?utm_medium=social&utm_source=qq</a></em></p>\\n<p><em>Chinese translate :<a href=\\\"https://ruby-china.org/topics/15737\\\">https://ruby-china.org/topics/15737</a></em></p>\\n\";","export default \"<h3 id=\\\"前言\\\">前言</h3>\\n<p>前两篇基本说了线程的基本概念和基本使用，这回说说Java并发编程第三坎，关于锁的好多基本概念的提前了解</p>\\n<p>在讲锁之前，我们还需要介绍一个很重要的原理——CAS（Compare And Swap）操作，这个操作是保证并发过程中每个操作具有<strong>“原子性”</strong>的利器</p>\\n<ul>\\n<li><strong>关键概念说明：</strong>临界区、排他锁、共享式锁、Java对象头</li>\\n<li><strong>什么是CAS操作：</strong>原子性、CAS</li>\\n</ul>\\n<p>暂时只有这些概念，如果有什么提前概念我会继续补充</p>\\n<hr>\\n<h3 id=\\\"关键概念说明\\\">关键概念说明</h3>\\n<h4 id=\\\"临界区\\\">临界区</h4>\\n<p>在操作系统的解释上，临界区代表的是<strong>“不允许多个进程访问的资源叫临界资源，而访问临界资源的代码段叫临界区”</strong></p>\\n<p>而在这里，我们可以笼统地说：<strong>锁包括的范围就是临界区，临界区的资源需要保证内存可见性，需要对所有线程任何时刻都保持一致性</strong></p>\\n<h4 id=\\\"锁的分类\\\">锁的分类</h4>\\n<h5 id=\\\"独占锁共享锁\\\">独占锁/共享锁</h5>\\n<p>独占式锁，一旦一个线程获取到了这个锁而单独进入临界区，其他线程在拿锁线程没放锁之前只能在锁外阻塞。</p>\\n<p>而所谓共享式锁就是，可以有多个线程同时获取到锁而共同进入临界区，一般这部分线程都有着共同的特性，而没有这些特性的其他线程则在锁外阻塞，需要保证的是持有锁的这些线程对临界区的操作要同步，也就是说要么这些线程只能读，这些一般这个时候临界区就失去了临界区的意义，要么这些线程在临界区内进行的写操作之间也要保持同步，但是这没有太大的意义</p>\\n<p>举个例子，读者/写者模式中，同一篇文章允许多个读者同时读，新写者阻塞直到没有读者读（看似好像和实际遇到的读写者模式不大一样），对于读者之间来说，这就是<strong>共享式锁</strong>，但是同一时刻只能有一个写者写，新的写者和新的读者只能阻塞，对于写者之间来说，这就是<strong>独占式锁</strong></p>\\n<p>在上面的例子中，读者线程之间共性就是只能读取临界资源，同一时刻只存在读取操作的话，不会造成内存可见性问题，所以读者线程可以共享（关于什么是<strong>内存可见性问题</strong>，在内存模型的部分会讲解到，这里就简单理解为<strong>脏读问题</strong>）</p>\\n<p>对于例子中读者可以阻塞写者的说法，有的人可能想不通，我们投入到场景中去看：</p>\\n<blockquote>\\n<ul>\\n<li>Github上有一篇issue，你可以看到，这算是<strong>“读a”</strong></li>\\n<li>你可以编辑，这算是<strong>“写a”</strong></li>\\n<li>但实际上的临界资源是存放在Github服务器上的，这里才真正运用到了<strong>读写者模式</strong>，我们刷一个issue页的时候，首先请求到服务端，服务端对临界资源进行<strong>“读b”</strong>操作</li>\\n<li>在无阻塞的情况下，<strong>“读b”</strong>操作把读出的临界资源issue内容，复制了一份，响应给请求方浏览器，所以我们在浏览器上读取到的资源，并不是临界资源，而是临界资源在<strong>“读b”</strong>操作中复制出来的副本而已</li>\\n<li>所以<strong>“读a”</strong>操作其实读的是副本内容并不存在临界资源的抢夺</li>\\n<li>同理， 我们<strong>“写a”</strong>也是对副本进行写操作，然后把写好的内容发送给服务端，由服务端对临界资源进行<strong>“写b”</strong>操作，这时如果有其他的<strong>“读b”</strong>操作，<strong>“写b”</strong>会阻塞</li>\\n</ul>\\n</blockquote>\\n<h5 id=\\\"公平锁非公平锁\\\">公平锁/非公平锁</h5>\\n<p>公平锁就是严格按照线程启动的顺序来执行的，不允许其他线程插队执行的；而非公平锁是允许插队的。</p>\\n<p>默认情况下<code> ReentrantLock</code> 和<code>synchronized</code> 都是非公平锁。<code>ReentrantLock</code> 可以设置成公平锁。</p>\\n<h5 id=\\\"可重入锁\\\">可重入锁</h5>\\n<p>可重入锁是指，已获得锁的线程再次访问锁时可以进入该锁，Java中绝大部分的锁场景都是可重入的，其标准实现是<code>ReentrantLock</code>，最基本的<code>synchronized</code>关键字也是</p>\\n<p>不可重入锁，即每把锁只能由一个线程获取一次，该线程想要第二次获取该锁则会阻塞，很容易造成死锁；</p>\\n<h5 id=\\\"读写锁\\\">读写锁</h5>\\n<p>读写锁 <code>ReadWriteLock </code>可以优雅地实现对资源的访问控制，具体实现为 <code>ReentrantReadWriteLock</code>。读写锁提供了读锁和写锁两把锁，在读数据时使用读锁，在写数据时使用写锁。</p>\\n<p>读写锁允许有多个读操作同时进行，但只允许有一个写操作执行。如果写锁没有加锁，则读锁不会阻塞，否则需要等待写入完成。</p>\\n<h5 id=\\\"乐观锁悲观锁\\\">乐观锁/悲观锁</h5>\\n<p>悲观锁对并发冲突持悲观态度，先取锁后访问数据，能够较大程度确保数据安全性。</p>\\n<p>而乐观锁认为数据冲突的概率比较低，可以尽可能多地访问数据，只有在最终提交数据进行持久化时才获取锁。</p>\\n<p>悲观锁总是先获取锁，会增加很多额外的开销，也增加了死锁的几率。尤其是对于读操作，不会修改数据，使用悲观锁大大增加系统的响应时间。</p>\\n<p>乐观锁最后一步才提交数据，死锁的几率比较低，但是如果有多个事务同时处理相同数据也有几率会冲突甚至导致系统异常。</p>\\n<p>传统关系型数据库常常使用悲观锁，以提高数据安全性。使用乐观锁的场景，通常用版本号来确保数据安全。</p>\\n<h5 id=\\\"自旋锁\\\">自旋锁</h5>\\n<p>自旋锁会让处于等待状态的线程执行空循环一段时间，执行完空循环后如果能够获取锁就立即获取锁，否则才挂起线程。</p>\\n<p>使用自旋锁，能够降低等待线程被挂起的概率。线程进入阻塞状态再次唤醒，需要在用户态和内核态之间进行切换，自旋锁避免了进入内核态，因此有比较好的性能。</p>\\n<p>自旋锁适用于竞争不激烈且线程任务执行时间短的场景。但是对于竞争激烈或者任务执行时间长的场景，不适合使用自旋锁，否则会浪费 CPU 时间片。</p>\\n<h5 id=\\\"轮询锁与定时锁\\\">轮询锁与定时锁</h5>\\n<p>轮询锁是通过线程不断尝试获取锁来实现的，可以避免发生死锁，可以更好地处理错误场景。Java 中可以通过调用锁的<code> tryLock</code> 方法来进行轮询。tryLock 方法还提供了一种支持定时的实现，可以通过参数指定获取锁的等待时间。如果可以立即获取锁那就立即返回，否则等待一段时间后返回。</p>\\n<h5 id=\\\"分段锁\\\">分段锁</h5>\\n<p><code>ConcurrentHashMap</code>是Java 5中支持高并发、高吞吐量的线程安全<code>HashMap</code>实现。</p>\\n<p>我们以<code>ConcurrentHashMap</code>来说一下分段锁的含义以及设计思想，<code>ConcurrentHashMap</code>中的分段锁称为Segment，类似于<code>HashMap</code>（JDK7与JDK8中<code>HashMap</code>的实现）的结构，即内部拥有一个Entry数组，数组中的每个元素又是一个链表；同时又是一个<code>ReentrantLock</code>（Segment继承了<code>ReentrantLock</code>)。</p>\\n<p>当需要put元素的时候，并不是对整个hashmap进行加锁，而是先通过hashcode来知道他要放在哪一个分段中，然后对这个分段进行加锁，所以当多线程put的时候，只要不是放在一个分段中，就实现了真正的并行的插入。</p>\\n<p>但是，在统计size的时候，可就是获取hashmap全局信息的时候，就需要获取所有的分段锁才能统计。</p>\\n<p>分段锁的设计目的是细化锁的粒度，当操作不需要更新整个数组的时候，就仅仅针对数组中的一项进行加锁操作。</p>\\n<h4 id=\\\"java对象头\\\">Java对象头</h4>\\n<p>用于存储Java对象的一些控制信息，在并发的过程中，锁的记录会经常性地和对象头中的一些标志位打交道，特别是在使用synchronized关键字的时候，具体的位置是放在对象头的<strong>Mark Word</strong>内容当中</p>\\n<p>所以对于Java来说，synchronized用的锁是存在<strong>Java对象头</strong>里的，这部分就不细说了</p>\\n<h4 id=\\\"脏读\\\">脏读</h4>\\n<p>脏读即是读线程读取到了写线程未释放锁之前的数据（也就是数据还没有被提交），一旦写线程在提交之前的写操作发生了错误，那么该版本的数据无效且不应该被读取到，还要进行数据回滚</p>\\n<p>比如在读写场景的时候，如果只有这两个独立数据只有写锁，而没有读锁，当写锁要对数据A和B从v1更新到v2时，并且这时候写锁只写完其中一个数据时（比如只有A更新到v2，B还在v1），读线程就进行读取，那么读线程就会读取到A=v2，B=v1，两个数据的版本不一致，这就是脏数据。</p>\\n<h3 id=\\\"cas操作\\\">CAS操作</h3>\\n<h5 id=\\\"什么是cas\\\">什么是CAS</h5>\\n<p>CAS即<strong>Compare And Swap</strong>，比较并交换，它的思想是输入两个值，一个旧值（期望的操作前的值）和一个替换旧值的新值，在操作期间先比较旧值和新值，看是否发生了变化，如果<strong>没有变化</strong>才将旧值换成新值，如果发生了变化则不替换</p>\\n<h5 id=\\\"什么是原子性\\\">什么是原子性</h5>\\n<p>原子（atomic）的本意是“不能被分割的最小粒子”，而原子操作就是“不可被中断的一个或者一系列操作”，但是在多处理器中实现原子操作是有点困难的</p>\\n<h5 id=\\\"处理器如何实现原子操作\\\">处理器如何实现原子操作</h5>\\n<ul>\\n<li><strong>处理器会自动保证：</strong>对内存的操作是原子的，则当一个处理器处理一个字节的时候，其他处理器不能访问这个字节的内存地址</li>\\n<li><strong>锁总线：</strong>当一个处理器要操作一个共享变量的时候，会发出一个LOCK #信号，其他处理器对该变量的操作会阻塞</li>\\n<li><strong>锁缓存：</strong>参考缓存一致性</li>\\n</ul>\\n<h5 id=\\\"java中的cas\\\">Java中的CAS</h5>\\n<p>Java SE1.5开始，JDK并发包就提供了一些原子操作的更新器，比如<code>AtomicBoolean</code>、<code>AtomicInteger</code>、<code>AtomicLong</code>等，这些原子包装类还提供了原子的自增自减等方法</p>\\n<h5 id=\\\"cas的三大问题\\\">CAS的三大问题</h5>\\n<ol>\\n<li><strong>ABA问题：</strong>如果一个值原来是A，变成了B，然后又变回了A，实际上有变化，但是CAS是检测不到变化的，要解决这个问题，可以在变量前面追加版本号，每次变化则版本号加1，在我看来这可以说是双重CAS，一个只负责给版本号加一，一个复杂监控整个变量值的变化，这样就变成了：1A-2B-3A</li>\\n<li><strong>自旋消耗：</strong>使用CAS一般是搭配上<strong>自旋（即死循环）</strong>来使用，如果长时间自旋CAS成功，则会大量消耗CPU，这个问题并不好解决</li>\\n<li><strong>只能保证一个变量的原子值：</strong>如果要对多个变量同时保证原子操作，有两种方式，一种是将多个变量聚合成一个变量，第二个是通过锁操作</li>\\n</ol>\\n<h5 id=\\\"cas和java中锁的关系\\\">CAS和Java中锁的关系</h5>\\n<p>JVM中实现了许多锁机制，但是除了偏向锁，其他锁的实现方式几乎都用了循环CAS，<strong>即当一个线程要进入同步块的时候，使用循环CAS的方式来获取锁，当它要退出锁的时候，使用循环CAS来释放锁</strong></p>\\n<hr>\\n<p>坐骑已经找到了，皮皮猪，我们走！</p>\\n\";","export default \"<h3 id=\\\"21-merge-two-sorted-listseasy\\\">21. Merge Two Sorted Lists(Easy)</h3>\\n<p>Merge two sorted linked lists and return it as a new list. The new list should be made by splicing together the nodes of the first two lists.</p>\\n<p><strong>Example:</strong></p>\\n<pre><code>Input: 1-&gt;2-&gt;4, 1-&gt;3-&gt;4\\nOutput: 1-&gt;1-&gt;2-&gt;3-&gt;4-&gt;4\\n</code></pre>\\n<h4 id=\\\"brute-forcebeat-9065\\\">Brute Force(Beat 90.65%)</h4>\\n<pre><code class=\\\"hljs language-java\\\"><span class=\\\"hljs-keyword\\\">public</span> ListNode <span class=\\\"hljs-title function_\\\">mergeTwoLists</span><span class=\\\"hljs-params\\\">(ListNode l1, ListNode l2)</span> {\\n    <span class=\\\"hljs-keyword\\\">if</span> (l1 == <span class=\\\"hljs-literal\\\">null</span> || l2 == <span class=\\\"hljs-literal\\\">null</span>) {\\n        <span class=\\\"hljs-type\\\">return</span> <span class=\\\"hljs-variable\\\">l1</span> <span class=\\\"hljs-operator\\\">=</span>= <span class=\\\"hljs-literal\\\">null</span> ? l2 : l1;\\n    }\\n    <span class=\\\"hljs-type\\\">ListNode</span> <span class=\\\"hljs-variable\\\">pre</span> <span class=\\\"hljs-operator\\\">=</span> <span class=\\\"hljs-keyword\\\">new</span> <span class=\\\"hljs-title class_\\\">ListNode</span>(<span class=\\\"hljs-number\\\">0</span>);\\n    pre.next = l1;\\n    <span class=\\\"hljs-type\\\">ListNode</span> <span class=\\\"hljs-variable\\\">head</span> <span class=\\\"hljs-operator\\\">=</span> l1;\\n    <span class=\\\"hljs-comment\\\">// use l1 l2 as pointers</span>\\n    <span class=\\\"hljs-keyword\\\">while</span> (l2 != <span class=\\\"hljs-literal\\\">null</span> && l1 != <span class=\\\"hljs-literal\\\">null</span>) {\\n        <span class=\\\"hljs-keyword\\\">if</span> (l2.val &lt; l1.val) {\\n            pre.next = l2;\\n            l2 = l2.next;\\n            pre.next.next = l1;\\n            <span class=\\\"hljs-comment\\\">// if l2 is little than head</span>\\n            <span class=\\\"hljs-comment\\\">// then it become a new head</span>\\n            <span class=\\\"hljs-keyword\\\">if</span> (head == l1) {\\n                head = pre.next;\\n            }\\n        }\\n        pre = pre.next;\\n        l1 = pre.next;\\n    }\\n    <span class=\\\"hljs-comment\\\">// the rest of l2 were all bigger than l1</span>\\n    <span class=\\\"hljs-keyword\\\">if</span> (l2 != <span class=\\\"hljs-literal\\\">null</span>) {\\n        pre.next = l2;\\n    }\\n    <span class=\\\"hljs-keyword\\\">return</span> head;\\n}\\n</code></pre>\\n<p>大致思想是以第一条链为参照，做插入排序，分别用l1，l2做now指针</p>\\n<p>链这玩意，很依赖指针，特别是单链表，对逻辑能力要求比较高，推荐做的时候把图画出来，并且适当的在原head的基础上，加一个pre，再标识now，然后迭代两个指针</p>\\n<h3 id=\\\"22-generate-parentheses\\\">22. Generate Parentheses</h3>\\n<p>Given <em>n</em> pairs of parentheses, write a function to generate all combinations of well-formed parentheses.</p>\\n<p>For example, given <em>n</em> = 3, a solution set is:</p>\\n<pre><code>[\\n  &quot;((()))&quot;,\\n  &quot;(()())&quot;,\\n  &quot;(())()&quot;,\\n  &quot;()(())&quot;,\\n  &quot;()()()&quot;\\n]\\n</code></pre>\\n<p>这道题我自己想的时候，想到了很多方法，比如<strong>填坑</strong>，但是填坑怎么处理对称重复的解我实在是想不出，然后又想到了一种<strong>欠债</strong>法，比如我们把开口和闭口分开，有两个债主分别管理两种债务，开口符号出现一个就代表欠一次债，闭口也是；而其中的要求就是，之前的欠债计算中，闭口欠债绝对不能比开口欠债多，这样后面的解才合法</p>\\n<p>也就是在创造序列的时候，最后一个序列必须是闭口，最后一个还债的必须是闭口，不是闭口的不考虑</p>\\n<p>可惜的是，这样的思路我并没有坚持下去，后面在评论区，高分解果然也是一样的思路，只不过不同的是，它用更算法逻辑的思路去解释这件事：<strong>有选择地递归</strong></p>\\n<p>非常遗憾的是，高分解用<strong>backtracing</strong>去解释这种思路，但是他并不是回溯，因为它没有走进死胡同，再折返回去，而是每次都选择正确的道路</p>\\n<h4 id=\\\"rightfully-recursion\\\">Rightfully Recursion</h4>\\n<pre><code class=\\\"hljs language-java\\\"><span class=\\\"hljs-keyword\\\">public</span> List&lt;String&gt; <span class=\\\"hljs-title function_\\\">generateParenthesis</span><span class=\\\"hljs-params\\\">(<span class=\\\"hljs-type\\\">int</span> n)</span> {\\n    LinkedList&lt;String&gt; ans = <span class=\\\"hljs-keyword\\\">new</span> <span class=\\\"hljs-title class_\\\">LinkedList</span>&lt;&gt;();\\n    <span class=\\\"hljs-keyword\\\">return</span> get(ans, <span class=\\\"hljs-string\\\">&quot;&quot;</span>, <span class=\\\"hljs-number\\\">0</span>, <span class=\\\"hljs-number\\\">0</span> ,n);\\n}\\n\\n<span class=\\\"hljs-keyword\\\">private</span> List&lt;String&gt; <span class=\\\"hljs-title function_\\\">get</span><span class=\\\"hljs-params\\\">(List&lt;String&gt; ans, String str, <span class=\\\"hljs-type\\\">int</span> open, <span class=\\\"hljs-type\\\">int</span> close, <span class=\\\"hljs-type\\\">int</span> n)</span> {\\n    <span class=\\\"hljs-keyword\\\">if</span> (str.length() == n * <span class=\\\"hljs-number\\\">2</span>) {\\n        <span class=\\\"hljs-comment\\\">// means we reach the end</span>\\n        ans.add(str);\\n    } <span class=\\\"hljs-keyword\\\">else</span> {\\n        <span class=\\\"hljs-comment\\\">// one rightful path</span>\\n        <span class=\\\"hljs-keyword\\\">if</span> (open &lt; n) {\\n            get(ans, str + <span class=\\\"hljs-string\\\">&quot;(&quot;</span>, open + <span class=\\\"hljs-number\\\">1</span>, close, n);\\n        }\\n        <span class=\\\"hljs-comment\\\">// another rightful path</span>\\n        <span class=\\\"hljs-keyword\\\">if</span> (close &lt; open) {\\n            get(ans, str + <span class=\\\"hljs-string\\\">&quot;)&quot;</span>, open, close + <span class=\\\"hljs-number\\\">1</span>, n);\\n        }\\n    }\\n    <span class=\\\"hljs-keyword\\\">return</span> ans;\\n}\\n</code></pre>\\n<h3 id=\\\"23-merge-k-sorted-listshard\\\">23. Merge K Sorted Lists(Hard)</h3>\\n<p>Merge <em>k</em> sorted linked lists and return it as one sorted list. Analyze and describe its complexity.</p>\\n<p><strong>Example:</strong></p>\\n<pre><code>Input:\\n[\\n  1-&gt;4-&gt;5,\\n  1-&gt;3-&gt;4,\\n  2-&gt;6\\n]\\nOutput: 1-&gt;1-&gt;2-&gt;3-&gt;4-&gt;4-&gt;5-&gt;6\\n</code></pre>\\n<p>做这题的时候，我有很多种思路，一步步网上打才发现，原来大道至简，用归并排序才是王道，真的不要怕使用递归，栈不深的情况下，递归是一个很高效的算法</p>\\n<p>写上面那句话的时候突然灵机一想，想到两个月前面试里被面试官问道：若干日志文件，每个日子文件里的日志按照时间顺序打的，怎么合并成一个有序日志文件</p>\\n<p>当时只能说出分段排序，然后被面试官继续问怎么分段，然后又扯用索引，现在回来一想，归并是个多么美妙的算法</p>\\n<p>以归并的思想来看这道题，根本不算难题</p>\\n<h4 id=\\\"merge-sortbeat-100\\\">Merge Sort(Beat 100%)</h4>\\n<pre><code class=\\\"hljs language-java\\\"><span class=\\\"hljs-keyword\\\">public</span> ListNode <span class=\\\"hljs-title function_\\\">mergeKLists</span><span class=\\\"hljs-params\\\">(ListNode[] lists)</span> {\\n    <span class=\\\"hljs-keyword\\\">return</span> mergeKLists(lists, <span class=\\\"hljs-number\\\">0</span>, lists.length - <span class=\\\"hljs-number\\\">1</span>);\\n}\\n\\n<span class=\\\"hljs-comment\\\">// merge sort</span>\\n<span class=\\\"hljs-keyword\\\">private</span> ListNode <span class=\\\"hljs-title function_\\\">mergeKLists</span><span class=\\\"hljs-params\\\">(ListNode[] lists, <span class=\\\"hljs-type\\\">int</span> start, <span class=\\\"hljs-type\\\">int</span> end)</span> {\\n    <span class=\\\"hljs-type\\\">int</span> <span class=\\\"hljs-variable\\\">length</span> <span class=\\\"hljs-operator\\\">=</span> end - start + <span class=\\\"hljs-number\\\">1</span>;\\n    <span class=\\\"hljs-keyword\\\">if</span> (lists.length == <span class=\\\"hljs-number\\\">0</span>) {\\n        <span class=\\\"hljs-keyword\\\">return</span> <span class=\\\"hljs-literal\\\">null</span>;\\n    }\\n    <span class=\\\"hljs-keyword\\\">if</span> (length == <span class=\\\"hljs-number\\\">1</span>) {\\n        <span class=\\\"hljs-keyword\\\">return</span> lists[start];\\n    }\\n    <span class=\\\"hljs-keyword\\\">if</span> (length == <span class=\\\"hljs-number\\\">2</span>) {\\n        <span class=\\\"hljs-keyword\\\">return</span> mergeTwoLists(lists[start], lists[end]);\\n    } <span class=\\\"hljs-keyword\\\">else</span> {\\n        <span class=\\\"hljs-type\\\">int</span> <span class=\\\"hljs-variable\\\">mid</span> <span class=\\\"hljs-operator\\\">=</span> (length / <span class=\\\"hljs-number\\\">2</span>) + start;\\n        <span class=\\\"hljs-type\\\">ListNode</span> <span class=\\\"hljs-variable\\\">right</span> <span class=\\\"hljs-operator\\\">=</span> mergeKLists(lists, start, mid);\\n        <span class=\\\"hljs-type\\\">ListNode</span> <span class=\\\"hljs-variable\\\">left</span> <span class=\\\"hljs-operator\\\">=</span> mergeKLists(lists, mid + <span class=\\\"hljs-number\\\">1</span>, end);\\n        <span class=\\\"hljs-keyword\\\">return</span> mergeTwoLists(right, left);\\n    }\\n}\\n\\n<span class=\\\"hljs-comment\\\">// 用到之前的合并2个有序List</span>\\n<span class=\\\"hljs-keyword\\\">private</span> ListNode <span class=\\\"hljs-title function_\\\">mergeTwoLists</span><span class=\\\"hljs-params\\\">(ListNode l1, ListNode l2)</span> {\\n    <span class=\\\"hljs-keyword\\\">if</span> (l1 == <span class=\\\"hljs-literal\\\">null</span> || l2 == <span class=\\\"hljs-literal\\\">null</span>) {\\n        <span class=\\\"hljs-type\\\">return</span> <span class=\\\"hljs-variable\\\">l1</span> <span class=\\\"hljs-operator\\\">=</span>= <span class=\\\"hljs-literal\\\">null</span> ? l2 : l1;\\n    }\\n    <span class=\\\"hljs-type\\\">ListNode</span> <span class=\\\"hljs-variable\\\">pre</span> <span class=\\\"hljs-operator\\\">=</span> <span class=\\\"hljs-keyword\\\">new</span> <span class=\\\"hljs-title class_\\\">ListNode</span>(<span class=\\\"hljs-number\\\">0</span>);\\n    pre.next = l1;\\n    <span class=\\\"hljs-type\\\">ListNode</span> <span class=\\\"hljs-variable\\\">head</span> <span class=\\\"hljs-operator\\\">=</span> l1;\\n    <span class=\\\"hljs-keyword\\\">while</span> (l2 != <span class=\\\"hljs-literal\\\">null</span> && l1 != <span class=\\\"hljs-literal\\\">null</span>) {\\n        <span class=\\\"hljs-keyword\\\">if</span> (l2.val &lt; l1.val) {\\n            pre.next = l2;\\n            l2 = l2.next;\\n            pre.next.next = l1;\\n            <span class=\\\"hljs-keyword\\\">if</span> (head == l1) {\\n                head = pre.next;\\n            }\\n        }\\n        pre = pre.next;\\n        l1 = pre.next;\\n    }\\n    <span class=\\\"hljs-keyword\\\">if</span> (l2 != <span class=\\\"hljs-literal\\\">null</span>) {\\n        pre.next = l2;\\n    }\\n    <span class=\\\"hljs-keyword\\\">return</span> head;\\n}\\n</code></pre>\\n<h3 id=\\\"24-swap-nodes-in-pairsmedium\\\">24. Swap Nodes In Pairs(Medium)</h3>\\n<p>Given a linked list, swap every two adjacent nodes and return its head.</p>\\n<p>You may <strong>not</strong> modify the values in the list&#39;s nodes, only nodes itself may be changed.</p>\\n<p><strong>Example:</strong></p>\\n<pre><code>Given 1-&gt;2-&gt;3-&gt;4, you should return the list as 2-&gt;1-&gt;4-&gt;3.\\n</code></pre>\\n<h4 id=\\\"brute-forcebeat-100\\\">Brute Force(Beat 100%)</h4>\\n<pre><code class=\\\"hljs language-java\\\"><span class=\\\"hljs-keyword\\\">public</span> ListNode <span class=\\\"hljs-title function_\\\">swapPairs</span><span class=\\\"hljs-params\\\">(ListNode head)</span> {\\n    <span class=\\\"hljs-keyword\\\">if</span> (head == <span class=\\\"hljs-literal\\\">null</span>) {\\n        <span class=\\\"hljs-keyword\\\">return</span> <span class=\\\"hljs-literal\\\">null</span>;\\n    }\\n    <span class=\\\"hljs-keyword\\\">if</span> (head.next == <span class=\\\"hljs-literal\\\">null</span>) {\\n        <span class=\\\"hljs-keyword\\\">return</span> head;\\n    }\\n    <span class=\\\"hljs-type\\\">ListNode</span> <span class=\\\"hljs-variable\\\">newHead</span> <span class=\\\"hljs-operator\\\">=</span> head.next;\\n    <span class=\\\"hljs-type\\\">ListNode</span> <span class=\\\"hljs-variable\\\">pre</span> <span class=\\\"hljs-operator\\\">=</span> <span class=\\\"hljs-keyword\\\">new</span> <span class=\\\"hljs-title class_\\\">ListNode</span>(<span class=\\\"hljs-number\\\">0</span>);\\n    pre.next = head;\\n    <span class=\\\"hljs-type\\\">ListNode</span> <span class=\\\"hljs-variable\\\">now</span> <span class=\\\"hljs-operator\\\">=</span> pre.next;\\n    <span class=\\\"hljs-type\\\">ListNode</span> <span class=\\\"hljs-variable\\\">next</span> <span class=\\\"hljs-operator\\\">=</span> now.next;\\n    <span class=\\\"hljs-keyword\\\">while</span> (next != <span class=\\\"hljs-literal\\\">null</span>) {\\n        pre.next = next;\\n        now.next = next.next;\\n        next.next = now;\\n        \\n        pre = now;\\n        now = pre.next;\\n        <span class=\\\"hljs-keyword\\\">if</span> (now == <span class=\\\"hljs-literal\\\">null</span>) {\\n            <span class=\\\"hljs-keyword\\\">break</span>;\\n        }\\n        next = now.next;\\n    }\\n    <span class=\\\"hljs-keyword\\\">return</span> newHead;\\n}\\n</code></pre>\\n<p>没难度的，指针做好就行</p>\\n<h3 id=\\\"25-reverse-nodes-in-k-grouphard\\\">25. Reverse Nodes In K-Group(Hard)</h3>\\n<p>Given a linked list, reverse the nodes of a linked list <em>k</em> at a time and return its modified list.</p>\\n<p><em>k</em> is a positive integer and is less than or equal to the length of the linked list. If the number of nodes is not a multiple of <em>k</em> then left-out nodes in the end should remain as it is.</p>\\n<p><strong>Example:</strong></p>\\n<p>Given this linked list: <code>1-&gt;2-&gt;3-&gt;4-&gt;5</code></p>\\n<p>For <em>k</em> = 2, you should return: <code>2-&gt;1-&gt;4-&gt;3-&gt;5</code></p>\\n<p>For <em>k</em> = 3, you should return: <code>3-&gt;2-&gt;1-&gt;4-&gt;5</code></p>\\n<p><strong>Note:</strong></p>\\n<ul>\\n<li>Only constant extra memory is allowed.</li>\\n<li>You may not alter the values in the list&#39;s nodes, only nodes itself may be changed.</li>\\n</ul>\\n<h4 id=\\\"brute-force-beat-9932\\\">Brute Force (Beat 99.32%)</h4>\\n<p>这题，做出来了就是成功了，基本上思路就是直观的暴力解，解题的难点在于，如何处理指针</p>\\n<p>做链表题的时候始终要记住一句话：<strong>Keep tracking the pointer</strong></p>\\n<p>跟踪指针到最后，你就赢了</p>\\n<p>我们的思路很简单，首先从头开始，每k个结点为一段，我们的任务就是把这一段提出来，逆转，再放回去</p>\\n<p>要做到这件事，首先我们得做到逆转一段链表，这件事也没什么技巧，hmmmmm，好吧还是有点东西的，我总是喜欢分治法+递归，我已经爱上了这种简单直接的做法了</p>\\n<p>上公式：<code>reverse(2 -&gt; 3 -&gt; 4 -&gt; 5) = reverse ( reverse (2 -&gt; 3) -&gt; reverse(3 -&gt; 4))</code>，于是所有的逆转都变成了两个结点链表的逆转，而且为了更简单地做到这件事，我还用一个数据结构来表示一条链，记录它的头和尾，以更好地接上两个链</p>\\n<pre><code class=\\\"hljs language-java\\\"><span class=\\\"hljs-keyword\\\">class</span> <span class=\\\"hljs-title class_\\\">Segment</span> {\\n    ListNode head;\\n    ListNode tail;\\n\\n    Segment(ListNode head, ListNode tail) {\\n        <span class=\\\"hljs-built_in\\\">this</span>.head = head;\\n        <span class=\\\"hljs-built_in\\\">this</span>.tail = tail;\\n    }\\n}\\n<span class=\\\"hljs-keyword\\\">private</span> Segment <span class=\\\"hljs-title function_\\\">reverse</span><span class=\\\"hljs-params\\\">(ListNode head)</span> {\\n    <span class=\\\"hljs-keyword\\\">if</span> (head == <span class=\\\"hljs-literal\\\">null</span>) {\\n        <span class=\\\"hljs-keyword\\\">return</span> <span class=\\\"hljs-literal\\\">null</span>;\\n    }\\n    <span class=\\\"hljs-type\\\">ListNode</span> <span class=\\\"hljs-variable\\\">a</span> <span class=\\\"hljs-operator\\\">=</span> head;\\n    <span class=\\\"hljs-type\\\">ListNode</span> <span class=\\\"hljs-variable\\\">b</span> <span class=\\\"hljs-operator\\\">=</span> head.next;\\n    <span class=\\\"hljs-keyword\\\">if</span> (b == <span class=\\\"hljs-literal\\\">null</span>) {\\n        <span class=\\\"hljs-keyword\\\">return</span> <span class=\\\"hljs-keyword\\\">new</span> <span class=\\\"hljs-title class_\\\">Segment</span>(head, head);\\n    } <span class=\\\"hljs-keyword\\\">else</span> <span class=\\\"hljs-keyword\\\">if</span> (b.next == <span class=\\\"hljs-literal\\\">null</span>) {\\n        b.next = a;\\n        a.next = <span class=\\\"hljs-literal\\\">null</span>;\\n        <span class=\\\"hljs-keyword\\\">return</span> <span class=\\\"hljs-keyword\\\">new</span> <span class=\\\"hljs-title class_\\\">Segment</span>(b, a);\\n    } <span class=\\\"hljs-keyword\\\">else</span> {\\n        <span class=\\\"hljs-type\\\">ListNode</span> <span class=\\\"hljs-variable\\\">right</span> <span class=\\\"hljs-operator\\\">=</span> b.next;\\n        b.next = <span class=\\\"hljs-literal\\\">null</span>;\\n        <span class=\\\"hljs-type\\\">Segment</span> <span class=\\\"hljs-variable\\\">leftSeg</span> <span class=\\\"hljs-operator\\\">=</span> reverse(a);\\n        <span class=\\\"hljs-type\\\">Segment</span> <span class=\\\"hljs-variable\\\">rightSeg</span> <span class=\\\"hljs-operator\\\">=</span> reverse(right);\\n        <span class=\\\"hljs-comment\\\">// reconnect two seg</span>\\n        rightSeg.tail.next = leftSeg.head;\\n        <span class=\\\"hljs-comment\\\">// reassign seg tail cause we connect a new list after it</span>\\n        rightSeg.tail = leftSeg.tail;\\n        <span class=\\\"hljs-keyword\\\">return</span> rightSeg;\\n    }\\n}\\n</code></pre>\\n<p>那么接下来：我们用4个指针，来对原链进行分段逆转，大致思路如下：</p>\\n<pre><code>               head (ignore this)\\n                 ↓\\norigin list:     1 -&gt; 2 -&gt; 3 -&gt; 4 -&gt; 5 -&gt; 6 -&gt; NULL\\nassume k is: 3\\n\\nassign some pointer：\\n\\n1. nowPre: the pre node of this segment\\n2. nowHead: the head node of this segment\\n3. tmp: the head of next segment\\n4. tmpPre: the pre node of tmp node, it also the tail node of the reversed segment\\n\\n        newHead -&gt; NULL\\n                             \\n        nowPre → 0 -&gt; 1 -&gt; 2 -&gt; 3 -&gt; 4 -&gt; 5 -&gt; 6 -&gt; NULL\\n               ↗     ↑\\n           tmpPre    tmp\\n                      ↑\\n                    nowHead\\n                    \\n这是初始状态，我们开始移动tmp和tmpPre：\\n\\n        nowPre → 0 -&gt; 1 -&gt; 2 -&gt; 3 -&gt; 4 -&gt; 5 -&gt; 6 -&gt; NULL\\n                      ↑       ↗     ↑\\n                   nowHead tmpPre    tmp\\n\\n于是这时候我们可以将链看成是三段：\\n1. nowPre之前的结点是一段；           记为A段\\n2. nowHead到tmpPre的结点是一段；    记为B段\\n3. tmp之后的结点是一段；               记为C段\\n\\n这时候可以看出，我们要逆转的段是第二段，于是先断开BC之间的连接：\\n\\n        nowPre → 0 -&gt; 1 -&gt; 2 -&gt; 3       4 -&gt; 5 -&gt; 6 -&gt; NULL\\n                      ↑       ↗        ↑\\n                   nowHead tmpPre      tmp\\n                   \\n这时候逆转B段（注意原来的nowPre、tmpPre、nowHead也会变的）：\\n\\n                   nowPre → 0\\n                            ↓\\n                  3 -&gt; 2 -&gt; 1           4 -&gt; 5 -&gt; 6 -&gt; NULL\\n                  ↑         ↑           ↑\\n               tmpPre    nowHead       tmp\\n               \\n然后nowHead.next = tmp，就可以接上BC段：\\n\\n                       nowPre → 0\\n                                ↓\\n                      3 -&gt; 2 -&gt; 1 -&gt; 4 -&gt; 5 -&gt; 6 -&gt; NULL\\n                      ↑       ↗     ↑\\n                   tmpPre  nowHead  tmp\\n               \\n再nowPre.next = tmpPre，纠正AB段：\\n\\n        nowPre → 0 -&gt; 3 -&gt; 2 -&gt; 1 -&gt; 4 -&gt; 5 -&gt; 6 -&gt; NULL\\n                      ↑       ↗     ↑\\n                   tmpPre  nowHead  tmp\\n               \\n最后调整指针，为下一次处理做准备（若是第一次处理，则newHead必定为空，则可以指定newHead）：\\n1. newHead = reverseSegment.head\\n2. nowPre = nowHead\\n3. nowHead = tmp\\n4. tmpPre = nowPre\\n\\n               newHead\\n                  ↓\\n             0 -&gt; 3 -&gt; 2 -&gt; 1 -&gt; 4 -&gt; 5 -&gt; 6 -&gt; NULL\\n                            ↑    ↑\\n                       nowPre    tmp\\n                            ↑    ↑\\n                       tmpPre    nowHead\\n</code></pre>\\n<p>于是代码：</p>\\n<pre><code class=\\\"hljs language-java\\\"><span class=\\\"hljs-keyword\\\">public</span> ListNode <span class=\\\"hljs-title function_\\\">reverseKGroup</span><span class=\\\"hljs-params\\\">(ListNode head, <span class=\\\"hljs-type\\\">int</span> k)</span> {\\n    <span class=\\\"hljs-keyword\\\">if</span> (k == <span class=\\\"hljs-number\\\">1</span>) {\\n        <span class=\\\"hljs-keyword\\\">return</span> head;\\n    }\\n    <span class=\\\"hljs-type\\\">ListNode</span>\\n            <span class=\\\"hljs-variable\\\">nowPre</span> <span class=\\\"hljs-operator\\\">=</span> <span class=\\\"hljs-keyword\\\">new</span> <span class=\\\"hljs-title class_\\\">ListNode</span>(<span class=\\\"hljs-number\\\">0</span>),\\n            tmp = head,\\n            newHead = <span class=\\\"hljs-literal\\\">null</span>,\\n            nowHead, tmpPre;\\n    nowPre.next = tmp;\\n\\n    <span class=\\\"hljs-keyword\\\">while</span> (tmp != <span class=\\\"hljs-literal\\\">null</span>) {\\n        nowHead = tmp;\\n        tmpPre = nowPre;\\n        <span class=\\\"hljs-type\\\">int</span> <span class=\\\"hljs-variable\\\">count</span> <span class=\\\"hljs-operator\\\">=</span> <span class=\\\"hljs-number\\\">0</span>;\\n        <span class=\\\"hljs-keyword\\\">while</span> (count &lt; k && tmp != <span class=\\\"hljs-literal\\\">null</span>) {\\n            tmp = tmp.next;\\n            tmpPre = tmpPre.next;\\n            count++;\\n        }\\n        <span class=\\\"hljs-keyword\\\">if</span> (count == k) {\\n            <span class=\\\"hljs-comment\\\">// disconnected two part</span>\\n            tmpPre.next = <span class=\\\"hljs-literal\\\">null</span>;\\n            <span class=\\\"hljs-comment\\\">// reverse segment</span>\\n            <span class=\\\"hljs-type\\\">Segment</span> <span class=\\\"hljs-variable\\\">reverse</span> <span class=\\\"hljs-operator\\\">=</span> reverse(nowHead);\\n            <span class=\\\"hljs-keyword\\\">if</span> (newHead == <span class=\\\"hljs-literal\\\">null</span>) {\\n                newHead = reverse.head;\\n            }\\n            <span class=\\\"hljs-comment\\\">// reconnected part B & C</span>\\n            nowHead.next = tmp;\\n            <span class=\\\"hljs-comment\\\">// reconnected part A & B</span>\\n            nowPre.next = tmpPre;\\n            <span class=\\\"hljs-comment\\\">// reassign the nowPre</span>\\n            nowPre = nowHead;\\n        }\\n    }\\n    <span class=\\\"hljs-comment\\\">// when k is bigger than list length then newHead will be null</span>\\n    <span class=\\\"hljs-comment\\\">// so just return head</span>\\n    <span class=\\\"hljs-type\\\">return</span> <span class=\\\"hljs-variable\\\">newHead</span> <span class=\\\"hljs-operator\\\">=</span>= <span class=\\\"hljs-literal\\\">null</span> ? head : newHead; \\n}\\n</code></pre>\\n\";","export default \"<h3 id=\\\"introduction\\\">Introduction</h3>\\n<p>前面说了挺多关于GC的算法思路，接下来这篇说说在JVM里实际实现的GC算法，翻译、参考自<a href=\\\"https://plumbr.io/handbook/garbage-collection-algorithms-implementations\\\">plumbr.io</a></p>\\n<p>我们首先要清楚地认识到一个事情：除了G1回收器以外，垃圾回收算法分为<strong>“针对新生代”</strong>，<strong>“针对老年代”</strong>两种</p>\\n<p>每种垃圾回收算法又有不同的实现，然后你可以随意组合，下面这张表展示了在Java8下常用的四种GC算法的组合</p>\\n<table>\\n<thead>\\n<tr>\\n<th align=\\\"left\\\"><strong>Young</strong></th>\\n<th align=\\\"left\\\"><strong>Tenured</strong></th>\\n<th align=\\\"left\\\"><strong>JVM options</strong></th>\\n</tr>\\n</thead>\\n<tbody><tr>\\n<td align=\\\"left\\\"><strong>Serial</strong></td>\\n<td align=\\\"left\\\"><strong>Serial</strong></td>\\n<td align=\\\"left\\\"><strong>-XX:+UseSerialGC</strong></td>\\n</tr>\\n<tr>\\n<td align=\\\"left\\\"><strong>Parallel Scavenge</strong></td>\\n<td align=\\\"left\\\"><strong>Parallel Old</strong></td>\\n<td align=\\\"left\\\"><strong>-XX:+UseParallelGC -XX:+UseParallelOldGC</strong></td>\\n</tr>\\n<tr>\\n<td align=\\\"left\\\"><strong>Parallel New</strong></td>\\n<td align=\\\"left\\\"><strong>CMS</strong></td>\\n<td align=\\\"left\\\"><strong>-XX:+UseParNewGC -XX:+UseConcMarkSweepGC</strong></td>\\n</tr>\\n<tr>\\n<td align=\\\"left\\\"><strong>G1</strong></td>\\n<td align=\\\"left\\\"></td>\\n<td align=\\\"left\\\"><strong>-XX:+UseG1GC</strong></td>\\n</tr>\\n</tbody></table>\\n<p>实际上还有其他搭配，但是这些搭配要么是不支持了，要么是不实用了，所以接下来我们只关注这四种</p>\\n<h3 id=\\\"serial-gc\\\">Serial GC</h3>\\n<p><strong>Serail GC</strong>使用<a href=\\\"./jhpq7e.html?hash=14c983ac\\\">标记-复制</a>算法回收年轻代，使用<a href=\\\"\\\">标记-整理</a>算法回收老年代</p>\\n<p>和它的名字一样，串行收集器在这两个区域只能<strong>串行地</strong>收集，这两个区域的收集也会触发<strong>大暂停</strong></p>\\n<p>所以这个收集器并不能利用多核CPU的优势，它在工作的时候就只会使用一个CPU，要开启这个收集器，需要在JVM启动的时候加上一行参数：</p>\\n<pre><code>java -XX:+UseSerialGC com.mypackage.MyClass\\n</code></pre>\\n<p>选择这个收集器的话，最好是在JVM只运行小几百兆的堆内存的时候，并且运行在单核机器上的时候才好，因为大半数的服务端机器都会有很高的配置，如果使用<strong>串行</strong>收集的话，意味着你的系统没有发挥最大的机器性能</p>\\n<h4 id=\\\"gc-log\\\">GC Log</h4>\\n<h5 id=\\\"minor-gc\\\">Minor GC</h5>\\n<p>下面是一次<strong>Serial GC</strong>的Minor GC的快照：</p>\\n<p>Following snippet contains the information about a GC event cleaning the Young Generation:</p>\\n<p><code>2015-05-26T14:45:37.987-0200</code>:<code>151.126</code>:[<code>GC</code>(<code>Allocation Failure</code>) 151.126: [<code>DefNew</code>:<code>629119K-&gt;69888K</code> <code>(629120K)</code>, 0.0584157 secs]<code>1619346K-&gt;1273247K </code> <code>(2027264K)</code>,<code>0.0585007 secs</code>]<code>[Times: user=0.06 sys=0.00, real=0.06 secs]</code></p>\\n<ol>\\n<li><p><strong>2015-05-26T14:45:37.987-0200</strong> – Time when the GC event started.</p>\\n</li>\\n<li><p><strong>151.126</strong> – Time when the GC event started, relative to the JVM startup time. Measured in seconds.</p>\\n</li>\\n<li><p><strong>GC</strong> – Flag to distinguish between Minor & Full GC. This time it is indicating that this was a Minor GC.</p>\\n</li>\\n<li><p><strong>Allocation Failure</strong> – Cause of the collection. In this case, the GC is triggered due to a data structure not fitting into any region in the Young Generation.</p>\\n</li>\\n<li><p><strong>DefNew</strong> – Name of the garbage collector used. This cryptic name stands for the single-threaded mark-copy stop-the-world garbage collector used to clean Young generation.</p>\\n</li>\\n<li><p><strong>629119K-&gt;69888K</strong> – Usage of the Young Generation before and after collection.</p>\\n</li>\\n<li><p><strong>(629120K)</strong> – Total size of the Young Generation.</p>\\n</li>\\n<li><p><strong>1619346K-&gt;1273247K</strong> – Total used heap before and after collection.</p>\\n</li>\\n<li><p><strong>(2027264K)</strong> – Total available heap.</p>\\n</li>\\n<li><p><strong>0.0585007 secs</strong> – Duration of the GC event in seconds.</p>\\n</li>\\n<li><p><strong>[Times: user=0.06 sys=0.00, real=0.06 secs]</strong> </p>\\n<p>– Duration of the GC event, measured in different categories:</p>\\n<ul>\\n<li>user – Total CPU time that was consumed by the garbage collector threads during this collection</li>\\n<li>sys – Time spent in OS calls or waiting for system event</li>\\n<li>real – Clock time for which your application was stopped. As Serial Garbage Collector always uses just a single thread, real time is thus equal to the sum of user and system times.</li>\\n</ul>\\n</li>\\n</ol>\\n<p>下图是这次log的内存图变化：</p>\\n<p><img src=\\\"https://plumbr.io/app/uploads/2015/06/serial-gc-in-young-generation.png\\\" alt=\\\"Serial GC Young Gen Java\\\"></p>\\n<p>从快照结果中我们可以看出年轻代的对象要么被清理掉了，要么存活下来进入S2了，要么被promoted到了老年代</p>\\n<h5 id=\\\"full-gc\\\">Full GC</h5>\\n<p><code>2015-05-26T14:45:59.690-0200</code>: <code>172.829</code>:[GC (Allocation Failure) 172.829:[<code>DefNew: 629120K-&gt;629120K(629120K), 0.0000372 secs</code>]172.829:[<code>Tenured</code>: <code>1203359K-&gt;755802K</code> <code>(1398144K)</code> ,<code>0.1855567 secs</code>] <code>1832479K-&gt;755802K</code> <code>(2027264K)</code>,<code>[Metaspace: 6741K-&gt;6741K(1056768K)]</code> <code>[Times: user=0.18 sys=0.00, real=0.18 secs]</code></p>\\n<ol>\\n<li><p><strong>2015-05-26T14:45:59.690-0200</strong> – Time when the GC event started.</p>\\n</li>\\n<li><p><strong>172.829</strong> – Time when the GC event started, relative to the JVM startup time. Measured in seconds.</p>\\n</li>\\n<li><p><strong>DefNew: 629120K-&gt;629120K(629120K), 0.0000372 secs</strong> – Similar to the previous example, a minor garbage collection in the Young Generation happened during this event due to Allocation Failure. For this collection the same DefNew collector was run as before and it decreased the usage of the Young Generation from 629120K to 0. Notice that JVM reports this incorrectly due to buggy behavior and instead reports the Young Generation as being completely full. This collection took 0.0000372 seconds.</p>\\n</li>\\n<li><p><strong>Tenured</strong> – Name of the garbage collector used to clean the Old space. The name Tenured indicates a single-threaded stop-the-world mark-sweep-compact garbage collector being used.</p>\\n</li>\\n<li><p><strong>1203359K-&gt;755802K</strong> – Usage of Old generation before and after the event.</p>\\n</li>\\n<li><p><strong>(1398144K)</strong> – Total capacity of the Old generation.</p>\\n</li>\\n<li><p><strong>0.1855567 secs</strong> – Time it took to clean the Old Generation.</p>\\n</li>\\n<li><p><strong>1832479K-&gt;755802K</strong> – Usage of the whole heap before and after the collection of the Young and Old Generations.</p>\\n</li>\\n<li><p><strong>(2027264K)</strong> – Total heap available for the JVM.</p>\\n</li>\\n<li><p><strong>[Metaspace: 6741K-&gt;6741K(1056768K)]</strong> – Similar information about Metaspace collection. As seen, no garbage was collected in Metaspace during the event.</p>\\n</li>\\n<li><p><strong>[Times: user=0.18 sys=0.00, real=0.18 secs]</strong></p>\\n<p>– Duration of the GC event, measured in different categories:</p>\\n<ul>\\n<li>user – Total CPU time that was consumed by Garbage Collector threads during this collection</li>\\n<li>sys – Time spent in OS calls or waiting for system event</li>\\n<li>real – Clock time for which your application was stopped. As Serial Garbage Collector always uses just a single thread, real time is thus equal to the sum of user and system times.</li>\\n</ul>\\n</li>\\n</ol>\\n<p>内存变化：</p>\\n<p><img src=\\\"https://plumbr.io/app/uploads/2015/06/serial-gc-in-old-gen-java.png\\\" alt=\\\"Java Old Generation SerialGC\\\"></p>\\n<h3 id=\\\"parallel-gc\\\">Parallel GC</h3>\\n<p><strong>Parallel GC</strong>使用<a href=\\\"./jhpq7e.html?hash=14c983ac\\\">标记-复制</a>算法回收年轻代，使用<a href=\\\"\\\">标记-整理</a>算法回收老年代，这点两个收集器都一样</p>\\n<p>和它的名字一样，并行收集器在这两个区域可以<strong>并行地</strong>收集，开始工作前也会触发<strong>大暂停</strong>，说并行是指它会用多个线程同时进行垃圾回收，这样做会大大减少回收的耗时</p>\\n<p>相关参数：</p>\\n<ul>\\n<li><p>指定多线程收集使用的线程数，默认是操作系统的核心数</p>\\n<pre><code>-XX:ParallelGCThreads=NNN\\n</code></pre>\\n</li>\\n<li><p>指定使用并行收集器</p>\\n<pre><code>java -XX:+UseParallelGC com.mypackages.MyExecutableClass\\njava -XX:+UseParallelOldGC com.mypackages.MyExecutableClass\\njava -XX:+UseParallelGC -XX:+UseParallelOldGC com.mypackages.MyExecutableClass\\n</code></pre>\\n</li>\\n</ul>\\n<p>如果你想提高系统的吞吐量的话，那么你可以在多核CPU的机器环境使用这个收集器，它能更高效地利用系统的资源进行工作：</p>\\n<ul>\\n<li>因为快速的原因，<strong>大暂停</strong>的时间也会缩短；</li>\\n<li>在垃圾回收期间，<strong>收集器都不会消费任何资源（？）</strong>；</li>\\n</ul>\\n<p>但是另一方面来说，所有的收集器都必须在无打扰的情况下工作，所以它们非常容易受到长时间暂停的线程的影响，如果你对延迟很在意的话，你可以继续看下一组垃圾收集</p>\\n<p><strong>GC log：</strong></p>\\n<pre><code>2015-05-26T14:27:40.915-0200: 116.115: [GC (Allocation Failure) [PSYoungGen: 2694440K-&gt;1305132K(2796544K)] 9556775K-&gt;8438926K(11185152K), 0.2406675 secs] [Times: user=1.77 sys=0.01, real=0.24 secs]\\n2015-05-26T14:27:41.155-0200: 116.356: [Full GC (Ergonomics) [PSYoungGen: 1305132K-&gt;0K(2796544K)] [ParOldGen: 7133794K-&gt;6597672K(8388608K)] 8438926K-&gt;6597672K(11185152K), [Metaspace: 6745K-&gt;6745K(1056768K)], 0.9158801 secs] [Times: user=4.49 sys=0.64, real=0.92 secs]\\n</code></pre>\\n<p><strong>Minor GC：</strong></p>\\n<p><img src=\\\"https://plumbr.io/app/uploads/2015/06/ParallelGC-in-Young-Generation-Java.png\\\" alt=\\\"Java ParalleGC\\\"></p>\\n<p><strong>Full GC：</strong></p>\\n<p><img src=\\\"https://plumbr.io/app/uploads/2015/06/Java-ParallelGC-in-Old-Generation.png\\\" alt=\\\"ParallelGC Java\\\"></p>\\n<h3 id=\\\"concurrent-mark-and-sweep（cms）\\\">Concurrent Mark and Sweep（CMS）</h3>\\n<p>CMS收集器的官方名称是“Mostly Concurrent Mark and Sweep Garbage Collector”，它在年轻代使用<strong>并行</strong>收集器一样的行为：<strong>大暂停、并行、标记-复制</strong>，然后在老年代区使用<strong>CMS</strong></p>\\n<p>这个算法被设计成用于<strong>避免在回收老年代的时候有长暂停</strong>，它有两个含义：</p>\\n<ol>\\n<li>它并不对老年代进行紧凑整理，而是用一个**&#39;free-lists&#39;**来管理回收空间；</li>\\n<li>它主要的工作是在<strong>标记-回收</strong>阶段用<strong>额外的线程</strong>和应用程序<strong>并发地进行</strong>，这意味着在这个阶段工作的时候，它不会触发<strong>大暂停</strong>，因此！它会和程序的线程竞争CPU时间，默认的情况下它能调用的线程数是物理核心的1/4；</li>\\n</ol>\\n<p>你可以用下面这行参数来启动它</p>\\n<pre><code>java -XX:+UseConcMarkSweepGC com.mypackages.MyExecutableClass\\n</code></pre>\\n<p>如果你的目的是为了减少延迟的话，那么<strong>CMS</strong>在多核环境下是一个很好的选择，但是由于它会占用程序之外的额外资源，所以它会削弱系统的整体吞吐量</p>\\n<h4 id=\\\"gc-log-1\\\">GC Log</h4>\\n<h5 id=\\\"minor-gc-1\\\">Minor GC</h5>\\n<pre><code>2015-05-26T16:23:07.219-0200: 64.322: [GC (Allocation Failure) 64.322: [ParNew: 613404K-&gt;68068K(613440K), 0.1020465 secs] 10885349K-&gt;10880154K(12514816K), 0.1021309 secs] [Times: user=0.78 sys=0.01, real=0.11 secs]\\n</code></pre>\\n<p><img src=\\\"https://plumbr.io/app/uploads/2015/06/ParallelGC-in-Young-Generation-Java.png\\\" alt=\\\"Java ParalleGC\\\"></p>\\n<h5 id=\\\"full-gc-1\\\">Full GC</h5>\\n<pre><code>2015-05-26T16:23:07.321-0200: 64.425: [GC (CMS Initial Mark) [1 CMS-initial-mark: 10812086K(11901376K)] 10887844K(12514816K), 0.0001997 secs] [Times: user=0.00 sys=0.00, real=0.00 secs]\\n2015-05-26T16:23:07.321-0200: 64.425: [CMS-concurrent-mark-start]\\n2015-05-26T16:23:07.357-0200: 64.460: [CMS-concurrent-mark: 0.035/0.035 secs] [Times: user=0.07 sys=0.00, real=0.03 secs]\\n2015-05-26T16:23:07.357-0200: 64.460: [CMS-concurrent-preclean-start]\\n2015-05-26T16:23:07.373-0200: 64.476: [CMS-concurrent-preclean: 0.016/0.016 secs] [Times: user=0.02 sys=0.00, real=0.02 secs]\\n2015-05-26T16:23:07.373-0200: 64.476: [CMS-concurrent-abortable-preclean-start]\\n2015-05-26T16:23:08.446-0200: 65.550: [CMS-concurrent-abortable-preclean: 0.167/1.074 secs] [Times: user=0.20 sys=0.00, real=1.07 secs]\\n2015-05-26T16:23:08.447-0200: 65.550: [GC (CMS Final Remark) [YG occupancy: 387920 K (613440 K)]65.550: [Rescan (parallel) , 0.0085125 secs]65.559: [weak refs processing, 0.0000243 secs]65.559: [class unloading, 0.0013120 secs]65.560: [scrub symbol table, 0.0008345 secs]65.561: [scrub string table, 0.0001759 secs][1 CMS-remark: 10812086K(11901376K)] 11200006K(12514816K), 0.0110730 secs] [Times: user=0.06 sys=0.00, real=0.01 secs]\\n2015-05-26T16:23:08.458-0200: 65.561: [CMS-concurrent-sweep-start]\\n2015-05-26T16:23:08.485-0200: 65.588: [CMS-concurrent-sweep: 0.027/0.027 secs] [Times: user=0.03 sys=0.00, real=0.03 secs]\\n2015-05-26T16:23:08.485-0200: 65.589: [CMS-concurrent-reset-start]\\n2015-05-26T16:23:08.497-0200: 65.601: [CMS-concurrent-reset: 0.012/0.012 secs] [Times: user=0.01 sys=0.00, real=0.01 secs]\\n</code></pre>\\n<p>CMS的<strong>Full GC</strong>有点讲头，它分为7个阶段</p>\\n<h6 id=\\\"phase-1-initial-mark\\\">Phase 1: Initial Mark</h6>\\n<p>这里会有CMS会触发的两次暂停之一，这个阶段的主要目标就是将老年代中的<strong>GC Root</strong>和有<strong>被存活年轻代引用</strong>的，后面这个目标很重要，因为老年代是分代收集的</p>\\n<p><img src=\\\"https://plumbr.io/app/uploads/2015/06/g1-06.png\\\" alt=\\\"CMS initial mark\\\"></p>\\n<h6 id=\\\"phase-2-concurrent-mark\\\">Phase 2: Concurrent Mark</h6>\\n<p>在这个阶段里，GCor会遍历老年代然后<strong>标记上所有存活的对象</strong>，遍历过程是从上一个阶段标记好的<strong>GC Root</strong>开始，但是这个过程不会触发大暂停，而是和程序<strong>并发地</strong>进行，需要注意的是，并不是所有的老年代都会被标记，因为程序运行过程中会改变一些引用关系</p>\\n<p><img src=\\\"https://plumbr.io/app/uploads/2015/06/g1-07.png\\\" alt=\\\"CMS concurrent marking\\\"></p>\\n<h6 id=\\\"phase-3-concurrent-preclean\\\">Phase 3: Concurrent Preclean</h6>\\n<p>这个阶段还是和应用程序并行的。虽然在上一个并发阶段里，有些引用被改变了，我们称这些对象为<strong>“脏的（dirty）”</strong>，如果出现这种情况的话，JVM会将包含这些脏对象的堆区域划出一个范围，称为<strong>卡（card）</strong>，这就是我们前面提到过的<a href=\\\"./wlvrl9.html?hash=76a3fb27\\\">卡标记（<em>card-marking</em>）</a></p>\\n<p><img src=\\\"https://plumbr.io/app/uploads/2015/06/g1-08.png\\\" alt=\\\"CMS dirty cards\\\"></p>\\n<p>卡标记有两种状态，一种在脏状态，一种是干净状态，本阶段需要针对脏状态的对象进行处理，脏对象被视为占用状态，然后<strong>将卡标记对象引用的对象也标记好</strong>，标记好之后，脏对象就变为干净对象了</p>\\n<p><img src=\\\"https://plumbr.io/app/uploads/2015/06/g1-09.png\\\" alt=\\\"CMS concurrent preclean\\\"></p>\\n<p>额外的，在这个阶段中还会进行一些内部处理，为最后的<strong>重标记（Remark Phase）</strong>阶段做准备</p>\\n<h6 id=\\\"phase-4-concurrent-abortable-preclean\\\">Phase 4: Concurrent Abortable Preclean</h6>\\n<p>这个阶段还是<strong>并发阶段</strong>，这个阶段的目标是尽可能地减少整个回收工作中最后一次大暂停的重标记阶段的工作量，这个阶段所用的时间取决于很多因素，因为它仅仅只是迭代地去做同一个事情，但是打断它的迭代的因素有很多种</p>\\n<p>所以这个阶段对即将到来的大暂停阶段影响非常大，而且这个阶段有很多<strong>配置项</strong>和<strong>失败模式</strong></p>\\n<h6 id=\\\"phase-5-final-remark\\\">Phase 5: Final Remark</h6>\\n<p>这个阶段是CMS垃圾回收的第二个<strong>大暂停</strong>阶段，目的是为了最后一次对老年代区域进行<strong>存活标记</strong>，这是由于Preclean阶段是并发地进行的，它可能跟不上程序改变引用的速度，所以这次大暂停就需要解决这个考验</p>\\n<p>通常来说CMS会试着在<strong>年轻代尽可能空着</strong>的情况下执行这次<strong>Final Remark</strong>，目的是消除不断出现大暂停的情况发生</p>\\n<p>在5个Marking阶段之后，老年代中的所有存活对象都已经被标记好了，这时候GCor们就会开始干活，用Sweep的方式<strong>清除（reclaim）</strong>掉所有无用的对象</p>\\n<h6 id=\\\"phase-6-concurrent-sweep\\\">Phase 6: Concurrent Sweep</h6>\\n<p>这个阶段就是和应用程序并发地进行，就是要清理掉不要的对象</p>\\n<p><img src=\\\"https://plumbr.io/app/uploads/2015/06/g1-10.png\\\" alt=\\\"CMS concurrent sweep\\\"></p>\\n<h6 id=\\\"phase-7-concurrent-reset\\\">Phase 7: Concurrent Reset</h6>\\n<p>和程序并发地进行，目的是为了重置CMS收集器中记录的一些内部数据，为下一次CMS收集做准备</p>\\n<p>总而言之，CMS收集器能利用程序暂时用不到的线程，和程序并发地进行，尽可能的减少大暂停的时长</p>\\n<p>而在这个需求上，它很好地完成它了的工作</p>\\n<p>但是它还是有一定的缺点的，其中最需要注意的是它会在一定程度上造成老年代的碎片空间，而且它还缺乏对暂停的预测判断，这点在堆比较大的时候会很明显</p>\\n<h3 id=\\\"g1--garbage-first\\\">G1 – Garbage First</h3>\\n<p>你也许已经注意到，最开始的速查表中的G1并没有区分老年代和新生代，这是有原因的，而不是作者忘了</p>\\n<p>G1收集器有一个很重要的目标就是，利用GC的可配置性和可预测性，让大暂停具有<strong>持续（duration）</strong>和<strong>分布（distribution）</strong>的特点，事实上，<strong>Garbage-First</strong>是一个<strong>软实时（<em>soft real-time</em>）</strong>的垃圾收集器，这意味着你可以为它设置<strong>特定的性能目标</strong>，比如你可以设置大暂停在多少毫秒的时间范围内执行时长不超过多少多少毫秒，G1会尽它的努力去达到这个目标（所以也不是绝对能满足你的设置，这叫做<em><strong>hard real-time</strong></em>）</p>\\n<p>为了达到要设置的目标，G1收集器建立了一套自己的概念：</p>\\n<ol>\\n<li><p>堆内存不必划分为新生代和老年代，而是分为若干个（一般可以是2046个）相同大小的小区域（<em><strong>regions</strong></em>），这些区域用来存放若干个对象，每一种区域又可以分为：Eden Region、Survivor Region、Old Region。</p>\\n<p> 因为不同种类的区域之间并不紧靠在一起，所以物理上它们不都在一个连续的空间，但是我们可以将它们逻辑上组成年轻代和老年代，这和之前的概念一致，只不过并不是连续划分空间了</p>\\n<p> <img src=\\\"https://plumbr.io/app/uploads/2015/06/g1-011.png\\\" alt=\\\"G1 Heap Regions\\\"></p>\\n<p> 这能让GCor们避免每次都清理整片堆内存，反而每次只需要清理一些被视为<strong>待回收集合（collection set）</strong>的部分区域就行了，每次大暂停的时候，都会清理所有的年轻代区域，顺带包括一些老年代区域</p>\\n<p> <img src=\\\"https://plumbr.io/app/uploads/2015/06/g1-02.png\\\" alt=\\\"G1 Collection Set\\\"></p>\\n</li>\\n<li><p>G1另外一个新奇的地方就是，它会对每一个区域中包含的存活数据进行评估，用于建立起<strong>待回收集合（collection set）</strong>，包含越多垃圾的区域将会被越先处理，这也是<strong>Garbage First</strong>名称的来由</p>\\n</li>\\n</ol>\\n<p>要使用G1收集器，可以包含参数：</p>\\n<pre><code>java -XX:+UseG1GC com.mypackages.MyExecutableClass\\n</code></pre>\\n<h4 id=\\\"evacuation-pause-full-young\\\">Evacuation Pause: Full Young</h4>\\n<p>在程序生命周期的最开始，G1并没有为还未被执行的并发阶段预置一些额外信息，所以最开始这些区域都是<strong>纯年轻模式（fully-young-mode）</strong></p>\\n<p>当年轻代被填满的时候，应用程序线程被停止了，然后年轻代区中的存活对象被复制到Survivor区，或者一个未被使用但是即将称为Servivor区域的自由区域</p>\\n<p>这个过程叫做<strong>撤离（Evacuation）</strong>，然后这个阶段的工作就和前面介绍过的一类年轻代收集器差不太多，但是整个撤离阶段的log相当大<strong>（rather large）</strong>，<a href=\\\"https://plumbr.io/handbook/garbage-collection-algorithms-implementations#evacuation-pause-fully-young\\\">原文</a>有详细的log分析，我这里就不展开了</p>\\n<h4 id=\\\"concurrent-marking\\\">Concurrent Marking</h4>\\n<p>G1收集器是基于前一节的CMS收集器的许多概念之上的，所以在继续往下了解之前你得好好看一下CMS到底是啥玩意，虽然在这个阶段G1收集器还是有一些和CMS不一样的地方，但是它们的目标是一致的</p>\\n<p>G1的并发标记阶段使用了一种叫做<strong>“事前快照（Snapshot-At-The-Beginning）”</strong>的方式来在本阶段开始之前就标记好所有的对象，尽管它们中有的会马上变为垃圾，那个对象<strong>“是存活的”</strong>这个信息会代表每个区域的活跃度，这会提高之后判定待回收集的效率</p>\\n<p>之后这个信息被用于在老年代进行GC：</p>\\n<ul>\\n<li>如果一个区域中全部都是垃圾，那么它可以完全和程序并发进行</li>\\n<li>如果一个区域中既有垃圾又有存活对象，那么就需要在老年代区的撤离暂停中进行</li>\\n</ul>\\n<p>G1的并发标记过程的触发时机是堆区域整体被占用足够大的时候，默认情况下是45%，但你可以用JVM参数调它</p>\\n<p>和CMS一样，G1的并发标记过程有好几个阶段它们之中有些可以并发进行，有些则需要大暂停</p>\\n<h5 id=\\\"phase-1-initial-mark-1\\\">Phase 1: Initial Mark</h5>\\n<p>这个阶段会标记所有<strong>GC Root</strong>能够摸到的对象，和CMS不同的是，CMS需要额外来一次大暂停，但是G1的这个阶段是捎带在撤离暂停之后的，所以它的开销非常小</p>\\n<h5 id=\\\"phase-2-root-region-scan\\\">Phase 2: Root Region Scan</h5>\\n<p>这个阶段会标记所有从<strong>Root Region</strong>能reach到的存活对象，比如说一些非空的区域，我们必须得在标记环节的中期就进行收集，因为如果我们在后面的<strong>并发标记</strong>阶段的时候进行对象移动的话，可能会造成一些不可控的问题，所以这个阶段会在下一次撤离暂停开始之前完成，如果撤离暂停得提前开始的话，它会提前终止正在进行的<strong>Root Region Scan</strong>，然后等这次撤离暂停结束</p>\\n<p>在现在的实现中，Root Region是Survivor区，它们属于年轻代区的一部分，并且下次撤离暂停中<strong>一定会被回收</strong></p>\\n<h5 id=\\\"phase-3-concurrent-mark\\\">Phase 3: Concurrent Mark</h5>\\n<p>这个阶段和CMS中的非常相似，它仅仅是简单地过一遍对象图，然后在一个专门的比特图中标记上必要的对象</p>\\n<p>为了保证<strong>“事前快照（Snapshot-At-The-Beginning）”</strong>的出现，G1 GC要求对对象图的并发更新得是应用程序的线程来断开引用的时候才有效</p>\\n<p>要完成这个事情，还是要有一个<strong>预写屏障（pre-wirte barriers）</strong>,它的功能在于无论什么时候你要写一个数据，只要并发标记处于激活状态，它都会存储之前的引用关系在一个交日志流的地方</p>\\n<h5 id=\\\"phase-4-remark\\\">Phase 4: Remark</h5>\\n<p>这个之前的CMS的大暂停一样，在这个阶段最终完成标记工作</p>\\n<p>而对于G1来说，它会短暂地停止应用程序线程和停止并发更新日志流，并且做完日志流剩余的工作，然后标记完剩下的没有被标记的存活对象</p>\\n<p>这个阶段也会执行一些可选的清理回收工作，比如引用的处理和类的卸载</p>\\n<h5 id=\\\"phase-5-cleanup\\\">Phase 5: Cleanup</h5>\\n<p>最后一个阶段为即将到来的撤离暂停做准备，对堆内存中所有的存活对象进行计数，并且将这些区域按照期望的GC效率高低进行排序，它还会做一些内部工作比如标记一些内部状态，为了下一次的并发标记做准备</p>\\n<p>最后再提一点，包含非存活对象的区域在这个阶段都会被清理掉，但是这个阶段中有些部分是并发的比如说回收一些空区域和一些活跃度比较高的区域；也会有要求大暂停的区域</p>\\n<h4 id=\\\"evacuation-pause-mixd\\\">Evacuation Pause: Mixd</h4>\\n<p>理想的情况下，可能在并发Cleanup阶段就已经把老年代区域对象都清理掉了，但也不会100%都这样</p>\\n<p>在并发标记完全完成的时候，G1收集器会安排一次<strong>混合收集（mix collection）</strong>，它不仅收集年轻代的垃圾，它还收集老年代的垃圾</p>\\n<p>一次针对两个区域的撤离暂停并不总是马上就在并发标记完成之后就开始，而是有一定的规则的，比如说如果这时候有可能一次性就清理掉大部分的老年区中的对象的话，那么就可以触发这个</p>\\n<p>所以在并发标记和混合撤离暂停之间，很可能会有一次针对年轻代的撤离暂停</p>\\n<p>需要被加入到回收集合的老年代对象的准确数量，以及它们被添加的准确顺序，也都是根据选好的规则来定的，这些规则正是<strong>软实时（<em>soft real-time</em>）</strong>机制为程序定制的目标，比如活跃度、并发标记过程中判定为有效GC的地方还有一些JVM的配置指标。所以这个过程和针对年轻代的撤离暂停过程没什么区别，只是它还包括老年代</p>\\n<p><strong>记忆集合（Remembered set）</strong>是允许来自不同堆区域的各自的回收结果，比如说：当回收集合中的对象有来自A、B、C三个区域的，于是我们必须知道这些对象是否有引用到D和E区域中的对象，并以此来判断它们的活跃度</p>\\n<p>但如果遍历整个堆区域的话，会比较麻烦，也会毁掉我们设置回收集合的意义，于是JVM采用了一个方法，它和之前说过的<strong>卡区域（card-table）</strong>有点类似，所以在G1里面和它对应的就是<strong>记忆集合（Remembered set）</strong></p>\\n<p>和下图展示的一样：每个区域都有一个列出<strong>指向这个区域的引用</strong>的列表作为记忆集合在旁边，这些引用会被认为是可选的<strong>GC Root</strong>，需要注意的是，在并发标记阶段被视为垃圾的老年区对象不会被列入这个记忆集合中，即使有外部引用指向它们，因为在这样的情况下，这些外部引用也已经被标记为垃圾了</p>\\n<p><img src=\\\"https://plumbr.io/app/uploads/2016/01/g1-03.png\\\" alt=\\\"Mixed Evacuation Pause: beginning\\\"></p>\\n<p>接下来发生的事情就比较简单了：GCor们决定哪些对象是存活的，哪些对象是垃圾</p>\\n<p><img src=\\\"https://plumbr.io/app/uploads/2016/01/g1-04.png\\\" alt=\\\"Mixed Evacuation Pause: determining live objects\\\"></p>\\n<p>最后，存活下来的对象会被移动到survivor区域，清空出来的新区域又会重新投入一些对象进去</p>\\n<p><img src=\\\"https://plumbr.io/app/uploads/2016/01/g1-05-v2.png\\\" alt=\\\"g1-05-v2\\\"></p>\\n<p>为了维护一个记忆集合，<strong>后写屏障（post-write barrier）</strong>会在一个数据被写入的时候出现。如果一个跨区域引用关系出现了，有关系的引用之间会被记录在各自的记忆集合中。为了减少这个写屏障的开销，放置记录在记忆集合中的这个过程是异步的，并且还有其他的优化功能</p>\\n<p>但归结起来就是写屏障会在写数据的时候往本地缓存中放置一个<strong>脏卡（dirty card）</strong>，脏卡的概念可以结合之前说的，然后特定的GC线程会找到这个卡然后将之记录在相关的记忆集合中</p>\\n<h4 id=\\\"summary\\\">Summary</h4>\\n<p>我们应该给出一个充分又基本的认识给G1，虽然还有很多细节没有提到过比如对<a href=\\\"https://plumbr.io/handbook/gc-tuning-in-practice#humongous-allocations\\\">大量堆积的对象</a>的处理，但是总和所有东西而言，G1是<strong>HotSpot</strong>里非常有技术含量的并且充分为生产环境而准备的收集器，在这之中，还是归功于HotSpot工程师们对它不留面子地进行无情优化，为了让新版本的Java不至于一丶东西都拿不出手</p>\\n<p>看了这么多下来我们发现，G1解决了CMS的大部分问题，从暂停可预测性开始到堆内存的碎片，它让用户不再受CPU组合的限制，虽然它对一些特定操作的延迟非常敏感，但这并不妨碍它称为HotSpot用户最好的选择，尤其是更新版本的Java用户</p>\\n<p>然而这些针对延迟而进行的优化还是需要相应代价的，G1的写屏障对吞吐量开销来说是一个大头，它还会增加更多的后台线程，所以如果程序主要是做吞吐量工作的或者100%吃满CPU性能的并且完全不关心延迟的话，还是选择CMS更好一点</p>\\n\";","export default \"<h3 id=\\\"preface\\\">Preface</h3>\\n<p>Prime number is important for computer science, especially in cryptography such as <a href=\\\"https://en.wikipedia.org/wiki/Public-key_cryptography\\\">public-key cryptography</a>, which relies on the difficulty of <a href=\\\"https://en.wikipedia.org/wiki/Integer_factorization\\\">factoring</a> large numbers into their prime factors.</p>\\n<p>So I planed to summarize some concepts and algorithm of prime number.</p>\\n<h3 id=\\\"basic-concepts\\\">Basic Concepts</h3>\\n<h4 id=\\\"prime-numbercomposite-number\\\">Prime number/Composite number</h4>\\n<p>A <strong>prime number</strong> (or a <strong>prime</strong>) is a <a href=\\\"https://en.wikipedia.org/wiki/Natural_number\\\">natural number</a> greater than 1 that cannot be formed by multiplying two smaller natural numbers.</p>\\n<p>A natural number greater than 1 that is not prime is called a <a href=\\\"https://en.wikipedia.org/wiki/Composite_number\\\">composite number</a>.</p>\\n<p>For exmple, 5 is a prime number because it can only be divided by 1 and 5 itself, but 6 can be divided by 1, 6, 2, 3.</p>\\n<h4 id=\\\"factor-numberdivisor-number\\\">Factor Number/Divisor number</h4>\\n<p>In <a href=\\\"https://en.wikipedia.org/wiki/Mathematics\\\">mathematics</a>, a <strong>divisor</strong> of an <a href=\\\"https://en.wikipedia.org/wiki/Integer\\\">integer</a><strong><em>n</em></strong>, also called a <strong>factor</strong> of <strong><em>n</em></strong>, is an integer**<em>m</em>** that may be multiplied by some integer to produce**<em>n</em>**.</p>\\n<p>In this case, one also says that**<em>n</em>** is a <strong>multiple</strong> of <strong><em>m</em></strong>. An integer**<em>n</em>** is <strong>divisible</strong> by another integer**<em>m</em>** if**<em>m</em>** is a divisor of**<em>n</em><strong>; this implies dividing</strong><em>n</em>** by**<em>m</em>** leaves no remainder.</p>\\n<p>7 can be divided by 2 and 3 but leaves 1 as remainder.</p>\\n<p>6 can be divided by 2 and 3 but leaves 0 as remainder.</p>\\n<h4 id=\\\"primality-test\\\">Primality test</h4>\\n<p>A simple but slow method of checking the primality of a given number <strong><em>n</em></strong>, called <a href=\\\"https://en.wikipedia.org/wiki/Trial_division\\\">trial division</a>, tests whether <strong><em>n</em></strong> is a multiple of any integer between 2 and <strong><em>√n</em></strong>. Faster algorithms include the <a href=\\\"https://en.wikipedia.org/wiki/Miller%E2%80%93Rabin_primality_test\\\">Miller–Rabin primality test</a>, which is fast but has a small chance of error, and the <a href=\\\"https://en.wikipedia.org/wiki/AKS_primality_test\\\">AKS primality test</a>, which always produces the correct answer in <a href=\\\"https://en.wikipedia.org/wiki/Polynomial_time\\\">polynomial time</a> but is too slow to be practical. Particularly fast methods are available for numbers of special forms, such as <a href=\\\"https://en.wikipedia.org/wiki/Mersenne_number\\\">Mersenne numbers</a>. As of December 2018 the <a href=\\\"https://en.wikipedia.org/wiki/Largest_known_prime_number\\\">largest known prime number</a> has 24,862,048 <a href=\\\"https://en.wikipedia.org/wiki/Numerical_digit\\\">decimal digits</a>.</p>\\n<h4 id=\\\"interesting-fact-of-prime-number\\\">Interesting fact of prime number</h4>\\n<blockquote>\\n<p>From <a href=\\\"https://www.geeksforgeeks.org/prime-numbers/\\\">geeksforgeeks</a></p>\\n</blockquote>\\n<ol>\\n<li><p>Two is the only even Prime number.</p>\\n</li>\\n<li><p>Every prime number can represented in form of 6n+1 or 6n-1 except 2 and 3, where n is natural number.</p>\\n</li>\\n<li><p>Two and Three are only two consecutive natural numbers which are prime too.</p>\\n</li>\\n<li><p><a href=\\\"https://en.wikipedia.org/wiki/Goldbach&#39;s_conjecture\\\">Goldbach Conjecture: </a>Every even integer greater than 2 can be expressed as the sum of two primes.</p>\\n</li>\\n<li><p>Wilson Theorem: Wilson’s theorem states that a natural number p &gt; 1 is a prime number if and only if</p>\\n<pre><code>    (p - 1) ! ≡  -1   mod p\\nOR  (p - 1) ! ≡  (p-1) mod p\\n</code></pre>\\n</li>\\n<li><p>Fermat’s Little Theorem: If n is a prime number, then for every a, 1 &lt;= a &lt; n,</p>\\n<pre><code>an-1 ≡ 1 (mod n)\\n OR\\nan-1 % n = 1\\n</code></pre>\\n</li>\\n<li><p><a href=\\\"https://en.wikipedia.org/wiki/Prime_number_theorem\\\">Prime Number Theorem</a> : The probability that a given, randomly chosen number n is prime is inversely proportional to its number of digits, or to the logarithm of n.</p>\\n</li>\\n<li><p><a href=\\\"https://www.geeksforgeeks.org/lemoines-conjecture/\\\">Lemoine’s Conjecture</a> : Any odd integer greater than 5 can be expressed as a sum of an odd prime (all primes other than 2 are odd) and an even semiprime. A semiprime number is a product of two prime numbers. This is called Lemoine’s conjecture.</p>\\n</li>\\n<li><p><strong>There is no known efficient formula for primes. However, there are numerous expressions that do encode all primes, or only primes.</strong></p>\\n</li>\\n</ol>\\n<h3 id=\\\"primality-test-1\\\">Primality Test</h3>\\n<h4 id=\\\"trial-division---o√n\\\">Trial division - O(√n)</h4>\\n<p>The simplest primality test is <em><a href=\\\"https://en.wikipedia.org/wiki/Trial_division\\\">trial division</a></em>: Given an input number <em>n</em>, check whether any prime integer <em>m</em> from 2 to <strong><em>√n</em></strong> evenly <a href=\\\"https://en.wikipedia.org/wiki/Divisibility\\\">divides</a> <em>n</em> (the division leaves no <a href=\\\"https://en.wikipedia.org/wiki/Remainder\\\">remainder</a>). If <em>n</em> is divisible by any <em>m</em> then <em>n</em> is <a href=\\\"https://en.wikipedia.org/wiki/Composite_number\\\">composite</a>, otherwise it is <a href=\\\"https://en.wikipedia.org/wiki/Prime_number\\\">prime</a>.</p>\\n<p>Example coded with python:</p>\\n<pre><code class=\\\"hljs language-python\\\"><span class=\\\"hljs-keyword\\\">def</span> <span class=\\\"hljs-title function_\\\">trialdivision</span>(<span class=\\\"hljs-params\\\">n</span>):\\n    <span class=\\\"hljs-keyword\\\">if</span> (n &lt;= <span class=\\\"hljs-number\\\">1</span>):\\n        <span class=\\\"hljs-keyword\\\">return</span> <span class=\\\"hljs-literal\\\">False</span>\\n    <span class=\\\"hljs-keyword\\\">else</span>:\\n        count = <span class=\\\"hljs-number\\\">2</span>\\n        <span class=\\\"hljs-keyword\\\">while</span> count * count &lt;= n:\\n            <span class=\\\"hljs-keyword\\\">if</span> n % count == <span class=\\\"hljs-number\\\">0</span>:\\n                <span class=\\\"hljs-keyword\\\">return</span> <span class=\\\"hljs-literal\\\">False</span>\\n            count = count + <span class=\\\"hljs-number\\\">1</span>\\n        <span class=\\\"hljs-keyword\\\">return</span> <span class=\\\"hljs-literal\\\">True</span>\\n</code></pre>\\n<h4 id=\\\"optimized-solution---o√n\\\">Optimized solution - O(√n)</h4>\\n<p>Based on the fact that <strong>every prime number can represented in form of 6k+1 or 6k-1 except 2 and 3</strong>, where n is natural number.</p>\\n<pre><code class=\\\"hljs language-python\\\"><span class=\\\"hljs-keyword\\\">def</span> <span class=\\\"hljs-title function_\\\">sixkopt</span>(<span class=\\\"hljs-params\\\">n</span>):\\n    <span class=\\\"hljs-keyword\\\">if</span> n &lt;= <span class=\\\"hljs-number\\\">1</span>:\\n        <span class=\\\"hljs-keyword\\\">return</span> <span class=\\\"hljs-literal\\\">False</span>\\n    <span class=\\\"hljs-keyword\\\">if</span> n &lt;= <span class=\\\"hljs-number\\\">3</span>:\\n        <span class=\\\"hljs-keyword\\\">return</span> <span class=\\\"hljs-literal\\\">True</span>\\n    <span class=\\\"hljs-keyword\\\">if</span> n % <span class=\\\"hljs-number\\\">2</span> == <span class=\\\"hljs-number\\\">0</span> <span class=\\\"hljs-keyword\\\">or</span> n % <span class=\\\"hljs-number\\\">3</span> == <span class=\\\"hljs-number\\\">0</span>:\\n        <span class=\\\"hljs-keyword\\\">return</span> <span class=\\\"hljs-literal\\\">False</span>\\n\\n    <span class=\\\"hljs-comment\\\"># starts from 5 because 4 is composite number</span>\\n    k = <span class=\\\"hljs-number\\\">5</span>\\n    <span class=\\\"hljs-keyword\\\">while</span> k * k &lt;= n:\\n        <span class=\\\"hljs-keyword\\\">if</span> n % (k) == <span class=\\\"hljs-number\\\">0</span> <span class=\\\"hljs-keyword\\\">or</span> n % (k + <span class=\\\"hljs-number\\\">2</span>) == <span class=\\\"hljs-number\\\">0</span>:\\n            <span class=\\\"hljs-keyword\\\">return</span> <span class=\\\"hljs-literal\\\">False</span>\\n        k = k + <span class=\\\"hljs-number\\\">6</span>\\n    <span class=\\\"hljs-keyword\\\">return</span> <span class=\\\"hljs-literal\\\">True</span>\\n</code></pre>\\n<h4 id=\\\"sieve-of-eratosthenes\\\">Sieve of Eratosthenes</h4>\\n<img src=\\\"../../../public/img/Sieve_of_Eratosthenes_animation.gif\\\" style=\\\"clear:right;float:right;margin-left:1rem;\\\">\\n\\n<p>In <a href=\\\"https://en.wikipedia.org/wiki/Mathematics\\\">mathematics</a>, the <strong>sieve of Eratosthenes</strong> is an ancient <a href=\\\"https://en.wikipedia.org/wiki/Algorithm\\\">algorithm</a> for finding all <a href=\\\"https://en.wikipedia.org/wiki/Prime_number\\\">prime numbers</a> up to any given limit.</p>\\n<p>It does so by iteratively marking as <a href=\\\"https://en.wikipedia.org/wiki/Composite_number\\\">composite</a> (i.e., not prime) the multiples of each prime, starting with the first prime number, 2. The multiples of a given prime are generated as a sequence of numbers starting from that prime, with <a href=\\\"https://en.wikipedia.org/wiki/Arithmetic_progression\\\">constant difference between them</a> that is equal to that prime. This is the sieve&#39;s key distinction from using <a href=\\\"https://en.wikipedia.org/wiki/Trial_division\\\">trial division</a> to sequentially test each candidate number for divisibility by each prime.</p>\\n<p>The earliest known reference to the sieve (<a href=\\\"https://en.wikipedia.org/wiki/Ancient_Greek_language\\\">Ancient Greek</a>: κόσκινον Ἐρατοσθένους, <em>kóskinon Eratosthénous</em>) is in <a href=\\\"https://en.wikipedia.org/wiki/Nicomachus\\\">Nicomachus of Gerasa</a>&#39;s <em><a href=\\\"https://en.wikipedia.org/wiki/Introduction_to_Arithmetic\\\">Introduction to Arithmetic</a></em>, which describes it and attributes it to <a href=\\\"https://en.wikipedia.org/wiki/Eratosthenes\\\">Eratosthenes of Cyrene</a>, a <a href=\\\"https://en.wikipedia.org/wiki/Greek_mathematics\\\">Greek mathematician</a>.</p>\\n<p>One of a number of <a href=\\\"https://en.wikipedia.org/wiki/Generating_primes#Prime_sieves\\\">prime number sieves</a>, it is one of the most efficient ways to find all of the smaller primes. It may be used to find primes in <a href=\\\"https://en.wikipedia.org/wiki/Arithmetic_progression\\\">arithmetic progressions</a>.</p>\\n<p>To find all the prime numbers less than or equal to 30, proceed as follows.</p>\\n<p>First, generate a list of integers from 2 to 30:</p>\\n<p>2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30</p>\\n<p>The first number in the list is 2; cross out every 2nd number in the list after 2 by counting up from 2 in increments of 2 (these will be all the multiples of 2 in the list):</p>\\n<p>2 3 <del>4</del> 5 <del>6</del> 7 <del>8</del> 9 <del>10</del> 11 <del>12</del> 13 <del>14</del> 15 <del>16</del> 17 <del>18</del> 19 <del>20</del> 21 <del>22</del> 23 <del>24</del> 25 <del>26</del> 27 <del>28</del> 29 <del>30</del></p>\\n<p>The next number in the list after 2 is 3; cross out every 3rd number in the list after 3 by counting up from 3 in increments of 3 (these will be all the multiples of 3 in the list):</p>\\n<p>2 3 <del>4</del> 5 <del>6</del> 7 <del>8</del> <del>9</del> <del>10</del> 11 <del>12</del> 13 <del>14</del> <del>15</del> <del>16</del> 17 <del>18</del> 19 <del>20</del> <del>21</del> <del>22</del> 23 <del>24</del> 25 <del>26</del> <del>27</del> <del>28</del> 29 <del>30</del></p>\\n<p>The next number not yet crossed out in the list after 3 is 5; cross out every 5th number in the list after 5 by counting up from 5 in increments of 5 (i.e. all the multiples of 5):</p>\\n<p>2 3 <del>4</del> 5 <del>6</del> 7 <del>8</del> <del>9</del> <del>10</del> 11 <del>12</del> 13 <del>14</del> <del>15</del> <del>16</del> 17 <del>18</del> 19 <del>20</del> <del>21</del> <del>22</del> 23 <del>24</del> <del>25</del> <del>26</del> <del>27</del> <del>28</del> 29 <del>30</del></p>\\n<p>The next number not yet crossed out in the list after 5 is 7; the next step would be to cross out every 7th number in the list after 7, but they are all already crossed out at this point, as these numbers (14, 21, 28) are also multiples of smaller primes <strong>because 7 × 7 is greater than 30</strong>. The numbers not crossed out at this point in the list are all the prime numbers below 30:</p>\\n<p>2 3 5 7 11 13 17 19 23 29</p>\\n<h5 id=\\\"implement---onloglogn\\\">Implement - O(nlog(log(n)))</h5>\\n<pre><code class=\\\"hljs language-python\\\"><span class=\\\"hljs-keyword\\\">def</span> <span class=\\\"hljs-title function_\\\">SieveOfEratosthenes</span>(<span class=\\\"hljs-params\\\">n</span>):\\n    <span class=\\\"hljs-comment\\\"># Create a boolean array &quot;prime[0..n]&quot; and initialize</span>\\n    <span class=\\\"hljs-comment\\\">#  all entries it as true. A value in prime[i] will</span>\\n    <span class=\\\"hljs-comment\\\"># finally be false if i is Not a prime, else true.</span>\\n    prime = [<span class=\\\"hljs-literal\\\">True</span> <span class=\\\"hljs-keyword\\\">for</span> i <span class=\\\"hljs-keyword\\\">in</span> <span class=\\\"hljs-built_in\\\">range</span>(n+<span class=\\\"hljs-number\\\">1</span>)]\\n    p = <span class=\\\"hljs-number\\\">2</span>\\n    <span class=\\\"hljs-keyword\\\">while</span> (p * p &lt;= n):\\n        <span class=\\\"hljs-comment\\\"># If prime[p] is not changed, then it is a prime</span>\\n        <span class=\\\"hljs-keyword\\\">if</span> (prime[p] == <span class=\\\"hljs-literal\\\">True</span>):\\n            <span class=\\\"hljs-comment\\\"># Update all multiples of p</span>\\n            <span class=\\\"hljs-keyword\\\">for</span> i <span class=\\\"hljs-keyword\\\">in</span> <span class=\\\"hljs-built_in\\\">range</span>(p * p, n+<span class=\\\"hljs-number\\\">1</span>, p):\\n                prime[i] = <span class=\\\"hljs-literal\\\">False</span>\\n        p += <span class=\\\"hljs-number\\\">1</span>\\n</code></pre>\\n<h3 id=\\\"application\\\">Application</h3>\\n<h4 id=\\\"prime-factor-decompositionprime-factorization\\\">Prime factor decomposition/Prime factorization</h4>\\n<p>Given a composite integer <strong><em>n</em></strong>, the task of providing one (or all) prime factors is referred to as <em>factorization</em> of <strong><em>n</em></strong>. It is significantly more difficult than primality testing, and although many factorization algorithms are known, they are slower than the fastest primality testing methods. Trial division and <a href=\\\"https://en.wikipedia.org/wiki/Pollard&#39;s_rho_algorithm\\\">Pollard&#39;s rho algorithm</a> can be used to find very small factors of <strong><em>n</em></strong>, and <a href=\\\"https://en.wikipedia.org/wiki/Elliptic_curve_factorization\\\">elliptic curve factorization</a> can be effective when <strong><em>n</em></strong> has factors of moderate size. Methods suitable for arbitrary large numbers that do not depend on the size of its factors include the <a href=\\\"https://en.wikipedia.org/wiki/Quadratic_sieve\\\">quadratic sieve</a> and <a href=\\\"https://en.wikipedia.org/wiki/General_number_field_sieve\\\">general number field sieve</a>.</p>\\n<p>As with primality testing, there are also factorization algorithms that require their input to have a special form, including the <a href=\\\"https://en.wikipedia.org/wiki/Special_number_field_sieve\\\">special number field sieve</a>. As of December 2019 the <a href=\\\"https://en.wikipedia.org/wiki/Integer_factorization_records\\\">largest number known to have been factored</a> by a general-purpose algorithm is <a href=\\\"https://en.wikipedia.org/wiki/RSA-240\\\">RSA-240</a>, which has 240 decimal digits (795 bits) and is the product of two large primes.</p>\\n<p>Several <a href=\\\"https://en.wikipedia.org/wiki/Public-key_cryptography\\\">public-key cryptography</a> algorithms, such as <a href=\\\"https://en.wikipedia.org/wiki/RSA_(algorithm)\\\">RSA</a> and the <a href=\\\"https://en.wikipedia.org/wiki/Diffie%E2%80%93Hellman_key_exchange\\\">Diffie–Hellman key exchange</a>, are based on large prime numbers (2048-<a href=\\\"https://en.wikipedia.org/wiki/Bit\\\">bit</a> primes are common).</p>\\n<p>RSA relies on the assumption that it is much easier (that is, more efficient) to perform the multiplication of two (large) numbers <strong><em>x</em></strong> and <strong><em>y</em></strong> than to calculate <strong><em>x</em></strong> and <strong><em>y</em></strong> (assumed <a href=\\\"https://en.wikipedia.org/wiki/Coprime\\\">coprime</a>) if only the product is known. The Diffie–Hellman key exchange relies on the fact that there are efficient algorithms for <a href=\\\"https://en.wikipedia.org/wiki/Modular_exponentiation\\\">modular exponentiation</a> (computing <strong><em>a^b mod c</em></strong>), while the reverse operation (the <a href=\\\"https://en.wikipedia.org/wiki/Discrete_logarithm\\\">discrete logarithm</a>) is thought to be a hard problem.</p>\\n<p>Prime numbers are frequently used for <a href=\\\"https://en.wikipedia.org/wiki/Hash_table\\\">hash tables</a>. For instance the original method of Carter and Wegman for <a href=\\\"https://en.wikipedia.org/wiki/Universal_hashing\\\">universal hashing</a> was based on computing <a href=\\\"https://en.wikipedia.org/wiki/Hash_function\\\">hash functions</a> by choosing random <a href=\\\"https://en.wikipedia.org/wiki/Linear_function\\\">linear functions</a> modulo large prime numbers. Carter and Wegman generalized this method to <a href=\\\"https://en.wikipedia.org/wiki/K-independent_hashing\\\"><strong><em>k</em></strong>-independent hashing</a> by using higher-degree polynomials, again modulo large primes. As well as in the hash function, prime numbers are used for the hash table size in <a href=\\\"https://en.wikipedia.org/wiki/Quadratic_probing\\\">quadratic probing</a> based hash tables to ensure that the probe sequence covers the whole table.</p>\\n<h3 id=\\\"reference\\\">Reference</h3>\\n<p><a href=\\\"https://www.geeksforgeeks.org/prime-numbers/\\\">https://www.geeksforgeeks.org/prime-numbers/</a></p>\\n<p><a href=\\\"https://en.wikipedia.org/wiki/Prime_number\\\">https://en.wikipedia.org/wiki/Prime_number</a></p>\\n<p><a href=\\\"https://en.wikipedia.org/wiki/Primality_test\\\">https://en.wikipedia.org/wiki/Primality_test</a></p>\\n<p><a href=\\\"https://en.wikipedia.org/wiki/Sieve_of_Eratosthenes\\\">https://en.wikipedia.org/wiki/Sieve_of_Eratosthenes</a></p>\\n\";","export default \"<p><em>自接触计算机编程以来，无数次碰到过这个名词“正则表达式”，刚开始肯定是不懂，但是听到“表达式”三个字就发现事情并不简单。</em></p>\\n<!-- more -->\\n\\n<p>第一次接触到它还是在我进NTJ2EE的招新机试的时候，机试题有一道题：“有一个字符串，其中包含中文字符、英文字符和数字字符，请统计和打印出各个字符的个数。”，当时只会用取字符对照ascii的方法来做这道题，然后正好学长看了我的做法，他说还有种东西叫做“正则表达式”，然后他给我打开了在线的JDK-1.6的API，找到了里面介绍正则表达式的页，然后还百度了一篇正则表达式的教程给我看（对，就是那个通篇斜杠写反的那盘），然后我就头皮发麻了。</p>\\n<p>在之后无论是正式学习还是运用到实际当中，我的处理都是：百度——ctrl+c——ctrl+v，然后下次碰到另一个字符串处理问题的时候还是这样做，毫无意义，甚至还不能完全匹配我的应用场景。然后这次的工程中心项目，我负责写前端，对输入框需要用到字符串过滤的需求，就这么简单的一个功能我都实现不了，感觉非常丢人，我不想再复制粘贴了，所以开始以blog的形式记录我学习<code>regular-expression</code>的过程。</p>\\n<p><strong>所有笔记的学习都基于：《Mastering Regular Expression(Third Edition)》——Jeffrey E. F. Friedl一书的中文版</strong></p>\\n<hr>\\n<h3 id=\\\"释义与场景\\\">释义与场景</h3>\\n<h4 id=\\\"释义\\\">释义</h4>\\n<p>首先我们来看看<code>Regular Expression</code>这两个单词</p>\\n<p>Regular：</p>\\n<blockquote>\\n<p><em>adj.</em> 定期的；有规律的；合格的；整齐的；普通的</p>\\n<p><em>n.</em> 常客；正式队员；中坚分子</p>\\n<p><em>adv.</em> 定期地；经常地</p>\\n</blockquote>\\n<p>Expression：</p>\\n<blockquote>\\n<p><em>n.</em> 表现，表示，表达；表情，脸色，态度，强调，声调；式，符号；语句，措辞，说法</p>\\n</blockquote>\\n<p>毫无疑问，在编程领域里面<code>Regular Expression</code>的含义肯定不会是“整齐的脸色”或者“中坚分子措辞”这样的翻译了，从字面意义上去翻译的话应该是“有规律的表达式”，因为起码听上去像个数学公式，和计算机有点关联- -。这可比“正则表达式”这样的翻译明了多了，但是后者更有逼格一点。</p>\\n<h4 id=\\\"场景\\\">场景</h4>\\n<p>搞清楚公式的定义，那么接下来我们就可以开始解题了😄。</p>\\n<p>我们为什么会用到正则表达式？需求源于我们需要在一大段不规则的文本中找出是否含有符合我们规律的表达式的句子，这就叫做使用正则表达式去匹配我们的文本。比如一般editor所具有的find功能，就是一种文本匹配功能。</p>\\n<p>但是在我们写程序的过程中，你的程序代码是不可能给一个find按钮给你去匹配文本的，而且你可能会需要更复杂的文本匹配功能，比如说“匹配所有xxx-xxxxxxxxxxx这种格式的手机号码”这样的精准匹配就需要你构建表述清晰的正则表达式去完成匹配功能。</p>\\n<p>一旦你精准的find到你想要匹配的子文本之后，你想干嘛都行，提取、删除、替换、添加等等。这就是正则表达式的应用场景。</p>\\n<hr>\\n\";","export default \"<h3 id=\\\"前言\\\">前言</h3>\\n<p>一周前考完了计算机网络，不得不说，计算机网络确实是一个精妙而繁杂的体系产物，虽然民大的考试都很水，但是计网这门课我是认认真真复习好了的，并不是当作考试去复习，每个点都看了，书上的课后习题都大概刷了 80%（谢希仁前辈出的这本书，习题量很多），基本上每个点都吃透了一遍。</p>\\n<p>虽然后面还有两门考试，但很容易就过，也不需要准备，主要的复习科目也考完了，所以趁热打铁，马上进行计网的笔记整理和复习。</p>\\n<p>因为学时有限，学校上的课程只教到第五章运输层，后面的没教，我准备先把前五章的笔记都整理下来，再继续看后面的内容，看完再整理。</p>\\n<p>所以这一系列的笔记也是按照谢希仁前辈的《计算机网络》第七版的内容顺序整理的<strong>（可能会跳一些顺序，可能会改一些章节标题）</strong>。</p>\\n<p>本来想的只是按需记录，但是觉得还是要对得起自己的劳动，所以这一系列的笔记等于是考试重点笔记，意思是事无巨细的都记下来，甚至把课本后的习题解答（自己的解答）都记录下来。</p>\\n<h3 id=\\\"chapter1-概述\\\">Chapter1-概述</h3>\\n<h4 id=\\\"11-计算机网络与信息时代\\\">1.1 计算机网络与信息时代</h4>\\n<h5 id=\\\"internet\\\">Internet</h5>\\n<p>（1）因特网（旧译）</p>\\n<p>（2）<strong>互联网：</strong>这个翻译是最流行最被接受的。Internet 是<strong>由数量极大的各种计算机网络互连起来的网络的统称。</strong></p>\\n<h5 id=\\\"互联网提供的服务\\\">互联网提供的服务</h5>\\n<ul>\\n<li><strong>连通性：</strong>互联网用户无论地域距离有多远，在互联网上都可以<strong>非常便捷、非常经济地交换各种信息</strong>，<strong>好像</strong>这些用户终端彼此直接连通一样。</li>\\n<li><strong>共享：</strong>指资源共享，可以是信息共享、软件共享，也可以是硬件共享。由于网络的存在，<strong>好像</strong>这些资源就在用户身边一样可以直接使用。</li>\\n</ul>\\n<h4 id=\\\"12-互联网概述\\\">1.2 互联网概述</h4>\\n<h5 id=\\\"121-网络的网络\\\">1.2.1 网络的网络</h5>\\n<h6 id=\\\"计算机网络\\\">计算机网络</h6>\\n<p>简称为网络，由若干<strong>结点（node）</strong>和连接在这些结点的<strong>链路（link）</strong>组成。网络中的结点可以是计算机、集线器、交换机或路由器等。</p>\\n<h6 id=\\\"互联网\\\">互联网</h6>\\n<p>上述的网络还可以通过<strong>路由器</strong>互连起来，这样就构成了一个覆盖范围更大的计算机网络，这样的网络称为<strong>互联网</strong>，这也是<strong>“网络的网络”</strong>说法来源。</p>\\n<h5 id=\\\"122-互联网发展的三个阶段\\\">1.2.2 互联网发展的三个阶段</h5>\\n<ol>\\n<li>单个网络<strong>ARPANET</strong>向互联网发展的过程，主要解决多网络互联的问题。</li>\\n<li><strong>三级结构的互联网</strong>，分为主干网、地区网、校园网（企业网）。</li>\\n<li>多层次的 ISP 结构互联网。</li>\\n</ol>\\n<p><img src=\\\"../../../public/img/TIM%E6%88%AA%E5%9B%BE20180630122733.png\\\" alt=\\\"\\\"></p>\\n<h6 id=\\\"isp\\\">ISP</h6>\\n<p>互联网服务提供者，提供商，在国内，中国移动、联通电信就是 ISP。ISP 可以从互联网管理机构申请到很多<strong>IP 地址</strong>，同时拥有<strong>通信线路</strong>以及<strong>路由器</strong>等联网设备。个人用户需要向 ISP 付费获取提供的 IP 地址，<strong>持有 IP 地址才可以接入互联网</strong>，也就是我们说的“上网”。</p>\\n<p>ISP 也分层次：主干 ISP、地区 ISP、本地 ISP。</p>\\n<h6 id=\\\"主干-isp\\\">主干 ISP</h6>\\n<p>由几个专门的公司创建和维持，服务面积大，一般能够覆盖到国家范围，并且拥有高速主干网，地区 ISP 可以直接和主干 ISP 相连。</p>\\n<h6 id=\\\"地区-isp\\\">地区 ISP</h6>\\n<p>较小的 ISP，通常几个地区 ISP 通过一个主干 ISP 相连。</p>\\n<h6 id=\\\"本地-isp\\\">本地 ISP</h6>\\n<p>本地 ISP 直接给用户提供服务，本地 ISP 可以连接到地区也可以连接到主干。绝大多数用户是直接连到本地 ISP 的。</p>\\n<h6 id=\\\"ixp\\\">IXP</h6>\\n<p>为了提高转发分组的效率，以及如何更有效得利用网络资源，<strong>互联网交换点（Internet eXchange Point，IXP）</strong>应运而生。IXP 允许两个网络直接相连并交换分组，而不需要通过第三个网络来转发分组。</p>\\n<h4 id=\\\"13-互联网组成\\\">1.3 互联网组成</h4>\\n<p>（1）边缘部分：由所有连接在互联网上的主机组成。这部分是用户直接使用的，用来进行通信和资源共享。</p>\\n<p>（2）核心部分：由大量网络和连接这些网络的路由器组成。这部分是<strong>为边缘部分提供服务的（连通性和交换）。</strong></p>\\n<p><img src=\\\"../../../public/img/TIM%E6%88%AA%E5%9B%BE20180630125027.png\\\" alt=\\\"\\\"></p>\\n<h5 id=\\\"131-边缘部分\\\">1.3.1 边缘部分</h5>\\n<p>边缘部分指的是用户使用的主机，这些主机又称为端系统。需要明确一个观点：我们说<strong>“主机 A 和主机 B 在通信”</strong>实际上说的是<strong>“运行在主机 A 上的某程序和运行在主机 B 上的某程序在通信”</strong>。计算机之间的通讯通常可分为两大类：客户-服务器方式（C/S 方式）和对等方式（P2P 方式）。</p>\\n<h6 id=\\\"cs-和-p2p-的区别\\\">C/S 和 P2P 的区别</h6>\\n<p>C/S 里：<strong>客户是服务请求方，服务器是服务提供方。</strong>而 P2P 方式，两端<strong>既是请求方也是服务方。</strong></p>\\n<h5 id=\\\"132-核心部分和分组交换（packet-switching）\\\">1.3.2 核心部分和分组交换（packet switching）</h5>\\n<p>网络核心部分是互联网最复杂的地方，这里面起特殊作用的是<strong>路由器（router）</strong>，它是一种专用计算机（但并不是主机）。路由器是实现<strong>分组交换（packet switching）</strong>的关键构件，其任务是转发收到的分组，这是网络中最核心最重要的功能。我们先介绍电路交换的基本概念。</p>\\n<h6 id=\\\"电路交换\\\">电路交换</h6>\\n<p>以前的电话通讯是以电路交换作为交换方式的，从通信资源的分配角度上看，<strong>交换（switching）</strong>就是按照某种方式动态地分配传输线路的资源。</p>\\n<p>电路交换步骤：</p>\\n<ul>\\n<li>建立连接：建立一条专用的物理线路，并在释放之前一直占用该线路</li>\\n<li>通话：占用该线路</li>\\n<li>释放连接：归还通信资源</li>\\n</ul>\\n<p>特点：通话的时候，两端始终占用当前线路，线路传输效率<strong>（note：这里说传输线路的利用率更好）</strong>往往很低。</p>\\n<h6 id=\\\"分组交换\\\">分组交换</h6>\\n<p>分组交换采用<strong>存储转发</strong>技术，表示把一个报文划分为几个分组后再进行传送。把要发送的整块数据称为一个<strong>报文（message）</strong>，在发送报文之前，把较长的报文划分为一个个更小的等长数据段，在数据段的前面加上一些由必要控制信息组成的<strong>首部（header）</strong>，就构成了一个<strong>分组（packet）</strong>，分组又称为<strong>“包”</strong>，是在互联网中传送的数据单元。</p>\\n<p><img src=\\\"../../../public/img/TIM%E6%88%AA%E5%9B%BE20180630133525.png\\\" alt=\\\"\\\"></p>\\n<p>互联网中的网络通讯可不止分组交换这样简单，做成了分组之后，还需要路由器还需要进行<strong>存储转发</strong>，路由器收到一个分组之后，先暂时存储一下，检查其首部，查找转发表，按照首部中的目的地址，找到合适的接口转发出去，把分组交给下一个路由器。</p>\\n<p>这样一步步的，分组通过网络上的每一段由路由器或者其他结点隔开的链路，最终送到目的主机。</p>\\n<p>这里需要注意两点：</p>\\n<ul>\\n<li>段链路只是有分组在传递的时候才被占用，没分组传递的链路依然可以使用</li>\\n<li>路由器存储的只是分组，而不是整个报文，每个分组到了合适的时机就会被转发出去</li>\\n</ul>\\n<p>分组交换在传送数据之前不必先占用一条端到端的链路通信资源，互联网采用专门的措施，保证数据传送具有可靠性，当链路中某些阶段突然出现故障的时候，在各路由器中运行的路由选择协议可以自动找到合适的转发分组路径。</p>\\n<h6 id=\\\"三种方式的比较\\\">三种方式的比较</h6>\\n<p><img src=\\\"../../../public/img/TIM%E6%88%AA%E5%9B%BE20180630140639.png\\\" alt=\\\"\\\"></p>\\n<ul>\\n<li><strong>电路交换</strong><ul>\\n<li>优点：<ul>\\n<li>稳定、安全</li>\\n</ul>\\n</li>\\n<li>缺点：<ul>\\n<li>线路利用率低、有连接管理成本</li>\\n<li>适合大量数据连续传输</li>\\n</ul>\\n</li>\\n</ul>\\n</li>\\n<li><strong>分组交换</strong><ul>\\n<li>优点：<ul>\\n<li>线路利用率高、因为无连接，所以效率快</li>\\n<li>适合突发传输</li>\\n</ul>\\n</li>\\n<li>缺点：<ul>\\n<li>无连接、分组头部开销、转发有一定时延</li>\\n</ul>\\n</li>\\n</ul>\\n</li>\\n</ul>\\n<h4 id=\\\"16-计算机网络的性能\\\">1.6 计算机网络的性能</h4>\\n<h5 id=\\\"1-速率\\\">1. 速率</h5>\\n<p>计算机发出的信号都是离散信号，也就是数字形式的，比特（bit）来源于 binary digit，意思是一个“二进制数字”。网络技术中<strong>速率(SpeedRate)<strong>指的是</strong>数据的传送速率</strong>，它也称为<strong>数据率(DataRate)<strong>或者</strong>比特率(BitRate)<strong>，单位是 bit/s（比特每秒，有时也写为</strong>bps</strong>），当数据率高的时候，可以在 bit/s 前面加上一个字母。</p>\\n<ul>\\n<li>k bit/s = 10^3 bit/s（注意 k 是小写）</li>\\n<li>M = 10^6</li>\\n<li>G = 10^9</li>\\n<li>T = 10^12</li>\\n</ul>\\n<p>比如说，1Mbit/s 可以说是 1 秒中吐出 10^6 比特的数据，特别要注意的是，这里速率的 kMGT 和数据体积单位的 k（K）MGT 不一样，后者：</p>\\n<ul>\\n<li>1 k = 2^10 byte = 2^10 * 8 bit</li>\\n<li>1 M = 2^10 k = 2^20 byte</li>\\n<li>依此类推</li>\\n</ul>\\n<h5 id=\\\"2-带宽\\\">2. 带宽</h5>\\n<p>在计算机网络中，带宽用来表示网络中某<strong>通道</strong>传送数据的<strong>能力（也就是一种度量）</strong>，因此网络带宽表示在单位时间内网络中的某信道所能通过的<strong>“最高数据率”</strong>，这种意义的带宽的单位，就是数据率的单位 bit/s。</p>\\n<h5 id=\\\"3-吞吐量\\\">3. 吞吐量</h5>\\n<p>吞吐量（throughput）表示在单位时间内通过某个网络的实际的数据量。</p>\\n<h5 id=\\\"4-时延\\\">4. 时延</h5>\\n<p>（1）发送时延，是主机或者路由器发送数据帧所需要的时间，也就是从发送数据帧的第一个比特开始算起，到该帧的最后一个比特发送完毕所需要的时间。</p>\\n<p><span class=\\\"katex-display katexp\\\"><span class=\\\"katex-display\\\"><span class=\\\"katex\\\"><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.8889em;vertical-align:-0.1944em;\\\"></span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.13889em;\\\">T</span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.02778em;\\\">r</span><span class=\\\"mord mathnormal\\\">an</span><span class=\\\"mord mathnormal\\\">s</span><span class=\\\"mord mathnormal\\\">mi</span><span class=\\\"mord mathnormal\\\">ss</span><span class=\\\"mord mathnormal\\\">i</span><span class=\\\"mord mathnormal\\\">o</span><span class=\\\"mord mathnormal\\\">n</span><span class=\\\"mord mathnormal\\\">De</span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.01968em;\\\">l</span><span class=\\\"mord mathnormal\\\">a</span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.03588em;\\\">y</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2778em;\\\"></span><span class=\\\"mrel\\\">=</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2778em;\\\"></span></span><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:2.363em;vertical-align:-0.936em;\\\"></span><span class=\\\"mord\\\"><span class=\\\"mopen nulldelimiter\\\"></span><span class=\\\"mfrac\\\"><span class=\\\"vlist-t vlist-t2\\\"><span class=\\\"vlist-r\\\"><span class=\\\"vlist\\\" style=\\\"height:1.427em;\\\"><span style=\\\"top:-2.314em;\\\"><span class=\\\"pstrut\\\" style=\\\"height:3em;\\\"></span><span class=\\\"mord\\\"><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.05017em;\\\">B</span><span class=\\\"mord mathnormal\\\">i</span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.00773em;\\\">tR</span><span class=\\\"mord mathnormal\\\">a</span><span class=\\\"mord mathnormal\\\">t</span><span class=\\\"mord mathnormal\\\">e</span><span class=\\\"mopen\\\">(</span><span class=\\\"mord mathnormal\\\">bi</span><span class=\\\"mord mathnormal\\\">t</span><span class=\\\"mord\\\">/</span><span class=\\\"mord mathnormal\\\">s</span><span class=\\\"mclose\\\">)</span></span></span><span style=\\\"top:-3.23em;\\\"><span class=\\\"pstrut\\\" style=\\\"height:3em;\\\"></span><span class=\\\"frac-line\\\" style=\\\"border-bottom-width:0.04em;\\\"></span></span><span style=\\\"top:-3.677em;\\\"><span class=\\\"pstrut\\\" style=\\\"height:3em;\\\"></span><span class=\\\"mord\\\"><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.02778em;\\\">D</span><span class=\\\"mord mathnormal\\\">a</span><span class=\\\"mord mathnormal\\\">t</span><span class=\\\"mord mathnormal\\\">a</span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.05017em;\\\">B</span><span class=\\\"mord mathnormal\\\">i</span><span class=\\\"mord mathnormal\\\">t</span><span class=\\\"mord mathnormal\\\">L</span><span class=\\\"mord mathnormal\\\">e</span><span class=\\\"mord mathnormal\\\">n</span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.03588em;\\\">g</span><span class=\\\"mord mathnormal\\\">t</span><span class=\\\"mord mathnormal\\\">h</span><span class=\\\"mopen\\\">(</span><span class=\\\"mord mathnormal\\\">bi</span><span class=\\\"mord mathnormal\\\">t</span><span class=\\\"mclose\\\">)</span></span></span></span><span class=\\\"vlist-s\\\">​</span></span><span class=\\\"vlist-r\\\"><span class=\\\"vlist\\\" style=\\\"height:0.936em;\\\"><span></span></span></span></span></span><span class=\\\"mclose nulldelimiter\\\"></span></span></span></span></span></span></span></p>\\n<blockquote>\\n<p>数据帧长度 / 速率</p>\\n</blockquote>\\n<p>（2）传播时延，是电磁波在信道中传播一定距离需要花的时间。</p>\\n<p><span class=\\\"katex-display katexp\\\"><span class=\\\"katex-display\\\"><span class=\\\"katex\\\"><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.8889em;vertical-align:-0.1944em;\\\"></span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.13889em;\\\">P</span><span class=\\\"mord mathnormal\\\">ro</span><span class=\\\"mord mathnormal\\\">p</span><span class=\\\"mord mathnormal\\\">a</span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.03588em;\\\">g</span><span class=\\\"mord mathnormal\\\">a</span><span class=\\\"mord mathnormal\\\">t</span><span class=\\\"mord mathnormal\\\">i</span><span class=\\\"mord mathnormal\\\">o</span><span class=\\\"mord mathnormal\\\">n</span><span class=\\\"mord mathnormal\\\">De</span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.01968em;\\\">l</span><span class=\\\"mord mathnormal\\\">a</span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.03588em;\\\">y</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2778em;\\\"></span><span class=\\\"mrel\\\">=</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2778em;\\\"></span></span><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:2.363em;vertical-align:-0.936em;\\\"></span><span class=\\\"mord\\\"><span class=\\\"mopen nulldelimiter\\\"></span><span class=\\\"mfrac\\\"><span class=\\\"vlist-t vlist-t2\\\"><span class=\\\"vlist-r\\\"><span class=\\\"vlist\\\" style=\\\"height:1.427em;\\\"><span style=\\\"top:-2.314em;\\\"><span class=\\\"pstrut\\\" style=\\\"height:3em;\\\"></span><span class=\\\"mord\\\"><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.01968em;\\\">El</span><span class=\\\"mord mathnormal\\\">ec</span><span class=\\\"mord mathnormal\\\">t</span><span class=\\\"mord mathnormal\\\">Wa</span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.03588em;\\\">v</span><span class=\\\"mord mathnormal\\\">e</span><span class=\\\"mord mathnormal\\\">Sp</span><span class=\\\"mord mathnormal\\\">ee</span><span class=\\\"mord mathnormal\\\">d</span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.00773em;\\\">R</span><span class=\\\"mord mathnormal\\\">a</span><span class=\\\"mord mathnormal\\\">t</span><span class=\\\"mord mathnormal\\\">e</span><span class=\\\"mopen\\\">(</span><span class=\\\"mord mathnormal\\\">m</span><span class=\\\"mord\\\">/</span><span class=\\\"mord mathnormal\\\">s</span><span class=\\\"mclose\\\">)</span></span></span><span style=\\\"top:-3.23em;\\\"><span class=\\\"pstrut\\\" style=\\\"height:3em;\\\"></span><span class=\\\"frac-line\\\" style=\\\"border-bottom-width:0.04em;\\\"></span></span><span style=\\\"top:-3.677em;\\\"><span class=\\\"pstrut\\\" style=\\\"height:3em;\\\"></span><span class=\\\"mord\\\"><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.07153em;\\\">C</span><span class=\\\"mord mathnormal\\\">hann</span><span class=\\\"mord mathnormal\\\">e</span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.01968em;\\\">l</span><span class=\\\"mord mathnormal\\\">L</span><span class=\\\"mord mathnormal\\\">e</span><span class=\\\"mord mathnormal\\\">n</span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.03588em;\\\">g</span><span class=\\\"mord mathnormal\\\">t</span><span class=\\\"mord mathnormal\\\">h</span><span class=\\\"mopen\\\">(</span><span class=\\\"mord mathnormal\\\">m</span><span class=\\\"mclose\\\">)</span></span></span></span><span class=\\\"vlist-s\\\">​</span></span><span class=\\\"vlist-r\\\"><span class=\\\"vlist\\\" style=\\\"height:0.936em;\\\"><span></span></span></span></span></span><span class=\\\"mclose nulldelimiter\\\"></span></span></span></span></span></span></span></p>\\n<blockquote>\\n<p>信道长度 / 电磁波在信道上的传播速率</p>\\n</blockquote>\\n<p>还有两个时延需要知道</p>\\n<p>（3）处理时延，主机或者路由器在给帧做加工工作的时候，或者查找目的地接口的时候，需要的处理时间。</p>\\n<p>（4）排队时延，分组在网络传输中，要经过许多路由器，路由器一次处理的分组数量有限，一般会有一个排队机制，先来的先处理，后来的在队尾等候。</p>\\n<h5 id=\\\"5-时延带宽积（略）\\\">5. 时延带宽积（略）</h5>\\n<p><span class=\\\"katex-display katexp\\\"><span class=\\\"katex-display\\\"><span class=\\\"katex\\\"><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.8889em;vertical-align:-0.1944em;\\\"></span><span class=\\\"mord mathnormal\\\">De</span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.01968em;\\\">l</span><span class=\\\"mord mathnormal\\\">a</span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.03588em;\\\">y</span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.05017em;\\\">B</span><span class=\\\"mord mathnormal\\\">an</span><span class=\\\"mord mathnormal\\\">d</span><span class=\\\"mord mathnormal\\\">Wi</span><span class=\\\"mord mathnormal\\\">d</span><span class=\\\"mord mathnormal\\\">t</span><span class=\\\"mord mathnormal\\\">h</span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.13889em;\\\">P</span><span class=\\\"mord mathnormal\\\">ro</span><span class=\\\"mord mathnormal\\\">d</span><span class=\\\"mord mathnormal\\\">u</span><span class=\\\"mord mathnormal\\\">c</span><span class=\\\"mord mathnormal\\\">t</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2778em;\\\"></span><span class=\\\"mrel\\\">=</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2778em;\\\"></span></span><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.8889em;vertical-align:-0.1944em;\\\"></span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.13889em;\\\">T</span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.02778em;\\\">r</span><span class=\\\"mord mathnormal\\\">an</span><span class=\\\"mord mathnormal\\\">s</span><span class=\\\"mord mathnormal\\\">mi</span><span class=\\\"mord mathnormal\\\">ss</span><span class=\\\"mord mathnormal\\\">i</span><span class=\\\"mord mathnormal\\\">o</span><span class=\\\"mord mathnormal\\\">n</span><span class=\\\"mord mathnormal\\\">De</span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.01968em;\\\">l</span><span class=\\\"mord mathnormal\\\">a</span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.03588em;\\\">y</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2222em;\\\"></span><span class=\\\"mbin\\\">×</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2222em;\\\"></span></span><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.6944em;\\\"></span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.05017em;\\\">B</span><span class=\\\"mord mathnormal\\\">an</span><span class=\\\"mord mathnormal\\\">d</span><span class=\\\"mord mathnormal\\\">Wi</span><span class=\\\"mord mathnormal\\\">d</span><span class=\\\"mord mathnormal\\\">t</span><span class=\\\"mord mathnormal\\\">h</span></span></span></span></span></span></p>\\n<h5 id=\\\"6-往返时间-rtt\\\">6. 往返时间 RTT</h5>\\n<p>Round-Trip Time 是一个重要的指标，它代表了双向交互一次所需要的时间。比如，如果 A 向 B 发送数据，数据长度是 100MB，发送速率是 100 Mbit/s</p>\\n<p><span class=\\\"katex-display katexp\\\"><span class=\\\"katex-display\\\"><span class=\\\"katex\\\"><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.8889em;vertical-align:-0.1944em;\\\"></span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.13889em;\\\">T</span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.02778em;\\\">r</span><span class=\\\"mord mathnormal\\\">anmi</span><span class=\\\"mord mathnormal\\\">ss</span><span class=\\\"mord mathnormal\\\">i</span><span class=\\\"mord mathnormal\\\">o</span><span class=\\\"mord mathnormal\\\">n</span><span class=\\\"mord mathnormal\\\">De</span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.01968em;\\\">l</span><span class=\\\"mord mathnormal\\\">a</span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.03588em;\\\">y</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2778em;\\\"></span><span class=\\\"mrel\\\">=</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2778em;\\\"></span></span><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:2.0574em;vertical-align:-0.686em;\\\"></span><span class=\\\"mord\\\"><span class=\\\"mopen nulldelimiter\\\"></span><span class=\\\"mfrac\\\"><span class=\\\"vlist-t vlist-t2\\\"><span class=\\\"vlist-r\\\"><span class=\\\"vlist\\\" style=\\\"height:1.3714em;\\\"><span style=\\\"top:-2.314em;\\\"><span class=\\\"pstrut\\\" style=\\\"height:3em;\\\"></span><span class=\\\"mord\\\"><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.05017em;\\\">B</span><span class=\\\"mord mathnormal\\\">i</span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.00773em;\\\">tR</span><span class=\\\"mord mathnormal\\\">a</span><span class=\\\"mord mathnormal\\\">t</span><span class=\\\"mord mathnormal\\\">e</span></span></span><span style=\\\"top:-3.23em;\\\"><span class=\\\"pstrut\\\" style=\\\"height:3em;\\\"></span><span class=\\\"frac-line\\\" style=\\\"border-bottom-width:0.04em;\\\"></span></span><span style=\\\"top:-3.677em;\\\"><span class=\\\"pstrut\\\" style=\\\"height:3em;\\\"></span><span class=\\\"mord\\\"><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.02778em;\\\">D</span><span class=\\\"mord mathnormal\\\">a</span><span class=\\\"mord mathnormal\\\">t</span><span class=\\\"mord mathnormal\\\">a</span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.05017em;\\\">B</span><span class=\\\"mord mathnormal\\\">i</span><span class=\\\"mord mathnormal\\\">t</span><span class=\\\"mord mathnormal\\\">L</span><span class=\\\"mord mathnormal\\\">e</span><span class=\\\"mord mathnormal\\\">n</span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.03588em;\\\">g</span><span class=\\\"mord mathnormal\\\">t</span><span class=\\\"mord mathnormal\\\">h</span></span></span></span><span class=\\\"vlist-s\\\">​</span></span><span class=\\\"vlist-r\\\"><span class=\\\"vlist\\\" style=\\\"height:0.686em;\\\"><span></span></span></span></span></span><span class=\\\"mclose nulldelimiter\\\"></span></span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2778em;\\\"></span><span class=\\\"mrel\\\">=</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2778em;\\\"></span></span><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:2.2604em;vertical-align:-0.7693em;\\\"></span><span class=\\\"mord\\\"><span class=\\\"mopen nulldelimiter\\\"></span><span class=\\\"mfrac\\\"><span class=\\\"vlist-t vlist-t2\\\"><span class=\\\"vlist-r\\\"><span class=\\\"vlist\\\" style=\\\"height:1.4911em;\\\"><span style=\\\"top:-2.314em;\\\"><span class=\\\"pstrut\\\" style=\\\"height:3em;\\\"></span><span class=\\\"mord\\\"><span class=\\\"mord\\\">100</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2222em;\\\"></span><span class=\\\"mbin\\\">×</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2222em;\\\"></span><span class=\\\"mord\\\">1</span><span class=\\\"mord\\\"><span class=\\\"mord\\\">0</span><span class=\\\"msupsub\\\"><span class=\\\"vlist-t\\\"><span class=\\\"vlist-r\\\"><span class=\\\"vlist\\\" style=\\\"height:0.7401em;\\\"><span style=\\\"top:-2.989em;margin-right:0.05em;\\\"><span class=\\\"pstrut\\\" style=\\\"height:2.7em;\\\"></span><span class=\\\"sizing reset-size6 size3 mtight\\\"><span class=\\\"mord mtight\\\"><span class=\\\"mord mtight\\\">6</span></span></span></span></span></span></span></span></span></span></span><span style=\\\"top:-3.23em;\\\"><span class=\\\"pstrut\\\" style=\\\"height:3em;\\\"></span><span class=\\\"frac-line\\\" style=\\\"border-bottom-width:0.04em;\\\"></span></span><span style=\\\"top:-3.677em;\\\"><span class=\\\"pstrut\\\" style=\\\"height:3em;\\\"></span><span class=\\\"mord\\\"><span class=\\\"mord\\\">100</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2222em;\\\"></span><span class=\\\"mbin\\\">×</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2222em;\\\"></span><span class=\\\"mord\\\"><span class=\\\"mord\\\">2</span><span class=\\\"msupsub\\\"><span class=\\\"vlist-t\\\"><span class=\\\"vlist-r\\\"><span class=\\\"vlist\\\" style=\\\"height:0.8141em;\\\"><span style=\\\"top:-3.063em;margin-right:0.05em;\\\"><span class=\\\"pstrut\\\" style=\\\"height:2.7em;\\\"></span><span class=\\\"sizing reset-size6 size3 mtight\\\"><span class=\\\"mord mtight\\\"><span class=\\\"mord mtight\\\">20</span></span></span></span></span></span></span></span></span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2222em;\\\"></span><span class=\\\"mbin\\\">×</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2222em;\\\"></span><span class=\\\"mord\\\">8</span></span></span></span><span class=\\\"vlist-s\\\">​</span></span><span class=\\\"vlist-r\\\"><span class=\\\"vlist\\\" style=\\\"height:0.7693em;\\\"><span></span></span></span></span></span><span class=\\\"mclose nulldelimiter\\\"></span></span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2778em;\\\"></span><span class=\\\"mrel amsrm\\\">≈</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2778em;\\\"></span></span><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.6444em;\\\"></span><span class=\\\"mord\\\">8.39</span><span class=\\\"mord mathnormal\\\">s</span></span></span></span></span></span></p>\\n<p>如果 B 正确收完 100MB 的数据之后，就立即向 A 发送确认，假定 A 只有在收到 B 的确认信息后，才能继续向 B 发送数据。显然这需要等一个 RTT 的时间。如果 RTT = 2s，那么有效数据率为：</p>\\n<p><span class=\\\"katex-display katexp\\\"><span class=\\\"katex-display\\\"><span class=\\\"katex\\\"><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.8889em;vertical-align:-0.1944em;\\\"></span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.05764em;\\\">E</span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.10764em;\\\">ff</span><span class=\\\"mord mathnormal\\\">ec</span><span class=\\\"mord mathnormal\\\">t</span><span class=\\\"mord mathnormal\\\">i</span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.03588em;\\\">v</span><span class=\\\"mord mathnormal\\\">e</span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.05017em;\\\">B</span><span class=\\\"mord mathnormal\\\">i</span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.00773em;\\\">tR</span><span class=\\\"mord mathnormal\\\">a</span><span class=\\\"mord mathnormal\\\">t</span><span class=\\\"mord mathnormal\\\">e</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2778em;\\\"></span><span class=\\\"mrel\\\">=</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2778em;\\\"></span></span><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:2.2519em;vertical-align:-0.8804em;\\\"></span><span class=\\\"mord\\\"><span class=\\\"mopen nulldelimiter\\\"></span><span class=\\\"mfrac\\\"><span class=\\\"vlist-t vlist-t2\\\"><span class=\\\"vlist-r\\\"><span class=\\\"vlist\\\" style=\\\"height:1.3714em;\\\"><span style=\\\"top:-2.314em;\\\"><span class=\\\"pstrut\\\" style=\\\"height:3em;\\\"></span><span class=\\\"mord\\\"><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.13889em;\\\">T</span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.02778em;\\\">r</span><span class=\\\"mord mathnormal\\\">an</span><span class=\\\"mord mathnormal\\\">s</span><span class=\\\"mord mathnormal\\\">mi</span><span class=\\\"mord mathnormal\\\">ss</span><span class=\\\"mord mathnormal\\\">i</span><span class=\\\"mord mathnormal\\\">o</span><span class=\\\"mord mathnormal\\\">n</span><span class=\\\"mord mathnormal\\\">De</span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.01968em;\\\">l</span><span class=\\\"mord mathnormal\\\">a</span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.03588em;\\\">y</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2222em;\\\"></span><span class=\\\"mbin\\\">+</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2222em;\\\"></span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.13889em;\\\">RTT</span></span></span><span style=\\\"top:-3.23em;\\\"><span class=\\\"pstrut\\\" style=\\\"height:3em;\\\"></span><span class=\\\"frac-line\\\" style=\\\"border-bottom-width:0.04em;\\\"></span></span><span style=\\\"top:-3.677em;\\\"><span class=\\\"pstrut\\\" style=\\\"height:3em;\\\"></span><span class=\\\"mord\\\"><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.02778em;\\\">D</span><span class=\\\"mord mathnormal\\\">a</span><span class=\\\"mord mathnormal\\\">t</span><span class=\\\"mord mathnormal\\\">a</span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.05017em;\\\">B</span><span class=\\\"mord mathnormal\\\">i</span><span class=\\\"mord mathnormal\\\">t</span><span class=\\\"mord mathnormal\\\">L</span><span class=\\\"mord mathnormal\\\">e</span><span class=\\\"mord mathnormal\\\">n</span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.03588em;\\\">g</span><span class=\\\"mord mathnormal\\\">t</span><span class=\\\"mord mathnormal\\\">h</span></span></span></span><span class=\\\"vlist-s\\\">​</span></span><span class=\\\"vlist-r\\\"><span class=\\\"vlist\\\" style=\\\"height:0.8804em;\\\"><span></span></span></span></span></span><span class=\\\"mclose nulldelimiter\\\"></span></span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2778em;\\\"></span><span class=\\\"mrel\\\">=</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2778em;\\\"></span></span><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:2.2604em;vertical-align:-0.7693em;\\\"></span><span class=\\\"mord\\\"><span class=\\\"mopen nulldelimiter\\\"></span><span class=\\\"mfrac\\\"><span class=\\\"vlist-t vlist-t2\\\"><span class=\\\"vlist-r\\\"><span class=\\\"vlist\\\" style=\\\"height:1.4911em;\\\"><span style=\\\"top:-2.314em;\\\"><span class=\\\"pstrut\\\" style=\\\"height:3em;\\\"></span><span class=\\\"mord\\\"><span class=\\\"mord\\\">8.39</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2222em;\\\"></span><span class=\\\"mbin\\\">+</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2222em;\\\"></span><span class=\\\"mord\\\">2</span></span></span><span style=\\\"top:-3.23em;\\\"><span class=\\\"pstrut\\\" style=\\\"height:3em;\\\"></span><span class=\\\"frac-line\\\" style=\\\"border-bottom-width:0.04em;\\\"></span></span><span style=\\\"top:-3.677em;\\\"><span class=\\\"pstrut\\\" style=\\\"height:3em;\\\"></span><span class=\\\"mord\\\"><span class=\\\"mord\\\">100</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2222em;\\\"></span><span class=\\\"mbin\\\">×</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2222em;\\\"></span><span class=\\\"mord\\\"><span class=\\\"mord\\\">2</span><span class=\\\"msupsub\\\"><span class=\\\"vlist-t\\\"><span class=\\\"vlist-r\\\"><span class=\\\"vlist\\\" style=\\\"height:0.8141em;\\\"><span style=\\\"top:-3.063em;margin-right:0.05em;\\\"><span class=\\\"pstrut\\\" style=\\\"height:2.7em;\\\"></span><span class=\\\"sizing reset-size6 size3 mtight\\\"><span class=\\\"mord mtight\\\"><span class=\\\"mord mtight\\\">20</span></span></span></span></span></span></span></span></span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2222em;\\\"></span><span class=\\\"mbin\\\">×</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2222em;\\\"></span><span class=\\\"mord\\\">8</span></span></span></span><span class=\\\"vlist-s\\\">​</span></span><span class=\\\"vlist-r\\\"><span class=\\\"vlist\\\" style=\\\"height:0.7693em;\\\"><span></span></span></span></span></span><span class=\\\"mclose nulldelimiter\\\"></span></span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2778em;\\\"></span><span class=\\\"mrel amsrm\\\">≈</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2778em;\\\"></span></span><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:1em;vertical-align:-0.25em;\\\"></span><span class=\\\"mord\\\">80.7</span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.10903em;\\\">M</span><span class=\\\"mord mathnormal\\\">bi</span><span class=\\\"mord mathnormal\\\">t</span><span class=\\\"mord\\\">/</span><span class=\\\"mord mathnormal\\\">s</span></span></span></span></span></span></p>\\n<p>可以看出，考虑上 RTT 之后，实际有效的速率会大受影响。</p>\\n<h5 id=\\\"7-利用率\\\">7. 利用率</h5>\\n<p>利用率有信道利用率和网络利用率两种：</p>\\n<ul>\\n<li>信道利用率：某信道有百分之几的时间是被利用的（有数据通过），完全空闲的信道利用率是 0</li>\\n<li>网络利用率：是全网络的信道利用率的加权平均值</li>\\n</ul>\\n<p>对于利用率我们要知道：<strong>信道或网络利用率过高会产生非常大的时延</strong>，所以通常利用率控制在不超过 50%</p>\\n<h4 id=\\\"17-计算机网络体系结构\\\">1.7 计算机网络体系结构</h4>\\n<h5 id=\\\"171-协议与层次\\\">1.7.1 协议与层次</h5>\\n<h6 id=\\\"协议\\\">协议</h6>\\n<p>在计算机网络中要做到有条不紊地交换数据，就必须遵守一些实验约定好的规则，<strong>这些规则明确规定了所交换的数据的格式以及有关的同步问题，这里的同步指的是广义的同步，即在一定条件下发生什么事件，按序发生。</strong></p>\\n<p>这些<strong>为网络中的数据交换而建立的规则、标准或约定称为网络协议（network protocol），简称协议。</strong></p>\\n<p>协议三要素：</p>\\n<ul>\\n<li>语法：数据和控制信息的结构或格式</li>\\n<li>语义：需要发出何种信息，完成何种动作以及做出何种响应</li>\\n<li>同步：事件的顺序说明</li>\\n</ul>\\n<h6 id=\\\"层次划分\\\">层次划分</h6>\\n<p>好处：</p>\\n<ul>\\n<li>各层独立，上层无需关心下层实现，仅需要知道相接的接口服务即可</li>\\n<li>灵活，一层发生变化的时候，只要保证接口关系不变，相接层不会收到影响</li>\\n<li>结构上分割，每一层都用最适合的技术去实现</li>\\n<li>易于实现和维护，分层优点</li>\\n<li>促进标准化，每一层都有自己的标准，明确</li>\\n</ul>\\n<h5 id=\\\"172-五层协议体系结构\\\">1.7.2 五层协议体系结构</h5>\\n<h6 id=\\\"体系结构\\\">体系结构</h6>\\n<p>最开始计算机网络协议是由<strong>ISO（International Organization for Standardization，国际标准化组织）</strong>在 1977 年成立的专门的机构去制订的<strong>开放系统互连基本参考模型 OSI/RM（Open System Interconnection Reference Model）</strong>，进行非垄断开放的标准，只要遵循该标准，在世界上任何地方都可以接入互联网。</p>\\n<p>但是我们现在使用的计算机体系结构其实并不是<strong>OSI</strong>这套，而是著名的<strong>TCP/IP</strong>这套，为什么 OSI 会失败，主要原因还是<strong>“OSI 标准在完成的时候，缺乏根本的商业动力”</strong>，没有实际经验，实现过分复杂，层次划分不合理，标准周期长。等等这些原因告诉我们，<strong>一个新标准的出现，有时候不一定是反映最先进的技术水平，而是往往有一定的市场背景，从某种意义上来说，能占领市场的才是标准。</strong></p>\\n<p>OSI 的七层协议体系结构的概念清楚，体系也完整，但是它既复杂又不实用。TCP/IP 的体系结构不一样，它只有四风结构，实质上说，TCP/IP 只有最上面的三层，因为最下面一层其实没有什么内容，所以在学习的时候，往往采用折中的方法，一种五层协议结构，结合了 TCP/IP 和 OSI 的优点。</p>\\n<p><img src=\\\"../../../public/img/TIM%E6%88%AA%E5%9B%BE20180701161712.png\\\" alt=\\\"\\\"></p>\\n<p>其中每层的用处，这里略过，后面每篇文章讲一层。</p>\\n<h6 id=\\\"数据传递过程\\\">数据传递过程</h6>\\n<p><img src=\\\"../../../public/img/TIM%E6%88%AA%E5%9B%BE20180701162434.png\\\" alt=\\\"\\\"></p>\\n<p>假定主机 1 的应用进程 AP1 向主机 2 的应用进程 AP2 传输数据：</p>\\n<ul>\\n<li>AP1 先将数据交给本层主机的第五层（应用层）</li>\\n<li>第五层加上必要的控制信息（Header）就变成了下层的<strong>数据单元</strong>，往下传</li>\\n<li>第四层（传输层）接到这个<strong>数据单元</strong>之后，加上本层必要控制信息，往下传</li>\\n<li>第三层（网络层）加头部，往下传</li>\\n<li>到了第二层（数据链路层），控制信息被分成两部分，加在<strong>数据单元</strong>的头部和尾部</li>\\n<li>到了第一层（物理层）这时候传输的是比特流，就不用加控制信息了</li>\\n</ul>\\n<p>OSI 把<strong>对等层</strong>之间传输的单元称为该层的<strong>协议数据单元（Protocol Data Unit, PDU）</strong></p>\\n<p>虽然 AP1 传输数据，要经过上图这么复杂的过程才能到 AP2，但是在 AP1 看来，数据好像是直接就交到 AP2 手上一样，AP1 并不需要关心下层的细节，下层的复杂细节都被屏蔽掉了。同理，第五层也好像是直接交到对等的第五层手上了，其他层也一样。<strong>这是一个很重要的思维方式。</strong></p>\\n<h5 id=\\\"173-协议、服务、服务访问点\\\">1.7.3 协议、服务、服务访问点</h5>\\n<h6 id=\\\"协议的本质\\\">协议的本质</h6>\\n<p>协议是控制两个对等实体间的通信，使得本层能够向上一层提供服务。要实现本层协议，还需要下一层提供服务。</p>\\n<h6 id=\\\"协议和服务的区别\\\">协议和服务的区别</h6>\\n<ul>\\n<li>协议的实现保证了能够<strong>向上一层提供服务</strong>，使用本层服务的实体只能看见服务而无法看见下层协议，也即<strong>下层协议对上层实体的透明的。</strong></li>\\n<li><strong>协议是“水平的”</strong>，协议是控制<strong>对等实体之间的通讯规则</strong>，而<strong>服务是“垂直的”</strong>，即服务是下层向上层实现协议所提供的。</li>\\n</ul>\\n<h6 id=\\\"服务访问点-sap（service-access-point）\\\">服务访问点 SAP（Service Access Point）</h6>\\n<p>同系统中相邻两层的实体进行交换信息的地方交 SAP</p>\\n<h6 id=\\\"服务数据单元-sdu（service-data-unit）\\\">服务数据单元 SDU（Service Data Unit）</h6>\\n<p>层与层之间交换的数据单元叫做 SDU</p>\\n<h5 id=\\\"174-tcpip-结构\\\">1.7.4 TCP/IP 结构</h5>\\n<p><img src=\\\"../../../public/img/TIM%E6%88%AA%E5%9B%BE20180701164518.png\\\" alt=\\\"\\\"></p>\\n<p>这里有两个很重要的概念：</p>\\n<ul>\\n<li><strong>everything over IP：</strong>TCP/IP 协议可以为各式各样的应用提供服务</li>\\n<li><strong>IP over everything：</strong>TCP/IP 协议允许 IP 协议在各式各样的网络构成的互联网上运行</li>\\n</ul>\\n\";","export default \"<h3 id=\\\"iterable接口\\\">Iterable接口</h3>\\n<p>含义: 这个接口的含义是, 容器的元素是否支持<strong>迭代器</strong>访问</p>\\n<h4 id=\\\"源码\\\">源码</h4>\\n<pre><code class=\\\"hljs language-java\\\"><span class=\\\"hljs-comment\\\">/**\\n * 实现这个接口, 意味着对象可以使用forEach循环进行操作\\n */</span>\\n<span class=\\\"hljs-keyword\\\">public</span> <span class=\\\"hljs-keyword\\\">interface</span> <span class=\\\"hljs-title class_\\\">Iterable</span>&lt;T&gt; {\\n    <span class=\\\"hljs-comment\\\">/**\\n     * 返回一个迭代器\\n     */</span>\\n    Iterator&lt;T&gt; <span class=\\\"hljs-title function_\\\">iterator</span><span class=\\\"hljs-params\\\">()</span>;\\n\\n    <span class=\\\"hljs-comment\\\">/**\\n     * (1)和lambda有关, 执行这个方法等效于\\n     *  for (E element : collection) {\\n     *      //对e进行每一个action操作\\n     *  }\\n     */</span>\\n    <span class=\\\"hljs-keyword\\\">default</span> <span class=\\\"hljs-keyword\\\">void</span> <span class=\\\"hljs-title function_\\\">forEach</span><span class=\\\"hljs-params\\\">(Consumer&lt;? <span class=\\\"hljs-built_in\\\">super</span> T&gt; action)</span> {\\n        Objects.requireNonNull(action);\\n        <span class=\\\"hljs-keyword\\\">for</span> (T t : <span class=\\\"hljs-built_in\\\">this</span>) {\\n            action.accept(t);\\n        }\\n    }\\n\\n    <span class=\\\"hljs-comment\\\">/**\\n     * (1)返回一个源迭代器的子集迭代器, 这个子集迭代器可以迭代指定部分的源集合的元素\\n     * (2)意思是返回一个阉割版的迭代器.\\n     * (3)关键是Spliterator&lt;T&gt;这个接口, 默认的情况下, 这个方法并不阉割迭代器.\\n     * 具体作用暂未摸索到, 以后再回来看看.\\n     */</span>\\n    <span class=\\\"hljs-keyword\\\">default</span> Spliterator&lt;T&gt; <span class=\\\"hljs-title function_\\\">spliterator</span><span class=\\\"hljs-params\\\">()</span> {\\n        <span class=\\\"hljs-keyword\\\">return</span> Spliterators.spliteratorUnknownSize(iterator(), <span class=\\\"hljs-number\\\">0</span>);\\n    }\\n}\\n</code></pre>\\n<h3 id=\\\"iterator接口\\\">Iterator接口</h3>\\n<p>含义: 实现这个接口的类就是某个容器的<strong>迭代器</strong>, 这个概念的意思是, 我可以持有一个<strong>迭代器</strong>去遍历容器中的元素.</p>\\n<h4 id=\\\"源码-1\\\">源码</h4>\\n<pre><code class=\\\"hljs language-java\\\"><span class=\\\"hljs-comment\\\">/**\\n * 源代码不多 所以去掉了很多注释就贴出来了\\n */</span>\\n<span class=\\\"hljs-keyword\\\">public</span> <span class=\\\"hljs-keyword\\\">interface</span> <span class=\\\"hljs-title class_\\\">Iterator</span>&lt;E&gt; {\\n\\n    <span class=\\\"hljs-comment\\\">/**\\n     * 如果当次迭代还有下一个元素 就返回true 否则返回false\\n     */</span>\\n    <span class=\\\"hljs-type\\\">boolean</span> <span class=\\\"hljs-title function_\\\">hasNext</span><span class=\\\"hljs-params\\\">()</span>;\\n\\n    <span class=\\\"hljs-comment\\\">/**\\n     * (1)获取下一个元素, 并且指针下移一次\\n     * (2)如果迭代器没有下一个元素, 仍要强行调用该方法, 则会抛出\\n     *\\n     * <span class=\\\"hljs-doctag\\\">@throws</span> NoSuchElementException 这个异常\\n     */</span>\\n    E <span class=\\\"hljs-title function_\\\">next</span><span class=\\\"hljs-params\\\">()</span>;\\n\\n    <span class=\\\"hljs-comment\\\">/**\\n     * (1)移除元素\\n     * (2)这个方法会抛出两种异常:\\n     *  1)必须至少调用一次next方法, 且不能是最后一次next方法调用完之后, 才能调用remove, 否则抛出<span class=\\\"hljs-doctag\\\">@throws</span> IllegalStateException\\n     *  2)如果没有自己的实现, 则调用默认方法, 默认就是不支持remove方法, 所以会抛出<span class=\\\"hljs-doctag\\\">@throws</span> UnsupportedOperationException\\n     */</span>\\n    <span class=\\\"hljs-keyword\\\">default</span> <span class=\\\"hljs-keyword\\\">void</span> <span class=\\\"hljs-title function_\\\">remove</span><span class=\\\"hljs-params\\\">()</span> {\\n        <span class=\\\"hljs-keyword\\\">throw</span> <span class=\\\"hljs-keyword\\\">new</span> <span class=\\\"hljs-title class_\\\">UnsupportedOperationException</span>(<span class=\\\"hljs-string\\\">&quot;remove&quot;</span>);\\n    }\\n\\n    <span class=\\\"hljs-comment\\\">/**\\n     * (1)这个方法用于执行对Collection里所有元素的遍历, 每次遍历都对元素执行一遍action, 对于Consumer, 这个是1.8的特性, lambda语法糖的一些特性, 这块是对于forEach循环增强的方法.\\n     * (2)对于这个方法到底在哪里用到, 以后看读源码的时候是否会再遇到它吧.\\n     */</span>\\n    <span class=\\\"hljs-keyword\\\">default</span> <span class=\\\"hljs-keyword\\\">void</span> <span class=\\\"hljs-title function_\\\">forEachRemaining</span><span class=\\\"hljs-params\\\">(Consumer&lt;? <span class=\\\"hljs-built_in\\\">super</span> E&gt; action)</span> {\\n        Objects.requireNonNull(action);\\n        <span class=\\\"hljs-keyword\\\">while</span> (hasNext())\\n            action.accept(next());\\n    }\\n}\\n</code></pre>\\n<h4 id=\\\"foreachremaining引例\\\">forEachRemaining引例</h4>\\n<blockquote>\\n<p>待补充</p>\\n</blockquote>\\n<h3 id=\\\"listiterator\\\">ListIterator</h3>\\n<p>比一般的迭代器要厉害 </p>\\n<pre><code class=\\\"hljs language-java\\\"><span class=\\\"hljs-comment\\\">/**\\n * 实现这个接口，意味着你的迭代器可以允许正向逆向地遍历list\\n * 在过程中你甚至可以获取当前迭代的index，甚至是修改元素\\n */</span>\\n<span class=\\\"hljs-keyword\\\">public</span> <span class=\\\"hljs-keyword\\\">interface</span> <span class=\\\"hljs-title class_\\\">ListIterator</span>&lt;E&gt; <span class=\\\"hljs-keyword\\\">extends</span> <span class=\\\"hljs-title class_\\\">Iterator</span>&lt;E&gt; {\\n    \\n    <span class=\\\"hljs-comment\\\">// 查询操作</span>\\n    <span class=\\\"hljs-type\\\">boolean</span> <span class=\\\"hljs-title function_\\\">hasNext</span><span class=\\\"hljs-params\\\">()</span>;\\n\\n    E <span class=\\\"hljs-title function_\\\">next</span><span class=\\\"hljs-params\\\">()</span>;\\n\\n    <span class=\\\"hljs-comment\\\">// 这个是前向询问是否有元素</span>\\n    <span class=\\\"hljs-type\\\">boolean</span> <span class=\\\"hljs-title function_\\\">hasPrevious</span><span class=\\\"hljs-params\\\">()</span>;\\n\\n    <span class=\\\"hljs-comment\\\">// 这是前向访问元素 作用和next()相反</span>\\n    E <span class=\\\"hljs-title function_\\\">previous</span><span class=\\\"hljs-params\\\">()</span>;\\n\\n    <span class=\\\"hljs-comment\\\">// 一个是获取后向index 一个是前向</span>\\n    <span class=\\\"hljs-type\\\">int</span> <span class=\\\"hljs-title function_\\\">nextIndex</span><span class=\\\"hljs-params\\\">()</span>;\\n    <span class=\\\"hljs-type\\\">int</span> <span class=\\\"hljs-title function_\\\">previousIndex</span><span class=\\\"hljs-params\\\">()</span>;\\n\\n    <span class=\\\"hljs-comment\\\">// 修改操作</span>\\n    <span class=\\\"hljs-keyword\\\">void</span> <span class=\\\"hljs-title function_\\\">remove</span><span class=\\\"hljs-params\\\">()</span>;\\n    \\n    <span class=\\\"hljs-keyword\\\">void</span> <span class=\\\"hljs-title function_\\\">set</span><span class=\\\"hljs-params\\\">(E e)</span>;\\n\\n    <span class=\\\"hljs-keyword\\\">void</span> <span class=\\\"hljs-title function_\\\">add</span><span class=\\\"hljs-params\\\">(E e)</span>;\\n}\\n</code></pre>\\n\";","export default \"<h3 id=\\\"前言\\\">前言</h3>\\n<blockquote>\\n<p>微服务架构被提出很短的时间内，就被越来越多的开发人员推崇，简单来说其主要的目的是有效的拆分应用，实现敏捷开发和部署 。</p>\\n<p>本分享即尝试介绍微服务架构的一些实施细节和要求，探询微服务架构的由来，并最终提供我们团队内部的一些实践总结，希望对大家有帮助。</p>\\n</blockquote>\\n<h3 id=\\\"what---什么是微服务\\\">WHAT - 什么是微服务</h3>\\n<h4 id=\\\"微服务简介\\\">微服务简介</h4>\\n<p>这次参加JavaOne2015最大的困难就是听Microservice相关的session，无论内容多么水，只要题目带microservice，必定报不上名，可见Microservice有多火。最喜欢其中一页。关于这个典故，可以参考[this](\\n&lt;<a href=\\\"http://knowyourmeme.com/memes/you-keep-using-that-word-i-do-not-think-it-means-what-you-think-it-means)%EF%BC%8C%E6%AD%A4%E5%9B%BE%E9%80%82%E7%94%A8%E4%BA%8E%E4%B8%80%E5%88%87%E9%AB%98%E5%A4%A7%E4%B8%8A%E7%9A%84%E5%90%8D%E5%AD%97%E2%80%94%E2%80%94%E6%8A%80%E6%9C%AF%E6%9C%89SOA%EF%BC%8CAgile%EF%BC%8CCLOUD%EF%BC%8CDevOps%E7%AD%89%E7%AD%89%EF%BC%8C%E5%8F%A4%E4%BB%A3%E6%9C%89%E9%81%93%EF%BC%8C%E6%B0%94%EF%BC%8C%E5%85%AB%E5%8D%A6%E7%AD%89%E7%AD%89%E3%80%82%E6%AD%A4%E7%B1%BB%E5%90%8D%E8%AF%8D%E7%9A%84%E6%9C%80%E5%A4%A7%E7%89%B9%E7%82%B9%E5%B0%B1%E6%98%AF\\\">http://knowyourmeme.com/memes/you-keep-using-that-word-i-do-not-think-it-means-what-you-think-it-means)，此图适用于一切高大上的名字——技术有SOA，Agile，CLOUD，DevOps等等，古代有道，气，八卦等等。此类名词的最大特点就是</a> <strong>一解释就懂，一问就不知，一讨论就打架。</strong> \\n<img src=\\\"http://img2.tbcdn.cn/L1/461/1/59f97219283a8e8cef996531a05a3c7880fb501b.png\\\" alt=\\\"screenshot\\\"></p>\\n<p>微服务的流行，Martin功不可没，这老头也是个奇人，特别擅长抽象归纳和制造概念，我觉的这就是最牛逼的markting啊，感觉这也是目前国人欠缺的能力。</p>\\n<blockquote>\\n<p>Martin Fowler是国际著名的OO专家，敏捷开发方法的创始人之一，现为ThoughtWorks公司的首席科学家.福勒（Martin Fowler），在面向对象分析设计、UML、模式、软件开发方法学、XP、重构等方面，都是世界顶级的专家，现为Thought Works公司的首席科学家。Thought Works是一家从事企业应用开发和集成的公司。早在20世纪80年代，Fowler就是使用对象技术构建多层企业应用的倡导者，他著有几本经典书籍：《企业应用架构模式》、《UML精粹》和《重构》等。—— 百度百科</p>\\n</blockquote>\\n<p>先来看看传统的web开发方式，通过对比比较容易理解什么是Microservice Architecture。和Microservice相对应的，这种方式一般被称为Monolithic（比较难传神的翻译）。所有的功能打包在一个WAR包里，基本没有外部依赖（除了容器），部署在一个JEE容器（Tomcat，JBoss，WebLogic）里，包含了DO/DAO，Service，UI等所有逻辑。\\n<img src=\\\"http://img3.tbcdn.cn/L1/461/1/cb87aabb9b184df0edd6769ef877b4b16b200855.png\\\" alt=\\\"screenshot\\\"></p>\\n<p>Monolithic比较适合小项目，优点是：</p>\\n<ul>\\n<li>开发简单直接，集中式管理</li>\\n<li>基本不会重复开发</li>\\n<li>功能都在本地，没有分布式的管理开销和调用开销</li>\\n</ul>\\n<p>它的缺点也非常明显，特别对于互联网公司来说（不一一列举了）：</p>\\n<ul>\\n<li>开发效率低：所有的开发在一个项目改代码，递交代码相互等待，代码冲突不断</li>\\n<li>代码维护难：代码功能耦合在一起，新人不知道何从下手</li>\\n<li>部署不灵活：构建时间长，任何小修改必须重新构建整个项目，这个过程往往很长</li>\\n<li>稳定性不高：一个微不足道的小问题，可以导致整个应用挂掉</li>\\n<li>扩展性不够：无法满足高并发情况下的业务需求</li>\\n</ul>\\n<p>所以，现在主流的设计一般会采用Microservice Architecture，就是基于微服务的架构。简单来说， <strong>微服务的目的是有效的拆分应用，实现敏捷开发和部署</strong> 。\\n<img src=\\\"http://img3.tbcdn.cn/L1/461/1/6a2474878e4c1000335770fe64269269f9211d17.png\\\" alt=\\\"screenshot\\\"></p>\\n<p>用《The art of scalability》一书里提到的scale cube比较容易理解如何拆分。你看，我们叫分库分表，别人总结成了scale cube，这就是抽象的能力啊，把复杂的东西用最简单的概念解释和总结。X轴代表运行多个负载均衡器之后运行的实例，Y轴代表将应用进一步分解为微服务（分库），数据量大时，还可以用Z轴将服务按数据分区（分表）\\n<img src=\\\"http://img4.tbcdn.cn/L1/461/1/238adf07b6afdc6ae246e2da83f83ce2e144cbeb.png\\\" alt=\\\"screenshot\\\"></p>\\n<h4 id=\\\"微服务的具体特征\\\">微服务的具体特征</h4>\\n<p>先看看最官方的定义吧</p>\\n<blockquote>\\n<p>The microservice architectural style is an approach to developing a single application as <strong>a suite of small services</strong>, each <strong>running in its own process</strong> and communicating with lightweight mechanisms, often an HTTP resource API. These services are <strong>built around business capabilities</strong> and independently deployable by fully automated deployment machinery. There is <strong>a bare minimum of centralized management of these services</strong> , which may be written in different programming languages and use different data storage technologies.</p>\\n<pre><code>            -- James Lewis and Martin Fowler\\n</code></pre>\\n</blockquote>\\n<p>把Martin老头的定义大概的翻译一下就是下面几条，这个定义还是太抽象是不是，那就对了，就是要务虚，都说明白了谁还找他付费咨询啊，这么贵。</p>\\n<ol>\\n<li>一些列的独立的服务共同组成系统</li>\\n<li>单独部署，跑在自己的进程里</li>\\n<li>每个服务为独立的业务开发</li>\\n<li>分布式的管理</li>\\n</ol>\\n<p>Martin自己也说了，每个人对微服务都可以有自己的理解，不过大概的标准还是有一些的。</p>\\n<ul>\\n<li>分布式服务组成的系统</li>\\n<li>按照业务而不是技术来划分组织</li>\\n<li>做有生命的产品而不是项目</li>\\n<li>Smart endpoints and dumb pipes（我的理解是强服务个体和弱通信）</li>\\n<li>自动化运维（DevOps）</li>\\n<li>容错</li>\\n<li>快速演化</li>\\n</ul>\\n<p>关于微服务的更多理论基础，可以参考<a href=\\\"https://yq.aliyun.com/articles/8611\\\">康威定律</a>。</p>\\n<h4 id=\\\"soa-vs-microservice\\\">SOA vs Microservice</h4>\\n<p>除了Smart endpoints and dumb pipes都很容易理解对吗？相信很多人都会问一个问题，这是不是就是SOA换了个概念，挂羊头卖狗肉啊，有说法把Microservice叫成Lightway SOA。也有很多传统砖家跳出来说Microservice就是SOA。其实Martin也没否认SOA和Microservice的关系。</p>\\n<p>我个人理解，Microservice是SOA的传承，但一个最本质的区别就在于Smart endpoints and dumb pipes，或者说是真正的分布式的、去中心化的。Smart endpoints and dumb pipes本质就是去ESB，把所有的“思考”逻辑包括路由、消息解析等放在服务内部（Smart endpoints），去掉一个大一统的ESB，服务间轻（dumb pipes）通信，是比SOA更彻底的拆分。</p>\\n<h3 id=\\\"how---怎么具体实践微服务\\\">HOW - 怎么具体实践微服务</h3>\\n<p>听上去好像都不错，具体怎么落地啊？这需要回答下面几个问题：</p>\\n<ul>\\n<li>客户端如何访问这些服务？</li>\\n<li>服务之间如何通信？</li>\\n<li>这么多服务，怎么找?</li>\\n<li>服务挂了怎么办？</li>\\n</ul>\\n<h4 id=\\\"客户端如何访问这些服务？\\\">客户端如何访问这些服务？</h4>\\n<p>原来的Monolithic方式开发，所有的服务都是本地的，UI可以直接调用，现在按功能拆分成独立的服务，跑在独立的一般都在独立的虚拟机上的Java进程了。客户端UI如何访问他的？后台有N个服务，前台就需要记住管理N个服务，一个服务下线/更新/升级，前台就要重新部署，这明显不服务我们拆分的理念，特别当前台是移动应用的时候，通常业务变化的节奏更快。另外，N个小服务的调用也是一个不小的网络开销。还有一般微服务在系统内部，通常是无状态的，用户登录信息和权限管理最好有一个统一的地方维护管理（OAuth）。</p>\\n<p>所以，一般在后台N个服务和UI之间一般会一个代理或者叫API Gateway，他的作用包括</p>\\n<ul>\\n<li>提供统一服务入口，让微服务对前台透明</li>\\n<li>聚合后台的服务，节省流量，提升性能</li>\\n<li>提供安全，过滤，流控等API管理功能</li>\\n</ul>\\n<p>我的理解其实这个API Gateway可以有很多广义的实现办法，可以是一个软硬一体的盒子，也可以是一个简单的MVC框架，甚至是一个Node.js的服务端。他们最重要的作用是为前台（通常是移动应用）提供后台服务的聚合，提供一个统一的服务出口，解除他们之间的耦合，不过API Gateway也有可能成为单点故障点或者性能的瓶颈。</p>\\n<p>一般用过Taobao Open Platform的就能很容易的体会，TAO就是这个API Gateway。\\n<img src=\\\"http://img2.tbcdn.cn/L1/461/1/4da28f2382d64d39ee4942c51636af31e9cc1d0b.png\\\" alt=\\\"screenshot\\\"></p>\\n<h4 id=\\\"服务之间如何通信？\\\">服务之间如何通信？</h4>\\n<p>因为所有的微服务都是独立的Java进程跑在独立的虚拟机上，所以服务间的通行就是IPC（inter process communication），已经有很多成熟的方案。现在基本最通用的有两种方式。这几种方式，展开来讲都可以写本书，而且大家一般都比较熟悉细节了，就不展开讲了。</p>\\n<ul>\\n<li>同步调用<ul>\\n<li>REST（JAX-RS）</li>\\n<li>RPC（Dubbo）</li>\\n</ul>\\n</li>\\n<li>异步消息调用(Kafka, Notify, MetaQ)</li>\\n</ul>\\n<p><img src=\\\"http://img2.tbcdn.cn/L1/461/1/d7e9a881c8940c216e6c1d8cb3bbbe7407e1e63b.png\\\" alt=\\\"screenshot\\\"></p>\\n<p>一般同步调用比较简单，一致性强，但是容易出调用问题，性能体验上也会差些，特别是调用层次多的时候。RESTful和RPC的比较也是一个很有意思的话题。一般REST基于HTTP，更容易实现，更容易被接受，服务端实现技术也更灵活些，各个语言都能支持，同时能跨客户端，对客户端没有特殊的要求，只要封装了HTTP的SDK就能调用，所以相对使用的广一些。RPC也有自己的优点，传输协议更高效，安全更可控，特别在一个公司内部，如果有统一个的开发规范和统一的服务框架时，他的开发效率优势更明显些。就看各自的技术积累实际条件，自己的选择了。</p>\\n<p>而异步消息的方式在分布式系统中有特别广泛的应用，他既能减低调用服务之间的耦合，又能成为调用之间的缓冲，确保消息积压不会冲垮被调用方，同时能保证调用方的服务体验，继续干自己该干的活，不至于被后台性能拖慢。不过需要付出的代价是一致性的减弱，需要接受数据最终一致性；还有就是后台服务一般要实现幂等性，因为消息发送出于性能的考虑一般会有重复（保证消息的被收到且仅收到一次对性能是很大的考验）；最后就是必须引入一个独立的broker，如果公司内部没有技术积累，对broker分布式管理也是一个很大的挑战。</p>\\n<h4 id=\\\"这么多服务，怎么找\\\">这么多服务，怎么找?</h4>\\n<p>在微服务架构中，一般每一个服务都是有多个拷贝，来做负载均衡。一个服务随时可能下线，也可能应对临时访问压力增加新的服务节点。服务之间如何相互感知？服务如何管理？这就是服务发现的问题了。一般有两类做法，也各有优缺点。基本都是通过zookeeper等类似技术做服务注册信息的分布式管理。当服务上线时，服务提供者将自己的服务信息注册到ZK（或类似框架），并通过心跳维持长链接，实时更新链接信息。服务调用者通过ZK寻址，根据可定制算法，找到一个服务，还可以将服务信息缓存在本地以提高性能。当服务下线时，ZK会发通知给服务客户端。</p>\\n<ul>\\n<li>客户端做：优点是架构简单，扩展灵活，只对服务注册器依赖。缺点是客户端要维护所有调用服务的地址，有技术难度，一般大公司都有成熟的内部框架支持，比如Dubbo。</li>\\n<li>服务端做：优点是简单，所有服务对于前台调用方透明，一般在小公司在云服务上部署的应用采用的比较多。</li>\\n</ul>\\n<p><img src=\\\"http://img3.tbcdn.cn/L1/461/1/61decc9c96f96e795ae36353c9cbcc312c035910.png\\\" alt=\\\"screenshot\\\"></p>\\n<h4 id=\\\"这么多服务，服务挂了怎么办？\\\">这么多服务，服务挂了怎么办？</h4>\\n<p>前面提到，Monolithic方式开发一个很大的风险是，把所有鸡蛋放在一个篮子里，一荣俱荣，一损俱损。而分布式最大的特性就是网络是不可靠的。通过微服务拆分能降低这个风险，不过如果没有特别的保障，结局肯定是噩梦。我们刚遇到一个线上故障就是一个很不起眼的SQL计数功能，在访问量上升时，导致数据库load彪高，影响了所在应用的性能，从而影响所有调用这个应用服务的前台应用。所以当我们的系统是由一系列的服务调用链组成的时候，我们必须确保任一环节出问题都不至于影响整体链路。相应的手段有很多：</p>\\n<ul>\\n<li>重试机制</li>\\n<li>限流</li>\\n<li>熔断机制</li>\\n<li>负载均衡</li>\\n<li>降级（本地缓存）</li>\\n</ul>\\n<p>这些方法基本上都很明确通用，就不详细说明了。比如Netflix的Hystrix：<a href=\\\"https://github.com/Netflix/Hystrix\\\">https://github.com/Netflix/Hystrix</a>\\n<img src=\\\"http://img2.tbcdn.cn/L1/461/1/d639a17e4d2c9fc8d0ceebed2eaf32016096c458.png\\\" alt=\\\"screenshot\\\"></p>\\n<h4 id=\\\"why---微服务的应用\\\">WHY - 微服务的应用</h4>\\n<p><a href=\\\"http://microservices.io/patterns/microservices.html\\\">这里</a>有一个图非常好的总结微服务架构需要考虑的问题，包括</p>\\n<ul>\\n<li>API Gateway</li>\\n<li>服务间调用</li>\\n<li>服务发现</li>\\n<li>服务容错</li>\\n<li>服务部署</li>\\n<li>数据调用</li>\\n</ul>\\n<p><img src=\\\"http://img3.tbcdn.cn/L1/461/1/766c31d336cfe1e455547fdf5f3a3751f62bdd59.png\\\" alt=\\\"screenshot\\\"></p>\\n<p>微服务的优点和缺点（或者说挑战）一样明显。</p>\\n<ul>\\n<li>优点<ul>\\n<li>开发简单</li>\\n<li>技术栈灵活</li>\\n<li>服务独立无依赖</li>\\n<li>独立按需扩展</li>\\n<li>可用性高</li>\\n</ul>\\n</li>\\n<li>缺点（挑战）<ul>\\n<li>多服务运维难度</li>\\n<li>系统部署依赖</li>\\n<li>服务间通信成本</li>\\n<li>数据一致性</li>\\n<li>系统集成测试</li>\\n<li>重复工作</li>\\n<li>性能监控</li>\\n</ul>\\n</li>\\n</ul>\\n<p>没有最好的，只有适合自己的。</p>\\n<ul>\\n<li>对于大的互联网公司，微服务架构是血液，是习惯，每家公司都有自己的套路和架构，细节有不同，但是核心理念是通的。</li>\\n<li>对于一般的公司而言，实践微服务有非常大的技术挑战，于是乎才有了这么多IT供应商考虑这里的商机。微服务比较适合未来有一定的扩展复杂度，且有很大用户增量预期的应用，说人话就是新兴的互联网公司。创业初期，不可能买大量的机器或者很贵的机器，但是又必须考虑应对成功后的巨量的用户，微服务架构成了最好的选择。\\n<img src=\\\"http://img2.tbcdn.cn/L1/461/1/052b1cebf73e0b31c502341e0e3cc916a3da2a25.png\\\" alt=\\\"screenshot\\\"></li>\\n</ul>\\n<h3 id=\\\"so-what---思考\\\">So What - 思考</h3>\\n<p>看到上面的图，不是不觉得特别的熟悉？其实我们N年前就用的滚瓜烂熟了好不好？裤子都拖了，你就给我看这个？</p>\\n<p><img src=\\\"https://camo.githubusercontent.com/e5151c52066f1dd92fbae7ed40f6cc0f0d410fa0/68747470733a2f2f7261772e6769746875622e636f6d2f4e6574666c69782f726563697065732d7273732f6d61737465722f696d616765732f526563697065735f5253532e706e67\\\" alt=\\\"screenshot\\\">\\nfrom: <a href=\\\"https://github.com/Netflix/recipes-rss/wiki/Architecture\\\">https://github.com/Netflix/recipes-rss/wiki/Architecture</a></p>\\n<p>其实本来所谓的微服务就是对互联网在应用技术的一个总结归纳，IT厂商鼓吹所有概念无非是为了生意（business），SOA是，Cloud是，Microservice也是。下面玩笑很有意思的概括了这个情况（我加了第一条线，原图见<a href=\\\"http://blog.gardeviance.org/2012/07/adoption-cycles.html\\\">这里</a>）\\n<img src=\\\"http://img3.tbcdn.cn/L1/461/1/f9684c79f476a27982f3285cfb9b5b6eb7e29517.png\\\" alt=\\\"screenshot\\\"></p>\\n<p>所以微服对我们的思考我觉得更多的是思维上的，对已微服务架构， <strong>技术上不是问题，意识比工具重要。</strong></p>\\n<ul>\\n<li>按照业务 或者客户需求组织资源（这是最难的）</li>\\n<li>做有生命的产品，而不是项目</li>\\n<li>头狼战队，全栈化</li>\\n<li>后台服务贯彻Single Responsibility Principle</li>\\n<li>VM-&gt;Docker （to PE）</li>\\n<li>DevOps (to PE)</li>\\n</ul>\\n<p>同时，对于开发同学，有这么多的中间件和强大的PE支持固然是好事，我们也需要深入去了解这些中间件背后的原理，知其然知其所以然，设想下，如果我们是一个小公司的CTO，离开的阿里的大环境，在有限的技术资源如何通过开源技术实施微服务？</p>\\n<p>最后，一般提到微服务都离不开DevOps和Docker，理解微服务架构是核心，devops和docker是工具，是手段。下次在抽时间再学习整理下。\\n<img src=\\\"http://img2.tbcdn.cn/L1/461/1/2ada4ac057eaf561f8862572bf6327845c482ca7.png\\\" alt=\\\"screenshot\\\"></p>\\n<blockquote>\\n<p>转载自：<a href=\\\"https://yq.aliyun.com/articles/2764\\\">https://yq.aliyun.com/articles/2764</a></p>\\n</blockquote>\\n\";","export default \"<h3 id=\\\"56merge-intervalsmedium\\\">56.Merge Intervals(Medium)</h3>\\n<p>Given a collection of intervals, merge all overlapping intervals.</p>\\n<p><strong>Example 1:</strong></p>\\n<pre><code>Input: [[1,3],[2,6],[8,10],[15,18]]\\nOutput: [[1,6],[8,10],[15,18]]\\nExplanation: Since intervals [1,3] and [2,6] overlaps, merge them into [1,6].\\n</code></pre>\\n<p><strong>Example 2:</strong></p>\\n<pre><code>Input: [[1,4],[4,5]]\\nOutput: [[1,5]]\\nExplanation: Intervals [1,4] and [4,5] are considered overlapping.\\n</code></pre>\\n<h4 id=\\\"solution\\\">Solution</h4>\\n<p>多写几组就知道规律了，我们将start和end各<strong>按照升序</strong>写成2个数组：</p>\\n<pre><code>[[1,3],[2,6],[8,10],[15,18]]\\nstart: [1,2, 8,15]\\nend:   [3,6,10,18]\\nresult:\\n       [1,2  [8, [15\\n        3,6] 10]  18]\\n\\n[[1,4],[4,5]]\\nstart: [1,4]\\nend:   [4,5]\\nresult:\\n       [1,4\\n        4,5]\\n</code></pre>\\n<p>于是我们找得出规律，我们同时从开头遍历两个数组，当下标为<code>i</code>的时候，如果<code>end[i] &lt;= start[i + 1]</code>，证明找到了一组intervals</p>\\n<pre><code class=\\\"hljs language-java\\\"><span class=\\\"hljs-keyword\\\">public</span> List&lt;Interval&gt; <span class=\\\"hljs-title function_\\\">merge</span><span class=\\\"hljs-params\\\">(List&lt;Interval&gt; intervals)</span> {\\n    List&lt;Interval&gt; ans = <span class=\\\"hljs-keyword\\\">new</span> <span class=\\\"hljs-title class_\\\">LinkedList</span>&lt;&gt;();\\n    <span class=\\\"hljs-type\\\">int</span>[] ss = <span class=\\\"hljs-keyword\\\">new</span> <span class=\\\"hljs-title class_\\\">int</span>[intervals.size()];\\n    <span class=\\\"hljs-type\\\">int</span>[] ee = <span class=\\\"hljs-keyword\\\">new</span> <span class=\\\"hljs-title class_\\\">int</span>[intervals.size()];\\n    <span class=\\\"hljs-keyword\\\">for</span> (<span class=\\\"hljs-type\\\">int</span> <span class=\\\"hljs-variable\\\">i</span> <span class=\\\"hljs-operator\\\">=</span> <span class=\\\"hljs-number\\\">0</span>; i &lt; intervals.size(); i++) {\\n        ss[i] = intervals.get(i).start;\\n        ee[i] = intervals.get(i).end;\\n    }\\n    Arrays.sort(ss);\\n    Arrays.sort(ee);\\n    <span class=\\\"hljs-type\\\">int</span> <span class=\\\"hljs-variable\\\">si</span> <span class=\\\"hljs-operator\\\">=</span> <span class=\\\"hljs-number\\\">0</span>;\\n    <span class=\\\"hljs-type\\\">int</span> <span class=\\\"hljs-variable\\\">ei</span> <span class=\\\"hljs-operator\\\">=</span> <span class=\\\"hljs-number\\\">0</span>;\\n    <span class=\\\"hljs-type\\\">int</span> nowStart;\\n    <span class=\\\"hljs-keyword\\\">while</span> (ei &lt; intervals.size()) {\\n        nowStart = ss[si];\\n        <span class=\\\"hljs-keyword\\\">while</span> (si + <span class=\\\"hljs-number\\\">1</span> &lt; intervals.size() && ee[ei] &gt;= ss[si + <span class=\\\"hljs-number\\\">1</span>]) {\\n            si++;\\n            ei++;\\n        }\\n        ans.add(<span class=\\\"hljs-keyword\\\">new</span> <span class=\\\"hljs-title class_\\\">Interval</span>(nowStart, ee[ei]));\\n        si++;\\n        ei++;\\n    }\\n    <span class=\\\"hljs-keyword\\\">return</span> ans;\\n}\\n</code></pre>\\n<h3 id=\\\"57insert-interval\\\">57.Insert Interval</h3>\\n<p>Given a set of <em>non-overlapping</em> intervals, insert a new interval into the intervals (merge if necessary).</p>\\n<p>You may assume that the intervals were initially sorted according to their start times.</p>\\n<p><strong>Example 1:</strong></p>\\n<pre><code>Input: intervals = [[1,3],[6,9]], newInterval = [2,5]\\nOutput: [[1,5],[6,9]]\\n</code></pre>\\n<p><strong>Example 2:</strong></p>\\n<pre><code>Input: intervals = [[1,2],[3,5],[6,7],[8,10],[12,16]], newInterval = [4,8]\\nOutput: [[1,2],[3,10],[12,16]]\\nExplanation: Because the new interval [4,8] overlaps with [3,5],[6,7],[8,10].\\n</code></pre>\\n<h4 id=\\\"solution-1\\\">Solution</h4>\\n<p>因为前面解Merge的时候，就用排序无视掉了顺序，所以插入的时候，直接可以使用上面的Merge继续做</p>\\n<pre><code class=\\\"hljs language-java\\\"><span class=\\\"hljs-keyword\\\">public</span> List&lt;Interval&gt; <span class=\\\"hljs-title function_\\\">insert</span><span class=\\\"hljs-params\\\">(List&lt;Interval&gt; intervals, Interval newInterval)</span> {\\n    intervals.add(newInterval);\\n    <span class=\\\"hljs-keyword\\\">return</span> merge(intervals);\\n}\\n\\n<span class=\\\"hljs-keyword\\\">public</span> List&lt;Interval&gt; <span class=\\\"hljs-title function_\\\">merge</span><span class=\\\"hljs-params\\\">(List&lt;Interval&gt; intervals)</span> {\\n    List&lt;Interval&gt; ans = <span class=\\\"hljs-keyword\\\">new</span> <span class=\\\"hljs-title class_\\\">LinkedList</span>&lt;&gt;();\\n    <span class=\\\"hljs-type\\\">int</span>[] ss = <span class=\\\"hljs-keyword\\\">new</span> <span class=\\\"hljs-title class_\\\">int</span>[intervals.size()];\\n    <span class=\\\"hljs-type\\\">int</span>[] ee = <span class=\\\"hljs-keyword\\\">new</span> <span class=\\\"hljs-title class_\\\">int</span>[intervals.size()];\\n    <span class=\\\"hljs-keyword\\\">for</span> (<span class=\\\"hljs-type\\\">int</span> <span class=\\\"hljs-variable\\\">i</span> <span class=\\\"hljs-operator\\\">=</span> <span class=\\\"hljs-number\\\">0</span>; i &lt; intervals.size(); i++) {\\n        ss[i] = intervals.get(i).start;\\n        ee[i] = intervals.get(i).end;\\n    }\\n    Arrays.sort(ss);\\n    Arrays.sort(ee);\\n    <span class=\\\"hljs-type\\\">int</span> <span class=\\\"hljs-variable\\\">si</span> <span class=\\\"hljs-operator\\\">=</span> <span class=\\\"hljs-number\\\">0</span>;\\n    <span class=\\\"hljs-type\\\">int</span> <span class=\\\"hljs-variable\\\">ei</span> <span class=\\\"hljs-operator\\\">=</span> <span class=\\\"hljs-number\\\">0</span>;\\n    <span class=\\\"hljs-type\\\">int</span> nowStart;\\n    <span class=\\\"hljs-keyword\\\">while</span> (ei &lt; intervals.size()) {\\n        nowStart = ss[si];\\n        <span class=\\\"hljs-keyword\\\">while</span> (si + <span class=\\\"hljs-number\\\">1</span> &lt; intervals.size() && ee[ei] &gt;= ss[si + <span class=\\\"hljs-number\\\">1</span>]) {\\n            si++;\\n            ei++;\\n        }\\n        ans.add(<span class=\\\"hljs-keyword\\\">new</span> <span class=\\\"hljs-title class_\\\">Interval</span>(nowStart, ee[ei]));\\n        si++;\\n        ei++;\\n    }\\n    <span class=\\\"hljs-keyword\\\">return</span> ans;\\n}\\n</code></pre>\\n<h3 id=\\\"58length-of-last-wordeasy\\\">58.Length Of Last Word(Easy)</h3>\\n<p>Given a string <em>s</em> consists of upper/lower-case alphabets and empty space characters <code>&#39; &#39;</code>, return the length of last word in the string.</p>\\n<p>If the last word does not exist, return 0.</p>\\n<p><strong>Note:</strong> A word is defined as a character sequence consists of non-space characters only.</p>\\n<p><strong>Example:</strong></p>\\n<pre><code>Input: &quot;Hello World&quot;\\nOutput: 5\\n</code></pre>\\n<h4 id=\\\"solution-2\\\">Solution</h4>\\n<pre><code class=\\\"hljs language-java\\\"><span class=\\\"hljs-keyword\\\">public</span> <span class=\\\"hljs-type\\\">int</span> <span class=\\\"hljs-title function_\\\">lengthOfLastWord</span><span class=\\\"hljs-params\\\">(String s)</span> {\\n    String[] split = s.split(<span class=\\\"hljs-string\\\">&quot; &quot;</span>);\\n    <span class=\\\"hljs-keyword\\\">if</span> (s.isEmpty() || split.length == <span class=\\\"hljs-number\\\">0</span>) {\\n        <span class=\\\"hljs-keyword\\\">return</span> <span class=\\\"hljs-number\\\">0</span>;\\n    } <span class=\\\"hljs-keyword\\\">else</span> {\\n        <span class=\\\"hljs-type\\\">int</span> <span class=\\\"hljs-variable\\\">i</span> <span class=\\\"hljs-operator\\\">=</span> split.length - <span class=\\\"hljs-number\\\">1</span>;\\n        <span class=\\\"hljs-type\\\">int</span> <span class=\\\"hljs-variable\\\">len</span> <span class=\\\"hljs-operator\\\">=</span> split[i].length();\\n        <span class=\\\"hljs-keyword\\\">while</span> (len == <span class=\\\"hljs-number\\\">0</span>) {\\n            len = split[--i].length();\\n        }\\n        <span class=\\\"hljs-keyword\\\">return</span> len;\\n    }\\n}\\n</code></pre>\\n<h3 id=\\\"59spiralmatrixiimedium\\\">59.SpiralMatrixII(Medium)</h3>\\n<p>Given a positive integer <em>n</em>, generate a square matrix filled with elements from 1 to <em>n</em>2 in spiral order.</p>\\n<p><strong>Example:</strong></p>\\n<pre><code>Input: 3\\nOutput:\\n[\\n [ 1, 2, 3 ],\\n [ 8, 9, 4 ],\\n [ 7, 6, 5 ]\\n]\\n</code></pre>\\n<h4 id=\\\"solution-3\\\">Solution</h4>\\n<p>有了<a href=\\\"./xmbex2.html?hash=73ecdd5a\\\">Spiral Matrix</a>的经验，这题就很容易暴打出来了</p>\\n<pre><code class=\\\"hljs language-java\\\"><span class=\\\"hljs-keyword\\\">public</span> <span class=\\\"hljs-type\\\">int</span>[][] generateMatrix(<span class=\\\"hljs-type\\\">int</span> n) {\\n    <span class=\\\"hljs-type\\\">int</span>[][] ans = <span class=\\\"hljs-keyword\\\">new</span> <span class=\\\"hljs-title class_\\\">int</span>[n][n];\\n    <span class=\\\"hljs-type\\\">int</span> <span class=\\\"hljs-variable\\\">dir</span> <span class=\\\"hljs-operator\\\">=</span> <span class=\\\"hljs-number\\\">0</span>;\\n    <span class=\\\"hljs-type\\\">int</span> <span class=\\\"hljs-variable\\\">count</span> <span class=\\\"hljs-operator\\\">=</span> <span class=\\\"hljs-number\\\">2</span>;\\n    ans[<span class=\\\"hljs-number\\\">0</span>][<span class=\\\"hljs-number\\\">0</span>] = <span class=\\\"hljs-number\\\">1</span>;\\n    <span class=\\\"hljs-type\\\">int</span>[] point = {<span class=\\\"hljs-number\\\">0</span>, <span class=\\\"hljs-number\\\">0</span>};\\n    <span class=\\\"hljs-keyword\\\">while</span> (count &lt;= n * n) {\\n        <span class=\\\"hljs-keyword\\\">if</span> (dir == <span class=\\\"hljs-number\\\">0</span>) {\\n            <span class=\\\"hljs-keyword\\\">for</span> (<span class=\\\"hljs-type\\\">int</span> <span class=\\\"hljs-variable\\\">i</span> <span class=\\\"hljs-operator\\\">=</span> point[<span class=\\\"hljs-number\\\">1</span>] + <span class=\\\"hljs-number\\\">1</span>; i &lt; n; i++) {\\n                ans[point[<span class=\\\"hljs-number\\\">0</span>]][i] = count++;\\n                point[<span class=\\\"hljs-number\\\">1</span>] = i;\\n                <span class=\\\"hljs-keyword\\\">if</span> (i + <span class=\\\"hljs-number\\\">1</span> &lt; n && ans[point[<span class=\\\"hljs-number\\\">0</span>]][i + <span class=\\\"hljs-number\\\">1</span>] &gt; <span class=\\\"hljs-number\\\">0</span>) {\\n                    <span class=\\\"hljs-keyword\\\">break</span>;\\n                }\\n            }\\n            dir = <span class=\\\"hljs-number\\\">1</span>;\\n        } <span class=\\\"hljs-keyword\\\">else</span> <span class=\\\"hljs-keyword\\\">if</span> (dir == <span class=\\\"hljs-number\\\">1</span>) {\\n            <span class=\\\"hljs-keyword\\\">for</span> (<span class=\\\"hljs-type\\\">int</span> <span class=\\\"hljs-variable\\\">i</span> <span class=\\\"hljs-operator\\\">=</span> point[<span class=\\\"hljs-number\\\">0</span>] + <span class=\\\"hljs-number\\\">1</span>; i &lt; n; i++) {\\n                ans[i][point[<span class=\\\"hljs-number\\\">1</span>]] = count++;\\n                point[<span class=\\\"hljs-number\\\">0</span>] = i;\\n                <span class=\\\"hljs-keyword\\\">if</span> (i + <span class=\\\"hljs-number\\\">1</span> &lt; n && ans[i + <span class=\\\"hljs-number\\\">1</span>][point[<span class=\\\"hljs-number\\\">1</span>]] &gt; <span class=\\\"hljs-number\\\">0</span>) {\\n                    <span class=\\\"hljs-keyword\\\">break</span>;\\n                }\\n            }\\n            dir = <span class=\\\"hljs-number\\\">2</span>;\\n        } <span class=\\\"hljs-keyword\\\">else</span> <span class=\\\"hljs-keyword\\\">if</span> (dir == <span class=\\\"hljs-number\\\">2</span>) {\\n            <span class=\\\"hljs-keyword\\\">for</span> (<span class=\\\"hljs-type\\\">int</span> <span class=\\\"hljs-variable\\\">i</span> <span class=\\\"hljs-operator\\\">=</span> point[<span class=\\\"hljs-number\\\">1</span>] - <span class=\\\"hljs-number\\\">1</span>; i &gt;= <span class=\\\"hljs-number\\\">0</span>; i--) {\\n                ans[point[<span class=\\\"hljs-number\\\">0</span>]][i] = count++;\\n                point[<span class=\\\"hljs-number\\\">1</span>] = i;\\n                <span class=\\\"hljs-keyword\\\">if</span> (i - <span class=\\\"hljs-number\\\">1</span> &gt;= <span class=\\\"hljs-number\\\">0</span> && ans[point[<span class=\\\"hljs-number\\\">0</span>]][i - <span class=\\\"hljs-number\\\">1</span>] &gt; <span class=\\\"hljs-number\\\">0</span>) {\\n                    <span class=\\\"hljs-keyword\\\">break</span>;\\n                }\\n            }\\n            dir = <span class=\\\"hljs-number\\\">3</span>;\\n        } <span class=\\\"hljs-keyword\\\">else</span> {\\n            <span class=\\\"hljs-keyword\\\">for</span> (<span class=\\\"hljs-type\\\">int</span> <span class=\\\"hljs-variable\\\">i</span> <span class=\\\"hljs-operator\\\">=</span> point[<span class=\\\"hljs-number\\\">0</span>] - <span class=\\\"hljs-number\\\">1</span>; i &gt;= <span class=\\\"hljs-number\\\">0</span>; i--) {\\n                ans[i][point[<span class=\\\"hljs-number\\\">1</span>]] = count++;\\n                point[<span class=\\\"hljs-number\\\">0</span>] = i;\\n                <span class=\\\"hljs-keyword\\\">if</span> (i - <span class=\\\"hljs-number\\\">1</span> &gt;= <span class=\\\"hljs-number\\\">0</span> && ans[i - <span class=\\\"hljs-number\\\">1</span>][point[<span class=\\\"hljs-number\\\">1</span>]] &gt; <span class=\\\"hljs-number\\\">0</span>) {\\n                    <span class=\\\"hljs-keyword\\\">break</span>;\\n                }\\n            }\\n            dir = <span class=\\\"hljs-number\\\">0</span>;\\n        }\\n\\n    }\\n    <span class=\\\"hljs-keyword\\\">return</span> ans;\\n}\\n</code></pre>\\n<h3 id=\\\"60permutation-sequencemedium\\\">60.Permutation Sequence(Medium)</h3>\\n<p>The set <code>[1,2,3,...,*n*]</code> contains a total of <em>n</em>! unique permutations.</p>\\n<p>By listing and labeling all of the permutations in order, we get the following sequence for <em>n</em> = 3:</p>\\n<ol>\\n<li><code>&quot;123&quot;</code></li>\\n<li><code>&quot;132&quot;</code></li>\\n<li><code>&quot;213&quot;</code></li>\\n<li><code>&quot;231&quot;</code></li>\\n<li><code>&quot;312&quot;</code></li>\\n<li><code>&quot;321&quot;</code></li>\\n</ol>\\n<p>Given <em>n</em> and <em>k</em>, return the <em>k</em>th permutation sequence.</p>\\n<p><strong>Note:</strong></p>\\n<ul>\\n<li>Given <em>n</em> will be between 1 and 9 inclusive.</li>\\n<li>Given <em>k</em> will be between 1 and <em>n</em>! inclusive.</li>\\n</ul>\\n<p><strong>Example 1:</strong></p>\\n<pre><code>Input: n = 3, k = 3\\nOutput: &quot;213&quot;\\n</code></pre>\\n<p><strong>Example 2:</strong></p>\\n<pre><code>Input: n = 4, k = 9\\nOutput: &quot;2314&quot;\\n</code></pre>\\n<h4 id=\\\"mathematical\\\">Mathematical</h4>\\n<p>数学观察法做出- -</p>\\n<pre><code>我们观察一下n=4的时候：\\n前12个序列为：\\n\\n1: 1 2 3 4   7: 2 1 3 4\\n2: 1 2 4 3   8: 2 1 4 3\\n3: 1 3 2 4   9: 2 3 1 4\\n4: 1 3 4 2  10: 2 3 4 1\\n5: 1 4 2 3  11: 2 4 1 3\\n6: 1 4 3 2  12: 2 4 3 1\\n\\n可以观察到，我们选第一个数是满6个选一位，也就是以1开头的序列共有剩下3!=6种可能，\\n一次类推后面几位数字就都\\n\\n当n=4，k=9的时候\\n\\n我们开始选第一个数，candidate:[1,2,3,4]\\n\\n3! x 1 &lt; k = 9 ≤ 3! x 2\\n\\n于是选第2个候选者；k = 9 - (3! x 1) = 3;\\n\\n我们开始选第二个数，candidate:[1,3,4]\\n\\n2! x 1 &lt; k = 3 ≤ 2! x 2\\n\\n于是选第2个候选者；k = 3 - (2! x 1) = 1;\\n\\n我们开始选第三个数，candidate:[1,4]\\n\\n0 &lt; k = 1 ≤ 1! x 1\\n\\n于是选择第1个候选者;这时候只剩下一个候选者了，得解\\n</code></pre>\\n<p>于是代码为：</p>\\n<pre><code class=\\\"hljs language-java\\\"><span class=\\\"hljs-keyword\\\">public</span> String <span class=\\\"hljs-title function_\\\">getPermutation</span><span class=\\\"hljs-params\\\">(<span class=\\\"hljs-type\\\">int</span> n, <span class=\\\"hljs-type\\\">int</span> k)</span> {\\n    LinkedList&lt;String&gt; candidate = <span class=\\\"hljs-keyword\\\">new</span> <span class=\\\"hljs-title class_\\\">LinkedList</span>&lt;&gt;();\\n    <span class=\\\"hljs-type\\\">StringBuilder</span> <span class=\\\"hljs-variable\\\">sb</span> <span class=\\\"hljs-operator\\\">=</span> <span class=\\\"hljs-keyword\\\">new</span> <span class=\\\"hljs-title class_\\\">StringBuilder</span>();\\n    <span class=\\\"hljs-type\\\">int</span> <span class=\\\"hljs-variable\\\">factorial</span> <span class=\\\"hljs-operator\\\">=</span> <span class=\\\"hljs-number\\\">1</span>;\\n    <span class=\\\"hljs-keyword\\\">for</span> (<span class=\\\"hljs-type\\\">int</span> <span class=\\\"hljs-variable\\\">i</span> <span class=\\\"hljs-operator\\\">=</span> <span class=\\\"hljs-number\\\">1</span>; i &lt;= n; i++) {\\n        factorial *= i;\\n        candidate.add(String.valueOf(i));\\n    }\\n    <span class=\\\"hljs-type\\\">int</span> <span class=\\\"hljs-variable\\\">bit</span> <span class=\\\"hljs-operator\\\">=</span> n;\\n    <span class=\\\"hljs-keyword\\\">while</span> (candidate.size() &gt; <span class=\\\"hljs-number\\\">0</span>) {\\n        factorial = factorial / bit;\\n        bit--;\\n        <span class=\\\"hljs-type\\\">int</span> <span class=\\\"hljs-variable\\\">pick</span> <span class=\\\"hljs-operator\\\">=</span> <span class=\\\"hljs-number\\\">0</span>;\\n        <span class=\\\"hljs-keyword\\\">while</span> (k &gt; pick * factorial) {\\n            pick++;\\n        }\\n        sb.append(candidate.remove(pick - <span class=\\\"hljs-number\\\">1</span>));\\n        k -= ((pick - <span class=\\\"hljs-number\\\">1</span>) * factorial);\\n    }\\n    <span class=\\\"hljs-keyword\\\">return</span> sb.toString();\\n}\\n</code></pre>\\n\";","export default \"<p>本篇主要是再来聊聊MySQL中InnoDB的索引的细节，主要聊到引擎是如何利用B+树去检索数据的</p>\\n<p>以及整理一些关于索引的问题与回答，所以本篇的形式还是以问题点为驱动，回答一个个的问题</p>\\n<p>在开始之前，再强调一些B+树的细节：</p>\\n<ul>\\n<li><strong>“高扇出性”</strong>，为了减少IO次数，而尽可能一次IO读取更多的数据；</li>\\n<li><strong>“范围查找”</strong>，由于索引存储的特点，相比于<em><strong>哈希索引的等值查找</strong></em>，它还能胜任范围查找；</li>\\n<li><strong>“顺序排序”</strong>，因为索引是顺序存储，所以查询结果天然排序；</li>\\n<li><strong>“索引即数据，数据即索引”</strong>，聚集索引的存储值就是数据本身；</li>\\n</ul>\\n<h3 id=\\\"使用b树的索引过程\\\">使用B+树的索引过程</h3>\\n<p><img src=\\\"../../../public/img/15727784554518.jpg\\\" alt=\\\"img\\\"></p>\\n<p>现在假设我们要查找<code>id&gt;=18</code>并且<code>id&lt;40</code>的用户数据</p>\\n<p>对应的sql语句如下，其中id为主键：</p>\\n<pre><code class=\\\"hljs language-sql\\\"><span class=\\\"hljs-keyword\\\">select</span> <span class=\\\"hljs-operator\\\">*</span> <span class=\\\"hljs-keyword\\\">from</span> <span class=\\\"hljs-keyword\\\">user</span> <span class=\\\"hljs-keyword\\\">where</span> id<span class=\\\"hljs-operator\\\">&gt;=</span><span class=\\\"hljs-number\\\">18</span> <span class=\\\"hljs-keyword\\\">and</span> id <span class=\\\"hljs-operator\\\">&lt;</span><span class=\\\"hljs-number\\\">40</span>\\n</code></pre>\\n<p>具体的查找过程如下：</p>\\n<ol>\\n<li><p>一般根节点都是常驻内存的，也就是说<code>页1</code>已经在内存中了，此时不需要到磁盘中读取数据，直接从内存中读取即可。从内存中读取到<code>页1</code>，要查找这个<code>id&gt;=18 and id &lt;40</code>或者范围值，我们首先需要找到<code>id=18</code>的键值。从<code>页1</code>中我们可以找到键值<code>18</code>，此时我们需要根据指针<code>p2</code>，定位到<code>页3</code>。 </p>\\n</li>\\n<li><p>要从<code>页3</code>中查找数据，我们就需要拿着<code>p2</code>指针去磁盘中进行读取<code>页3</code>。从磁盘中读取<code>页3</code>放入内存中，然后进行查找，我们可以找到键值<code>18</code>，然后再拿到<code>页3</code>中的指针<code>p1</code>，定位到<code>页8</code>。 </p>\\n</li>\\n<li><p>同样的<code>页8</code>不在内存中，我们需要再去磁盘中将<code>页8</code>读取到内存中。将<code>页8</code>读取到内存中后，因为页中的数据是链表进行连接的，而且键值是按照顺序存放的，此时可以根据二分查找法定位到键值<code>18</code>。</p>\\n<p><strong>此时因为已经到数据页了</strong>，此时我们已经找到一条满足条件的数据了，就是键值<code>18</code>对应的数据。因为是范围查找，而且此时所有的数据又都存在叶子节点，并且是有序排列的，那么我们就可以对页8中的键值依次进行遍历查找并匹配满足条件的数据。我们可以一直找到键值为<code>22</code>的数据，然后<code>页8</code>中就没有数据了，此时我们需要拿着<code>页8</code>中的<code>p指针</code>去读取<code>页9</code>中的数据。 </p>\\n</li>\\n<li><p>因为<code>页9</code>不在内存中，就又会加载<code>页9</code>到内存中，并通过和<code>页8</code>中一样的方式进行数据的查找，直到将<code>页12</code>加载到内存中，发现<code>41</code>大于<code>40</code>，此时不满足条件。</p>\\n<p><strong>那么查找到此终止</strong>。</p>\\n</li>\\n</ol>\\n<p>最终我们找到满足条件的所有数据为：<code>(18,kl),(19,kl),(22,hj),(24,io),(25,vg),(29,jk),(31,jk),(33,rt),(34,ty),(35,yu),(37,rt),(39,rt)</code>，总共12条记录。</p>\\n<p>具体流程如：</p>\\n<p><img src=\\\"../../../public/img/15727785424308.jpg\\\" alt=\\\"img\\\"></p>\\n<p>而非聚集索引的查找流程也一样，只不过它最终返回的是记录的主键，然后再通过主键去聚集索引中查找数据，我们称这个行为叫做<strong>“回表”</strong></p>\\n<h3 id=\\\"索引匹配过程\\\">索引匹配过程</h3>\\n<h4 id=\\\"explain命令\\\">Explain命令</h4>\\n<p>在了解索引匹配之前，我们先了解了解MySQL中一个对SQL执行过程进行解释的命令<code>explain</code>，</p>\\n<p>我们需要了解各列的含义，接下来的内容转载整理自：<a href=\\\"https://www.cnblogs.com/mzhaox/p/11203042.html\\\">https://www.cnblogs.com/mzhaox/p/11203042.html</a></p>\\n<h5 id=\\\"id\\\">id</h5>\\n<p>id列的编号是 select 的序列号，有几个 select 就有几个id，并且id的顺序是按 select 出现的顺序增长的。MySQL将 select 查询分为简单查询和复杂查询。复杂查询分为三类：<strong>简单子查询、派生表（from语句中的子查询）、union 查询</strong>。</p>\\n<ol>\\n<li><p>简单子查询</p>\\n<pre><code class=\\\"hljs language-sql\\\">mysql<span class=\\\"hljs-operator\\\">&gt;</span> explain <span class=\\\"hljs-keyword\\\">select</span> (<span class=\\\"hljs-keyword\\\">select</span> <span class=\\\"hljs-number\\\">1</span> <span class=\\\"hljs-keyword\\\">from</span> actor limit <span class=\\\"hljs-number\\\">1</span>) <span class=\\\"hljs-keyword\\\">from</span> film;\\n<span class=\\\"hljs-operator\\\">+</span><span class=\\\"hljs-comment\\\">----+-------------+-------+-------+---------------+----------+---------+------+------+-------------+</span>\\n<span class=\\\"hljs-operator\\\">|</span> id <span class=\\\"hljs-operator\\\">|</span> select_type <span class=\\\"hljs-operator\\\">|</span> <span class=\\\"hljs-keyword\\\">table</span> <span class=\\\"hljs-operator\\\">|</span> type  <span class=\\\"hljs-operator\\\">|</span> possible_keys <span class=\\\"hljs-operator\\\">|</span> key      <span class=\\\"hljs-operator\\\">|</span> key_len <span class=\\\"hljs-operator\\\">|</span> <span class=\\\"hljs-keyword\\\">ref</span>  <span class=\\\"hljs-operator\\\">|</span> <span class=\\\"hljs-keyword\\\">rows</span> <span class=\\\"hljs-operator\\\">|</span> Extra       <span class=\\\"hljs-operator\\\">|</span>\\n<span class=\\\"hljs-operator\\\">+</span><span class=\\\"hljs-comment\\\">----+-------------+-------+-------+---------------+----------+---------+------+------+-------------+</span>\\n<span class=\\\"hljs-operator\\\">|</span>  <span class=\\\"hljs-number\\\">1</span> <span class=\\\"hljs-operator\\\">|</span> <span class=\\\"hljs-keyword\\\">PRIMARY</span>     <span class=\\\"hljs-operator\\\">|</span> film  <span class=\\\"hljs-operator\\\">|</span> index <span class=\\\"hljs-operator\\\">|</span> <span class=\\\"hljs-keyword\\\">NULL</span>          <span class=\\\"hljs-operator\\\">|</span> idx_name <span class=\\\"hljs-operator\\\">|</span> <span class=\\\"hljs-number\\\">32</span>      <span class=\\\"hljs-operator\\\">|</span> <span class=\\\"hljs-keyword\\\">NULL</span> <span class=\\\"hljs-operator\\\">|</span>    <span class=\\\"hljs-number\\\">1</span> <span class=\\\"hljs-operator\\\">|</span> <span class=\\\"hljs-keyword\\\">Using</span> index <span class=\\\"hljs-operator\\\">|</span>\\n<span class=\\\"hljs-operator\\\">|</span>  <span class=\\\"hljs-number\\\">2</span> <span class=\\\"hljs-operator\\\">|</span> SUBQUERY    <span class=\\\"hljs-operator\\\">|</span> actor <span class=\\\"hljs-operator\\\">|</span> index <span class=\\\"hljs-operator\\\">|</span> <span class=\\\"hljs-keyword\\\">NULL</span>          <span class=\\\"hljs-operator\\\">|</span> <span class=\\\"hljs-keyword\\\">PRIMARY</span>  <span class=\\\"hljs-operator\\\">|</span> <span class=\\\"hljs-number\\\">4</span>       <span class=\\\"hljs-operator\\\">|</span> <span class=\\\"hljs-keyword\\\">NULL</span> <span class=\\\"hljs-operator\\\">|</span>    <span class=\\\"hljs-number\\\">2</span> <span class=\\\"hljs-operator\\\">|</span> <span class=\\\"hljs-keyword\\\">Using</span> index <span class=\\\"hljs-operator\\\">|</span>\\n<span class=\\\"hljs-operator\\\">+</span><span class=\\\"hljs-comment\\\">----+-------------+-------+-------+---------------+----------+---------+------+------+-------------+</span>\\n</code></pre>\\n</li>\\n<li><p>from子句中的子查询</p>\\n<pre><code class=\\\"hljs language-sql\\\">mysql<span class=\\\"hljs-operator\\\">&gt;</span> explain <span class=\\\"hljs-keyword\\\">select</span> id <span class=\\\"hljs-keyword\\\">from</span> (<span class=\\\"hljs-keyword\\\">select</span> id <span class=\\\"hljs-keyword\\\">from</span> film) <span class=\\\"hljs-keyword\\\">as</span> der;\\n<span class=\\\"hljs-operator\\\">+</span><span class=\\\"hljs-comment\\\">----+-------------+------------+-------+---------------+----------+---------+------+------+-------------+</span>\\n<span class=\\\"hljs-operator\\\">|</span> id <span class=\\\"hljs-operator\\\">|</span> select_type <span class=\\\"hljs-operator\\\">|</span> <span class=\\\"hljs-keyword\\\">table</span>      <span class=\\\"hljs-operator\\\">|</span> type  <span class=\\\"hljs-operator\\\">|</span> possible_keys <span class=\\\"hljs-operator\\\">|</span> key      <span class=\\\"hljs-operator\\\">|</span> key_len <span class=\\\"hljs-operator\\\">|</span> <span class=\\\"hljs-keyword\\\">ref</span>  <span class=\\\"hljs-operator\\\">|</span> <span class=\\\"hljs-keyword\\\">rows</span> <span class=\\\"hljs-operator\\\">|</span> Extra       <span class=\\\"hljs-operator\\\">|</span>\\n<span class=\\\"hljs-operator\\\">+</span><span class=\\\"hljs-comment\\\">----+-------------+------------+-------+---------------+----------+---------+------+------+-------------+</span>\\n<span class=\\\"hljs-operator\\\">|</span>  <span class=\\\"hljs-number\\\">1</span> <span class=\\\"hljs-operator\\\">|</span> <span class=\\\"hljs-keyword\\\">PRIMARY</span>     <span class=\\\"hljs-operator\\\">|</span> <span class=\\\"hljs-operator\\\">&lt;</span>derived2<span class=\\\"hljs-operator\\\">&gt;</span> <span class=\\\"hljs-operator\\\">|</span> <span class=\\\"hljs-keyword\\\">ALL</span>   <span class=\\\"hljs-operator\\\">|</span> <span class=\\\"hljs-keyword\\\">NULL</span>          <span class=\\\"hljs-operator\\\">|</span> <span class=\\\"hljs-keyword\\\">NULL</span>     <span class=\\\"hljs-operator\\\">|</span> <span class=\\\"hljs-keyword\\\">NULL</span>    <span class=\\\"hljs-operator\\\">|</span> <span class=\\\"hljs-keyword\\\">NULL</span> <span class=\\\"hljs-operator\\\">|</span>    <span class=\\\"hljs-number\\\">2</span> <span class=\\\"hljs-operator\\\">|</span> <span class=\\\"hljs-keyword\\\">NULL</span>        <span class=\\\"hljs-operator\\\">|</span>\\n<span class=\\\"hljs-operator\\\">|</span>  <span class=\\\"hljs-number\\\">2</span> <span class=\\\"hljs-operator\\\">|</span> DERIVED     <span class=\\\"hljs-operator\\\">|</span> film       <span class=\\\"hljs-operator\\\">|</span> index <span class=\\\"hljs-operator\\\">|</span> <span class=\\\"hljs-keyword\\\">NULL</span>          <span class=\\\"hljs-operator\\\">|</span> idx_name <span class=\\\"hljs-operator\\\">|</span> <span class=\\\"hljs-number\\\">32</span>      <span class=\\\"hljs-operator\\\">|</span> <span class=\\\"hljs-keyword\\\">NULL</span> <span class=\\\"hljs-operator\\\">|</span>    <span class=\\\"hljs-number\\\">1</span> <span class=\\\"hljs-operator\\\">|</span> <span class=\\\"hljs-keyword\\\">Using</span> index <span class=\\\"hljs-operator\\\">|</span>\\n<span class=\\\"hljs-operator\\\">+</span><span class=\\\"hljs-comment\\\">----+-------------+------------+-------+---------------+----------+---------+------+------+-------------+</span>\\n</code></pre>\\n<p>这个查询执行时有个临时表别名为der，外部 select 查询引用了这个临时表</p>\\n</li>\\n<li><p>union查询</p>\\n<pre><code class=\\\"hljs language-sql\\\">mysql<span class=\\\"hljs-operator\\\">&gt;</span> explain <span class=\\\"hljs-keyword\\\">select</span> <span class=\\\"hljs-number\\\">1</span> <span class=\\\"hljs-keyword\\\">union</span> <span class=\\\"hljs-keyword\\\">all</span> <span class=\\\"hljs-keyword\\\">select</span> <span class=\\\"hljs-number\\\">1</span>;\\n<span class=\\\"hljs-operator\\\">+</span><span class=\\\"hljs-comment\\\">----+--------------+------------+------+---------------+------+---------+------+------+-----------------+</span>\\n<span class=\\\"hljs-operator\\\">|</span> id <span class=\\\"hljs-operator\\\">|</span> select_type  <span class=\\\"hljs-operator\\\">|</span> <span class=\\\"hljs-keyword\\\">table</span>      <span class=\\\"hljs-operator\\\">|</span> type <span class=\\\"hljs-operator\\\">|</span> possible_keys <span class=\\\"hljs-operator\\\">|</span> key  <span class=\\\"hljs-operator\\\">|</span> key_len <span class=\\\"hljs-operator\\\">|</span> <span class=\\\"hljs-keyword\\\">ref</span>  <span class=\\\"hljs-operator\\\">|</span> <span class=\\\"hljs-keyword\\\">rows</span> <span class=\\\"hljs-operator\\\">|</span> Extra           <span class=\\\"hljs-operator\\\">|</span>\\n<span class=\\\"hljs-operator\\\">+</span><span class=\\\"hljs-comment\\\">----+--------------+------------+------+---------------+------+---------+------+------+-----------------+</span>\\n<span class=\\\"hljs-operator\\\">|</span>  <span class=\\\"hljs-number\\\">1</span> <span class=\\\"hljs-operator\\\">|</span> <span class=\\\"hljs-keyword\\\">PRIMARY</span>      <span class=\\\"hljs-operator\\\">|</span> <span class=\\\"hljs-keyword\\\">NULL</span>       <span class=\\\"hljs-operator\\\">|</span> <span class=\\\"hljs-keyword\\\">NULL</span> <span class=\\\"hljs-operator\\\">|</span> <span class=\\\"hljs-keyword\\\">NULL</span>          <span class=\\\"hljs-operator\\\">|</span> <span class=\\\"hljs-keyword\\\">NULL</span> <span class=\\\"hljs-operator\\\">|</span> <span class=\\\"hljs-keyword\\\">NULL</span>    <span class=\\\"hljs-operator\\\">|</span> <span class=\\\"hljs-keyword\\\">NULL</span> <span class=\\\"hljs-operator\\\">|</span> <span class=\\\"hljs-keyword\\\">NULL</span> <span class=\\\"hljs-operator\\\">|</span> <span class=\\\"hljs-keyword\\\">No</span> tables used  <span class=\\\"hljs-operator\\\">|</span>\\n<span class=\\\"hljs-operator\\\">|</span>  <span class=\\\"hljs-number\\\">2</span> <span class=\\\"hljs-operator\\\">|</span> <span class=\\\"hljs-keyword\\\">UNION</span>        <span class=\\\"hljs-operator\\\">|</span> <span class=\\\"hljs-keyword\\\">NULL</span>       <span class=\\\"hljs-operator\\\">|</span> <span class=\\\"hljs-keyword\\\">NULL</span> <span class=\\\"hljs-operator\\\">|</span> <span class=\\\"hljs-keyword\\\">NULL</span>          <span class=\\\"hljs-operator\\\">|</span> <span class=\\\"hljs-keyword\\\">NULL</span> <span class=\\\"hljs-operator\\\">|</span> <span class=\\\"hljs-keyword\\\">NULL</span>    <span class=\\\"hljs-operator\\\">|</span> <span class=\\\"hljs-keyword\\\">NULL</span> <span class=\\\"hljs-operator\\\">|</span> <span class=\\\"hljs-keyword\\\">NULL</span> <span class=\\\"hljs-operator\\\">|</span> <span class=\\\"hljs-keyword\\\">No</span> tables used  <span class=\\\"hljs-operator\\\">|</span>\\n<span class=\\\"hljs-operator\\\">|</span> <span class=\\\"hljs-keyword\\\">NULL</span> <span class=\\\"hljs-operator\\\">|</span> <span class=\\\"hljs-keyword\\\">UNION</span> <span class=\\\"hljs-keyword\\\">RESULT</span> <span class=\\\"hljs-operator\\\">|</span> <span class=\\\"hljs-operator\\\">&lt;</span>union1,<span class=\\\"hljs-number\\\">2</span><span class=\\\"hljs-operator\\\">&gt;</span> <span class=\\\"hljs-operator\\\">|</span> <span class=\\\"hljs-keyword\\\">ALL</span>  <span class=\\\"hljs-operator\\\">|</span> <span class=\\\"hljs-keyword\\\">NULL</span>          <span class=\\\"hljs-operator\\\">|</span> <span class=\\\"hljs-keyword\\\">NULL</span> <span class=\\\"hljs-operator\\\">|</span> <span class=\\\"hljs-keyword\\\">NULL</span>    <span class=\\\"hljs-operator\\\">|</span> <span class=\\\"hljs-keyword\\\">NULL</span> <span class=\\\"hljs-operator\\\">|</span> <span class=\\\"hljs-keyword\\\">NULL</span> <span class=\\\"hljs-operator\\\">|</span> <span class=\\\"hljs-keyword\\\">Using</span> temporary <span class=\\\"hljs-operator\\\">|</span>\\n<span class=\\\"hljs-operator\\\">+</span><span class=\\\"hljs-comment\\\">----+--------------+------------+------+---------------+------+---------+------+------+-----------------+</span>\\n</code></pre>\\n<p>union结果总是放在一个匿名临时表中，临时表不在SQL总出现，因此它的id是NULL。</p>\\n</li>\\n</ol>\\n<h5 id=\\\"select_type\\\">select_type</h5>\\n<p>select_type 表示对应行是是简单还是复杂的查询，如果是复杂的查询，又是上述三种复杂查询中的哪一种。</p>\\n<ol>\\n<li><p><strong>simple</strong>：简单查询。查询不包含子查询和union；</p>\\n</li>\\n<li><p><strong>primary</strong>：复杂查询中最外层的 select；</p>\\n</li>\\n<li><p><strong>subquery</strong>：包含在 select 中的子查询（不在 from 子句中）；</p>\\n</li>\\n<li><p><strong>derived</strong>：包含在 from 子句中的子查询。MySQL会将结果存放在一个临时表中，也称为派生表；</p>\\n<pre><code class=\\\"hljs language-sql\\\">mysql<span class=\\\"hljs-operator\\\">&gt;</span> explain <span class=\\\"hljs-keyword\\\">select</span> (<span class=\\\"hljs-keyword\\\">select</span> <span class=\\\"hljs-number\\\">1</span> <span class=\\\"hljs-keyword\\\">from</span> actor <span class=\\\"hljs-keyword\\\">where</span> id <span class=\\\"hljs-operator\\\">=</span> <span class=\\\"hljs-number\\\">1</span>) <span class=\\\"hljs-keyword\\\">from</span> (<span class=\\\"hljs-keyword\\\">select</span> <span class=\\\"hljs-operator\\\">*</span> <span class=\\\"hljs-keyword\\\">from</span> film <span class=\\\"hljs-keyword\\\">where</span> id <span class=\\\"hljs-operator\\\">=</span> <span class=\\\"hljs-number\\\">1</span>) der;\\n<span class=\\\"hljs-operator\\\">+</span><span class=\\\"hljs-comment\\\">----+-------------+------------+--------+---------------+---------+---------+-------+------+-------------+</span>\\n<span class=\\\"hljs-operator\\\">|</span> id <span class=\\\"hljs-operator\\\">|</span> select_type <span class=\\\"hljs-operator\\\">|</span> <span class=\\\"hljs-keyword\\\">table</span>      <span class=\\\"hljs-operator\\\">|</span> type   <span class=\\\"hljs-operator\\\">|</span> possible_keys <span class=\\\"hljs-operator\\\">|</span> key     <span class=\\\"hljs-operator\\\">|</span> key_len <span class=\\\"hljs-operator\\\">|</span> <span class=\\\"hljs-keyword\\\">ref</span>   <span class=\\\"hljs-operator\\\">|</span> <span class=\\\"hljs-keyword\\\">rows</span> <span class=\\\"hljs-operator\\\">|</span> Extra       <span class=\\\"hljs-operator\\\">|</span>\\n<span class=\\\"hljs-operator\\\">+</span><span class=\\\"hljs-comment\\\">----+-------------+------------+--------+---------------+---------+---------+-------+------+-------------+</span>\\n<span class=\\\"hljs-operator\\\">|</span>  <span class=\\\"hljs-number\\\">1</span> <span class=\\\"hljs-operator\\\">|</span> <span class=\\\"hljs-keyword\\\">PRIMARY</span>     <span class=\\\"hljs-operator\\\">|</span> <span class=\\\"hljs-operator\\\">&lt;</span>derived3<span class=\\\"hljs-operator\\\">&gt;</span> <span class=\\\"hljs-operator\\\">|</span> <span class=\\\"hljs-keyword\\\">system</span> <span class=\\\"hljs-operator\\\">|</span> <span class=\\\"hljs-keyword\\\">NULL</span>          <span class=\\\"hljs-operator\\\">|</span> <span class=\\\"hljs-keyword\\\">NULL</span>    <span class=\\\"hljs-operator\\\">|</span> <span class=\\\"hljs-keyword\\\">NULL</span>    <span class=\\\"hljs-operator\\\">|</span> <span class=\\\"hljs-keyword\\\">NULL</span>  <span class=\\\"hljs-operator\\\">|</span>    <span class=\\\"hljs-number\\\">1</span> <span class=\\\"hljs-operator\\\">|</span> <span class=\\\"hljs-keyword\\\">NULL</span>        <span class=\\\"hljs-operator\\\">|</span>\\n<span class=\\\"hljs-operator\\\">|</span>  <span class=\\\"hljs-number\\\">3</span> <span class=\\\"hljs-operator\\\">|</span> DERIVED     <span class=\\\"hljs-operator\\\">|</span> film       <span class=\\\"hljs-operator\\\">|</span> const  <span class=\\\"hljs-operator\\\">|</span> <span class=\\\"hljs-keyword\\\">PRIMARY</span>       <span class=\\\"hljs-operator\\\">|</span> <span class=\\\"hljs-keyword\\\">PRIMARY</span> <span class=\\\"hljs-operator\\\">|</span> <span class=\\\"hljs-number\\\">4</span>       <span class=\\\"hljs-operator\\\">|</span> const <span class=\\\"hljs-operator\\\">|</span>    <span class=\\\"hljs-number\\\">1</span> <span class=\\\"hljs-operator\\\">|</span> <span class=\\\"hljs-keyword\\\">NULL</span>        <span class=\\\"hljs-operator\\\">|</span>\\n<span class=\\\"hljs-operator\\\">|</span>  <span class=\\\"hljs-number\\\">2</span> <span class=\\\"hljs-operator\\\">|</span> SUBQUERY    <span class=\\\"hljs-operator\\\">|</span> actor      <span class=\\\"hljs-operator\\\">|</span> const  <span class=\\\"hljs-operator\\\">|</span> <span class=\\\"hljs-keyword\\\">PRIMARY</span>       <span class=\\\"hljs-operator\\\">|</span> <span class=\\\"hljs-keyword\\\">PRIMARY</span> <span class=\\\"hljs-operator\\\">|</span> <span class=\\\"hljs-number\\\">4</span>       <span class=\\\"hljs-operator\\\">|</span> const <span class=\\\"hljs-operator\\\">|</span>    <span class=\\\"hljs-number\\\">1</span> <span class=\\\"hljs-operator\\\">|</span> <span class=\\\"hljs-keyword\\\">Using</span> index <span class=\\\"hljs-operator\\\">|</span>\\n<span class=\\\"hljs-operator\\\">+</span><span class=\\\"hljs-comment\\\">----+-------------+------------+--------+---------------+---------+---------+-------+------+-------------+</span>\\n</code></pre>\\n</li>\\n<li><p><strong>union</strong>：在 union 中的第二个和随后的 select；</p>\\n</li>\\n<li><p><strong>union result</strong>：从 union 临时表检索结果的 select；</p>\\n<pre><code class=\\\"hljs language-sql\\\">mysql<span class=\\\"hljs-operator\\\">&gt;</span> explain <span class=\\\"hljs-keyword\\\">select</span> <span class=\\\"hljs-number\\\">1</span> <span class=\\\"hljs-keyword\\\">union</span> <span class=\\\"hljs-keyword\\\">all</span> <span class=\\\"hljs-keyword\\\">select</span> <span class=\\\"hljs-number\\\">1</span>;\\n<span class=\\\"hljs-operator\\\">+</span><span class=\\\"hljs-comment\\\">----+--------------+------------+------+---------------+------+---------+------+------+-----------------+</span>\\n<span class=\\\"hljs-operator\\\">|</span> id <span class=\\\"hljs-operator\\\">|</span> select_type  <span class=\\\"hljs-operator\\\">|</span> <span class=\\\"hljs-keyword\\\">table</span>      <span class=\\\"hljs-operator\\\">|</span> type <span class=\\\"hljs-operator\\\">|</span> possible_keys <span class=\\\"hljs-operator\\\">|</span> key  <span class=\\\"hljs-operator\\\">|</span> key_len <span class=\\\"hljs-operator\\\">|</span> <span class=\\\"hljs-keyword\\\">ref</span>  <span class=\\\"hljs-operator\\\">|</span> <span class=\\\"hljs-keyword\\\">rows</span> <span class=\\\"hljs-operator\\\">|</span> Extra           <span class=\\\"hljs-operator\\\">|</span>\\n<span class=\\\"hljs-operator\\\">+</span><span class=\\\"hljs-comment\\\">----+--------------+------------+------+---------------+------+---------+------+------+-----------------+</span>\\n<span class=\\\"hljs-operator\\\">|</span>  <span class=\\\"hljs-number\\\">1</span> <span class=\\\"hljs-operator\\\">|</span> <span class=\\\"hljs-keyword\\\">PRIMARY</span>      <span class=\\\"hljs-operator\\\">|</span> <span class=\\\"hljs-keyword\\\">NULL</span>       <span class=\\\"hljs-operator\\\">|</span> <span class=\\\"hljs-keyword\\\">NULL</span> <span class=\\\"hljs-operator\\\">|</span> <span class=\\\"hljs-keyword\\\">NULL</span>          <span class=\\\"hljs-operator\\\">|</span> <span class=\\\"hljs-keyword\\\">NULL</span> <span class=\\\"hljs-operator\\\">|</span> <span class=\\\"hljs-keyword\\\">NULL</span>    <span class=\\\"hljs-operator\\\">|</span> <span class=\\\"hljs-keyword\\\">NULL</span> <span class=\\\"hljs-operator\\\">|</span> <span class=\\\"hljs-keyword\\\">NULL</span> <span class=\\\"hljs-operator\\\">|</span> <span class=\\\"hljs-keyword\\\">No</span> tables used  <span class=\\\"hljs-operator\\\">|</span>\\n<span class=\\\"hljs-operator\\\">|</span>  <span class=\\\"hljs-number\\\">2</span> <span class=\\\"hljs-operator\\\">|</span> <span class=\\\"hljs-keyword\\\">UNION</span>        <span class=\\\"hljs-operator\\\">|</span> <span class=\\\"hljs-keyword\\\">NULL</span>       <span class=\\\"hljs-operator\\\">|</span> <span class=\\\"hljs-keyword\\\">NULL</span> <span class=\\\"hljs-operator\\\">|</span> <span class=\\\"hljs-keyword\\\">NULL</span>          <span class=\\\"hljs-operator\\\">|</span> <span class=\\\"hljs-keyword\\\">NULL</span> <span class=\\\"hljs-operator\\\">|</span> <span class=\\\"hljs-keyword\\\">NULL</span>    <span class=\\\"hljs-operator\\\">|</span> <span class=\\\"hljs-keyword\\\">NULL</span> <span class=\\\"hljs-operator\\\">|</span> <span class=\\\"hljs-keyword\\\">NULL</span> <span class=\\\"hljs-operator\\\">|</span> <span class=\\\"hljs-keyword\\\">No</span> tables used  <span class=\\\"hljs-operator\\\">|</span>\\n<span class=\\\"hljs-operator\\\">|</span> <span class=\\\"hljs-keyword\\\">NULL</span> <span class=\\\"hljs-operator\\\">|</span> <span class=\\\"hljs-keyword\\\">UNION</span> <span class=\\\"hljs-keyword\\\">RESULT</span> <span class=\\\"hljs-operator\\\">|</span> <span class=\\\"hljs-operator\\\">&lt;</span>union1,<span class=\\\"hljs-number\\\">2</span><span class=\\\"hljs-operator\\\">&gt;</span> <span class=\\\"hljs-operator\\\">|</span> <span class=\\\"hljs-keyword\\\">ALL</span>  <span class=\\\"hljs-operator\\\">|</span> <span class=\\\"hljs-keyword\\\">NULL</span>          <span class=\\\"hljs-operator\\\">|</span> <span class=\\\"hljs-keyword\\\">NULL</span> <span class=\\\"hljs-operator\\\">|</span> <span class=\\\"hljs-keyword\\\">NULL</span>    <span class=\\\"hljs-operator\\\">|</span> <span class=\\\"hljs-keyword\\\">NULL</span> <span class=\\\"hljs-operator\\\">|</span> <span class=\\\"hljs-keyword\\\">NULL</span> <span class=\\\"hljs-operator\\\">|</span> <span class=\\\"hljs-keyword\\\">Using</span> temporary <span class=\\\"hljs-operator\\\">|</span>\\n<span class=\\\"hljs-operator\\\">+</span><span class=\\\"hljs-comment\\\">----+--------------+------------+------+---------------+------+---------+------+------+-----------------+</span>\\n</code></pre>\\n</li>\\n</ol>\\n<h5 id=\\\"table\\\">table</h5>\\n<p>这一列表示 explain 的一行正在访问哪个表。</p>\\n<p>当 from 子句中有子查询时，table列是 <derivenN> 格式，表示当前查询依赖 id=N 的查询，于是先执行 id=N 的查询。</p>\\n<p>当有 union 时，UNION RESULT 的 table 列的值为 &lt;union1,2&gt;，1和2表示参与 union 的 select 行id。</p>\\n<h5 id=\\\"type（重点）\\\">type（重点）</h5>\\n<p>这一列表示关联类型或访问类型，即MySQL决定如何查找表中的行。</p>\\n<p>依次从最优到最差分别为：<strong>system &gt; const &gt; eq_ref &gt; ref &gt; fulltext &gt; ref_or_null &gt; index_merge &gt; unique_subquery &gt; index_subquery &gt; range &gt; index &gt; ALL</strong></p>\\n<ul>\\n<li><p><strong>NULL</strong>：mysql能够在优化阶段分解查询语句，在执行阶段用不着再访问表或索引。</p>\\n<p>例如：在索引列中选取最小值，可以单独查找索引来完成，不需要在执行时访问表</p>\\n<pre><code class=\\\"hljs language-sql\\\">mysql<span class=\\\"hljs-operator\\\">&gt;</span> explain <span class=\\\"hljs-keyword\\\">select</span> <span class=\\\"hljs-built_in\\\">min</span>(id) <span class=\\\"hljs-keyword\\\">from</span> film;\\n<span class=\\\"hljs-operator\\\">+</span><span class=\\\"hljs-comment\\\">----+-------------+-------+------+---------------+------+---------+------+------+------------------------------+</span>\\n<span class=\\\"hljs-operator\\\">|</span> id <span class=\\\"hljs-operator\\\">|</span> select_type <span class=\\\"hljs-operator\\\">|</span> <span class=\\\"hljs-keyword\\\">table</span> <span class=\\\"hljs-operator\\\">|</span> type <span class=\\\"hljs-operator\\\">|</span> possible_keys <span class=\\\"hljs-operator\\\">|</span> key  <span class=\\\"hljs-operator\\\">|</span> key_len <span class=\\\"hljs-operator\\\">|</span> <span class=\\\"hljs-keyword\\\">ref</span>  <span class=\\\"hljs-operator\\\">|</span> <span class=\\\"hljs-keyword\\\">rows</span> <span class=\\\"hljs-operator\\\">|</span> Extra                        <span class=\\\"hljs-operator\\\">|</span>\\n<span class=\\\"hljs-operator\\\">+</span><span class=\\\"hljs-comment\\\">----+-------------+-------+------+---------------+------+---------+------+------+------------------------------+</span>\\n<span class=\\\"hljs-operator\\\">|</span>  <span class=\\\"hljs-number\\\">1</span> <span class=\\\"hljs-operator\\\">|</span> SIMPLE      <span class=\\\"hljs-operator\\\">|</span> <span class=\\\"hljs-keyword\\\">NULL</span>  <span class=\\\"hljs-operator\\\">|</span> <span class=\\\"hljs-keyword\\\">NULL</span> <span class=\\\"hljs-operator\\\">|</span> <span class=\\\"hljs-keyword\\\">NULL</span>          <span class=\\\"hljs-operator\\\">|</span> <span class=\\\"hljs-keyword\\\">NULL</span> <span class=\\\"hljs-operator\\\">|</span> <span class=\\\"hljs-keyword\\\">NULL</span>    <span class=\\\"hljs-operator\\\">|</span> <span class=\\\"hljs-keyword\\\">NULL</span> <span class=\\\"hljs-operator\\\">|</span> <span class=\\\"hljs-keyword\\\">NULL</span> <span class=\\\"hljs-operator\\\">|</span> <span class=\\\"hljs-keyword\\\">Select</span> tables optimized away <span class=\\\"hljs-operator\\\">|</span>\\n<span class=\\\"hljs-operator\\\">+</span><span class=\\\"hljs-comment\\\">----+-------------+-------+------+---------------+------+---------+------+------+------</span>\\n</code></pre>\\n</li>\\n<li><p><strong>eq_ref</strong>：primary key 或 unique key 索引的所有部分被连接使用 ，最多只会返回一条符合条件的记录。这可能是在 const 之外最好的联接类型了，简单的 select 查询不会出现这种 type。</p>\\n<pre><code class=\\\"hljs language-sql\\\">mysql<span class=\\\"hljs-operator\\\">&gt;</span> explain <span class=\\\"hljs-keyword\\\">select</span> <span class=\\\"hljs-operator\\\">*</span> <span class=\\\"hljs-keyword\\\">from</span> film_actor <span class=\\\"hljs-keyword\\\">left</span> <span class=\\\"hljs-keyword\\\">join</span> film <span class=\\\"hljs-keyword\\\">on</span> film_actor.film_id <span class=\\\"hljs-operator\\\">=</span> film.id;\\n<span class=\\\"hljs-operator\\\">+</span><span class=\\\"hljs-comment\\\">----+-------------+------------+--------+---------------+-------------------+---------+-------------------------+------+-------------+</span>\\n<span class=\\\"hljs-operator\\\">|</span> id <span class=\\\"hljs-operator\\\">|</span> select_type <span class=\\\"hljs-operator\\\">|</span> <span class=\\\"hljs-keyword\\\">table</span>      <span class=\\\"hljs-operator\\\">|</span> type   <span class=\\\"hljs-operator\\\">|</span> possible_keys <span class=\\\"hljs-operator\\\">|</span> key               <span class=\\\"hljs-operator\\\">|</span> key_len <span class=\\\"hljs-operator\\\">|</span> <span class=\\\"hljs-keyword\\\">ref</span>                     <span class=\\\"hljs-operator\\\">|</span> <span class=\\\"hljs-keyword\\\">rows</span> <span class=\\\"hljs-operator\\\">|</span> Extra       <span class=\\\"hljs-operator\\\">|</span>\\n<span class=\\\"hljs-operator\\\">+</span><span class=\\\"hljs-comment\\\">----+-------------+------------+--------+---------------+-------------------+---------+-------------------------+------+-------------+</span>\\n<span class=\\\"hljs-operator\\\">|</span>  <span class=\\\"hljs-number\\\">1</span> <span class=\\\"hljs-operator\\\">|</span> SIMPLE      <span class=\\\"hljs-operator\\\">|</span> film_actor <span class=\\\"hljs-operator\\\">|</span> index  <span class=\\\"hljs-operator\\\">|</span> <span class=\\\"hljs-keyword\\\">NULL</span>          <span class=\\\"hljs-operator\\\">|</span> idx_film_actor_id <span class=\\\"hljs-operator\\\">|</span> <span class=\\\"hljs-number\\\">8</span>       <span class=\\\"hljs-operator\\\">|</span> <span class=\\\"hljs-keyword\\\">NULL</span>                    <span class=\\\"hljs-operator\\\">|</span>    <span class=\\\"hljs-number\\\">3</span> <span class=\\\"hljs-operator\\\">|</span> <span class=\\\"hljs-keyword\\\">Using</span> index <span class=\\\"hljs-operator\\\">|</span>\\n<span class=\\\"hljs-operator\\\">|</span>  <span class=\\\"hljs-number\\\">1</span> <span class=\\\"hljs-operator\\\">|</span> SIMPLE      <span class=\\\"hljs-operator\\\">|</span> film       <span class=\\\"hljs-operator\\\">|</span> eq_ref <span class=\\\"hljs-operator\\\">|</span> <span class=\\\"hljs-keyword\\\">PRIMARY</span>       <span class=\\\"hljs-operator\\\">|</span> <span class=\\\"hljs-keyword\\\">PRIMARY</span>           <span class=\\\"hljs-operator\\\">|</span> <span class=\\\"hljs-number\\\">4</span>       <span class=\\\"hljs-operator\\\">|</span> test.film_actor.film_id <span class=\\\"hljs-operator\\\">|</span>    <span class=\\\"hljs-number\\\">1</span> <span class=\\\"hljs-operator\\\">|</span> <span class=\\\"hljs-keyword\\\">NULL</span>        <span class=\\\"hljs-operator\\\">|</span>\\n<span class=\\\"hljs-operator\\\">+</span><span class=\\\"hljs-comment\\\">----+-------------+------------+--------+---------------+-------------------+---------+-------------------------+------+-------------+</span>\\n</code></pre>\\n</li>\\n<li><p><strong>ref</strong>：相比 <code>eq_ref</code>，不使用唯一索引，而是使用普通索引或者唯一性索引的<strong>部分前缀</strong>，索引要和某个值相比较，可能会找到多个符合条件的行。</p>\\n<pre><code class=\\\"hljs language-sql\\\"><span class=\\\"hljs-number\\\">1.</span> 简单 <span class=\\\"hljs-keyword\\\">select</span> 查询，name是普通索引（非唯一索引）\\nmysql<span class=\\\"hljs-operator\\\">&gt;</span> explain <span class=\\\"hljs-keyword\\\">select</span> <span class=\\\"hljs-operator\\\">*</span> <span class=\\\"hljs-keyword\\\">from</span> film <span class=\\\"hljs-keyword\\\">where</span> name <span class=\\\"hljs-operator\\\">=</span> &quot;film1&quot;;\\n<span class=\\\"hljs-operator\\\">+</span><span class=\\\"hljs-comment\\\">----+-------------+-------+------+---------------+----------+---------+-------+------+--------------------------+</span>\\n<span class=\\\"hljs-operator\\\">|</span> id <span class=\\\"hljs-operator\\\">|</span> select_type <span class=\\\"hljs-operator\\\">|</span> <span class=\\\"hljs-keyword\\\">table</span> <span class=\\\"hljs-operator\\\">|</span> type <span class=\\\"hljs-operator\\\">|</span> possible_keys <span class=\\\"hljs-operator\\\">|</span> key      <span class=\\\"hljs-operator\\\">|</span> key_len <span class=\\\"hljs-operator\\\">|</span> <span class=\\\"hljs-keyword\\\">ref</span>   <span class=\\\"hljs-operator\\\">|</span> <span class=\\\"hljs-keyword\\\">rows</span> <span class=\\\"hljs-operator\\\">|</span> Extra                    <span class=\\\"hljs-operator\\\">|</span>\\n<span class=\\\"hljs-operator\\\">+</span><span class=\\\"hljs-comment\\\">----+-------------+-------+------+---------------+----------+---------+-------+------+--------------------------+</span>\\n<span class=\\\"hljs-operator\\\">|</span>  <span class=\\\"hljs-number\\\">1</span> <span class=\\\"hljs-operator\\\">|</span> SIMPLE      <span class=\\\"hljs-operator\\\">|</span> film  <span class=\\\"hljs-operator\\\">|</span> <span class=\\\"hljs-keyword\\\">ref</span>  <span class=\\\"hljs-operator\\\">|</span> idx_name      <span class=\\\"hljs-operator\\\">|</span> idx_name <span class=\\\"hljs-operator\\\">|</span> <span class=\\\"hljs-number\\\">33</span>      <span class=\\\"hljs-operator\\\">|</span> const <span class=\\\"hljs-operator\\\">|</span>    <span class=\\\"hljs-number\\\">1</span> <span class=\\\"hljs-operator\\\">|</span> <span class=\\\"hljs-keyword\\\">Using</span> <span class=\\\"hljs-keyword\\\">where</span>; <span class=\\\"hljs-keyword\\\">Using</span> index <span class=\\\"hljs-operator\\\">|</span>\\n<span class=\\\"hljs-operator\\\">+</span><span class=\\\"hljs-comment\\\">----+-------------+-------+------+---------------+----------+---------+-------+------+--------------------------+</span>\\n\\n<span class=\\\"hljs-number\\\">2.</span>关联表查询，idx_film_actor_id是film_id和actor_id的联合索引，这里使用到了film_actor的左边前缀film_id部分。\\nmysql<span class=\\\"hljs-operator\\\">&gt;</span> explain <span class=\\\"hljs-keyword\\\">select</span> <span class=\\\"hljs-operator\\\">*</span> <span class=\\\"hljs-keyword\\\">from</span> film <span class=\\\"hljs-keyword\\\">left</span> <span class=\\\"hljs-keyword\\\">join</span> film_actor <span class=\\\"hljs-keyword\\\">on</span> film.id <span class=\\\"hljs-operator\\\">=</span> film_actor.film_id;\\n<span class=\\\"hljs-operator\\\">+</span><span class=\\\"hljs-comment\\\">----+-------------+------------+-------+-------------------+-------------------+---------+--------------+------+-------------+</span>\\n<span class=\\\"hljs-operator\\\">|</span> id <span class=\\\"hljs-operator\\\">|</span> select_type <span class=\\\"hljs-operator\\\">|</span> <span class=\\\"hljs-keyword\\\">table</span>      <span class=\\\"hljs-operator\\\">|</span> type  <span class=\\\"hljs-operator\\\">|</span> possible_keys     <span class=\\\"hljs-operator\\\">|</span> key               <span class=\\\"hljs-operator\\\">|</span> key_len <span class=\\\"hljs-operator\\\">|</span> <span class=\\\"hljs-keyword\\\">ref</span>          <span class=\\\"hljs-operator\\\">|</span> <span class=\\\"hljs-keyword\\\">rows</span> <span class=\\\"hljs-operator\\\">|</span> Extra       <span class=\\\"hljs-operator\\\">|</span>\\n<span class=\\\"hljs-operator\\\">+</span><span class=\\\"hljs-comment\\\">----+-------------+------------+-------+-------------------+-------------------+---------+--------------+------+-------------+</span>\\n<span class=\\\"hljs-operator\\\">|</span>  <span class=\\\"hljs-number\\\">1</span> <span class=\\\"hljs-operator\\\">|</span> SIMPLE      <span class=\\\"hljs-operator\\\">|</span> film       <span class=\\\"hljs-operator\\\">|</span> index <span class=\\\"hljs-operator\\\">|</span> <span class=\\\"hljs-keyword\\\">NULL</span>              <span class=\\\"hljs-operator\\\">|</span> idx_name          <span class=\\\"hljs-operator\\\">|</span> <span class=\\\"hljs-number\\\">33</span>      <span class=\\\"hljs-operator\\\">|</span> <span class=\\\"hljs-keyword\\\">NULL</span>         <span class=\\\"hljs-operator\\\">|</span>    <span class=\\\"hljs-number\\\">3</span> <span class=\\\"hljs-operator\\\">|</span> <span class=\\\"hljs-keyword\\\">Using</span> index <span class=\\\"hljs-operator\\\">|</span>\\n<span class=\\\"hljs-operator\\\">|</span>  <span class=\\\"hljs-number\\\">1</span> <span class=\\\"hljs-operator\\\">|</span> SIMPLE      <span class=\\\"hljs-operator\\\">|</span> film_actor <span class=\\\"hljs-operator\\\">|</span> <span class=\\\"hljs-keyword\\\">ref</span>   <span class=\\\"hljs-operator\\\">|</span> idx_film_actor_id <span class=\\\"hljs-operator\\\">|</span> idx_film_actor_id <span class=\\\"hljs-operator\\\">|</span> <span class=\\\"hljs-number\\\">4</span>       <span class=\\\"hljs-operator\\\">|</span> test.film.id <span class=\\\"hljs-operator\\\">|</span>    <span class=\\\"hljs-number\\\">1</span> <span class=\\\"hljs-operator\\\">|</span> <span class=\\\"hljs-keyword\\\">Using</span> index <span class=\\\"hljs-operator\\\">|</span>\\n<span class=\\\"hljs-operator\\\">+</span><span class=\\\"hljs-comment\\\">----+-------------+------------+-------+-------------------+-------------------+---------+--------------+--</span>\\n</code></pre>\\n</li>\\n<li><p><strong>ref_or_null</strong>：类似<code>ref</code>，但是可以搜索值为NULL的行。</p>\\n<pre><code class=\\\"hljs language-sql\\\">mysql<span class=\\\"hljs-operator\\\">&gt;</span> explain <span class=\\\"hljs-keyword\\\">select</span> <span class=\\\"hljs-operator\\\">*</span> <span class=\\\"hljs-keyword\\\">from</span> film <span class=\\\"hljs-keyword\\\">where</span> name <span class=\\\"hljs-operator\\\">=</span> &quot;film1&quot; <span class=\\\"hljs-keyword\\\">or</span> name <span class=\\\"hljs-keyword\\\">is</span> <span class=\\\"hljs-keyword\\\">null</span>;\\n<span class=\\\"hljs-operator\\\">+</span><span class=\\\"hljs-comment\\\">----+-------------+-------+-------------+---------------+----------+---------+-------+------+--------------------------+</span>\\n<span class=\\\"hljs-operator\\\">|</span> id <span class=\\\"hljs-operator\\\">|</span> select_type <span class=\\\"hljs-operator\\\">|</span> <span class=\\\"hljs-keyword\\\">table</span> <span class=\\\"hljs-operator\\\">|</span> type        <span class=\\\"hljs-operator\\\">|</span> possible_keys <span class=\\\"hljs-operator\\\">|</span> key      <span class=\\\"hljs-operator\\\">|</span> key_len <span class=\\\"hljs-operator\\\">|</span> <span class=\\\"hljs-keyword\\\">ref</span>   <span class=\\\"hljs-operator\\\">|</span> <span class=\\\"hljs-keyword\\\">rows</span> <span class=\\\"hljs-operator\\\">|</span> Extra                    <span class=\\\"hljs-operator\\\">|</span>\\n<span class=\\\"hljs-operator\\\">+</span><span class=\\\"hljs-comment\\\">----+-------------+-------+-------------+---------------+----------+---------+-------+------+--------------------------+</span>\\n<span class=\\\"hljs-operator\\\">|</span>  <span class=\\\"hljs-number\\\">1</span> <span class=\\\"hljs-operator\\\">|</span> SIMPLE      <span class=\\\"hljs-operator\\\">|</span> film  <span class=\\\"hljs-operator\\\">|</span> ref_or_null <span class=\\\"hljs-operator\\\">|</span> idx_name      <span class=\\\"hljs-operator\\\">|</span> idx_name <span class=\\\"hljs-operator\\\">|</span> <span class=\\\"hljs-number\\\">33</span>      <span class=\\\"hljs-operator\\\">|</span> const <span class=\\\"hljs-operator\\\">|</span>    <span class=\\\"hljs-number\\\">2</span> <span class=\\\"hljs-operator\\\">|</span> <span class=\\\"hljs-keyword\\\">Using</span> <span class=\\\"hljs-keyword\\\">where</span>; <span class=\\\"hljs-keyword\\\">Using</span> index <span class=\\\"hljs-operator\\\">|</span>\\n<span class=\\\"hljs-operator\\\">+</span><span class=\\\"hljs-comment\\\">----+-------------+-------+-------------+---------------+----------+---------+-------+------+--------------------------+</span>\\n</code></pre>\\n</li>\\n<li><p><strong>index_merge</strong>：表示使用了索引合并的优化方法。</p>\\n<p>例如下表：id是主键，tenant_id是普通索引。or 的时候没有用 primary key，而是使用了 primary key(id) 和 tenant_id 索引</p>\\n<pre><code class=\\\"hljs language-sql\\\">mysql<span class=\\\"hljs-operator\\\">&gt;</span> explain <span class=\\\"hljs-keyword\\\">select</span> <span class=\\\"hljs-operator\\\">*</span> <span class=\\\"hljs-keyword\\\">from</span> role <span class=\\\"hljs-keyword\\\">where</span> id <span class=\\\"hljs-operator\\\">=</span> <span class=\\\"hljs-number\\\">11011</span> <span class=\\\"hljs-keyword\\\">or</span> tenant_id <span class=\\\"hljs-operator\\\">=</span> <span class=\\\"hljs-number\\\">8888</span>;\\n<span class=\\\"hljs-operator\\\">+</span><span class=\\\"hljs-comment\\\">----+-------------+-------+-------------+-----------------------+-----------------------+---------+------+------+-------------------------------------------------+</span>\\n<span class=\\\"hljs-operator\\\">|</span> id <span class=\\\"hljs-operator\\\">|</span> select_type <span class=\\\"hljs-operator\\\">|</span> <span class=\\\"hljs-keyword\\\">table</span> <span class=\\\"hljs-operator\\\">|</span> type        <span class=\\\"hljs-operator\\\">|</span> possible_keys         <span class=\\\"hljs-operator\\\">|</span> key                   <span class=\\\"hljs-operator\\\">|</span> key_len <span class=\\\"hljs-operator\\\">|</span> <span class=\\\"hljs-keyword\\\">ref</span>  <span class=\\\"hljs-operator\\\">|</span> <span class=\\\"hljs-keyword\\\">rows</span> <span class=\\\"hljs-operator\\\">|</span> Extra                                           <span class=\\\"hljs-operator\\\">|</span>\\n<span class=\\\"hljs-operator\\\">+</span><span class=\\\"hljs-comment\\\">----+-------------+-------+-------------+-----------------------+-----------------------+---------+------+------+-------------------------------------------------+</span>\\n<span class=\\\"hljs-operator\\\">|</span>  <span class=\\\"hljs-number\\\">1</span> <span class=\\\"hljs-operator\\\">|</span> SIMPLE      <span class=\\\"hljs-operator\\\">|</span> role  <span class=\\\"hljs-operator\\\">|</span> index_merge <span class=\\\"hljs-operator\\\">|</span> <span class=\\\"hljs-keyword\\\">PRIMARY</span>,idx_tenant_id <span class=\\\"hljs-operator\\\">|</span> <span class=\\\"hljs-keyword\\\">PRIMARY</span>,idx_tenant_id <span class=\\\"hljs-operator\\\">|</span> <span class=\\\"hljs-number\\\">4</span>,<span class=\\\"hljs-number\\\">4</span>     <span class=\\\"hljs-operator\\\">|</span> <span class=\\\"hljs-keyword\\\">NULL</span> <span class=\\\"hljs-operator\\\">|</span>  <span class=\\\"hljs-number\\\">134</span> <span class=\\\"hljs-operator\\\">|</span> <span class=\\\"hljs-keyword\\\">Using</span> <span class=\\\"hljs-keyword\\\">union</span>(<span class=\\\"hljs-keyword\\\">PRIMARY</span>,idx_tenant_id); <span class=\\\"hljs-keyword\\\">Using</span> <span class=\\\"hljs-keyword\\\">where</span> <span class=\\\"hljs-operator\\\">|</span>\\n<span class=\\\"hljs-operator\\\">+</span><span class=\\\"hljs-comment\\\">----+-------------+-------+-------------+-----------------------+-----------------------+---------+------+------+-------------------------------------------------+</span>\\n</code></pre>\\n</li>\\n<li><p><strong>range</strong>：范围扫描通常出现在 in(), between ,&gt; ,&lt;, &gt;= 等操作中。使用一个索引来检索给定范围的行。</p>\\n<pre><code class=\\\"hljs language-sql\\\">mysql<span class=\\\"hljs-operator\\\">&gt;</span> explain <span class=\\\"hljs-keyword\\\">select</span> <span class=\\\"hljs-operator\\\">*</span> <span class=\\\"hljs-keyword\\\">from</span> actor <span class=\\\"hljs-keyword\\\">where</span> id <span class=\\\"hljs-operator\\\">&gt;</span> <span class=\\\"hljs-number\\\">1</span>;\\n<span class=\\\"hljs-operator\\\">+</span><span class=\\\"hljs-comment\\\">----+-------------+-------+-------+---------------+---------+---------+------+------+-------------+</span>\\n<span class=\\\"hljs-operator\\\">|</span> id <span class=\\\"hljs-operator\\\">|</span> select_type <span class=\\\"hljs-operator\\\">|</span> <span class=\\\"hljs-keyword\\\">table</span> <span class=\\\"hljs-operator\\\">|</span> type  <span class=\\\"hljs-operator\\\">|</span> possible_keys <span class=\\\"hljs-operator\\\">|</span> key     <span class=\\\"hljs-operator\\\">|</span> key_len <span class=\\\"hljs-operator\\\">|</span> <span class=\\\"hljs-keyword\\\">ref</span>  <span class=\\\"hljs-operator\\\">|</span> <span class=\\\"hljs-keyword\\\">rows</span> <span class=\\\"hljs-operator\\\">|</span> Extra       <span class=\\\"hljs-operator\\\">|</span>\\n<span class=\\\"hljs-operator\\\">+</span><span class=\\\"hljs-comment\\\">----+-------------+-------+-------+---------------+---------+---------+------+------+-------------+</span>\\n<span class=\\\"hljs-operator\\\">|</span>  <span class=\\\"hljs-number\\\">1</span> <span class=\\\"hljs-operator\\\">|</span> SIMPLE      <span class=\\\"hljs-operator\\\">|</span> actor <span class=\\\"hljs-operator\\\">|</span> <span class=\\\"hljs-keyword\\\">range</span> <span class=\\\"hljs-operator\\\">|</span> <span class=\\\"hljs-keyword\\\">PRIMARY</span>       <span class=\\\"hljs-operator\\\">|</span> <span class=\\\"hljs-keyword\\\">PRIMARY</span> <span class=\\\"hljs-operator\\\">|</span> <span class=\\\"hljs-number\\\">4</span>       <span class=\\\"hljs-operator\\\">|</span> <span class=\\\"hljs-keyword\\\">NULL</span> <span class=\\\"hljs-operator\\\">|</span>    <span class=\\\"hljs-number\\\">2</span> <span class=\\\"hljs-operator\\\">|</span> <span class=\\\"hljs-keyword\\\">Using</span> <span class=\\\"hljs-keyword\\\">where</span> <span class=\\\"hljs-operator\\\">|</span>\\n<span class=\\\"hljs-operator\\\">+</span><span class=\\\"hljs-comment\\\">----+-------------+-------+-------+---------------+---------+---------+------+------+-------------+</span>\\n</code></pre>\\n</li>\\n<li><p><strong>index</strong>：和ALL一样，不同就是mysql只需扫描索引树，这通常比ALL快一些。</p>\\n<pre><code class=\\\"hljs language-sql\\\">mysql<span class=\\\"hljs-operator\\\">&gt;</span> explain <span class=\\\"hljs-keyword\\\">select</span> <span class=\\\"hljs-built_in\\\">count</span>(<span class=\\\"hljs-operator\\\">*</span>) <span class=\\\"hljs-keyword\\\">from</span> film;\\n<span class=\\\"hljs-operator\\\">+</span><span class=\\\"hljs-comment\\\">----+-------------+-------+-------+---------------+----------+---------+------+------+-------------+</span>\\n<span class=\\\"hljs-operator\\\">|</span> id <span class=\\\"hljs-operator\\\">|</span> select_type <span class=\\\"hljs-operator\\\">|</span> <span class=\\\"hljs-keyword\\\">table</span> <span class=\\\"hljs-operator\\\">|</span> type  <span class=\\\"hljs-operator\\\">|</span> possible_keys <span class=\\\"hljs-operator\\\">|</span> key      <span class=\\\"hljs-operator\\\">|</span> key_len <span class=\\\"hljs-operator\\\">|</span> <span class=\\\"hljs-keyword\\\">ref</span>  <span class=\\\"hljs-operator\\\">|</span> <span class=\\\"hljs-keyword\\\">rows</span> <span class=\\\"hljs-operator\\\">|</span> Extra       <span class=\\\"hljs-operator\\\">|</span>\\n<span class=\\\"hljs-operator\\\">+</span><span class=\\\"hljs-comment\\\">----+-------------+-------+-------+---------------+----------+---------+------+------+-------------+</span>\\n<span class=\\\"hljs-operator\\\">|</span>  <span class=\\\"hljs-number\\\">1</span> <span class=\\\"hljs-operator\\\">|</span> SIMPLE      <span class=\\\"hljs-operator\\\">|</span> film  <span class=\\\"hljs-operator\\\">|</span> index <span class=\\\"hljs-operator\\\">|</span> <span class=\\\"hljs-keyword\\\">NULL</span>          <span class=\\\"hljs-operator\\\">|</span> idx_name <span class=\\\"hljs-operator\\\">|</span> <span class=\\\"hljs-number\\\">33</span>      <span class=\\\"hljs-operator\\\">|</span> <span class=\\\"hljs-keyword\\\">NULL</span> <span class=\\\"hljs-operator\\\">|</span>    <span class=\\\"hljs-number\\\">3</span> <span class=\\\"hljs-operator\\\">|</span> <span class=\\\"hljs-keyword\\\">Using</span> index <span class=\\\"hljs-operator\\\">|</span>\\n<span class=\\\"hljs-operator\\\">+</span><span class=\\\"hljs-comment\\\">----+-------------+-------+-------+---------------+----------+---------+------+------+-------------+</span>\\n</code></pre>\\n</li>\\n<li><p><strong>ALL</strong>：即全表扫描，意味着mysql需要从头到尾去查找所需要的行。通常情况下这需要增加索引来进行优化了</p>\\n<pre><code class=\\\"hljs language-sql\\\">mysql<span class=\\\"hljs-operator\\\">&gt;</span> explain <span class=\\\"hljs-keyword\\\">select</span> <span class=\\\"hljs-operator\\\">*</span> <span class=\\\"hljs-keyword\\\">from</span> actor;\\n<span class=\\\"hljs-operator\\\">+</span><span class=\\\"hljs-comment\\\">----+-------------+-------+------+---------------+------+---------+------+------+-------+</span>\\n<span class=\\\"hljs-operator\\\">|</span> id <span class=\\\"hljs-operator\\\">|</span> select_type <span class=\\\"hljs-operator\\\">|</span> <span class=\\\"hljs-keyword\\\">table</span> <span class=\\\"hljs-operator\\\">|</span> type <span class=\\\"hljs-operator\\\">|</span> possible_keys <span class=\\\"hljs-operator\\\">|</span> key  <span class=\\\"hljs-operator\\\">|</span> key_len <span class=\\\"hljs-operator\\\">|</span> <span class=\\\"hljs-keyword\\\">ref</span>  <span class=\\\"hljs-operator\\\">|</span> <span class=\\\"hljs-keyword\\\">rows</span> <span class=\\\"hljs-operator\\\">|</span> Extra <span class=\\\"hljs-operator\\\">|</span>\\n<span class=\\\"hljs-operator\\\">+</span><span class=\\\"hljs-comment\\\">----+-------------+-------+------+---------------+------+---------+------+------+-------+</span>\\n<span class=\\\"hljs-operator\\\">|</span>  <span class=\\\"hljs-number\\\">1</span> <span class=\\\"hljs-operator\\\">|</span> SIMPLE      <span class=\\\"hljs-operator\\\">|</span> actor <span class=\\\"hljs-operator\\\">|</span> <span class=\\\"hljs-keyword\\\">ALL</span>  <span class=\\\"hljs-operator\\\">|</span> <span class=\\\"hljs-keyword\\\">NULL</span>          <span class=\\\"hljs-operator\\\">|</span> <span class=\\\"hljs-keyword\\\">NULL</span> <span class=\\\"hljs-operator\\\">|</span> <span class=\\\"hljs-keyword\\\">NULL</span>    <span class=\\\"hljs-operator\\\">|</span> <span class=\\\"hljs-keyword\\\">NULL</span> <span class=\\\"hljs-operator\\\">|</span>    <span class=\\\"hljs-number\\\">2</span> <span class=\\\"hljs-operator\\\">|</span> <span class=\\\"hljs-keyword\\\">NULL</span>  <span class=\\\"hljs-operator\\\">|</span>\\n<span class=\\\"hljs-operator\\\">+</span><span class=\\\"hljs-comment\\\">----+-------------+-------+------+---------------+------+---------+------+------+-------+</span>\\n</code></pre>\\n</li>\\n</ul>\\n<h5 id=\\\"possible_keys\\\">possible_keys</h5>\\n<p>这一列显示查询可能使用哪些索引来查找。</p>\\n<p>explain 时可能出现 possible_keys 有列，而 key 显示 NULL 的情况，这种情况是因为表中数据不多，mysql认为索引对此查询帮助不大，选择了全表查询。</p>\\n<p>如果该列是NULL，则没有相关的索引。在这种情况下，可以通过检查 where 子句看是否可以创造一个适当的索引来提高查询性能，然后用 explain 查看效果。</p>\\n<h5 id=\\\"key\\\">key</h5>\\n<p>这一列显示mysql实际采用哪个索引来优化对该表的访问。\\n如果没有使用索引，则该列是 NULL。如果想强制mysql使用或忽视possible_keys列中的索引，在查询中使用 force index、ignore index。</p>\\n<h5 id=\\\"key_len\\\">key_len</h5>\\n<p>这一列显示了mysql在索引里使用的字节数，通过这个值可以算出具体使用了索引中的哪些列。</p>\\n<h5 id=\\\"ref\\\">ref</h5>\\n<p>这一列显示了在key列记录的索引中，表查找值所用到的列或常量，常见的有：const（常量），func，NULL，字段名（例：film.id）</p>\\n<h5 id=\\\"rows\\\">rows</h5>\\n<p>这一列是mysql估计要读取并检测的行数，注意这个不是结果集里的行数。</p>\\n<h5 id=\\\"filtered\\\">filtered</h5>\\n<p>某个表经过搜索条件过滤后剩余记录条数的百分比</p>\\n<h5 id=\\\"extra\\\">extra</h5>\\n<p>这一列展示的是额外信息。常见的重要值如下：</p>\\n<ul>\\n<li><p><strong>distinct</strong>: 一旦mysql找到了与行相联合匹配的行，就不再搜索了</p>\\n<pre><code class=\\\"hljs language-sql\\\">mysql<span class=\\\"hljs-operator\\\">&gt;</span> explain <span class=\\\"hljs-keyword\\\">select</span> <span class=\\\"hljs-keyword\\\">distinct</span> name <span class=\\\"hljs-keyword\\\">from</span> film <span class=\\\"hljs-keyword\\\">left</span> <span class=\\\"hljs-keyword\\\">join</span> film_actor <span class=\\\"hljs-keyword\\\">on</span> film.id <span class=\\\"hljs-operator\\\">=</span> film_actor.film_id;\\n<span class=\\\"hljs-operator\\\">+</span><span class=\\\"hljs-comment\\\">----+-------------+------------+-------+-------------------+-------------------+---------+--------------+------+------------------------------+</span>\\n<span class=\\\"hljs-operator\\\">|</span> id <span class=\\\"hljs-operator\\\">|</span> select_type <span class=\\\"hljs-operator\\\">|</span> <span class=\\\"hljs-keyword\\\">table</span>      <span class=\\\"hljs-operator\\\">|</span> type  <span class=\\\"hljs-operator\\\">|</span> possible_keys     <span class=\\\"hljs-operator\\\">|</span> key               <span class=\\\"hljs-operator\\\">|</span> key_len <span class=\\\"hljs-operator\\\">|</span> <span class=\\\"hljs-keyword\\\">ref</span>          <span class=\\\"hljs-operator\\\">|</span> <span class=\\\"hljs-keyword\\\">rows</span> <span class=\\\"hljs-operator\\\">|</span> Extra                        <span class=\\\"hljs-operator\\\">|</span>\\n<span class=\\\"hljs-operator\\\">+</span><span class=\\\"hljs-comment\\\">----+-------------+------------+-------+-------------------+-------------------+---------+--------------+------+------------------------------+</span>\\n<span class=\\\"hljs-operator\\\">|</span>  <span class=\\\"hljs-number\\\">1</span> <span class=\\\"hljs-operator\\\">|</span> SIMPLE      <span class=\\\"hljs-operator\\\">|</span> film       <span class=\\\"hljs-operator\\\">|</span> index <span class=\\\"hljs-operator\\\">|</span> idx_name          <span class=\\\"hljs-operator\\\">|</span> idx_name          <span class=\\\"hljs-operator\\\">|</span> <span class=\\\"hljs-number\\\">33</span>      <span class=\\\"hljs-operator\\\">|</span> <span class=\\\"hljs-keyword\\\">NULL</span>         <span class=\\\"hljs-operator\\\">|</span>    <span class=\\\"hljs-number\\\">3</span> <span class=\\\"hljs-operator\\\">|</span> <span class=\\\"hljs-keyword\\\">Using</span> index; <span class=\\\"hljs-keyword\\\">Using</span> temporary <span class=\\\"hljs-operator\\\">|</span>\\n<span class=\\\"hljs-operator\\\">|</span>  <span class=\\\"hljs-number\\\">1</span> <span class=\\\"hljs-operator\\\">|</span> SIMPLE      <span class=\\\"hljs-operator\\\">|</span> film_actor <span class=\\\"hljs-operator\\\">|</span> <span class=\\\"hljs-keyword\\\">ref</span>   <span class=\\\"hljs-operator\\\">|</span> idx_film_actor_id <span class=\\\"hljs-operator\\\">|</span> idx_film_actor_id <span class=\\\"hljs-operator\\\">|</span> <span class=\\\"hljs-number\\\">4</span>       <span class=\\\"hljs-operator\\\">|</span> test.film.id <span class=\\\"hljs-operator\\\">|</span>    <span class=\\\"hljs-number\\\">1</span> <span class=\\\"hljs-operator\\\">|</span> <span class=\\\"hljs-keyword\\\">Using</span> index; <span class=\\\"hljs-keyword\\\">Distinct</span>        <span class=\\\"hljs-operator\\\">|</span>\\n<span class=\\\"hljs-operator\\\">+</span><span class=\\\"hljs-comment\\\">----+-------------+------------+-------+-------------------+-------------------+---------+--------------+------+------------------------------+</span>\\n</code></pre>\\n</li>\\n<li><p><strong>Using index</strong>：这发生在对表的请求列都是同一索引的部分的时候，返回的列数据只使用了索引中的信息，而没有再去访问表中的行记录。是性能高的表现。</p>\\n<pre><code class=\\\"hljs language-sql\\\">mysql<span class=\\\"hljs-operator\\\">&gt;</span> explain <span class=\\\"hljs-keyword\\\">select</span> id <span class=\\\"hljs-keyword\\\">from</span> film <span class=\\\"hljs-keyword\\\">order</span> <span class=\\\"hljs-keyword\\\">by</span> id;\\n<span class=\\\"hljs-operator\\\">+</span><span class=\\\"hljs-comment\\\">----+-------------+-------+-------+---------------+---------+---------+------+------+-------------+</span>\\n<span class=\\\"hljs-operator\\\">|</span> id <span class=\\\"hljs-operator\\\">|</span> select_type <span class=\\\"hljs-operator\\\">|</span> <span class=\\\"hljs-keyword\\\">table</span> <span class=\\\"hljs-operator\\\">|</span> type  <span class=\\\"hljs-operator\\\">|</span> possible_keys <span class=\\\"hljs-operator\\\">|</span> key     <span class=\\\"hljs-operator\\\">|</span> key_len <span class=\\\"hljs-operator\\\">|</span> <span class=\\\"hljs-keyword\\\">ref</span>  <span class=\\\"hljs-operator\\\">|</span> <span class=\\\"hljs-keyword\\\">rows</span> <span class=\\\"hljs-operator\\\">|</span> Extra       <span class=\\\"hljs-operator\\\">|</span>\\n<span class=\\\"hljs-operator\\\">+</span><span class=\\\"hljs-comment\\\">----+-------------+-------+-------+---------------+---------+---------+------+------+-------------+</span>\\n<span class=\\\"hljs-operator\\\">|</span>  <span class=\\\"hljs-number\\\">1</span> <span class=\\\"hljs-operator\\\">|</span> SIMPLE      <span class=\\\"hljs-operator\\\">|</span> film  <span class=\\\"hljs-operator\\\">|</span> index <span class=\\\"hljs-operator\\\">|</span> <span class=\\\"hljs-keyword\\\">NULL</span>          <span class=\\\"hljs-operator\\\">|</span> <span class=\\\"hljs-keyword\\\">PRIMARY</span> <span class=\\\"hljs-operator\\\">|</span> <span class=\\\"hljs-number\\\">4</span>       <span class=\\\"hljs-operator\\\">|</span> <span class=\\\"hljs-keyword\\\">NULL</span> <span class=\\\"hljs-operator\\\">|</span>    <span class=\\\"hljs-number\\\">3</span> <span class=\\\"hljs-operator\\\">|</span> <span class=\\\"hljs-keyword\\\">Using</span> index <span class=\\\"hljs-operator\\\">|</span>\\n<span class=\\\"hljs-operator\\\">+</span><span class=\\\"hljs-comment\\\">----+-------------+-------+-------+---------------+---------+---------+------+------+-------------+</span>\\n</code></pre>\\n</li>\\n<li><p><strong>Using where</strong>：mysql服务器将在存储引擎检索行后再进行过滤。就是先读取整行数据，再按 where 条件进行检查，符合就留下，不符合就丢弃。</p>\\n<pre><code class=\\\"hljs language-sql\\\">mysql<span class=\\\"hljs-operator\\\">&gt;</span> explain <span class=\\\"hljs-keyword\\\">select</span> <span class=\\\"hljs-operator\\\">*</span> <span class=\\\"hljs-keyword\\\">from</span> film <span class=\\\"hljs-keyword\\\">where</span> id <span class=\\\"hljs-operator\\\">&gt;</span> <span class=\\\"hljs-number\\\">1</span>;\\n<span class=\\\"hljs-operator\\\">+</span><span class=\\\"hljs-comment\\\">----+-------------+-------+-------+---------------+----------+---------+------+------+--------------------------+</span>\\n<span class=\\\"hljs-operator\\\">|</span> id <span class=\\\"hljs-operator\\\">|</span> select_type <span class=\\\"hljs-operator\\\">|</span> <span class=\\\"hljs-keyword\\\">table</span> <span class=\\\"hljs-operator\\\">|</span> type  <span class=\\\"hljs-operator\\\">|</span> possible_keys <span class=\\\"hljs-operator\\\">|</span> key      <span class=\\\"hljs-operator\\\">|</span> key_len <span class=\\\"hljs-operator\\\">|</span> <span class=\\\"hljs-keyword\\\">ref</span>  <span class=\\\"hljs-operator\\\">|</span> <span class=\\\"hljs-keyword\\\">rows</span> <span class=\\\"hljs-operator\\\">|</span> Extra                    <span class=\\\"hljs-operator\\\">|</span>\\n<span class=\\\"hljs-operator\\\">+</span><span class=\\\"hljs-comment\\\">----+-------------+-------+-------+---------------+----------+---------+------+------+--------------------------+</span>\\n<span class=\\\"hljs-operator\\\">|</span>  <span class=\\\"hljs-number\\\">1</span> <span class=\\\"hljs-operator\\\">|</span> SIMPLE      <span class=\\\"hljs-operator\\\">|</span> film  <span class=\\\"hljs-operator\\\">|</span> index <span class=\\\"hljs-operator\\\">|</span> <span class=\\\"hljs-keyword\\\">PRIMARY</span>       <span class=\\\"hljs-operator\\\">|</span> idx_name <span class=\\\"hljs-operator\\\">|</span> <span class=\\\"hljs-number\\\">33</span>      <span class=\\\"hljs-operator\\\">|</span> <span class=\\\"hljs-keyword\\\">NULL</span> <span class=\\\"hljs-operator\\\">|</span>    <span class=\\\"hljs-number\\\">3</span> <span class=\\\"hljs-operator\\\">|</span> <span class=\\\"hljs-keyword\\\">Using</span> <span class=\\\"hljs-keyword\\\">where</span>; <span class=\\\"hljs-keyword\\\">Using</span> index <span class=\\\"hljs-operator\\\">|</span>\\n<span class=\\\"hljs-operator\\\">+</span><span class=\\\"hljs-comment\\\">----+-------------+-------+-------+---------------+----------+---------+------+------+--------------------------+</span>\\n</code></pre>\\n</li>\\n<li><p><strong>Using temporary</strong>：mysql需要创建一张临时表来处理查询。出现这种情况一般是要进行优化的，首先是想到用索引来优化。</p>\\n<pre><code class=\\\"hljs language-sql\\\"><span class=\\\"hljs-number\\\">1.</span> actor.name没有索引，此时创建了张临时表来<span class=\\\"hljs-keyword\\\">distinct</span>\\nmysql<span class=\\\"hljs-operator\\\">&gt;</span> explain <span class=\\\"hljs-keyword\\\">select</span> <span class=\\\"hljs-keyword\\\">distinct</span> name <span class=\\\"hljs-keyword\\\">from</span> actor;\\n<span class=\\\"hljs-operator\\\">+</span><span class=\\\"hljs-comment\\\">----+-------------+-------+------+---------------+------+---------+------+------+-----------------+</span>\\n<span class=\\\"hljs-operator\\\">|</span> id <span class=\\\"hljs-operator\\\">|</span> select_type <span class=\\\"hljs-operator\\\">|</span> <span class=\\\"hljs-keyword\\\">table</span> <span class=\\\"hljs-operator\\\">|</span> type <span class=\\\"hljs-operator\\\">|</span> possible_keys <span class=\\\"hljs-operator\\\">|</span> key  <span class=\\\"hljs-operator\\\">|</span> key_len <span class=\\\"hljs-operator\\\">|</span> <span class=\\\"hljs-keyword\\\">ref</span>  <span class=\\\"hljs-operator\\\">|</span> <span class=\\\"hljs-keyword\\\">rows</span> <span class=\\\"hljs-operator\\\">|</span> Extra           <span class=\\\"hljs-operator\\\">|</span>\\n<span class=\\\"hljs-operator\\\">+</span><span class=\\\"hljs-comment\\\">----+-------------+-------+------+---------------+------+---------+------+------+-----------------+</span>\\n<span class=\\\"hljs-operator\\\">|</span>  <span class=\\\"hljs-number\\\">1</span> <span class=\\\"hljs-operator\\\">|</span> SIMPLE      <span class=\\\"hljs-operator\\\">|</span> actor <span class=\\\"hljs-operator\\\">|</span> <span class=\\\"hljs-keyword\\\">ALL</span>  <span class=\\\"hljs-operator\\\">|</span> <span class=\\\"hljs-keyword\\\">NULL</span>          <span class=\\\"hljs-operator\\\">|</span> <span class=\\\"hljs-keyword\\\">NULL</span> <span class=\\\"hljs-operator\\\">|</span> <span class=\\\"hljs-keyword\\\">NULL</span>    <span class=\\\"hljs-operator\\\">|</span> <span class=\\\"hljs-keyword\\\">NULL</span> <span class=\\\"hljs-operator\\\">|</span>    <span class=\\\"hljs-number\\\">2</span> <span class=\\\"hljs-operator\\\">|</span> <span class=\\\"hljs-keyword\\\">Using</span> temporary <span class=\\\"hljs-operator\\\">|</span>\\n<span class=\\\"hljs-operator\\\">+</span><span class=\\\"hljs-comment\\\">----+-------------+-------+------+---------------+------+---------+------+------+-----------------+</span>\\n\\n<span class=\\\"hljs-number\\\">2.</span> film.name建立了idx_name索引，此时查询时extra是<span class=\\\"hljs-keyword\\\">using</span> index,没有用临时表\\nmysql<span class=\\\"hljs-operator\\\">&gt;</span> explain <span class=\\\"hljs-keyword\\\">select</span> <span class=\\\"hljs-keyword\\\">distinct</span> name <span class=\\\"hljs-keyword\\\">from</span> film;\\n<span class=\\\"hljs-operator\\\">+</span><span class=\\\"hljs-comment\\\">----+-------------+-------+-------+---------------+----------+---------+------+------+-------------+</span>\\n<span class=\\\"hljs-operator\\\">|</span> id <span class=\\\"hljs-operator\\\">|</span> select_type <span class=\\\"hljs-operator\\\">|</span> <span class=\\\"hljs-keyword\\\">table</span> <span class=\\\"hljs-operator\\\">|</span> type  <span class=\\\"hljs-operator\\\">|</span> possible_keys <span class=\\\"hljs-operator\\\">|</span> key      <span class=\\\"hljs-operator\\\">|</span> key_len <span class=\\\"hljs-operator\\\">|</span> <span class=\\\"hljs-keyword\\\">ref</span>  <span class=\\\"hljs-operator\\\">|</span> <span class=\\\"hljs-keyword\\\">rows</span> <span class=\\\"hljs-operator\\\">|</span> Extra       <span class=\\\"hljs-operator\\\">|</span>\\n<span class=\\\"hljs-operator\\\">+</span><span class=\\\"hljs-comment\\\">----+-------------+-------+-------+---------------+----------+---------+------+------+-------------+</span>\\n<span class=\\\"hljs-operator\\\">|</span>  <span class=\\\"hljs-number\\\">1</span> <span class=\\\"hljs-operator\\\">|</span> SIMPLE      <span class=\\\"hljs-operator\\\">|</span> film  <span class=\\\"hljs-operator\\\">|</span> index <span class=\\\"hljs-operator\\\">|</span> idx_name      <span class=\\\"hljs-operator\\\">|</span> idx_name <span class=\\\"hljs-operator\\\">|</span> <span class=\\\"hljs-number\\\">33</span>      <span class=\\\"hljs-operator\\\">|</span> <span class=\\\"hljs-keyword\\\">NULL</span> <span class=\\\"hljs-operator\\\">|</span>    <span class=\\\"hljs-number\\\">3</span> <span class=\\\"hljs-operator\\\">|</span> <span class=\\\"hljs-keyword\\\">Using</span> index <span class=\\\"hljs-operator\\\">|</span>\\n<span class=\\\"hljs-operator\\\">+</span><span class=\\\"hljs-comment\\\">----+-------------+-------+-------+---------------+----------+---------+------+------+-------------+</span>\\n</code></pre>\\n</li>\\n<li><p><strong>Using filesort</strong>：mysql 会对结果使用一个外部索引排序，而不是按索引次序从表里读取行。此时mysql会根据联接类型浏览所有符合条件的记录，并保存排序关键字和行指针，然后排序关键字并按顺序检索行信息。这种情况下一般也是要考虑使用索引来优化的。</p>\\n<pre><code class=\\\"hljs language-sql\\\"><span class=\\\"hljs-number\\\">1.</span> actor.name未创建索引，会浏览actor整个表，保存排序关键字name和对应的id，然后排序name并检索行记录\\nmysql<span class=\\\"hljs-operator\\\">&gt;</span> explain <span class=\\\"hljs-keyword\\\">select</span> <span class=\\\"hljs-operator\\\">*</span> <span class=\\\"hljs-keyword\\\">from</span> actor <span class=\\\"hljs-keyword\\\">order</span> <span class=\\\"hljs-keyword\\\">by</span> name;\\n<span class=\\\"hljs-operator\\\">+</span><span class=\\\"hljs-comment\\\">----+-------------+-------+------+---------------+------+---------+------+------+----------------+</span>\\n<span class=\\\"hljs-operator\\\">|</span> id <span class=\\\"hljs-operator\\\">|</span> select_type <span class=\\\"hljs-operator\\\">|</span> <span class=\\\"hljs-keyword\\\">table</span> <span class=\\\"hljs-operator\\\">|</span> type <span class=\\\"hljs-operator\\\">|</span> possible_keys <span class=\\\"hljs-operator\\\">|</span> key  <span class=\\\"hljs-operator\\\">|</span> key_len <span class=\\\"hljs-operator\\\">|</span> <span class=\\\"hljs-keyword\\\">ref</span>  <span class=\\\"hljs-operator\\\">|</span> <span class=\\\"hljs-keyword\\\">rows</span> <span class=\\\"hljs-operator\\\">|</span> Extra          <span class=\\\"hljs-operator\\\">|</span>\\n<span class=\\\"hljs-operator\\\">+</span><span class=\\\"hljs-comment\\\">----+-------------+-------+------+---------------+------+---------+------+------+----------------+</span>\\n<span class=\\\"hljs-operator\\\">|</span>  <span class=\\\"hljs-number\\\">1</span> <span class=\\\"hljs-operator\\\">|</span> SIMPLE      <span class=\\\"hljs-operator\\\">|</span> actor <span class=\\\"hljs-operator\\\">|</span> <span class=\\\"hljs-keyword\\\">ALL</span>  <span class=\\\"hljs-operator\\\">|</span> <span class=\\\"hljs-keyword\\\">NULL</span>          <span class=\\\"hljs-operator\\\">|</span> <span class=\\\"hljs-keyword\\\">NULL</span> <span class=\\\"hljs-operator\\\">|</span> <span class=\\\"hljs-keyword\\\">NULL</span>    <span class=\\\"hljs-operator\\\">|</span> <span class=\\\"hljs-keyword\\\">NULL</span> <span class=\\\"hljs-operator\\\">|</span>    <span class=\\\"hljs-number\\\">2</span> <span class=\\\"hljs-operator\\\">|</span> <span class=\\\"hljs-keyword\\\">Using</span> filesort <span class=\\\"hljs-operator\\\">|</span>\\n<span class=\\\"hljs-operator\\\">+</span><span class=\\\"hljs-comment\\\">----+-------------+-------+------+---------------+------+---------+------+------+----------------+</span>\\n\\n<span class=\\\"hljs-number\\\">2.</span> film.name建立了idx_name索引,此时查询时extra是<span class=\\\"hljs-keyword\\\">using</span> index\\nmysql<span class=\\\"hljs-operator\\\">&gt;</span> explain <span class=\\\"hljs-keyword\\\">select</span> <span class=\\\"hljs-operator\\\">*</span> <span class=\\\"hljs-keyword\\\">from</span> film <span class=\\\"hljs-keyword\\\">order</span> <span class=\\\"hljs-keyword\\\">by</span> name;\\n<span class=\\\"hljs-operator\\\">+</span><span class=\\\"hljs-comment\\\">----+-------------+-------+-------+---------------+----------+---------+------+------+-------------+</span>\\n<span class=\\\"hljs-operator\\\">|</span> id <span class=\\\"hljs-operator\\\">|</span> select_type <span class=\\\"hljs-operator\\\">|</span> <span class=\\\"hljs-keyword\\\">table</span> <span class=\\\"hljs-operator\\\">|</span> type  <span class=\\\"hljs-operator\\\">|</span> possible_keys <span class=\\\"hljs-operator\\\">|</span> key      <span class=\\\"hljs-operator\\\">|</span> key_len <span class=\\\"hljs-operator\\\">|</span> <span class=\\\"hljs-keyword\\\">ref</span>  <span class=\\\"hljs-operator\\\">|</span> <span class=\\\"hljs-keyword\\\">rows</span> <span class=\\\"hljs-operator\\\">|</span> Extra       <span class=\\\"hljs-operator\\\">|</span>\\n<span class=\\\"hljs-operator\\\">+</span><span class=\\\"hljs-comment\\\">----+-------------+-------+-------+---------------+----------+---------+------+------+-------------+</span>\\n<span class=\\\"hljs-operator\\\">|</span>  <span class=\\\"hljs-number\\\">1</span> <span class=\\\"hljs-operator\\\">|</span> SIMPLE      <span class=\\\"hljs-operator\\\">|</span> film  <span class=\\\"hljs-operator\\\">|</span> index <span class=\\\"hljs-operator\\\">|</span> <span class=\\\"hljs-keyword\\\">NULL</span>          <span class=\\\"hljs-operator\\\">|</span> idx_name <span class=\\\"hljs-operator\\\">|</span> <span class=\\\"hljs-number\\\">33</span>      <span class=\\\"hljs-operator\\\">|</span> <span class=\\\"hljs-keyword\\\">NULL</span> <span class=\\\"hljs-operator\\\">|</span>    <span class=\\\"hljs-number\\\">3</span> <span class=\\\"hljs-operator\\\">|</span> <span class=\\\"hljs-keyword\\\">Using</span> index <span class=\\\"hljs-operator\\\">|</span>\\n<span class=\\\"hljs-operator\\\">+</span><span class=\\\"hljs-comment\\\">----+-------------+-------+-------+---------------+----------+---------+------+------+-------------+</span>\\n</code></pre>\\n</li>\\n</ul>\\n<h4 id=\\\"匹配过程\\\">匹配过程</h4>\\n<p>假如我们有表：</p>\\n<pre><code class=\\\"hljs language-sql\\\">mysql root<span class=\\\"hljs-variable\\\">@youyinnn</span>.top:test<span class=\\\"hljs-operator\\\">&gt;</span> <span class=\\\"hljs-keyword\\\">show</span> <span class=\\\"hljs-keyword\\\">create</span> <span class=\\\"hljs-keyword\\\">table</span> mytable3\\\\G\\n<span class=\\\"hljs-operator\\\">*</span><span class=\\\"hljs-operator\\\">*</span><span class=\\\"hljs-operator\\\">*</span><span class=\\\"hljs-operator\\\">*</span><span class=\\\"hljs-operator\\\">*</span><span class=\\\"hljs-operator\\\">*</span><span class=\\\"hljs-operator\\\">*</span><span class=\\\"hljs-operator\\\">*</span><span class=\\\"hljs-operator\\\">*</span><span class=\\\"hljs-operator\\\">*</span><span class=\\\"hljs-operator\\\">*</span><span class=\\\"hljs-operator\\\">*</span><span class=\\\"hljs-operator\\\">*</span><span class=\\\"hljs-operator\\\">*</span><span class=\\\"hljs-operator\\\">*</span><span class=\\\"hljs-operator\\\">*</span><span class=\\\"hljs-operator\\\">*</span><span class=\\\"hljs-operator\\\">*</span><span class=\\\"hljs-operator\\\">*</span><span class=\\\"hljs-operator\\\">*</span><span class=\\\"hljs-operator\\\">*</span><span class=\\\"hljs-operator\\\">*</span><span class=\\\"hljs-operator\\\">*</span><span class=\\\"hljs-operator\\\">*</span><span class=\\\"hljs-operator\\\">*</span><span class=\\\"hljs-operator\\\">*</span><span class=\\\"hljs-operator\\\">*</span>[ <span class=\\\"hljs-number\\\">1.</span> <span class=\\\"hljs-type\\\">row</span> ]<span class=\\\"hljs-operator\\\">*</span><span class=\\\"hljs-operator\\\">*</span><span class=\\\"hljs-operator\\\">*</span><span class=\\\"hljs-operator\\\">*</span><span class=\\\"hljs-operator\\\">*</span><span class=\\\"hljs-operator\\\">*</span><span class=\\\"hljs-operator\\\">*</span><span class=\\\"hljs-operator\\\">*</span><span class=\\\"hljs-operator\\\">*</span><span class=\\\"hljs-operator\\\">*</span><span class=\\\"hljs-operator\\\">*</span><span class=\\\"hljs-operator\\\">*</span><span class=\\\"hljs-operator\\\">*</span><span class=\\\"hljs-operator\\\">*</span><span class=\\\"hljs-operator\\\">*</span><span class=\\\"hljs-operator\\\">*</span><span class=\\\"hljs-operator\\\">*</span><span class=\\\"hljs-operator\\\">*</span><span class=\\\"hljs-operator\\\">*</span><span class=\\\"hljs-operator\\\">*</span><span class=\\\"hljs-operator\\\">*</span><span class=\\\"hljs-operator\\\">*</span><span class=\\\"hljs-operator\\\">*</span><span class=\\\"hljs-operator\\\">*</span><span class=\\\"hljs-operator\\\">*</span><span class=\\\"hljs-operator\\\">*</span><span class=\\\"hljs-operator\\\">*</span>\\n<span class=\\\"hljs-keyword\\\">Table</span>        <span class=\\\"hljs-operator\\\">|</span> mytable3\\n<span class=\\\"hljs-keyword\\\">Create</span> <span class=\\\"hljs-keyword\\\">Table</span> <span class=\\\"hljs-operator\\\">|</span> <span class=\\\"hljs-keyword\\\">CREATE</span> <span class=\\\"hljs-keyword\\\">TABLE</span> `mytable3` (\\n  `a` <span class=\\\"hljs-type\\\">int</span>(<span class=\\\"hljs-number\\\">11</span>) <span class=\\\"hljs-keyword\\\">NOT</span> <span class=\\\"hljs-keyword\\\">NULL</span> AUTO_INCREMENT,\\n  `b` <span class=\\\"hljs-type\\\">varchar</span>(<span class=\\\"hljs-number\\\">30</span>) <span class=\\\"hljs-keyword\\\">NOT</span> <span class=\\\"hljs-keyword\\\">NULL</span>,\\n  `c` <span class=\\\"hljs-type\\\">varchar</span>(<span class=\\\"hljs-number\\\">20</span>) <span class=\\\"hljs-keyword\\\">NOT</span> <span class=\\\"hljs-keyword\\\">NULL</span>,\\n  `d` <span class=\\\"hljs-type\\\">int</span>(<span class=\\\"hljs-number\\\">11</span>) <span class=\\\"hljs-keyword\\\">DEFAULT</span> <span class=\\\"hljs-keyword\\\">NULL</span>,\\n  `e` <span class=\\\"hljs-type\\\">int</span>(<span class=\\\"hljs-number\\\">11</span>) <span class=\\\"hljs-keyword\\\">DEFAULT</span> <span class=\\\"hljs-keyword\\\">NULL</span>,\\n  <span class=\\\"hljs-keyword\\\">PRIMARY</span> KEY (`a`,`b`,`c`)\\n) ENGINE<span class=\\\"hljs-operator\\\">=</span>InnoDB AUTO_INCREMENT<span class=\\\"hljs-operator\\\">=</span><span class=\\\"hljs-number\\\">7</span> <span class=\\\"hljs-keyword\\\">DEFAULT</span> CHARSET<span class=\\\"hljs-operator\\\">=</span>utf8\\n</code></pre>\\n<p>并且有3个列组成的聚集索引：</p>\\n<pre><code class=\\\"hljs language-sql\\\">mysql root<span class=\\\"hljs-variable\\\">@youyinnn</span>.top:test<span class=\\\"hljs-operator\\\">&gt;</span> <span class=\\\"hljs-keyword\\\">show</span> index <span class=\\\"hljs-keyword\\\">from</span> mytable3;\\n<span class=\\\"hljs-operator\\\">+</span><span class=\\\"hljs-comment\\\">----------+------------+----------+--------------+-------------+-----------+-------------+----------+--------+------+------------+---------+---------------+</span>\\n<span class=\\\"hljs-operator\\\">|</span> <span class=\\\"hljs-keyword\\\">Table</span>    <span class=\\\"hljs-operator\\\">|</span> Non_unique <span class=\\\"hljs-operator\\\">|</span> Key_name <span class=\\\"hljs-operator\\\">|</span> Seq_in_index <span class=\\\"hljs-operator\\\">|</span> Column_name <span class=\\\"hljs-operator\\\">|</span> <span class=\\\"hljs-keyword\\\">Collation</span> <span class=\\\"hljs-operator\\\">|</span> <span class=\\\"hljs-keyword\\\">Cardinality</span> <span class=\\\"hljs-operator\\\">|</span> Sub_part <span class=\\\"hljs-operator\\\">|</span> Packed <span class=\\\"hljs-operator\\\">|</span> <span class=\\\"hljs-keyword\\\">Null</span> <span class=\\\"hljs-operator\\\">|</span> Index_type <span class=\\\"hljs-operator\\\">|</span> Comment <span class=\\\"hljs-operator\\\">|</span> Index_comment <span class=\\\"hljs-operator\\\">|</span>\\n<span class=\\\"hljs-operator\\\">+</span><span class=\\\"hljs-comment\\\">----------+------------+----------+--------------+-------------+-----------+-------------+----------+--------+------+------------+---------+---------------+</span>\\n<span class=\\\"hljs-operator\\\">|</span> mytable3 <span class=\\\"hljs-operator\\\">|</span> <span class=\\\"hljs-number\\\">0</span>          <span class=\\\"hljs-operator\\\">|</span> <span class=\\\"hljs-keyword\\\">PRIMARY</span>  <span class=\\\"hljs-operator\\\">|</span> <span class=\\\"hljs-number\\\">1</span>            <span class=\\\"hljs-operator\\\">|</span> a           <span class=\\\"hljs-operator\\\">|</span> A         <span class=\\\"hljs-operator\\\">|</span> <span class=\\\"hljs-number\\\">6</span>           <span class=\\\"hljs-operator\\\">|</span> <span class=\\\"hljs-operator\\\">&lt;</span><span class=\\\"hljs-keyword\\\">null</span><span class=\\\"hljs-operator\\\">&gt;</span>   <span class=\\\"hljs-operator\\\">|</span> <span class=\\\"hljs-operator\\\">&lt;</span><span class=\\\"hljs-keyword\\\">null</span><span class=\\\"hljs-operator\\\">&gt;</span> <span class=\\\"hljs-operator\\\">|</span>      <span class=\\\"hljs-operator\\\">|</span> BTREE      <span class=\\\"hljs-operator\\\">|</span>         <span class=\\\"hljs-operator\\\">|</span>               <span class=\\\"hljs-operator\\\">|</span>\\n<span class=\\\"hljs-operator\\\">|</span> mytable3 <span class=\\\"hljs-operator\\\">|</span> <span class=\\\"hljs-number\\\">0</span>          <span class=\\\"hljs-operator\\\">|</span> <span class=\\\"hljs-keyword\\\">PRIMARY</span>  <span class=\\\"hljs-operator\\\">|</span> <span class=\\\"hljs-number\\\">2</span>            <span class=\\\"hljs-operator\\\">|</span> b           <span class=\\\"hljs-operator\\\">|</span> A         <span class=\\\"hljs-operator\\\">|</span> <span class=\\\"hljs-number\\\">6</span>           <span class=\\\"hljs-operator\\\">|</span> <span class=\\\"hljs-operator\\\">&lt;</span><span class=\\\"hljs-keyword\\\">null</span><span class=\\\"hljs-operator\\\">&gt;</span>   <span class=\\\"hljs-operator\\\">|</span> <span class=\\\"hljs-operator\\\">&lt;</span><span class=\\\"hljs-keyword\\\">null</span><span class=\\\"hljs-operator\\\">&gt;</span> <span class=\\\"hljs-operator\\\">|</span>      <span class=\\\"hljs-operator\\\">|</span> BTREE      <span class=\\\"hljs-operator\\\">|</span>         <span class=\\\"hljs-operator\\\">|</span>               <span class=\\\"hljs-operator\\\">|</span>\\n<span class=\\\"hljs-operator\\\">|</span> mytable3 <span class=\\\"hljs-operator\\\">|</span> <span class=\\\"hljs-number\\\">0</span>          <span class=\\\"hljs-operator\\\">|</span> <span class=\\\"hljs-keyword\\\">PRIMARY</span>  <span class=\\\"hljs-operator\\\">|</span> <span class=\\\"hljs-number\\\">3</span>            <span class=\\\"hljs-operator\\\">|</span> c           <span class=\\\"hljs-operator\\\">|</span> A         <span class=\\\"hljs-operator\\\">|</span> <span class=\\\"hljs-number\\\">6</span>           <span class=\\\"hljs-operator\\\">|</span> <span class=\\\"hljs-operator\\\">&lt;</span><span class=\\\"hljs-keyword\\\">null</span><span class=\\\"hljs-operator\\\">&gt;</span>   <span class=\\\"hljs-operator\\\">|</span> <span class=\\\"hljs-operator\\\">&lt;</span><span class=\\\"hljs-keyword\\\">null</span><span class=\\\"hljs-operator\\\">&gt;</span> <span class=\\\"hljs-operator\\\">|</span>      <span class=\\\"hljs-operator\\\">|</span> BTREE      <span class=\\\"hljs-operator\\\">|</span>         <span class=\\\"hljs-operator\\\">|</span>               <span class=\\\"hljs-operator\\\">|</span>\\n<span class=\\\"hljs-operator\\\">+</span><span class=\\\"hljs-comment\\\">----------+------------+----------+--------------+-------------+-----------+-------------+----------+--------+------+------------+---------+---------------+</span>\\n</code></pre>\\n<h5 id=\\\"全列查询\\\">全列查询</h5>\\n<p>如果我们提供了所有主键的等值条件，那么就会使用const类型的查询</p>\\n<pre><code class=\\\"hljs language-sql\\\">mysql root<span class=\\\"hljs-variable\\\">@youyinnn</span>.top:test<span class=\\\"hljs-operator\\\">&gt;</span> explain <span class=\\\"hljs-keyword\\\">select</span> <span class=\\\"hljs-operator\\\">*</span> <span class=\\\"hljs-keyword\\\">from</span> mytable3 <span class=\\\"hljs-keyword\\\">where</span> a <span class=\\\"hljs-operator\\\">=</span> <span class=\\\"hljs-string\\\">&#x27;1&#x27;</span> <span class=\\\"hljs-keyword\\\">and</span> b <span class=\\\"hljs-operator\\\">=</span> <span class=\\\"hljs-string\\\">&#x27;name&#x27;</span> <span class=\\\"hljs-keyword\\\">and</span> c <span class=\\\"hljs-operator\\\">=</span> <span class=\\\"hljs-string\\\">&#x27;age&#x27;</span>;\\n<span class=\\\"hljs-operator\\\">+</span><span class=\\\"hljs-comment\\\">----+-------------+----------+------------+-------+---------------+---------+---------+-------------------+------+----------+--------+</span>\\n<span class=\\\"hljs-operator\\\">|</span> id <span class=\\\"hljs-operator\\\">|</span> select_type <span class=\\\"hljs-operator\\\">|</span> <span class=\\\"hljs-keyword\\\">table</span>    <span class=\\\"hljs-operator\\\">|</span> partitions <span class=\\\"hljs-operator\\\">|</span> type  <span class=\\\"hljs-operator\\\">|</span> possible_keys <span class=\\\"hljs-operator\\\">|</span> key     <span class=\\\"hljs-operator\\\">|</span> key_len <span class=\\\"hljs-operator\\\">|</span> <span class=\\\"hljs-keyword\\\">ref</span>               <span class=\\\"hljs-operator\\\">|</span> <span class=\\\"hljs-keyword\\\">rows</span> <span class=\\\"hljs-operator\\\">|</span> filtered <span class=\\\"hljs-operator\\\">|</span> Extra  <span class=\\\"hljs-operator\\\">|</span>\\n<span class=\\\"hljs-operator\\\">+</span><span class=\\\"hljs-comment\\\">----+-------------+----------+------------+-------+---------------+---------+---------+-------------------+------+----------+--------+</span>\\n<span class=\\\"hljs-operator\\\">|</span> <span class=\\\"hljs-number\\\">1</span>  <span class=\\\"hljs-operator\\\">|</span> SIMPLE      <span class=\\\"hljs-operator\\\">|</span> mytable3 <span class=\\\"hljs-operator\\\">|</span> <span class=\\\"hljs-operator\\\">&lt;</span><span class=\\\"hljs-keyword\\\">null</span><span class=\\\"hljs-operator\\\">&gt;</span>     <span class=\\\"hljs-operator\\\">|</span> const <span class=\\\"hljs-operator\\\">|</span> <span class=\\\"hljs-keyword\\\">PRIMARY</span>       <span class=\\\"hljs-operator\\\">|</span> <span class=\\\"hljs-keyword\\\">PRIMARY</span> <span class=\\\"hljs-operator\\\">|</span> <span class=\\\"hljs-number\\\">158</span>     <span class=\\\"hljs-operator\\\">|</span> const,const,const <span class=\\\"hljs-operator\\\">|</span> <span class=\\\"hljs-number\\\">1</span>    <span class=\\\"hljs-operator\\\">|</span> <span class=\\\"hljs-number\\\">100.0</span>    <span class=\\\"hljs-operator\\\">|</span> <span class=\\\"hljs-operator\\\">&lt;</span><span class=\\\"hljs-keyword\\\">null</span><span class=\\\"hljs-operator\\\">&gt;</span> <span class=\\\"hljs-operator\\\">|</span>\\n<span class=\\\"hljs-operator\\\">+</span><span class=\\\"hljs-comment\\\">----+-------------+----------+------------+-------+---------------+---------+---------+-------------------+------+----------+--------+</span>\\n</code></pre>\\n<h5 id=\\\"最左前缀查询\\\">最左前缀查询</h5>\\n<pre><code class=\\\"hljs language-sql\\\">mysql root<span class=\\\"hljs-variable\\\">@youyinnn</span>.top:test<span class=\\\"hljs-operator\\\">&gt;</span> explain <span class=\\\"hljs-keyword\\\">select</span> <span class=\\\"hljs-operator\\\">*</span> <span class=\\\"hljs-keyword\\\">from</span> mytable3 <span class=\\\"hljs-keyword\\\">where</span> a <span class=\\\"hljs-operator\\\">=</span> <span class=\\\"hljs-string\\\">&#x27;1&#x27;</span>;\\n<span class=\\\"hljs-operator\\\">+</span><span class=\\\"hljs-comment\\\">----+-------------+----------+------------+------+---------------+---------+---------+-------+------+----------+--------+</span>\\n<span class=\\\"hljs-operator\\\">|</span> id <span class=\\\"hljs-operator\\\">|</span> select_type <span class=\\\"hljs-operator\\\">|</span> <span class=\\\"hljs-keyword\\\">table</span>    <span class=\\\"hljs-operator\\\">|</span> partitions <span class=\\\"hljs-operator\\\">|</span> type <span class=\\\"hljs-operator\\\">|</span> possible_keys <span class=\\\"hljs-operator\\\">|</span> key     <span class=\\\"hljs-operator\\\">|</span> key_len <span class=\\\"hljs-operator\\\">|</span> <span class=\\\"hljs-keyword\\\">ref</span>   <span class=\\\"hljs-operator\\\">|</span> <span class=\\\"hljs-keyword\\\">rows</span> <span class=\\\"hljs-operator\\\">|</span> filtered <span class=\\\"hljs-operator\\\">|</span> Extra  <span class=\\\"hljs-operator\\\">|</span>\\n<span class=\\\"hljs-operator\\\">+</span><span class=\\\"hljs-comment\\\">----+-------------+----------+------------+------+---------------+---------+---------+-------+------+----------+--------+</span>\\n<span class=\\\"hljs-operator\\\">|</span> <span class=\\\"hljs-number\\\">1</span>  <span class=\\\"hljs-operator\\\">|</span> SIMPLE      <span class=\\\"hljs-operator\\\">|</span> mytable3 <span class=\\\"hljs-operator\\\">|</span> <span class=\\\"hljs-operator\\\">&lt;</span><span class=\\\"hljs-keyword\\\">null</span><span class=\\\"hljs-operator\\\">&gt;</span>     <span class=\\\"hljs-operator\\\">|</span> <span class=\\\"hljs-keyword\\\">ref</span>  <span class=\\\"hljs-operator\\\">|</span> <span class=\\\"hljs-keyword\\\">PRIMARY</span>       <span class=\\\"hljs-operator\\\">|</span> <span class=\\\"hljs-keyword\\\">PRIMARY</span> <span class=\\\"hljs-operator\\\">|</span> <span class=\\\"hljs-number\\\">4</span>       <span class=\\\"hljs-operator\\\">|</span> const <span class=\\\"hljs-operator\\\">|</span> <span class=\\\"hljs-number\\\">1</span>    <span class=\\\"hljs-operator\\\">|</span> <span class=\\\"hljs-number\\\">100.0</span>    <span class=\\\"hljs-operator\\\">|</span> <span class=\\\"hljs-operator\\\">&lt;</span><span class=\\\"hljs-keyword\\\">null</span><span class=\\\"hljs-operator\\\">&gt;</span> <span class=\\\"hljs-operator\\\">|</span>\\n<span class=\\\"hljs-operator\\\">+</span><span class=\\\"hljs-comment\\\">----+-------------+----------+------------+------+---------------+---------+---------+-------+------+----------+--------+</span>\\n</code></pre>\\n<p>我们的索引有3列，但我们只用到了最左边的一列，所以type为ref</p>\\n<h5 id=\\\"非最左前缀查询\\\">非最左前缀查询</h5>\\n<p>但是当我们不从索引列的最左边开始提供条件的时候：</p>\\n<pre><code class=\\\"hljs language-sql\\\">mysql root<span class=\\\"hljs-variable\\\">@youyinnn</span>.top:test<span class=\\\"hljs-operator\\\">&gt;</span> explain <span class=\\\"hljs-keyword\\\">select</span> <span class=\\\"hljs-operator\\\">*</span> <span class=\\\"hljs-keyword\\\">from</span> mytable3 <span class=\\\"hljs-keyword\\\">where</span> b <span class=\\\"hljs-operator\\\">=</span> <span class=\\\"hljs-string\\\">&#x27;name&#x27;</span> <span class=\\\"hljs-keyword\\\">and</span> c <span class=\\\"hljs-operator\\\">=</span> <span class=\\\"hljs-string\\\">&#x27;1&#x27;</span>;\\n<span class=\\\"hljs-operator\\\">+</span><span class=\\\"hljs-comment\\\">----+-------------+----------+------------+------+---------------+--------+---------+--------+------+----------+-------------+</span>\\n<span class=\\\"hljs-operator\\\">|</span> id <span class=\\\"hljs-operator\\\">|</span> select_type <span class=\\\"hljs-operator\\\">|</span> <span class=\\\"hljs-keyword\\\">table</span>    <span class=\\\"hljs-operator\\\">|</span> partitions <span class=\\\"hljs-operator\\\">|</span> type <span class=\\\"hljs-operator\\\">|</span> possible_keys <span class=\\\"hljs-operator\\\">|</span> key    <span class=\\\"hljs-operator\\\">|</span> key_len <span class=\\\"hljs-operator\\\">|</span> <span class=\\\"hljs-keyword\\\">ref</span>    <span class=\\\"hljs-operator\\\">|</span> <span class=\\\"hljs-keyword\\\">rows</span> <span class=\\\"hljs-operator\\\">|</span> filtered <span class=\\\"hljs-operator\\\">|</span> Extra       <span class=\\\"hljs-operator\\\">|</span>\\n<span class=\\\"hljs-operator\\\">+</span><span class=\\\"hljs-comment\\\">----+-------------+----------+------------+------+---------------+--------+---------+--------+------+----------+-------------+</span>\\n<span class=\\\"hljs-operator\\\">|</span> <span class=\\\"hljs-number\\\">1</span>  <span class=\\\"hljs-operator\\\">|</span> SIMPLE      <span class=\\\"hljs-operator\\\">|</span> mytable3 <span class=\\\"hljs-operator\\\">|</span> <span class=\\\"hljs-operator\\\">&lt;</span><span class=\\\"hljs-keyword\\\">null</span><span class=\\\"hljs-operator\\\">&gt;</span>     <span class=\\\"hljs-operator\\\">|</span> <span class=\\\"hljs-keyword\\\">ALL</span>  <span class=\\\"hljs-operator\\\">|</span> <span class=\\\"hljs-operator\\\">&lt;</span><span class=\\\"hljs-keyword\\\">null</span><span class=\\\"hljs-operator\\\">&gt;</span>        <span class=\\\"hljs-operator\\\">|</span> <span class=\\\"hljs-operator\\\">&lt;</span><span class=\\\"hljs-keyword\\\">null</span><span class=\\\"hljs-operator\\\">&gt;</span> <span class=\\\"hljs-operator\\\">|</span> <span class=\\\"hljs-operator\\\">&lt;</span><span class=\\\"hljs-keyword\\\">null</span><span class=\\\"hljs-operator\\\">&gt;</span>  <span class=\\\"hljs-operator\\\">|</span> <span class=\\\"hljs-operator\\\">&lt;</span><span class=\\\"hljs-keyword\\\">null</span><span class=\\\"hljs-operator\\\">&gt;</span> <span class=\\\"hljs-operator\\\">|</span> <span class=\\\"hljs-number\\\">6</span>    <span class=\\\"hljs-operator\\\">|</span> <span class=\\\"hljs-number\\\">16.67</span>    <span class=\\\"hljs-operator\\\">|</span> <span class=\\\"hljs-keyword\\\">Using</span> <span class=\\\"hljs-keyword\\\">where</span> <span class=\\\"hljs-operator\\\">|</span>\\n<span class=\\\"hljs-operator\\\">+</span><span class=\\\"hljs-comment\\\">----+-------------+----------+------------+------+---------------+--------+---------+--------+------+----------+-------------+</span>\\n</code></pre>\\n<p>可以看到，这里直接使用了全表扫描，是效率最低的一种查询方式；为了优化，我们可以填上最左缺省的前缀主键，为了不破坏准确性，我们可以将全表扫描提升为<strong>范围扫描（range）</strong>类型的查询：</p>\\n<pre><code class=\\\"hljs language-sql\\\">mysql root<span class=\\\"hljs-variable\\\">@youyinnn</span>.top:test<span class=\\\"hljs-operator\\\">&gt;</span> explain <span class=\\\"hljs-keyword\\\">select</span> <span class=\\\"hljs-operator\\\">*</span> <span class=\\\"hljs-keyword\\\">from</span> mytable3 <span class=\\\"hljs-keyword\\\">where</span> b <span class=\\\"hljs-operator\\\">=</span> <span class=\\\"hljs-string\\\">&#x27;name&#x27;</span> <span class=\\\"hljs-keyword\\\">and</span> c <span class=\\\"hljs-operator\\\">=</span> <span class=\\\"hljs-string\\\">&#x27;1&#x27;</span> <span class=\\\"hljs-keyword\\\">and</span> a <span class=\\\"hljs-keyword\\\">in</span>(<span class=\\\"hljs-number\\\">1</span>, <span class=\\\"hljs-number\\\">1000000</span>);\\n<span class=\\\"hljs-operator\\\">+</span><span class=\\\"hljs-comment\\\">----+-------------+----------+------------+-------+---------------+---------+---------+--------+------+----------+-------------+</span>\\n<span class=\\\"hljs-operator\\\">|</span> id <span class=\\\"hljs-operator\\\">|</span> select_type <span class=\\\"hljs-operator\\\">|</span> <span class=\\\"hljs-keyword\\\">table</span>    <span class=\\\"hljs-operator\\\">|</span> partitions <span class=\\\"hljs-operator\\\">|</span> type  <span class=\\\"hljs-operator\\\">|</span> possible_keys <span class=\\\"hljs-operator\\\">|</span> key     <span class=\\\"hljs-operator\\\">|</span> key_len <span class=\\\"hljs-operator\\\">|</span> <span class=\\\"hljs-keyword\\\">ref</span>    <span class=\\\"hljs-operator\\\">|</span> <span class=\\\"hljs-keyword\\\">rows</span> <span class=\\\"hljs-operator\\\">|</span> filtered <span class=\\\"hljs-operator\\\">|</span> Extra       <span class=\\\"hljs-operator\\\">|</span>\\n<span class=\\\"hljs-operator\\\">+</span><span class=\\\"hljs-comment\\\">----+-------------+----------+------------+-------+---------------+---------+---------+--------+------+----------+-------------+</span>\\n<span class=\\\"hljs-operator\\\">|</span> <span class=\\\"hljs-number\\\">1</span>  <span class=\\\"hljs-operator\\\">|</span> SIMPLE      <span class=\\\"hljs-operator\\\">|</span> mytable3 <span class=\\\"hljs-operator\\\">|</span> <span class=\\\"hljs-operator\\\">&lt;</span><span class=\\\"hljs-keyword\\\">null</span><span class=\\\"hljs-operator\\\">&gt;</span>     <span class=\\\"hljs-operator\\\">|</span> <span class=\\\"hljs-keyword\\\">range</span> <span class=\\\"hljs-operator\\\">|</span> <span class=\\\"hljs-keyword\\\">PRIMARY</span>       <span class=\\\"hljs-operator\\\">|</span> <span class=\\\"hljs-keyword\\\">PRIMARY</span> <span class=\\\"hljs-operator\\\">|</span> <span class=\\\"hljs-number\\\">158</span>     <span class=\\\"hljs-operator\\\">|</span> <span class=\\\"hljs-operator\\\">&lt;</span><span class=\\\"hljs-keyword\\\">null</span><span class=\\\"hljs-operator\\\">&gt;</span> <span class=\\\"hljs-operator\\\">|</span> <span class=\\\"hljs-number\\\">2</span>    <span class=\\\"hljs-operator\\\">|</span> <span class=\\\"hljs-number\\\">100.0</span>    <span class=\\\"hljs-operator\\\">|</span> <span class=\\\"hljs-keyword\\\">Using</span> <span class=\\\"hljs-keyword\\\">where</span> <span class=\\\"hljs-operator\\\">|</span>\\n<span class=\\\"hljs-operator\\\">+</span><span class=\\\"hljs-comment\\\">----+-------------+----------+------------+-------+---------------+---------+---------+--------+------+----------+-------------+</span>\\n</code></pre>\\n<h5 id=\\\"表达式查询\\\">表达式查询</h5>\\n<p>很不幸，如果查询条件中含有函数或表达式，则MySQL不会为这列使用索引（虽然某些在数学意义上可以使用）：</p>\\n<pre><code class=\\\"hljs language-sql\\\">mysql root<span class=\\\"hljs-variable\\\">@youyinnn</span>.top:test<span class=\\\"hljs-operator\\\">&gt;</span> explain <span class=\\\"hljs-keyword\\\">select</span> <span class=\\\"hljs-operator\\\">*</span> <span class=\\\"hljs-keyword\\\">from</span> mytable3 <span class=\\\"hljs-keyword\\\">where</span> a <span class=\\\"hljs-operator\\\">-</span> <span class=\\\"hljs-number\\\">1</span> <span class=\\\"hljs-operator\\\">=</span> <span class=\\\"hljs-number\\\">1</span>;\\n<span class=\\\"hljs-operator\\\">+</span><span class=\\\"hljs-comment\\\">----+-------------+----------+------------+------+---------------+--------+---------+--------+------+----------+-------------+</span>\\n<span class=\\\"hljs-operator\\\">|</span> id <span class=\\\"hljs-operator\\\">|</span> select_type <span class=\\\"hljs-operator\\\">|</span> <span class=\\\"hljs-keyword\\\">table</span>    <span class=\\\"hljs-operator\\\">|</span> partitions <span class=\\\"hljs-operator\\\">|</span> type <span class=\\\"hljs-operator\\\">|</span> possible_keys <span class=\\\"hljs-operator\\\">|</span> key    <span class=\\\"hljs-operator\\\">|</span> key_len <span class=\\\"hljs-operator\\\">|</span> <span class=\\\"hljs-keyword\\\">ref</span>    <span class=\\\"hljs-operator\\\">|</span> <span class=\\\"hljs-keyword\\\">rows</span> <span class=\\\"hljs-operator\\\">|</span> filtered <span class=\\\"hljs-operator\\\">|</span> Extra       <span class=\\\"hljs-operator\\\">|</span>\\n<span class=\\\"hljs-operator\\\">+</span><span class=\\\"hljs-comment\\\">----+-------------+----------+------------+------+---------------+--------+---------+--------+------+----------+-------------+</span>\\n<span class=\\\"hljs-operator\\\">|</span> <span class=\\\"hljs-number\\\">1</span>  <span class=\\\"hljs-operator\\\">|</span> SIMPLE      <span class=\\\"hljs-operator\\\">|</span> mytable3 <span class=\\\"hljs-operator\\\">|</span> <span class=\\\"hljs-operator\\\">&lt;</span><span class=\\\"hljs-keyword\\\">null</span><span class=\\\"hljs-operator\\\">&gt;</span>     <span class=\\\"hljs-operator\\\">|</span> <span class=\\\"hljs-keyword\\\">ALL</span>  <span class=\\\"hljs-operator\\\">|</span> <span class=\\\"hljs-operator\\\">&lt;</span><span class=\\\"hljs-keyword\\\">null</span><span class=\\\"hljs-operator\\\">&gt;</span>        <span class=\\\"hljs-operator\\\">|</span> <span class=\\\"hljs-operator\\\">&lt;</span><span class=\\\"hljs-keyword\\\">null</span><span class=\\\"hljs-operator\\\">&gt;</span> <span class=\\\"hljs-operator\\\">|</span> <span class=\\\"hljs-operator\\\">&lt;</span><span class=\\\"hljs-keyword\\\">null</span><span class=\\\"hljs-operator\\\">&gt;</span>  <span class=\\\"hljs-operator\\\">|</span> <span class=\\\"hljs-operator\\\">&lt;</span><span class=\\\"hljs-keyword\\\">null</span><span class=\\\"hljs-operator\\\">&gt;</span> <span class=\\\"hljs-operator\\\">|</span> <span class=\\\"hljs-number\\\">6</span>    <span class=\\\"hljs-operator\\\">|</span> <span class=\\\"hljs-number\\\">100.0</span>    <span class=\\\"hljs-operator\\\">|</span> <span class=\\\"hljs-keyword\\\">Using</span> <span class=\\\"hljs-keyword\\\">where</span> <span class=\\\"hljs-operator\\\">|</span>\\n<span class=\\\"hljs-operator\\\">+</span><span class=\\\"hljs-comment\\\">----+-------------+----------+------------+------+---------------+--------+---------+--------+------+----------+-------------+</span>\\n</code></pre>\\n<h5 id=\\\"or查询\\\">or查询</h5>\\n<p>对于<strong>同列</strong>的or查询，它实际上就转成一个针对该列的范围查询（如果是最左的话）；</p>\\n<p>对于<strong>不同列</strong>的or查询，我们就把or的子条件当成一个独立的子句，如果子句不符合最左前缀，那子句查询还是会走全表扫描：</p>\\n<pre><code class=\\\"hljs language-sql\\\">mysql root<span class=\\\"hljs-variable\\\">@youyinnn</span>.top:test<span class=\\\"hljs-operator\\\">&gt;</span> explain <span class=\\\"hljs-keyword\\\">select</span> <span class=\\\"hljs-operator\\\">*</span> <span class=\\\"hljs-keyword\\\">from</span> mytable3 <span class=\\\"hljs-keyword\\\">where</span> a <span class=\\\"hljs-operator\\\">=</span> <span class=\\\"hljs-string\\\">&#x27;1&#x27;</span> <span class=\\\"hljs-keyword\\\">or</span> b <span class=\\\"hljs-operator\\\">=</span> <span class=\\\"hljs-string\\\">&#x27;name&#x27;</span>;\\n<span class=\\\"hljs-operator\\\">+</span><span class=\\\"hljs-comment\\\">----+-------------+----------+------------+------+---------------+--------+---------+--------+------+----------+-------------+</span>\\n<span class=\\\"hljs-operator\\\">|</span> id <span class=\\\"hljs-operator\\\">|</span> select_type <span class=\\\"hljs-operator\\\">|</span> <span class=\\\"hljs-keyword\\\">table</span>    <span class=\\\"hljs-operator\\\">|</span> partitions <span class=\\\"hljs-operator\\\">|</span> type <span class=\\\"hljs-operator\\\">|</span> possible_keys <span class=\\\"hljs-operator\\\">|</span> key    <span class=\\\"hljs-operator\\\">|</span> key_len <span class=\\\"hljs-operator\\\">|</span> <span class=\\\"hljs-keyword\\\">ref</span>    <span class=\\\"hljs-operator\\\">|</span> <span class=\\\"hljs-keyword\\\">rows</span> <span class=\\\"hljs-operator\\\">|</span> filtered <span class=\\\"hljs-operator\\\">|</span> Extra       <span class=\\\"hljs-operator\\\">|</span>\\n<span class=\\\"hljs-operator\\\">+</span><span class=\\\"hljs-comment\\\">----+-------------+----------+------------+------+---------------+--------+---------+--------+------+----------+-------------+</span>\\n<span class=\\\"hljs-operator\\\">|</span> <span class=\\\"hljs-number\\\">1</span>  <span class=\\\"hljs-operator\\\">|</span> SIMPLE      <span class=\\\"hljs-operator\\\">|</span> mytable3 <span class=\\\"hljs-operator\\\">|</span> <span class=\\\"hljs-operator\\\">&lt;</span><span class=\\\"hljs-keyword\\\">null</span><span class=\\\"hljs-operator\\\">&gt;</span>     <span class=\\\"hljs-operator\\\">|</span> <span class=\\\"hljs-keyword\\\">ALL</span>  <span class=\\\"hljs-operator\\\">|</span> <span class=\\\"hljs-keyword\\\">PRIMARY</span>       <span class=\\\"hljs-operator\\\">|</span> <span class=\\\"hljs-operator\\\">&lt;</span><span class=\\\"hljs-keyword\\\">null</span><span class=\\\"hljs-operator\\\">&gt;</span> <span class=\\\"hljs-operator\\\">|</span> <span class=\\\"hljs-operator\\\">&lt;</span><span class=\\\"hljs-keyword\\\">null</span><span class=\\\"hljs-operator\\\">&gt;</span>  <span class=\\\"hljs-operator\\\">|</span> <span class=\\\"hljs-operator\\\">&lt;</span><span class=\\\"hljs-keyword\\\">null</span><span class=\\\"hljs-operator\\\">&gt;</span> <span class=\\\"hljs-operator\\\">|</span> <span class=\\\"hljs-number\\\">6</span>    <span class=\\\"hljs-operator\\\">|</span> <span class=\\\"hljs-number\\\">30.56</span>    <span class=\\\"hljs-operator\\\">|</span> <span class=\\\"hljs-keyword\\\">Using</span> <span class=\\\"hljs-keyword\\\">where</span> <span class=\\\"hljs-operator\\\">|</span>\\n<span class=\\\"hljs-operator\\\">+</span><span class=\\\"hljs-comment\\\">----+-------------+----------+------------+------+---------------+--------+---------+--------+------+----------+-------------+</span>\\n</code></pre>\\n<p>就算把它们拆成union也是一样的</p>\\n<h3 id=\\\"索引的选择\\\">索引的选择</h3>\\n<h4 id=\\\"索引的建立\\\">索引的建立</h4>\\n<p>并不是所有的查询我们都需要为其建立索引，索引虽然加快了查询速度，但索引也是有代价的：</p>\\n<ul>\\n<li>索引文件本身要消耗存储空间；</li>\\n<li>同时索引会加重插入、删除和修改记录时的负担；</li>\\n<li>MySQL在运行时也要消耗资源维护索引，因此索引并不是越多越好。一般两种情况下不建议建索引；</li>\\n</ul>\\n<p><strong>以下两种情况可以不建立索引：</strong></p>\\n<ol>\\n<li><p>表记录比较少，例如一两千条甚至只有几百条记录的表，没必要建索引，让查询做全表扫描就好了；</p>\\n</li>\\n<li><p>索引的选择性较低；</p>\\n<blockquote>\\n<p><strong>“选择性”</strong>这个概念我们在索引概述的时候讲过，通俗的说就是像性别这种列，就算用定值去选都能选半张表的列就是<strong>选择性低</strong>的列；</p>\\n<p>而对于选择性低的列，如果<strong>已经成为索引</strong>了，而且会在一定程度上影响最左前缀匹配，可以使用填坑的方式去满足最左前缀，而触发索引；</p>\\n</blockquote>\\n</li>\\n</ol>\\n<h4 id=\\\"主键选择\\\">主键选择</h4>\\n<p><strong>在使用InnoDB存储引擎时，如果没有特别的需要，请永远使用一个与业务无关的自增字段作为主键。</strong></p>\\n<p>我们从B+树索引的特性中可以明白，索引本质上还是依赖主键的值去排序、排列、分页的，如果选用非自增的值作为主键，可能会导致索引树频繁进行移动、分页而产生大量的碎片，这样索引的性能会很低</p>\\n<h3 id=\\\"优化器行为\\\">优化器行为</h3>\\n<h4 id=\\\"覆盖索引\\\">覆盖索引</h4>\\n<p>这个在上节中说过，这回来explain一下：</p>\\n<pre><code class=\\\"hljs language-sql\\\">mysql root<span class=\\\"hljs-variable\\\">@youyinnn</span>.top:test<span class=\\\"hljs-operator\\\">&gt;</span> explain <span class=\\\"hljs-keyword\\\">select</span> a <span class=\\\"hljs-keyword\\\">from</span> mytable3 <span class=\\\"hljs-keyword\\\">where</span> e <span class=\\\"hljs-operator\\\">&gt;=</span> <span class=\\\"hljs-number\\\">0</span> <span class=\\\"hljs-keyword\\\">and</span> e <span class=\\\"hljs-operator\\\">&lt;=</span> <span class=\\\"hljs-number\\\">3000</span>;\\n<span class=\\\"hljs-operator\\\">+</span><span class=\\\"hljs-comment\\\">----+-------------+----------+------------+-------+---------------+-------+---------+--------+------+----------+--------------------------+</span>\\n<span class=\\\"hljs-operator\\\">|</span> id <span class=\\\"hljs-operator\\\">|</span> select_type <span class=\\\"hljs-operator\\\">|</span> <span class=\\\"hljs-keyword\\\">table</span>    <span class=\\\"hljs-operator\\\">|</span> partitions <span class=\\\"hljs-operator\\\">|</span> type  <span class=\\\"hljs-operator\\\">|</span> possible_keys <span class=\\\"hljs-operator\\\">|</span> key   <span class=\\\"hljs-operator\\\">|</span> key_len <span class=\\\"hljs-operator\\\">|</span> <span class=\\\"hljs-keyword\\\">ref</span>    <span class=\\\"hljs-operator\\\">|</span> <span class=\\\"hljs-keyword\\\">rows</span> <span class=\\\"hljs-operator\\\">|</span> filtered <span class=\\\"hljs-operator\\\">|</span> Extra                    <span class=\\\"hljs-operator\\\">|</span>\\n<span class=\\\"hljs-operator\\\">+</span><span class=\\\"hljs-comment\\\">----+-------------+----------+------------+-------+---------------+-------+---------+--------+------+----------+--------------------------+</span>\\n<span class=\\\"hljs-operator\\\">|</span> <span class=\\\"hljs-number\\\">1</span>  <span class=\\\"hljs-operator\\\">|</span> SIMPLE      <span class=\\\"hljs-operator\\\">|</span> mytable3 <span class=\\\"hljs-operator\\\">|</span> <span class=\\\"hljs-operator\\\">&lt;</span><span class=\\\"hljs-keyword\\\">null</span><span class=\\\"hljs-operator\\\">&gt;</span>     <span class=\\\"hljs-operator\\\">|</span> <span class=\\\"hljs-keyword\\\">range</span> <span class=\\\"hljs-operator\\\">|</span> idx_e         <span class=\\\"hljs-operator\\\">|</span> idx_e <span class=\\\"hljs-operator\\\">|</span> <span class=\\\"hljs-number\\\">5</span>       <span class=\\\"hljs-operator\\\">|</span> <span class=\\\"hljs-operator\\\">&lt;</span><span class=\\\"hljs-keyword\\\">null</span><span class=\\\"hljs-operator\\\">&gt;</span> <span class=\\\"hljs-operator\\\">|</span> <span class=\\\"hljs-number\\\">4</span>    <span class=\\\"hljs-operator\\\">|</span> <span class=\\\"hljs-number\\\">100.0</span>    <span class=\\\"hljs-operator\\\">|</span> <span class=\\\"hljs-keyword\\\">Using</span> <span class=\\\"hljs-keyword\\\">where</span>; <span class=\\\"hljs-keyword\\\">Using</span> index <span class=\\\"hljs-operator\\\">|</span>\\n<span class=\\\"hljs-operator\\\">+</span><span class=\\\"hljs-comment\\\">----+-------------+----------+------------+-------+---------------+-------+---------+--------+------+----------+--------------------------+</span>\\n</code></pre>\\n<p>假如有e的辅助索引，在查询a值的时候，直接返回结果，不回表全表扫</p>\\n<h4 id=\\\"不使用索引\\\">不使用索引</h4>\\n<p>有的时候我们有**某非主键字段进行范围查找整行数据（select *）**的情况，对某个非主键字段进行范围查找，这时候虽然该字段可能有辅助索引，但是辅助索引并不能包含整行信息，于是查到辅助索引还要再查一次聚集索引，因为是书签，所以在磁盘上进行的是离散的而不是顺序的读操作，这时候优化器会选择直接利用聚集索引来依次查找</p>\\n<h3 id=\\\"索引相关面试题\\\">索引相关面试题</h3>\\n<ol>\\n<li><p>为什么采用B+树而不采用哈希索引？</p>\\n<blockquote>\\n<ul>\\n<li>高扇出，减少IO</li>\\n<li>适合范围查找</li>\\n<li>天然排序</li>\\n</ul>\\n</blockquote>\\n</li>\\n<li><p>B+树叶子节点里都存什么？</p>\\n<blockquote>\\n<p>聚集索引存整行数据，非聚集索引存主键</p>\\n</blockquote>\\n</li>\\n<li><p>什么情况下非聚集索引不需要回表？</p>\\n<blockquote>\\n<p>在<strong>覆盖索引</strong>发生的情况下，可以不用回表</p>\\n</blockquote>\\n</li>\\n<li><p>覆盖索引什么时候回发生？</p>\\n<blockquote>\\n<p>在辅助索引完全能够返回查询结果的情况下，不需要回表，比如直接查询主键的值、一些统计语句</p>\\n</blockquote>\\n</li>\\n<li><p>什么时候优化器不会使用索引？</p>\\n<blockquote>\\n<p>有时候使用一些没有索引或者辅助索引覆盖不了全部表的时候，优化器会直接进行全表扫</p>\\n</blockquote>\\n</li>\\n<li><p>创建索引要考虑哪些因素？</p>\\n<blockquote>\\n<ul>\\n<li>根据业务查询比重建立索引；</li>\\n<li>满足查询的最左前缀；</li>\\n</ul>\\n</blockquote>\\n</li>\\n<li><p>什么时候要使用联合索引？</p>\\n<blockquote>\\n<p>可以通过联合索引来做天然排序而不用调用<code>filesort</code>；</p>\\n</blockquote>\\n</li>\\n<li><p>怎么看索引的选择情况？</p>\\n<blockquote>\\n<p>使用explain；</p>\\n</blockquote>\\n</li>\\n</ol>\\n<h3 id=\\\"参考\\\">参考</h3>\\n<ul>\\n<li><p><a href=\\\"https://www.hollischuang.com/archives/4110\\\">Hollis</a>；</p>\\n</li>\\n<li><p><a href=\\\"http://blog.codinglabs.org/articles/theory-of-mysql-index.html\\\">张洋</a>；</p>\\n</li>\\n<li><p><a href=\\\"https://www.cnblogs.com/mzhaox/p/11203042.html%EF%BC%9B\\\">https://www.cnblogs.com/mzhaox/p/11203042.html；</a></p>\\n</li>\\n</ul>\\n\";","export default \"<p><div class=\\\"saying mb-4\\\"><div class=\\\"saying-quote saying-left-quote\\\">“</div><div class=\\\"saying-quote saying-right-quote\\\">”</div></p>\\n<p>翻译自官方文档</p>\\n<p></div></p>\\n<h2 id=\\\"routing\\\">Routing</h2>\\n<p><strong>Routing（路由）</strong>指的是一个应用服务器的endpoints（URLs）怎么去响应客户端的请求。</p>\\n<p>你可以通过使用Express的<code>app</code>对象中和HTTP请求名称对应的方法去定义应用的路由行为；比如，<code>app.get()</code>方法用于处理GET请求或者使用<code>app.post()</code>方法去处理POST请求。完整的方法列表可以参考<a href=\\\"http://www.expressjs.com.cn/en/4x/api.html#app.METHOD\\\">app.METHOD</a>。你还可以使用<a href=\\\"http://www.expressjs.com.cn/en/4x/api.html#app.all\\\">app.all()</a> 去处理所有的HTTP方法，也可以使用<a href=\\\"http://www.expressjs.com.cn/en/4x/api.html#app.use\\\">app.use()</a> 去指定特定的回调方法 （参考<a href=\\\"http://www.expressjs.com.cn/en/guide/using-middleware.html\\\">Using middleware</a> ）。</p>\\n<p>这些路由方法指定一个回调方法（有时候又称为Handler方法）在Web应用收到对特定路由（endpoints）发出特定方式的请求的时候被调用。换句话说，应用程序能够监听所有请求，如果监听到请求的路由路径和请求方式有与之相配的路由方法，那么就调用该回调方法。</p>\\n<p>事实上，路由方法可以有多个回调函数作为参数，当设计这样的路由处理的时候，提供一个<code>next</code>方法作为参数到回调函数中是很有必要的，调用<code>next()</code>在回调方法体内来传递到下一个回调方法中。</p>\\n<p>下面这段代码展示了一个最基本的路由：</p>\\n<pre><code class=\\\"hljs language-javascript\\\"><span class=\\\"hljs-keyword\\\">var</span> express = <span class=\\\"hljs-built_in\\\">require</span>(<span class=\\\"hljs-string\\\">&#x27;express&#x27;</span>)\\n<span class=\\\"hljs-keyword\\\">var</span> app = <span class=\\\"hljs-title function_\\\">express</span>()\\n\\n<span class=\\\"hljs-comment\\\">// respond with &quot;hello world&quot; when a GET request is made to the homepage</span>\\napp.<span class=\\\"hljs-title function_\\\">get</span>(<span class=\\\"hljs-string\\\">&#x27;/&#x27;</span>, <span class=\\\"hljs-keyword\\\">function</span> (<span class=\\\"hljs-params\\\">req, res</span>) {\\n  res.<span class=\\\"hljs-title function_\\\">send</span>(<span class=\\\"hljs-string\\\">&#x27;hello world&#x27;</span>)\\n})\\n</code></pre>\\n<h3 id=\\\"route-methods\\\">Route methods</h3>\\n<p>一个路由方法是从一个HTTP方法中获取的，并且它附着于<code>express</code>类的实例上。</p>\\n<p>下面这段代码展示了GET路由和POST路由：</p>\\n<pre><code class=\\\"hljs language-javascript\\\"><span class=\\\"hljs-comment\\\">// GET method route</span>\\napp.<span class=\\\"hljs-title function_\\\">get</span>(<span class=\\\"hljs-string\\\">&#x27;/&#x27;</span>, <span class=\\\"hljs-keyword\\\">function</span> (<span class=\\\"hljs-params\\\">req, res</span>) {\\n  res.<span class=\\\"hljs-title function_\\\">send</span>(<span class=\\\"hljs-string\\\">&#x27;GET request to the homepage&#x27;</span>)\\n})\\n\\n<span class=\\\"hljs-comment\\\">// POST method route</span>\\napp.<span class=\\\"hljs-title function_\\\">post</span>(<span class=\\\"hljs-string\\\">&#x27;/&#x27;</span>, <span class=\\\"hljs-keyword\\\">function</span> (<span class=\\\"hljs-params\\\">req, res</span>) {\\n  res.<span class=\\\"hljs-title function_\\\">send</span>(<span class=\\\"hljs-string\\\">&#x27;POST request to the homepage&#x27;</span>)\\n})\\n</code></pre>\\n<p>Express支持所有HTTP请求。</p>\\n<p>还有一个特殊的 路由方法，<code>app.all()</code>用于加载中间件方法到所有的HTTP请求方法上。比如下面的例子会将回调方法应用到以任何方式请求到路径“/secret”上的请求：</p>\\n<pre><code class=\\\"hljs language-javascript\\\">app.<span class=\\\"hljs-title function_\\\">all</span>(<span class=\\\"hljs-string\\\">&#x27;/secret&#x27;</span>, <span class=\\\"hljs-keyword\\\">function</span> (<span class=\\\"hljs-params\\\">req, res, next</span>) {\\n  <span class=\\\"hljs-variable language_\\\">console</span>.<span class=\\\"hljs-title function_\\\">log</span>(<span class=\\\"hljs-string\\\">&#x27;Accessing the secret section ...&#x27;</span>)\\n  <span class=\\\"hljs-title function_\\\">next</span>() <span class=\\\"hljs-comment\\\">// pass control to the next handler</span>\\n})\\n</code></pre>\\n<h3 id=\\\"route-paths\\\">Route paths</h3>\\n<p>路由路径和请求方法的组合共同定义了究竟是请求到哪一个回调逻辑中。路由路径可以是字符串，字符串pattern，或者是正则表达式。</p>\\n<p>字符 <code>?</code>, <code>+</code>, <code>*</code>, and <code>()</code>可以用于正则表达式， 连字符(<code>-</code>) 和点(<code>.</code>) 用于字符串表示的路径。</p>\\n<p>如果你需要在路径中使用美元符号，你需要用<code>([</code>和<code>])</code>括起来，比如要处理“<code>/data/$book</code>”，应该写为 “<code>/data/([\\\\$])book</code>”。</p>\\n<p>Express使用<a href=\\\"https://www.npmjs.com/package/path-to-regexp\\\">path-to-regexp</a>来匹配路由路径。<a href=\\\"http://forbeslindesay.github.io/express-route-tester/\\\">Express Route Tester</a>是一个用于测试Express路由的工具，虽然它不支持模式匹配。</p>\\n<p>查询字符串不属于路由路径的一部分，下面是一些基本的例子：</p>\\n<p>Here are some examples of route paths based on strings.</p>\\n<p>This route path will match requests to the root route, <code>/</code>.</p>\\n<pre><code class=\\\"hljs language-javascript\\\">app.<span class=\\\"hljs-title function_\\\">get</span>(<span class=\\\"hljs-string\\\">&#x27;/&#x27;</span>, <span class=\\\"hljs-keyword\\\">function</span> (<span class=\\\"hljs-params\\\">req, res</span>) {\\n  res.<span class=\\\"hljs-title function_\\\">send</span>(<span class=\\\"hljs-string\\\">&#x27;root&#x27;</span>)\\n})\\n</code></pre>\\n<p>This route path will match requests to <code>/about</code>.</p>\\n<pre><code class=\\\"hljs language-javascript\\\">app.<span class=\\\"hljs-title function_\\\">get</span>(<span class=\\\"hljs-string\\\">&#x27;/about&#x27;</span>, <span class=\\\"hljs-keyword\\\">function</span> (<span class=\\\"hljs-params\\\">req, res</span>) {\\n  res.<span class=\\\"hljs-title function_\\\">send</span>(<span class=\\\"hljs-string\\\">&#x27;about&#x27;</span>)\\n})\\n</code></pre>\\n<p>This route path will match requests to <code>/random.text</code>.</p>\\n<pre><code class=\\\"hljs language-javascript\\\">app.<span class=\\\"hljs-title function_\\\">get</span>(<span class=\\\"hljs-string\\\">&#x27;/random.text&#x27;</span>, <span class=\\\"hljs-keyword\\\">function</span> (<span class=\\\"hljs-params\\\">req, res</span>) {\\n  res.<span class=\\\"hljs-title function_\\\">send</span>(<span class=\\\"hljs-string\\\">&#x27;random.text&#x27;</span>)\\n})\\n</code></pre>\\n<p>Here are some examples of route paths based on string patterns.</p>\\n<p>This route path will match <code>acd</code> and <code>abcd</code>.</p>\\n<pre><code class=\\\"hljs language-javascript\\\">app.<span class=\\\"hljs-title function_\\\">get</span>(<span class=\\\"hljs-string\\\">&#x27;/ab?cd&#x27;</span>, <span class=\\\"hljs-keyword\\\">function</span> (<span class=\\\"hljs-params\\\">req, res</span>) {\\n  res.<span class=\\\"hljs-title function_\\\">send</span>(<span class=\\\"hljs-string\\\">&#x27;ab?cd&#x27;</span>)\\n})\\n</code></pre>\\n<p>This route path will match <code>abcd</code>, <code>abbcd</code>, <code>abbbcd</code>, and so on.</p>\\n<pre><code class=\\\"hljs language-javascript\\\">app.<span class=\\\"hljs-title function_\\\">get</span>(<span class=\\\"hljs-string\\\">&#x27;/ab+cd&#x27;</span>, <span class=\\\"hljs-keyword\\\">function</span> (<span class=\\\"hljs-params\\\">req, res</span>) {\\n  res.<span class=\\\"hljs-title function_\\\">send</span>(<span class=\\\"hljs-string\\\">&#x27;ab+cd&#x27;</span>)\\n})\\n</code></pre>\\n<p>This route path will match <code>abcd</code>, <code>abxcd</code>, <code>abRANDOMcd</code>, <code>ab123cd</code>, and so on.</p>\\n<pre><code class=\\\"hljs language-javascript\\\">app.<span class=\\\"hljs-title function_\\\">get</span>(<span class=\\\"hljs-string\\\">&#x27;/ab*cd&#x27;</span>, <span class=\\\"hljs-keyword\\\">function</span> (<span class=\\\"hljs-params\\\">req, res</span>) {\\n  res.<span class=\\\"hljs-title function_\\\">send</span>(<span class=\\\"hljs-string\\\">&#x27;ab*cd&#x27;</span>)\\n})\\n</code></pre>\\n<p>This route path will match <code>/abe</code> and <code>/abcde</code>.</p>\\n<pre><code class=\\\"hljs language-javascript\\\">app.<span class=\\\"hljs-title function_\\\">get</span>(<span class=\\\"hljs-string\\\">&#x27;/ab(cd)?e&#x27;</span>, <span class=\\\"hljs-keyword\\\">function</span> (<span class=\\\"hljs-params\\\">req, res</span>) {\\n  res.<span class=\\\"hljs-title function_\\\">send</span>(<span class=\\\"hljs-string\\\">&#x27;ab(cd)?e&#x27;</span>)\\n})\\n</code></pre>\\n<p>Examples of route paths based on regular expressions:</p>\\n<p>This route path will match anything with an “a” in it.</p>\\n<pre><code class=\\\"hljs language-javascript\\\">app.<span class=\\\"hljs-title function_\\\">get</span>(<span class=\\\"hljs-regexp\\\">/a/</span>, <span class=\\\"hljs-keyword\\\">function</span> (<span class=\\\"hljs-params\\\">req, res</span>) {\\n  res.<span class=\\\"hljs-title function_\\\">send</span>(<span class=\\\"hljs-string\\\">&#x27;/a/&#x27;</span>)\\n})\\n</code></pre>\\n<p>This route path will match <code>butterfly</code> and <code>dragonfly</code>, but not <code>butterflyman</code>, <code>dragonflyman</code>, and so on.</p>\\n<pre><code class=\\\"hljs language-javascript\\\">app.<span class=\\\"hljs-title function_\\\">get</span>(<span class=\\\"hljs-regexp\\\">/.*fly$/</span>, <span class=\\\"hljs-keyword\\\">function</span> (<span class=\\\"hljs-params\\\">req, res</span>) {\\n  res.<span class=\\\"hljs-title function_\\\">send</span>(<span class=\\\"hljs-string\\\">&#x27;/.*fly$/&#x27;</span>)\\n})\\n</code></pre>\\n<h3 id=\\\"route-parameters\\\">Route parameters</h3>\\n<p>路由参数是被命名了的URL片段，用于捕捉URL中特定位置的值。被捕捉到的值会被移植到<code>req.params</code>对象上，以键值对的形式存储它们的值。</p>\\n<pre><code>Route path: /users/:userId/books/:bookId\\nRequest URL: http://localhost:3000/users/34/books/8989\\nreq.params: { &quot;userId&quot;: &quot;34&quot;, &quot;bookId&quot;: &quot;8989&quot; }\\n</code></pre>\\n<p>要定义带路由参数的路由，仅需像下面这样做：</p>\\n<pre><code class=\\\"hljs language-javascript\\\">app.<span class=\\\"hljs-title function_\\\">get</span>(<span class=\\\"hljs-string\\\">&#x27;/users/:userId/books/:bookId&#x27;</span>, <span class=\\\"hljs-keyword\\\">function</span> (<span class=\\\"hljs-params\\\">req, res</span>) {\\n  res.<span class=\\\"hljs-title function_\\\">send</span>(req.<span class=\\\"hljs-property\\\">params</span>)\\n})\\n</code></pre>\\n<p>路由参数必须只能由大小写和数字组成，连字符和点可以正常使用，不受路由参数的影响：</p>\\n<pre><code>Route path: /flights/:from-:to\\nRequest URL: http://localhost:3000/flights/LAX-SFO\\nreq.params: { &quot;from&quot;: &quot;LAX&quot;, &quot;to&quot;: &quot;SFO&quot; }\\nRoute path: /plantae/:genus.:species\\nRequest URL: http://localhost:3000/plantae/Prunus.persica\\nreq.params: { &quot;genus&quot;: &quot;Prunus&quot;, &quot;species&quot;: &quot;persica&quot; }\\n</code></pre>\\n<p>为了更好地控制路由参数，你可以使用正则表达式去定位参数，将表达式用<code>()</code>括起来就可以了：</p>\\n<pre><code>Route path: /user/:userId(\\\\d+)\\nRequest URL: http://localhost:3000/user/42\\nreq.params: {&quot;userId&quot;: &quot;42&quot;}\\n</code></pre>\\n<p>Because the regular expression is usually part of a literal string, be sure to escape any <code>\\\\</code> characters with an additional backslash, for example <code>\\\\\\\\d+</code>.</p>\\n<p>In Express 4.x, <a href=\\\"https://github.com/expressjs/express/issues/2495\\\">the <code>*</code> character in regular expressions is not interpreted in the usual way</a>. As a workaround, use <code>{0,}</code> instead of <code>*</code>. This will likely be fixed in Express 5.</p>\\n<h3 id=\\\"route-handlers\\\">Route handlers</h3>\\n<p>你能够提供多个像中间件一样处理请求的回调函数。唯一是例外就是这些回调函数会涉及到<code>next(&#39;route&#39;)</code>来传递到剩余的回调方法中。你能够使用这个机制去传递一些前置条件到路由中。</p>\\n<p>多个路由处理器能够构成到一个方法当中，一组方法数组，或者两者的结合都行，就像下面的例子一样：</p>\\n<p>一个单一的方法作为处理：</p>\\n<pre><code class=\\\"hljs language-javascript\\\">app.<span class=\\\"hljs-title function_\\\">get</span>(<span class=\\\"hljs-string\\\">&#x27;/example/a&#x27;</span>, <span class=\\\"hljs-keyword\\\">function</span> (<span class=\\\"hljs-params\\\">req, res</span>) {\\n  res.<span class=\\\"hljs-title function_\\\">send</span>(<span class=\\\"hljs-string\\\">&#x27;Hello from A!&#x27;</span>)\\n})\\n</code></pre>\\n<p>多个回调方法，注意要调用<code>next()</code>方法：</p>\\n<pre><code class=\\\"hljs language-javascript\\\">app.<span class=\\\"hljs-title function_\\\">get</span>(<span class=\\\"hljs-string\\\">&#x27;/example/b&#x27;</span>, <span class=\\\"hljs-keyword\\\">function</span> (<span class=\\\"hljs-params\\\">req, res, next</span>) {\\n  <span class=\\\"hljs-variable language_\\\">console</span>.<span class=\\\"hljs-title function_\\\">log</span>(<span class=\\\"hljs-string\\\">&#x27;the response will be sent by the next function ...&#x27;</span>)\\n  <span class=\\\"hljs-title function_\\\">next</span>()\\n}, <span class=\\\"hljs-keyword\\\">function</span> (<span class=\\\"hljs-params\\\">req, res</span>) {\\n  res.<span class=\\\"hljs-title function_\\\">send</span>(<span class=\\\"hljs-string\\\">&#x27;Hello from B!&#x27;</span>)\\n})\\n</code></pre>\\n<p>回调方法的数组：</p>\\n<pre><code class=\\\"hljs language-javascript\\\"><span class=\\\"hljs-keyword\\\">var</span> cb0 = <span class=\\\"hljs-keyword\\\">function</span> (<span class=\\\"hljs-params\\\">req, res, next</span>) {\\n  <span class=\\\"hljs-variable language_\\\">console</span>.<span class=\\\"hljs-title function_\\\">log</span>(<span class=\\\"hljs-string\\\">&#x27;CB0&#x27;</span>)\\n  <span class=\\\"hljs-title function_\\\">next</span>()\\n}\\n\\n<span class=\\\"hljs-keyword\\\">var</span> cb1 = <span class=\\\"hljs-keyword\\\">function</span> (<span class=\\\"hljs-params\\\">req, res, next</span>) {\\n  <span class=\\\"hljs-variable language_\\\">console</span>.<span class=\\\"hljs-title function_\\\">log</span>(<span class=\\\"hljs-string\\\">&#x27;CB1&#x27;</span>)\\n  <span class=\\\"hljs-title function_\\\">next</span>()\\n}\\n\\n<span class=\\\"hljs-keyword\\\">var</span> cb2 = <span class=\\\"hljs-keyword\\\">function</span> (<span class=\\\"hljs-params\\\">req, res</span>) {\\n  res.<span class=\\\"hljs-title function_\\\">send</span>(<span class=\\\"hljs-string\\\">&#x27;Hello from C!&#x27;</span>)\\n}\\n\\napp.<span class=\\\"hljs-title function_\\\">get</span>(<span class=\\\"hljs-string\\\">&#x27;/example/c&#x27;</span>, [cb0, cb1, cb2])\\n</code></pre>\\n<p>两者之间的结合：</p>\\n<pre><code class=\\\"hljs language-javascript\\\"><span class=\\\"hljs-keyword\\\">var</span> cb0 = <span class=\\\"hljs-keyword\\\">function</span> (<span class=\\\"hljs-params\\\">req, res, next</span>) {\\n  <span class=\\\"hljs-variable language_\\\">console</span>.<span class=\\\"hljs-title function_\\\">log</span>(<span class=\\\"hljs-string\\\">&#x27;CB0&#x27;</span>)\\n  <span class=\\\"hljs-title function_\\\">next</span>()\\n}\\n\\n<span class=\\\"hljs-keyword\\\">var</span> cb1 = <span class=\\\"hljs-keyword\\\">function</span> (<span class=\\\"hljs-params\\\">req, res, next</span>) {\\n  <span class=\\\"hljs-variable language_\\\">console</span>.<span class=\\\"hljs-title function_\\\">log</span>(<span class=\\\"hljs-string\\\">&#x27;CB1&#x27;</span>)\\n  <span class=\\\"hljs-title function_\\\">next</span>()\\n}\\n\\napp.<span class=\\\"hljs-title function_\\\">get</span>(<span class=\\\"hljs-string\\\">&#x27;/example/d&#x27;</span>, [cb0, cb1], <span class=\\\"hljs-keyword\\\">function</span> (<span class=\\\"hljs-params\\\">req, res, next</span>) {\\n  <span class=\\\"hljs-variable language_\\\">console</span>.<span class=\\\"hljs-title function_\\\">log</span>(<span class=\\\"hljs-string\\\">&#x27;the response will be sent by the next function ...&#x27;</span>)\\n  <span class=\\\"hljs-title function_\\\">next</span>()\\n}, <span class=\\\"hljs-keyword\\\">function</span> (<span class=\\\"hljs-params\\\">req, res</span>) {\\n  res.<span class=\\\"hljs-title function_\\\">send</span>(<span class=\\\"hljs-string\\\">&#x27;Hello from D!&#x27;</span>)\\n})\\n</code></pre>\\n<h3 id=\\\"response-methods\\\">Response methods</h3>\\n<p>response对象的方法都在下表中，可以发送响应到客户端并且终止请求响应周期。如果不调用下列的方法，请求就会被一直挂起</p>\\n<table>\\n<thead>\\n<tr>\\n<th>Method</th>\\n<th>Description</th>\\n</tr>\\n</thead>\\n<tbody><tr>\\n<td><a href=\\\"http://www.expressjs.com.cn/en/4x/api.html#res.download\\\">res.download()</a></td>\\n<td>Prompt a file to be downloaded.</td>\\n</tr>\\n<tr>\\n<td><a href=\\\"http://www.expressjs.com.cn/en/4x/api.html#res.end\\\">res.end()</a></td>\\n<td>End the response process.</td>\\n</tr>\\n<tr>\\n<td><a href=\\\"http://www.expressjs.com.cn/en/4x/api.html#res.json\\\">res.json()</a></td>\\n<td>Send a JSON response.</td>\\n</tr>\\n<tr>\\n<td><a href=\\\"http://www.expressjs.com.cn/en/4x/api.html#res.jsonp\\\">res.jsonp()</a></td>\\n<td>Send a JSON response with JSONP support.</td>\\n</tr>\\n<tr>\\n<td><a href=\\\"http://www.expressjs.com.cn/en/4x/api.html#res.redirect\\\">res.redirect()</a></td>\\n<td>Redirect a request.</td>\\n</tr>\\n<tr>\\n<td><a href=\\\"http://www.expressjs.com.cn/en/4x/api.html#res.render\\\">res.render()</a></td>\\n<td>Render a view template.</td>\\n</tr>\\n<tr>\\n<td><a href=\\\"http://www.expressjs.com.cn/en/4x/api.html#res.send\\\">res.send()</a></td>\\n<td>Send a response of various types.</td>\\n</tr>\\n<tr>\\n<td><a href=\\\"http://www.expressjs.com.cn/en/4x/api.html#res.sendFile\\\">res.sendFile()</a></td>\\n<td>Send a file as an octet stream.</td>\\n</tr>\\n<tr>\\n<td><a href=\\\"http://www.expressjs.com.cn/en/4x/api.html#res.sendStatus\\\">res.sendStatus()</a></td>\\n<td>Set the response status code and send its string representation as the response body.</td>\\n</tr>\\n</tbody></table>\\n<h3 id=\\\"approute\\\">app.route()</h3>\\n<p>你能够通过使用<code>app.route()</code>方法为路由路径创建一个链式的路由。因为路径是指定到一个单一地点的，创建模块化的路由实际上对于简化代码很有帮助，更多信息请参考：<a href=\\\"http://www.expressjs.com.cn/en/4x/api.html#router\\\">Router() documentation</a>。</p>\\n<pre><code class=\\\"hljs language-javascript\\\">app.<span class=\\\"hljs-title function_\\\">route</span>(<span class=\\\"hljs-string\\\">&#x27;/book&#x27;</span>)\\n  .<span class=\\\"hljs-title function_\\\">get</span>(<span class=\\\"hljs-keyword\\\">function</span> (<span class=\\\"hljs-params\\\">req, res</span>) {\\n    res.<span class=\\\"hljs-title function_\\\">send</span>(<span class=\\\"hljs-string\\\">&#x27;Get a random book&#x27;</span>)\\n  })\\n  .<span class=\\\"hljs-title function_\\\">post</span>(<span class=\\\"hljs-keyword\\\">function</span> (<span class=\\\"hljs-params\\\">req, res</span>) {\\n    res.<span class=\\\"hljs-title function_\\\">send</span>(<span class=\\\"hljs-string\\\">&#x27;Add a book&#x27;</span>)\\n  })\\n  .<span class=\\\"hljs-title function_\\\">put</span>(<span class=\\\"hljs-keyword\\\">function</span> (<span class=\\\"hljs-params\\\">req, res</span>) {\\n    res.<span class=\\\"hljs-title function_\\\">send</span>(<span class=\\\"hljs-string\\\">&#x27;Update the book&#x27;</span>)\\n  })\\n</code></pre>\\n<h3 id=\\\"expressrouter\\\">express.Router</h3>\\n<p>使用 <code>express.Router</code>类来创建模块化，可挂载的路由处理器。一个<code>Router</code>实例是一个完整的中间件和路由系统，因此它也被称为“mini-app”。</p>\\n<p>下面的例子创建了一个路由器作为模块，并加载了中间件功能，定义了一些路由然后挂载这个路由器到主程序的一个路径上面。</p>\\n<p>创建一个作路由用的文件 <code>birds.js</code> ：</p>\\n<pre><code class=\\\"hljs language-javascript\\\"><span class=\\\"hljs-keyword\\\">var</span> express = <span class=\\\"hljs-built_in\\\">require</span>(<span class=\\\"hljs-string\\\">&#x27;express&#x27;</span>)\\n<span class=\\\"hljs-keyword\\\">var</span> router = express.<span class=\\\"hljs-title class_\\\">Router</span>()\\n\\n<span class=\\\"hljs-comment\\\">// middleware that is specific to this router</span>\\nrouter.<span class=\\\"hljs-title function_\\\">use</span>(<span class=\\\"hljs-keyword\\\">function</span> <span class=\\\"hljs-title function_\\\">timeLog</span> (req, res, next) {\\n  <span class=\\\"hljs-variable language_\\\">console</span>.<span class=\\\"hljs-title function_\\\">log</span>(<span class=\\\"hljs-string\\\">&#x27;Time: &#x27;</span>, <span class=\\\"hljs-title class_\\\">Date</span>.<span class=\\\"hljs-title function_\\\">now</span>())\\n  <span class=\\\"hljs-title function_\\\">next</span>()\\n})\\n<span class=\\\"hljs-comment\\\">// define the home page route</span>\\nrouter.<span class=\\\"hljs-title function_\\\">get</span>(<span class=\\\"hljs-string\\\">&#x27;/&#x27;</span>, <span class=\\\"hljs-keyword\\\">function</span> (<span class=\\\"hljs-params\\\">req, res</span>) {\\n  res.<span class=\\\"hljs-title function_\\\">send</span>(<span class=\\\"hljs-string\\\">&#x27;Birds home page&#x27;</span>)\\n})\\n<span class=\\\"hljs-comment\\\">// define the about route</span>\\nrouter.<span class=\\\"hljs-title function_\\\">get</span>(<span class=\\\"hljs-string\\\">&#x27;/about&#x27;</span>, <span class=\\\"hljs-keyword\\\">function</span> (<span class=\\\"hljs-params\\\">req, res</span>) {\\n  res.<span class=\\\"hljs-title function_\\\">send</span>(<span class=\\\"hljs-string\\\">&#x27;About birds&#x27;</span>)\\n})\\n\\n<span class=\\\"hljs-variable language_\\\">module</span>.<span class=\\\"hljs-property\\\">exports</span> = router\\n</code></pre>\\n<p>挂载路由器模块到app：</p>\\n<pre><code class=\\\"hljs language-javascript\\\"><span class=\\\"hljs-keyword\\\">var</span> birds = <span class=\\\"hljs-built_in\\\">require</span>(<span class=\\\"hljs-string\\\">&#x27;./birds&#x27;</span>)\\n\\n<span class=\\\"hljs-comment\\\">// ...</span>\\n\\napp.<span class=\\\"hljs-title function_\\\">use</span>(<span class=\\\"hljs-string\\\">&#x27;/birds&#x27;</span>, birds)\\n</code></pre>\\n<p>现在程序能够处理<code>/birds</code> 和 <code>/birds/about</code>路由，同时也能够调用中间件方法<code>timeLog</code>。</p>\\n\";","export default \"<h1 id=\\\"cron4j\\\">Cron4j</h1>\\n<p>一些必要的单词解释：</p>\\n<ol>\\n<li>schedule 安排、调度（安排在有主语的时候使用 调用在没主语的时候使用）</li>\\n<li>scheduler 调度器</li>\\n<li>scheduling pattern 调度模式</li>\\n<li>reschedule 重新调度、安排</li>\\n<li>action/task 动作/任务</li>\\n<li>deschedule 脱离调度、安排</li>\\n<li>Daemon threads 守护线程 （其实daemon本意就有守护进程的意思 加个threads应该是强调线程而非进程）</li>\\n<li>Predictor 先知（故意翻译为这个中二的名字哈哈）、预报器（这才是常规翻译）</li>\\n<li>Crontab/Cron 定时任务工具</li>\\n<li>status tracking 状态跟踪</li>\\n<li>executor 执行器</li>\\n<li>collector 收集器</li>\\n</ol>\\n<hr>\\n<p><span id=\\\"1快速开始\\\"></span></p>\\n<h3 id=\\\"1、快速开始：\\\">1、快速开始：</h3>\\n<p>cron4j的主要实体是‘scheduler’，实例化<code>it.sauronsoftware.cron4j.Scheduler</code>之后，你可以在一年当中任意的时间段执行任意的任务（Task）。</p>\\n<p>要使用cron4j scheduler 你需要做下面四步：</p>\\n<ol>\\n<li>new一个Scheduler实例</li>\\n<li>安排（schedule）你的动作（action）。你需要告诉scheduler对象你要做的事情是什么并且是在什么时候发生的。你可以指定（specify）一个实现了<code>java.lang.Runnable</code>接口的实例对象或者使用cron4j提供的<code>it.sauronsoftware.con4j.Task</code>类来实例一个对象来告诉它你要做什么事情，然后你可以使用一个<code>it.sauronsoftware.cron4j.SchedulingPattern</code>类的实例或者是一个字符串来代表指定的‘scheduling pattern’来告诉它你要在什么样的时间执行你的action。</li>\\n<li>开启（start）你的scheduler实例。</li>\\n<li>当你不再需要它的时候，停止（stop）它。</li>\\n</ol>\\n<pre><code>import it.sauronsoftware.cron4j.Scheduler;\\n\\npublic class Quickstart {\\n\\n    public static void main(String[] args) {\\n        // 第一步创建实例\\n        Scheduler s = new Scheduler();\\n        // 安排一个每分钟执行一次的任务\\n        s.schedule(&quot;* * * * *&quot;, new Runnable() {\\n            public void run() {\\n                System.out.println(&quot;Another minute ticked away...&quot;);\\n            }\\n        });\\n        // 开启你的调度器\\n        s.start();\\n        // 10分钟后执行之后的代码\\n        try {\\n            Thread.sleep(1000L * 60L * 10L);\\n        } catch (InterruptedException e) {\\n            ;\\n        }\\n        // 10分钟后停止你的调度器\\n        s.stop();\\n    }\\n\\n}\\n</code></pre>\\n<p>上面的代码会每隔一分钟执行一次run方法并打印出&quot;Another minute ticked away...&quot;句子。</p>\\n<p>你需要知道一些关键的概念：</p>\\n<ul>\\n<li>你可以安排任意数量的任务。</li>\\n<li>你可以在任意时间安排任务，即使是在调度器（scheduler）已经被开启过之后。</li>\\n<li>你可以改变已经安排过的任务的‘scheduling pattern（调度模式）’，即使是当调度器正在运行的时候（reschedule operation 重新调度操作）。</li>\\n<li>你可以移除之前安排过的任务，即使是当调度器正在运行的时候（deschedule operation 脱离调度操作）。</li>\\n<li>你可以任意次开启或停止调度器。</li>\\n<li>你可以使用文件配置来安排任务。</li>\\n<li>你可以从任意文件源配置中安排任务。</li>\\n<li>你可以提供一个监听器（listener）给调度器，用来接收执行过的任务的事件。</li>\\n<li>你可以控制任何一个正在进行的任务。</li>\\n<li>你可以不使用任何的‘scheduling pattern&#39;就可以手动启动任务。</li>\\n<li>你可以改变调度器工作的时区。</li>\\n<li>你可以在你的‘scheduling pattern’使用到调度器之前验证它的工作模式。</li>\\n<li>你可以预报出你的‘scheduling pattern’可能造成的任务异常。</li>\\n</ul>\\n<hr>\\n<p><span id=\\\"2调度模式-scheduling-pattern\\\"></span></p>\\n<h3 id=\\\"2、调度模式-scheduling-pattern\\\">2、调度模式 scheduling pattern</h3>\\n<p>&#39;scheduling pattern&#39;是一个 UNIX 的类定时任务模式，由一个以空格分隔为五个部分的字符串组成。每个部分代表着：</p>\\n<p>分钟子模式（Minutes sub-pattern）：</p>\\n<blockquote>\\n<p>规定一小时中的哪个分钟会执行任务，取值范围为0-59。</p>\\n</blockquote>\\n<p>小时子模式（Hour sub-pattern）：</p>\\n<blockquote>\\n<p>规定一天中的哪个小时会执行任务，取值范围为0-23。</p>\\n</blockquote>\\n<p>日期子模式（Days of mouth sub-pattern）：</p>\\n<blockquote>\\n<p>规定一个月中的哪一号会执行任务，取值范围为1-31，特殊值“L”可以代表当月的最后一天。</p>\\n</blockquote>\\n<p>月份子模式（Months sub-pattern）：</p>\\n<blockquote>\\n<p>规定一年中的哪一月会执行任务，取值范围从1（January）-12（December），这个子模式也允许月份英文缩写如：jan、feb、mar、...、dec。</p>\\n</blockquote>\\n<p>周几子模式（Days of week sub-pattern）：</p>\\n<blockquote>\\n<p>规定一周中的周几会执行任务，取值范围0（sunday）-6（monday），这个子模式同样允许英文缩写（是否忽略大小写 并未做考究 请按照官方举例 首字母大写）：sun、mon、...、sat。</p>\\n</blockquote>\\n<p>模式还允许使用星号通配符来代表：小时中的每分钟、日中的每小时、月中的每一天、年中的每一月、一周中的每一天。</p>\\n<p>一旦调度器被开启，任务会在每一个调度模式匹配为true的时候执行一次。</p>\\n<p>下面是一些举例：</p>\\n<blockquote>\\n<p>5 * * * *</p>\\n<p>每小时的过五分执行一次（1：05、2：05 etc）</p>\\n</blockquote>\\n<blockquote>\\n<p>* * * * *</p>\\n<p>每分钟执行一次</p>\\n</blockquote>\\n<blockquote>\\n<p>* 12 * * Mon</p>\\n<p>每周一的12时内的每分钟都执行一次</p>\\n</blockquote>\\n<blockquote>\\n<p>* 12 16 * Mon</p>\\n<p>每月的16号的12时内的每分钟都执行一次</p>\\n</blockquote>\\n<p>每个子模式都可以包含一个或多个逗号来分隔模式值</p>\\n<blockquote>\\n<p>59 11 * * 1,2,3,4,5</p>\\n<p>每周一、周二、周三、周四、周五的 11:59am 会执行一次</p>\\n</blockquote>\\n<p>取值间隔也可以使用“-”号</p>\\n<blockquote>\\n<p>59 11 * * 1-5</p>\\n<p>和上面的结果一样</p>\\n</blockquote>\\n<p>斜杠也可以运用到子模式当中，用来识别子模式取值范围内的分步值。</p>\\n<p>它有两种运用方式：</p>\\n<ul>\\n<li>*/c</li>\\n<li>a-b/c</li>\\n</ul>\\n<p>第一种会匹配到子模式范围0到最大值中的每个c增值 包含0值</p>\\n<p>第二种会匹配到范围a到b中的每个c增值 包含a值</p>\\n<blockquote>\\n<p>*/5 * * * *</p>\\n<p>每小时内从0分开始每过5分钟就执行一次（0：00、0：05、0：10、...）</p>\\n</blockquote>\\n<blockquote>\\n<p>3-18/5 * * * *</p>\\n<p>每小时中从3分到18分中每过5分钟就执行一次（0：03、0：08、0：13、0：18、1：03、...）</p>\\n</blockquote>\\n<blockquote>\\n<p>*/15 9-17 * * *</p>\\n<p>每天的9时到17时中从0分开始每过一刻钟就执行一次（9：00、9：15、...、最后一次执行会是在17：45分）</p>\\n</blockquote>\\n<p>上述所有规则都可以混合使用</p>\\n<blockquote>\\n<p>* 12 10-16/2 * *</p>\\n<p>每月的10号到16号中每过两天中当天12时中的每分钟执行一次（也即10、12、14、16号中...）</p>\\n</blockquote>\\n<blockquote>\\n<p>* 12 1-15,17,20-25 * *</p>\\n<p>每月的1到15号、17号、20到25号当天中的12时中的每分钟执行一次</p>\\n</blockquote>\\n<p>cron4j允许你使用“|”符号连接多个调度模式组成一个调度模式</p>\\n<blockquote>\\n<p>0 5 * * *|8 10 * * *|22 17 * * *</p>\\n<p>每天的5：00、10：08、17：22执行一次</p>\\n</blockquote>\\n<br>\\n\\n<blockquote>\\n<p><em>译者文外补充：文后其他地方会使用到<code>SchedulingPattern</code>对象，这个对象的创建非常简单，只需要在它的构造函数中传入调度模式即可。</em></p>\\n</blockquote>\\n<hr>\\n<p><span id=\\\"3如何调度-schedule重新调度-reschedule脱离调度-deschedule一个任务task\\\"></span></p>\\n<h3 id=\\\"3、如何调度-schedule、重新调度-reschedule、脱离调度-deschedule一个任务（task）\\\">3、如何调度 schedule、重新调度 reschedule、脱离调度 deschedule一个任务（Task）</h3>\\n<h5 id=\\\"（1）调度\\\">（1）调度</h5>\\n<p>创建Task的最简单最常用的方法就是实现<code>java.lang.Runnable</code>接口，任务创建好的时候，它可以被<code>it.sauronsoftware.cron4j.Scheduler.schedule(String, Runnable)</code>方法安排进调度器中，如果调度模式有格式异常，将会抛出<code>it.sauronsoftware.cron4j.InvalidPatternException</code>异常。</p>\\n<p>创建Task的另一种方法就是继承抽象方法<code>it.sauronsoftware.cron4j.Task</code>，这种方式比上一种方式更加强大，它可以使开发者访问一些cron4j提供的特性。你可以在“<a href=\\\"#6\\\">建立自定义的任务 Task</a>”小节中了解到更多相关用法。Task的实例可以被<code>schedule(String, Task)</code>方法和<code>schedule(SchedulingPattern, Task)</code>方法安排进调度器中。</p>\\n<h5 id=\\\"（2）重新调度脱离调度\\\">（2）重新调度/脱离调度</h5>\\n<p>在调度器对象的调度方法<code>schedule</code>会返回一个ID值（String类型）用来识别和检索已经安排过的操作。</p>\\n<p>这个ID可以被用来之后做：</p>\\n<ul>\\n<li>重新调度该任务（需要改变它的调度模式）</li>\\n<li>把该任务脱离调度（把任务从调度器中移除）</li>\\n</ul>\\n<p>可以调用这两个方法取重新调度该任务：</p>\\n<ul>\\n<li><code>reschedule(String, String)</code></li>\\n<li><code>reschedule(String, SchedulingPattern)</code></li>\\n</ul>\\n<p>可以调用这个方法让任务脱离调度：</p>\\n<ul>\\n<li><code>deschedule(String)</code></li>\\n</ul>\\n<hr>\\n<p><span id=\\\"4如何调度系统程序\\\"></span></p>\\n<h3 id=\\\"4、如何调度系统程序\\\">4、如何调度系统程序</h3>\\n<ul>\\n<li>使用类<code>ProcessTask</code>可以很简单的完成系统程序的调度<pre><code>ProcessTask task = new ProcessTask(&quot;C:\\\\\\\\Windows\\\\\\\\System32\\\\\\\\notepad.exe&quot;);\\nScheduler scheduler = new Scheduler();\\nscheduler.schedule(&quot;* * * * *&quot;, task);\\nscheduler.start();\\n// ...\\n</code></pre>\\n</li>\\n<li>多个程序参数可以作为字符串数组去代替一条参数<pre><code>String[] command = { &quot;C:\\\\\\\\Windows\\\\\\\\System32\\\\\\\\notepad.exe&quot;, &quot;C:\\\\\\\\File.txt&quot; };\\nProcessTask task = new ProcessTask(command);\\n// ...\\n</code></pre>\\n</li>\\n<li>程序的环境变量可以作为第二组字符串数组参数传入，其中的对象必须是‘NAME=VALUE’的形式<pre><code>String[] command = { &quot;C:\\\\\\\\tomcat\\\\\\\\bin\\\\\\\\catalina.bat&quot;, &quot;start&quot; };\\nString[] envs = { &quot;CATALINA_HOME=C:\\\\\\\\tomcat&quot;, &quot;JAVA_HOME=C:\\\\\\\\jdks\\\\\\\\jdk5&quot; };\\nProcessTask task = new ProcessTask(command, envs);\\n// ...\\n</code></pre>\\n</li>\\n<li>默认工作目录可以通过传入第三组参数去改变<pre><code>String[] command = { &quot;C:\\\\\\\\tomcat\\\\\\\\bin\\\\\\\\catalina.bat&quot;, &quot;start&quot; };\\nString[] envs = { &quot;CATALINA_HOME=C:\\\\\\\\tomcat&quot;, &quot;JAVA_HOME=C:\\\\\\\\jdks\\\\\\\\jdk5&quot; };\\nFile directory = &quot;C:\\\\\\\\MyDirectory&quot;;\\nProcessTask task = new ProcessTask(command, envs, directory);\\n// ...\\n</code></pre>\\n</li>\\n<li>如果你只想改变工作目录而不想使用环境变量，你可以在envs位置传入null值<pre><code>ProcessTask task = new ProcessTask(command, null, directory);\\n</code></pre>\\n当evns为null的时候，程序会继承当前JVM环境下工作的所有环境变量。</li>\\n</ul>\\n<p>环境变量和工作目录也可以通过调用<code>setEnvs(String[])</code>和<code>setDirectory(java.io,File)</code>方法来设置</p>\\n<p>程序的标准输出和标准错误输出管道可以通过<code>setStdoutFile(java.io.File)</code>和<code>setStderrFile(java.io.File)</code>方法重定向到指定文件</p>\\n<pre><code>ProcessTask task = new ProcessTask(command, envs, directory);\\ntask.setStdoutFile(new File(&quot;out.txt&quot;));\\ntask.setStderrFile(new File(&quot;err.txt&quot;));\\n</code></pre>\\n<p>同样的标准输入管道可以从已存在的文件中读取，通过调用方法<code>setStdinFile(java.io.File)</code></p>\\n<pre><code>ProcessTask task = new ProcessTask(command, envs, directory);\\ntask.setStdinFile(new File(&quot;in.txt&quot;));\\n</code></pre>\\n<hr>\\n<p><span id=\\\"5如何从调度配置文件中调度程序\\\"></span></p>\\n<h3 id=\\\"5、如何从调度配置文件中调度程序\\\">5、如何从调度配置文件中调度程序</h3>\\n<p>cron4j调度器可以从调度配置文件中调度一系列的程序流程</p>\\n<p>你需要准备一个调度配置文件，这和UNIX中crontab的用法非常相似，并且把文件通过<code>scheduleFile(File)</code>方法注册到调度器里面。</p>\\n<p>调度配置文件也可以通过<code>deschedule(File)</code>方法来脱离调度。</p>\\n<p>已经调度过的调度配置文件可以调用<code>getScheduledFiles()</code>方法来检索到。</p>\\n<p>已经注册过的调度配置文件会每分钟都被解析一次，调度器会根据调度配置文件去运行所有调用‘scheduling pattern（调度模式）’来正确声明的、匹配当前系统时间的程序。</p>\\n<p>cron4j的调度配置文件的声明规则可以从“<a href=\\\"#14cron%E8%A7%A3%E6%9E%90%E5%99%A8\\\">Cron解析器</a>”小节中了解到。</p>\\n<hr>\\n<p><span id=\\\"6创建自定义的任务-task\\\"></span></p>\\n<h3 id=\\\"6、创建自定义的任务-task\\\">6、创建自定义的任务 Task</h3>\\n<p>一个<code>java.lang.Runnable</code>对象是一个简单的Task，但是为了获得对整个任务的控制权你还需要继承<code>it.sauronsoftware,cron4j.Task</code>类（注意这是一个抽象类）。</p>\\n<p>有两种比较简单的创建形式：\\n（1）实现Runnable接口的时候：任务就是run方法所执行的语句。\\n（2）继承Task抽象类的时候：任务就是需要实现的<code>execute(TaskExecutionContext)</code>方法所执行的语句。</p>\\n<p>execute(TaskExecutionContext)方法提供了一个<code>it.sauronsoftware.cron4j.TaskExecutionContext</code>实例对象，这是在run方法中所没有的。</p>\\n<p>你可以用这个对象做这些事情来操作当前任务：</p>\\n<ul>\\n<li><p>status tracking 状态跟踪</p>\\n<blockquote>\\n<p>任务可以和它的执行器进行通信，可以通过文本描述来向外通知它的internal state（内部状态）</p>\\n<p>如果你想要你的任务支持这个功能的话，你可以重载<code>supportsStatusTracking()</code>方法，这个方法仅需要实现一个true为返回值就可以表示开启该功能。</p>\\n<p>当你重载过这个方法之后，在<code>execute(TaskExecutionContext)</code>方法里面就可以调用<code>context.setStatusMessage(String)</code>方法，这会给该任务的执行器发一条状态消息。这个状态消息，通过执行器，可以被外部用户索引到（具体看“<a href=\\\"#9%E6%89%A7%E8%A1%8C%E5%99%A8-executors\\\">执行器 Executors</a>”小节）。</p>\\n</blockquote>\\n</li>\\n<li><p>completeness tracking 完成度跟踪</p>\\n<blockquote>\\n<p>任务可以和它的执行器进行通信，可以通过数字值来向外通知它的completeness level（完成度），</p>\\n<p>如果你想要你的任务支持这个功能的话，你可以重载<code>supportsCompletenessTracking()</code>方法，这个方法仅需要实现一个true为返回值就可以表示开启该功能。</p>\\n<p>当你重载过这个方法之后，在<code>execute(TaskExecutionContext)</code>方法里面就可以调用<code>context.setCompleteness(double)</code>方法，这个方法需要传递一个0~1之间的double值，这会给该任务的执行器发一个完成度值。这个完成度值，通过执行器，可以被外部用户索引到（具体看“<a href=\\\"#9%E6%89%A7%E8%A1%8C%E5%99%A8-executors\\\">执行器 Executors</a>”小节）。</p>\\n</blockquote>\\n</li>\\n<li><p>paused 被暂停</p>\\n<blockquote>\\n<p>任务可以根据情况而暂停。</p>\\n<p>如果你想要你的任务支持这个功能的话，你可以重写<code>canBePaused()</code>方法，这个方法仅需要实现一个true为返回值就可以表示开启该功能。</p>\\n<p>当你重载过这个方法之后，你需要定期地（原文此处为：you have to periodically call the...）调用<code>context.pauseIfRequested()</code>方法，这会暂停任务的执行，直到被外部用户恢复或者终止当前任务。</p>\\n</blockquote>\\n</li>\\n<li><p>stopped 被终止</p>\\n<blockquote>\\n<p>任务可以根据情况而终止。</p>\\n<p>如果你想要你的任务支持这个功能的话，你可以重载<code>canBeStopped()</code>方法，这个方法仅需要实现一个true为返回值就可以表示开启该功能。</p>\\n<p>当你重载过这个方法之后，你需要定期地（...）调用<code>context.isStopped()</code>方法，当被外部用户命令终止的时候，这会返回一个true值（具体看“<a href=\\\"#9%E6%89%A7%E8%A1%8C%E5%99%A8-executors\\\">执行器 Executors</a>”小节）。这时候你有义务处理好这个任务在执行时所反馈出来的事件结果，好让它在正在运行的状态下平稳地（原文：gently）结束。</p>\\n</blockquote>\\n</li>\\n<li><p>索引调度器</p>\\n<blockquote>\\n<p>通过context对象，你可以通过<code>getScheduler()</code>索引到调度本身调度器。</p>\\n</blockquote>\\n</li>\\n<li><p>索引执行器</p>\\n<blockquote>\\n<p>通过context对象，你可以通过<code>getTaskExecutor()</code>索引到调度本身调度器。</p>\\n</blockquote>\\n</li>\\n</ul>\\n<p>一个自定义的任务可以被任务收集器（task collector）所立即调度、运行、或者返回。</p>\\n<br>\\n\\n<blockquote>\\n<p><em>译者文外补充：可以查看Task类的源码，不难发现，上述所要重载的方法在源码中也仅仅只是返回false值，也即默认是关闭这些功能的，我们只有重载为true才能开启和使用它们。</em></p>\\n</blockquote>\\n<p><a href=\\\"#index\\\">回到索引</a></p>\\n<hr>\\n<p><span id=\\\"7创建自定义的收集器-collector\\\"></span></p>\\n<h3 id=\\\"7、创建自定义的收集器-collector\\\">7、创建自定义的收集器 Collector</h3>\\n<p>通过任务收集器提供的API，你可以在调度器里面创建和插入你自己的任务源（task source）。</p>\\n<p>cron4j调度器支持注册一个或多个<code>it.sauronsoftware.cron4j.TaskCollector</code>实例，你只需要调用<code>addTaskCollector(TaskCollector)</code>方法即可。</p>\\n<p>被注册的收集器可以被调度器对象调用<code>getTaskCollectors</code>方法索引到，之前的收集器可以调用<code>removeTaskCollector(TaskCollector)</code>方法从调度器中移除。</p>\\n<p>收集器可以在任意的时间被添加（注册）、查询（索引）、移除，即使是在调度器正在运行的状态下也可以。</p>\\n<p>每一个被注册过的收集器每隔一分钟都会被调度器去索引一次，调度器会调用收集器的<code>collector.getTasks()</code>方法。这个实现方法会返回一个<code>it.sauronsoftware,cron4j.TaskTable</code>实例，我们把这个实例称为任务表。</p>\\n<p>每一个任务表都包含了本收集器中所有的任务实例和该任务对应的调度模式实例。一旦该表被检索到，调度器就会检查被记录（原文使用reported）到的对象，然后执行所有使用‘scheduling pattern（调度模式）’来正确声明的、匹配当前系统时间的任务。</p>\\n<p>一个自定义的收集器可以配合外部任务源来约束调度器的行为，比如数据库、或者xml文件，这些同样支持在运行时更改和管理的源。</p>\\n<br>\\n\\n<blockquote>\\n<p><em>译者文外补充：在<a href=\\\"#1collector-exp\\\">下面</a>贴出译者实践演示代码，代码中演示了如何向一个调度器中注册、移除收集器，并且查看收集器的信息，同时在代码运行的过程中也演示了调度器每分钟索引收集器task的过程。</em></p>\\n<p><em>读者可以自行研究代码，花上4分钟体会一下。读者也可以从<code>TaskController</code>类的源码开始阅读下去，特别是<code>TaskTable</code>类中，仅仅只有几个简单易懂的API，了解过后你会发现这套流程其实并不难走通。</em></p>\\n</blockquote>\\n<hr>\\n<p><span id=\\\"8创建自定义的监听器来监控你的调度器\\\"></span></p>\\n<h3 id=\\\"8、创建自定义的监听器来监控你的调度器\\\">8、创建自定义的监听器来监控你的调度器</h3>\\n<p>cron4j提供了<code>it.sauronsoftware,cron4j.SchedulerListener</code>类，我们可以使用它的API来对调度器的事件进行监听。</p>\\n<p>调度监听器需要实现以下方法：</p>\\n<pre><code>taskLaunching(TaskExecutor)\\n这个方法会在每个调度任务启动的时候被调度器调用\\n\\ntaskSucceeded(TaskExecutor)\\n这个方法会在每个任务成功地执行完毕的时候被调用\\n\\ntaskFailed(TaskExecutor, Throwable)\\n这个方法会在每个任务执行失败的时候被调用\\n</code></pre>\\n<p>你可以从“<a href=\\\"#9%E6%89%A7%E8%A1%8C%E5%99%A8-executors\\\">执行器 Executors</a>”小节中了解到更多的信息。</p>\\n<p>当你准备好一个调度监听器（SchedulerListener）的时候，你可以调用调度器的<code>addSchedulerListener(SchedulerListener)</code>方法将这个监听器注册到该调度器中。</p>\\n<p>你可以调用<code>removeSchedulerListener(SchedulerListener)</code>方法移除已经注册的监听器。</p>\\n<p>你可以调用<code>getSchedulerListeners()</code>方法获取到所有在本调度器注册的监听器。</p>\\n<p>调度监听器可以在任何时候被注册或者移除，即使是在调度器正在运行的时候。</p>\\n<hr>\\n<p><span id=\\\"9执行器-executors\\\"></span></p>\\n<h3 id=\\\"9、执行器-executors\\\">9、执行器 Executors</h3>\\n<p>每当调度器被开启并且运行的时候，你可以通过方法索引到它的执行器。</p>\\n<p>执行器非常像一个线程，它是被调度器用来执行任务的利器。</p>\\n<p>你可以调用<code>Scheduler.getExecutingTasks()</code>方法来获得当前正在运行的执行器。</p>\\n<p>你也可以通过调度监听器来获得执行器（见“<a href=\\\"#8%E5%88%9B%E5%BB%BA%E8%87%AA%E5%AE%9A%E4%B9%89%E7%9A%84%E7%9B%91%E5%90%AC%E5%99%A8%E6%9D%A5%E7%9B%91%E6%8E%A7%E4%BD%A0%E7%9A%84%E8%B0%83%E5%BA%A6%E5%99%A8\\\">8、创建自定义的监听器来监控你的调度器</a>”小节）。</p>\\n<p>每一个执行器，代表着一个<code>it.sauronsoftware.cron4j.TaskExecutor</code>实例，执行不同的任务。</p>\\n<p>执行器中的任务可以被<code>TaskExecutor.getTask()</code>方法索引到。</p>\\n<p>执行器的状态可以通过<code>TaskExecutor.isAlive()</code>方法来检查：如果当前执行器正在运行则返回true。</p>\\n<p>如果执行器处于运行状态，那么一直到整个执行过程完毕之前，你都可以通过<code>join()</code>方法来暂停当前线程</p>\\n<ul>\\n<li><p>关于status tracking 状态跟踪</p>\\n<blockquote>\\n<p>你可以调用<code>TaskExecutor.supportsStatusTracking()</code>方法，如果它会返回一个true值，则表示当前正在执行的任务支持状态跟踪功能。这意味着任务可以和它的执行者进行沟通，当然只能传递字符串。当前的状态信息可以被执行器调用<code>TaskExecutor.getStatusMessage()</code>方法索引到。</p>\\n</blockquote>\\n</li>\\n<li><p>关于completeness tracking 完成度跟踪</p>\\n<blockquote>\\n<p>你可以调用<code>supportsCompletenessTracking()</code>方法来检查当前正在执行的任务是否支持完成度跟踪。如果支持，那么你可以调用<code>TaskExecutor.getCompleteness()</code>方法来索引任务完成度值，它会返回一个0（未开始）~1（已完成）之间的数值。</p>\\n</blockquote>\\n</li>\\n<li><p>关于 paused 暂停</p>\\n<blockquote>\\n<p>你可以调用<code>TaskExecutor.canBePaused()</code>方法来检查当前正在执行的任务是否支持运行时暂停执行的功能。如果支持，那么你可以你可以调用<code>TaskExecutor.paused()</code>方法来暂停当前任务的执行。你还可以调用<code>TaskExecutor.isPaused()</code>方法来检查当前任务是否处于暂停状态。被暂停的执行器可以通过<code>TaskExecutor.resume()</code>方法来恢复运行。</p>\\n</blockquote>\\n</li>\\n<li><p>关于 stopped 终止</p>\\n<blockquote>\\n<p>你可以调用<code>TaskExecutor.canBeStopped()</code>方法来检查当前正在执行的任务是否支持运行时终止执行的功能。如果支持，那么你可以你可以调用<code>TaskExecutor.stop()</code>方法来终止当前任务的执行。同样你可以调用<code>TaskExecutor.isStopped()</code>方法去检查当前执行器是否被终止。</p>\\n<p><strong>注意：被终止过的执行器不能再恢复运行。</strong></p>\\n</blockquote>\\n</li>\\n<li><p>其他API</p>\\n<blockquote>\\n<p><code>TaskExecutor.getStartTime()</code></p>\\n<p>它会返回一个时间标记（time stamp）来告诉你执行器启动的时间，或者一个小于0的值来表示执行器还没开始启动。</p>\\n</blockquote>\\n</li>\\n</ul>\\n<blockquote>\\n<p><code>TaskExecutor.getScheduler()</code></p>\\n<p>它会返回当前执行器所属的调度器对象。</p>\\n</blockquote>\\n<blockquote>\\n<p><code>TaskExecutor.getGuid()</code></p>\\n<p>它会返回当前执行器所唯一对应的纯文本的GUID值。</p>\\n</blockquote>\\n<ul>\\n<li>关于事件驱动</li>\\n</ul>\\n<blockquote>\\n<p>执行器同时也提供了它自己的事件驱动API，你可以通过<code>it.sauronsoftware.cron4j.TaskExecutorListener</code>类来访问它们。</p>\\n<p>你可以分别调用：</p>\\n<p><code>addTaskExecutorListener(TaskExecutorListener)</code></p>\\n<p><code>removeTaskExecutorListener(TaskExecutorListener)</code></p>\\n<p><code>getTaskExecutorListeners()</code></p>\\n<p>方法来注册、移除、索引到执行监听器。</p>\\n<p>一个执行监听器需要实现以下方法：</p>\\n<pre><code>executionPausing(TaskExecutor)\\n该方法会在执行器被请求暂停正在运行的任务时调用。传入的参数代表着被请求暂停任务执行的执行器对象。\\n\\nexecutionResuming(TaskExecutor)\\n该方法会在执行器被请求恢复正在被暂停的任务时调用。传入的参数代表着被请求恢复任务执行的执行器对象。\\n\\nexecutionStopping(TaskExecutor)\\n该方法会在执行器被请求终止任务执行时调用。传入的参数代表着被请求的执行器对象。\\n\\nexecutionTerminated(TaskExecutor, Throwable)\\n该方法会在执行器将任务执行完毕的时候被调用。传入的第一个参数代表着该执行器对象，第二个参数是可选项，代表着迫使执行器终止执行任务的异常，如果任务正确的执行成功的话，该对象值为null。\\n\\nstatusMessageChanged(TaskExecutor, String)\\n该方法会在每次运行时任务的状态信息发生改变的时候调用。传入的第一个参数代表着该执行器对象，第二个参数则是新发布的任务状态信息。\\n\\ncompletenessValueChanged(TaskExecutor, double)\\n该方法会在每次运行时任务的完成度值发生改变的时候调用。传入的第一个参数代表着该执行器对象，第二个参数则是取值范围为0~1之间的新发布的完成度值。\\n</code></pre>\\n</blockquote>\\n<br>\\n\\n<blockquote>\\n<p><em>译者文外补充：正如官方文档所说的一样，执行器非常像一个线程，所以它提供的API也相对线程性细致和线程性复杂，这也是cron4j的唯一的重难点，使用的时候一定要考虑周全，同时还要分清楚调度器和执行器的关系，以及调度监控器和执行监控器的事件监听方法的调用时机。</em></p>\\n</blockquote>\\n<p><a href=\\\"#index\\\">回到索引</a></p>\\n<hr>\\n<p><span id=\\\"10手动启动任务\\\"></span></p>\\n<h3 id=\\\"10、手动启动任务\\\">10、手动启动任务</h3>\\n<p>如果调度器以及开启并且处于运行中，你是有可能手动启动一个任务的，你甚至可以不用安排调度模式。</p>\\n<p>你可以使用<code>Scheduler.launch(Task)</code>方法，任务就会立马被执行，这个方法会返回该任务的TaskExecutor（执行器）实例，你可以使用它来控制整个任务的执行过程。</p>\\n<hr>\\n<p><span id=\\\"11在指定时区下运行\\\"></span></p>\\n<h3 id=\\\"11、在指定时区下运行\\\">11、在指定时区下运行</h3>\\n<p>在默认的情况下，调度器会在系统默认的时区中运行。换句话说，一个“ 0 2 * * * ”的调度模式会根据系统时区在当地时间每天的2（am）时执行任务。</p>\\n<p>你可以为调度器设置不同于系统默认时区的时区作为它的工作时区。</p>\\n<p>调用<code>Scheduler.setTimeZone(TimeZone)</code>方法和<code>Scheduler.getTimeZone()</code>方法就可以控制这个属性。</p>\\n<p>一旦调度器的默认时区被改变，系统当前运行时会在解释调度模式的时候去区适应你所提供的时区。那么结果会在你指定的时区中按照你指定的调度模式去执行任务。假设有以下的情况：</p>\\n<p>系统时间：10：00\\n系统时区：GMT+1\\n调度器设置时区：GMT+3</p>\\n<p>调度器会把调度模式和系统时间进行比较，然后把GTM+1时区下的10:00转换到GTM+3，这意味着10：00变成了12：00，这个结果会被运用到调度器中去执行任务。所以，在给定的设置下，任务会在模式“ 0 12 * * * ”中执行，而不是模式“ 0 10 * * * ” 。</p>\\n<hr>\\n<p><span id=\\\"12守护线程-daemon-threads\\\"></span></p>\\n<h3 id=\\\"12、守护线程-daemon-threads\\\">12、守护线程 Daemon threads</h3>\\n<p>JVM只有在当前运行线程全部都是守护线程的时候才会退出，cron4j调度器可以被配置为只生产守护线程。为了控制这个特性，你需要调用<code>Scheduler.setDaemon(boolean)</code>方法，这个方法必须在调度器被开启之前调用，方法的默认值是false，你可以调用<code>Scheduler.isDaemon()</code>方法来检测当前调度器生成的线程是否是守护线程。</p>\\n<br>\\n\\n<blockquote>\\n<p><em>译者文外补充：这小节的意思是，如果你启动了一个调度器，在它执行到特定状态的时候让它自己关闭（注意是关闭调度器）的话，在默认的情况下它是不会退出程序的，不信你可以写一个简单的demo来测试一下。</em></p>\\n</blockquote>\\n<hr>\\n<p><span id=\\\"13预报器-predictor\\\"></span></p>\\n<h3 id=\\\"13、预报器-predictor\\\">13、预报器 Predictor</h3>\\n<p><code>it.sauronsoftware.cron4j.Predictor</code>类可以预测你的调度模式什么时候会被匹配到。</p>\\n<p>假如你想知道调度器在使用模式“ 0 3 jan-jun,sep-dec mon-fri ”的情况下什么时候会执行任务，你可以使用预报器对象去预测接下来n次任务的执行时间：</p>\\n<pre><code>String pattern = &quot;0 3 * jan-jun,sep-dec mon-fri&quot;;\\nPredictor p = new Predictor(pattern);\\nfor (int i = 0; i &lt; n; i++) {\\n    System.out.println(p.nextMatchingDate());\\n}\\n</code></pre>\\n<br>\\n\\n<blockquote>\\n<p><em>译者文外补充：当n等于5的时候结果如下：</em></p>\\n<pre><code>Fri Sep 01 03:00:00 CST 2017\\nMon Sep 04 03:00:00 CST 2017\\nTue Sep 05 03:00:00 CST 2017\\nWed Sep 06 03:00:00 CST 2017\\nThu Sep 07 03:00:00 CST 2017\\n</code></pre>\\n</blockquote>\\n<hr>\\n<p><span id=\\\"14cron解析器\\\"></span></p>\\n<h3 id=\\\"14、cron解析器\\\">14、Cron解析器</h3>\\n<p><code>it.sauronsoftware.cron4j.CronParser</code>类可以被用来解类crontab形式的文件以及字符流。</p>\\n<p>如果你想根据类crontab形式的文件去安排一系列的任务，你可以不需要使用Cron解析器，你只需要调用<code>Scheduler.scheduleFile(File)</code>方法把文件添加到调度器里面就可以了。</p>\\n<p>如果<code>Scheduler.scheduleFile(File)</code>方法还不能够满足你的需求的话，你可以考虑使用Cron解析器去安排任务。</p>\\n<p>举个栗子，如果你想从远程源获取任务安排表，可是远程源并不支持<code>java.io.File</code>对象去操作的话（比如远程服务器上的文档、数据库中的数据设置等等），这时候你可以自己实现<code>it.sauronsoftware.cron4j.TaskCollector</code>类，好让Cron解析器更方便的去解析任何类crontab内容。</p>\\n<p>你可以解析整个文件或者整个流，也可以只解析其中一句。</p>\\n<p>每一行可以是空行、注释、或者是可调度行。</p>\\n<p>没有任何字符或者仅仅包含空格符的行会被认为是空行。</p>\\n<p>第一个字符为非空格符而且是一个‘#’符的行会被认为是注释。</p>\\n<p>解析器会忽略空行和注释行。</p>\\n<p>任何其他类别的行都会被解析为可调度行。</p>\\n<p>一个有效的可调度行应该遵循以下结构（注意四个部分之间有空格）：</p>\\n<blockquote>\\n<p>scheduling-pattern [options] command [args]</p>\\n<p>调度模式 [选项] 命令 [提供的参数]</p>\\n</blockquote>\\n<p><strong>scheduling-pattern</strong>：必须是根据<code>it.sauronsoftware.cron4j.SchedulingPattern</code>类所给定义的有效的调度模式。</p>\\n<p><strong>options</strong>：是一个可选选项的列表，它告诉cron4j该什么样的环境来执行任务。稍后会作详细的说明。</p>\\n<p><strong>command</strong>：是有效的系统命令，比如一个可执行的调用。</p>\\n<p><strong>args</strong>：是提供给系统命令的参数列表。</p>\\n<p>在调度模式之后，其他的部分需要使用空格符或者双引号来界定。</p>\\n<p>使用双引号的好处是你可以使用以下转义字符：</p>\\n<pre><code>\\\\&quot; - quotation mark\\n\\\\\\\\ - back slash\\n\\\\/ - slash\\n\\\\b - back space\\n\\\\f - form feed\\n\\\\n - new line\\n\\\\r - carriage return\\n\\\\t - horizontal tab\\n\\\\ufour-hex-digits - the character at the given Unicode index\\n</code></pre>\\n<br>\\n\\n<p>对于<strong>options</strong>部分的子集可以包含一个或多个以下的对象：</p>\\n<blockquote>\\n<p>IN：一个文件路径，重定向命令的标准输入通道到指定的文件位置。</p>\\n<p>OUT：一个文件路径，重定向命令的标准输出通道到指定的文件位置。</p>\\n<p>ERR：一个文件路径，重定向命令的标准报错输出通道到指定的文件位置。</p>\\n<p>ENV：名值对（name=value），在命令作用域中定义环境变量。</p>\\n<p>DIR：一个目录位置，设置命令的工作目录，这要求你的JVM环境至少是1.3。</p>\\n</blockquote>\\n<p>你还可以安排一个在解析器的类加载器作用域内的Java类的方法调用。这个方法必须是静态方法并且它的参数列表只能是唯一的一个String数组，为了调用这个方法，你的调度行结构需要这么写：</p>\\n<blockquote>\\n<p>scheduling-pattern java:className#methodName [args]</p>\\n<p>方法名部分可以被省略，这时解析器会调用类中的main方法（如果存在的话）。</p>\\n</blockquote>\\n<p>你需要注意的是，静态方法会在和调度器一样的JVM环境中执行，并不会产生任何的外部程序！因此这时候<strong>options</strong>部分不可选！</p>\\n<p>非法的调度行将会被抛弃，不会阻断解析过程，但会在程序的标准错误输出通道中发送一条错误信息。</p>\\n<p>以下是一些合法的调度行栗子：</p>\\n<pre><code>0 5 * * * sol.exe\\n0,30 * * * * OUT:C:\\\\ping.txt ping 10.9.43.55\\n0,30 4 * * * &quot;OUT:C:\\\\Documents and Settings\\\\Carlo\\\\ping.txt&quot; ping 10.9.43.55\\n0 3 * * * ENV:JAVA_HOME=C:\\\\jdks\\\\1.4.2_15 DIR:C:\\\\myproject OUT:C:\\\\myproject\\\\build.log C:\\\\myproject\\\\build.bat &quot;Nightly Build&quot;\\n0 4 * * * java:mypackage.MyClass#startApplication myOption1 myOption2\\n</code></pre>\\n<p>把上述文档作txt保存之后，可以在程序中这样调用：</p>\\n<pre><code>public class Main {\\n\\n    public static void main(String[] args) {\\n        // Declares the file.\\n        File file = new File(&quot;cron4jtab.txt&quot;);\\n        // Creates the scheduler.\\n        Scheduler scheduler = new Scheduler();\\n        // Schedules the file.\\n        scheduler.scheduleFile(file);\\n        // Starts the scheduler.\\n        scheduler.start();\\n        // Stays alive for five minutes.\\n        try {\\n            Thread.sleep(5L * 60L * 1000L);\\n        } catch (InterruptedException e) {\\n            ;\\n        }\\n        // Stops the scheduler.\\n        scheduler.stop();\\n    }\\n\\n}\\n</code></pre>\\n<hr>\\n<ul>\\n<li><br>\\n<br>\\n<br>\\n<br></li>\\n</ul>\\n<h1 id=\\\"部分实践演示代码\\\">部分实践演示代码</h1>\\n<p><span id=\\\"1collector-exp\\\"></span></p>\\n<h3 id=\\\"1、collector-exp\\\">1、Collector exp</h3>\\n<pre><code>public class CollectorExp {\\n\\n    public static void main(String[] args) {\\n        Scheduler scheduler = new Scheduler();\\n\\n        TaskCollector c1 = new TaskCollector() {\\n            @Override\\n            public TaskTable getTasks() {\\n                System.out.println(&quot;过了一分钟 调度器又来索引我啦&quot;);\\n                TaskTable taskTable = new TaskTable();\\n                taskTable.add(new SchedulingPattern(&quot;* * * * *&quot;), new MyTask(&quot;one&quot;));\\n                taskTable.add(new SchedulingPattern(&quot;*/2 * * * *&quot;), new MyTask(&quot;two&quot;));\\n                return taskTable;\\n            }\\n        };\\n\\n        TaskCollector c2 = () -&gt;{\\n            System.out.println(&quot;过了一分钟 调度器又来索引我啦&quot;);\\n            TaskTable taskTable = new TaskTable();\\n            taskTable.add(new SchedulingPattern(&quot;* * * * *&quot;), new MyTask(&quot;three&quot;));\\n            taskTable.add(new SchedulingPattern(&quot;*/2 * * * *&quot;), new MyTask(&quot;four&quot;));\\n            return taskTable;\\n        };\\n\\n        scheduler.addTaskCollector(c1);\\n        scheduler.addTaskCollector(c2);\\n\\n        showController(scheduler);\\n\\n        scheduler.start();\\n\\n        try {\\n            Thread.sleep(2000L * 60L);\\n        } catch (InterruptedException e) {\\n            e.printStackTrace();\\n        }\\n\\n        System.out.println(&quot;两分钟到 移除c1&quot;);\\n        scheduler.removeTaskCollector(c1);\\n        showController(scheduler);\\n\\n    }\\n\\n    static void showController(Scheduler scheduler){\\n        TaskCollector[] taskCollectors = scheduler.getTaskCollectors();\\n        System.out.println(&quot;|----当前调度器中有&quot;+taskCollectors.length+&quot;个收集器&quot;);\\n        for (int i = 0 ; i &lt; taskCollectors.length ; ++i){\\n            System.out.println(&quot;|----|----当前显示第&quot;+(i+1)+&quot;个收集器的信息&quot;);\\n            TaskCollector now = taskCollectors[i];\\n            TaskTable tasks = now.getTasks();\\n            System.out.println(&quot;|----|----|----当前收集器有&quot;+tasks.size()+&quot;个任务&quot;);\\n            for (int j = 0 ; j &lt; tasks.size() ; ++j){\\n                System.out.println(&quot;|----|----|----|----当前显示第&quot;+(j+1)+&quot;个任务信息&quot;);\\n                System.out.println(&quot;|----|----|----|----Task:[&quot;+tasks.getTask(j)+&quot;] and scp:[&quot;+tasks.getSchedulingPattern(j)+&quot;]&quot;);\\n            }\\n        }\\n    }\\n\\n}\\n\\nclass MyTask extends Task{\\n\\n    private String num;\\n\\n    MyTask(String num) {\\n        this.num = num;\\n    }\\n\\n    @Override\\n    public void execute(TaskExecutionContext taskExecutionContext) throws RuntimeException {\\n        LocalTime now = LocalTime.now();\\n        System.out.println(&quot;This is Task &quot;+num+&quot; ! [ &quot; + now.getHour() + &quot; : &quot; + now.getMinute() + &quot; ]&quot;);\\n\\n    }\\n}\\n</code></pre>\\n<hr>\\n\";","export default \"<h3 id=\\\"chapter2-物理层\\\">Chapter2-物理层</h3>\\n<p>物理层是计网体系结构中的最下面一层，本章主要介绍：</p>\\n<ol>\\n<li>物理层的基本任务</li>\\n<li>几种常用的信道复用技术</li>\\n<li>几种常用的宽带接入技术</li>\\n</ol>\\n<h4 id=\\\"21-物理层基本概念\\\">2.1 物理层基本概念</h4>\\n<h5 id=\\\"物理层的主要任务\\\">物理层的主要任务</h5>\\n<p>物理层的主要任务是确定与传输媒体的接口有关的一些特性：</p>\\n<ol>\\n<li><strong>机械特性：</strong>指明接口所用界掀起的形状和尺寸、引脚数目和排列、固定和锁定装置。平时常见的各种规格的接插件都有严格的标准化规定。</li>\\n<li><strong>电气特性：</strong>指明在接口电缆的各条线上出现的电压的范围。</li>\\n<li><strong>功能特性：</strong>指明某条线上出现的某个电平的意义。</li>\\n<li><strong>过程特性：</strong>指明对于不同功能的各种可能事件的出现顺序。</li>\\n<li><strong>传输方式转换：</strong>计算机内部大多采用<strong>并行传输</strong>，但是数据通信线路上一般都是<strong>串行传输（处于经济上的考虑）</strong>，所以需要转换。</li>\\n</ol>\\n<h4 id=\\\"22-数据通信基本知识\\\">2.2 数据通信基本知识</h4>\\n<h5 id=\\\"221-数据通信系统模型\\\">2.2.1 数据通信系统模型</h5>\\n<p>一个数据通信系统大致可以分为：<strong>源系统（发送端）</strong>、<strong>传输系统（传输线路）</strong>和<strong>目的系统（接受端、接收方）</strong></p>\\n<p><img src=\\\"../../../public/img/TIM%E6%88%AA%E5%9B%BE20180705135038.png\\\" alt=\\\"\\\"></p>\\n<h6 id=\\\"常用术语\\\">常用术语</h6>\\n<ul>\\n<li><p><strong>源点：</strong>源点设备要产生传输的数据，例如计算器键盘输入的字符，计算机产生输出的数字比特流</p>\\n</li>\\n<li><p><strong>发送器：</strong>源点产生的数字比特流要通过发送器<strong>编码</strong>之后才能够在传输系统中传输。典型的发送器就是<strong>调制器</strong></p>\\n</li>\\n<li><p><strong>接收器：</strong>接受传输系统传过来的信号，并将信号转换为可以被目的设备处理的信息。典型的接收器就是解调器，它用于将模拟信号解调，还原成原来的数字比特流</p>\\n</li>\\n<li><p><strong>终点：</strong>终点设备从接收器获取传输过来的数字比特流，然后输出信息</p>\\n</li>\\n<li><p>通信的目的是传送<strong>消息（message）</strong></p>\\n</li>\\n<li><p><strong>数据（data）</strong>是运送消息的实体</p>\\n</li>\\n<li><p><strong>信号（signal）</strong>是数据的电气表现，信号分类两大类：</p>\\n<ul>\\n<li><strong>模拟信号（连续信号）</strong>——代表消息的参数的<u>取值是<strong>连续</strong>的</u>，如传送的波</li>\\n<li><strong>数字信号（离散信号）</strong>——代表消息的参数的<u>取值是<strong>离散</strong>的</u>，如比特流</li>\\n</ul>\\n</li>\\n<li><p><strong>码元</strong>是代表不同离散数值的基本波形，在使用二进制编码的时候，码元就只有两种，0 和 1</p>\\n<p>对于码元的理解在下面可以加以说明</p>\\n</li>\\n</ul>\\n<h5 id=\\\"222-信道基本概念\\\">2.2.2 信道基本概念</h5>\\n<p>首先要明确：<strong>“信道”</strong>指的是<u>向<strong>某一方向</strong>传送信息的媒体</u>，所以一般一条通信电路往往包含一条<strong>发送信道</strong>和<strong>一条接收信道</strong>。</p>\\n<p>从信道的交互方式来看，可以有一下三种基本的交互方式：</p>\\n<ol>\\n<li><strong>单工通信</strong>，只有一个方向且没有反方向的交互。无线电广播或有线电广播以及电视广播就属于这种。</li>\\n<li><strong>半双工通信</strong>，两个方向都可，但是同时只能往一个方向进行通讯。</li>\\n<li><strong>双全工通信</strong>，两个方向都可以，同时发同时接都可以。</li>\\n</ol>\\n<p>来自信源的信号通常称为<strong>基带信号</strong>，但是基带信号大多包含有较多的<strong>低频成分</strong>，甚至有直流成分，<u>而许多信道并不能传输这种低频成分或者直流成分</u>，为了解决这个问题，所以<strong>必须对基带信号进行调制（modulation）</strong>。</p>\\n<h6 id=\\\"调制\\\">调制</h6>\\n<ul>\\n<li><strong>基带调制：</strong>仅对基带信号进行波形变换，使之能和信道特性相适应，这种调制是把数字信号转换为另一种形式的数字信号，所以一般叫基带调制为<strong>编码</strong></li>\\n</ul>\\n<p><img src=\\\"../../../public/img/TIM%E5%9B%BE%E7%89%8720180706133415.png\\\" alt=\\\"\\\"></p>\\n<p>以上是<strong>常用</strong>的基带调制方式，用的多的就是曼切斯特编码，常用于传统的以太网，这里我们可以补充一下码元的理解，拿曼切斯特来举例的话，它用<strong>两个码元代表一个位</strong>，也就是<strong>10 代表 1，01 代表 0</strong>，这样做的做法是用于同步时钟</p>\\n<ul>\\n<li><strong>带通调制：</strong>需要使用<strong>载波（carrier）</strong>进行调制，把基带信号的频率搬到高频段，并转换为模拟信号</li>\\n</ul>\\n<p><img src=\\\"../../../public/img/TIM%E6%88%AA%E5%9B%BE20180706160531.png\\\" alt=\\\"\\\"></p>\\n<p>以上是<strong>基本</strong>的带同调制的方式</p>\\n<h5 id=\\\"23-信道复用技术\\\">2.3 信道复用技术</h5>\\n<p><img src=\\\"../../../public/img/TIM%E6%88%AA%E5%9B%BE20180706163834.png\\\" alt=\\\"\\\"></p>\\n<h6 id=\\\"231-频分复用、时分复用和统计时分复用\\\">2.3.1 频分复用、时分复用和统计时分复用</h6>\\n<ul>\\n<li><strong>频分复用（Frequency Divition Multiplexing，FDM）：</strong>所有用户在同一时间占用不同的带宽资源（这里的带宽是指频率带宽而不是发送速率）</li>\\n<li><strong>时分复用（Time Divition Multiplexing，TDM）：</strong>所有用户在不同时间占用同样的频带宽度，更有利于数字信号的传输</li>\\n</ul>\\n<p><img src=\\\"../../../public/img/TIM%E6%88%AA%E5%9B%BE20180707164750.png\\\" alt=\\\"\\\"></p>\\n<p>从图片我们可以注意到，在频分复用的时候，非常占带宽，用户越多，带宽越大；在时分复用的时候，看似可以规律的使用一致的带宽，但是不一定所用用户在自己的时间里都发信息，这样可能就会有很多浪费，信道利用率很低。</p>\\n<p><strong>统计时分复用（Statistic TDM，STDM）</strong>就是为了解决时分复用的这个问题，使用一个集中器，将同一段时间的数据集中起来：</p>\\n<p><img src=\\\"../../../public/img/TIM%E6%88%AA%E5%9B%BE20180707165324.png\\\" alt=\\\"\\\"></p>\\n<p>但是 STDM 中集中器的使用前提是假定各个用户是<u><strong>间歇地工作</strong></u></p>\\n<h6 id=\\\"232-波分复用\\\">2.3.2 波分复用</h6>\\n<p>波分复用（Wavelength DM，WDM）即光的频分复用</p>\\n<h6 id=\\\"233-码分复用\\\">2.3.3 码分复用</h6>\\n<p><strong>码分复用（Code Division Multiplexing，CDM）</strong>又叫做<strong>码分多址（Code Division Multiple Access，CDMA）</strong>，每个用户可以在同样的频带进行通信，由于<u><strong>各用户使用经过特殊挑选的不同码型，因此各用户之间并不会干扰</strong></u>。</p>\\n<p>CDMA 已被广泛使用在民用移动通信中，采用码分多址的好处：</p>\\n<ul>\\n<li>提高通信的话音质量和数据传输可靠性</li>\\n<li>减少干扰对通信的影响</li>\\n<li>增大通信系统容量</li>\\n<li>降低手机的平均发射功率</li>\\n</ul>\\n<p>工作原理：</p>\\n<ol>\\n<li><p>CDMA 中，每一个比特时间再划分为<em>m</em>个短的间歇，称为<strong>码片（chip）</strong>，通常<em>m</em>的值为 64 或者 128</p>\\n</li>\\n<li><p>使用 CMDA 的每一个站被指派一个唯一的<em>m</em>bit<strong>码片序列（chip sequence）</strong></p>\\n<blockquote>\\n<p>如果要发送 0，则发送序列的二进制反码，如果发送 1 则发送序列二进制原码</p>\\n</blockquote>\\n</li>\\n<li><p>为了方便，将 0 写成-1，1 写成+1</p>\\n</li>\\n<li><p>CDMA 系统还有一个重要特点就是：每个站分配的序列不仅不同，而且互相必须<strong>正交</strong>，这样用公式去解释是：<u><strong>S 站序列和其他站序列的向量内积为 0，和自己的序列向量内积是 1</strong></u></p>\\n</li>\\n</ol>\\n<p><img src=\\\"../../../public/img/TIM%E6%88%AA%E5%9B%BE20180707171300.png\\\" alt=\\\"\\\"></p>\\n\";","export default \"<p><div class=\\\"saying mb-4\\\"><div class=\\\"saying-quote saying-left-quote\\\">“</div><div class=\\\"saying-quote saying-right-quote\\\">”</div>\\n前言：之前留下的 17 大创项目总得做点什么，马上就要结题了，我们做的 AR 留影需要将用户照下来的照片生成点云然后合成模型。由此 Escnqh[link:gayhub]找到了使用 PIL+osm-bundler 的解决方案。\\n</div></p>\\n<!-- more -->\\n\\n<h3 id=\\\"python-photogrammetry-toolkit（ppt）\\\">Python Photogrammetry ToolKit（PPT）</h3>\\n<p>这玩意是意大利的一个团队开发的一个 Python 图像处理工具包，正是这个工具包提供的 osm-bundler 加上 PIL 构成了一套解决方案。</p>\\n<p>官网：<a href=\\\"http://184.106.205.13/arcteam/ppt.php\\\">http://184.106.205.13/arcteam/ppt.php</a></p>\\n<h4 id=\\\"pil\\\">PIL</h4>\\n<blockquote>\\n<p>The Python Imaging Library (PIL) adds image processing capabilities to your Python interpreter. This library supports many file formats, and provides powerful image processing and graphics capabilities.</p>\\n</blockquote>\\n<p>简单来说就是 Python 的图像处理库，osm-bundler 基于这个库对图像进行分析。</p>\\n<p>官网：<a href=\\\"http://www.pythonware.com/products/pil/\\\">http://www.pythonware.com/products/pil/</a></p>\\n<p>但是很坑的一点是，这个项目 09 年就停止维护了，所以安装这个东西异常困难。</p>\\n<h4 id=\\\"pillow\\\">Pillow</h4>\\n<p>由于 PIL 属于史前神物，无法触碰，安装过程中所需要的组件特别零散，其实这对于 Debian 系的 Linux 系统来说问题并不大，大部分的库使用 apt 就能获取到，但是我的服务器是 CentOS7，属于 Redhat 系的，只有 yum 和 rpm。而开发 PPT 的意大利团队是在 Debian 下开发的，Redhat 下库的获取不一样，所以我还不能按照官方给的思路来进行 PPT 的部署- -///。</p>\\n<p>于是我找到了 Pillow。</p>\\n<p>介绍：</p>\\n<blockquote>\\n<p>Pillow is the friendly PIL fork by Alex Clark and Contributors. PIL is the Python Imaging Library by Fredrik Lundh and Contributors.</p>\\n</blockquote>\\n<p>Pillow 是 PIL 的一个友好的 Fork，而且这个项目在 GitHub 上持续维护。</p>\\n<p>官网：<a href=\\\"http://pillow.readthedocs.io/en/latest/index.html\\\">http://pillow.readthedocs.io/en/latest/index.html</a></p>\\n<p>hub：<a href=\\\"https://github.com/python-pillow/Pillow\\\">https://github.com/python-pillow/Pillow</a></p>\\n<p>所以说，我可以使用 Pillow 来代替 PIL，这是完全可行的！！</p>\\n<p>而且 Pillow 的安装异常简单，我们只需要使用 python 系的包管理工具 PIP 就可以一键安装！！！</p>\\n<h4 id=\\\"pip\\\">PIP</h4>\\n<blockquote>\\n<p>The PyPA recommended tool for installing Python packages.</p>\\n</blockquote>\\n<p>官网：<a href=\\\"https://pip.pypa.io/en/stable/\\\">https://pip.pypa.io/en/stable/</a></p>\\n<hr>\\n<h3 id=\\\"安装-ppt\\\">安装 PPT</h3>\\n<h4 id=\\\"安装-python\\\">安装 Python</h4>\\n<p>这是一切的大前提，你的系统里需要有 python 环境，但是一般的 linux 都会内置一个，只不过你不要使用版本太低的 python 就好，具体到多少我也不清楚，python 的版本断代真的是傻的不行。</p>\\n<h4 id=\\\"安装-pip\\\">安装 pip</h4>\\n<p>自己看：<a href=\\\"https://packaging.python.org/guides/installing-using-linux-tools/#installing-pip-setuptools-wheel-with-linux-package-managers\\\">https://packaging.python.org/guides/installing-using-linux-tools/#installing-pip-setuptools-wheel-with-linux-package-managers</a></p>\\n<p>然后需要更新一下 pip</p>\\n<pre><code class=\\\"hljs language-bash\\\">pip install -U pip\\n</code></pre>\\n<h4 id=\\\"安装-pillow\\\">安装 Pillow</h4>\\n<p>Installation 页：<a href=\\\"http://pillow.readthedocs.io/en/latest/installation.html\\\">http://pillow.readthedocs.io/en/latest/installation.html</a></p>\\n<p>大概浏览一下这个页面，不要急着一上来就安装 Pillow。</p>\\n<p>在“External Libraries”一节，它提示我们，在安装 Pillow 之前我们需要安装完运行 Pillow 所需的库。</p>\\n<p>开发 Pillow 的团队在 hub 的 depends 文件夹下提供了这些库在各种系统下的安装脚本，我们选择 fedora_23.sh 的脚本(fedora 是 RedHat)，但是不要运行这个脚本，我们看它对应的 package 需要安装哪些就好。</p>\\n<p><img src=\\\"../../../public/img/3aef0a673e1639aec3272e205b934971.png\\\" alt=\\\"fedora\\\"></p>\\n<p>如图最下面一行，在 centos 下就可以执行：</p>\\n<pre><code class=\\\"hljs language-bash\\\">yum install libtiff-devel libjpeg-devel zlib-devel freetype-devel  lcms2-devel libwebp-devel openjpeg2-devel tkinter python3-tkinter  tcl-devel tk-devel harfbuzz-devel fribidi-devel libraqm-devel\\n</code></pre>\\n<p><img src=\\\"../../../public/img/5e3b4f30ce74fefbc7e2ebfcccb76543.png\\\" alt=\\\"yum\\\"></p>\\n<p>这些我都安装过了，其中丢失的 python3-tkinter 在 centos 下没有那就不用管了。</p>\\n<p>这些库安装完之后，我们就可以安装 Pillow 了：</p>\\n<pre><code class=\\\"hljs language-bash\\\">pip install Pillow\\n</code></pre>\\n<p>安装完 Pillow 我们来验证一下，我们写一个 test.py 脚本：</p>\\n<pre><code class=\\\"hljs language-python\\\"><span class=\\\"hljs-keyword\\\">from</span> PIL <span class=\\\"hljs-keyword\\\">import</span> Image\\npicPath = <span class=\\\"hljs-string\\\">&#x27;./card.jpg&#x27;</span>\\n\\nim = Image.<span class=\\\"hljs-built_in\\\">open</span>(picPath)\\n<span class=\\\"hljs-built_in\\\">print</span> im.getbbox()\\n</code></pre>\\n<p>和脚本一起有一个 card.jpg 文件，我们使用 Pillow 来分析这个文件，执行：</p>\\n<pre><code class=\\\"hljs language-bash\\\">python test.py\\n</code></pre>\\n<p>分析出了数据：</p>\\n<pre><code class=\\\"hljs language-bash\\\">[root@VM_16_214_centos youyinnn]<span class=\\\"hljs-comment\\\"># python test.py</span>\\n(0, 0, 564, 738)\\n[root@VM_16_214_centos youyinnn]<span class=\\\"hljs-comment\\\">#</span>\\n</code></pre>\\n<p>说明已经安装成功！</p>\\n<h4 id=\\\"安装-blas-库\\\">安装 BLAS 库</h4>\\n<p>我们要使用 PPT，除了 PIL 之外，还需要两个重要组件，其中一个便是 BLAS (libblas3gf, libblas-dev) 。</p>\\n<p>就不介绍了，直接开始安装，在 centos 下的安装比较奇葩，因为 PPT 官网给的包名什么的都是 apt 有的，有的可能 yum 下没有，所以我们需要选择合适的库：</p>\\n<p>首先把 blas 安装了：</p>\\n<pre><code class=\\\"hljs language-bash\\\">yum install blas\\n</code></pre>\\n<p>以上命令在我的主机上会安装&quot;blas-3.4.2-8.el7.x86_64&quot;：</p>\\n<pre><code class=\\\"hljs language-bash\\\">[root@VM_16_214_centos youyinnn]<span class=\\\"hljs-comment\\\"># yum install blas</span>\\nLoaded plugins: fastestmirror, langpacks\\nRepository epel is listed more than once <span class=\\\"hljs-keyword\\\">in</span> the configuration\\nLoading mirror speeds from cached hostfile\\nPackage blas-3.4.2-8.el7.x86_64 already installed and latest version\\nNothing to <span class=\\\"hljs-keyword\\\">do</span>\\n[root@VM_16_214_centos youyinnn]<span class=\\\"hljs-comment\\\">#</span>\\n</code></pre>\\n<p>它主要提供一下三个 lib：</p>\\n<pre><code class=\\\"hljs language-bash\\\">/usr/lib64/libblas.so.3\\n/usr/lib64/libblas.so.3.4\\n/usr/lib64/libblas.so.3.4.2\\n</code></pre>\\n<p>然后 search 一下 blas：</p>\\n<pre><code class=\\\"hljs language-bash\\\">[root@VM_16_214_centos youyinnn]<span class=\\\"hljs-comment\\\"># yum search blas</span>\\nLoaded plugins: fastestmirror, langpacks\\nRepository epel is listed more than once <span class=\\\"hljs-keyword\\\">in</span> the configuration\\nLoading mirror speeds from cached hostfile\\n==================================================================================== N/S matched: blas ====================================================================================\\nblas-devel.i686 : BLAS development libraries\\nblas-devel.x86_64 : BLAS development libraries\\nblas-static.i686 : BLAS static libraries\\nblas-static.x86_64 : BLAS static libraries\\nblas64-devel.x86_64 : BLAS development libraries\\nblas64-static.x86_64 : BLAS static libraries (64bit INTEGER)\\n...\\n\\n[root@VM_16_214_centos youyinnn]<span class=\\\"hljs-comment\\\">#</span>\\n</code></pre>\\n<p>得出的结果比较多，我们需要选择安装“blas-devel”，至于是否是 64 位系统的选择，就看你自己的机子了。</p>\\n<p>安装的“blas-devel”提供下面这个 lib：</p>\\n<pre><code class=\\\"hljs language-bash\\\">/usr/lib64/libblas.so\\n</code></pre>\\n<p>PPT 还需要安装的是“libblas3gf”，但是这个玩意 centos 没有，好在我找到了对应的一个 rpm：<a href=\\\"https://altlinux.pkgs.org/sisyphus/classic-x86_64/libblas3gf-3.9.2-alt1.x86_64.rpm.html\\\">https://altlinux.pkgs.org/sisyphus/classic-x86_64/libblas3gf-3.9.2-alt1.x86_64.rpm.html</a></p>\\n<p>所以我们要下载这个文件，然后使用 rpm 来安装它！</p>\\n<p>安装完了之后我们可以得到这个关键的 lib：</p>\\n<pre><code class=\\\"hljs language-bash\\\">/usr/lib64/libblas.so.3gf\\n/usr/lib64/libblas.so.3gf.0\\n</code></pre>\\n<p>然后我们 BLAS 就安装完成了！</p>\\n<h4 id=\\\"安装-lapack-库\\\">安装 LAPACK 库</h4>\\n<p>LAPACK 库需要安装：LAPACK (liblapack3gf, liblapack-dev)</p>\\n<p>直接 yum：</p>\\n<pre><code class=\\\"hljs language-bash\\\">yum install lapack\\n</code></pre>\\n<p>会安装：</p>\\n<pre><code class=\\\"hljs language-bash\\\">[root@VM_16_214_centos linux]<span class=\\\"hljs-comment\\\"># yum install lapack</span>\\nLoaded plugins: fastestmirror, langpacks\\nRepository epel is listed more than once <span class=\\\"hljs-keyword\\\">in</span> the configuration\\nLoading mirror speeds from cached hostfile\\nPackage lapack-3.4.2-8.el7.x86_64 already installed and latest version\\nNothing to <span class=\\\"hljs-keyword\\\">do</span>\\n[root@VM_16_214_centos linux]<span class=\\\"hljs-comment\\\">#</span>\\n</code></pre>\\n<p>它提供了：</p>\\n<pre><code class=\\\"hljs language-bash\\\">/usr/lib64/liblapack.so.3\\n/usr/lib64/liblapack.so.3.4\\n/usr/lib64/liblapack.so.3.4.2\\n/usr/lib64/liblapacke.so.3\\n/usr/lib64/liblapacke.so.3.4\\n/usr/lib64/liblapacke.so.3.4.2\\n</code></pre>\\n<p>然后安装 liblapack3gf，这里巨坑的是，liblapack3gf 只有 Debian 系统有，连 rpm 都没有，开始是想把 deb\\n文件转成 rpm 文件的，直到后来 Escnqh 输入了一行玄学指令：</p>\\n<pre><code class=\\\"hljs language-bash\\\"><span class=\\\"hljs-built_in\\\">ln</span> -s /usr/lib64/liblapack.so.3 /usr/lib64/liblapack.so.3gf\\n</code></pre>\\n<p>直接用 liblapack.so.3 伪装成 liblapack.so.3gf（- -）...</p>\\n<p>最后 liblapack-dev 我反正没安装，后面好像也能跑出模型- -</p>\\n<p>支持 LAPACK 库也安装完毕。</p>\\n<hr>\\n\";","export default \"<p><div class=\\\"saying mb-4\\\"><div class=\\\"saying-quote saying-left-quote\\\">“</div><div class=\\\"saying-quote saying-right-quote\\\">”</div></p>\\n<p>EXE 什么的，看着就忍不住要双击它！</p>\\n<p></div></p>\\n<h3 id=\\\"introduction\\\">Introduction</h3>\\n<hr>\\n<p>首先介绍一下 Electron 打包应用的方式：</p>\\n<ul>\\n<li>打包成 asar 分发；这种方式弊端很多而且不好操作，<a href=\\\"https://electronjs.org/docs/tutorial/application-packaging\\\">详情见</a>。</li>\\n<li>重构官网提供的二进制 release，这种方式也比较麻烦。</li>\\n<li>通过打包工具：<ul>\\n<li><a href=\\\"https://github.com/electron-userland/electron-forge\\\">electron-forge</a></li>\\n<li><a href=\\\"https://github.com/electron-userland/electron-builder\\\">electron-builder</a></li>\\n<li><a href=\\\"https://github.com/electron-userland/electron-packager\\\">electron-packager</a></li>\\n</ul>\\n</li>\\n<li>重编译源码二进制文件...</li>\\n</ul>\\n<p>用打包工具进行打包比较傻瓜式，两年前的时候，我用过 packager，但是现在不知道为啥不好使了，老卡住，然后我转试 builder。</p>\\n<h2 id=\\\"electron-packager\\\">electron-packager</h2>\\n<p>根据项目 readme 的说明，首先得安装 electron-packager 的模块：</p>\\n<pre><code class=\\\"hljs language-shell\\\">npm insatll electron-packager -g\\n</code></pre>\\n<p>对还是全局安装 不要怂。</p>\\n<p>要打包你的项目，你只需要运行下面格式的命令：</p>\\n<pre><code class=\\\"hljs language-shell\\\">electron-packager &lt;sourcedir&gt; &lt;appname&gt; --platform=&lt;platform&gt; --arch=&lt;arch&gt; [optional flags...]\\n</code></pre>\\n<p>里面的参数含义我们可以通过<a href=\\\"https://github.com/electron-userland/electron-packager/blob/master/usage.txt\\\">txt</a>进行简单的参考，或者在<a href=\\\"https://github.com/electron-userland/electron-packager/blob/master/docs/api.md\\\">md</a>进行深入研究。</p>\\n<p>推荐是看 md 的比较清晰一点</p>\\n<p>在上篇中，我们构造的 helloworld 的目录结构为：</p>\\n<pre><code>your-app/\\n├── package.json\\n├── main.js\\n└── index.html\\n</code></pre>\\n<p>在我们的演示中，我们运行的是这样的命令：</p>\\n<pre><code class=\\\"hljs language-shell\\\">electron-packager . helloworldappname --out outputdir --electronVersion 1.7.9\\n</code></pre>\\n<p>我们在项目目录根目录下运行了这个命令，所以第一个<code>.</code>代表的<code>&lt;sourcedir&gt;</code>是本目录，然后我们指定了<code>&lt;appname&gt;</code>为<code>helloworldappname</code>，然后我们指定了<code>--out</code>表示打包输出的目录，最后指定了我们使用的 electron 的版本号。</p>\\n<p>我没有指定<code>--platform</code>和<code>--arch</code>是因为这俩在默认的情况下是选取本机参数，比如我是 win32x64。</p>\\n<p>但是每次打包都要写这巨长的命令，确实有点麻烦，我们可以使用 npm 的<code>run-script</code>功能去快速的执行写好的命令：</p>\\n<p>npm<code>run-script</code>是默认运行当前目录下<code>package.json</code>文件中 script 定义好的命令，具体的应用自己去学 npm 相关知识，我在项目的<code>package.json</code>文件中写好：</p>\\n<pre><code class=\\\"hljs language-json\\\"><span class=\\\"hljs-punctuation\\\">{</span>\\n  <span class=\\\"hljs-attr\\\">&quot;name&quot;</span><span class=\\\"hljs-punctuation\\\">:</span> <span class=\\\"hljs-string\\\">&quot;helloworld&quot;</span><span class=\\\"hljs-punctuation\\\">,</span>\\n  <span class=\\\"hljs-attr\\\">&quot;version&quot;</span><span class=\\\"hljs-punctuation\\\">:</span> <span class=\\\"hljs-string\\\">&quot;0.1.0&quot;</span><span class=\\\"hljs-punctuation\\\">,</span>\\n  <span class=\\\"hljs-attr\\\">&quot;main&quot;</span><span class=\\\"hljs-punctuation\\\">:</span> <span class=\\\"hljs-string\\\">&quot;main.js&quot;</span><span class=\\\"hljs-punctuation\\\">,</span>\\n  <span class=\\\"hljs-attr\\\">&quot;scripts&quot;</span><span class=\\\"hljs-punctuation\\\">:</span> <span class=\\\"hljs-punctuation\\\">{</span>\\n    <span class=\\\"hljs-attr\\\">&quot;start&quot;</span><span class=\\\"hljs-punctuation\\\">:</span> <span class=\\\"hljs-string\\\">&quot;electron .&quot;</span><span class=\\\"hljs-punctuation\\\">,</span>\\n    <span class=\\\"hljs-attr\\\">&quot;pk&quot;</span><span class=\\\"hljs-punctuation\\\">:</span> <span class=\\\"hljs-string\\\">&quot;electron-packager . helloworldappname --out=outputdir --electronVersion=1.7.9&quot;</span>\\n  <span class=\\\"hljs-punctuation\\\">}</span>\\n<span class=\\\"hljs-punctuation\\\">}</span>\\n</code></pre>\\n<p>然后在根目录下运行命令：</p>\\n<pre><code class=\\\"hljs language-shell\\\">npm run-script pk\\n</code></pre>\\n<p>结果如下：</p>\\n<pre><code class=\\\"hljs language-shell\\\">youyinnn@DESKTOP-7KE7UCG MINGW64 /d/Users/bigyellow/electron/helloworld\\n<span class=\\\"hljs-meta\\\">$ </span><span class=\\\"language-bash\\\">ll</span>\\ntotal 6\\n-rw-r--r-- 1 youyinnn 197609  391 11月 22 22:00 index.html\\n-rw-r--r-- 1 youyinnn 197609 1750 11月 22 22:00 main.js\\n-rw-r--r-- 1 youyinnn 197609  211 11月 23 16:04 package.json\\n\\nyouyinnn@DESKTOP-7KE7UCG MINGW64 /d/Users/bigyellow/electron/helloworld\\n<span class=\\\"hljs-meta\\\">$ </span><span class=\\\"language-bash\\\">npm run-script pk</span>\\n<span class=\\\"hljs-meta\\\">\\n&gt; </span><span class=\\\"language-bash\\\">helloworld@0.1.0 pk D:\\\\Users\\\\bigyellow\\\\electron\\\\helloworld</span>\\n<span class=\\\"hljs-meta\\\">&gt; </span><span class=\\\"language-bash\\\">electron-packager . helloworldappname --out=outputdir --electronVersion=1.7.9</span>\\n\\nPackaging app for platform win32 x64 using electron v1.7.9\\nWrote new app to outputdir\\\\helloworldappname-win32-x64\\n\\nyouyinnn@DESKTOP-7KE7UCG MINGW64 /d/Users/bigyellow/electron/helloworld\\n<span class=\\\"hljs-meta\\\">$ </span><span class=\\\"language-bash\\\">ll</span>\\ntotal 6\\n-rw-r--r-- 1 youyinnn 197609  391 11月 22 22:00 index.html\\n-rw-r--r-- 1 youyinnn 197609 1750 11月 22 22:00 main.js\\ndrwxr-xr-x 1 youyinnn 197609    0 11月 23 16:05 outputdir/\\n-rw-r--r-- 1 youyinnn 197609  211 11月 23 16:04 package.json\\n\\nyouyinnn@DESKTOP-7KE7UCG MINGW64 /d/Users/bigyellow/electron/helloworld\\n<span class=\\\"hljs-meta\\\">$</span>\\n</code></pre>\\n<p>然后项目目录下会生成：\\n<img src=\\\"../../../public/img/ba4fa76eb64909e4d4959799cf130547.png\\\" alt=\\\"electronpk\\\"></p>\\n<p>运行 exe：\\n<img src=\\\"../../../public/img/6420ae86e552fa8e6e1b0f7282f28ca4.png\\\" alt=\\\"runexe\\\"></p>\\n<hr>\\n<p>至此我们的 HelloWorld 的打包就完成了，可以发现虽然我们只是一个简单的 html，但是整个包的大小却有 131M，这是因为它还包含了 chrome 微引擎和其他的环境文件。</p>\\n<p><em>参考：<a href=\\\"https://electronjs.org/docs/tutorial/application-distribution\\\">https://electronjs.org/docs/tutorial/application-distribution</a></em>\\n<em>参考：<a href=\\\"https://github.com/electron-userland/electron-packager/blob/master/docs/api.md\\\">https://github.com/electron-userland/electron-packager/blob/master/docs/api.md</a></em>\\n<em>参考：<a href=\\\"http://blog.csdn.net/a1170201028/article/details/59108126\\\">http://blog.csdn.net/a1170201028/article/details/59108126</a></em></p>\\n<h2 id=\\\"electron-builder\\\">electron-builder</h2>\\n<ol>\\n<li><p>Specify the standard fields in the application <code>package.json</code> — <a href=\\\"https://www.electron.build/configuration/configuration#Metadata-name\\\">name</a>, <code>description</code>, <code>version</code> and <a href=\\\"https://docs.npmjs.com/files/package.json#people-fields-author-contributors\\\">author</a>.</p>\\n</li>\\n<li><p>Specify the <a href=\\\"https://www.electron.build/configuration/configuration#configuration\\\">build</a> configuration in the <code>package.json</code> as follows:</p>\\n<pre><code>&quot;build&quot;: {\\n  &quot;appId&quot;: &quot;your.id&quot;,\\n  &quot;mac&quot;: {\\n    &quot;category&quot;: &quot;your.app.category.type&quot;\\n  }\\n}\\n</code></pre>\\n<p>See <a href=\\\"https://www.electron.build/configuration/configuration#configuration\\\">all options</a>. Option <a href=\\\"https://www.electron.build/configuration/contents#files\\\">files</a> to indicate which files should be packed in the final application, including the entry file, maybe required.</p>\\n</li>\\n<li><p>Add <a href=\\\"https://www.electron.build/icons\\\">icons</a>.</p>\\n</li>\\n<li><p>Add the <a href=\\\"https://docs.npmjs.com/cli/run-script\\\">scripts</a> key to the development <code>package.json</code>:</p>\\n<pre><code>&quot;scripts&quot;: {\\n  &quot;pack&quot;: &quot;electron-builder --dir&quot;,\\n  &quot;dist&quot;: &quot;electron-builder&quot;\\n}\\n</code></pre>\\n<p>Then you can run<code>yarn dist</code>(to package in a distributable format (e.g. dmg, windows installer, deb package)) or<code>yarn pack</code>(only generates the package directory without really packaging it. This is useful for testing purposes).</p>\\n<p>To ensure your native dependencies are always matched electron version, simply add script <code>&quot;postinstall&quot;: &quot;electron-builder install-app-deps&quot;</code> to your <code>package.json</code>.</p>\\n</li>\\n<li><p>If you have native addons of your own that are part of the application (not as a dependency), set <a href=\\\"https://www.electron.build/configuration/configuration#Configuration-nodeGypRebuild\\\">nodeGypRebuild</a> to <code>true</code>.</p>\\n</li>\\n</ol>\\n<p>Please note that everything is packaged into an asar archive <a href=\\\"https://www.electron.build/configuration/configuration#Configuration-asar\\\">by default</a>.</p>\\n<p>For an app that will be shipped to production, you should sign your application. See <a href=\\\"https://www.electron.build/code-signing#where-to-buy-code-signing-certificate\\\">Where to buy code signing certificates</a>.</p>\\n<p>这个 build 的时候也需要下载一些东西，源可能也被墙了，所以只有科学上网了。</p>\\n\";","export default \"<h3 id=\\\"should-have-a-plan\\\">Should have a PLAN!</h3>\\n<p>I was asked a tree problem when I was having a face to face interview at <em>PayPal</em> last Friday, and I might failed on this question.</p>\\n<p>It&#39;s been too long that I&#39;m almost forgot the knowledge of TREE, and I&#39;ve never truly go over it and it&#39;s time to get it done.</p>\\n<p>The question:</p>\\n<pre class=\\\"nhi\\\">\\nA tree like:                          Node structure:\\n              5a &lt;-- root node             Node ┬ int  value\\n            /   \\\\                               ├ Node left\\n           5b    5c                             └ Node right\\n          / \\\\     \\\\\\n         6   5d    7a\\n                  / \\\\\\n                 5e  7b\\nQuestion: \\nA \\\"Group\\\" is defined as a set that it's Nodes have the same value and within \\nthe relationship of Parent-Child. Find the number of group of provided tree.\\ne.g：the tree above will have 4 groups [5a,5b,5c,5d],[6],[7a,7b],[5e]\\n</pre>\\n\\n<h3 id=\\\"introduction\\\">Introduction</h3>\\n<p><strong>Trees:</strong> Unlike Arrays, Linked Lists, Stack and queues, which are linear data structure, trees are hierarchical data structure.</p>\\n<p><strong>Tree Vocabulary:</strong> The topmost node is called root of the tree. The elements that are directly under an element are called its children. The element directly above something is called its parent. For example, ‘a’ is a child of ‘f’, and ‘f’ is the parent of ‘a’. Finally, elements with no children are called leaves.</p>\\n<pre><code>      tree\\n      ----\\n       j    &lt;-- root\\n     /   \\\\\\n    f      k  \\n  /   \\\\      \\\\\\n a     h      z    &lt;-- leaves \\n</code></pre>\\n<p><strong>Why Trees?</strong>\\n<strong>1.</strong> One reason to use trees might be because you want to store information that naturally forms a hierarchy. For example, the <strong>file system</strong> on a computer:</p>\\n<pre><code>file system\\n-----------\\n     /    &lt;-- root\\n  /      \\\\\\n...       home\\n      /          \\\\\\n   ugrad        course\\n    /       /      |     \\\\\\n  ...      cs101  cs112  cs113  \\n</code></pre>\\n<p><strong>2.</strong> Trees (with some ordering e.g., BST) provide moderate access/search (quicker than Linked List and slower than arrays).\\n<strong>3.</strong> Trees provide moderate insertion/deletion (quicker than Arrays and slower than Unordered Linked Lists).\\n<strong>4.</strong> Like Linked Lists and unlike Arrays, Trees don’t have an upper limit on number of nodes as nodes are linked using pointers.</p>\\n<p><strong>Main applications</strong> of trees include:</p>\\n<p>1. Manipulate <strong>hierarchical</strong> data.\\n2. Make information easy to search (see tree traversal).\\n3. Manipulate sorted lists of data.\\n4. As a workflow for compositing digital images for visual effects.\\n5. Router algorithms\\n6. Form of a multi-stage decision-making (see business chess).</p>\\n<p><strong>Key Word:</strong></p>\\n<ol>\\n<li><strong>moderate（中等的、适中的）</strong></li>\\n<li><strong>hierarchical（阶层的）</strong></li>\\n</ol>\\n<h3 id=\\\"binary-tree\\\">Binary Tree</h3>\\n<p><strong>Binary Tree:</strong> A tree whose elements have at most 2 children is called a binary tree. Since each element in a binary tree can have only 2 children, we typically name them the left and right child.</p>\\n<pre>\\nNode ┬ int  value\\n     ├ Node left\\n     └ Node right\\n</pre>\\n\\n<h4 id=\\\"properties\\\">Properties</h4>\\n<ol>\\n<li><p>The maximum number of nodes at level ‘l’ of a binary tree is <strong>2^(l-1)</strong></p>\\n</li>\\n<li><p>Maximum number of nodes in a binary tree of height ‘h’ is <strong>2^h – 1</strong></p>\\n</li>\\n<li><p>In a Binary Tree with N nodes, minimum possible height or minimum number of levels is  <strong>⌈ Log2(N+1)⌉</strong></p>\\n<p>This can be directly derived from point 2 above. If we consider the convention where height of a leaf node is considered as 0, then above formula for minimum possible height becomes   <strong>⌈ Log2(N+1) ⌉ – 1</strong></p>\\n</li>\\n<li><p>A Binary Tree with L leaves has at least   ⌈ Log2L ⌉ + 1   levels\\n A Binary tree has maximum number of leaves (and minimum number of levels) when all levels are fully filled. Let all leaves be at level l, then below is true for number of leaves L.</p>\\n<pre><code>   L   &lt;=  2l-1  [From Point 1]\\n   l =   ⌈ Log2L ⌉ + 1 \\n   where l is the minimum number of levels. \\n</code></pre>\\n</li>\\n<li><p>In Binary tree where every node has 0 or 2 children, number of leaf nodes is always one more than nodes with two children</p>\\n<pre><code>   L = T + 1\\nWhere L = Number of leaf nodes\\n      T = Number of internal nodes with two children\\n</code></pre>\\n</li>\\n</ol>\\n<p><em>PS：前两个理解一下就好了，后面3个用的少，用的时候还得查- -</em></p>\\n<h4 id=\\\"types-of-binary-tree\\\">Types of Binary Tree</h4>\\n<ul>\\n<li><strong>Full Binary Tree</strong> A Binary Tree is full if <strong>every node has 0 or 2 children</strong>. Following are examples of a full binary tree. We can also say a full binary tree is a binary tree in which all nodes except leaves have two children.</li>\\n<li><strong>Complete Binary Tree:</strong> A Binary Tree is complete Binary Tree if all levels are completely filled except possibly the last level and the last level has all keys as left as possible.</li>\\n<li><strong>Perfect Binary Tree</strong> A Binary tree is Perfect Binary Tree in which all internal nodes have two children and <strong>all leaves are at the same level</strong>.</li>\\n<li><strong>Balanced Binary Tree</strong>\\nA binary tree is balanced if the height of the tree is O(Log n) where n is the number of nodes. <ul>\\n<li><strong>AVL tree</strong> maintains O(log n) height by making sure that the difference between heights of left and right subtrees is 1.</li>\\n<li><strong>Red-Black trees</strong> maintain O(log n) height by making sure that the number of Black nodes on every root to leaf paths are same and there are no <strong>adjacent(邻近的)</strong> red nodes.</li>\\n<li><strong>Balanced Binary Search trees</strong> are performance wise good as they provide O(log n) time for search, insert and delete.</li>\\n</ul>\\n</li>\\n<li><strong>A degenerate (or pathological) tree</strong> A Tree where every internal node has one child. Such trees are performance-wise same as linked list.</li>\\n</ul>\\n\";","export default \"<h3 id=\\\"topic--partition\\\">Topic & Partition</h3>\\n<p>kafka 中的 Message 以 topic 为分类去组织的，每个 topic 又可以分为不同的 partition 去存储：</p>\\n<p><img src=\\\"http://kafka.apache.org/20/images/log_anatomy.png\\\" alt=\\\"img\\\"></p>\\n<p>我们引用官方的 Introduction 中的一节，看官方是怎么解释的：</p>\\n<p>Each partition is an ordered, immutable sequence of records that is continually appended to—a structured commit log. The records in the partitions are each assigned a sequential id number called the <em>offset</em> that uniquely identifies each record within the partition.</p>\\n<p>每个分区都是一个<strong>有序的，不可变的记录序列</strong>，不断附加到结构化的提交日志中。分区中的记录每个都分配了一个称为偏移的顺序 ID 号，它唯一地标识分区中的每个记录。</p>\\n<p>The Kafka cluster durably persists all published records—whether or not they have been consumed—using a configurable retention period. For example, if the retention policy is set to two days, then for the two days after a record is published, it is available for consumption, after which it will be discarded to free up space. Kafka&#39;s performance is effectively constant with respect to data size so storing data for a long time is not a problem.</p>\\n<p>Kafka 集群使用<strong>可配置的保留期（configurable retention period）</strong>，来持久保存所有已发布的记录，无论是否已<strong>消费（consume）</strong>。</p>\\n<p>例如，如果保留策略设置为两天，则在发布记录后的两天内，它都是可供消费（consume）的，之后将被<strong>丢弃（discarded）</strong>以释放空间。Kafka 的性能在数据大小方面实际上是恒定的，因此长时间存储数据不是问题。</p>\\n<p>In fact, the only metadata retained on a per-consumer basis is the offset or position of that consumer in the log. This offset is controlled by the consumer: normally a consumer will advance its offset linearly as it reads records, but, in fact, since the position is controlled by the consumer it can consume records in any order it likes. For example a consumer can reset to an older offset to reprocess data from the past or skip ahead to the most recent record and start consuming from &quot;now&quot;.</p>\\n<p>实际上，基于每个消费者保留的唯一元数据是该消费者在日志中的<strong>偏移或位置（offset/position）</strong>。</p>\\n<p>这种偏移由消费者控制：通常消费者在读取记录时会线性地提高其偏移量，但事实上，由于该位置由消费者控制，因此它可以按照自己喜欢的任何顺序消费记录。</p>\\n<p>例如，消费者可以重置为较旧的偏移量来重新处理过去的数据，或者跳到最近的记录并从“现在”开始消费。</p>\\n<p>This combination of features means that Kafka consumers are very cheap—they can come and go without much impact on the cluster or on other consumers. For example, you can use our command line tools to &quot;tail&quot; the contents of any topic without changing what is consumed by any existing consumers.</p>\\n<p>这些功能组合意味着 Kafka 消费者是<strong>“成本较低的”</strong>：他们可以来来往往对集群或其他消费者没有太大影响。</p>\\n<p>例如，您可以使用我们的命令行工具“tail”任何主题的内容，而无需更改任何现有使用者所消耗的内容。</p>\\n<p>The partitions in the log serve several purposes. First, they allow the log to scale beyond a size that will fit on a single server. Each individual partition must fit on the servers that host it, but a topic may have many partitions so it can handle an arbitrary amount of data. Second they act as the unit of parallelism—more on that in a bit.</p>\\n<p>日志中的分区有多种用途：</p>\\n<p>首先，它们允许日志扩展到超出适合单个服务器的大小。每个单独的分区必须适合托管它的服务器，但主题可能有许多分区，因此它可以处理任意数量的数据。</p>\\n<p>其次，它们充当了并行性的单位，更多是因为这个原因！</p>\\n<h3 id=\\\"partition\\\">Partition</h3>\\n<p>上面从大方向上介绍了 Message 的存储是如何 work 的，我们再来关注一下存储的细节</p>\\n<p>Partition 中的每条 Message 由 offset 来表示它在这个 partition 中的偏移量，这个 offset 不是该 Message 在 partition 数据文件中的实际存储位置，而是逻辑上一个值，它唯一确定了 partition 中的一条 Message。因此，可以认为 offset 是 partition 中 Message 的 id。partition 中的每条 Message 包含了以下三个属性：</p>\\n<ul>\\n<li><p>offset</p>\\n</li>\\n<li><p>MessageSize</p>\\n</li>\\n<li><p>data</p>\\n</li>\\n</ul>\\n<p>其中 offset 为 long 型，MessageSize 为 int32，表示 data 有多大，data 为 message 的具体内容。它的格式和 Kafka 通讯协议中介绍的 MessageSet 格式是一致。</p>\\n<p>Partition 的数据文件则包含了若干条上述格式的 Message，按 offset 由小到大排列在一起。它的实现类为 FileMessageSet，类图如下：</p>\\n<p><img src=\\\"../../../public/img/20181107151441.png\\\" alt=\\\"FileMessageSet\\\"></p>\\n<p>它的主要方法如下：</p>\\n<ul>\\n<li>append: 把给定的 ByteBufferMessageSet 中的 Message 写入到这个数据文件中。</li>\\n<li>searchFor: 从指定的 startingPosition 开始搜索找到第一个 Message 其 offset 是大于或者等于指定的 offset，并返回其在文件中的位置 Position。它的实现方式是从 startingPosition 开始读取 12 个字节，分别是当前 MessageSet 的 offset 和 size。如果当前 offset 小于指定的 offset，那么将 position 向后移动 LogOverHead+MessageSize（其中 LogOverHead 为 offset+messagesize，为 12 个字节）。</li>\\n<li>read：准确名字应该是 slice，它截取其中一部分返回一个新的 FileMessageSet。它不保证截取的位置数据的完整性。</li>\\n<li>sizeInBytes: 表示这个 FileMessageSet 占有了多少字节的空间。</li>\\n<li>truncateTo: 把这个文件截断，这个方法不保证截断位置的 Message 的完整性。</li>\\n<li>readInto: 从指定的相对位置开始把文件的内容读取到对应的 ByteBuffer 中。</li>\\n</ul>\\n<p>我们来思考一下，如果一个 partition 只有一个数据文件会怎么样？</p>\\n<blockquote>\\n<ul>\\n<li><p>新数据是添加在文件末尾（调用 FileMessageSet 的 append 方法），不论文件数据文件有多大，这个操作永远都是 O(1)的。</p>\\n</li>\\n<li><p>查找某个 offset 的 Message（调用 FileMessageSet 的 searchFor 方法）是顺序查找的。因此，如果数据文件很大的话，查找的效率就低。</p>\\n</li>\\n</ul>\\n</blockquote>\\n<p>那 Kafka 是如何解决查找效率的的问题呢？有两大法宝：1) 分段 2) 索引。</p>\\n<h4 id=\\\"数据文件的分段\\\">数据文件的分段</h4>\\n<p>Kafka 解决查询效率的手段之一是将数据文件分段，比如有 100 条 Message，它们的 offset 是从 0 到 99。</p>\\n<p>假设将数据文件分成 5 段，第一段为 0-19，第二段为 20-39，以此类推，每段放在一个单独的数据文件里面，数据文件以该段中最小的 offset 命名。这样在查找指定 offset 的 Message 的时候，用二分查找就可以定位到该 Message 在哪个段中。</p>\\n<h4 id=\\\"为数据文件建索引\\\">为数据文件建索引</h4>\\n<p>数据文件分段使得可以在一个较小的数据文件中查找对应 offset 的 Message 了，但是这依然需要顺序扫描才能找到对应 offset 的 Message。</p>\\n<p>为了进一步提高查找的效率，Kafka 为每个分段后的数据文件建立了索引文件，文件名与数据文件的名字是一样的，只是文件扩展名为.index。</p>\\n<p>索引文件中包含若干个索引条目，每个条目表示数据文件中一条 Message 的索引。索引包含两个部分（均为 4 个字节的数字），分别为相对 offset 和 position。</p>\\n<p>相对 offset：因为数据文件分段以后，每个数据文件的起始 offset 不为 0，相对 offset 表示这条 Message 相对于其所属数据文件中最小的 offset 的大小。</p>\\n<p>举例，分段后的一个数据文件的 offset 是从 20 开始，那么 offset 为 25 的 Message 在 index 文件中的相对 offset 就是 25-20 = 5。存储相对 offset 可以减小索引文件占用的空间。</p>\\n<p>position，表示该条 Message 在数据文件中的绝对位置。只要打开文件并移动文件指针到这个 position 就可以读取对应的 Message 了。</p>\\n<p>index 文件中并没有为数据文件中的每条 Message 建立索引，而是采用了稀疏存储的方式，每隔一定字节的数据建立一条索引。这样避免了索引文件占用过多的空间，从而可以将索引文件保留在内存中。但缺点是没有建立索引的 Message 也不能一次定位到其在数据文件的位置，从而需要做一次顺序扫描，但是这次顺序扫描的范围就很小了。</p>\\n<p>在 Kafka 中，索引文件的实现类为 OffsetIndex，它的类图如下：</p>\\n<p><img src=\\\"../../../public/img/20181107151802.png\\\" alt=\\\"offsetindex\\\"></p>\\n<p>主要的方法有：</p>\\n<ul>\\n<li>append 方法，添加一对 offset 和 position 到 index 文件中，这里的 offset 将会被转成相对的 offset。</li>\\n<li>lookup, 用二分查找的方式去查找小于或等于给定 offset 的最大的那个 offset</li>\\n</ul>\\n<h3 id=\\\"小结\\\">小结</h3>\\n<p>我们以几张图来总结一下 Message 是如何在 Kafka 中存储的，以及如何查找指定 offset 的 Message 的。</p>\\n<p>Message 是按照 topic 来组织，每个 topic 可以分成多个的 partition，比如：有 5 个 partition 的名为为 page_visits 的 topic 的目录结构为：</p>\\n<p><img src=\\\"../../../public/img/20181107151829.png\\\" alt=\\\"topic_partition\\\"></p>\\n<p>partition 是分段的，每个段叫 LogSegment，包括了一个数据文件和一个索引文件，下图是某个 partition 目录下的文件：</p>\\n<p><img src=\\\"../../../public/img/20181107151557.png\\\" alt=\\\"LogSegment\\\"></p>\\n<p>可以看到，这个 partition 有 4 个 LogSegment。</p>\\n<p>借用博主<a href=\\\"http://blog.csdn.net/lizhitao/\\\">@lizhitao</a>博客上的一张图来展示是如何查找 Message 的。</p>\\n<p><img src=\\\"../../../public/img/20181107151736.png\\\" alt=\\\"search\\\"></p>\\n<p>比如要查找绝对 offset 为 7 的 Message：</p>\\n<p>首先是用二分查找确定它是在哪个 LogSegment 中，自然是在第一个 Segment 中。\\n打开这个 Segment 的 index 文件，也是用二分查找找到 offset 小于或者等于指定 offset 的索引条目中最大的那个 offset。自然 offset 为 6 的那个索引是我们要找的，通过索引文件我们知道 offset 为 6 的 Message 在数据文件中的位置为 9807。\\n打开数据文件，从位置为 9807 的那个地方开始顺序扫描直到找到 offset 为 7 的那条 Message。</p>\\n<p><strong>这套机制是建立在 offset 是有序的</strong>。索引文件被映射到内存中，所以查找的速度还是很快的。</p>\\n<p>一句话，<strong>Kafka 的 Message 存储采用了分区(partition)，分段(LogSegment)和稀疏索引这几个手段来达到了高效性。</strong></p>\\n<blockquote>\\n<p>参考自：</p>\\n<p><a href=\\\"http://kafka.apache.org/intro\\\">http://kafka.apache.org/intro</a></p>\\n<p><a href=\\\"https://blog.csdn.net/jewes/article/details/42970799\\\">https://blog.csdn.net/jewes/article/details/42970799</a></p>\\n</blockquote>\\n\";","export default \"<h3 id=\\\"introduction\\\">Introduction</h3>\\n<p>In the last post, we discussed the relationship between Application and Service. </p>\\n<p>So they say: <strong>Services are really just &quot;Containers in Production&quot;.</strong></p>\\n<p>And when we deploy a service, we use <code>docker swarm init</code> to prepare for it.</p>\\n<p>Now let&#39;s learn what is swarm and how to setup a cluster with <strong>docker-machine</strong>.</p>\\n<h3 id=\\\"swarm\\\">Swarm</h3>\\n<p><strong>A swarm is a group of machines that are running Docker and joined into a cluster.</strong></p>\\n<p>After that has happened, you continue to run the Docker commands you’re used to, but now they are executed on a cluster by a <strong>swarm manager</strong>. The machines in a swarm can be <strong>physical or virtual</strong>. After joining a swarm, they are referred to as <strong>nodes</strong>.</p>\\n<p>Swarm managers can use several <strong>strategies</strong> to run containers, such as :</p>\\n<ul>\\n<li><p>“emptiest node” </p>\\n<p>  which fills the least utilized machines with containers.</p>\\n</li>\\n<li><p>“global”</p>\\n<p>  which ensures that each machine gets exactly one instance of the specified container.</p>\\n</li>\\n</ul>\\n<p>You instruct the swarm manager to use these strategies <strong>in the Compose file</strong>, just like the one you have already been using.</p>\\n<h4 id=\\\"swarm-manager\\\">Swarm manager</h4>\\n<p>Swarm managers are the only machines in a swarm that can execute your commands, or authorize other machines to join the swarm as <strong>workers</strong>. Workers are just there to provide capacity and do not have the authority to tell any other machine what it can and cannot do.</p>\\n<pre><code>Relationship in swarm:\\n\\n    1.each virtual/physical machine as a &quot;node&quot; ni a swarm.\\n                            (node)            (node)            (node)\\n                               -------            -------            -------\\n      2.&quot;swarm init&quot; ---&gt;      |  A  |            |  B  |            |  C  |\\n       then A became          -------            -------            -------\\n       manager             &quot;swarm manager&quot;     &quot;worker&quot;        &quot;worker&quot;\\n\\n    3.other nodes can &quot;join&quot; the swarm and became &quot;worker&quot; to work for the &quot;manager&quot;,\\n    &quot;manager&quot; certainly can manage it&#x27;s &quot;workers&quot;\\n</code></pre>\\n<h3 id=\\\"setup-your-swarm-with-virtual-machines\\\">Setup your swarm with virtual machines</h3>\\n<blockquote>\\n<p><strong>⚠️Notice:</strong></p>\\n<p>If your machine is a cloud server such as &quot;Tencent Cloud Server&quot;, you might couldn&#39;t able to create a vm on it.Because your machine is also a vm too ! There are some hardware options should support from a phycial machine.</p>\\n<p>But you can still follow the post and practice with it, on this section, you should focus on the concept of swarm and knowning how to create vms with <code>docker-machine</code>.</p>\\n</blockquote>\\n<p>So, how can we setup a swarm with multiple machine for just practice ? Several real machine ? No, you could create some virtual machine by <code>docker-machine</code>. Then use the as a node of swarm.</p>\\n<h4 id=\\\"install-virtualbox\\\">Install VirtualBox</h4>\\n<p>You need a hypervisor that can create virtual machines (VMs), so <a href=\\\"https://www.virtualbox.org/wiki/Downloads\\\">install Oracle VirtualBox</a> for your machine’s OS.</p>\\n<p>Some RPM base:</p>\\n<ul>\\n<li><a href=\\\"http://rpmfind.net/linux/RPM/index.html\\\">rpmfind</a></li>\\n<li><a href=\\\"https://pkgs.org/\\\">pkgs</a></li>\\n<li><a href=\\\"http://rpm.pbone.net/\\\">pbone</a></li>\\n</ul>\\n<h4 id=\\\"install-docker-machine\\\">Install docker-machine</h4>\\n<blockquote>\\n<p><strong>Notice:</strong></p>\\n<p><strong>Never ever intall docker on WIN10 system !!! Because the <code>Hyper-V</code> that docker need will just weaken your machine&#39;s performance at some ways !!! Such as I found my LOL&#39;s fps rate was suddenly fall down to 58-61, and it usually was 100+ !!! And when I uninstall the docker on WIN10 then turn off the <code>Hyper-V</code> on windows functional options, the fps problem was solved !!!</strong> </p>\\n</blockquote>\\n<ol>\\n<li><p>download</p>\\n<pre><code class=\\\"hljs language-bash\\\">$ base=https://github.com/docker/machine/releases/download/v0.16.0 && wget <span class=\\\"hljs-variable\\\">$base</span>/docker-machine-$(<span class=\\\"hljs-built_in\\\">uname</span> -s)-$(<span class=\\\"hljs-built_in\\\">uname</span> -m) &gt;/tmp/docker-machine\\n</code></pre>\\n</li>\\n<li><p>install</p>\\n<pre><code class=\\\"hljs language-bash\\\">$ install /tmp/docker-machine /usr/local/bin/docker-machine\\n</code></pre>\\n</li>\\n<li><p>verify</p>\\n<pre><code class=\\\"hljs language-bash\\\">$ docker-machine\\nUsage: docker-machine [OPTIONS] COMMAND [arg...]\\nCreate and manage machines running Docker.\\nVersion: 0.16.0, build 702c267f\\n...\\n</code></pre>\\n</li>\\n</ol>\\n<p>Reference: <a href=\\\"https://docs.docker.com/machine/install-machine/#install-machine-directly\\\">https://docs.docker.com/machine/install-machine/#install-machine-directly</a></p>\\n<h4 id=\\\"create-virtual-machines\\\">Create virtual machines</h4>\\n<p>Now, create a couple of VMs using <code>docker-machine</code>, using the VirtualBox driver:</p>\\n<pre><code class=\\\"hljs language-bash\\\">$ docker-machine create --driver virtualbox myvm1\\n$ docker-machine create --driver virtualbox myvm2\\n</code></pre>\\n<p>You now have two VMs created, named <code>myvm1</code> and <code>myvm2</code>.</p>\\n<p>Use this command to list the machines and get their IP addresses.</p>\\n<pre><code class=\\\"hljs language-bash\\\">$ docker-machine <span class=\\\"hljs-built_in\\\">ls</span>\\n</code></pre>\\n<p>Here is example output from this command.</p>\\n<pre><code class=\\\"hljs language-bash\\\">$ docker-machine <span class=\\\"hljs-built_in\\\">ls</span>\\nNAME    ACTIVE   DRIVER       STATE     URL                         SWARM   DOCKER        ERRORS\\nmyvm1   -        virtualbox   Running   tcp://192.168.99.100:2376           v17.06.2-ce\\nmyvm2   -        virtualbox   Running   tcp://192.168.99.101:2376           v17.06.2-ce\\n</code></pre>\\n<h4 id=\\\"initalize-the-swarm-and-add-nodes\\\">Initalize the swarm and add nodes</h4>\\n<p>The first machine acts as the manager, which executes management commands and authenticates workers to join the swarm, and the second is a worker.</p>\\n<p>You can send commands to your VMs using <code>docker-machine ssh</code>. Instruct <code>myvm1</code> to become a swarm manager with <code>docker swarm init</code> and look for output like this:</p>\\n<pre><code class=\\\"hljs language-bash\\\">$ docker-machine ssh myvm1 <span class=\\\"hljs-string\\\">&quot;docker swarm init --advertise-addr &lt;myvm1 ip&gt;&quot;</span>\\nSwarm initialized: current node &lt;node ID&gt; is now a manager.\\n\\nTo add a worker to this swarm, run the following <span class=\\\"hljs-built_in\\\">command</span>:\\n\\n  docker swarm <span class=\\\"hljs-built_in\\\">join</span> \\\\\\n  --token &lt;token&gt; \\\\\\n  &lt;myvm ip&gt;:&lt;port&gt;\\n\\nTo add a manager to this swarm, run <span class=\\\"hljs-string\\\">&#x27;docker swarm join-token manager&#x27;</span> and follow the instructions.\\n</code></pre>\\n<blockquote>\\n<h5 id=\\\"ports-2377-and-2376\\\">Ports 2377 and 2376</h5>\\n<p>Always run <code>docker swarm init</code> and <code>docker swarm join</code> with port 2377 (the swarm management port), or no port at all and let it take the default.</p>\\n<p>The machine IP addresses returned by <code>docker-machine ls</code> include port 2376, which is the Docker daemon port. Do not use this port or <a href=\\\"https://forums.docker.com/t/docker-swarm-join-with-virtualbox-connection-error-13-bad-certificate/31392/2\\\">you may experience errors</a>.</p>\\n</blockquote>\\n<blockquote>\\n<h5 id=\\\"having-trouble-using-ssh-try-the---native-ssh-flag\\\">Having trouble using SSH? Try the --native-ssh flag</h5>\\n<p>Docker Machine has <a href=\\\"https://docs.docker.com/machine/reference/ssh/#different-types-of-ssh\\\">the option to let you use your own system’s SSH</a>, if for some reason you’re having trouble sending commands to your Swarm manager. Just specify the <code>--native-ssh</code> flag when invoking the <code>ssh</code> command:</p>\\n<pre><code>docker-machine --native-ssh ssh myvm1 ...\\n</code></pre>\\n</blockquote>\\n<p>As you can see, the response to <code>docker swarm init</code> contains a pre-configured <code>docker swarm join</code> command for you to run on any nodes you want to add. Copy this command, and send it to <code>myvm2</code> via <code>docker-machine ssh</code> to have <code>myvm2</code> join your new swarm as a worker:</p>\\n<pre><code>$ docker-machine ssh myvm2 &quot;docker swarm join \\\\\\n--token &lt;token&gt; \\\\\\n&lt;ip&gt;:2377&quot;\\n\\nThis node joined a swarm as a worker.\\n</code></pre>\\n<p>Congratulations, you have created your first swarm!</p>\\n<p>Run <code>docker node ls</code> on the manager to view the nodes in this swarm:</p>\\n<pre><code>$ docker-machine ssh myvm1 &quot;docker node ls&quot;\\nID                            HOSTNAME            STATUS              AVAILABILITY        MANAGER STATUS\\nbrtu9urxwfd5j0zrmkubhpkbd     myvm2               Ready               Active\\nrihwohkh3ph38fhillhhb84sk *   myvm1               Ready               Active              Leader\\n</code></pre>\\n<blockquote>\\n<h5 id=\\\"leaving-a-swarm\\\">Leaving a swarm</h5>\\n<p>If you want to start over, you can run <code>docker swarm leave</code> from each node.</p>\\n</blockquote>\\n<h3 id=\\\"deploy-your-app-on-the-swarm-cluster\\\">Deploy your app on the swarm cluster</h3>\\n<p><strong>The hard part is over.</strong> Now you just repeat the process you used in <a href=\\\"https://docs.docker.com/get-started/part3/\\\">part 3</a> to deploy on your new swarm. </p>\\n<p><strong>Just remember that only swarm managers like <code>myvm1</code> execute Docker commands; workers are just for capacity.</strong></p>\\n<h4 id=\\\"two-ways-to-talk-to-your-vms\\\">Two ways to talk to your vms</h4>\\n<p>So far, you’ve been wrapping Docker commands in <code>docker-machine ssh</code> to talk to the VMs. </p>\\n<p>Another option is to run <code>docker-machine env &lt;machine&gt;</code> to get and run a command that configures your current shell to talk to the Docker daemon on the VM. This method works better for the next step because it allows you to use your local <code>docker-compose.yml</code> file to deploy the app “remotely” without having to copy it anywhere.</p>\\n<p>Type <code>docker-machine env myvm1</code>, then copy-paste and run the command provided as the last line of the output to configure your shell to talk to <code>myvm1</code>, the swarm manager.</p>\\n<p>The commands to configure your shell differ depending on whether you are Mac, Linux, or Windows, so examples of each are shown on the tabs below.</p>\\n<p>To more details, refer to: <a href=\\\"https://docs.docker.com/get-started/part4/#configure-a-docker-machine-shell-to-the-swarm-manager\\\">https://docs.docker.com/get-started/part4/#configure-a-docker-machine-shell-to-the-swarm-manager</a></p>\\n<h4 id=\\\"deploy\\\">Deploy</h4>\\n<pre><code class=\\\"hljs language-bash\\\"><span class=\\\"hljs-comment\\\"># send compose file to manager node with scp</span>\\n$ docker-machine scp docker-compose.yml myvm1:~                                             \\n\\n<span class=\\\"hljs-comment\\\"># deploy it</span>\\n$ docker-machine ssh myvm1 <span class=\\\"hljs-string\\\">&quot;docker stack deploy -c docker-compose.yml getstartedlab&quot;</span>  \\nCreating network getstartedlab_webnet\\nCreating service getstartedlab_web\\n\\n<span class=\\\"hljs-comment\\\"># get it&#x27;s info</span>\\n$ docker-machine ssh myvm1 <span class=\\\"hljs-string\\\">&quot;docker stack ps getstartedlab&quot;</span>\\nID                  NAME                  IMAGE                              NODE                DESIRED STATE       CURRENT STATE            ERROR               PORTS              \\nkjeymj6rp0y8        getstartedlab_web.1   johndmulhausen/get-started:part1   myvm2               Running             Running 24 seconds ago                                          \\ndehkjrmu0fxn        getstartedlab_web.2   johndmulhausen/get-started:part1   myvm1               Running             Running 18 seconds ago                                          \\nacnejfyy1cmg        getstartedlab_web.3   johndmulhausen/get-started:part1   myvm2               Running             Running 24 seconds ago                                          \\n36lpsek707gj        getstartedlab_web.4   johndmulhausen/get-started:part1   myvm1               Running             Running 18 seconds ago                                          \\nq5yb5uj97ef1        getstartedlab_web.5   johndmulhausen/get-started:part1   myvm2               Running             Running 24 seconds ago                                          \\n</code></pre>\\n<h3 id=\\\"accessing-your-cluster\\\">Accessing your cluster</h3>\\n<p>You can access your app from the IP address of <strong>either</strong> <code>myvm1</code> or <code>myvm2</code>.</p>\\n<p>The network you created is shared between them and load-balancing. Run <code>docker-machine ls</code> to get your VMs’ IP addresses and visit either of them on a browser, hitting refresh (or just <code>curl</code> them).</p>\\n<p>There are five possible container IDs all cycling by randomly, demonstrating the load-balancing.</p>\\n<p><strong>The reason both IP addresses work is that nodes in a swarm participate in an ingress routing mesh</strong>. </p>\\n<p>This ensures that a service deployed at a certain port within your swarm always has that port reserved to itself, no matter what node is actually running the container. Here’s a diagram of how a routing mesh for a service called <code>my-web</code> published at port <code>8080</code> on a three-node swarm would look:</p>\\n<p><img src=\\\"https://docs.docker.com/engine/swarm/images/ingress-routing-mesh.png\\\" alt=\\\"ingress-routing-mesh\\\"></p>\\n<h3 id=\\\"enough-for-now\\\">Enough for now</h3>\\n<p>So far you can do a lot of things with docker-machine and knowing how to setup a docker swarm with what you&#39;ve learn.</p>\\n<p>There are also some options you might have check out such as cleanup/reboot/reset.</p>\\n<p>Please refer to: <a href=\\\"https://docs.docker.com/get-started/part4/#cleanup-and-reboot\\\">https://docs.docker.com/get-started/part4/#cleanup-and-reboot</a></p>\\n\";","export default \"<p><div class=\\\"saying mb-4\\\"><div class=\\\"saying-quote saying-left-quote\\\">“</div><div class=\\\"saying-quote saying-right-quote\\\">”</div></p>\\n<p>翻译自官方文档</p>\\n<p></div></p>\\n<h2 id=\\\"writing-middleware\\\">Writing Middleware</h2>\\n<p>中间件能够在请求响应周期中访问 <a href=\\\"http://www.expressjs.com.cn/en/4x/api.html#req\\\">request object</a> (<code>req</code>)，和 <a href=\\\"http://www.expressjs.com.cn/en/4x/api.html#res\\\">response object</a> (<code>res</code>)，以及 <code>next</code>方法。<code>next</code>方法用于在路由过程中执行当前中间件紧接着的下一个中间件。</p>\\n<p>中间件能够完成以下事情：</p>\\n<ul>\\n<li>Execute any code.</li>\\n<li>Make changes to the request and the response objects.</li>\\n<li>End the request-response cycle.</li>\\n<li>Call the next middleware in the stack.</li>\\n</ul>\\n<p>如果当前中间件不结束该次请求响应周期，它必须调用 next 方法，将控制传递到下一个中间件，否则请求会被挂起。</p>\\n<p>下图展示了中间件功能的基本元素：</p>\\n<p><img src=\\\"../../../public/img/20191003170602.png\\\" alt=\\\"\\\"></p>\\n<h3 id=\\\"example-middleware-function-mylogger\\\">Example: Middleware function myLogger</h3>\\n<p>这里是一个简单的“myLogger”中间件，作用仅仅只是在有请求进来的时候打印。</p>\\n<pre><code class=\\\"hljs language-javascript\\\"><span class=\\\"hljs-keyword\\\">var</span> myLogger = <span class=\\\"hljs-keyword\\\">function</span> (<span class=\\\"hljs-params\\\">req, res, next</span>) {\\n  <span class=\\\"hljs-variable language_\\\">console</span>.<span class=\\\"hljs-title function_\\\">log</span>(<span class=\\\"hljs-string\\\">&quot;LOGGED&quot;</span>);\\n  <span class=\\\"hljs-title function_\\\">next</span>();\\n};\\n</code></pre>\\n<p>方法的最后一行调用了<code>next()</code>函数，这个函数不是 Node.js 或者 Express API 里的函数，而是从第三个方法参数传进来的下一个中间件的名称，将这个参数当作方法调用就是在调用下一个中间件；。</p>\\n<p>为了加载中间件，调用<code>app.use()</code>。比如下面的代码将<code>myLogger</code>中间件加载到根路径上。</p>\\n<pre><code class=\\\"hljs language-javascript\\\"><span class=\\\"hljs-keyword\\\">var</span> express = <span class=\\\"hljs-built_in\\\">require</span>(<span class=\\\"hljs-string\\\">&quot;express&quot;</span>);\\n<span class=\\\"hljs-keyword\\\">var</span> app = <span class=\\\"hljs-title function_\\\">express</span>();\\n\\n<span class=\\\"hljs-keyword\\\">var</span> myLogger = <span class=\\\"hljs-keyword\\\">function</span> (<span class=\\\"hljs-params\\\">req, res, next</span>) {\\n  <span class=\\\"hljs-variable language_\\\">console</span>.<span class=\\\"hljs-title function_\\\">log</span>(<span class=\\\"hljs-string\\\">&quot;LOGGED&quot;</span>);\\n  <span class=\\\"hljs-title function_\\\">next</span>();\\n};\\n\\napp.<span class=\\\"hljs-title function_\\\">use</span>(myLogger);\\n\\napp.<span class=\\\"hljs-title function_\\\">get</span>(<span class=\\\"hljs-string\\\">&quot;/&quot;</span>, <span class=\\\"hljs-keyword\\\">function</span> (<span class=\\\"hljs-params\\\">req, res</span>) {\\n  res.<span class=\\\"hljs-title function_\\\">send</span>(<span class=\\\"hljs-string\\\">&quot;Hello World!&quot;</span>);\\n});\\n\\napp.<span class=\\\"hljs-title function_\\\">listen</span>(<span class=\\\"hljs-number\\\">3000</span>);\\n</code></pre>\\n<p>中间件加载的顺序很重要：先加载的中间件其方法先被执行。</p>\\n<p>如果<code>myLogger</code>是在“路由到根路径”之后加载的话，那么任何请求都不会访问到它，因为根路径路由周期已经结束了。</p>\\n<h3 id=\\\"example-middleware-function-requesttime\\\">Example: Middleware function requestTime</h3>\\n<p>我们创建一个记录请求时间的中间件：</p>\\n<pre><code class=\\\"hljs language-javascript\\\"><span class=\\\"hljs-keyword\\\">var</span> requestTime = <span class=\\\"hljs-keyword\\\">function</span> (<span class=\\\"hljs-params\\\">req, res, next</span>) {\\n  req.<span class=\\\"hljs-property\\\">requestTime</span> = <span class=\\\"hljs-title class_\\\">Date</span>.<span class=\\\"hljs-title function_\\\">now</span>();\\n  <span class=\\\"hljs-title function_\\\">next</span>();\\n};\\n</code></pre>\\n<p>回调方法也可以使用路由方法上的参数，去添加属性到<code>req</code>上：</p>\\n<pre><code class=\\\"hljs language-javascript\\\"><span class=\\\"hljs-keyword\\\">var</span> express = <span class=\\\"hljs-built_in\\\">require</span>(<span class=\\\"hljs-string\\\">&quot;express&quot;</span>);\\n<span class=\\\"hljs-keyword\\\">var</span> app = <span class=\\\"hljs-title function_\\\">express</span>();\\n\\n<span class=\\\"hljs-keyword\\\">var</span> requestTime = <span class=\\\"hljs-keyword\\\">function</span> (<span class=\\\"hljs-params\\\">req, res, next</span>) {\\n  req.<span class=\\\"hljs-property\\\">requestTime</span> = <span class=\\\"hljs-title class_\\\">Date</span>.<span class=\\\"hljs-title function_\\\">now</span>();\\n  <span class=\\\"hljs-title function_\\\">next</span>();\\n};\\n\\napp.<span class=\\\"hljs-title function_\\\">use</span>(requestTime);\\n\\napp.<span class=\\\"hljs-title function_\\\">get</span>(<span class=\\\"hljs-string\\\">&quot;/&quot;</span>, <span class=\\\"hljs-keyword\\\">function</span> (<span class=\\\"hljs-params\\\">req, res</span>) {\\n  <span class=\\\"hljs-keyword\\\">var</span> responseText = <span class=\\\"hljs-string\\\">&quot;Hello World!&lt;br&gt;&quot;</span>;\\n  responseText += <span class=\\\"hljs-string\\\">&quot;&lt;small&gt;Requested at: &quot;</span> + req.<span class=\\\"hljs-property\\\">requestTime</span> + <span class=\\\"hljs-string\\\">&quot;&lt;/small&gt;&quot;</span>;\\n  res.<span class=\\\"hljs-title function_\\\">send</span>(responseText);\\n});\\n\\napp.<span class=\\\"hljs-title function_\\\">listen</span>(<span class=\\\"hljs-number\\\">3000</span>);\\n</code></pre>\\n<h3 id=\\\"configurable-middleware\\\">Configurable middleware</h3>\\n<p>如果你需要你的中间件可以配置的话，那么你可以这样做：</p>\\n<p>File: <code>my-middleware.js</code></p>\\n<pre><code class=\\\"hljs language-javascript\\\"><span class=\\\"hljs-variable language_\\\">module</span>.<span class=\\\"hljs-property\\\">exports</span> = <span class=\\\"hljs-keyword\\\">function</span> (<span class=\\\"hljs-params\\\">options</span>) {\\n  <span class=\\\"hljs-keyword\\\">return</span> <span class=\\\"hljs-keyword\\\">function</span> (<span class=\\\"hljs-params\\\">req, res, next</span>) {\\n    <span class=\\\"hljs-comment\\\">// Implement the middleware function based on the options object</span>\\n    <span class=\\\"hljs-title function_\\\">next</span>();\\n  };\\n};\\n</code></pre>\\n<p>然后在装载的时候指定参数：</p>\\n<pre><code class=\\\"hljs language-javascript\\\"><span class=\\\"hljs-keyword\\\">var</span> mw = <span class=\\\"hljs-built_in\\\">require</span>(<span class=\\\"hljs-string\\\">&quot;./my-middleware.js&quot;</span>);\\n\\napp.<span class=\\\"hljs-title function_\\\">use</span>(<span class=\\\"hljs-title function_\\\">mw</span>({ <span class=\\\"hljs-attr\\\">option1</span>: <span class=\\\"hljs-string\\\">&quot;1&quot;</span>, <span class=\\\"hljs-attr\\\">option2</span>: <span class=\\\"hljs-string\\\">&quot;2&quot;</span> }));\\n</code></pre>\\n<p>中间件<a href=\\\"https://github.com/expressjs/cookie-session\\\">cookie-session</a> 和 <a href=\\\"https://github.com/expressjs/compression\\\">compression</a> 都是以这样的形势去配置的。</p>\\n\";","export default \"<h3 id=\\\"introduction\\\">Introduction</h3>\\n<p>我们对Lock和AQS有了一定的了解了之后，可以尝试着接触一些Lock+AQS的基本实现了，本篇会了解到最基本的同步组件<code>ReentrantLock</code>和<code>ReentrantReadWriteLock</code>，前者提供了排他锁的实现，并且支持重入，后者在前者的基础上，支持锁的分级，写锁排他读锁共享。特别的，重入锁的获取还有公平和非公平之分，我们先从这部分入手。</p>\\n<h4 id=\\\"fair-lock--nonfair-lock\\\">Fair Lock & Nonfair Lock</h4>\\n<p>公平锁：锁的获取次序和请求锁的时间顺序一致，即在绝对的时间里，等待时间越久的线程越先获取到锁。</p>\\n<p>非公平锁：锁的获取和瞬间的竞争有关，一瞬间谁运气好就能获取到锁，而且锁的获取即同步状态的获取，刚获取到同步状态的线程，再次获取到状态的机会比较大。</p>\\n<p>说明：虽然非公平锁可能会造成“饥饿”情况，但是大多数情况下还是非公平锁用的多，因为公平锁在释放锁又再获取锁的时候，总是会<strong>切换线程</strong>，而非公平锁一段时间内很可能总是那一个线程不停放锁持锁，<strong>线程切换的开销小就意味着——吞吐量大</strong></p>\\n<p>再说多一点，公平性和非公平性是<strong>“针对未入队结点”</strong>和<strong>“已入队结点”</strong>而言，上一篇文章已经提到过，<strong>同步队列</strong>中的结点都是公平获取锁的，遵从FIFO，至于具体的体现，继续往下读，读到FairSync的<code>tryAcquire</code>和<code>hasQueuedPredecessors</code>方法就知道了</p>\\n<h4 id=\\\"reentrantlock\\\">ReentrantLock</h4>\\n<p>重入锁可以通过构造器来决定公平机制，默认是非公平锁：</p>\\n<pre><code class=\\\"hljs language-java\\\"><span class=\\\"hljs-keyword\\\">public</span> <span class=\\\"hljs-title function_\\\">ReentrantLock</span><span class=\\\"hljs-params\\\">()</span> {\\n    sync = <span class=\\\"hljs-keyword\\\">new</span> <span class=\\\"hljs-title class_\\\">NonfairSync</span>();\\n}\\n<span class=\\\"hljs-keyword\\\">public</span> <span class=\\\"hljs-title function_\\\">ReentrantLock</span><span class=\\\"hljs-params\\\">(<span class=\\\"hljs-type\\\">boolean</span> fair)</span> {\\n    sync = fair ? <span class=\\\"hljs-keyword\\\">new</span> <span class=\\\"hljs-title class_\\\">FairSync</span>() : <span class=\\\"hljs-keyword\\\">new</span> <span class=\\\"hljs-title class_\\\">NonfairSync</span>();\\n}\\n</code></pre>\\n<p>ReentrantLock中有3个简单的内部类，<code>FairSync</code>/<code>NonfairSync</code>以及<code>Sync</code>，后者是前两个的父类，</p>\\n<pre><code class=\\\"hljs language-java\\\"><span class=\\\"hljs-keyword\\\">abstract</span> <span class=\\\"hljs-keyword\\\">static</span> <span class=\\\"hljs-keyword\\\">class</span> <span class=\\\"hljs-title class_\\\">Sync</span> <span class=\\\"hljs-keyword\\\">extends</span> <span class=\\\"hljs-title class_\\\">AbstractQueuedSynchronizer</span> {\\n    <span class=\\\"hljs-keyword\\\">private</span> <span class=\\\"hljs-keyword\\\">static</span> <span class=\\\"hljs-keyword\\\">final</span> <span class=\\\"hljs-type\\\">long</span> <span class=\\\"hljs-variable\\\">serialVersionUID</span> <span class=\\\"hljs-operator\\\">=</span> -<span class=\\\"hljs-number\\\">5179523762034025860L</span>;\\n    \\n    <span class=\\\"hljs-keyword\\\">abstract</span> <span class=\\\"hljs-keyword\\\">void</span> <span class=\\\"hljs-title function_\\\">lock</span><span class=\\\"hljs-params\\\">()</span>;\\n    \\n    <span class=\\\"hljs-keyword\\\">final</span> <span class=\\\"hljs-type\\\">boolean</span> <span class=\\\"hljs-title function_\\\">nonfairTryAcquire</span><span class=\\\"hljs-params\\\">(<span class=\\\"hljs-type\\\">int</span> acquires)</span> {\\n        <span class=\\\"hljs-keyword\\\">final</span> <span class=\\\"hljs-type\\\">Thread</span> <span class=\\\"hljs-variable\\\">current</span> <span class=\\\"hljs-operator\\\">=</span> Thread.currentThread();\\n        <span class=\\\"hljs-type\\\">int</span> <span class=\\\"hljs-variable\\\">c</span> <span class=\\\"hljs-operator\\\">=</span> getState();\\n        <span class=\\\"hljs-keyword\\\">if</span> (c == <span class=\\\"hljs-number\\\">0</span>) {\\n            <span class=\\\"hljs-keyword\\\">if</span> (compareAndSetState(<span class=\\\"hljs-number\\\">0</span>, acquires)) {\\n                setExclusiveOwnerThread(current);\\n                <span class=\\\"hljs-keyword\\\">return</span> <span class=\\\"hljs-literal\\\">true</span>;\\n            }\\n        }\\n        <span class=\\\"hljs-keyword\\\">else</span> <span class=\\\"hljs-keyword\\\">if</span> (current == getExclusiveOwnerThread()) {\\n            <span class=\\\"hljs-type\\\">int</span> <span class=\\\"hljs-variable\\\">nextc</span> <span class=\\\"hljs-operator\\\">=</span> c + acquires;\\n            <span class=\\\"hljs-keyword\\\">if</span> (nextc &lt; <span class=\\\"hljs-number\\\">0</span>) <span class=\\\"hljs-comment\\\">// overflow</span>\\n                <span class=\\\"hljs-keyword\\\">throw</span> <span class=\\\"hljs-keyword\\\">new</span> <span class=\\\"hljs-title class_\\\">Error</span>(<span class=\\\"hljs-string\\\">&quot;Maximum lock count exceeded&quot;</span>);\\n            setState(nextc);\\n            <span class=\\\"hljs-keyword\\\">return</span> <span class=\\\"hljs-literal\\\">true</span>;\\n        }\\n        <span class=\\\"hljs-keyword\\\">return</span> <span class=\\\"hljs-literal\\\">false</span>;\\n    }\\n\\n    <span class=\\\"hljs-keyword\\\">protected</span> <span class=\\\"hljs-keyword\\\">final</span> <span class=\\\"hljs-type\\\">boolean</span> <span class=\\\"hljs-title function_\\\">tryRelease</span><span class=\\\"hljs-params\\\">(<span class=\\\"hljs-type\\\">int</span> releases)</span> {\\n        <span class=\\\"hljs-type\\\">int</span> <span class=\\\"hljs-variable\\\">c</span> <span class=\\\"hljs-operator\\\">=</span> getState() - releases;\\n        <span class=\\\"hljs-keyword\\\">if</span> (Thread.currentThread() != getExclusiveOwnerThread())\\n            <span class=\\\"hljs-keyword\\\">throw</span> <span class=\\\"hljs-keyword\\\">new</span> <span class=\\\"hljs-title class_\\\">IllegalMonitorStateException</span>();\\n        <span class=\\\"hljs-type\\\">boolean</span> <span class=\\\"hljs-variable\\\">free</span> <span class=\\\"hljs-operator\\\">=</span> <span class=\\\"hljs-literal\\\">false</span>;\\n        <span class=\\\"hljs-keyword\\\">if</span> (c == <span class=\\\"hljs-number\\\">0</span>) {\\n            free = <span class=\\\"hljs-literal\\\">true</span>;\\n            setExclusiveOwnerThread(<span class=\\\"hljs-literal\\\">null</span>);\\n        }\\n        setState(c);\\n        <span class=\\\"hljs-keyword\\\">return</span> free;\\n    }\\n\\n    <span class=\\\"hljs-comment\\\">// other method..</span>\\n}\\n</code></pre>\\n<p>一个抽象的lock方法，以及一个非公平的<code>tryAcquire</code>和<code>tryRelease</code>，可以在这看到，在重入锁中：<strong>state代表占锁的线程重入次数（用层数应该更好理解）</strong></p>\\n<p>观察<code>nonfairTryAcquire</code>方法，当state为0的时候，代表没有线程获取到锁，但是同时可能有多个线程在竞争同步状态，所以使用CAS来设置state，设置成功的线程会设置AQS的独占线程为当前线程，此时state为1；下次再来的时候，如果是自己获取自己，那么现在的state加上aquire数量，设置为新的state，并且此时没有竞争，所以常规设置state即可；</p>\\n<p>即在某一绝对时刻，如果state为0，任何线程都能够和同步队列中的头结点竞争state，一旦竞争到了就获取到了锁，不用入队；</p>\\n<p>观察<code>tryRelease</code>方法，如果不是持锁线程掉用的话，则什么都不干，否则现在的state减去releases数量，直到为0的时候，才移除AQS的独占线程；</p>\\n<p>再来看看<code>Sync</code>的子类之一：<code>NonfairSync</code></p>\\n<pre><code class=\\\"hljs language-java\\\"><span class=\\\"hljs-keyword\\\">static</span> <span class=\\\"hljs-keyword\\\">final</span> <span class=\\\"hljs-keyword\\\">class</span> <span class=\\\"hljs-title class_\\\">NonfairSync</span> <span class=\\\"hljs-keyword\\\">extends</span> <span class=\\\"hljs-title class_\\\">Sync</span> {\\n    <span class=\\\"hljs-keyword\\\">private</span> <span class=\\\"hljs-keyword\\\">static</span> <span class=\\\"hljs-keyword\\\">final</span> <span class=\\\"hljs-type\\\">long</span> <span class=\\\"hljs-variable\\\">serialVersionUID</span> <span class=\\\"hljs-operator\\\">=</span> <span class=\\\"hljs-number\\\">7316153563782823691L</span>;\\n\\n    <span class=\\\"hljs-keyword\\\">final</span> <span class=\\\"hljs-keyword\\\">void</span> <span class=\\\"hljs-title function_\\\">lock</span><span class=\\\"hljs-params\\\">()</span> {\\n        <span class=\\\"hljs-keyword\\\">if</span> (compareAndSetState(<span class=\\\"hljs-number\\\">0</span>, <span class=\\\"hljs-number\\\">1</span>))\\n            setExclusiveOwnerThread(Thread.currentThread());\\n        <span class=\\\"hljs-keyword\\\">else</span>\\n            acquire(<span class=\\\"hljs-number\\\">1</span>);\\n    }\\n\\n    <span class=\\\"hljs-keyword\\\">protected</span> <span class=\\\"hljs-keyword\\\">final</span> <span class=\\\"hljs-type\\\">boolean</span> <span class=\\\"hljs-title function_\\\">tryAcquire</span><span class=\\\"hljs-params\\\">(<span class=\\\"hljs-type\\\">int</span> acquires)</span> {\\n        <span class=\\\"hljs-keyword\\\">return</span> nonfairTryAcquire(acquires);\\n    }\\n}\\n</code></pre>\\n<p>非常简单的实现，并且在<code>lock</code>方法中会尝试一次快速地获取同步状态，获取到就贼赚，获取不到就乖乖<code>acquire</code> 去，<code>tryAcquire</code>则是直接调用父类提供的非公平<code>nonfairTryAcquire</code>，如果获取不到，下场一样是进入同步队列尾部排队</p>\\n<p>最后是<code>FairSync</code></p>\\n<pre><code class=\\\"hljs language-java\\\"><span class=\\\"hljs-keyword\\\">static</span> <span class=\\\"hljs-keyword\\\">final</span> <span class=\\\"hljs-keyword\\\">class</span> <span class=\\\"hljs-title class_\\\">FairSync</span> <span class=\\\"hljs-keyword\\\">extends</span> <span class=\\\"hljs-title class_\\\">Sync</span> {\\n    <span class=\\\"hljs-keyword\\\">private</span> <span class=\\\"hljs-keyword\\\">static</span> <span class=\\\"hljs-keyword\\\">final</span> <span class=\\\"hljs-type\\\">long</span> <span class=\\\"hljs-variable\\\">serialVersionUID</span> <span class=\\\"hljs-operator\\\">=</span> -<span class=\\\"hljs-number\\\">3000897897090466540L</span>;\\n\\n    <span class=\\\"hljs-keyword\\\">final</span> <span class=\\\"hljs-keyword\\\">void</span> <span class=\\\"hljs-title function_\\\">lock</span><span class=\\\"hljs-params\\\">()</span> {\\n        acquire(<span class=\\\"hljs-number\\\">1</span>);\\n    }\\n\\n    <span class=\\\"hljs-keyword\\\">protected</span> <span class=\\\"hljs-keyword\\\">final</span> <span class=\\\"hljs-type\\\">boolean</span> <span class=\\\"hljs-title function_\\\">tryAcquire</span><span class=\\\"hljs-params\\\">(<span class=\\\"hljs-type\\\">int</span> acquires)</span> {\\n        <span class=\\\"hljs-keyword\\\">final</span> <span class=\\\"hljs-type\\\">Thread</span> <span class=\\\"hljs-variable\\\">current</span> <span class=\\\"hljs-operator\\\">=</span> Thread.currentThread();\\n        <span class=\\\"hljs-type\\\">int</span> <span class=\\\"hljs-variable\\\">c</span> <span class=\\\"hljs-operator\\\">=</span> getState();\\n        <span class=\\\"hljs-keyword\\\">if</span> (c == <span class=\\\"hljs-number\\\">0</span>) {\\n            <span class=\\\"hljs-keyword\\\">if</span> (!hasQueuedPredecessors() &&\\n                compareAndSetState(<span class=\\\"hljs-number\\\">0</span>, acquires)) {\\n                setExclusiveOwnerThread(current);\\n                <span class=\\\"hljs-keyword\\\">return</span> <span class=\\\"hljs-literal\\\">true</span>;\\n            }\\n        }\\n        <span class=\\\"hljs-keyword\\\">else</span> <span class=\\\"hljs-keyword\\\">if</span> (current == getExclusiveOwnerThread()) {\\n            <span class=\\\"hljs-type\\\">int</span> <span class=\\\"hljs-variable\\\">nextc</span> <span class=\\\"hljs-operator\\\">=</span> c + acquires;\\n            <span class=\\\"hljs-keyword\\\">if</span> (nextc &lt; <span class=\\\"hljs-number\\\">0</span>)\\n                <span class=\\\"hljs-keyword\\\">throw</span> <span class=\\\"hljs-keyword\\\">new</span> <span class=\\\"hljs-title class_\\\">Error</span>(<span class=\\\"hljs-string\\\">&quot;Maximum lock count exceeded&quot;</span>);\\n            setState(nextc);\\n            <span class=\\\"hljs-keyword\\\">return</span> <span class=\\\"hljs-literal\\\">true</span>;\\n        }\\n        <span class=\\\"hljs-keyword\\\">return</span> <span class=\\\"hljs-literal\\\">false</span>;\\n    }\\n}\\n</code></pre>\\n<p>我们只需要注意到，它的<code>tryAcquire</code>方法和父类的非公平获取几乎如出一撤，仅是在CAS竞争之前，先要判断一下当前线程所在队列中的结点是否有前驱（<code>hasQueuedPredecessors</code>），如果没有就可以开始CAS获取，保证总是最早入队的结点有权获取同步状态；</p>\\n<p>我们再深入一下<code>hasQueuedPredcessors</code></p>\\n<pre><code class=\\\"hljs language-java\\\"><span class=\\\"hljs-keyword\\\">public</span> <span class=\\\"hljs-keyword\\\">final</span> <span class=\\\"hljs-type\\\">boolean</span> <span class=\\\"hljs-title function_\\\">hasQueuedPredecessors</span><span class=\\\"hljs-params\\\">()</span> {\\n    <span class=\\\"hljs-comment\\\">// The correctness of this depends on head being initialized</span>\\n    <span class=\\\"hljs-comment\\\">// before tail and on head.next being accurate if the current</span>\\n    <span class=\\\"hljs-comment\\\">// thread is first in queue.</span>\\n    <span class=\\\"hljs-type\\\">Node</span> <span class=\\\"hljs-variable\\\">t</span> <span class=\\\"hljs-operator\\\">=</span> tail; <span class=\\\"hljs-comment\\\">// Read fields in reverse initialization order</span>\\n    <span class=\\\"hljs-type\\\">Node</span> <span class=\\\"hljs-variable\\\">h</span> <span class=\\\"hljs-operator\\\">=</span> head;\\n    Node s;\\n    <span class=\\\"hljs-keyword\\\">return</span> h != t &&\\n        ((s = h.next) == <span class=\\\"hljs-literal\\\">null</span> || s.thread != Thread.currentThread());\\n}\\n</code></pre>\\n<p>判断head是否等于tail：</p>\\n<ol>\\n<li><p>若等于，则条件结束，方法返回fasle</p>\\n<blockquote>\\n<p>等于的含义有2层，一是队列里没有任何结点的时候，head=tail=null，这时候方法返回false，代表进入方法的线程是整个系统第一次访问该锁的线程，则可以获取同步状态；</p>\\n<p>二是队列中只有一个结点，这个结点即是head又是tail；</p>\\n</blockquote>\\n</li>\\n<li><p>若不等于，则看head是否有后继：</p>\\n<ol>\\n<li>若没有后继，则条件结束，方法返回true，回到上层方法，<code>tryAcquire</code>返回false；</li>\\n<li>若有后继，如果head的后继不是当前线程的话，方法返回true，回到上层方法，<code>tryAcquire</code>返回false；</li>\\n<li>若有后继，且head后继是当前线程，则方法返回false，回到上层方法，当前线程可以尝试获取同步状态；</li>\\n</ol>\\n</li>\\n</ol>\\n<h5 id=\\\"real-meaning-of-fair\\\">Real meaning of &quot;fair&quot;</h5>\\n<p>读完上面的方法之后，接下来这句话非常重要：为什么之前说，公平性和非公平性是<strong>“针对未入队结点”</strong>和<strong>“已入队结点”</strong>而言？因为<strong>已入队的结点之间不存在竞争</strong>，竞争仅仅是队列前几个结点和未入队的新线程而言：</p>\\n<ul>\\n<li>如果是公平锁，未入队的新线程在<code>hasQueuePredecessors</code>方法之后，肯定是false，导致<code>tryAcquire</code>方法必定返回false，导致这个新线程必定组成结点然后入队排队，<strong>即不入队的线程没有参与同步资源竞争的权利</strong>；</li>\\n<li>如果是非公平锁，未入队的新线程有机会和已入队的一起竞争同步资源；所以才叫非公平！</li>\\n</ul>\\n<p>所以不要误解非公平锁的情况下，后排队的结点线程也能很<strong>“不公平”</strong>地比先排队的结点线程先获得同步状态，这是不可能的；</p>\\n<h4 id=\\\"reentrantreadwritelock\\\">ReentrantReadWriteLock</h4>\\n<p>在Lock接口之前，我们使用等待通知的设计机制可以简单地实现一个读写场景，当写线程开始的时候，所有后续读写线程都进入等待，写操作完成之后，通知唤醒等待中的其他线程；而当有一个读线程在读取的时候，写线程进入等待；</p>\\n<p>基于这样的逻辑，才能避免脏读</p>\\n<p>所以读写锁的基本思想是：<strong>写锁的优先度高于读锁，可以多读，只能单写；</strong></p>\\n<p><strong>换句话说，写锁是独占锁，读锁是共享锁</strong>，而上面说的<code>ReentrantLock</code>则是排他锁，在一般场景下，读写锁的性能会比排他锁好，因为绝大部分场景是读操作远多于写操作的；</p>\\n<p>使用读写锁的时候，只需要在读操作的时候获取读锁，写操作的时候获取写锁就可以了，比<code>synchronized</code>关键字加等待通知方法更加简单明了</p>\\n<p><code>ReentrantReadWirteLock</code>是读写锁的一种，其特性如：</p>\\n<ul>\\n<li>可重入</li>\\n<li>公平性选择</li>\\n<li>遵循获取写锁、获取读锁再释放写锁的顺序，写锁可降级称为读锁</li>\\n</ul>\\n<p>另外它还提供了外部监控内部锁状态的方法：</p>\\n<table>\\n<thead>\\n<tr>\\n<th>方法</th>\\n<th>描述</th>\\n</tr>\\n</thead>\\n<tbody><tr>\\n<td><code>int getReadLockCount()</code></td>\\n<td><strong>返回当前读锁被获取到的次数</strong>，该次数不等于获取读锁的线程数，比如仅一个线程连续重入了n次，则返回n；该方法会返回<strong>所有线程持有的当前读锁的层数</strong>，比如线程A获取3次，释放1次，线程B获取5次释放2次，则该方法会返回3-1+5-2=<strong>5层</strong>；</td>\\n</tr>\\n<tr>\\n<td><code>int getReadHoldCount()</code></td>\\n<td><strong>返回当前线程获取到读锁的次数</strong>，该方法在Java6之后加入，通过<strong>ThreadLocal</strong>实现；该方法返回<strong>当前线程持有该锁的层数</strong>，比如线程A获取该锁5次释放<strong>2层</strong>，则在A锁该方法返回3，同时B线程获取该锁4次释放4次，则在B线程该方法返回<strong>0层</strong>；</td>\\n</tr>\\n<tr>\\n<td><code>boolean isWirteLocked()</code></td>\\n<td><strong>判断写锁是否被获取到；</strong></td>\\n</tr>\\n<tr>\\n<td><code>int getWriteHoldCount()</code></td>\\n<td><strong>判断当前写锁被获取的次数；</strong></td>\\n</tr>\\n</tbody></table>\\n<h5 id=\\\"read-write-state-design\\\">Read Write State Design</h5>\\n<p>我们来思考一下，对于一个读写锁来说，它应当将读写分离为2把锁，但是读写锁的排队应该排在同一队，所以读写锁的AQS应该是同一个实例，所以问题来了，如何在一个AQS实例上的一个state变量中表示读与写两种同步状态？老爷子给出了这样的答案：</p>\\n<pre class=\\\"nhi\\\">\\n    int value\\n    |&lt;-----------------------------32------------------------------&gt;|\\n    ┌---------------------------------------------------------------┐\\n    |0|0|0|0|0|0|0|0|0|0|0|0|0|0|1|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|1|1|\\n    └---------------------------------------------------------------┘\\n                    |                                 ↓\\n                    |                ┌-------------------------------┐\\n                    ↓                |0|0|0|0|0|0|0|0|0|0|0|0|0|0|1|1|\\n    ┌-------------------------------┐└-------------------------------┘\\n    |0|0|0|0|0|0|0|0|0|0|0|0|0|0|1|0|               低16位表示写状态 = 3\\n    └-------------------------------┘\\n                   高16位表示读状态 = 2\\n</pre>\\n\\n<p>通过位运算，假设当前同步状态值为S，那么写状态就等于S & 0x0000FFFF（高16位清零），读状态等于S &gt;&gt;&gt; 16（无符号补位0右移16位）</p>\\n<p>当写状态要增加1的时候，直接S + 1，当读状态要增加1的是，直接S + 0x00010000就行</p>\\n<h5 id=\\\"structure\\\">Structure</h5>\\n<pre><code class=\\\"hljs language-java\\\"><span class=\\\"hljs-keyword\\\">public</span> <span class=\\\"hljs-keyword\\\">class</span> <span class=\\\"hljs-title class_\\\">ReentrantReadWriteLock</span>\\n        <span class=\\\"hljs-keyword\\\">implements</span> <span class=\\\"hljs-title class_\\\">ReadWriteLock</span>, java.io.Serializable {\\n\\n    <span class=\\\"hljs-keyword\\\">private</span> <span class=\\\"hljs-keyword\\\">final</span> ReentrantReadWriteLock.ReadLock readerLock;\\n    <span class=\\\"hljs-keyword\\\">private</span> <span class=\\\"hljs-keyword\\\">final</span> ReentrantReadWriteLock.WriteLock writerLock;\\n    <span class=\\\"hljs-keyword\\\">final</span> Sync sync;\\n\\n    <span class=\\\"hljs-keyword\\\">public</span> <span class=\\\"hljs-title function_\\\">ReentrantReadWriteLock</span><span class=\\\"hljs-params\\\">()</span> {<span class=\\\"hljs-built_in\\\">this</span>(<span class=\\\"hljs-literal\\\">false</span>);}\\n    <span class=\\\"hljs-keyword\\\">public</span> <span class=\\\"hljs-title function_\\\">ReentrantReadWriteLock</span><span class=\\\"hljs-params\\\">(<span class=\\\"hljs-type\\\">boolean</span> fair)</span> {\\n        sync = fair ? <span class=\\\"hljs-keyword\\\">new</span> <span class=\\\"hljs-title class_\\\">FairSync</span>() : <span class=\\\"hljs-keyword\\\">new</span> <span class=\\\"hljs-title class_\\\">NonfairSync</span>();\\n        readerLock = <span class=\\\"hljs-keyword\\\">new</span> <span class=\\\"hljs-title class_\\\">ReadLock</span>(<span class=\\\"hljs-built_in\\\">this</span>);\\n        writerLock = <span class=\\\"hljs-keyword\\\">new</span> <span class=\\\"hljs-title class_\\\">WriteLock</span>(<span class=\\\"hljs-built_in\\\">this</span>);\\n    }\\n\\n    <span class=\\\"hljs-keyword\\\">public</span> ReentrantReadWriteLock.WriteLock <span class=\\\"hljs-title function_\\\">writeLock</span><span class=\\\"hljs-params\\\">()</span> { <span class=\\\"hljs-keyword\\\">return</span> writerLock; }\\n    <span class=\\\"hljs-keyword\\\">public</span> ReentrantReadWriteLock.ReadLock  <span class=\\\"hljs-title function_\\\">readLock</span><span class=\\\"hljs-params\\\">()</span>  { <span class=\\\"hljs-keyword\\\">return</span> readerLock; }\\n    \\n    <span class=\\\"hljs-comment\\\">// ...</span>\\n}\\n</code></pre>\\n<p>这是重入读写锁的整体结构，可以看到ReentrantReadWriteLock仅仅只是实现了ReadWriteLock接口而已，这个接口仅定义了获取ReadLock和WriteLock的方法，真正的锁实现是<code>ReentrantReadWriteLock.ReadLock</code>和<code>ReentrantReadWriteLock.WriteLock</code>，而这两个锁实现，用的是同一个<code>Sync</code>实例，<code>Sync</code>实例即实现了AQS的公平锁或者非公平锁</p>\\n<h5 id=\\\"fair--nonfair\\\">Fair & NonFair</h5>\\n<p>我们先来看非公平锁和公平锁的实现：</p>\\n<pre><code class=\\\"hljs language-java\\\"><span class=\\\"hljs-keyword\\\">static</span> <span class=\\\"hljs-keyword\\\">final</span> <span class=\\\"hljs-keyword\\\">class</span> <span class=\\\"hljs-title class_\\\">NonfairSync</span> <span class=\\\"hljs-keyword\\\">extends</span> <span class=\\\"hljs-title class_\\\">Sync</span> {\\n    <span class=\\\"hljs-keyword\\\">private</span> <span class=\\\"hljs-keyword\\\">static</span> <span class=\\\"hljs-keyword\\\">final</span> <span class=\\\"hljs-type\\\">long</span> <span class=\\\"hljs-variable\\\">serialVersionUID</span> <span class=\\\"hljs-operator\\\">=</span> -<span class=\\\"hljs-number\\\">8159625535654395037L</span>;\\n    <span class=\\\"hljs-keyword\\\">final</span> <span class=\\\"hljs-type\\\">boolean</span> <span class=\\\"hljs-title function_\\\">writerShouldBlock</span><span class=\\\"hljs-params\\\">()</span> {\\n        <span class=\\\"hljs-keyword\\\">return</span> <span class=\\\"hljs-literal\\\">false</span>; <span class=\\\"hljs-comment\\\">// writers can always barge</span>\\n    }\\n    <span class=\\\"hljs-keyword\\\">final</span> <span class=\\\"hljs-type\\\">boolean</span> <span class=\\\"hljs-title function_\\\">readerShouldBlock</span><span class=\\\"hljs-params\\\">()</span> {\\n        <span class=\\\"hljs-keyword\\\">return</span> apparentlyFirstQueuedIsExclusive();\\n    }\\n}\\n\\n<span class=\\\"hljs-keyword\\\">static</span> <span class=\\\"hljs-keyword\\\">final</span> <span class=\\\"hljs-keyword\\\">class</span> <span class=\\\"hljs-title class_\\\">FairSync</span> <span class=\\\"hljs-keyword\\\">extends</span> <span class=\\\"hljs-title class_\\\">Sync</span> {\\n    <span class=\\\"hljs-keyword\\\">private</span> <span class=\\\"hljs-keyword\\\">static</span> <span class=\\\"hljs-keyword\\\">final</span> <span class=\\\"hljs-type\\\">long</span> <span class=\\\"hljs-variable\\\">serialVersionUID</span> <span class=\\\"hljs-operator\\\">=</span> -<span class=\\\"hljs-number\\\">2274990926593161451L</span>;\\n    <span class=\\\"hljs-keyword\\\">final</span> <span class=\\\"hljs-type\\\">boolean</span> <span class=\\\"hljs-title function_\\\">writerShouldBlock</span><span class=\\\"hljs-params\\\">()</span> {<span class=\\\"hljs-keyword\\\">return</span> hasQueuedPredecessors();}\\n    <span class=\\\"hljs-keyword\\\">final</span> <span class=\\\"hljs-type\\\">boolean</span> <span class=\\\"hljs-title function_\\\">readerShouldBlock</span><span class=\\\"hljs-params\\\">()</span> {<span class=\\\"hljs-keyword\\\">return</span> hasQueuedPredecessors();}\\n}\\n</code></pre>\\n<p>读写锁中的公平性主要体现在是否要阻塞读写线程这方面，对于公平锁而言，无论读写线程，都要判断<code>hasQueeudPredecessors</code>这个方法我们上面讲过了，关键是非公平锁，对于写锁是否应该block来说，它总是不应该被block住，而读锁则需要判断<code>apparentlyFirstQueuedIsExclusive</code>方法，</p>\\n<pre><code class=\\\"hljs language-java\\\"><span class=\\\"hljs-keyword\\\">final</span> <span class=\\\"hljs-type\\\">boolean</span> <span class=\\\"hljs-title function_\\\">apparentlyFirstQueuedIsExclusive</span><span class=\\\"hljs-params\\\">()</span> {\\n    Node h, s;\\n    <span class=\\\"hljs-keyword\\\">return</span> (h = head) != <span class=\\\"hljs-literal\\\">null</span> &&\\n        (s = h.next)  != <span class=\\\"hljs-literal\\\">null</span> &&\\n        !s.isShared()         &&\\n        s.thread != <span class=\\\"hljs-literal\\\">null</span>;\\n}\\n</code></pre>\\n<p>如果队列中的第一个等待结点明显是是独占式锁的结点的话，就返回true，两个方法连起来的意思是，如果队列中的第一个结点是写锁（独占锁）的话，读锁应该被Block住</p>\\n<h5 id=\\\"sync-in-reentrantreadwritelock\\\">Sync in ReentrantReadWriteLock</h5>\\n<pre><code class=\\\"hljs language-java\\\"><span class=\\\"hljs-keyword\\\">abstract</span> <span class=\\\"hljs-keyword\\\">static</span> <span class=\\\"hljs-keyword\\\">class</span> <span class=\\\"hljs-title class_\\\">Sync</span> <span class=\\\"hljs-keyword\\\">extends</span> <span class=\\\"hljs-title class_\\\">AbstractQueuedSynchronizer</span> {\\n    <span class=\\\"hljs-keyword\\\">static</span> <span class=\\\"hljs-keyword\\\">final</span> <span class=\\\"hljs-type\\\">int</span> <span class=\\\"hljs-variable\\\">SHARED_SHIFT</span>   <span class=\\\"hljs-operator\\\">=</span> <span class=\\\"hljs-number\\\">16</span>;\\n    <span class=\\\"hljs-keyword\\\">static</span> <span class=\\\"hljs-keyword\\\">final</span> <span class=\\\"hljs-type\\\">int</span> <span class=\\\"hljs-variable\\\">SHARED_UNIT</span>    <span class=\\\"hljs-operator\\\">=</span> (<span class=\\\"hljs-number\\\">1</span> &lt;&lt; SHARED_SHIFT);\\n    <span class=\\\"hljs-keyword\\\">static</span> <span class=\\\"hljs-keyword\\\">final</span> <span class=\\\"hljs-type\\\">int</span> <span class=\\\"hljs-variable\\\">MAX_COUNT</span>      <span class=\\\"hljs-operator\\\">=</span> (<span class=\\\"hljs-number\\\">1</span> &lt;&lt; SHARED_SHIFT) - <span class=\\\"hljs-number\\\">1</span>;\\n    <span class=\\\"hljs-keyword\\\">static</span> <span class=\\\"hljs-keyword\\\">final</span> <span class=\\\"hljs-type\\\">int</span> <span class=\\\"hljs-variable\\\">EXCLUSIVE_MASK</span> <span class=\\\"hljs-operator\\\">=</span> (<span class=\\\"hljs-number\\\">1</span> &lt;&lt; SHARED_SHIFT) - <span class=\\\"hljs-number\\\">1</span>;\\n\\n    <span class=\\\"hljs-keyword\\\">static</span> <span class=\\\"hljs-type\\\">int</span> <span class=\\\"hljs-title function_\\\">sharedCount</span><span class=\\\"hljs-params\\\">(<span class=\\\"hljs-type\\\">int</span> c)</span>    { <span class=\\\"hljs-keyword\\\">return</span> c &gt;&gt;&gt; SHARED_SHIFT; }\\n    <span class=\\\"hljs-keyword\\\">static</span> <span class=\\\"hljs-type\\\">int</span> <span class=\\\"hljs-title function_\\\">exclusiveCount</span><span class=\\\"hljs-params\\\">(<span class=\\\"hljs-type\\\">int</span> c)</span> { <span class=\\\"hljs-keyword\\\">return</span> c & EXCLUSIVE_MASK; }\\n\\n    Sync() {\\n        readHolds = <span class=\\\"hljs-keyword\\\">new</span> <span class=\\\"hljs-title class_\\\">ThreadLocalHoldCounter</span>();\\n        setState(getState()); <span class=\\\"hljs-comment\\\">// ensures visibility of readHolds</span>\\n    }\\n\\n    <span class=\\\"hljs-keyword\\\">abstract</span> <span class=\\\"hljs-type\\\">boolean</span> <span class=\\\"hljs-title function_\\\">readerShouldBlock</span><span class=\\\"hljs-params\\\">()</span>;\\n    <span class=\\\"hljs-keyword\\\">abstract</span> <span class=\\\"hljs-type\\\">boolean</span> <span class=\\\"hljs-title function_\\\">writerShouldBlock</span><span class=\\\"hljs-params\\\">()</span>;\\n\\n    <span class=\\\"hljs-comment\\\">// .. HolderCounter 相关方法暂时略</span>\\n    \\n    <span class=\\\"hljs-keyword\\\">protected</span> <span class=\\\"hljs-keyword\\\">final</span> <span class=\\\"hljs-type\\\">boolean</span> <span class=\\\"hljs-title function_\\\">tryRelease</span><span class=\\\"hljs-params\\\">(<span class=\\\"hljs-type\\\">int</span> releases)</span> { \\n        <span class=\\\"hljs-comment\\\">// .. </span>\\n    }\\n    <span class=\\\"hljs-keyword\\\">protected</span> <span class=\\\"hljs-keyword\\\">final</span> <span class=\\\"hljs-type\\\">boolean</span> <span class=\\\"hljs-title function_\\\">tryAcquire</span><span class=\\\"hljs-params\\\">(<span class=\\\"hljs-type\\\">int</span> acquires)</span> {\\n        <span class=\\\"hljs-comment\\\">// ..</span>\\n    }\\n    <span class=\\\"hljs-keyword\\\">protected</span> <span class=\\\"hljs-keyword\\\">final</span> <span class=\\\"hljs-type\\\">boolean</span> <span class=\\\"hljs-title function_\\\">tryReleaseShared</span><span class=\\\"hljs-params\\\">(<span class=\\\"hljs-type\\\">int</span> unused)</span> {\\n        <span class=\\\"hljs-comment\\\">// ..</span>\\n    }\\n    <span class=\\\"hljs-keyword\\\">protected</span> <span class=\\\"hljs-keyword\\\">final</span> <span class=\\\"hljs-type\\\">int</span> <span class=\\\"hljs-title function_\\\">tryAcquireShared</span><span class=\\\"hljs-params\\\">(<span class=\\\"hljs-type\\\">int</span> unused)</span> {\\n        <span class=\\\"hljs-comment\\\">// ..</span>\\n    }\\n    <span class=\\\"hljs-keyword\\\">final</span> <span class=\\\"hljs-type\\\">int</span> <span class=\\\"hljs-title function_\\\">fullTryAcquireShared</span><span class=\\\"hljs-params\\\">(Thread current)</span> {\\n        <span class=\\\"hljs-comment\\\">// ..</span>\\n    }\\n    <span class=\\\"hljs-keyword\\\">final</span> <span class=\\\"hljs-type\\\">boolean</span> <span class=\\\"hljs-title function_\\\">tryWriteLock</span><span class=\\\"hljs-params\\\">()</span> {\\n        <span class=\\\"hljs-comment\\\">// ..</span>\\n    }\\n    <span class=\\\"hljs-keyword\\\">final</span> <span class=\\\"hljs-type\\\">boolean</span> <span class=\\\"hljs-title function_\\\">tryReadLock</span><span class=\\\"hljs-params\\\">()</span> {\\n        <span class=\\\"hljs-comment\\\">// ..</span>\\n    }\\n    \\n    <span class=\\\"hljs-comment\\\">// .. 锁状态 相关方法暂时略</span>\\n    \\n    <span class=\\\"hljs-keyword\\\">final</span> <span class=\\\"hljs-type\\\">int</span> <span class=\\\"hljs-title function_\\\">getCount</span><span class=\\\"hljs-params\\\">()</span> { <span class=\\\"hljs-keyword\\\">return</span> getState(); }\\n}\\n</code></pre>\\n<p>重入读写锁中的<code>Sync</code>类提供的功能比较多，它同时实现了读锁和写锁的管理操作，我们先分析这部分，略去的部分我在注释中说明了</p>\\n<p>读写状态的管理就是通过位运算去实现的，读写锁的层数也是通过位运算state变量算出来的，这里不再赘述；写锁的tryRelease方法和<code>ReentrantLock</code>基本一致；</p>\\n<p>我们接着看写锁的try：</p>\\n<pre><code class=\\\"hljs language-java\\\"><span class=\\\"hljs-keyword\\\">protected</span> <span class=\\\"hljs-keyword\\\">final</span> <span class=\\\"hljs-type\\\">boolean</span> <span class=\\\"hljs-title function_\\\">tryAcquire</span><span class=\\\"hljs-params\\\">(<span class=\\\"hljs-type\\\">int</span> acquires)</span> {\\n    <span class=\\\"hljs-type\\\">Thread</span> <span class=\\\"hljs-variable\\\">current</span> <span class=\\\"hljs-operator\\\">=</span> Thread.currentThread();\\n    <span class=\\\"hljs-type\\\">int</span> <span class=\\\"hljs-variable\\\">c</span> <span class=\\\"hljs-operator\\\">=</span> getState();\\n    <span class=\\\"hljs-type\\\">int</span> <span class=\\\"hljs-variable\\\">w</span> <span class=\\\"hljs-operator\\\">=</span> exclusiveCount(c);\\n    <span class=\\\"hljs-keyword\\\">if</span> (c != <span class=\\\"hljs-number\\\">0</span>) {\\n        <span class=\\\"hljs-comment\\\">// (Note: if c != 0 and w == 0 then shared count != 0)</span>\\n        <span class=\\\"hljs-keyword\\\">if</span> (w == <span class=\\\"hljs-number\\\">0</span> || current != getExclusiveOwnerThread())\\n            <span class=\\\"hljs-keyword\\\">return</span> <span class=\\\"hljs-literal\\\">false</span>;\\n        <span class=\\\"hljs-keyword\\\">if</span> (w + exclusiveCount(acquires) &gt; MAX_COUNT)\\n            <span class=\\\"hljs-keyword\\\">throw</span> <span class=\\\"hljs-keyword\\\">new</span> <span class=\\\"hljs-title class_\\\">Error</span>(<span class=\\\"hljs-string\\\">&quot;Maximum lock count exceeded&quot;</span>);\\n        <span class=\\\"hljs-comment\\\">// Reentrant acquire</span>\\n        setState(c + acquires);\\n        <span class=\\\"hljs-keyword\\\">return</span> <span class=\\\"hljs-literal\\\">true</span>;\\n    }\\n    <span class=\\\"hljs-keyword\\\">if</span> (writerShouldBlock() ||\\n        !compareAndSetState(c, c + acquires))\\n        <span class=\\\"hljs-keyword\\\">return</span> <span class=\\\"hljs-literal\\\">false</span>;\\n    setExclusiveOwnerThread(current);\\n    <span class=\\\"hljs-keyword\\\">return</span> <span class=\\\"hljs-literal\\\">true</span>;\\n}\\n</code></pre>\\n<p>老爷子特地写下了一段WalkThrough注释，指出了本方法要处理的情况：</p>\\n<ol>\\n<li>如果读写状态都不为零，且当前线程不是该AQS的独占线程，则不能获取写锁；</li>\\n<li>如果状态满值了，也获取不了写锁；</li>\\n<li>如果不是上面2种情况，则该线程应该在公平性的指导下<code>writerShouldBlock</code>合法竞争独占锁；</li>\\n</ol>\\n<p>再来看读锁的，再看读锁之前，我们要了解一下<code>Sync</code>的几个变量和类：</p>\\n<pre><code class=\\\"hljs language-java\\\"><span class=\\\"hljs-keyword\\\">static</span> <span class=\\\"hljs-keyword\\\">final</span> <span class=\\\"hljs-keyword\\\">class</span> <span class=\\\"hljs-title class_\\\">HoldCounter</span> {\\n    <span class=\\\"hljs-type\\\">int</span> <span class=\\\"hljs-variable\\\">count</span> <span class=\\\"hljs-operator\\\">=</span> <span class=\\\"hljs-number\\\">0</span>;\\n    <span class=\\\"hljs-comment\\\">// Use id, not reference, to avoid garbage retention</span>\\n    <span class=\\\"hljs-keyword\\\">final</span> <span class=\\\"hljs-type\\\">long</span> <span class=\\\"hljs-variable\\\">tid</span> <span class=\\\"hljs-operator\\\">=</span> getThreadId(Thread.currentThread());\\n}\\n\\n<span class=\\\"hljs-keyword\\\">static</span> <span class=\\\"hljs-keyword\\\">final</span> <span class=\\\"hljs-keyword\\\">class</span> <span class=\\\"hljs-title class_\\\">ThreadLocalHoldCounter</span> <span class=\\\"hljs-keyword\\\">extends</span> <span class=\\\"hljs-title class_\\\">ThreadLocal</span>&lt;HoldCounter&gt; {\\n    <span class=\\\"hljs-keyword\\\">public</span> HoldCounter <span class=\\\"hljs-title function_\\\">initialValue</span><span class=\\\"hljs-params\\\">()</span> {<span class=\\\"hljs-keyword\\\">return</span> <span class=\\\"hljs-keyword\\\">new</span> <span class=\\\"hljs-title class_\\\">HoldCounter</span>();}\\n}\\n\\n<span class=\\\"hljs-keyword\\\">private</span> <span class=\\\"hljs-keyword\\\">transient</span> ThreadLocalHoldCounter readHolds;\\n\\n<span class=\\\"hljs-keyword\\\">private</span> <span class=\\\"hljs-keyword\\\">transient</span> HoldCounter cachedHoldCounter;\\n\\n<span class=\\\"hljs-keyword\\\">private</span> <span class=\\\"hljs-keyword\\\">transient</span> <span class=\\\"hljs-type\\\">Thread</span> <span class=\\\"hljs-variable\\\">firstReader</span> <span class=\\\"hljs-operator\\\">=</span> <span class=\\\"hljs-literal\\\">null</span>;\\n<span class=\\\"hljs-keyword\\\">private</span> <span class=\\\"hljs-keyword\\\">transient</span> <span class=\\\"hljs-type\\\">int</span> firstReaderHoldCount;\\n</code></pre>\\n<p>有一个<code>HoldCounter</code>类，用于存储每个线程自己的读层数，然后通过ThreadLocal来管理</p>\\n<ul>\\n<li><code>readHolds</code>：一个ThreadLocal实例，保存了所有读线程的HoldCounter</li>\\n<li><code>cachedHoldCounter</code>：表示最后一个成功acquire到readLock的线程的holdCount</li>\\n<li><code>firstReader</code>：是第一个acquire到读锁的线程</li>\\n<li><code>firstReaderHoldCount</code>：是<code>firstReader</code>的holdCount</li>\\n</ul>\\n<p>然后是读try：</p>\\n<pre><code class=\\\"hljs language-java\\\"><span class=\\\"hljs-keyword\\\">protected</span> <span class=\\\"hljs-keyword\\\">final</span> <span class=\\\"hljs-type\\\">int</span> <span class=\\\"hljs-title function_\\\">tryAcquireShared</span><span class=\\\"hljs-params\\\">(<span class=\\\"hljs-type\\\">int</span> unused)</span> {\\n    <span class=\\\"hljs-type\\\">Thread</span> <span class=\\\"hljs-variable\\\">current</span> <span class=\\\"hljs-operator\\\">=</span> Thread.currentThread();\\n    <span class=\\\"hljs-type\\\">int</span> <span class=\\\"hljs-variable\\\">c</span> <span class=\\\"hljs-operator\\\">=</span> getState();\\n    <span class=\\\"hljs-keyword\\\">if</span> (exclusiveCount(c) != <span class=\\\"hljs-number\\\">0</span> &&\\n        getExclusiveOwnerThread() != current)\\n        <span class=\\\"hljs-keyword\\\">return</span> -<span class=\\\"hljs-number\\\">1</span>;\\n    <span class=\\\"hljs-type\\\">int</span> <span class=\\\"hljs-variable\\\">r</span> <span class=\\\"hljs-operator\\\">=</span> sharedCount(c);\\n    <span class=\\\"hljs-keyword\\\">if</span> (!readerShouldBlock() &&\\n        r &lt; MAX_COUNT &&\\n        compareAndSetState(c, c + SHARED_UNIT)) {\\n        <span class=\\\"hljs-keyword\\\">if</span> (r == <span class=\\\"hljs-number\\\">0</span>) {\\n            firstReader = current;\\n            firstReaderHoldCount = <span class=\\\"hljs-number\\\">1</span>;\\n        } <span class=\\\"hljs-keyword\\\">else</span> <span class=\\\"hljs-keyword\\\">if</span> (firstReader == current) {\\n            firstReaderHoldCount++;\\n        } <span class=\\\"hljs-keyword\\\">else</span> {\\n            <span class=\\\"hljs-type\\\">HoldCounter</span> <span class=\\\"hljs-variable\\\">rh</span> <span class=\\\"hljs-operator\\\">=</span> cachedHoldCounter;\\n            <span class=\\\"hljs-keyword\\\">if</span> (rh == <span class=\\\"hljs-literal\\\">null</span> || rh.tid != getThreadId(current))\\n                cachedHoldCounter = rh = readHolds.get();\\n            <span class=\\\"hljs-keyword\\\">else</span> <span class=\\\"hljs-keyword\\\">if</span> (rh.count == <span class=\\\"hljs-number\\\">0</span>)\\n                readHolds.set(rh);\\n            rh.count++;\\n        }\\n        <span class=\\\"hljs-keyword\\\">return</span> <span class=\\\"hljs-number\\\">1</span>;\\n    }\\n    <span class=\\\"hljs-keyword\\\">return</span> fullTryAcquireShared(current);\\n}\\n</code></pre>\\n<p>WalkThrough：</p>\\n<ol>\\n<li>如果写锁被其它线程获取了，则不能获取读锁；</li>\\n<li>否则就在公平性的指导下<code>writerShouldBlock</code>，如果允许竞争，则判断是否超量读，如果没超量，则尝试CAS设置读状态，这三个条件过了之后，line:11~line:24是快速地进行tryAcquireShared，它并没有检查重入情况下的acquire，所以它将完整地holdCount检查等工作推迟到了<code>fullTryAcquireShared</code>中去了，因为典型的情况下都是非重入地使用；</li>\\n<li>如果前2步都不对，那么就开始完整的<code>fullTryAcquireShared</code>，它将会处理之前的CAS失败，已经第二步没有处理好的读重入的情况；</li>\\n</ol>\\n<p>关于<code>fullTryAcquireShared</code>的更详细的逻辑，我觉得比较复杂，不太想深究，到此为止</p>\\n<p>最后回到<code>Sync</code>类最后2个方法：</p>\\n<ul>\\n<li><code>tryWriteLock</code>：和<code>tryAcquire</code>相比仅仅少了<code>writerShouldBlock</code></li>\\n<li><code>tryReadLock</code>：和<code>tryAcquire</code>相比仅仅少了<code>readerShouldBlock</code></li>\\n</ul>\\n<h5 id=\\\"readlock--writelock-in-reentrantreadwirtelock\\\">ReadLock & WriteLock in ReentrantReadWirteLock</h5>\\n<p>大致读下了上面的<code>Sync</code>之后，剩下的<code>ReadLock </code>& <code>WriteLock </code>其实就很简单了</p>\\n<pre><code class=\\\"hljs language-java\\\"><span class=\\\"hljs-keyword\\\">public</span> <span class=\\\"hljs-keyword\\\">static</span> <span class=\\\"hljs-keyword\\\">class</span> <span class=\\\"hljs-title class_\\\">ReadLock</span> <span class=\\\"hljs-keyword\\\">implements</span> <span class=\\\"hljs-title class_\\\">Lock</span>, java.io.Serializable {\\n    <span class=\\\"hljs-keyword\\\">private</span> <span class=\\\"hljs-keyword\\\">final</span> Sync sync;\\n    <span class=\\\"hljs-keyword\\\">protected</span> <span class=\\\"hljs-title function_\\\">ReadLock</span><span class=\\\"hljs-params\\\">(ReentrantReadWriteLock lock)</span> {\\n        sync = lock.sync;\\n    }\\n    <span class=\\\"hljs-keyword\\\">public</span> <span class=\\\"hljs-keyword\\\">void</span> <span class=\\\"hljs-title function_\\\">lock</span><span class=\\\"hljs-params\\\">()</span> {sync.acquireShared(<span class=\\\"hljs-number\\\">1</span>);}\\n    <span class=\\\"hljs-keyword\\\">public</span> <span class=\\\"hljs-type\\\">boolean</span> <span class=\\\"hljs-title function_\\\">tryLock</span><span class=\\\"hljs-params\\\">()</span> {<span class=\\\"hljs-keyword\\\">return</span> sync.tryReadLock();}\\n    <span class=\\\"hljs-keyword\\\">public</span> <span class=\\\"hljs-keyword\\\">void</span> <span class=\\\"hljs-title function_\\\">unlock</span><span class=\\\"hljs-params\\\">()</span> {sync.releaseShared(<span class=\\\"hljs-number\\\">1</span>);}\\n    \\n    <span class=\\\"hljs-comment\\\">// 其余release、中断acquire、超时、状态相关方法略</span>\\n}\\n\\n<span class=\\\"hljs-keyword\\\">public</span> <span class=\\\"hljs-keyword\\\">static</span> <span class=\\\"hljs-keyword\\\">class</span> <span class=\\\"hljs-title class_\\\">WriteLock</span> <span class=\\\"hljs-keyword\\\">implements</span> <span class=\\\"hljs-title class_\\\">Lock</span>, java.io.Serializable {\\n    <span class=\\\"hljs-keyword\\\">private</span> <span class=\\\"hljs-keyword\\\">final</span> Sync sync;\\n    <span class=\\\"hljs-keyword\\\">protected</span> <span class=\\\"hljs-title function_\\\">WriteLock</span><span class=\\\"hljs-params\\\">(ReentrantReadWriteLock lock)</span> {\\n        sync = lock.sync;\\n    }\\n    <span class=\\\"hljs-keyword\\\">public</span> <span class=\\\"hljs-keyword\\\">void</span> <span class=\\\"hljs-title function_\\\">lock</span><span class=\\\"hljs-params\\\">()</span> {sync.acquire(<span class=\\\"hljs-number\\\">1</span>);}\\n    <span class=\\\"hljs-keyword\\\">public</span> <span class=\\\"hljs-type\\\">boolean</span> <span class=\\\"hljs-title function_\\\">tryLock</span><span class=\\\"hljs-params\\\">()</span> {<span class=\\\"hljs-keyword\\\">return</span> sync.tryWriteLock();}\\n    <span class=\\\"hljs-keyword\\\">public</span> <span class=\\\"hljs-keyword\\\">void</span> <span class=\\\"hljs-title function_\\\">unlock</span><span class=\\\"hljs-params\\\">()</span> {sync.release(<span class=\\\"hljs-number\\\">1</span>);}\\n    \\n    <span class=\\\"hljs-comment\\\">// 其余release、中断acquire、超时、状态相关方法略</span>\\n}\\n</code></pre>\\n<h5 id=\\\"write-lock-degradation\\\">Write Lock Degradation</h5>\\n<p>虽然写锁在被某一个线程持有的时候，其他线程的读锁请求和写锁请求都会被阻塞，但是同一线程的读写锁请求是不会被阻塞的；</p>\\n<p>而读写锁中的<strong>锁降级</strong>是指：同一个线程在持有写锁的情况下，同时获取读锁，再释放写锁；</p>\\n<p>这样做是<strong>保证数据可见性</strong>，因为当A线程在持有写锁的时候，这时候其他线程的读写操请求都会被阻塞，这时候A线程再获取读锁然后释放写锁，那么在A线程持有读锁的情况下，A线程最后一次修改过的数据就对其他线程可见（其他线程的读请求会被唤醒）</p>\\n<pre><code class=\\\"hljs language-java\\\">readLock.unLock();\\nwriteLock.lock();\\n<span class=\\\"hljs-keyword\\\">try</span>{\\n    <span class=\\\"hljs-comment\\\">// update </span>\\n    data.update();\\n    readLock.lock();\\n} <span class=\\\"hljs-keyword\\\">finally</span> {\\n    writeLoce.unLock();\\n}\\n</code></pre>\\n<h3 id=\\\"conclusion\\\">Conclusion</h3>\\n<p>上一篇文章我们在分析<code>SynchronizedQueue</code>的时候同时也分析了共享式获取和释放等方法，这些方法就是就是给读写锁来实现写锁的</p>\\n<p>关于重入锁和读写锁的原理方面，我觉得要注意以下几点：</p>\\n<ol>\\n<li><code>Lock</code>接口、<code>AbstractSynchronizedQueue</code>的关系；</li>\\n<li>CAS更改State；</li>\\n<li>同步队列的原理<ol>\\n<li>结构；</li>\\n<li>自旋、等待；</li>\\n<li>共享式锁的<em><strong>Propagation</strong></em>；</li>\\n</ol>\\n</li>\\n<li>锁重入的过程；</li>\\n<li>公平/非公平的原理；</li>\\n<li>读锁写锁的工作流程于应用设计；</li>\\n<li>写锁的降级；</li>\\n</ol>\\n<p>虽然<em>《艺术》</em>书上没有关于读写锁的更多源码讲解，但是有了之前重入锁的讲解分析经历，还是能自己把读写锁的源码分析了一遍</p>\\n\";","export default \"<blockquote>\\n<p>转自：<a href=\\\"https://yaoxuannn.com/2017/12/12/%E5%AD%97%E7%AC%A6%E7%BC%96%E7%A0%81%E7%AC%94%E8%AE%B0/\\\">yaoxuannn-字符编码笔记</a></p>\\n</blockquote>\\n<p>想来想去终于决定写一个关于计算机字符编码的笔记了( 应该说终于愿意去学了..(๑•ᴗ•๑)), 原本的目的只是搞清楚Unicode的, 考虑到字符编码问题是一个有趣, 在开发中经常会遇到并且稍微有点麻烦和棘手的问题, 但是在网络上却很难找到将这个说的比较细致和成体系的文章, 所以我决定倾尽精力去写这篇笔记, 我会尽量的去查资料和参考他人的文章和博客, 将关于计算机编码的问题捣鼓清楚.</p>\\n<p>在笔记的后半部分, 我也会针对Python3的Unicode做一些说明, 并且当说到Unicode的时候, 我会尝试说明一些关于UTF-8 with BOM在Linux/Unix内核中的一些矛盾.</p>\\n<p><strong>关于我搜寻和参考的资料, 都会贴在文章的最后.</strong></p>\\n<blockquote>\\n<p>这个世界上没有纯文本, 如果你想要读出它, 就要知道它的编码.</p>\\n</blockquote>\\n<h1 id=\\\"基本概念\\\">基本概念</h1>\\n<p>首先我们要说明一些关于字符编码的基本概念, 有了这些概念的理解阅读后面的内容才不费劲~. 由于我默认将文章的受众定位成了有计算机科学基础的学生, 所以最基本的概念就直接一笔带过了.</p>\\n<h2 id=\\\"位\\\">位</h2>\\n<p>就是我们熟知的比特(Bit), 也是二进制位, 因此有0和1两个值. Bit是<code>Binary digit</code>的缩写.</p>\\n<p>是计算机用来表示信息的最小单位.</p>\\n<h2 id=\\\"字节-字-字长\\\">字节, 字, 字长</h2>\\n<p>将一连串的比特组合在一起, 就构成了<strong>位串</strong>. 由于一个位的表示能力有限, 所以我们更多的情况下使用的是<strong>特定长度的</strong>位串来表示信息. 为什么说是特定长度呢? 标准, 标准, 标准! 我们制定几种不同长度的位串, 来表示不同的信息, 比如说有:</p>\\n<ul>\\n<li>半字节(nibble, 使用<strong>4个比特</strong>, 我反正是没见过的..)</li>\\n<li>字节(byte, 使用<strong>8个比特</strong>, 是现代个人计算机的最小的存取和寻址单位)</li>\\n<li>字(WORD, 视具体操作系统位数决定字节数* 下面补充说明)</li>\\n<li>双字(DWORD, 视具体操作系统位数决定字节数)</li>\\n<li>四字(QWORD, 视具体操作系统的位数决定字节数)</li>\\n</ul>\\n<blockquote>\\n<p>补充一点, 关于字节的位数, 一般说来都是8个bit, 但是这也只是一个标准制定的而已, 其实过去也有非8位的字节标准. 在一些严谨的计算机文献中, 会使用八位组(Octet)来代替字节.</p>\\n</blockquote>\\n<p>刚刚就说了, 一个位的表示能力有限, 所以我们想到使用字节, 而对于最小单位的字节来说, 仍然不能充分发挥计算机的运算能力, 所以对于计算机来说, 更高效处理的单位长度其实是<strong>字</strong>的长度, 也就是<strong>字长</strong>. 这也就是上面说的视具体操作系统位数决定的. 其实这样说不精确, 甚至说不是很对. 因为字长实际上是<strong>由CPU对外的总线宽度决定</strong>的, 它决定了CPU一次处理的数据的实际比特位.</p>\\n<p>所以, 64位的CPU可以使用32位的操作系统, 但是这样不会发挥出它应有的性能.</p>\\n<h2 id=\\\"字符集\\\">字符集</h2>\\n<p>字符集, 其实就是一堆字符的集合, 包括各种文字, 数字, 字母, 音标, 标点符号, 图形等等. 将这些字符进行编号放在一起形成的序列, 就是字符集 (Charset) .</p>\\n<p>常见的字符集有</p>\\n<ul>\\n<li>ASCII</li>\\n<li>ISO8859-? 系列</li>\\n<li>GB(GB2312, GBK, GB18030)系列</li>\\n<li>BIG5</li>\\n<li>Unicode</li>\\n</ul>\\n<p>只有字符集没有什么卵用.</p>\\n<h2 id=\\\"编码解码\\\">编码&解码</h2>\\n<p>这个很好理解了,就是将信息从一种格式转换成为另外一种格式.</p>\\n<h2 id=\\\"字符编码\\\">字符编码</h2>\\n<p>编码, 刚刚说了, 就是格式之间的转换, 而计算机中的字符编码, 就是将字符转换(或者说映射)成为二进制数的过程. 这样, 我们就可以在计算机中方便的表示, 存储, 处理, 以及在网络中传输字符信息了.</p>\\n<p>这也是一种抽象.</p>\\n<h2 id=\\\"代码页\\\">代码页</h2>\\n<p>代码页 (code page), 真的是一个很迷的概念.主要是来源于IBM的字符数据表示体系结构. 经常是被理解成是字符集的别称, 但这是不对的. 维基百科给出的概念是:</p>\\n<blockquote>\\n<p>In <a href=\\\"https://en.wikipedia.org/wiki/Computing\\\">computing</a>, a <strong>code page</strong> is a table of values that describes the character set used for <a href=\\\"https://en.wikipedia.org/wiki/Character_encoding\\\">encoding</a> a particular set of <a href=\\\"https://en.wikipedia.org/wiki/Character_(computing)\\\">characters</a>, usually combined with a number of <a href=\\\"https://en.wikipedia.org/wiki/Control_character\\\">control characters</a>.</p>\\n</blockquote>\\n<p>大体翻译过来就是说是一个描述字符集的值表, 用于编码一组特定的字符(包含一些控制字符). 这么看来还真的就是字符集的意思.</p>\\n<p>但是仔细看一下, 它是在<strong>描述</strong>字符集, 就是说根据具体的情况, 代码页可能会对字符集做一定的扩展, 在早期计算机还没有出现图形界面的时候, IBM称呼BIOS所支持的字符集位代码页, 而由于该代码页是烧录在显卡上的, 所以也被称为是OEM代码页.</p>\\n<p>正因为此, 每个厂商有自己的代码页, 所以代码页也叫做”内码表”. 当我们想要知道一个二进制字节是什么字符的时候, 就要去根据系统设置的代码页去<strong>查表</strong>. 所以, 只有在操作系统的层面上, 我们才说代码页这个概念.</p>\\n<h2 id=\\\"字符编码模型\\\">字符编码模型</h2>\\n<p>这是一个极其重要的概念了, 模型的设计直接反应编码系统的组成结构和相关性. 例如, 在ASCII为代表的<strong>简单字符编码模型</strong>中, 刚刚所说的<strong>字符集</strong>和<strong>字符编码</strong>就是一个玩意, 没有什么区分.</p>\\n<p>而在我们后面将要隆重介绍的Unicode和UCS(通用字符集)中, 这个模型将会稍显复杂, 因为他会考虑很多内容.</p>\\n<blockquote>\\n<p>UCS其实就是ISO/IEC 10646标准, 全称是通用字符集. 和Unicode字符集保持同步和一致. 实际上这个标准就是Unicode联盟和ISO/IEC共同制定的. 因此UCS的具体实现就是Unicode的具体实现, 即UTF-8, UTF-16, UTF-32.</p>\\n</blockquote>\\n<p>在<a href=\\\"http://www.unicode.org/reports/tr17/\\\">Unicode技术报告#17</a>中, 描述了Unicode的字符编码模型. 报告中阐述和引入了巨多名词和概念, 我们慢慢展开.</p>\\n<p>先来说一下字符编码模型考虑的内容</p>\\n<ul>\\n<li>有哪些字符</li>\\n<li>字符编号是什么</li>\\n<li>如何将编号映射成逻辑序列, 即<strong>码元序列</strong></li>\\n<li>如何将码元序列转换成物理层面的字节流</li>\\n<li>在一些特殊或者复杂环境中, 如何将字节序列进行适应性的处理</li>\\n</ul>\\n<p>仔细思考一下, 就不难发现, <strong>现代字符编码模型</strong>和过去的简单字符编码模型不同的地方就是它更关注: <strong>通用</strong>, <strong>不同编码方式</strong> 这两点. 类似我们的<strong>解耦</strong>, 现代字符编码模型将字符集和字符编码方式进行了解耦, 使得更容易扩展, 更加通用, 一套字符集, 我们可以不同的编码方式进行处理. 也就是字符集和字符编码实现是一对多的形式.</p>\\n<p>根据上面所说的考虑内容, Unicode字符编码模型是这样分层(分级别)的:</p>\\n<ul>\\n<li><strong>级别一 抽象字符表ACR(Abstract Character Repertoire)：</strong>明确字符的范围(即确定支持哪些字符)</li>\\n<li><strong>级别二 编号字符集CCS(Coded Character Set)：</strong>用数字编号表示字符(即用数字给抽象字符表ACR中的字符进行编号)</li>\\n<li><strong>级别三 字符编码方式CEF(Character Encoding Form)：</strong>将字符编号编码为逻辑上的码元序列(即逻辑字符编码)</li>\\n<li><strong>级别四 字符编码模式CES(Character Encoding Scheme)：</strong>将逻辑上的码元序列映射为物理上的字节序列(即物理字符编码)</li>\\n</ul>\\n<blockquote>\\n<p>说一下, 这里知乎作者Jacky lin的文章中, 说是5层, 但是我看根据UTR中的说法, Unicode字符编码模型应该是四个级别, J所说的第五个层次TES, 应该只能算作是一个重要的概念.</p>\\n<p>报告的原文(第7版)摘几段:</p>\\n<p>The <strong>four</strong> levels of the Unicode Character Encoding Model can be summarized as:…</p>\\n<p><strong>In addition to the four individual levels</strong>, there are two other useful <strong>concepts</strong>:…<strong>TES</strong></p>\\n<p>However, <strong>four</strong> levels need to be defined to adequately cover the distinctions required for the Unicode character encoding model.</p>\\n<p>感觉无论怎么看, TES都不是算是模型的层次…</p>\\n</blockquote>\\n<p>现在我们慢慢展开说一下这四个等级.</p>\\n<h3 id=\\\"1-抽象字符表-acr\\\">1. 抽象字符表 ACR</h3>\\n<p>在这里, 我们通过定义<strong>抽象字符</strong>的无序集合来确定字符的范围. 字符表可以是<del><strong>封闭</strong></del>的, 也就是在制定时就决定了, 典型的例子是ASCII以及ISO8859系列, 而Unicode为了达到通用的目的, 提出设计<del><strong>开放</strong></del>的字符表, 也就是说, 我们可以随时添加新的字符到表中.</p>\\n<p>这里我们所说的抽象字符是不具有的<strong>字形</strong>的, 所以才说是抽象的.</p>\\n<p>稍稍总结一下ACR的三个特点: <strong>无序</strong>, <strong>封闭和开放</strong>, <strong>字符不具有具体的字形</strong>.</p>\\n<h3 id=\\\"2-编号字符集-ccs\\\">2. 编号字符集 CCS</h3>\\n<p>一个编号字符集定义成是从上面的抽象字符集合到非负整数集合的映射. 这些整数不一定要连续, ß我们把定义了整数的抽象字符的这个位置(想象一个表格的单元格)称为<strong>码点(code point)</strong>(暂时存个疑问), 所以这样就形成了一个<strong>编号空间(Code space, 也可以叫做码点空间)</strong>. 一个存在上限的有多种方式描述的非负整数范围. 例如, 我们可以通过一对非负整数: GB2312的汉字编号空间就是94 x 94. 也可以直接使用一个非负整数: ISO-8859-1的256, 或者也可以使用字符的存储单元尺寸, 比如ISO-8859-1的范围是2^8 = 256.</p>\\n<p>回到上面的码点这个概念, 并不是说码点的数量和抽象字符的数量(编号)是一致的, 这是因为在我们的CCS中, 还存在了非字符码点和保留码点. 不仅如此, 多个码点可能还对应这同一个字符, 比如: <code>\\\\u51c9</code>与<code>\\\\uf979</code>的这两个码点是同一个字符“凉”(<strong>注意, 这并不是不是汉字liáng, 这是一个字符.</strong>). 更多的例子可以在这里查询到: <a href=\\\"http://www.unicode.org/charts/PDF/UF900.pdf\\\">CJK兼容-F900-F921</a>. 还有, 例如上面的注音符号, 他就是由多个码点表示的, 由基本符号的a加上注音符号.</p>\\n<p>最后稍微注意, 这里我们说的是<strong>编号</strong>, 而非编码. 这是两个截然不同的概念. 其实这一步和计算机丁点关系都没有, 因为没有涉及到下面说的字符编码方式和字符编码模式.</p>\\n<h3 id=\\\"3-字符编码方式-cef\\\">3. 字符编码方式 CEF</h3>\\n<p>从这一步开始, 就开始进入到计算机的表示了. 我们知道常见的数据类型也就是单,双,四字节, 分别能够表示256, 65536, 4294967296个码位. 那么现在这一级别需要考虑的就是如何将无限扩展的(上面说了Unicode是开放的ACR, 也许现在就有新的emoji表情被添加到字符表中), 不仅如此, 过去诞生且正在使用的那些字符编码我们是抛弃不用(显然不可能), 还是向下兼容, 如果是兼容的话, 是完全兼容, 还是部分兼容 ?</p>\\n<p>这些问题的解决方案 就是我们的CEF了. CEF将字符集中字符的码点值转换成有限长度的编码值, 这个编码值就是之前提到的<strong>码元序列</strong>, 码元(code unit)就是这个序列的单位名称. 这里的转换也还没有这么具体, 只不过是逻辑上的方式.</p>\\n<p>对于ASCII这样的简单字符编码模型, 字符编码其实就是字符编号, 而它的编码方式就是简单的直接映射. 对于Unicode这样的现代复杂字符编码模型, 字符编号和字符编码并不一定相等, 而映射方式也不一定是直接的.</p>\\n<p>到这里你就更加清楚了, CEF其实就是字符编码标准的实现方式. 例如: UTF(Unicode/UCS Transformation Format)-8, UTF-16, UTF-32就是Unicode的编码方式.</p>\\n<p>上面的说法似曾相识吧! 很多博客, 网站都是这么说的. 其实也勉勉强强可以这么理解.</p>\\n<h3 id=\\\"4-字符编码模式-ces\\\">4. 字符编码模式 CES</h3>\\n<p>终于到了这一级别, 在这一个级别, 就会将物理层面上的具体实现纳入考虑. 包括对各种不同的硬件平台与操作系统设计上的差异考虑. 在这一层, 码元序列就会转换成为<strong>字节序列</strong>.</p>\\n<p>由于太具体了, 所以我们就把这一部分的内容丢到后面吧.</p>\\n<h1 id=\\\"历史的车轮--编码史\\\">历史的车轮 — 编码史</h1>\\n<p>最早最早, 我们的计算机仅仅是用来做数字运算的, 所以没有编码这回事. 后来人们发现可以使用计算机做更多的事情, 所以首先就是要想办法编码字符, 也就是使用二进制来表示字符. 所以在1963和1964年由IBM为大型机操作系统开发制定了一个编码标准, 类似ASCII, 叫做扩展二进制编码的十进制交换码 — (EBCDIC). 但是这个编码标准设计的太糟糕了, 就连英文字母都不是连续的, 造成很多困扰和麻烦. 所以在后来出现了个人计算机的时候, 大家都使用了ASCII编码标准.</p>\\n<blockquote>\\n<p>顺便说个笑话:</p>\\n<p>教授：”所以美国政府去IBM提出了一个加密标准，他们想出了…”</p>\\n<p>学生：“EBCDIC！”</p>\\n</blockquote>\\n<h2 id=\\\"ascii\\\">ASCII</h2>\\n<p>事实上, ASCII的标准制定工作比上面的EBCDIC的制定还要早一点, 它的第一版和EBCDIC同一年出版, 接着在1967年进行重大更新, 目前最新的修订发生在1986年.</p>\\n<p>ASCII的全称是美国信息交换标准码, 可以说是最基础、最重要、应用最广泛一个字符编码方案. 所以现在大部分的通行编码方案都兼容ASCII编码. 至于EBCDIC, 你看我连个二级标题都没给他…应该是凉了.</p>\\n<p>接下来我们来简单说说ASCII编码方案吧, 它使用八个比特位, 但实际上只有7位在用, 因为规定最高位始终置零(在某些场合用来做奇偶校验). 这样就应该可以表示128个字符, 对于English来说, 完全够了.</p>\\n<ul>\\n<li>0-31 都是控制字符和不可打印字符</li>\\n<li>32-126 是可打印可显示的字符 - 数字, 字母, 符号.</li>\\n<li>127 控制字符DEL.</li>\\n</ul>\\n<p>这里的转换很简单, 不存在什么编码算法, 也没有什么码元序列和字节序列的转换. ASCII字符集标准就是ISO/IEC-646标准.</p>\\n<h2 id=\\\"eascii\\\">EASCII</h2>\\n<p>渐渐地, 计算机从美国流传到了欧洲各国, 由于各种欧洲国家的语言中存在英语中不存在的一些字符, 例如一些衍生的拉丁字符, 所以他们就想要使用ASCII标准没有使用的最高位. 可是这样终究还是有限的 表示的字符数量变成了256个.</p>\\n<p>多出来的那128个就是最高位置1的结果, 表示出来的符号包括表格符号、计算符号、希腊字母和特殊的拉丁符号.</p>\\n<p>不过这一个标准也很少使用了, 这是因为后来ISO制定和发布了著名的ISO-8859系列标准.</p>\\n<h2 id=\\\"iso-8859\\\">ISO-8859</h2>\\n<p>这个和上面的两个就不一样了, ISO/IEC-8859是一套标准, 一共包含从ISO-8859-1到ISO-8859-16, 除去已经被废弃的ISO-8859-12, 总共有15个标准. 这些标准涵盖了欧洲各国使用的字符, 甚至包括一些外来语. 而且每一个具体的标准都只是用了扩展ASCII的<code>0xA0-0xFF</code>, 即160-255这96个编码.</p>\\n<h2 id=\\\"gb系列\\\">GB系列</h2>\\n<p>渐渐地, 计算机发展到了亚洲地区. 于是自然, 需要想个办法来表示这些亚洲地区文字. 以汉字为例, 汉字的表示和英语不同, 鉴于其表示的特殊性和复杂性, 中国相关部门设计了GB系列编码, GB就是国标的汉语拼音的缩写, 国家标准的意思. GB的编码规则向下兼容ASCII, 如果一个字节是0-127, 那么就字节的含义还是ASCII制定的含义. 但是当出现ASCII单字节和GB多字节混合使用的时候, 就要先将GB编码的最高位设置成1, 以防止冲突.</p>\\n<p>对了, <strong>凡是GB系列的编码, 都是符合ISO-8859标准的.</strong></p>\\n<h3 id=\\\"gb2312\\\">GB2312</h3>\\n<p>这是最早的中文国家标准, 诞生于1980年. 目前GB2312仍然被广泛使用, 它一共包括了6763个汉字, 还收录了包括拉丁字母、希腊字母、日文平假名及片假名字母、俄语西里尔字母在内的682个字符.GB2312-1980通过 这6763个汉字已经足够日常使用. GB2312的编码方法和EASCII类似, 都是使用ASCII不使用最高位, 它规定所有的汉字必须大于127, 然后<strong>必须</strong>和原本ASCII一起结合使用, 正因为此, 他不能兼容EASCII的扩展部分.</p>\\n<p>由于当时的计算机仍然是终端和文本模式的时代, 而每个字符都是一个小点阵, 占8个像素宽, 而汉字并不适合这样展示, 所以又出现了全角和半角的区别. 全角的标点符号和半角的标点符号在中文输入法下是一样的, 而在英文输入法中, 半角标点的宽度就是全角的一半大小. 关于全角半角, 我们在后面还会提到.</p>\\n<h3 id=\\\"gb13000--gbk\\\">GB13000 / GBK</h3>\\n<p>1993年, Unicode1.1标准(ISO/IEC 10646.1:1993)第一部分发布(关于Unicode和ISO10646的相关, 我们在后面会说), 随后中国就发布了新的国标: GB13000-1993. 这一个标准和前面的那两个相一致. 后来在2010年, 发布了替代标准GB13000-2010, 和ISO/IEC10646:2003保持一致</p>\\n<blockquote>\\n<p>不知道为什么, 感觉GB13000的资料好少. 搜不到什么相关信息</p>\\n</blockquote>\\n<p>由于汉字的数量实在是太庞大了, 而一些人名, 古汉语, 生僻字都没有被包括在GB2312标准中, 所以同一年(1993), GBK, (即国家标准扩展的汉语拼音缩写)被定义, 尽管这个时候这并不是官方的标准, 但微软已经在Windows 95中实现了GBK的代码页(cp936). 由于Windows的广泛使用, 使得GBK成为了当时的事实标准. 于是, 在1995年, 国家发布GBK1.0规范, 对于cp936做了轻微的扩展. 但是目前的状态是, cp936就等同于GBK, 尽管GBK比cp936多出95个字符. IANA也把cp936作为GBK的别名.</p>\\n<p>GBK不同于GB2312, 汉字依然从127开始, 但是不要求使用原来的ASCII的比特位, 这样才能表示更多的字符.</p>\\n<h3 id=\\\"gb18030\\\">GB18030</h3>\\n<p>这个是目前最新的国家标准, 制定于2000年, 以取代GBK.在2005年, 国家对GB18030进行了补充, 在GBK的基础上增加了CJK.</p>\\n<p>微软也对GB18030制定了代码页(CP54936), 不过, 在(Windows7)系统的设置中并不能找到这个代码页, 只不过在Command Line中可以进行切换.</p>\\n<h3 id=\\\"gb系列的编码方式以gb2312为例\\\">GB系列的编码方式(以GB2312为例)</h3>\\n<p>首先我们明确, GB系列的汉字编码都是双字节编码, 也就是1个汉字相当于是2个英文字符.</p>\\n<p>接下来, 开始了. <strong>高迷预警.</strong></p>\\n<p>我们要先来说几个概念, 再逐渐引入这些概念的过程中, 就来解释GB2312的编码.</p>\\n<ul>\\n<li>区位码</li>\\n<li>国标码</li>\\n<li>内码</li>\\n<li>外码</li>\\n<li>字形码</li>\\n</ul>\\n<p>就直接从上到下说吧, 对于GB2312字符集, 我们把它分成94个区, 至于为什么是94个区, 是因为GB2312是7位双字节编码, 也就是<code>128*128</code>, 由于需要避开ASCII的控制字符和空格(至于为什么后面再解释), 所以就只剩下了<code>94*94</code>了. 结合上面所说的概念 — 编号空间, 码点空间. 这个<code>94*94</code>的空间就是GB2312的编号空间了. 这样就可以通过一个横坐标一个纵坐标来唯一定位一个点, 这个横坐标就是<strong>区</strong>, 纵坐标就是<strong>位</strong>, 加在一起就是<strong>区位码</strong>. 这样说有点抽象. 其实, 高位字节就是这里的横坐标, 而低位字节就是纵坐标. 举个例子, 汉字字符: “万” 它的区位码是45 82, 所以45就代表高字节, 而82就代表低位字节.</p>\\n<p>在GB2312中, 是这样分区的:</p>\\n<p>1）01~09区(682个): 特殊符号、数字、英文字符、制表符等，包括拉丁字母、希腊字母、日文平假名及片假名字母、俄语西里尔字母等在内的682个全角字符.</p>\\n<p>2）16~55区(3755个): 常用汉字(也称一级汉字), 按拼音排序</p>\\n<p>3）56~87区(3008个): 非常用汉字(也称二级汉字), 按部首/笔画排序</p>\\n<p>剩余的都是空区, 留作扩展.</p>\\n<p>你可能这个时候做了实验, 但是发现”万”好像并不是<code>45 82</code>, 而是<code>cd f2</code>. 这个继续往下看就知道了.</p>\\n<p>接下来回到刚刚说的, GB2312避开了ASCII的控制字符以及空格(从0H-20H, 0-32), 所以就导致整个编码开始于21H, 也就是10进制的33.</p>\\n<blockquote>\\n<p>注意: 这里我为了简便, 略了另外一个字节, 正确的表示应该是(21H,21H)这样的, 因为双字节编码, 下同.</p>\\n</blockquote>\\n<p>因此, 我们的编码就必须向后移动20H的位置(至于为什么要避开, 后面再说, 先别急), 即范围是从(21H, 21H)到(7E, 7E). 这样就进行了区位码到<strong>国际码</strong>的转换. 国际码又称作交换码, 那么还是用之前的”万”来做例子, “万”的国际码就是<code>77 114</code>, 也就是十六进制的<code>4d 72</code>.</p>\\n<p>说道这里, 可能敏感的你已经发现了, 第一: <code>4d 72</code>和之前的<code>cd f2</code>还是不对应, 第二: <code>77 114</code>和ASCII已存在的字符发生了冲突, 例如, 这就和<code>M, r</code>发生了冲突. 所以这个国际码并不能直接拿来用. 那咋办? 我们之前就说过了, 把ASCII没使用的最高位置1就行了, 即<strong>加上128, 80H</strong>.</p>\\n<blockquote>\\n<p>值得一提的是, 这里的加上80H, 是微软提出的解决方案. 本质上他是改变了GB2312的编码方式. GB2312真正的规范编码, 到这里就结束了 — 国际码就是GB2312的规范编码.</p>\\n</blockquote>\\n<p>这个时候”万”的GB2312编码就变成了之前的<code>cd f2</code>了, 我们把这个最后的编码叫做<strong>内码</strong>. 意思就是计算机内部使用的编码.</p>\\n<p>现在我们就解释了GB系列的编码方式, 接下来就来回答一下上面的疑问: 为什么要避开那20H个. 说来也简单, 其实上面也已经解释了, 原本我们可以直接保留所有的ASCII编码的, 也就是直接从128开始编码, 但是考虑到全角和半角的英文字符, 所以GB2312就把这些重新进行编码加入到双字节编码的队列中. 而不可打印的控制字符, 也就是那20H, 32个就进行了保留, 这就是避开的原因.</p>\\n<p>最后我们再把外码和字形码说一下: 最简单的理解方式, 我们再输入的时候使用的代码就是<strong>外码</strong>, 例如五笔输入法, 拼音输入法这些, 规定的代码就是外码. 而<strong>字形码</strong>可以简单的理解成是我们的字体, 也即是具体的<strong>显示形状</strong>.</p>\\n<h2 id=\\\"big5\\\">Big5</h2>\\n<p>1984年策划制定, 主要用于台湾地区, 用于繁体汉字的显示, 可以读作大五码. 名字来自于台湾五家公司的财团.</p>\\n<p>这个就不展开说了, 他定义的汉字数量真的好少…好像还需要各种奇怪的扩展才能满足需要.</p>\\n<blockquote>\\n<p><strong>ANSI</strong></p>\\n<p>我们在这里扩展一下, 说一下这个玩意. 在我们使用Windows的notepad的时候, 默认的存储编码方式是<code>ANSI</code>. 这是个什么玩意? 严格的说, 这不是一个编码方式, ANSI是美国国家标准协会的缩写. 它规定了各国字符编码对应的代码页标准, 例如我们在之前的概念中说过, GB系列的编码方式在Win中就是CP943, 当然这是指简体中文系统, 而繁体中文的Windows中, ANSI就对应Big5的代码页, 这就是说, 即使你们都是ANSI编码, 但不一定你们对应的文件编码是一致的.</p>\\n<p>所以, 你也可以不严谨的说: ANSI是系统的默认编码方式, 不过这个也是会依靠系统语言而改变的. 另外只有Windows中存在这样的说法.</p>\\n</blockquote>\\n<h2 id=\\\"unicode\\\">Unicode</h2>\\n<p>由于各个国家, 各个地区的编码方式都不一样, 于是我们自然就会想, 如果能有一种编码标准能够收纳全世界的语言, 每一个字符全球都使用那独一无二的一个就好了. 于是, 统一编码标准 - Unicode就横空出世了.</p>\\n<p>Unicode到底代表什么, 根据不同的上下文环境, 代指不同的东西. 不过很多的时候都会发生概念的误用. 如果说直接定义Unicode的话, 他应该是个<strong>编码标准</strong>. 而在这个标准定义的字符集, 就是Unicode字符集. 接下就可能引起大家困扰的Unicode标准和ISO/IEC-10646标准, 我们来理一下他们的关系.</p>\\n<p>最初最初, 在1989年ISO策划搞一个通用字符集, 并且这个通用字符集就在1990年出版了, 这就是ISO10646的最早版本, 但是这个标准和现在的ISO10646存在明显的不一样. 而在同一年, Unicode也是存在的,只不过尚未正式出版. 而软件公司拒绝接受ISO复杂的设定和限制, 要求一些国家机构进行投票反对. 所以ISO的制定者们意识到, 需要和Unicode进行协商统一. 后来Unicode联盟和国际标准化组织就在1991年联合开发并且发布了Unicode1.0.0标准, 最初的标准中并不包含中文, 接着在次年定义了2w余个CJK中日韩表意字符(1.0.1), 到这里Unicode标准和UCS标准并没有严格意义上的对应. 而到了1993年, Unicode1.1标准发布并且和ISO/IEC-10646-1:1993保持了基本的一致, 而到了Unicode2.0发布的时候, 它的字符名称和代码点已经和ISO/IEC-10646:1993的前七个修订版完全匹配. 至此之后, Unicode标准和ISO/IEC-10646标准拥有近乎是一样的字符集, 并且大致同步. 今年(2017年)6月份, Unicode第10个版本发布, 相对应的ISO-10646:2017.</p>\\n<p>目前, 两个项目都依然存在, 但统一码联盟Unicode Consortium和ISO/IEC都同意保持两者的通用字符集相互兼容, 并共同调整未来的任何扩展.</p>\\n<p>接下来我们就来解释下, Unicode的字符集是怎么涵盖目前人类所使用的全部字符的.</p>\\n<p>Unicode一共设置了17个平面(Plane), 从0-16, 每一个平面上都有2^16=65536个码点, 而我们平常所使用的大部分字符, 都定义在第0个平面上, 这个平面叫做: BMP(Basic Multilingual Plane, 基本多语言平面). 除此之外, 其他的16个平面都是增补性质的, 一些象形文字, 埃及文字, 表情游戏符号(emoji, 扑克牌, 麻将, 多米诺骨牌)等等.</p>\\n<p>在基本的BMP平面中, 有一部分用来是保留的范围, 这一段从0xE000~0xF8FF, 一共有6400个码点, 被定义成是私有区(Private use zone).</p>\\n<table>\\n<thead>\\n<tr>\\n<th>Plane 0</th>\\n<th>Plane 1</th>\\n<th>Plane 2</th>\\n<th>Planes 3–13</th>\\n<th>Plane 14</th>\\n<th>Planes 15–16</th>\\n</tr>\\n</thead>\\n<tbody><tr>\\n<td>0000–FFFF</td>\\n<td>10000–1FFFF</td>\\n<td>20000–2FFFF</td>\\n<td>30000–DFFFF</td>\\n<td>E0000–EFFFF</td>\\n<td>F0000–10FFFF</td>\\n</tr>\\n</tbody></table>\\n<p>上面的表格就是各个平面的码点范围.</p>\\n<p>我们着重关注的其实就是Plane 0, 也就是上面刚刚说的BMP.</p>\\n<p>最早, Unicode字符编码是双字节编码也就是16位, 这个其实就是我们后面要说的UTF-16, 等说到了的时候再解释吧. 这样当在考虑原先的ASCII编码的时候, 为了考虑兼容(其实UTF-16也没有很好的兼容, 这个后面再说)于是就保持和它的原来的<strong>编号</strong>不变, 只不过在<strong>编码</strong>上, 将原来的8位扩展到了16位, 但是我们知道ASCII字符只需要用到UTF-16的16位编码中的低8位, 所以其高8位永远是0, 实际上也只用到了低8位中的低7位，因此准确地说其高9位永远是0.</p>\\n<p>注意到我刚刚才说的是编号一致, 其实对于ASCII这样的传统字符编码模型, 我们可以同时使用编号和编码的, 他们没有什么大的区别.</p>\\n<p>ASCII还好办, 毕竟是8位编码, 但是对于中文就麻烦了, GB系列的标准本身就是双字节编码, 所以就没法提供一个算法进行互相转换. 其实ASCII码也不能说是兼容了, 这种解决方法也是不完全的.</p>\\n<p>Unicode给每一个码点都编了一个唯一的字符编号(码点编号), 并且在表示这个的时候, 在前面加上一个<code>U+</code>.</p>\\n<p>我们回到之前说的UCS字符集, 这个玩意其实有两个组成: UCS-2和UCS-4, 他们分别定义2字节和4字节的码点编号, 其中UCS-2和我们的BMP是对应关系, 它们保持一致. <strong>注意: UCS-2和UCS-4不是字符编码方式, 也不能把他们和UTF-16和UTF-32画等号, UCS和Unicode字符集一样, 也是可以使用多种方式对字符编号进行编码的.</strong></p>\\n<p>再说到具体的编码方式之前, 我们要先来说一个超级重要的概念 — <strong>字节序</strong></p>\\n<h3 id=\\\"字节序\\\">字节序</h3>\\n<p>字节序, Byte-order. 或者叫做<code>Endianness</code>, 翻译过来是端序, 在1980年短语<code>Big-endian</code>和<code>Little-endian</code>第一次出现, 来表示异构计算机之间的通信和交换数据的重要概念, 在现代网络中, 字节序也是一个十分重要的概念.</p>\\n<p>简单来说, 字节序就是规定多字节数据在计算机存储, 读取的时候的各个字节的排列顺序. 我们也可以把字节序称为端序, <strong>“端”</strong>就是指多字节数据的两边(端)字节, 一般情况下, 我们人读取数据是从左边往右边, 或者是从上到下, 这就是从大端到小端, 从高位到低位, 而对于内存地址而言, 从左到右, 从上到下, 就是从低位地址到高位地址. 这都是几乎确定的.</p>\\n<p>我们要先解释一下, 上面这一段其实解释的很迷(SO SORRY, 我的极限语言表达能力). 所谓大端, 其实就是指代更大属主的那一端, 而小端自然就是更小的那一边.</p>\\n<p>那么接下里, 我们就可以引入UTF中两个令人迷惑的概念了: <strong>大端序</strong>和<strong>小端序</strong>(其实还有一个<strong>中间序</strong>, 不过使用的不多).</p>\\n<p>大端序就是指按照我们正常的读写顺序(即刚刚说的从左到右, 从上到下), 正好大端在<strong>前面</strong>(也就是左或上). 而小端序就是说按照我们正常的读写顺序, 正好小端在<strong>前面</strong>.</p>\\n<p>其实说到底, 如果我们的计算机是按照字节为单位来处理数据的话, 就不存在这么复杂的概念了, 因为处理数据的单位是单个字节, 有什么大端小端关系? 当然也是没有什么顺序的了. 但是问题就是计算机处理数据是按照数据类型来的, 而这些数据类型是多字节数据类型, 而一旦把多个单字节当做一个整体处理, 就必定会牵扯到排列顺序的问题.</p>\\n<p>那么现在就来具体的说一下大端序和小端序吧:</p>\\n<h4 id=\\\"大端序\\\">大端序</h4>\\n<p><img src=\\\"https://upload.wikimedia.org/wikipedia/commons/thumb/5/54/Big-Endian.svg/560px-Big-Endian.svg.png\\\" alt=\\\"大端序\\\"></p>\\n<p>看图就觉得很清晰, 而且很符合正常的读写习惯, 也即是按照顺序把字节填充进去.</p>\\n<h4 id=\\\"小端序\\\">小端序</h4>\\n<p><img src=\\\"https://upload.wikimedia.org/wikipedia/commons/thumb/e/ed/Little-Endian.svg/560px-Little-Endian.svg.png\\\" alt=\\\"小端序\\\"></p>\\n<p>小端序就是反过来的, 字节头位于内存地址的高位, 而尾部位于低位.</p>\\n<h4 id=\\\"中端序\\\">中端序</h4>\\n<p>中端序也称为是混合序, 其实就是像这样的:\\n<img src=\\\"https://pic4.zhimg.com/50/v2-099eb9b3df42395ee58ed21599e7f616_hd.jpg\\\" alt=\\\"混合序\\\"></p>\\n<p>而具体是什么序, 取决于软件层面操作系统和硬件层面的CPU. 一般来说, 大部分的操作系统(NT, Linux)都是小端序的, 而且Intel X86架构的CPU也都是小端序的, 但例如Power PC这样的架构就是大端序的, 而且Mac OS X也是大端序的.</p>\\n<p>这样的话, 就很麻烦, 尤其是对于那些设计系统的工程师, 以及一些做跨平台, 异构应用的编写人员就不可避免的考虑到字节序的问题.</p>\\n<h3 id=\\\"unicode的cef\\\">Unicode的CEF</h3>\\n<p>由于Unicode是这篇文章的一个侧重点, 而且Unicode比较复杂, 所以我们就单独开一个小节, 来介绍他的CEF选择和实现方案.</p>\\n<p>回过头来看看Unicode的平面(Plane)表, 其中定义了很多<strong>码点</strong>, 另外我们再之前的Unicode编码模型中说了, CEF就是将字符编号转换成为<strong>码元序列</strong>的方式. 在具体的说大家熟知的UTF之前我们来较为深入的重新看下这两个概念, 顺便再复习一下, 这样就更容易理解UTF的设计啦.</p>\\n<p>我们说在一个编号空间中, 码点就是那个横纵坐标相交的那个点, 通过这个唯一的坐标对来表示, 这个坐标对就是这个码点所对应的字符编号(除了字符码点还有别的, 对于他们就不能这么说了, 但是这样表述比较直接), 然后Unicode在这些字符编号面加上了个<code>U+</code>来声明这是一个Unicode码点, 17个平面, 每个平面有65535个码点 这样就是一共1114112个码点. 另外最长的甚至需要21位二进制来表示, 也就是用三个字节以上来表示.</p>\\n<p>那么在计算机中, 码点需要转换成为码元. 这样才可以在计算机存储以及网络中传输, 怎么来理解码元呢? 就像是我们编程语言中的数据类型, 或者是汇编语言中的WORD, DWORD这些. 所以当然, 我们的码元在机器中也存在单字节和多字节的类型的, 而就像上面说的, 多字节就存在一个关于字节序的问题, 这也就是为啥我们要强调这个码元的原因.</p>\\n<p>就像基本的数据类型: BYTE, WORD, DWORD一样, 我们的码元类型也就分成这些: 对应上面的这三个, 分别有单字节, 2字节和4字节的码元. 是不是想到什么了? 没错, 这三种码元类型就对应UTF-8, UTF-16, UTF-32这三种<code>Unicode Transform Form</code>, 也就是<strong>Unicode码转换格式</strong>, 你也可以把这个叫做<code>UCS Transform Form</code>, 即通用字符集转换格式\\u0001. 说到这里你就明白了, 所谓Unicode的CEF, 其实就是选择了一个类型的码元来编码.</p>\\n<p>至于具体是怎么样进行编码的, 我们在下面一个部分来说. (以UTF-8为重点, 毕竟使用最为广泛, 至于UTF-32暂不讨论)</p>\\n<p>你可能会说, 我还听说过<code>UTF-7</code>, <code>UTF-1</code>这些, 怎么上面没有提到呢? 实际上, <code>UTF-1</code>其实就是<code>UTF-8</code>的退役前身. 目前已经不再是Unicode的标准, 而<code>UTF-7</code>是为了电子邮件而设计的, 目前是<code>deprecated</code>的状态, 不再是Unicode的标准, 作为信息RFC存在.</p>\\n<h4 id=\\\"utf-8和本不应存在的bom\\\">UTF-8和本不应存在的BOM</h4>\\n<p><img src=\\\"http://q4fo85yz7.bkt.gdipper.com/utf-8_web_growth.png\\\" alt=\\\"utf-8_web_growth.png\\\"></p>\\n<p>先来看一下UTF-8在前几年的增长势头(Web页面, 由Google统计).</p>\\n<p>UTF-8在目前仍然是最广泛使用的具体编码方案, 但他却不是UTF最早的, 最早的是UTF-16. 最标准的称呼方法应该是<code>UTF-8</code>, 在一些不区分大小写的语言中, 例如: <code>HTML</code>, <code>CSS</code>, <code>XML</code>等, 都可使用<code>utf-8</code>这样的说法. 但是<code>utf8</code>或者<code>UTF8</code>这样缺失连字符的说法不被认为是正确的, 一些现代的浏览器或者是一些相关的标准(<code>HTML5</code>比如) 也可以有效的识别 但最好还是使用标准名称.</p>\\n<p>接下来步入正题, 我们来说说UTF-8的一些组成和特性.</p>\\n<p>其实我们刚刚提到了先出现的UTF-16, 那为啥没有坚持使用下去呢, 为啥要重新设计一个UTF-8呢? 这是因为UTF-16的编码方式采用双字节编码, 导致原来的ASCII编码都要变成双字节, 从而导致存储和效率低下, 其实这也没什么, 更严重的问题是C语言在解析文本的时候, 由于将高位的<code>0x00</code>解析成字符串结尾导致问题频频出现, 这就使得Unicode的推行遇到问题, 从而重新设计了UTF-8</p>\\n<p>UTF-8使用单字节编码, 可变长或者不定长的码元序列. 所以在使用UTF-8对ASCII字符集进行编码的时候, 是<strong>透明</strong>的. 这既是它的第一个特性. 不仅如此, 由于UTF-8在表示非ASCII字符的时候使用多个单字节码元来构成码元序列, 从而可以很好的进行兼容. 再加上单字符编码节省空间, UTF-8很快就收到了推崇.</p>\\n<p>另外我们说, UTF-8的编码空间远远大于UTF-16. (这里的编码空间和之前的Code Space是两个层次的概念, 我们现在在探讨CEF, 别忘记了) 至于为啥, 我们再具体的阐述UTF-8的编码算法的时候再说.</p>\\n<p>现在站在高层想一想, 现在知道UTF-8是变长编码的, 那么一个很明显的缺点就是: 我们无法轻易的得知一段文本的字符数量, 同样, 对这一段文本的索引也会成为一个比较棘手的问题.</p>\\n<p>好了, 接下来我们就来拓展之前的字节序这个话题. 我们都已经知道UTF-8是单字节编码, 那么按理说是不存在字节序这个问题的呀? 这个问题我们会在后面探讨, 姑且就先默认, 来看一下Unicode是怎么解决字节序这个问题的.</p>\\n<p>Unicode/UCS标准规定, 使用一个叫做字节序标记(Byte-Order Mark, BOM)的东西来进行规范, 在文本的开头加上一个不占宽度的’’标记’’, 这样一来这个标记就会具有以下的三个基本作用:</p>\\n<ul>\\n<li>文本流是使用什么字节序(或者说端序)存储的.</li>\\n<li>以一种高可信度来说明文本流是遵循Unicode标准编码的.</li>\\n<li>该文本流是使用哪一个Unicode编码来进行编码的.</li>\\n</ul>\\n<p>有关于这个标记的具体内容, 其实大家可能都见过的: <code>U+FEFF</code>. 至于为啥是这个, 我们还是要先保留一下.</p>\\n<blockquote>\\n<p>补充一下, 在旧版本(Unicode 3.2)之前, 这个<code>U+FEFF</code>还有一个名字叫做零宽度不中断空格(ZERO WIDTH NO-BREAK SPACE) 也就是说, 如果在文本中(而原本应该出现在文档流头部的)出现了这个字符, 就会将其视作成一个不产生任何空间占用的(这里的空间是说字符和字符之间的间隙), 不允许换行的特殊字符. 但是, 在新版本(3.2)的Unicode 标准中, 这个名称不再被建议使用. 而是由另外一个新的名词来代替: word joiner(怎么翻译啊..词连接器吧) 具体的码点值是: <code>U+2060</code></p>\\n</blockquote>\\n<p>那么怎么表示文本流的字节序是大端序还是小端序呢? 使用下面的声明方式:</p>\\n<ul>\\n<li>0xFE 0xFF =&gt; UTF-16 大端序</li>\\n<li>0xFF 0xFE =&gt; UTF-16 小端序</li>\\n<li>0x00 0x00 0xFE 0xFF =&gt; UTF-32 大端序</li>\\n<li>0xFF 0xFE 0x00 0x00 =&gt; UTF-32 小端序</li>\\n</ul>\\n<p>那么UTF-8呢? BOM对于UTF-8的表现形式是: <code>0xEF 0xBB 0xBF</code>. 但是我们知道UTF-8采用单字节编码, 应该是不需要这个东西的, 那为什么还有这个呢? 说道这个话题可能就要扯的远了一点. 首先我们要明确的是, BOM对于UTF-8只有一种作用, 那就是声明这一段文本是使用UTF-8编码的. Unicode标准允许UTF-8出现BOM, 但是不推荐使用. 在某些情况下(尤其是类Unix系统下), 很多程序会因为文本头部的这一段而解析错误.</p>\\n<p>在这里插一下我在网上搜集到的, 关于为什么UTF-8和BOM的一些相关:</p>\\n<blockquote>\\n<p>在之前说道代码页这个概念的时候, 还有ANSI的设定, 我们都可以看出来微软的操作系统-Windows的一些设计思想.</p>\\n<p>Windows强调一个很重要的东西 — <strong>兼容性</strong>.而且对兼容性的支持到了一个很执着的地步. 很多人说Windows为啥就不能使用Unicode编码呢? 事实上是, Windows的内核就是UTF-16编码写的, 也就是说, 整个内核态全部都是默认使用Unicode. 但是微软控制不了用户态运行的各个应用程序, 总不能强制要求所有的开发者使用Unicode编码吧. 因此他就使用了两种不同的编码方式, 即Unicode和Code page. 这样, 当程序和不支持Unicode的程序进行交互的时候, 就会使用到Code page了. 此时才会回到我们之前说的缺省代码页的问题.</p>\\n<p>(所以说你们也别老说人家微软了…为了兼容真的好麻烦的) 这里才开始正经的说UTF-8和BOM. 前面只是为了说一下微软对Unicode态度.</p>\\n<p>从Windows的API中其实就可以看出来一点, 比如<code>CreateFile</code>, 就会自动识别并把BOM剔除. 所以UTF-8 with BOM对于Windows来说不是那么影响, 反而, 为了达到兼容的目的, 加上BOM这么一个trick还是挺合理的, 尽管使用字节序标记作为识别头部并不是很优雅.</p>\\n<p>而且, 前面也说过了, Windows原生支持的是UTF-16, 因此就算是为了自己和自己兼容, 他也是需要BOM这个东西的.</p>\\n<p>但是对于Unix来说就不是这么回事了. 这个我们放在后面说.</p>\\n</blockquote>\\n<p>接下来就来具体的说一下UTF-8的编码方式吧.</p>\\n<p>先来解决一个重要的问题: UTF-8的变长编码, 我怎么知道接下来的长度是多少? 那就是, 通过<strong>首字节</strong>来判断.</p>\\n<ul>\\n<li>如果首字节以0开头，肯定是单字节编码(即单个单字节码元)；</li>\\n<li>如果首字节以110开头，肯定是双字节编码(即由两个单字节码元所组成的双码元序列)；</li>\\n<li>如果首字节以1110开头，肯定是三字节编码(即由三个单字节码元所组成的三码元序列)，以此类推。</li>\\n</ul>\\n<p>使用这样的规律来进行. 提问! 仅仅按照这样的规律, 有没有发现什么问题呀?</p>\\n<p>是了, 最大的问题就在于, 如果在多字节的情况下第二个字节或者后续字节仍然是110/1110这样开头, 那不是乱套了吗. 所以, 规定后续字节均使用10开头.</p>\\n<p>上面的四个前缀(0/10/110/1110)的每一个0, 就是前缀码的终结标志. 另外考虑到单字节的情况, 前缀码0和ASCII字符集的设定完全相符, 真是巧妙.</p>\\n<p>这样, 将前缀码全部剔除掉之后的剩余的内容, 就是Unicode码点值了. 如果难以理解, 请看这样的例子:</p>\\n<pre><code>s = &quot;屎&quot;s.encode(&quot;unicode-escape&quot;)# b&#x27;\\\\\\\\u5c4e&#x27;s.encode(&quot;utf-8&quot;)# b&#x27;\\\\xe5\\\\xb1\\\\x8e&#x27;\\n</code></pre>\\n<p>通过<code>unicode-escape</code>我们可以得到码点值, 通过<code>utf-8</code>我们可以得到UTF-8编码拿到的具体的字节序列.</p>\\n<p>接下来分析一波:</p>\\n<p>我们先把得到的字节序列写成二进制:</p>\\n<pre><code>e51110 0101 =&gt; 1110 表示由三个字节组成, 剔除掉之后是 0101b11011 0001 =&gt; 剔除10, 得到 1100 018e1000 1110 =&gt; 剔除10, 得到 00 1110\\n</code></pre>\\n<p>接着我们看一下码点的值:</p>\\n<pre><code>5c0101 11004e0100 1110\\n</code></pre>\\n<p>OK! 我们来吧剔除之后的比特拼起来:</p>\\n<pre><code>0101 1100 0100 1110\\n</code></pre>\\n<p>和码点对比, 当当当! 恭喜你得到了<strong>屎</strong>!</p>\\n<h4 id=\\\"utf-16\\\">UTF-16</h4>\\n<p>略 ( 而且UTF-16的编码算法还是挺复杂的… )</p>\\n<h3 id=\\\"bom和unix的矛盾\\\">BOM和Unix的矛盾</h3>\\n<p>在Windows上, BOM的加入可以解决很多问题, 但是在Unix上确是一个很矛盾和麻烦的东西. 没错, Unix/Linux是原生支持UTF-8的, 这里的UTF-8是说<strong>标准UTF-8</strong>, 也就是不携带BOM的UTF-8.</p>\\n<p>熟悉Linux的朋友都知道, Linux的设计哲学中有这样的: “<strong>一切文档中的数据都可见</strong>“. 从Shell解析的<code>#!</code>幻数设定就看的出来. 而BOM的到来使得很多Unix程序都傻眼了, 他们自己明明都添加了对BOM的支持, 但是却因为BOM的加入, 使得Shell的<code>#!</code>失效了(因为这个幻数必须放在文档的头部). 这样还没到自己处理, 在Shell这里就卡住了. 很多解释器对于编码类型都有他们自己的声明:</p>\\n<ul>\\n<li><code>-*- coding: utf-8 —</code> Python</li>\\n<li><code>use utf-8</code> Perl</li>\\n</ul>\\n<p>等等, 看上去这样的处理都比加上一个不可见的BOM头部要可靠和合理的多</p>\\n<p>另外, BOM的加入对于文本流式的处理变得麻烦, Linux是很强调<strong>流</strong>这个概念的.</p>\\n<p>一个最典型的例子, 在Windows上使用notepad默认编码编写的C源程序, 在Mac OS X或者Linux/Unix上使用gcc去编译的时候, 会因为出现非法字符而编译失败.</p>\\n<h1 id=\\\"参考资料\\\">参考资料</h1>\\n<p>以下是(部分)参考资料:</p>\\n<p><a href=\\\"https://baike.baidu.com/item/%E5%8C%BA%E4%BD%8D%E7%A0%81/11027286\\\">百度百科-区位码</a> 区位码\\n<a href=\\\"https://en.wikipedia.org/wiki/Character_encoding\\\">Wikipedia-Character_encoding</a> 字符编码\\n<a href=\\\"https://en.wikipedia.org/wiki/EBCDIC\\\">Wikipedia-EBCDIC</a> EBCDIC编码标准\\n<a href=\\\"https://en.wikipedia.org/wiki/Unicode#History\\\">Wikipedia-Unicode-历史</a> Unicode发展历史\\n<a href=\\\"https://en.wikipedia.org/wiki/Universal_Coded_Character_Set#History\\\">Wikipedia-UCS-历史</a> UCS历史\\n<a href=\\\"https://en.wikipedia.org/wiki/Endianness\\\">Wikipedia-Endianness</a> 字节序\\n<a href=\\\"https://en.wikipedia.org/wiki/Byte_order_mark\\\">Wikipedia-Byte_order_mark</a> 字节序标记\\n<a href=\\\"https://en.wikipedia.org/wiki/Word-joiner\\\">Wikipedia-Word-joiner</a>\\n<a href=\\\"http://www.unicode.org/reports/tr17/\\\">UTR#17</a> Unicode技术报告 #17 — Unicode字符编码模型\\n<a href=\\\"http://www.chi2ko.com/tool/CJK.htm\\\">中日韩Unicode对照表</a> 这个页面会渲染个几秒钟, 浏览器可能会卡\\n<a href=\\\"http://www.unicode.org/charts/PDF/UF900.pdf\\\">CJK兼容表-F900-F921</a>\\n<a href=\\\"https://zhuanlan.zhihu.com/p/27012715\\\">知乎专刊-刨根究底字符编码</a> 这篇笔记的主要参考来源以及结构组织来源, 感谢作者-<a href=\\\"https://www.zhihu.com/people/jacky-lin-53\\\">Jacky lin</a>\\n<a href=\\\"http://www.ruanyifeng.com/blog/2007/10/ascii_unicode_and_utf-8.html\\\">阮一峰-字符编码笔记</a> ASCII，Unicode 和 UTF-8\\n<a href=\\\"http://slides.ruanyifeng.com/unicode/#intro\\\">阮一峰-Unicode和ES6-Slide</a>\\n<a href=\\\"https://www.zhihu.com/question/55075967/answer/144329603\\\">知乎-GB2312区位码转机内码为什么要同时加上2020H和8080H</a>\\n<a href=\\\"https://www.zhihu.com/question/20129435\\\">知乎-为什么使用 JavaScript 中 string 的 trim 方法时要替换 \\\\uFEFF 呢?</a>\\n<a href=\\\"https://www.zhihu.com/question/42048612\\\">知乎-微软为什么用带 BOM 的 UTF-8，造成和多数系统的不兼容？</a>\\n<a href=\\\"https://www.zhihu.com/question/20167122/answer/14199022\\\">知乎-「带 BOM 的 UTF-8」和「无 BOM 的 UTF-8」有什么区别？网页代码一般使用哪个？</a> 陈甫鸼的回答\\nAND 一大波的知乎回答, 太多了不好贴…对不起了各位答主🤦‍\\n吐槽一下: <a href=\\\"http://tgideas.qq.com/webplat/info/news_version3/804/808/811/m579/201307/218730.shtml\\\">字符<em>编码</em>的前世今生-TGideas-腾讯游戏官方设计团队</a> 我看到腾讯官方的文章, 还兴冲冲的点了进去, 说实话, 随便的翻阅了一下就能看出来作者对编码的一些概念还不是很清楚…有点误人子弟的感觉…(别揍我)</p>\\n\";","export default \"<blockquote>\\n<p>转载自：<a href=\\\"http://blog.mixu.net/2011/02/01/understanding-the-node-js-event-loop/\\\">http://blog.mixu.net/2011/02/01/understanding-the-node-js-event-loop/</a></p>\\n</blockquote>\\n<h3 id=\\\"understanding-the-nodejs-event-loop\\\">Understanding the nodejs&#39; event loop</h3>\\n<p>The first basic thesis of node.js is that I/O is expensive:</p>\\n<p><img src=\\\"../../../public/img/20191002162139.png\\\" alt=\\\"\\\"></p>\\n<p>So the largest waste with current programming technologies comes from waiting for I/O to complete. There are several ways in which one can deal with the performance impact (from <a href=\\\"http://www.nightmare.com/medusa/async_sockets.html\\\">Sam Rushing</a>):</p>\\n<ul>\\n<li><strong>synchronous</strong>: you handle one request at a time, each in turn. <em>pros</em>: simple <em>cons</em>: any one request can hold up all the other requests</li>\\n<li><strong>fork a new process</strong>: you start a new process to handle each request. <em>pros</em>: easy <em>cons</em>: does not scale well, hundreds of connections means hundreds of processes. fork() is the Unix programmer&#39;s hammer. Because it&#39;s available, every problem looks like a nail. It&#39;s usually overkill</li>\\n<li><strong>threads</strong>: start a new thread to handle each request. <em>pros</em>: easy, and kinder to the kernel than using fork, since threads usually have much less overhead <em>cons</em>: your machine may not have threads, and threaded programming can get very complicated very fast, with worries about controlling access to shared resources.</li>\\n</ul>\\n<p>The second basis thesis is that thread-per-connection is memory-expensive: [e.g. that graph everyone showns about Apache sucking up memory compared to Nginx]</p>\\n<p>Apache is multithreaded: it spawns a <a href=\\\"http://httpd.apache.org/docs/2.0/mod/worker.html\\\">thread per request</a> (or <a href=\\\"http://httpd.apache.org/docs/2.0/mod/prefork.html\\\">process</a>, it depends on the conf). You can see how that overhead eats up memory as the number of concurrent connections increases and more threads are needed to serve multiple simulataneous clients. Nginx and Node.js are not multithreaded, because threads and processes carry a heavy memory cost. They are single-threaded, but event-based. This eliminates the overhead created by thousands of threads/processes by handling many connections in a single thread.</p>\\n<h3 id=\\\"nodejs-keeps-a-single-thread-for-your-code\\\"><strong>Node.js keeps a single thread for your code...</strong></h3>\\n<p>It really is a single thread running: you can&#39;t do any parallel code execution; doing a &quot;sleep&quot; for example will block the server for one second: <code>js while(new Date().getTime() &lt; now + 1000) { // do nothing }</code></p>\\n<h3 id=\\\"however-everything-runs-in-parallel-except-your-code\\\"><strong>...however, everything runs in parallel except your code</strong></h3>\\n<p>There is no way of making code run in parallel within a single request. However, all I/O is evented and asynchronous, so the following won&#39;t block the server: [codesyntax lang=&quot;javascript&quot;]</p>\\n<pre><code> c.query(\\n   &#x27;SELECT SLEEP(20);&#x27;,\\n   function (err, results, fields) {\\n     if (err) {\\n       throw err;\\n     }\\n     res.writeHead(200, {&#x27;Content-Type&#x27;: &#x27;text/html&#x27;});\\n     res.end(&#x27;&lt;html&gt;&lt;head&gt;&lt;title&gt;Hello&lt;/title&gt;&lt;/head&gt;&lt;body&gt;&lt;h1&gt;Return from async DB query&lt;/h1&gt;&lt;/body&gt;&lt;/html&gt;&#x27;);\\n     c.end();\\n    }\\n);\\n</code></pre>\\n<p>If you do that in one request, other requests can be processed just fine while the database is running it&#39;s sleep.</p>\\n<h3 id=\\\"why-is-this-good-when-do-we-go-from-sync-to-asyncparallel-execution\\\">Why is this good? When do we go from sync to async/parallel execution?</h3>\\n<p>Having synchronous execution is good, because it simplifies writing code (compared to threads, where concurrency issues have a tendency to result in WTFs).</p>\\n<p>In node.js, you aren&#39;t supposed to worry about what happens in the backend: just use callbacks when you are doing I/O; and you are guaranteed that your code is never interrupted and that doing I/O will not block other requests without having to incur the costs of thread/process per request (e.g. memory overhead in Apache).</p>\\n<p>Having asynchronous I/O is good, because I/O is more expensive than most code and we should be doing something better than just waiting for I/O.</p>\\n<p><img src=\\\"../../../public/img/20191002162216.png\\\" alt=\\\"\\\"></p>\\n<p>An event loop is &quot;an entity that handles and processes external events and converts them into callback invocations&quot;. So I/O calls are the points at which Node.js can switch from one request to another. At an I/O call, your code saves the callback and returns control to the node.js runtime environment. The callback will be called later when the data actually is available.</p>\\n<p>Of course, on the backend, there are <a href=\\\"http://stackoverflow.com/questions/3629784/how-is-node-js-inherently-faster-when-it-still-relies-on-threads-internally\\\">threads and processes for DB access and process execution</a>. However, these are not explicitly exposed to your code, so you can&#39;t worry about them other than by knowing that I/O interactions e.g. with the database, or with other processes will be asynchronous from the perspective of each request since the results from those threads are returned via the event loop to your code. Compared to the Apache model, there are a lot less threads and thread overhead, since threads aren&#39;t needed for each connection; just when you absolutely positively must have something else running in parallel and even then the management is handled by Node.js.</p>\\n<p>Other than I/O calls, Node.js expects that all requests return quickly; e.g. <a href=\\\"http://stackoverflow.com/questions/3491811/node-js-and-cpu-intensive-requests\\\">CPU-intensive work should be split off to another process</a> with which you can interact as with events, or by using an abstraction like <a href=\\\"http://blog.std.in/2010/07/08/nodejs-webworker-design/\\\">WebWorkers</a>. This (obviously) means that you can&#39;t parallelize your code without another thread in the background with which you interact via events. Basically, all objects which emit events (e.g. are instances of EventEmitter) support asynchronous evented interaction and you can interact with blocking code in this manner e.g. using files, sockets or child processes all of which are EventEmitters in Node.js. <a href=\\\"http://developer.yahoo.com/blogs/ydn/posts/2010/07/multicore_http_server_with_nodejs/\\\">Multicore can be done</a> using this approach; see also: node-http-proxy.</p>\\n<p><strong>Internal implementation</strong></p>\\n<p><a href=\\\"https://github.com/ry/node/tree/master/deps\\\">Internally</a>, node.js relies on <a href=\\\"http://software.schmorp.de/pkg/libev.html\\\">libev</a> to provide the event loop, which is supplemented by <a href=\\\"http://software.schmorp.de/pkg/libeio.html\\\">libeio</a> which uses pooled threads to provide asynchronous I/O. To learn even more, have a look at the <a href=\\\"http://pod.tst.eu/http://cvs.schmorp.de/libev/ev.pod\\\">libev documentation</a>.</p>\\n<h3 id=\\\"so-how-do-we-do-async-in-nodejs\\\">So how do we do async in Node.js?</h3>\\n<p>Tim Caswell describes the patterns in his <a href=\\\"http://creationix.com/jsconf.pdf\\\">excellent presentation</a></p>\\n<ul>\\n<li>First-class functions. E.g. we pass around functions as data, shuffle them around and execute them when needed.</li>\\n<li>Function composition. Also known as having anonymous functions or closures that are executed after something happens in the evented I/O.</li>\\n</ul>\\n\";","export default \"<h3 id=\\\"introduction\\\">Introduction</h3>\\n<p>在Leetcode上做到某些题的时候，会发现这些题的解法大致都是差不多，将<strong>ans容器</strong>传递到某个方法中，这个方法一般有<code>dfs</code>，<code>backtracking</code>，<code>bfs</code>，等命名，然后方法中会有递归调用，然后到达某一个出口的时候，就会将当前的<strong>tmp答案</strong>放置到<strong>ans容器</strong>中，于是达到探索所有解的目的</p>\\n<p>这篇大概也是各个题的题解，只是在评论区里看到有人<a href=\\\"https://leetcode.com/problems/permutations/discuss/18239/A-general-approach-to-backtracking-questions-in-Java-(Subsets-Permutations-Combination-Sum-Palindrome-Partioning)\\\">整理</a>了，我就一起整理下来分析分析</p>\\n<blockquote>\\n<p>This structure might apply to many other backtracking questions, but here I am just going to demonstrate Subsets, Permutations, and Combination Sum.</p>\\n</blockquote>\\n<h3 id=\\\"subset\\\">Subset</h3>\\n<p>Given a set of <strong>distinct</strong> integers, <em>nums</em>, return all possible subsets (the power set).</p>\\n<p><strong>Note:</strong> The solution set must not contain duplicate subsets.</p>\\n<p><strong>Example:</strong></p>\\n<pre><code>Input: nums = [1,2,3]\\nOutput:\\n[\\n  [3],\\n  [1],\\n  [2],\\n  [1,2,3],\\n  [1,3],\\n  [2,3],\\n  [1,2],\\n  []\\n]\\n</code></pre>\\n<h4 id=\\\"solution\\\">Solution</h4>\\n<p>要找到一组无重复序列的子集，我们可以通过回溯的思想，去做这件事情，比如有序列<code>[1,2,3]</code>，因为子集可以不管顺序，所以123和321和312之类的是一样的，所以我们可以按照顺序决定谁开头，然后从这个开头位置开始进行回溯，比如：</p>\\n<pre><code>第一个开头是什么都没有，这也是空集的情况[]；\\n\\n[]——》  记录这个序列；\\n\\n第二个开头是1，于是由1开始进行递归：\\n\\n  |----1——》  记录这个序列，加入2；这时候i从0开始；\\n     |----1，2——》  记录这个序列，加入3；这时候i从1开始；\\n        |---- 1，2，3——》  记录这个序列，这时候i从2开始，达到序列底部，删除3，回退到上一层； \\n     |----1《——  从上一层回退回来的，删除2，结束该次循环；\\n     |----1，3——》  记录这个序列，这时候i从2开始，达到序列底部，删除3，回退到上一层；\\n  |----1《——  从上一层回退回来的，删除1，结束该次循环；\\n\\n于是1开头的子集已经访问完毕，继续\\n\\n第三个开头是2，于是由2开始进行递归：\\n\\n    |----2——》  记录这个序列，加入3；这时候i从1开始；\\n       |----2，3——》  记录这个序列，这时候i从2开始，达到序列底部，删除3，回退到上一层；\\n    |----2《——  从上一层回退回来的，删除2，结束该次循环；\\n    \\n于是2开头的子集已经访问完毕，继续\\n\\n第三个开头是3，于是由3开始进行递归：\\n\\n    |----3——》  记录这个序列，这时候i从2开始，达到序列底部，删除3，回退到上一层；\\n    |----3《——  从上一层回退回来的，删除3，结束该次循环；\\n    \\n于是3开头的子集已经访问完毕，序列所有数字均已经作为开头访问过子序列了，求解完毕；\\n</code></pre>\\n<p>于是实现可以简单的写出：</p>\\n<pre><code class=\\\"hljs language-java\\\"><span class=\\\"hljs-keyword\\\">public</span> List&lt;List&lt;Integer&gt;&gt; <span class=\\\"hljs-title function_\\\">subsets</span><span class=\\\"hljs-params\\\">(<span class=\\\"hljs-type\\\">int</span>[] nums)</span> {\\n    LinkedList&lt;List&lt;Integer&gt;&gt; ans = <span class=\\\"hljs-keyword\\\">new</span> <span class=\\\"hljs-title class_\\\">LinkedList</span>();\\n    backtracking(ans, <span class=\\\"hljs-keyword\\\">new</span> <span class=\\\"hljs-title class_\\\">ArrayList</span>&lt;&gt;(), nums, <span class=\\\"hljs-number\\\">0</span>);\\n    <span class=\\\"hljs-keyword\\\">return</span> ans;\\n}\\n\\n<span class=\\\"hljs-keyword\\\">private</span> <span class=\\\"hljs-keyword\\\">void</span> <span class=\\\"hljs-title function_\\\">backtracking</span><span class=\\\"hljs-params\\\">(List&lt;List&lt;Integer&gt;&gt; ans, List&lt;Integer&gt; tmp, <span class=\\\"hljs-type\\\">int</span>[] nums, <span class=\\\"hljs-type\\\">int</span> start)</span> {\\n    ans.add(<span class=\\\"hljs-keyword\\\">new</span> <span class=\\\"hljs-title class_\\\">ArrayList</span>&lt;&gt;(tmp));\\n    <span class=\\\"hljs-keyword\\\">for</span> (<span class=\\\"hljs-type\\\">int</span> <span class=\\\"hljs-variable\\\">i</span> <span class=\\\"hljs-operator\\\">=</span> start; i &lt; nums.length; i++) {\\n        tmp.add(nums[i]);\\n        backtracking(ans, tmp, nums, i + <span class=\\\"hljs-number\\\">1</span>);\\n        tmp.remove(tmp.size() - <span class=\\\"hljs-number\\\">1</span>);\\n    }\\n}\\n</code></pre>\\n<h3 id=\\\"subset-ii\\\">Subset II</h3>\\n<p>Given a collection of integers that might contain duplicates, <strong>nums</strong>, return all possible subsets (the power set).</p>\\n<p><strong>Note:</strong> The solution set must not contain duplicate subsets.</p>\\n<p><strong>Example:</strong></p>\\n<pre><code>Input: [1,2,2]\\nOutput:\\n[\\n  [2],\\n  [1],\\n  [1,2,2],\\n  [2,2],\\n  [1,2],\\n  []\\n]\\n</code></pre>\\n<p>和上题差不多，只是这类题总会有，无重复序列，有重复序列的两种题型出现，于是我们如何在处理有重复序列的时候，避免重复解成了解决第二类问题的关键</p>\\n<h4 id=\\\"solution-1\\\">Solution</h4>\\n<p>避免判断重复的关键是：<strong>先对序列进行排序</strong>！</p>\\n<p>我们以<code>[1,2,2]</code>为例</p>\\n<pre><code>第一个开头是什么都没有，这也是空集的情况[]；\\n\\n[]——》  记录这个序列；\\n\\n第二个开头是1，于是由1开始进行递归：\\n\\n  |----1——》  记录这个序列，加入2；这时候i从0开始；\\n     |----1，2——》  记录这个序列，加入2；这时候i从1开始；\\n        |---- 1，2，2——》  记录这个序列，这时候i从2开始，达到序列底部，删除2，回退到上一层； \\n     |----1《——  从上一层回退回来的，删除2，结束该次循环；\\n     |----1，2——》  这个序列i=2的时候，i != start && nums[i] == nums[i - 1]\\n  |----1《——  从上一层回退回来的，删除1，结束该次循环；\\n\\n于是1开头的子集已经访问完毕，继续\\n\\n第三个开头是2，于是由2开始进行递归：\\n\\n    |----2——》  记录这个序列，加入2；这时候i从1开始；\\n       |----2，2——》  记录这个序列，这时候i从2开始，达到序列底部，删除2，回退到上一层；\\n    |----2《——  从上一层回退回来的，删除2，结束该次循环；\\n    \\n于是2开头的子集已经访问完毕，继续\\n\\n第三个开头是2，于是由2开始进行递归：\\n\\n    因为这时候start还是0，而i != start && nums[i] == nums[i - 1]成立，于是2就应该跳过；\\n    \\n于是3开头的子集已经访问完毕，序列所有数字均已经作为开头访问过子序列了，求解完毕；\\n</code></pre>\\n<pre><code class=\\\"hljs language-java\\\"><span class=\\\"hljs-keyword\\\">public</span> List&lt;List&lt;Integer&gt;&gt; <span class=\\\"hljs-title function_\\\">subsetsWithDup</span><span class=\\\"hljs-params\\\">(<span class=\\\"hljs-type\\\">int</span>[] nums)</span> {\\n    ArrayList&lt;List&lt;Integer&gt;&gt; ans = <span class=\\\"hljs-keyword\\\">new</span> <span class=\\\"hljs-title class_\\\">ArrayList</span>&lt;&gt;();\\n    Arrays.sort(nums);\\n    backtracking(ans, <span class=\\\"hljs-keyword\\\">new</span> <span class=\\\"hljs-title class_\\\">ArrayList</span>&lt;&gt;(), nums, <span class=\\\"hljs-number\\\">0</span>);\\n    <span class=\\\"hljs-keyword\\\">return</span> ans;\\n}\\n\\n<span class=\\\"hljs-keyword\\\">private</span> <span class=\\\"hljs-keyword\\\">void</span> <span class=\\\"hljs-title function_\\\">backtracking</span><span class=\\\"hljs-params\\\">(List&lt;List&lt;Integer&gt;&gt; ans, List&lt;Integer&gt; tmp, <span class=\\\"hljs-type\\\">int</span>[] nums, <span class=\\\"hljs-type\\\">int</span> start)</span> {\\n    ans.add(<span class=\\\"hljs-keyword\\\">new</span> <span class=\\\"hljs-title class_\\\">ArrayList</span>&lt;&gt;(tmp));\\n    <span class=\\\"hljs-keyword\\\">for</span> (<span class=\\\"hljs-type\\\">int</span> <span class=\\\"hljs-variable\\\">i</span> <span class=\\\"hljs-operator\\\">=</span> start; i &lt; nums.length; i++) {\\n        <span class=\\\"hljs-keyword\\\">if</span> (i != start && nums[i] == nums[i - <span class=\\\"hljs-number\\\">1</span>]) {\\n            <span class=\\\"hljs-keyword\\\">continue</span>;\\n        }\\n        tmp.add(nums[i]);\\n        backtracking(ans, tmp, nums, i + <span class=\\\"hljs-number\\\">1</span>);\\n        tmp.remove(tmp.size() - <span class=\\\"hljs-number\\\">1</span>);\\n    }\\n}\\n</code></pre>\\n<h3 id=\\\"permutation\\\">Permutation</h3>\\n<p>Given a collection of <strong>distinct</strong> integers, return all possible permutations.</p>\\n<p><strong>Example:</strong></p>\\n<pre><code>Input: [1,2,3]\\nOutput:\\n[\\n  [1,2,3],\\n  [1,3,2],\\n  [2,1,3],\\n  [2,3,1],\\n  [3,1,2],\\n  [3,2,1]\\n]\\n</code></pre>\\n<h4 id=\\\"solution-2\\\">Solution</h4>\\n<p>这题就并不是找子集了，于是123和321是两个解，我们还是以前两题相类似的思路，顺序以某个数字开头，然后依次递归下去，比如以<code>1</code>开头，然后从剩下的数字中分别可以遍历出<code>12</code>和<code>13</code>，然后<code>12</code>从剩下的3中遍历出结果<code>123</code>，而<code>13</code>可以从剩下的2中遍历出<code>132</code>；于是1开头的所有排列已经找到了；依次类推2和3开头的结果</p>\\n<p>其中有tricky的地方是，每次我们要找下一个候选的时候，我们要判断当前后续是否在当此排列人当中，如果在就跳过，跳过的方法也很简单，因为序列本身无重复，所以直接<code>!tmp.contains(nums[i])</code>就好，于是实现可以是：</p>\\n<pre><code class=\\\"hljs language-java\\\"><span class=\\\"hljs-keyword\\\">public</span> List&lt;List&lt;Integer&gt;&gt; <span class=\\\"hljs-title function_\\\">permute</span><span class=\\\"hljs-params\\\">(<span class=\\\"hljs-type\\\">int</span>[] nums)</span> {\\n    LinkedList&lt;List&lt;Integer&gt;&gt; ans = <span class=\\\"hljs-keyword\\\">new</span> <span class=\\\"hljs-title class_\\\">LinkedList</span>&lt;&gt;();\\n    backtracking(ans, <span class=\\\"hljs-keyword\\\">new</span> <span class=\\\"hljs-title class_\\\">ArrayList</span>(), nums);\\n    <span class=\\\"hljs-keyword\\\">return</span> ans;\\n}\\n\\n<span class=\\\"hljs-keyword\\\">private</span> <span class=\\\"hljs-keyword\\\">void</span> <span class=\\\"hljs-title function_\\\">backtracking</span><span class=\\\"hljs-params\\\">(List&lt;List&lt;Integer&gt;&gt; ans, List&lt;Integer&gt; tmp, <span class=\\\"hljs-type\\\">int</span>[] nums)</span> {\\n    <span class=\\\"hljs-keyword\\\">if</span> (tmp.size() == nums.length) {\\n        ans.add(<span class=\\\"hljs-keyword\\\">new</span> <span class=\\\"hljs-title class_\\\">ArrayList</span>&lt;&gt;(tmp));\\n    } <span class=\\\"hljs-keyword\\\">else</span> {\\n        <span class=\\\"hljs-keyword\\\">for</span> (<span class=\\\"hljs-type\\\">int</span> <span class=\\\"hljs-variable\\\">i</span> <span class=\\\"hljs-operator\\\">=</span> <span class=\\\"hljs-number\\\">0</span>; i &lt; nums.length; i++) {\\n            <span class=\\\"hljs-comment\\\">// skip when </span>\\n            <span class=\\\"hljs-keyword\\\">if</span> (!tmp.contains(nums[i])) {\\n                tmp.add(nums[i]);\\n                backtracking(ans, tmp, nums);\\n                tmp.remove(tmp.size() - <span class=\\\"hljs-number\\\">1</span>);\\n            }\\n        }\\n    }\\n}\\n</code></pre>\\n<h3 id=\\\"permutation-ii\\\">Permutation II</h3>\\n<p>Given a collection of numbers that might contain duplicates, return all possible unique permutations.</p>\\n<p><strong>Example:</strong></p>\\n<pre><code>Input: [1,1,2]\\nOutput:\\n[\\n  [1,1,2],\\n  [1,2,1],\\n  [2,1,1]\\n]\\n</code></pre>\\n<h4 id=\\\"solution-3\\\">Solution</h4>\\n<p>这里又有不同了，序列中有重复的数字，那么不能像上一题一样用数值去判断是否存在过<strong>tmp</strong> 中了，所以我们可以设置一个flag数组，用于标识对应位置上的数组是否出现过，实际上我们上一题也可以用这样的方法</p>\\n<pre><code class=\\\"hljs language-java\\\"><span class=\\\"hljs-keyword\\\">public</span> List&lt;List&lt;Integer&gt;&gt; <span class=\\\"hljs-title function_\\\">permuteUnique</span><span class=\\\"hljs-params\\\">(<span class=\\\"hljs-type\\\">int</span>[] nums)</span> {\\n    Arrays.sort(nums);\\n    LinkedList&lt;List&lt;Integer&gt;&gt; ans = <span class=\\\"hljs-keyword\\\">new</span> <span class=\\\"hljs-title class_\\\">LinkedList</span>();\\n    <span class=\\\"hljs-type\\\">int</span>[] flags = <span class=\\\"hljs-keyword\\\">new</span> <span class=\\\"hljs-title class_\\\">int</span>[nums.length];\\n    backtracking(ans, <span class=\\\"hljs-keyword\\\">new</span> <span class=\\\"hljs-title class_\\\">ArrayList</span>(), nums, flags);\\n    <span class=\\\"hljs-keyword\\\">return</span> ans;\\n}\\n\\n<span class=\\\"hljs-keyword\\\">public</span> <span class=\\\"hljs-keyword\\\">void</span> <span class=\\\"hljs-title function_\\\">backtracking</span><span class=\\\"hljs-params\\\">(List&lt;List&lt;Integer&gt;&gt; ans, List&lt;Integer&gt; tmp, <span class=\\\"hljs-type\\\">int</span>[] nums, <span class=\\\"hljs-type\\\">int</span>[] flags)</span> {\\n    <span class=\\\"hljs-keyword\\\">if</span> (tmp.size() == nums.length) {\\n        ans.add(<span class=\\\"hljs-keyword\\\">new</span> <span class=\\\"hljs-title class_\\\">ArrayList</span>(tmp));\\n    } <span class=\\\"hljs-keyword\\\">else</span> {\\n        <span class=\\\"hljs-keyword\\\">for</span> (<span class=\\\"hljs-type\\\">int</span> <span class=\\\"hljs-variable\\\">i</span> <span class=\\\"hljs-operator\\\">=</span> <span class=\\\"hljs-number\\\">0</span>; i &lt; nums.length; i++) {\\n            <span class=\\\"hljs-comment\\\">// 如果出现过就跳过</span>\\n            <span class=\\\"hljs-keyword\\\">if</span> (flags[i] == <span class=\\\"hljs-number\\\">0</span>) {\\n                <span class=\\\"hljs-keyword\\\">if</span> (i &gt; <span class=\\\"hljs-number\\\">0</span> && nums[i] == nums[i - <span class=\\\"hljs-number\\\">1</span>] && flags[i - <span class=\\\"hljs-number\\\">1</span>] == <span class=\\\"hljs-number\\\">0</span>) {\\n                    <span class=\\\"hljs-keyword\\\">continue</span>;\\n                }\\n                tmp.add(nums[i]);\\n                flags[i] = <span class=\\\"hljs-number\\\">1</span>;\\n                backtracking(ans, tmp, nums, flags);\\n                flags[i] = <span class=\\\"hljs-number\\\">0</span>;\\n                tmp.remove(tmp.size() - <span class=\\\"hljs-number\\\">1</span>);\\n            }\\n        }\\n    }\\n}\\n</code></pre>\\n<p>关键去重是这一行：<code>i &gt; 0 && nums[i] == nums[i - 1] && flags[i - 1] == 0</code></p>\\n<p>前面两个子条件可以理解，之前我们去重都是这样做的，第三个条件是什么意思呢？如果和当前数组重复的元素也就是前一位，<strong>并没有被计入tmp序列的话</strong>，那么就说明它已经被还原为0了，说明这是一个新开始了，比如说序列<code>[1,1,3]</code>，当以<strong>第一个1</strong>为开头的时候，序列解已经给出<code>1,1,3/1,3,1</code>了，等到给出解的时候，所有的flag已经都还原成<code>[0,0,0]</code>，意味着重新计数了，等到以<strong>第二个1</strong>为开头的时候，这时候判断它和第一个一数值相等，并且第一个1都没有被纳入计数的时候，于是这是一个开始，且是重复的开始，所以可以跳过</p>\\n<h3 id=\\\"combination-sum\\\">Combination Sum</h3>\\n<p>Given a <strong>set</strong> of candidate numbers (<code>candidates</code>) <strong>(without duplicates)</strong> and a target number (<code>target</code>), find all unique combinations in <code>candidates</code> where the candidate numbers sums to <code>target</code>.</p>\\n<p>The <strong>same</strong> repeated number may be chosen from <code>candidates</code> unlimited number of times.</p>\\n<p><strong>Note:</strong></p>\\n<ul>\\n<li>All numbers (including <code>target</code>) will be positive integers.</li>\\n<li>The solution set must not contain duplicate combinations.</li>\\n</ul>\\n<p><strong>Example 1:</strong></p>\\n<pre><code>Input: candidates = [2,3,6,7], target = 7,\\nA solution set is:\\n[\\n  [7],\\n  [2,2,3]\\n]\\n</code></pre>\\n<p><strong>Example 2:</strong></p>\\n<pre><code>Input: candidates = [2,3,5], target = 8,\\nA solution set is:\\n[\\n  [2,2,2,2],\\n  [2,3,3],\\n  [3,5]\\n]\\n</code></pre>\\n<h4 id=\\\"solution-4\\\">Solution</h4>\\n<p>这里首先说说排列和组合的区别，前面两题<strong>Permutation</strong>，是排列问题，排列问题需要考虑顺序，也就是123和321是两个解，所以每次回溯的循环都是从0开始，以1开头要考虑所有的其他数字，以3开头也要考虑所有的其他数字；</p>\\n<p>而组合是不需要考虑顺序的，也就是123和321是同一个解，于是每次循环都从一个新的start开始，比如序列<code>[1, 2, 3]</code>的话，从1开头，要考虑自己和剩下的2和3，从2开头就只需要考虑自己和3就行了，从3开头就只需要考虑自己就好了；</p>\\n<p>然后对于这题来说，每次我们往下传的时候，都传做好减法的target，一直到最后target为0的时候，等于找到了一组解，于是代码为：</p>\\n<pre><code class=\\\"hljs language-java\\\"><span class=\\\"hljs-keyword\\\">public</span> List&lt;List&lt;Integer&gt;&gt; <span class=\\\"hljs-title function_\\\">combinationSum</span><span class=\\\"hljs-params\\\">(<span class=\\\"hljs-type\\\">int</span>[] candidates, <span class=\\\"hljs-type\\\">int</span> target)</span> {\\n    List&lt;List&lt;Integer&gt;&gt; ans = <span class=\\\"hljs-keyword\\\">new</span> <span class=\\\"hljs-title class_\\\">ArrayList</span>&lt;&gt;();\\n    backtrack(ans, <span class=\\\"hljs-keyword\\\">new</span> <span class=\\\"hljs-title class_\\\">ArrayList</span>&lt;&gt;(), candidates, <span class=\\\"hljs-number\\\">0</span>, target);\\n    <span class=\\\"hljs-keyword\\\">return</span> ans;\\n}\\n\\n<span class=\\\"hljs-keyword\\\">private</span> <span class=\\\"hljs-keyword\\\">void</span> <span class=\\\"hljs-title function_\\\">backtrack</span><span class=\\\"hljs-params\\\">(List&lt;List&lt;Integer&gt;&gt; ans, List&lt;Integer&gt; tmp, <span class=\\\"hljs-type\\\">int</span>[] candidate, <span class=\\\"hljs-type\\\">int</span> start, <span class=\\\"hljs-type\\\">int</span> target)</span> {\\n    <span class=\\\"hljs-keyword\\\">if</span> (target == <span class=\\\"hljs-number\\\">0</span>) {\\n        ans.add(<span class=\\\"hljs-keyword\\\">new</span> <span class=\\\"hljs-title class_\\\">ArrayList</span>&lt;&gt;(tmp));\\n    } <span class=\\\"hljs-keyword\\\">else</span> <span class=\\\"hljs-keyword\\\">if</span> (target &gt; <span class=\\\"hljs-number\\\">0</span>) {\\n        <span class=\\\"hljs-keyword\\\">for</span> (<span class=\\\"hljs-type\\\">int</span> <span class=\\\"hljs-variable\\\">i</span> <span class=\\\"hljs-operator\\\">=</span> start; i &lt; candidate.length; i++) {\\n            tmp.add(candidate[i]);\\n            backtrack(ans, tmp, candidate, i, target - candidate[i]);\\n            tmp.remove(tmp.size() - <span class=\\\"hljs-number\\\">1</span>);\\n        }\\n    }\\n}\\n</code></pre>\\n<h3 id=\\\"combination-sum-ii\\\">Combination Sum II</h3>\\n<p>Given a collection of candidate numbers (<code>candidates</code>) and a target number (<code>target</code>), find all unique combinations in <code>candidates</code> where the candidate numbers sums to <code>target</code>.</p>\\n<p>Each number in <code>candidates</code> may only be used <strong>once</strong> in the combination.</p>\\n<p><strong>Note:</strong></p>\\n<ul>\\n<li>All numbers (including <code>target</code>) will be positive integers.</li>\\n<li>The solution set must not contain duplicate combinations.</li>\\n</ul>\\n<p><strong>Example 1:</strong></p>\\n<pre><code>Input: candidates = [10,1,2,7,6,1,5], target = 8,\\nA solution set is:\\n[\\n  [1, 7],\\n  [1, 2, 5],\\n  [2, 6],\\n  [1, 1, 6]\\n]\\n</code></pre>\\n<p><strong>Example 2:</strong></p>\\n<pre><code>Input: candidates = [2,5,2,1,2], target = 5,\\nA solution set is:\\n[\\n  [1,2,2],\\n  [5]\\n]\\n</code></pre>\\n<h4 id=\\\"solution-5\\\">Solution</h4>\\n<p>额，我觉得到现在已经轻车熟路了，这里要注意的是，题目里说了每一个候选数字自能使用一次，于是我们往下传的时候，start要是i+1</p>\\n<pre><code class=\\\"hljs language-java\\\"><span class=\\\"hljs-keyword\\\">public</span> List&lt;List&lt;Integer&gt;&gt; <span class=\\\"hljs-title function_\\\">combinationSum2</span><span class=\\\"hljs-params\\\">(<span class=\\\"hljs-type\\\">int</span>[] candidates, <span class=\\\"hljs-type\\\">int</span> target)</span> {\\n    List&lt;List&lt;Integer&gt;&gt; ans = <span class=\\\"hljs-keyword\\\">new</span> <span class=\\\"hljs-title class_\\\">ArrayList</span>&lt;&gt;();\\n    Arrays.sort(candidates);\\n    backtrack(ans, <span class=\\\"hljs-keyword\\\">new</span> <span class=\\\"hljs-title class_\\\">ArrayList</span>&lt;&gt;(), candidates, <span class=\\\"hljs-number\\\">0</span>, target);\\n    <span class=\\\"hljs-keyword\\\">return</span> ans;\\n}\\n\\n<span class=\\\"hljs-keyword\\\">private</span> <span class=\\\"hljs-keyword\\\">void</span> <span class=\\\"hljs-title function_\\\">backtrack</span><span class=\\\"hljs-params\\\">(List&lt;List&lt;Integer&gt;&gt; ans, List&lt;Integer&gt; tmp, <span class=\\\"hljs-type\\\">int</span>[] candidate, <span class=\\\"hljs-type\\\">int</span> start, <span class=\\\"hljs-type\\\">int</span> target)</span> {\\n    <span class=\\\"hljs-keyword\\\">if</span> (target == <span class=\\\"hljs-number\\\">0</span>) {\\n        ans.add(<span class=\\\"hljs-keyword\\\">new</span> <span class=\\\"hljs-title class_\\\">ArrayList</span>&lt;&gt;(tmp));\\n    } <span class=\\\"hljs-keyword\\\">else</span> <span class=\\\"hljs-keyword\\\">if</span> (target &gt; <span class=\\\"hljs-number\\\">0</span>) {\\n        <span class=\\\"hljs-keyword\\\">for</span> (<span class=\\\"hljs-type\\\">int</span> <span class=\\\"hljs-variable\\\">i</span> <span class=\\\"hljs-operator\\\">=</span> start; i &lt; candidate.length; i++) {\\n            <span class=\\\"hljs-keyword\\\">if</span> (i &gt; start && candidate[i] == candidate[i - <span class=\\\"hljs-number\\\">1</span>]) {\\n                <span class=\\\"hljs-keyword\\\">continue</span>;\\n            }\\n            tmp.add(candidate[i]);\\n            backtrack(ans, tmp, candidate, i + <span class=\\\"hljs-number\\\">1</span>, target - candidate[i]);\\n            tmp.remove(tmp.size() - <span class=\\\"hljs-number\\\">1</span>);\\n        }\\n    }\\n}\\n</code></pre>\\n<h3 id=\\\"palindrome-partitioning\\\">Palindrome Partitioning</h3>\\n<p>Given a string <em>s</em>, partition <em>s</em> such that every substring of the partition is a palindrome.</p>\\n<p>Return all possible palindrome partitioning of <em>s</em>.</p>\\n<p><strong>Example:</strong></p>\\n<pre><code>Input: &quot;aab&quot;\\nOutput:\\n[\\n  [&quot;aa&quot;,&quot;b&quot;],\\n  [&quot;a&quot;,&quot;a&quot;,&quot;b&quot;]\\n]\\n</code></pre>\\n<h4 id=\\\"solution-6\\\">Solution</h4>\\n<p>这题怎么说，其实可以用dp，而不用回溯，因为回溯确实有点魔幻，因为在回溯里不太好追踪子集，至少我这个笨脑子追踪不了</p>\\n<pre><code class=\\\"hljs language-java\\\"><span class=\\\"hljs-keyword\\\">public</span> List&lt;List&lt;String&gt;&gt; <span class=\\\"hljs-title function_\\\">partition</span><span class=\\\"hljs-params\\\">(String s)</span> {\\n   List&lt;List&lt;String&gt;&gt; list = <span class=\\\"hljs-keyword\\\">new</span> <span class=\\\"hljs-title class_\\\">ArrayList</span>&lt;&gt;();\\n   backtrack(list, <span class=\\\"hljs-keyword\\\">new</span> <span class=\\\"hljs-title class_\\\">ArrayList</span>&lt;&gt;(), s, <span class=\\\"hljs-number\\\">0</span>);\\n   <span class=\\\"hljs-keyword\\\">return</span> list;\\n}\\n\\n<span class=\\\"hljs-keyword\\\">public</span> <span class=\\\"hljs-keyword\\\">void</span> <span class=\\\"hljs-title function_\\\">backtrack</span><span class=\\\"hljs-params\\\">(List&lt;List&lt;String&gt;&gt; list, List&lt;String&gt; tempList, String s, <span class=\\\"hljs-type\\\">int</span> start)</span>{\\n   <span class=\\\"hljs-keyword\\\">if</span>(start == s.length())\\n      list.add(<span class=\\\"hljs-keyword\\\">new</span> <span class=\\\"hljs-title class_\\\">ArrayList</span>&lt;&gt;(tempList));\\n   <span class=\\\"hljs-keyword\\\">else</span>{\\n      <span class=\\\"hljs-keyword\\\">for</span>(<span class=\\\"hljs-type\\\">int</span> <span class=\\\"hljs-variable\\\">i</span> <span class=\\\"hljs-operator\\\">=</span> start; i &lt; s.length(); i++){\\n         <span class=\\\"hljs-keyword\\\">if</span>(isPalindrome(s, start, i)){\\n            tempList.add(s.substring(start, i + <span class=\\\"hljs-number\\\">1</span>));\\n            backtrack(list, tempList, s, i + <span class=\\\"hljs-number\\\">1</span>);\\n            tempList.remove(tempList.size() - <span class=\\\"hljs-number\\\">1</span>);\\n         }\\n      }\\n   }\\n}\\n\\n<span class=\\\"hljs-keyword\\\">public</span> <span class=\\\"hljs-type\\\">boolean</span> <span class=\\\"hljs-title function_\\\">isPalindrome</span><span class=\\\"hljs-params\\\">(String s, <span class=\\\"hljs-type\\\">int</span> low, <span class=\\\"hljs-type\\\">int</span> high)</span>{\\n   <span class=\\\"hljs-keyword\\\">while</span>(low &lt; high)\\n      <span class=\\\"hljs-keyword\\\">if</span>(s.charAt(low++) != s.charAt(high--)) <span class=\\\"hljs-keyword\\\">return</span> <span class=\\\"hljs-literal\\\">false</span>;\\n   <span class=\\\"hljs-keyword\\\">return</span> <span class=\\\"hljs-literal\\\">true</span>;\\n} \\n</code></pre>\\n\";","export default \"<h3 id=\\\"preface\\\">Preface</h3>\\n<p>I can&#39;t get up early recently, and yesterday I suddenly thought about why can&#39;t I use my idle raspberry pi to broadcast TV news every 7:00 a.m and wake me up?</p>\\n<p>And how am I going to achieve that? There are some factors I should count in:</p>\\n<ul>\\n<li>a cron to set timing task at 7:00 a.m;</li>\\n<li>tools to control the mouse action;</li>\\n<li>tools to control the volume and the screen&#39;s display (save battery)</li>\\n</ul>\\n<h3 id=\\\"make-the-pi-connecting-to-the-world\\\">Make the pi connecting to the world</h3>\\n<p>There&#39;s a lot of choices for using SSR on Linux os, check  <a href=\\\"https://github.com/shadowsocks\\\">here</a>, but many of them were banned and deleted their documents.</p>\\n<p>Luckily, there still some tutorials showing how to implement it on Linux.  (<a href=\\\"%5Bhttps://medium.com/@molimowang/raspberry-pi-shadowsocks-polipo%E5%AE%9E%E7%8E%B0%E7%A7%91%E5%AD%A6%E4%B8%8A%E7%BD%91-eae1b7eeb779%5D(https://medium.com/@molimowang/raspberry-pi-shadowsocks-polipo%E5%AE%9E%E7%8E%B0%E7%A7%91%E5%AD%A6%E4%B8%8A%E7%BD%91-eae1b7eeb779)\\\">reference1</a><a href=\\\"https://my.oschina.net/u/1432769/blog/619651?nocache=1527132335477\\\">reference2</a>)</p>\\n<h4 id=\\\"installation\\\">Installation</h4>\\n<p>Require python &gt;2.7</p>\\n<pre><code class=\\\"hljs language-bash\\\">sudo apt-get install python-pip python-m2crypto\\nsudo pip install shadowsocks\\n</code></pre>\\n<h4 id=\\\"config-file\\\">Config File</h4>\\n<p>Create a json file somewhere, which is used for both ssserver(server) and sslocal(client):</p>\\n<pre><code class=\\\"hljs language-json\\\"><span class=\\\"hljs-punctuation\\\">{</span>\\n    <span class=\\\"hljs-attr\\\">&quot;server&quot;</span><span class=\\\"hljs-punctuation\\\">:</span><span class=\\\"hljs-string\\\">&quot;my_server_ip&quot;</span><span class=\\\"hljs-punctuation\\\">,</span>\\n    <span class=\\\"hljs-attr\\\">&quot;server_port&quot;</span><span class=\\\"hljs-punctuation\\\">:</span><span class=\\\"hljs-number\\\">8388</span><span class=\\\"hljs-punctuation\\\">,</span>\\n    <span class=\\\"hljs-attr\\\">&quot;local_address&quot;</span><span class=\\\"hljs-punctuation\\\">:</span> <span class=\\\"hljs-string\\\">&quot;127.0.0.1&quot;</span><span class=\\\"hljs-punctuation\\\">,</span>\\n    <span class=\\\"hljs-attr\\\">&quot;local_port&quot;</span><span class=\\\"hljs-punctuation\\\">:</span><span class=\\\"hljs-number\\\">1080</span><span class=\\\"hljs-punctuation\\\">,</span>\\n    <span class=\\\"hljs-attr\\\">&quot;password&quot;</span><span class=\\\"hljs-punctuation\\\">:</span><span class=\\\"hljs-string\\\">&quot;mypassword&quot;</span><span class=\\\"hljs-punctuation\\\">,</span>\\n    <span class=\\\"hljs-attr\\\">&quot;timeout&quot;</span><span class=\\\"hljs-punctuation\\\">:</span><span class=\\\"hljs-number\\\">300</span><span class=\\\"hljs-punctuation\\\">,</span>\\n    <span class=\\\"hljs-attr\\\">&quot;method&quot;</span><span class=\\\"hljs-punctuation\\\">:</span><span class=\\\"hljs-string\\\">&quot;aes-256-cfb&quot;</span><span class=\\\"hljs-punctuation\\\">,</span>\\n    <span class=\\\"hljs-attr\\\">&quot;fast_open&quot;</span><span class=\\\"hljs-punctuation\\\">:</span> <span class=\\\"hljs-keyword\\\">false</span><span class=\\\"hljs-punctuation\\\">,</span>\\n    <span class=\\\"hljs-attr\\\">&quot;workers&quot;</span><span class=\\\"hljs-punctuation\\\">:</span> <span class=\\\"hljs-number\\\">1</span>\\n<span class=\\\"hljs-punctuation\\\">}</span>\\n</code></pre>\\n<ol>\\n<li>server: server listening address, set <code>0.0.0.0</code> <strong>if your are using your machine as ssserver</strong></li>\\n<li>server_port: server listening port, should avoided existing port <strong>if your are using your machine as ssserver</strong></li>\\n<li>local_address: local listening address, should be  <code>127.0.0.1</code></li>\\n<li>local_port: local listening port, should avoided existing port</li>\\n<li>password: your <strong>ss password</strong></li>\\n<li>timeout: connection timeout, second unit </li>\\n<li>method: crypto method, by default is: <code>aes-256-cfb</code>, <a href=\\\"https://github.com/clowwindy/shadowsocks/wiki/Encryption\\\">more info here</a></li>\\n<li>workers: process number</li>\\n</ol>\\n<h4 id=\\\"startup-ss-server\\\">Startup ss server</h4>\\n<pre><code class=\\\"hljs language-bash\\\">ssserver -c /etc/shadowsocks.json\\n</code></pre>\\n<h4 id=\\\"startup-ss-client\\\">Startup ss client</h4>\\n<pre><code class=\\\"hljs language-bash\\\">sslocal -c /etc/shadowsocks.json\\n</code></pre>\\n<h4 id=\\\"openssl-problem\\\">Openssl Problem</h4>\\n<p>For some update reason, you might get this <code>error log</code> while using the commands above:</p>\\n<pre><code class=\\\"hljs language-bash\\\">Traceback (most recent call last):\\nFile <span class=\\\"hljs-string\\\">&quot;/usr/local/bin/sslocal&quot;</span>, line 9, <span class=\\\"hljs-keyword\\\">in</span> \\nload_entry_point(<span class=\\\"hljs-string\\\">&#x27;shadowsocks==2.8.2&#x27;</span>, <span class=\\\"hljs-string\\\">&#x27;console_scripts&#x27;</span>, <span class=\\\"hljs-string\\\">&#x27;sslocal&#x27;</span>)()\\n....\\n....\\n....\\nAttributeError: /usr/local/lib/libcrypto.so.1.1: undefined symbol: EVP_CIPHER_CTX_cleanup\\n</code></pre>\\n<p>This is because:</p>\\n<blockquote>\\n<p><strong>EVP_CIPHER_CTX</strong> was made opaque in OpenSSL 1.1.0. As a result, EVP_CIPHER_CTX_reset() appeared and EVP_CIPHER_CTX_cleanup() disappeared. EVP_CIPHER_CTX_init() remains as an alias for EVP_CIPHER_CTX_reset()</p>\\n</blockquote>\\n<p>Reference: <a href=\\\"%5Bhttps://floperry.github.io/2019/02/24/2018-06-25-Ubuntu-18.04-%E4%B8%8B%E8%A7%A3%E5%86%B3-shadowsocks-%E6%9C%8D%E5%8A%A1%E6%8A%A5%E9%94%99%E9%97%AE%E9%A2%98/%5D(https://floperry.github.io/2019/02/24/2018-06-25-Ubuntu-18.04-%E4%B8%8B%E8%A7%A3%E5%86%B3-shadowsocks-%E6%9C%8D%E5%8A%A1%E6%8A%A5%E9%94%99%E9%97%AE%E9%A2%98/)\\\">here</a></p>\\n<p>Find <code>/site-packages/shadowsocks/crypto/openssl.py</code> according to your <code>error log</code> and edit it: change all <code>EVP_CIPHER_CTX_cleanup()</code> into  <code>EVP_CIPHER_CTX_reset()</code>, there are two places needed to handle.</p>\\n<h4 id=\\\"proxy\\\">Proxy</h4>\\n<p>Since ss client is using SOCKS5 protocol, we can&#39;t use it directly or easily in Linux os as Windows os does, so we have to proxy turn the protocol into HTTP.</p>\\n<h5 id=\\\"polipo\\\">Polipo</h5>\\n<p>For quick-start, we can use <a href=\\\"https://wiki.archlinux.org/index.php/Polipo\\\">Polipo</a> to achieve that, but it is no longer maintain.</p>\\n<p>Polipo is a small and fast caching web proxy (a web cache, an HTTP proxy, a proxy server). While Polipo was designed to be used by one person or a small group of people, there is nothing that prevents it from being used by a larger group.</p>\\n<ul>\\n<li><p>Installation</p>\\n<pre><code class=\\\"hljs language-bash\\\">sudo apt-get install polipo\\n</code></pre>\\n</li>\\n<li><p>config file：</p>\\n<pre><code class=\\\"hljs language-bash\\\">sudo nano /etc/polipo/config\\n</code></pre>\\n<pre><code class=\\\"hljs language-bash\\\"><span class=\\\"hljs-comment\\\"># This file only needs to list configuration variables that deviate</span>\\n<span class=\\\"hljs-comment\\\"># from the default values. See /usr/share/doc/polipo/examples/config.sample</span>\\n<span class=\\\"hljs-comment\\\"># and &quot;polipo -v&quot; for variables you can tweak and further information.</span>\\n\\nlogSyslog = falselogFile = /var/log/polipo/polipo.log\\nsocksParentProxy = <span class=\\\"hljs-string\\\">&quot;127.0.0.1:1080&quot;</span>\\nsocksProxyType = socks5\\nchunkHighMark = 50331648\\nobjectHighMark = 16384\\nserverMaxSlots = 64\\nserverSlots = 16\\nserverSlots1 = 32\\nproxyAddress = <span class=\\\"hljs-string\\\">&quot;0.0.0.0&quot;</span>\\nproxyPort = 8123\\n</code></pre>\\n</li>\\n<li><p>restart Polipo：</p>\\n<pre><code class=\\\"hljs language-bash\\\">/etc/init.d/polipo restart\\n</code></pre>\\n</li>\\n<li><p>set global http proxy for terminal：</p>\\n<pre><code class=\\\"hljs language-bash\\\"><span class=\\\"hljs-built_in\\\">export</span> http_proxy=”127.0.0.1:8123”\\n</code></pre>\\n<p>  for undo it ：</p>\\n<pre><code class=\\\"hljs language-bash\\\"><span class=\\\"hljs-built_in\\\">unset</span> http_proxy\\n</code></pre>\\n</li>\\n<li><p>check if proxy is success:</p>\\n<pre><code class=\\\"hljs language-bash\\\">curl google.com\\n</code></pre>\\n<p>there will be a response if success.</p>\\n</li>\\n</ul>\\n<h5 id=\\\"privoxy\\\">Privoxy</h5>\\n<p>For stable proxy, please use <a href=\\\"https://wiki.archlinux.org/index.php/Privoxy\\\">Privoxy</a></p>\\n<p><a href=\\\"http://www.privoxy.org/\\\">Privoxy</a> is a filtering proxy for the HTTP protocol, frequently used in combination with <a href=\\\"https://wiki.archlinux.org/index.php/Tor\\\">Tor</a>. Privoxy is a web proxy with advanced filtering capabilities for protecting privacy, filtering web page content, managing cookies, controlling access, and removing ads, banners, pop-ups, etc. It supports both stand-alone systems and multi-user networks.</p>\\n<p><a href=\\\"https://www.cnblogs.com/hongdada/p/10787924.html\\\">A tutorials</a></p>\\n<h4 id=\\\"chromium-with-switchyomega\\\">Chromium with SwitchyOmega</h4>\\n<p><a href=\\\"https://github.com/FelisCatus/SwitchyOmega/releases\\\">Download</a> and <a href=\\\"https://stackoverflow.com/questions/23091526/apps-extensions-and-scripts-cannot-be-added-from-this-website\\\">extract it</a>, open <code>developer mode</code> on <code>chrome://extensions</code> and &quot;Load unpacked&quot;.</p>\\n<p>New profile and then:</p>\\n<p><strong>Proxy servers</strong></p>\\n<table>\\n<thead>\\n<tr>\\n<th>Scheme</th>\\n<th>Protocol</th>\\n<th>Server</th>\\n<th>Port</th>\\n</tr>\\n</thead>\\n<tbody><tr>\\n<td>(default)</td>\\n<td>SOCKS5 ▼</td>\\n<td>127.0.0.1</td>\\n<td>1080</td>\\n</tr>\\n</tbody></table>\\n<h3 id=\\\"implement\\\">Implement</h3>\\n<p>As I said before, this task should set as a timing task for displaying tv news every 7:00 a.m.</p>\\n<p>So firstly, we prepare a script to:</p>\\n<ol>\\n<li>open <a href=\\\"https://www.cgtn.com/tv\\\">CGTN TV</a> the chromium with command line</li>\\n<li>mute/unmute the system volume</li>\\n<li>zoom in the video</li>\\n</ol>\\n<h4 id=\\\"step-1-tvsh\\\">Step 1: tv.sh</h4>\\n<pre><code class=\\\"hljs language-shell\\\"><span class=\\\"hljs-meta\\\">#</span><span class=\\\"language-bash\\\">!/bin/bash</span>\\nif [ $1 == open ]\\nthen \\n    amixer set PCM 0%\\n    chromium-browser https://www.cgtn.com/tv\\nfi\\nif [ $1 == play ]\\nthen \\n    amixer set PCM 100%\\n    python mouse.py\\nfi\\n</code></pre>\\n<p>Open <code>bash /../tv.sh open</code> and play <code>bash /../tv.sh play</code></p>\\n<h4 id=\\\"step-2-mousepy\\\">Step 2: mouse.py</h4>\\n<p>Use python code to control the mouse move and click to click the fullscreen button:</p>\\n<pre><code class=\\\"hljs language-bash\\\">sudo pip install PyUserInput\\n</code></pre>\\n<pre><code class=\\\"hljs language-python\\\"><span class=\\\"hljs-keyword\\\">from</span> pymouse <span class=\\\"hljs-keyword\\\">import</span> PyMouse\\nm = PyMouse()\\nx,y = <span class=\\\"hljs-number\\\">970</span>, <span class=\\\"hljs-number\\\">575</span>\\nm.move(x,y)\\nm.click(x,y)\\n</code></pre>\\n<h4 id=\\\"step-3-cron\\\">Step 3: cron</h4>\\n<pre><code class=\\\"hljs language-bash\\\">DISPLAY=:0\\n58 6 * * * bash /home/pi/tv.sh open \\n00 7 * * * bash /home/pi/tv.sh play\\n</code></pre>\\n<p>Set crontab by using <code>crontab -e</code> command, and choose your editor for editing crontab config file, then you can use <code>crontab -l</code> to display the config file.</p>\\n<p>Then restart the cron service  <code>/etc/init.d/cron restart</code>.</p>\\n<p>A GUI Package for crontab is recommended: <a href=\\\"https://github.com/alseambusher/crontab-ui\\\">crontab-gui</a></p>\\n<p>Please notice that we set env value of <code>DISPLAY</code> at line 1 is because if we want to open and gui app with crontab.</p>\\n<h4 id=\\\"more\\\">More</h4>\\n<p>At first, I want to choose BBC News or other foreign News Live websites, but then I realized the quality of the Live stream totally depend on the stability of my SSR source, so I quit using foreign sources and find CGTN.</p>\\n<p>Now everything are settled, enjoy your morning.</p>\\n\";","export default \"<p>Data Structures, Classes and Errors & Exceptions.</p>\\n<h2 id=\\\"e\\\">E</h2>\\n<h3 id=\\\"data-structures\\\">Data Structures</h3>\\n<h4 id=\\\"sequence-types--list-tuple-range\\\">Sequence Types — <a href=\\\"https://docs.python.org/3/library/stdtypes.html#list\\\"><code>list</code></a>, <a href=\\\"https://docs.python.org/3/library/stdtypes.html#tuple\\\"><code>tuple</code></a>, <a href=\\\"https://docs.python.org/3/library/stdtypes.html#range\\\"><code>range</code></a></h4>\\n<p>There are three basic sequence types: lists, tuples, and range objects. Additional sequence types tailored for processing of <a href=\\\"https://docs.python.org/3/library/stdtypes.html#binaryseq\\\">binary data</a> and <a href=\\\"https://docs.python.org/3/library/stdtypes.html#textseq\\\">text strings</a> are described in dedicated sections.</p>\\n<h4 id=\\\"common-sequence-operations\\\">Common Sequence Operations</h4>\\n<p>The operations in the following table are supported by most sequence types, both mutable and immutable. The <a href=\\\"https://docs.python.org/3/library/collections.abc.html#collections.abc.Sequence\\\"><code>collections.abc.Sequence</code></a> ABC is provided to make it easier to correctly implement these operations on custom sequence types.</p>\\n<table>\\n<thead>\\n<tr>\\n<th align=\\\"left\\\">Operation</th>\\n<th align=\\\"left\\\">Result</th>\\n</tr>\\n</thead>\\n<tbody><tr>\\n<td align=\\\"left\\\"><code>x in s</code></td>\\n<td align=\\\"left\\\"><code>True</code> if an item of <em>s</em> is equal to <em>x</em>, else <code>False</code></td>\\n</tr>\\n<tr>\\n<td align=\\\"left\\\"><code>x not in s</code></td>\\n<td align=\\\"left\\\"><code>False</code> if an item of <em>s</em> is equal to <em>x</em>, else <code>True</code></td>\\n</tr>\\n<tr>\\n<td align=\\\"left\\\"><code>s + t</code></td>\\n<td align=\\\"left\\\">the concatenation of <em>s</em> and <em>t</em></td>\\n</tr>\\n<tr>\\n<td align=\\\"left\\\"><code>s * n</code> or <code>n * s</code></td>\\n<td align=\\\"left\\\">equivalent to adding <em>s</em> to itself <em>n</em> times</td>\\n</tr>\\n<tr>\\n<td align=\\\"left\\\"><code>s[i]</code></td>\\n<td align=\\\"left\\\"><em>i</em>th item of <em>s</em>, origin 0</td>\\n</tr>\\n<tr>\\n<td align=\\\"left\\\"><code>s[i:j]</code></td>\\n<td align=\\\"left\\\">slice of <em>s</em> from <em>i</em> to <em>j</em></td>\\n</tr>\\n<tr>\\n<td align=\\\"left\\\"><code>s[i:j:k]</code></td>\\n<td align=\\\"left\\\">slice of <em>s</em> from <em>i</em> to <em>j</em> with step <em>k</em></td>\\n</tr>\\n<tr>\\n<td align=\\\"left\\\"><code>len(s)</code></td>\\n<td align=\\\"left\\\">length of <em>s</em></td>\\n</tr>\\n<tr>\\n<td align=\\\"left\\\"><code>min(s)</code></td>\\n<td align=\\\"left\\\">smallest item of <em>s</em></td>\\n</tr>\\n<tr>\\n<td align=\\\"left\\\"><code>max(s)</code></td>\\n<td align=\\\"left\\\">largest item of <em>s</em></td>\\n</tr>\\n<tr>\\n<td align=\\\"left\\\"><code>s.index(x[, i[, j]])</code></td>\\n<td align=\\\"left\\\">index of the first occurrence of <em>x</em> in <em>s</em> (at or after index <em>i</em> and before index <em>j</em>)</td>\\n</tr>\\n<tr>\\n<td align=\\\"left\\\"><code>s.count(x)</code></td>\\n<td align=\\\"left\\\">total number of occurrences of <em>x</em> in <em>s</em></td>\\n</tr>\\n</tbody></table>\\n<h4 id=\\\"immutable-sequence-types\\\">Immutable Sequence Types</h4>\\n<p>The only operation that immutable sequence types generally implement that is not also implemented by mutable sequence types is support for the <a href=\\\"https://docs.python.org/3/library/functions.html#hash\\\"><code>hash()</code></a> built-in.</p>\\n<p>This support allows immutable sequences, such as <a href=\\\"https://docs.python.org/3/library/stdtypes.html#tuple\\\"><code>tuple</code></a> instances, to be used as <a href=\\\"https://docs.python.org/3/library/stdtypes.html#dict\\\"><code>dict</code></a> keys and stored in <a href=\\\"https://docs.python.org/3/library/stdtypes.html#set\\\"><code>set</code></a> and <a href=\\\"https://docs.python.org/3/library/stdtypes.html#frozenset\\\"><code>frozenset</code></a> instances.</p>\\n<p>Attempting to hash an immutable sequence that contains unhashable values will result in <a href=\\\"https://docs.python.org/3/library/exceptions.html#TypeError\\\"><code>TypeError</code></a>.</p>\\n<h4 id=\\\"mutable-sequence-types\\\">Mutable Sequence Types</h4>\\n<p>The operations in the following table are defined on mutable sequence types. The <a href=\\\"https://docs.python.org/3/library/collections.abc.html#collections.abc.MutableSequence\\\"><code>collections.abc.MutableSequence</code></a> ABC is provided to make it easier to correctly implement these operations on custom sequence types.</p>\\n<table>\\n<thead>\\n<tr>\\n<th align=\\\"left\\\">Operation</th>\\n<th align=\\\"left\\\">Result</th>\\n</tr>\\n</thead>\\n<tbody><tr>\\n<td align=\\\"left\\\"><code>s[i] = x</code></td>\\n<td align=\\\"left\\\">item <em>i</em> of <em>s</em> is replaced by <em>x</em></td>\\n</tr>\\n<tr>\\n<td align=\\\"left\\\"><code>s[i:j] = t</code></td>\\n<td align=\\\"left\\\">slice of <em>s</em> from <em>i</em> to <em>j</em> is replaced by the contents of the iterable <em>t</em></td>\\n</tr>\\n<tr>\\n<td align=\\\"left\\\"><code>del s[i:j]</code></td>\\n<td align=\\\"left\\\">same as <code>s[i:j] = []</code></td>\\n</tr>\\n<tr>\\n<td align=\\\"left\\\"><code>s[i:j:k] = t</code></td>\\n<td align=\\\"left\\\">the elements of <code>s[i:j:k]</code> are replaced by those of <em>t</em></td>\\n</tr>\\n<tr>\\n<td align=\\\"left\\\"><code>del s[i:j:k]</code></td>\\n<td align=\\\"left\\\">removes the elements of <code>s[i:j:k]</code> from the list</td>\\n</tr>\\n<tr>\\n<td align=\\\"left\\\"><code>s.append(x)</code></td>\\n<td align=\\\"left\\\">appends <em>x</em> to the end of the sequence (same as <code>s[len(s):len(s)] = [x]</code>)</td>\\n</tr>\\n<tr>\\n<td align=\\\"left\\\"><code>s.clear()</code></td>\\n<td align=\\\"left\\\">removes all items from <em>s</em> (same as <code>del s[:]</code>)</td>\\n</tr>\\n<tr>\\n<td align=\\\"left\\\"><code>s.copy()</code></td>\\n<td align=\\\"left\\\">creates a shallow copy of <em>s</em> (same as <code>s[:]</code>)</td>\\n</tr>\\n<tr>\\n<td align=\\\"left\\\"><code>s.extend(t)</code> or <code>s += t</code></td>\\n<td align=\\\"left\\\">extends <em>s</em> with the contents of <em>t</em> (for the most part the same as <code>s[len(s):len(s)] = t</code>)</td>\\n</tr>\\n<tr>\\n<td align=\\\"left\\\"><code>s *= n</code></td>\\n<td align=\\\"left\\\">updates <em>s</em> with its contents repeated <em>n</em> times</td>\\n</tr>\\n<tr>\\n<td align=\\\"left\\\"><code>s.insert(i, x)</code></td>\\n<td align=\\\"left\\\">inserts <em>x</em> into <em>s</em> at the index given by <em>i</em> (same as <code>s[i:i] = [x]</code>)</td>\\n</tr>\\n<tr>\\n<td align=\\\"left\\\"><code>s.pop([i])</code></td>\\n<td align=\\\"left\\\">retrieves the item at <em>i</em> and also removes it from <em>s</em></td>\\n</tr>\\n<tr>\\n<td align=\\\"left\\\"><code>s.remove(x)</code></td>\\n<td align=\\\"left\\\">remove the first item from <em>s</em> where <code>s[i]</code> is equal to <em>x</em></td>\\n</tr>\\n<tr>\\n<td align=\\\"left\\\"><code>s.reverse()</code></td>\\n<td align=\\\"left\\\">reverses the items of <em>s</em> in place</td>\\n</tr>\\n</tbody></table>\\n<h4 id=\\\"list\\\">List</h4>\\n<h5 id=\\\"basic-operation\\\">Basic Operation</h5>\\n<p>Example:</p>\\n<pre><code class=\\\"hljs language-python\\\">l = []\\nl.append(<span class=\\\"hljs-number\\\">1</span>)\\nl.append(<span class=\\\"hljs-string\\\">&#x27;123&#x27;</span>)\\nl.extend([<span class=\\\"hljs-number\\\">2</span>,<span class=\\\"hljs-string\\\">&#x27;456&#x27;</span>])\\nl.insert(<span class=\\\"hljs-number\\\">9</span>, <span class=\\\"hljs-string\\\">&#x27;88&#x27;</span>)\\nl.insert(<span class=\\\"hljs-number\\\">0</span>, <span class=\\\"hljs-string\\\">&#x27;0&#x27;</span>)\\n<span class=\\\"hljs-built_in\\\">print</span>(l)\\n\\n<span class=\\\"hljs-built_in\\\">print</span>(l.pop(<span class=\\\"hljs-number\\\">1</span>))\\n<span class=\\\"hljs-built_in\\\">print</span>(l)\\n\\nll = l.copy()\\nl.clear()\\n<span class=\\\"hljs-built_in\\\">print</span>(l)\\nl.extend(ll)\\n\\n<span class=\\\"hljs-comment\\\"># ll and l contain different items</span>\\nll.pop(<span class=\\\"hljs-number\\\">2</span>)\\n<span class=\\\"hljs-built_in\\\">print</span>(l)\\n<span class=\\\"hljs-built_in\\\">print</span>(ll)\\n\\nl.extend([<span class=\\\"hljs-number\\\">1</span>,<span class=\\\"hljs-number\\\">2</span>,<span class=\\\"hljs-number\\\">1</span>,<span class=\\\"hljs-number\\\">1</span>,<span class=\\\"hljs-number\\\">2</span>,<span class=\\\"hljs-number\\\">1</span>])\\n<span class=\\\"hljs-built_in\\\">print</span>(l)\\n<span class=\\\"hljs-built_in\\\">print</span>(l.count(<span class=\\\"hljs-number\\\">1</span>)) <span class=\\\"hljs-comment\\\"># Return the number of times &#x27;1&#x27; appears in the list.</span>\\n</code></pre>\\n<p>Output:</p>\\n<pre><code class=\\\"hljs language-console\\\">[&#x27;0&#x27;, 1, &#x27;123&#x27;, 2, &#x27;456&#x27;, &#x27;88&#x27;]\\n1\\n[&#x27;0&#x27;, &#x27;123&#x27;, 2, &#x27;456&#x27;, &#x27;88&#x27;]\\n[]\\n[&#x27;0&#x27;, &#x27;123&#x27;, 2, &#x27;456&#x27;, &#x27;88&#x27;]\\n[&#x27;0&#x27;, &#x27;123&#x27;, &#x27;456&#x27;, &#x27;88&#x27;]\\n[&#x27;0&#x27;, &#x27;123&#x27;, 2, &#x27;456&#x27;, &#x27;88&#x27;, 1, 2, 1, 1, 2, 1]\\n4\\n</code></pre>\\n<p>Slice operation:</p>\\n<p>All slice operations return a new list containing the requested elements. This means that the following slice returns a <a href=\\\"https://docs.python.org/3/library/copy.html#shallow-vs-deep-copy\\\">shallow copy</a> of the list:</p>\\n<pre><code class=\\\"hljs language-python\\\"><span class=\\\"hljs-comment\\\"># slice operation</span>\\n<span class=\\\"hljs-built_in\\\">print</span>(l[:<span class=\\\"hljs-number\\\">3</span>])\\n<span class=\\\"hljs-built_in\\\">print</span>(l[<span class=\\\"hljs-number\\\">2</span>:<span class=\\\"hljs-number\\\">5</span>])\\n<span class=\\\"hljs-built_in\\\">print</span>(l[-<span class=\\\"hljs-number\\\">3</span>:])\\n</code></pre>\\n<blockquote>\\n<p>The difference between shallow and deep copying is only relevant for compound objects (objects that contain other objects, like lists or class instances):</p>\\n<ul>\\n<li>A <em>shallow copy</em> constructs a new compound object and then (to the extent possible) inserts <em>references</em> into it to the objects found in the original.</li>\\n<li>A <em>deep copy</em> constructs a new compound object and then, recursively, inserts <em>copies</em> into it of the objects found in the original.</li>\\n</ul>\\n</blockquote>\\n<h5 id=\\\"sort\\\">Sort</h5>\\n<pre><code class=\\\"hljs language-python\\\"><span class=\\\"hljs-comment\\\"># sort</span>\\nstudent_tuple = [\\n    (<span class=\\\"hljs-string\\\">&quot;Jack&quot;</span>, <span class=\\\"hljs-number\\\">12</span>),\\n    (<span class=\\\"hljs-string\\\">&quot;Mark&quot;</span>, <span class=\\\"hljs-number\\\">10</span>),\\n    (<span class=\\\"hljs-string\\\">&quot;Jim&quot;</span>, <span class=\\\"hljs-number\\\">15</span>),\\n]\\nstudent_tuple.sort(key=<span class=\\\"hljs-keyword\\\">lambda</span> student: student[<span class=\\\"hljs-number\\\">1</span>])\\n<span class=\\\"hljs-built_in\\\">print</span>(student_tuple)\\n\\n<span class=\\\"hljs-keyword\\\">class</span> <span class=\\\"hljs-title class_\\\">Student</span>:\\n    <span class=\\\"hljs-keyword\\\">def</span> <span class=\\\"hljs-title function_\\\">__init__</span>(<span class=\\\"hljs-params\\\">self, name, age</span>):\\n        self.name = name\\n        self.age = age\\n    <span class=\\\"hljs-keyword\\\">def</span> <span class=\\\"hljs-title function_\\\">__repr__</span>(<span class=\\\"hljs-params\\\">self</span>):\\n        <span class=\\\"hljs-keyword\\\">return</span> <span class=\\\"hljs-built_in\\\">repr</span>((self.name, self.age))\\n\\nstudent_obj = [\\n    Student(<span class=\\\"hljs-string\\\">&#x27;Jack&#x27;</span>, <span class=\\\"hljs-number\\\">12</span>),\\n    Student(<span class=\\\"hljs-string\\\">&#x27;Mark&#x27;</span>, <span class=\\\"hljs-number\\\">10</span>),\\n    Student(<span class=\\\"hljs-string\\\">&#x27;Jim&#x27;</span>, <span class=\\\"hljs-number\\\">15</span>),\\n]\\n\\n<span class=\\\"hljs-keyword\\\">from</span> operator <span class=\\\"hljs-keyword\\\">import</span> itemgetter, attrgetter\\n\\n<span class=\\\"hljs-built_in\\\">print</span>(<span class=\\\"hljs-built_in\\\">sorted</span>(student_tuple, key=itemgetter(<span class=\\\"hljs-number\\\">1</span>)))\\n<span class=\\\"hljs-built_in\\\">print</span>(<span class=\\\"hljs-built_in\\\">sorted</span>(student_obj, key=attrgetter(<span class=\\\"hljs-string\\\">&#x27;age&#x27;</span>)))\\n\\n<span class=\\\"hljs-comment\\\"># list comprehensions: a concise way to create lists</span>\\n<span class=\\\"hljs-built_in\\\">print</span>(<span class=\\\"hljs-built_in\\\">list</span>(<span class=\\\"hljs-built_in\\\">range</span>(<span class=\\\"hljs-number\\\">10</span>)))\\n<span class=\\\"hljs-built_in\\\">print</span>(<span class=\\\"hljs-built_in\\\">list</span>(<span class=\\\"hljs-built_in\\\">range</span>(<span class=\\\"hljs-number\\\">5</span>, <span class=\\\"hljs-number\\\">10</span>)))\\n</code></pre>\\n<p>Output:</p>\\n<pre><code class=\\\"hljs language-console\\\">[(&#x27;Mark&#x27;, 10), (&#x27;Jack&#x27;, 12), (&#x27;Jim&#x27;, 15)]     \\n[(&#x27;Mark&#x27;, 10), (&#x27;Jack&#x27;, 12), (&#x27;Jim&#x27;, 15)]\\n[(&#x27;Mark&#x27;, 10), (&#x27;Jack&#x27;, 12), (&#x27;Jim&#x27;, 15)]\\n</code></pre>\\n<h5 id=\\\"creation\\\">Creation</h5>\\n<p>Example:</p>\\n<pre><code class=\\\"hljs language-python\\\"><span class=\\\"hljs-comment\\\"># list comprehensions: a concise way to create lists</span>\\n<span class=\\\"hljs-built_in\\\">print</span>(<span class=\\\"hljs-built_in\\\">list</span>(<span class=\\\"hljs-built_in\\\">range</span>(<span class=\\\"hljs-number\\\">10</span>)))\\n<span class=\\\"hljs-built_in\\\">print</span>(<span class=\\\"hljs-built_in\\\">list</span>(<span class=\\\"hljs-built_in\\\">range</span>(<span class=\\\"hljs-number\\\">5</span>, <span class=\\\"hljs-number\\\">10</span>)))\\n\\n<span class=\\\"hljs-comment\\\">## for in clause</span>\\n<span class=\\\"hljs-comment\\\">### (result) for x in sequences</span>\\n<span class=\\\"hljs-built_in\\\">print</span>([x * <span class=\\\"hljs-number\\\">2</span> <span class=\\\"hljs-keyword\\\">for</span> x <span class=\\\"hljs-keyword\\\">in</span> <span class=\\\"hljs-built_in\\\">range</span>(<span class=\\\"hljs-number\\\">3</span>)])\\n<span class=\\\"hljs-comment\\\">### equivalent to</span>\\nsq = []\\n<span class=\\\"hljs-keyword\\\">for</span> x <span class=\\\"hljs-keyword\\\">in</span> <span class=\\\"hljs-built_in\\\">range</span>(<span class=\\\"hljs-number\\\">3</span>):\\n    sq.append(x * <span class=\\\"hljs-number\\\">2</span>)\\n<span class=\\\"hljs-built_in\\\">print</span>(sq)\\n\\n<span class=\\\"hljs-comment\\\">## if clause</span>\\n<span class=\\\"hljs-built_in\\\">print</span>([(x, y) <span class=\\\"hljs-keyword\\\">for</span> x <span class=\\\"hljs-keyword\\\">in</span> [<span class=\\\"hljs-number\\\">1</span>,<span class=\\\"hljs-number\\\">2</span>,<span class=\\\"hljs-number\\\">3</span>] <span class=\\\"hljs-keyword\\\">for</span> y <span class=\\\"hljs-keyword\\\">in</span> [<span class=\\\"hljs-number\\\">3</span>, <span class=\\\"hljs-number\\\">1</span>,<span class=\\\"hljs-number\\\">4</span>] <span class=\\\"hljs-keyword\\\">if</span> x!=y])\\n<span class=\\\"hljs-comment\\\">### equivalent to</span>\\nsq = []\\n<span class=\\\"hljs-keyword\\\">for</span> x <span class=\\\"hljs-keyword\\\">in</span> [<span class=\\\"hljs-number\\\">1</span>, <span class=\\\"hljs-number\\\">2</span>, <span class=\\\"hljs-number\\\">3</span>]:\\n    <span class=\\\"hljs-keyword\\\">for</span> y <span class=\\\"hljs-keyword\\\">in</span> [<span class=\\\"hljs-number\\\">3</span>, <span class=\\\"hljs-number\\\">1</span>, <span class=\\\"hljs-number\\\">4</span>]:\\n        <span class=\\\"hljs-keyword\\\">if</span> (x != y):\\n            sq.append((x, y))\\n<span class=\\\"hljs-built_in\\\">print</span>(sq)\\n\\n<span class=\\\"hljs-comment\\\">## lambda</span>\\n<span class=\\\"hljs-built_in\\\">print</span>(<span class=\\\"hljs-built_in\\\">list</span>(<span class=\\\"hljs-built_in\\\">map</span>(<span class=\\\"hljs-keyword\\\">lambda</span> x: x**<span class=\\\"hljs-number\\\">2</span>, <span class=\\\"hljs-built_in\\\">range</span>(<span class=\\\"hljs-number\\\">10</span>))))\\n<span class=\\\"hljs-comment\\\">### equivalent to</span>\\n<span class=\\\"hljs-built_in\\\">print</span>([x**<span class=\\\"hljs-number\\\">2</span> <span class=\\\"hljs-keyword\\\">for</span> x <span class=\\\"hljs-keyword\\\">in</span> <span class=\\\"hljs-built_in\\\">range</span>(<span class=\\\"hljs-number\\\">10</span>)])\\n\\n<span class=\\\"hljs-keyword\\\">from</span> math <span class=\\\"hljs-keyword\\\">import</span> pi\\n[<span class=\\\"hljs-built_in\\\">str</span>(<span class=\\\"hljs-built_in\\\">round</span>(pi, i)) <span class=\\\"hljs-keyword\\\">for</span> i <span class=\\\"hljs-keyword\\\">in</span> <span class=\\\"hljs-built_in\\\">range</span>(<span class=\\\"hljs-number\\\">1</span>, <span class=\\\"hljs-number\\\">6</span>)]\\n</code></pre>\\n<p>Output:</p>\\n<pre><code class=\\\"hljs language-console\\\">[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\\n[5, 6, 7, 8, 9]\\n[0, 2, 4]\\n[0, 2, 4]\\n[(1, 3), (1, 4), (2, 3), (2, 1), (2, 4), (3, 1), (3, 4)]\\n[(1, 3), (1, 4), (2, 3), (2, 1), (2, 4), (3, 1), (3, 4)]\\n[0, 1, 4, 9, 16, 25, 36, 49, 64, 81]\\n[&#x27;3.1&#x27;, &#x27;3.14&#x27;, &#x27;3.142&#x27;, &#x27;3.1416&#x27;, &#x27;3.14159&#x27;]\\n</code></pre>\\n<h4 id=\\\"tuples\\\">Tuples</h4>\\n<p>Example:</p>\\n<pre><code class=\\\"hljs language-python\\\"><span class=\\\"hljs-meta\\\">&gt;&gt;&gt; </span>t = <span class=\\\"hljs-number\\\">12345</span>, <span class=\\\"hljs-number\\\">54321</span>, <span class=\\\"hljs-string\\\">&#x27;hello!&#x27;</span>\\n<span class=\\\"hljs-meta\\\">&gt;&gt;&gt; </span>t[<span class=\\\"hljs-number\\\">0</span>]\\n<span class=\\\"hljs-number\\\">12345</span>\\n<span class=\\\"hljs-meta\\\">&gt;&gt;&gt; </span>t\\n(<span class=\\\"hljs-number\\\">12345</span>, <span class=\\\"hljs-number\\\">54321</span>, <span class=\\\"hljs-string\\\">&#x27;hello!&#x27;</span>)\\n<span class=\\\"hljs-meta\\\">&gt;&gt;&gt; </span><span class=\\\"hljs-comment\\\"># Tuples may be nested:</span>\\n<span class=\\\"hljs-meta\\\">... </span>u = t, (<span class=\\\"hljs-number\\\">1</span>, <span class=\\\"hljs-number\\\">2</span>, <span class=\\\"hljs-number\\\">3</span>, <span class=\\\"hljs-number\\\">4</span>, <span class=\\\"hljs-number\\\">5</span>)\\n<span class=\\\"hljs-meta\\\">&gt;&gt;&gt; </span>u\\n((<span class=\\\"hljs-number\\\">12345</span>, <span class=\\\"hljs-number\\\">54321</span>, <span class=\\\"hljs-string\\\">&#x27;hello!&#x27;</span>), (<span class=\\\"hljs-number\\\">1</span>, <span class=\\\"hljs-number\\\">2</span>, <span class=\\\"hljs-number\\\">3</span>, <span class=\\\"hljs-number\\\">4</span>, <span class=\\\"hljs-number\\\">5</span>))\\n<span class=\\\"hljs-meta\\\">&gt;&gt;&gt; </span><span class=\\\"hljs-comment\\\"># Tuples are immutable:</span>\\n<span class=\\\"hljs-meta\\\">... </span>t[<span class=\\\"hljs-number\\\">0</span>] = <span class=\\\"hljs-number\\\">88888</span>\\nTraceback (most recent call last):\\n  File <span class=\\\"hljs-string\\\">&quot;&lt;stdin&gt;&quot;</span>, line <span class=\\\"hljs-number\\\">1</span>, <span class=\\\"hljs-keyword\\\">in</span> &lt;module&gt;\\nTypeError: <span class=\\\"hljs-string\\\">&#x27;tuple&#x27;</span> <span class=\\\"hljs-built_in\\\">object</span> does <span class=\\\"hljs-keyword\\\">not</span> support item assignment\\n<span class=\\\"hljs-meta\\\">&gt;&gt;&gt; </span><span class=\\\"hljs-comment\\\"># but they can contain mutable objects:</span>\\n<span class=\\\"hljs-meta\\\">... </span>v = ([<span class=\\\"hljs-number\\\">1</span>, <span class=\\\"hljs-number\\\">2</span>, <span class=\\\"hljs-number\\\">3</span>], [<span class=\\\"hljs-number\\\">3</span>, <span class=\\\"hljs-number\\\">2</span>, <span class=\\\"hljs-number\\\">1</span>])\\n<span class=\\\"hljs-meta\\\">&gt;&gt;&gt; </span>v\\n([<span class=\\\"hljs-number\\\">1</span>, <span class=\\\"hljs-number\\\">2</span>, <span class=\\\"hljs-number\\\">3</span>], [<span class=\\\"hljs-number\\\">3</span>, <span class=\\\"hljs-number\\\">2</span>, <span class=\\\"hljs-number\\\">1</span>])\\n</code></pre>\\n<h4 id=\\\"sets\\\">Sets</h4>\\n<p>Example:</p>\\n<pre><code class=\\\"hljs language-python\\\">st = {<span class=\\\"hljs-string\\\">&#x27;apple&#x27;</span>, <span class=\\\"hljs-string\\\">&#x27;orange&#x27;</span>, <span class=\\\"hljs-string\\\">&#x27;grape&#x27;</span>, <span class=\\\"hljs-string\\\">&#x27;grape&#x27;</span>, <span class=\\\"hljs-string\\\">&#x27;apple&#x27;</span>}\\n<span class=\\\"hljs-built_in\\\">print</span>(st)\\n\\n<span class=\\\"hljs-built_in\\\">print</span>(<span class=\\\"hljs-string\\\">&#x27;apple&#x27;</span> <span class=\\\"hljs-keyword\\\">in</span> st)\\n<span class=\\\"hljs-built_in\\\">print</span>(<span class=\\\"hljs-string\\\">&#x27;cat&#x27;</span> <span class=\\\"hljs-keyword\\\">in</span> st)\\n\\ns1 = {<span class=\\\"hljs-number\\\">1</span>, <span class=\\\"hljs-number\\\">2</span>, <span class=\\\"hljs-number\\\">3</span>, <span class=\\\"hljs-number\\\">4</span>, <span class=\\\"hljs-number\\\">5</span>}\\ns2 = {<span class=\\\"hljs-number\\\">4</span>, <span class=\\\"hljs-number\\\">5</span>, <span class=\\\"hljs-number\\\">6</span>, <span class=\\\"hljs-number\\\">7</span>, <span class=\\\"hljs-number\\\">8</span>}\\n\\n<span class=\\\"hljs-comment\\\"># in both a and b</span>\\n<span class=\\\"hljs-built_in\\\">print</span>(s1 & s2)\\n<span class=\\\"hljs-comment\\\"># in a or b or both</span>\\n<span class=\\\"hljs-built_in\\\">print</span>(s1 | s2)\\n<span class=\\\"hljs-comment\\\"># in a but not in b</span>\\n<span class=\\\"hljs-built_in\\\">print</span>(s1 - s2)\\n<span class=\\\"hljs-comment\\\"># in b but not in a</span>\\n<span class=\\\"hljs-built_in\\\">print</span>(s2 - s1)\\n\\n<span class=\\\"hljs-comment\\\"># in a or b but not both</span>\\n<span class=\\\"hljs-built_in\\\">print</span>(s1 ^ s2)\\n\\n<span class=\\\"hljs-comment\\\"># comprehensions </span>\\n<span class=\\\"hljs-built_in\\\">print</span>({x <span class=\\\"hljs-keyword\\\">for</span> x <span class=\\\"hljs-keyword\\\">in</span> <span class=\\\"hljs-string\\\">&#x27;abcdefgh&#x27;</span> <span class=\\\"hljs-keyword\\\">if</span> x <span class=\\\"hljs-keyword\\\">not</span> <span class=\\\"hljs-keyword\\\">in</span> <span class=\\\"hljs-string\\\">&#x27;efg&#x27;</span>})\\n</code></pre>\\n<p>Output:</p>\\n<pre><code class=\\\"hljs language-console\\\">{&#x27;apple&#x27;, &#x27;orange&#x27;, &#x27;grape&#x27;}\\nTrue\\nFalse\\n{4, 5}\\n{1, 2, 3, 4, 5, 6, 7, 8}\\n{1, 2, 3}\\n{8, 6, 7}\\n{1, 2, 3, 6, 7, 8}\\n{&#x27;c&#x27;, &#x27;a&#x27;, &#x27;d&#x27;, &#x27;h&#x27;, &#x27;b&#x27;}\\n</code></pre>\\n<h4 id=\\\"dictionaries\\\">Dictionaries</h4>\\n<p>Example:</p>\\n<pre><code class=\\\"hljs language-python\\\">d = {<span class=\\\"hljs-string\\\">&#x27;a&#x27;</span>: <span class=\\\"hljs-number\\\">1</span>, <span class=\\\"hljs-string\\\">&#x27;b&#x27;</span>:<span class=\\\"hljs-number\\\">2</span>}\\n\\n<span class=\\\"hljs-comment\\\"># return keys list</span>\\n<span class=\\\"hljs-built_in\\\">print</span>(<span class=\\\"hljs-built_in\\\">list</span>(d))\\n<span class=\\\"hljs-comment\\\"># get the number of items</span>\\n<span class=\\\"hljs-built_in\\\">print</span>(<span class=\\\"hljs-built_in\\\">len</span>(d))\\n\\n<span class=\\\"hljs-built_in\\\">print</span>(d[<span class=\\\"hljs-string\\\">&#x27;a&#x27;</span>])\\nd[<span class=\\\"hljs-string\\\">&#x27;c&#x27;</span>] = <span class=\\\"hljs-number\\\">3</span>\\n<span class=\\\"hljs-built_in\\\">print</span>(d)\\n<span class=\\\"hljs-comment\\\"># delete item</span>\\n<span class=\\\"hljs-keyword\\\">del</span> d[<span class=\\\"hljs-string\\\">&#x27;c&#x27;</span>]\\n<span class=\\\"hljs-built_in\\\">print</span>(d)\\n\\n<span class=\\\"hljs-comment\\\"># remove all items</span>\\nd.clear()\\n<span class=\\\"hljs-built_in\\\">print</span>(d)\\n\\n<span class=\\\"hljs-comment\\\"># raise KeyError when no key in dict</span>\\n<span class=\\\"hljs-keyword\\\">import</span> sys\\n<span class=\\\"hljs-keyword\\\">try</span>:\\n    <span class=\\\"hljs-built_in\\\">print</span>(d[<span class=\\\"hljs-string\\\">&#x27;e&#x27;</span>])\\n<span class=\\\"hljs-keyword\\\">except</span>:\\n    <span class=\\\"hljs-built_in\\\">print</span>(<span class=\\\"hljs-string\\\">&#x27;Get error from sys&#x27;</span>)\\n    <span class=\\\"hljs-built_in\\\">print</span>(sys.exc_info())\\n    <span class=\\\"hljs-comment\\\"># raise</span>\\n\\n<span class=\\\"hljs-built_in\\\">print</span>(<span class=\\\"hljs-string\\\">&#x27;after error&#x27;</span>)\\n\\nd = {<span class=\\\"hljs-string\\\">&#x27;a&#x27;</span>: <span class=\\\"hljs-number\\\">1</span>, <span class=\\\"hljs-string\\\">&#x27;b&#x27;</span>:<span class=\\\"hljs-number\\\">2</span>}\\n<span class=\\\"hljs-comment\\\"># return None when no such key in dict so that it will never raise the KeyError</span>\\n<span class=\\\"hljs-built_in\\\">print</span>(d.get(<span class=\\\"hljs-string\\\">&#x27;e&#x27;</span>))\\n<span class=\\\"hljs-built_in\\\">print</span>(d.get(<span class=\\\"hljs-string\\\">&#x27;e&#x27;</span>, <span class=\\\"hljs-number\\\">0</span>))\\n\\n<span class=\\\"hljs-built_in\\\">print</span>(d.keys())\\n<span class=\\\"hljs-built_in\\\">print</span>(d.items())\\n<span class=\\\"hljs-keyword\\\">for</span> k, v <span class=\\\"hljs-keyword\\\">in</span> d.items():\\n    <span class=\\\"hljs-built_in\\\">print</span>(k, v)\\n<span class=\\\"hljs-built_in\\\">print</span>(d.values())\\n\\nit = d.__iter__()\\n<span class=\\\"hljs-keyword\\\">for</span> key <span class=\\\"hljs-keyword\\\">in</span> it:\\n    <span class=\\\"hljs-built_in\\\">print</span>(key, d[key])\\n</code></pre>\\n<p>Output:</p>\\n<pre><code class=\\\"hljs language-console\\\">[&#x27;a&#x27;, &#x27;b&#x27;]\\n2\\n1\\n{&#x27;a&#x27;: 1, &#x27;b&#x27;: 2, &#x27;c&#x27;: 3}\\n{&#x27;a&#x27;: 1, &#x27;b&#x27;: 2}\\n{}\\nGet error from sys\\n(&lt;class &#x27;KeyError&#x27;&gt;, KeyError(&#x27;e&#x27;), &lt;traceback object at 0x000001FF722B2D48&gt;)\\nafter error\\nNone\\n0\\ndict_keys([&#x27;a&#x27;, &#x27;b&#x27;])\\ndict_items([(&#x27;a&#x27;, 1), (&#x27;b&#x27;, 2)])\\na 1\\nb 2\\ndict_values([1, 2])\\na 1\\nb 2\\n</code></pre>\\n<h2 id=\\\"f\\\">F</h2>\\n<h3 id=\\\"classes\\\">Classes</h3>\\n<h4 id=\\\"namespaces-and-scopes\\\">Namespaces And Scopes</h4>\\n<h5 id=\\\"namespaces\\\">Namespaces</h5>\\n<p>A <em>namespace</em> is a mapping from names to objects. Most namespaces are currently implemented as Python dictionaries, but that’s normally not noticeable in any way (except for performance), and it may change in the future. </p>\\n<p>Examples of namespaces are: </p>\\n<ul>\\n<li>the set of built-in names (containing functions such as <a href=\\\"https://docs.python.org/3/library/functions.html#abs\\\"><code>abs()</code></a>, and built-in exception names); </li>\\n<li>the global names in a module; </li>\\n<li>the local names in a function invocation;</li>\\n</ul>\\n<p>In a sense the set of attributes of an object also form a namespace. </p>\\n<p>Namespaces are created at <strong>different moments</strong> and have different lifetimes. </p>\\n<ul>\\n<li>The namespace containing the built-in names is created when <strong>the Python interpreter starts up</strong>, and is never deleted. </li>\\n<li>The global namespace for a module is created when <strong>the module definition is read in</strong>; normally, module namespaces also last until the interpreter quits. </li>\\n<li>The local namespace for a function is created <strong>when the function is called</strong>, and deleted when the function returns or raises an exception that is not handled within the function.</li>\\n</ul>\\n<h5 id=\\\"scopes\\\">Scopes</h5>\\n<p>A <em>scope</em> is a textual region of a Python program where a namespace is directly accessible. “Directly accessible” here means that an unqualified reference to a name attempts to find the name in the namespace.</p>\\n<h5 id=\\\"global-and-nonlocal-statement\\\"><code>global</code> and <code>nonlocal</code> statement</h5>\\n<p>The <a href=\\\"https://docs.python.org/3/reference/simple_stmts.html#global\\\"><code>global</code></a> statement is a declaration which holds for the entire current code block. It means that the listed identifiers are to be interpreted as globals. It would be impossible to assign to a global variable without <code>global</code>, although free variables may refer to globals without being declared global.</p>\\n<p>The <a href=\\\"https://docs.python.org/3/reference/simple_stmts.html#nonlocal\\\"><code>nonlocal</code></a> statement causes the listed identifiers to refer to previously bound variables in the nearest enclosing scope excluding globals. This is important because the default behavior for binding is to search the local namespace first. The statement allows encapsulated code to rebind variables outside of the local scope besides the global (module) scope.</p>\\n<pre><code class=\\\"hljs language-python\\\"><span class=\\\"hljs-keyword\\\">def</span> <span class=\\\"hljs-title function_\\\">scope_test</span>():\\n    <span class=\\\"hljs-keyword\\\">def</span> <span class=\\\"hljs-title function_\\\">do_local</span>():\\n        spam = <span class=\\\"hljs-string\\\">&quot;local spam&quot;</span>        <span class=\\\"hljs-comment\\\"># current enclosing scope (here is `do_local()`)</span>\\n\\n    <span class=\\\"hljs-keyword\\\">def</span> <span class=\\\"hljs-title function_\\\">do_nonlocal</span>():\\n        <span class=\\\"hljs-keyword\\\">nonlocal</span> spam            <span class=\\\"hljs-comment\\\"># up level enclosing scope (here is `scope_test()`)</span>\\n        spam = <span class=\\\"hljs-string\\\">&quot;nonlocal spam&quot;</span>\\n\\n    <span class=\\\"hljs-keyword\\\">def</span> <span class=\\\"hljs-title function_\\\">do_global</span>():\\n        <span class=\\\"hljs-keyword\\\">global</span> spam                <span class=\\\"hljs-comment\\\"># global scope (entire current code block)</span>\\n        spam = <span class=\\\"hljs-string\\\">&quot;global spam&quot;</span>\\n\\n    spam = <span class=\\\"hljs-string\\\">&quot;test spam&quot;</span>\\n    do_local()\\n    <span class=\\\"hljs-built_in\\\">print</span>(<span class=\\\"hljs-string\\\">&quot;After local assignment:&quot;</span>, spam)\\n    do_nonlocal()\\n    <span class=\\\"hljs-built_in\\\">print</span>(<span class=\\\"hljs-string\\\">&quot;After nonlocal assignment:&quot;</span>, spam)\\n    do_global()\\n    <span class=\\\"hljs-built_in\\\">print</span>(<span class=\\\"hljs-string\\\">&quot;After global assignment:&quot;</span>, spam)\\n\\nscope_test()\\n<span class=\\\"hljs-built_in\\\">print</span>(<span class=\\\"hljs-string\\\">&quot;In global scope:&quot;</span>, spam)\\n</code></pre>\\n<p>Output:</p>\\n<pre><code class=\\\"hljs language-console\\\">fter local assignment: test spam\\nAfter nonlocal assignment: nonlocal spam\\nAfter global assignment: nonlocal spam\\nIn global scope: global spam\\n</code></pre>\\n<p>Note how the <em>local</em> assignment (which is default) didn’t change <em>scope_test</em>’s binding of <em>spam</em>. The <a href=\\\"https://docs.python.org/3/reference/simple_stmts.html#nonlocal\\\"><code>nonlocal</code></a> assignment changed <em>scope_test</em>’s binding of <em>spam</em>, and the <a href=\\\"https://docs.python.org/3/reference/simple_stmts.html#global\\\"><code>global</code></a> assignment changed the module-level binding.</p>\\n<h4 id=\\\"defining-a-class\\\">Defining A Class</h4>\\n<pre><code class=\\\"hljs language-python\\\"><span class=\\\"hljs-keyword\\\">class</span> <span class=\\\"hljs-title class_\\\">Person</span>:\\n    <span class=\\\"hljs-string\\\">&quot;&quot;&quot;here is __doc__ content\\\\\\n    &quot;&quot;&quot;</span>\\n\\n    <span class=\\\"hljs-comment\\\"># class variables/attributes which be shared in all instances</span>\\n    kind = <span class=\\\"hljs-string\\\">&#x27;human_being&#x27;</span>\\n\\n    <span class=\\\"hljs-comment\\\"># construct function</span>\\n    <span class=\\\"hljs-keyword\\\">def</span> <span class=\\\"hljs-title function_\\\">__init__</span>(<span class=\\\"hljs-params\\\">self, name, age</span>):\\n        <span class=\\\"hljs-built_in\\\">super</span>().__init__()\\n        <span class=\\\"hljs-comment\\\"># instance&#x27;s vairables/attributes</span>\\n        self.name, self.age = name, age\\n\\n        <span class=\\\"hljs-comment\\\"># private attr with one underscores</span>\\n        self._sname = <span class=\\\"hljs-string\\\">&#x27;_&#x27;</span> + name\\n\\n        <span class=\\\"hljs-comment\\\"># private attr with at lease two underscores</span>\\n        self.__ssname = <span class=\\\"hljs-string\\\">&#x27;__&#x27;</span> + name\\n\\n    <span class=\\\"hljs-comment\\\"># common function</span>\\n    <span class=\\\"hljs-keyword\\\">def</span> <span class=\\\"hljs-title function_\\\">changename</span>(<span class=\\\"hljs-params\\\">self, name</span>):\\n        self.name = name\\n\\n    <span class=\\\"hljs-keyword\\\">def</span> <span class=\\\"hljs-title function_\\\">getsname</span>(<span class=\\\"hljs-params\\\">self</span>):\\n        <span class=\\\"hljs-keyword\\\">return</span> self._sname\\n\\n    <span class=\\\"hljs-keyword\\\">def</span> <span class=\\\"hljs-title function_\\\">getssname</span>(<span class=\\\"hljs-params\\\">self</span>):\\n        <span class=\\\"hljs-comment\\\"># mangling: Any identifier of the form __spam is textually replaced with _classname__spam</span>\\n        <span class=\\\"hljs-keyword\\\">return</span> self._Person__ssname\\n</code></pre>\\n<p>The code above has shown that:</p>\\n<ol>\\n<li>how to define a class</li>\\n<li>construct function</li>\\n<li>private field & static field</li>\\n<li>some weird behavior of attribute naming</li>\\n</ol>\\n<p>You might notice that every function&#39;s definition has the <code>self</code> argument as the first parameter. With this argument, this function will be defined as a instance function and can not be called by using <code>MyClass.func()</code> form.</p>\\n<p>So how do we define a static function? --- By using the <code>@staticmethod</code> decorator, or <code>@classmethod</code> as well.</p>\\n<pre><code class=\\\"hljs language-python\\\"><span class=\\\"hljs-keyword\\\">class</span> <span class=\\\"hljs-title class_\\\">New</span>:\\n<span class=\\\"hljs-meta\\\">    @classmethod</span>\\n    <span class=\\\"hljs-keyword\\\">def</span> <span class=\\\"hljs-title function_\\\">printc</span>(<span class=\\\"hljs-params\\\">cls</span>):\\n        <span class=\\\"hljs-built_in\\\">print</span>(<span class=\\\"hljs-string\\\">&#x27;This is an class method&#x27;</span>)\\n        <span class=\\\"hljs-built_in\\\">print</span>(cls)\\n<span class=\\\"hljs-meta\\\">    @staticmethod</span>\\n    <span class=\\\"hljs-keyword\\\">def</span> <span class=\\\"hljs-title function_\\\">prints</span>(<span class=\\\"hljs-params\\\">name</span>):\\n        <span class=\\\"hljs-built_in\\\">print</span>(<span class=\\\"hljs-string\\\">&#x27;This is a static method with name: {}&#x27;</span>.<span class=\\\"hljs-built_in\\\">format</span>(name))\\n\\nNew.printc()\\nNew.prints(<span class=\\\"hljs-string\\\">&#x27;Name&#x27;</span>)\\n</code></pre>\\n<p>Output:</p>\\n<pre><code class=\\\"hljs language-console\\\">This is an class method\\n&lt;class &#x27;__main__.New&#x27;&gt;\\nThis is a static method with name: Name\\ncls\\n</code></pre>\\n<h4 id=\\\"inheritance\\\">Inheritance</h4>\\n<pre><code class=\\\"hljs language-python\\\"><span class=\\\"hljs-comment\\\"># inheritance</span>\\n<span class=\\\"hljs-keyword\\\">class</span> <span class=\\\"hljs-title class_\\\">Worker</span>(<span class=\\\"hljs-title class_ inherited__\\\">Person</span>):\\n    <span class=\\\"hljs-keyword\\\">def</span> <span class=\\\"hljs-title function_\\\">__init__</span>(<span class=\\\"hljs-params\\\">self, name, age, career</span>):\\n        <span class=\\\"hljs-built_in\\\">super</span>().__init__(name, age)\\n        self.career = career\\n\\nw = Worker(<span class=\\\"hljs-string\\\">&#x27;Jim&#x27;</span>, <span class=\\\"hljs-number\\\">22</span>, <span class=\\\"hljs-string\\\">&#x27;Driver&#x27;</span>)\\n<span class=\\\"hljs-built_in\\\">print</span>(w.career)\\n</code></pre>\\n<p>Python has two built-in functions that work with inheritance:</p>\\n<ul>\\n<li>Use <a href=\\\"https://docs.python.org/3/library/functions.html#isinstance\\\"><code>isinstance()</code></a> to check an instance’s type: <code>isinstance(obj, int)</code> will be <code>True</code> only if <code>obj.__class__</code> is <a href=\\\"https://docs.python.org/3/library/functions.html#int\\\"><code>int</code></a> or some class derived from <a href=\\\"https://docs.python.org/3/library/functions.html#int\\\"><code>int</code></a>.</li>\\n<li>Use <a href=\\\"https://docs.python.org/3/library/functions.html#issubclass\\\"><code>issubclass()</code></a> to check class inheritance: <code>issubclass(bool, int)</code> is <code>True</code> since <a href=\\\"https://docs.python.org/3/library/functions.html#bool\\\"><code>bool</code></a> is a subclass of <a href=\\\"https://docs.python.org/3/library/functions.html#int\\\"><code>int</code></a>. However, <code>issubclass(float, int)</code> is <code>False</code> since <a href=\\\"https://docs.python.org/3/library/functions.html#float\\\"><code>float</code></a> is not a subclass of <a href=\\\"https://docs.python.org/3/library/functions.html#int\\\"><code>int</code></a>.</li>\\n</ul>\\n<h4 id=\\\"multiple-inheritance\\\">Multiple Inheritance</h4>\\n<p>Python supports a form of multiple inheritance as well. A class definition with multiple base classes looks like this:</p>\\n<pre><code class=\\\"hljs language-python\\\"><span class=\\\"hljs-keyword\\\">class</span> <span class=\\\"hljs-title class_\\\">DerivedClassName</span>(Base1, Base2, Base3):\\n    &lt;statement-<span class=\\\"hljs-number\\\">1</span>&gt;\\n    .\\n    &lt;statement-N&gt;\\n</code></pre>\\n<h4 id=\\\"iterating-instances\\\">Iterating Instances</h4>\\n<p>If we want our self-make instance iterable (iterating some attribute of it), we should implement the <code>__iter__</code> and the <code>__next__</code> function</p>\\n<pre><code class=\\\"hljs language-python\\\"><span class=\\\"hljs-comment\\\"># iterator: object can be looped over using a for statement</span>\\n<span class=\\\"hljs-keyword\\\">class</span> <span class=\\\"hljs-title class_\\\">Str</span>:\\n    <span class=\\\"hljs-keyword\\\">def</span> <span class=\\\"hljs-title function_\\\">__init__</span>(<span class=\\\"hljs-params\\\">self, <span class=\\\"hljs-built_in\\\">str</span></span>):\\n        <span class=\\\"hljs-built_in\\\">super</span>().__init__()\\n        self.<span class=\\\"hljs-built_in\\\">str</span> = <span class=\\\"hljs-built_in\\\">str</span>\\n        self.index = <span class=\\\"hljs-number\\\">0</span>\\n    \\n    <span class=\\\"hljs-comment\\\"># make object iterable</span>\\n    <span class=\\\"hljs-keyword\\\">def</span> <span class=\\\"hljs-title function_\\\">__iter__</span>(<span class=\\\"hljs-params\\\">self</span>):\\n        <span class=\\\"hljs-keyword\\\">return</span> self\\n\\n    <span class=\\\"hljs-keyword\\\">def</span> <span class=\\\"hljs-title function_\\\">__next__</span>(<span class=\\\"hljs-params\\\">self</span>):\\n        <span class=\\\"hljs-keyword\\\">if</span> self.index == <span class=\\\"hljs-built_in\\\">len</span>(self.<span class=\\\"hljs-built_in\\\">str</span>):\\n            <span class=\\\"hljs-comment\\\"># raise StopIteration to stop the for loop</span>\\n            <span class=\\\"hljs-keyword\\\">raise</span> StopIteration\\n        <span class=\\\"hljs-keyword\\\">else</span>:\\n            rs = self.<span class=\\\"hljs-built_in\\\">str</span>[self.index]\\n            self.index = self.index + <span class=\\\"hljs-number\\\">1</span>\\n            <span class=\\\"hljs-keyword\\\">return</span> rs\\n\\n<span class=\\\"hljs-keyword\\\">for</span> c <span class=\\\"hljs-keyword\\\">in</span> Str(<span class=\\\"hljs-string\\\">&#x27;abcde&#x27;</span>):\\n    <span class=\\\"hljs-built_in\\\">print</span>(c, end=<span class=\\\"hljs-string\\\">&#x27; &#x27;</span>)\\n<span class=\\\"hljs-built_in\\\">print</span>()\\n<span class=\\\"hljs-comment\\\"># a b c d e</span>\\n</code></pre>\\n<h4 id=\\\"printing-instances\\\">Printing Instances</h4>\\n<p>Example:</p>\\n<pre><code class=\\\"hljs language-python\\\"><span class=\\\"hljs-keyword\\\">class</span> <span class=\\\"hljs-title class_\\\">Person</span>:\\n    <span class=\\\"hljs-keyword\\\">def</span> <span class=\\\"hljs-title function_\\\">__init__</span>(<span class=\\\"hljs-params\\\">self, name, age</span>):\\n        <span class=\\\"hljs-built_in\\\">super</span>().__init__()\\n        self.__name = name\\n        self.__age = age\\n\\n    <span class=\\\"hljs-keyword\\\">def</span> <span class=\\\"hljs-title function_\\\">__repr__</span>(<span class=\\\"hljs-params\\\">self</span>):\\n        <span class=\\\"hljs-comment\\\"># we use json form so that it can be recreated in another application</span>\\n        <span class=\\\"hljs-keyword\\\">return</span> <span class=\\\"hljs-string\\\">&#x27;{{name: {}, age: {}}}&#x27;</span>.<span class=\\\"hljs-built_in\\\">format</span>(self.__name, self.__age)\\n\\n    <span class=\\\"hljs-keyword\\\">def</span> <span class=\\\"hljs-title function_\\\">__str__</span>(<span class=\\\"hljs-params\\\">self</span>):\\n        <span class=\\\"hljs-keyword\\\">return</span> <span class=\\\"hljs-string\\\">&#x27;Person name: {}, age: {}&#x27;</span>.<span class=\\\"hljs-built_in\\\">format</span>(self.__name, self.__age)\\n\\np = Person(<span class=\\\"hljs-string\\\">&#x27;Jack&#x27;</span>, <span class=\\\"hljs-number\\\">12</span>)\\n<span class=\\\"hljs-built_in\\\">print</span>(p)\\n<span class=\\\"hljs-built_in\\\">print</span>(<span class=\\\"hljs-built_in\\\">repr</span>(p))\\n</code></pre>\\n<p>Output:</p>\\n<pre><code class=\\\"hljs language-console\\\">Person name: Jack, age: 12\\n{name: Jack, age: 12}\\n</code></pre>\\n<p>And if we remove the implementation of <code>__repr__()</code>, it will pinrt:</p>\\n<pre><code class=\\\"hljs language-console\\\">Person name: Jack, age: 12\\n&lt;__main__.Person object at 0x000001F84F086630&gt;\\n</code></pre>\\n<p>There are two ways in python that we can print a readable string of a instance -- to implement the <code>__repr__()</code> or <code>__str__()</code> .</p>\\n<p>Technically, there is no different between these two methods, but we should follow some rules when we implement them:</p>\\n<blockquote>\\n<p>For <code>__repr__</code>:</p>\\n<p>Called by the <a href=\\\"https://docs.python.org/3/library/functions.html#repr\\\"><code>repr()</code></a> built-in function to compute the “official” string representation of an object. If at all possible, this should look like a valid Python expression that could be used to recreate an object with the same value (given an appropriate environment). If this is not possible, a string of the form <code>&lt;...some useful description...&gt;</code> should be returned. The return value must be a string object. If a class defines <a href=\\\"https://docs.python.org/3/reference/datamodel.html#object.__repr__\\\"><code>__repr__()</code></a> but not <a href=\\\"https://docs.python.org/3/reference/datamodel.html#object.__str__\\\"><code>__str__()</code></a>, then <a href=\\\"https://docs.python.org/3/reference/datamodel.html#object.__repr__\\\"><code>__repr__()</code></a> is also used when an “informal” string representation of instances of that class is required.</p>\\n</blockquote>\\n<blockquote>\\n<p>For <code>__str__</code>:</p>\\n<p>Called by <a href=\\\"https://docs.python.org/3/library/stdtypes.html#str\\\"><code>str(object)</code></a> and the built-in functions <a href=\\\"https://docs.python.org/3/library/functions.html#format\\\"><code>format()</code></a> and <a href=\\\"https://docs.python.org/3/library/functions.html#print\\\"><code>print()</code></a> to compute the “informal” or nicely printable string representation of an object. The return value must be a <a href=\\\"https://docs.python.org/3/library/stdtypes.html#textseq\\\">string</a> object.</p>\\n</blockquote>\\n<h4 id=\\\"more-on-private-attributes\\\">More On Private Attributes</h4>\\n<p>It is clear that we set an attribute to private for safely visitation, but it make the attribute visitation syntactically more complicated.</p>\\n<p>We can use <code>@property</code> and  <code>@attr.setter</code> decorators to make it simple. </p>\\n<p>What&#39;s more , we can use <code>@attr.deleter</code>.</p>\\n<pre><code class=\\\"hljs language-python\\\"><span class=\\\"hljs-keyword\\\">class</span> <span class=\\\"hljs-title class_\\\">Person</span>:\\n    <span class=\\\"hljs-comment\\\"># a getter for age</span>\\n<span class=\\\"hljs-meta\\\">    @property</span>\\n    <span class=\\\"hljs-keyword\\\">def</span> <span class=\\\"hljs-title function_\\\">age</span>(<span class=\\\"hljs-params\\\">self</span>):\\n        <span class=\\\"hljs-keyword\\\">return</span> self._age\\n\\n    <span class=\\\"hljs-comment\\\"># a setter for age</span>\\n<span class=\\\"hljs-meta\\\">    @age.setter</span>\\n    <span class=\\\"hljs-keyword\\\">def</span> <span class=\\\"hljs-title function_\\\">age</span>(<span class=\\\"hljs-params\\\">self, age</span>):\\n        <span class=\\\"hljs-keyword\\\">if</span> <span class=\\\"hljs-keyword\\\">not</span> <span class=\\\"hljs-built_in\\\">isinstance</span>(age, <span class=\\\"hljs-built_in\\\">int</span>):\\n            <span class=\\\"hljs-keyword\\\">raise</span> ValueError(<span class=\\\"hljs-string\\\">&#x27;Age should be an integer.&#x27;</span>)\\n        <span class=\\\"hljs-keyword\\\">if</span> age &lt; <span class=\\\"hljs-number\\\">0</span> <span class=\\\"hljs-keyword\\\">or</span> age &gt; <span class=\\\"hljs-number\\\">100</span>:\\n            <span class=\\\"hljs-keyword\\\">raise</span> ValueError(<span class=\\\"hljs-string\\\">&#x27;Age should between 0 ~ 100&#x27;</span>)\\n        <span class=\\\"hljs-keyword\\\">else</span>:\\n            self._age = age\\n    \\n<span class=\\\"hljs-meta\\\">    @age.deleter</span>\\n    <span class=\\\"hljs-keyword\\\">def</span> <span class=\\\"hljs-title function_\\\">age</span>(<span class=\\\"hljs-params\\\">self</span>):\\n        <span class=\\\"hljs-comment\\\"># more logic can be put in here</span>\\n        <span class=\\\"hljs-keyword\\\">del</span> self._age\\n\\n    <span class=\\\"hljs-keyword\\\">def</span> <span class=\\\"hljs-title function_\\\">__str__</span>(<span class=\\\"hljs-params\\\">self</span>):\\n        <span class=\\\"hljs-keyword\\\">return</span> <span class=\\\"hljs-string\\\">&#x27;Person: age:{}&#x27;</span>.<span class=\\\"hljs-built_in\\\">format</span>(self._age)\\n\\np = Person()\\n<span class=\\\"hljs-keyword\\\">import</span> traceback\\n<span class=\\\"hljs-keyword\\\">try</span>:\\n    p.age = <span class=\\\"hljs-number\\\">1000</span>\\n<span class=\\\"hljs-keyword\\\">except</span>:\\n    <span class=\\\"hljs-built_in\\\">print</span>(<span class=\\\"hljs-number\\\">100</span> * <span class=\\\"hljs-string\\\">&#x27;-&#x27;</span>)\\n    traceback.print_exc()\\n    <span class=\\\"hljs-built_in\\\">print</span>(<span class=\\\"hljs-number\\\">100</span> * <span class=\\\"hljs-string\\\">&#x27;-&#x27;</span>)\\n\\np.age = <span class=\\\"hljs-number\\\">99</span>\\n<span class=\\\"hljs-built_in\\\">print</span>(p)\\n</code></pre>\\n<p>Output: </p>\\n<pre><code class=\\\"hljs language-console\\\">----------------------------------------------------------------------------------------------------\\nTraceback (most recent call last):\\n  File &quot;d:/Workshop/MyPython/practice/class/property.py&quot;, line 28, in &lt;module&gt;\\n    p.age = 1000\\n  File &quot;d:/Workshop/MyPython/practice/class/property.py&quot;, line 14, in age\\n    raise ValueError(&#x27;Age should between 0 ~ 100&#x27;)\\nValueError: Age should between 0 ~ 100\\n----------------------------------------------------------------------------------------------------\\nPerson: age:99\\n</code></pre>\\n<p>reference: <a href=\\\"https://docs.python.org/3/library/functions.html#property\\\">https://docs.python.org/3/library/functions.html#property</a></p>\\n<h3 id=\\\"errors-and-exceptions\\\">Errors And Exceptions</h3>\\n<h4 id=\\\"error\\\">Error</h4>\\n<p>There is one error in python:</p>\\n<pre><code class=\\\"hljs language-python\\\"><span class=\\\"hljs-keyword\\\">while</span> <span class=\\\"hljs-literal\\\">True</span> <span class=\\\"hljs-built_in\\\">print</span>(<span class=\\\"hljs-string\\\">&#x27;Hello world&#x27;</span>)\\n  File <span class=\\\"hljs-string\\\">&quot;&lt;stdin&gt;&quot;</span>, line <span class=\\\"hljs-number\\\">1</span>\\n    <span class=\\\"hljs-keyword\\\">while</span> <span class=\\\"hljs-literal\\\">True</span> <span class=\\\"hljs-built_in\\\">print</span>(<span class=\\\"hljs-string\\\">&#x27;Hello world&#x27;</span>)\\n                   ^\\nSyntaxError: invalid syntax\\n</code></pre>\\n<h4 id=\\\"exceptions\\\">Exceptions</h4>\\n<h5 id=\\\"handling-exceptions\\\">Handling Exceptions</h5>\\n<pre><code class=\\\"hljs language-python\\\"><span class=\\\"hljs-comment\\\"># handling exceptions</span>\\n<span class=\\\"hljs-keyword\\\">try</span>:\\n    <span class=\\\"hljs-built_in\\\">print</span>(<span class=\\\"hljs-number\\\">1</span> / <span class=\\\"hljs-number\\\">0</span>)\\n<span class=\\\"hljs-keyword\\\">except</span> Exception <span class=\\\"hljs-keyword\\\">as</span> exc:\\n    <span class=\\\"hljs-keyword\\\">import</span> sys\\n    <span class=\\\"hljs-built_in\\\">print</span>(sys.exc_info()[<span class=\\\"hljs-number\\\">0</span>]) <span class=\\\"hljs-comment\\\"># exception type</span>\\n    <span class=\\\"hljs-built_in\\\">print</span>(sys.exc_info()[<span class=\\\"hljs-number\\\">1</span>]) <span class=\\\"hljs-comment\\\"># exception value</span>\\n    <span class=\\\"hljs-built_in\\\">print</span>(sys.exc_info()[<span class=\\\"hljs-number\\\">2</span>]) <span class=\\\"hljs-comment\\\"># exception tracback object</span>\\n    <span class=\\\"hljs-keyword\\\">import</span> traceback\\n    traceback.print_exception(*sys.exc_info())\\n    <span class=\\\"hljs-built_in\\\">print</span>(<span class=\\\"hljs-number\\\">100</span> * <span class=\\\"hljs-string\\\">&#x27;-&#x27;</span>)\\n    <span class=\\\"hljs-comment\\\"># equvilent to .print_exception(*sys.exc_info())</span>\\n    traceback.print_exc()\\n</code></pre>\\n<p>Output:</p>\\n<pre><code class=\\\"hljs language-console\\\">&lt;class &#x27;ZeroDivisionError&#x27;&gt;\\ndivision by zero\\n&lt;traceback object at 0x000001C8C4E12888&gt;\\nTraceback (most recent call last):\\n  File &quot;d:/Workshop/MyPython/practice/exception/exc.py&quot;, line 3, in &lt;module&gt;\\n    print(1 / 0)\\nZeroDivisionError: division by zero\\n----------------------------------------------------------------------------------------------------\\nTraceback (most recent call last):\\n  File &quot;d:/Workshop/MyPython/practice/exception/exc.py&quot;, line 3, in &lt;module&gt;\\n    print(1 / 0)\\nZeroDivisionError: division by zero\\n</code></pre>\\n<p>The <a href=\\\"https://docs.python.org/3/reference/compound_stmts.html#try\\\"><code>try</code></a> statement works as follows.</p>\\n<ul>\\n<li>First, the <em>try clause</em> (the statement(s) between the <a href=\\\"https://docs.python.org/3/reference/compound_stmts.html#try\\\"><code>try</code></a> and <a href=\\\"https://docs.python.org/3/reference/compound_stmts.html#except\\\"><code>except</code></a> keywords) is executed.</li>\\n<li>If no exception occurs, the <em>except clause</em> is skipped and execution of the <a href=\\\"https://docs.python.org/3/reference/compound_stmts.html#try\\\"><code>try</code></a> statement is finished.</li>\\n<li>If an exception occurs during execution of the try clause, the rest of the clause is skipped. Then if its type matches the exception named after the <a href=\\\"https://docs.python.org/3/reference/compound_stmts.html#except\\\"><code>except</code></a> keyword, the except clause is executed, and then execution continues after the <a href=\\\"https://docs.python.org/3/reference/compound_stmts.html#try\\\"><code>try</code></a> statement.</li>\\n<li>If an exception occurs which does not match the exception named in the except clause, it is passed on to outer <a href=\\\"https://docs.python.org/3/reference/compound_stmts.html#try\\\"><code>try</code></a> statements; if no handler is found, it is an <em>unhandled exception</em> and execution stops with a message as shown above.</li>\\n</ul>\\n<p>The <a href=\\\"https://docs.python.org/3/reference/compound_stmts.html#try\\\"><code>try</code></a> … <a href=\\\"https://docs.python.org/3/reference/compound_stmts.html#except\\\"><code>except</code></a> statement has an optional <em>else clause</em>, which, when present, must follow all except clauses. It is useful for code that must be executed if the try clause does not raise an exception.</p>\\n<pre><code class=\\\"hljs language-python\\\"><span class=\\\"hljs-comment\\\"># seperate exception raising code and follow up code</span>\\n<span class=\\\"hljs-keyword\\\">try</span>:\\n    v =  (<span class=\\\"hljs-number\\\">1</span> / <span class=\\\"hljs-number\\\">10</span>)\\n<span class=\\\"hljs-keyword\\\">except</span> Exception <span class=\\\"hljs-keyword\\\">as</span> exc:\\n    <span class=\\\"hljs-built_in\\\">print</span>(exc)\\n<span class=\\\"hljs-keyword\\\">else</span>:\\n    <span class=\\\"hljs-comment\\\"># continue when no exception is raised</span>\\n    <span class=\\\"hljs-built_in\\\">print</span>(v)\\n<span class=\\\"hljs-comment\\\"># 0.1</span>\\n</code></pre>\\n<h5 id=\\\"raising-exceptions\\\">Raising Exceptions</h5>\\n<p>With <code>raise</code> statement:</p>\\n<pre><code class=\\\"hljs language-python\\\"><span class=\\\"hljs-keyword\\\">raise</span> NameError(<span class=\\\"hljs-string\\\">&#x27;HiThere&#x27;</span>) <span class=\\\"hljs-comment\\\"># with msg</span>\\n----------------------\\n<span class=\\\"hljs-keyword\\\">raise</span> ValueError <span class=\\\"hljs-comment\\\"># shorthand for &#x27;raise ValueError()&#x27;</span>\\n----------------------\\n<span class=\\\"hljs-keyword\\\">try</span>:\\n    <span class=\\\"hljs-keyword\\\">raise</span> NameError(<span class=\\\"hljs-string\\\">&#x27;HiThere&#x27;</span>)\\n<span class=\\\"hljs-keyword\\\">except</span> NameError:\\n    <span class=\\\"hljs-built_in\\\">print</span>(<span class=\\\"hljs-string\\\">&#x27;An exception flew by!&#x27;</span>)\\n    <span class=\\\"hljs-keyword\\\">raise</span> <span class=\\\"hljs-comment\\\"># raise it again in except clause</span>\\n</code></pre>\\n<h5 id=\\\"user-defined-exceptions\\\">User-defined Exceptions</h5>\\n<pre><code class=\\\"hljs language-python\\\"><span class=\\\"hljs-keyword\\\">class</span> <span class=\\\"hljs-title class_\\\">InputError</span>(<span class=\\\"hljs-title class_ inherited__\\\">Error</span>):\\n    <span class=\\\"hljs-string\\\">&quot;&quot;&quot;Exception raised for errors in the input.\\n\\n    Attributes:\\n        expression -- input expression in which the error occurred\\n        message -- explanation of the error\\n    &quot;&quot;&quot;</span>\\n\\n    <span class=\\\"hljs-keyword\\\">def</span> <span class=\\\"hljs-title function_\\\">__init__</span>(<span class=\\\"hljs-params\\\">self, expression, message</span>):\\n        self.expression = expression\\n        self.message = message\\n</code></pre>\\n<h5 id=\\\"cleaning-up-actions\\\">Cleaning Up Actions</h5>\\n<p>With <code>finally</code> statement:</p>\\n<pre><code class=\\\"hljs language-python\\\"><span class=\\\"hljs-keyword\\\">try</span>:\\n    <span class=\\\"hljs-keyword\\\">raise</span> KeyboardInterrupt\\n<span class=\\\"hljs-keyword\\\">finally</span>:\\n    <span class=\\\"hljs-built_in\\\">print</span>(<span class=\\\"hljs-string\\\">&#x27;Goodbye, world!&#x27;</span>)\\n</code></pre>\\n\";","export default \"<h4 id=\\\"0-特定的时刻\\\">0. 特定的时刻</h4>\\n<p>我是完全不过生日的, 不要礼物不要钱, 不请朋友大鱼大肉也不买蛋糕许愿望更不拉帮结派开party, 过生日我只会想家人想妈妈</p>\\n<p>但是今年这个生日有点特殊吧</p>\\n<p>不知道什么时候在哪里听到过一句话, 说<strong>人生可以分成7年7年的组合去过, 每次都把7年当成一辈子去过</strong></p>\\n<p><strong>你要认真地, 过好每一个7年, 过好每一辈子</strong></p>\\n<p>所以在第3个7年的最后一天要结束的时候, 想把时间往前推7年, 看看我这第一个重要的7年过的到底怎么样</p>\\n<p>但是- -</p>\\n<p>记性不太好, 差不多只能回忆近况吧</p>\\n<h4 id=\\\"1-上海ebay\\\">1. 上海eBay</h4>\\n<p>现在是18年11月, 离开武汉来魔都已经一个多月了, 现在的状态很舒适和安逸, 但是也<strong>太过于舒适和安逸</strong>了</p>\\n<p>🗯️ 500强公司的Intern, 310一天的工资, 租的复式小阁楼房子, 一室一厅独卫空调电视, 十一期间该买的都买了, 房子置办的温馨又懒惰🐈</p>\\n<p>🚌 公司和家就300m路程, 每天上下班唯一的阻碍就是一个1分半钟的20米人行道红绿灯, 每天交通压力还是挺大的😃</p>\\n<p>:happy:工作环境也跟给力, 公司135早上有免费早餐, 24下午有免费水果, 5下午有免费蛋糕🍰 , manager挺谈得来的, 给我的Main Task也顺顺利利的完成了, 同事都会ignore你的学历, 虽然周围都是985/211的Master Degree(水平看着还可以吧), 而我只是一个双非的undergraduate</p>\\n<p>刚开始还8点起床, 9点前到公司, 后来干脆每天9点起床9点半到公司, 中午还可以回家自己吃饭, 下午差不多6点就下班回家, 回家玩一会就开始看书或者干脆写博客</p>\\n<p>然后尽管魔都食宿消费基本是武汉的1.5~2倍, 但是非常幸运的是, 家旁边就有一个小菜馆, 基本30左右就可以饱饱的吃两餐</p>\\n<p>是挺舒服的吧?</p>\\n<h4 id=\\\"2-武汉银联商务\\\">2. 武汉银联商务</h4>\\n<p>再往前数4个月, 7月份</p>\\n<p>9月份在武汉银联商务实习, 同事照样名校MD, 但是水平是真的次, 银联是我第一份Intern, 虽然环境一般, 但是给我的工作还是认认真真的做了, 开发一个内部使用的系统, 和一个华师的研究生一起做, 这哥什么都不会, git/maven还是我现场教的, 基本的CS素养都没有, 说写前端连css都调不会, 写的code也烂的亚批, 他写的code我改了90%</p>\\n<p>这两个月做这个系统别提我多郁闷了, 每天都很窒息😠💢</p>\\n<p>最后结果反正是交付了, 别的不说我基本的责任心还是有的, 9月份离职之后, 系统还不具备上线条件, 对于安全的case没有cover到(导师的锅, 一开始就没觉得要交付这么严格, 所以我就没将安全性考虑进去)</p>\\n<p>所以10月份我人已经到eBay的实习期间, 晚上回家还加班给UMS写代码</p>\\n<p>而且在这期间我也一刻不停的在学习, 找工作, 因为并不觉得银联是唯一的选择, 也不想留在银联, 国企的办公室氛围实在是太没有激情了, 一点都不geek, 转正还得穿正装上班, 我并不觉得这是一个程序猿该有的样子</p>\\n<p>特别是, 就算是intern, 也不能穿短裤子上班, 你知道在武汉最热☀️的时候每天穿长裤去上班有多热吗, 下班回家第一件事不是吃饭而是回寝室换裤子</p>\\n<h4 id=\\\"3-关于放弃考研\\\">3. 关于放弃考研</h4>\\n<p>3月份开学的时候, 我做出了要考研的选择, 1是想提升学历, 2是并不想太早就放弃&quot;学生&quot;这个身份</p>\\n<p>和家里人商量, 和女朋友谈谈 和朋友们讨论</p>\\n<p>跌跌撞撞了2个月, 大张旗鼓了2个月, 各种考研书都买了, 高数都看了2章了, 笔记满满的, 人生第一次记录错题本</p>\\n<p>我都不知道我这么爱学习</p>\\n<p>所有人都知道我要考研了</p>\\n<p>但是考研真不好走, 除了学习之外还得看学校, 关注研训, 纠结要不要参加补习班, 想着能不能推免, 得找好学校好导师吧啦吧啦的</p>\\n<p>看起来是在正轨上, 但其实除了学习之外, 还在偷偷地写代码, 因为我控制不住自己, 就是想写代码, 就是想看技术</p>\\n<p>然后5月份, 发了个说说&quot;立即推:放弃考研!&quot;</p>\\n<p><strong>把能卖的考研书都卖了, 打开电脑, coding</strong></p>\\n<h4 id=\\\"4-找工作\\\">4. 找工作</h4>\\n<p>放下高数38, 真正开始找工作了才发现工作也并不好找, 尤其是我已经错过春招最开始的时候了, 等我准备好简历, 急忙刷了一些题, 匆匆看了几篇面经之后, 已经6月份了</p>\\n<p>这时候开始找工作, 我是觉得我已经落后别人一截了- -</p>\\n<p>而且找工作的时候运气也很重要, 万一面试官根本就没心思在你身上, 那你表现再好也是白费</p>\\n<p>所以这一个月的经历并不好受, 特别是小米和头条的面试, 因为准备不足完全被人看扁了</p>\\n<p>也正是这段时间, 认识到了自己的不足, 认识到了真正重要的是什么, 认识到了一个应届生应该有什么样的value, 别人才会要你, 认识到了其实之前在学校中, 我过多专注在业务上而不是基础知识, 这是我最遗憾的事情</p>\\n<p>fail了很多次, 一次比一次灰心, 都在想自己是不是很差, 但还是慢慢撑过来了, 甚至去银联只是一个缓兵之计而已</p>\\n<p>直到9月初的一次eBay的电面, 给了我intern的offer, 说intern有转正机会</p>\\n<p><strong>就像救命稻草一样, 真的是救命稻草一样, 所有人都说你不match, 就有人看中你了的感觉</strong></p>\\n<h4 id=\\\"5-大学\\\">5. 大学</h4>\\n<p>虽然高考不咋地, 但是来民大真的是非常幸运, 遇到的schoolmate也很nice</p>\\n<p>我大学里面也很努力呀</p>\\n<p>在英协外联的日子里真的很努力, 除了学习之外, 我在这里学到了很重要的东西: <strong>要非常专业地去对待你的肩上这份责任的这么一个态度</strong>, 这个态度影响了我后面的很多事情</p>\\n<p>在英协这段时期努力奔波的时候, 同时也幸运的找到几个朋友, 有过小2个月的乐队时期, 再续高中时候的band dreaming, 有幸在一家清吧show了一场, 虽然drummer那时候快要毕业了去日本了, 虽然后面一个吉他溜号了(具体是咋的我忘了) </p>\\n<p>努力进了实验室, 努力学技术, 努力和组员一起学习Java, 努力做项目, 努力参加含金量不高的比赛, 努力做一些没意义的工作(吐槽一下实验室的work flow确实问题很大), 有为改变实验室的毒瘤work flow而用心过虽然最后什么都没有改变</p>\\n<p>认真地当上了组长, 认真地准备每次招新, 认真地对待每个newbie, 能不放弃的孩子我都没有放弃, 认真的准备每周的技术例会</p>\\n<p>很专业的去对待每件事情, 无论是来自实验室, 还是来自其他地方</p>\\n<p><strong>努力地做出改变, 努力的code</strong></p>\\n<p>然后还在大三最忙的时候, 捞了个班助当, 接到了一群和我3年前刚来的时候一模一样的孩子, 年轻人是真的很有活力(倚老卖老), 认真对待新生工作, 和孩子们交朋友, 帮老师收集材料</p>\\n<p>我和很多人说过, 我当年的班助, 就是一个超级nice的学姐, 真的非常非常nice, 所以我也想像她一样, 对我的孩子也非常nice, 真的努力了, 但是有的工作还是没有顾及到, 本身还有很多要忙的, 有点遗憾</p>\\n<h4 id=\\\"6-近期的顾虑\\\">6. 近期的顾虑</h4>\\n<p>其实来eBay也不是很好的选择, 因为公司都是Intern和Full-time混合的工作制, 所以有Internship并不和转正挂钩, 该走校招还是走校招, 该笔试还是得笔试</p>\\n<p>最近eBay的校招fail掉了, 说来也难怪, 我本身就不太适应笔试, eBay的笔试有点难度, 时间也有点迷(75分钟21选择2编程) , 但是由于笔试期间没时间准备, 一直在focus on my work, 再加上eBay校招是偶尔开, 开也只是面向名校, 所以我一双非本科在复旦/上交/同济的MD面前还是不够看</p>\\n<p>学历菜就算了, 笔试也菜, fail了我也认</p>\\n<p>eBay这边的Internship虽然能持续6个月, 但转正还是有点不好说, 不是难, 而是还是那句话, <strong>找工作是看运气的</strong>, 所以我想先在冬天认认真真的沉淀好了, 然后春天再去找机会</p>\\n<h4 id=\\\"7-winter-is-comming\\\">7. &quot;Winter is comming&quot;</h4>\\n<p>说不准我是运气好还是不好</p>\\n<p>这辈子过的有点菜, 下辈子再认真一点, 再努力一点</p>\\n<p>14-21岁这辈子已经过完了, 下辈子再见吧</p>\\n<h4 id=\\\"8-\\\">8. ...</h4>\\n<p>唉😔</p>\\n\";","export default \"<h3 id=\\\"前言\\\">前言</h3>\\n<p>前面说了好多好多刀枪剑，还说了一些最前置的内功心法，这回说说更深层的内功心法——<strong>JMM，Java Memory Model，Java 内存模型！</strong></p>\\n<p>Java 线程之间的通信对程序员是完全透明的（你是很难感知得到的），所以内存可见性问题经常称为并发的通病之一，这坎说的内存模型，是让你更好地去感知，去推断线程内存通信的有力武器。</p>\\n<p>这坎基本就是<em>《核心》</em>的第三章内容，我就这书总结一下，然后调一下排版，主要说的内容：</p>\\n<ul>\\n<li><strong>JMM 基础：介绍基本概念</strong></li>\\n<li><strong>JMM 中的顺序一致性：重排序和顺序一致性内存</strong></li>\\n<li><strong>三个同步原语 synchronized、volatile 的内存语义</strong></li>\\n<li><strong>重排序规则</strong></li>\\n<li><strong>JMM 设计原理</strong></li>\\n</ul>\\n<hr>\\n<h3 id=\\\"jmm-基础\\\">JMM 基础</h3>\\n<h4 id=\\\"并发编程的两个关键问题\\\">并发编程的两个关键问题</h4>\\n<p>线程之间如何进行通信？线程之间如何进行同步？在命令式编程中，线程通信机制有两种：共享内存和消息通信</p>\\n<table>\\n<thead>\\n<tr>\\n<th align=\\\"center\\\">通信机制 \\\\ 问题</th>\\n<th align=\\\"center\\\">通信问题</th>\\n<th align=\\\"center\\\">同步问题</th>\\n</tr>\\n</thead>\\n<tbody><tr>\\n<td align=\\\"center\\\">共享内存</td>\\n<td align=\\\"center\\\">隐式</td>\\n<td align=\\\"center\\\">显式</td>\\n</tr>\\n<tr>\\n<td align=\\\"center\\\">消息通信</td>\\n<td align=\\\"center\\\">显式</td>\\n<td align=\\\"center\\\">隐式</td>\\n</tr>\\n</tbody></table>\\n<p>在共享内存模型中：</p>\\n<ul>\\n<li>线程通过读写公共内存来进行通信，这是<strong>隐式通信</strong></li>\\n<li>程序必须有指定的区域让线程互斥执行，这是<strong>显式同步</strong></li>\\n</ul>\\n<p>在消息通信模型中：</p>\\n<ul>\\n<li>线程没有公共状态，必须发送消息来通信，这是<strong>显示通信</strong></li>\\n<li>由于消息的发送必须是在消息接收之前，所以是<strong>隐式同步</strong></li>\\n</ul>\\n<p>而 Java 的并发采用的是<strong>共享内存模型</strong>，所以同步是显示的，可能比线程通信好好懂一些</p>\\n<h4 id=\\\"jmm-内存模型抽象结构\\\">JMM 内存模型抽象结构</h4>\\n<p><img src=\\\"../../../public/img/20180721202202.png\\\" alt=\\\"\\\"></p>\\n<p>线程之间的通信由 JMM 控制，JMM 控制之内从与每个线程的本地内存之间的交互，来为 Java 程序员提供内存可见性保证</p>\\n<p>这里每个线程之间的本地内存在虚拟机中就是每个线程自己的栈空间</p>\\n<p>也就是说：<strong>JMM 决定一个线程对共享变量的写入在什么时候对另一个线程可见！</strong></p>\\n<p>所以，如果线程之间要通信的话，需要经过以下两步：</p>\\n<ol>\\n<li>线程 A 将自己的副本值刷到主内存中</li>\\n<li>线程 B 从主内存中读取共享变量来更新自己的该共享变量的副本</li>\\n</ol>\\n<h4 id=\\\"从源代码到指令序列的重排序\\\">从源代码到指令序列的重排序</h4>\\n<p>在执行程序的时候，为了提高性能，编译器和处理器通常会对指令做重排序，重排序分为 3 种：</p>\\n<ol>\\n<li><strong>编译器优化重排序</strong>。编译器在不改变语义的情况下，可以重新安排语句的内容</li>\\n<li><strong>指令级并行的重排序</strong>。用来将多条指令堆叠执行，如果不存在数据依赖性，处理器可以改变语句对应机器指令的执行顺序</li>\\n<li><strong>内存系统重排序</strong>。由于和处理器直接通信的是缓冲区，所以加载和存储操作看上去可能是在乱序执行</li>\\n</ol>\\n<p>第一个是属于编译器重排序，后两个是属于处理器重排序，因为提升性能而存在的这些重排序，在多线程中就有可能出现内存可见性问题</p>\\n<p>对于编译器重排序，JMM 会禁止一些类型的编译器重排序</p>\\n<p>对于处理器重排序，JMM 会在编译器程持指令序列的时候，在序列之间插入特定的<strong>内存屏障（Memory Barriers）</strong>，这些屏障用于禁止特定类型的处理器重排序</p>\\n<p>下面是内存屏障的类型表：</p>\\n<table>\\n<thead>\\n<tr>\\n<th align=\\\"center\\\">屏障类型</th>\\n<th align=\\\"center\\\">指令示例</th>\\n<th>说明</th>\\n</tr>\\n</thead>\\n<tbody><tr>\\n<td align=\\\"center\\\">LoadLoad Barriers</td>\\n<td align=\\\"center\\\">Load1；LoadLoad；Load2；</td>\\n<td>确保 Load1 数据的装载先于 Load2 及以后所有的装载指令的装载</td>\\n</tr>\\n<tr>\\n<td align=\\\"center\\\">StoreStore Barriers</td>\\n<td align=\\\"center\\\">Store1；StoreStore；Store2；</td>\\n<td>确保 Store1 数据对其他处理器可见（刷到主内存中去）先于 Store2 及其后的所有存储指令的存储</td>\\n</tr>\\n<tr>\\n<td align=\\\"center\\\">LoadStore Barriers</td>\\n<td align=\\\"center\\\">Load1；LoadStore；Store2</td>\\n<td>确保 Load1 数据装载先于 Store2 及所有后续的存储指令刷新到内存</td>\\n</tr>\\n<tr>\\n<td align=\\\"center\\\">StoreLoad Barriers</td>\\n<td align=\\\"center\\\">Store1；StoreLoad；Load2</td>\\n<td>确保 Store1 数据对其他处理器变得可见（刷到主内存）先于 Load2 及所有后续装载指令的装载。该屏障会使该屏障之前的所有内存访问指令（装载和存储）完成之后，才执行屏障后的内存访问指令。</td>\\n</tr>\\n</tbody></table>\\n<p>最后一个屏障是全能型的屏障，它拥有前三个屏障所有的功能，但是执行这个屏障的开销会很大，因为要把缓冲区中所有的数据内容都刷到主存中去</p>\\n<h5 id=\\\"数据依赖性\\\">数据依赖性</h5>\\n<p>什么是数据依赖性？如果两个操作访问同一个变量，而且至少其中一个操作是<strong>写操作</strong>，就称这两个操作之间存在数据依赖性，数据依赖性分为：写后读、写后写、读后写；</p>\\n<p>如果两个操作存在数据依赖性，那么一旦重排序这两个操作，并且改变了执行顺序，两个操作的执行结果就会被改变，JMM 禁止这种重排序！</p>\\n<ul>\\n<li>所以编译器和处理器在进行重排序的时候，会遵循数据依赖原则，不会对这些情况进行重排序</li>\\n<li>并且要注意的是，数据依赖性仅针对<strong>单个处理器中执行的指令序列和单个线程中执行的操作</strong>，对于多处理器和多线程情况的数据依赖性不被编译器和处理器考虑！</li>\\n</ul>\\n<h5 id=\\\"as-if-serial-语义\\\">as-if-serial 语义</h5>\\n<p>这个语义的意思是：<strong>不管怎么重排序，<u>单线程</u>程序的执行结果不能被改变！</strong></p>\\n<blockquote>\\n<p>as-if-serial 语义把单线程操作保护了起来，即使底层进行了异常复杂的重排序，单线程程序员还是认为程序是按照顺序执行的，因为重排序并没有改变执行结果</p>\\n</blockquote>\\n<p>实际上：</p>\\n<blockquote>\\n<p>在单线程程序中，对存在控制依赖的操作进行重排序，不会改变执行结果（这也是 as-if-serial 语义做出的保证，实际上并不会进行重排序）；</p>\\n<p>但是在多线程程序中，对存在控制依赖的操作进行重排序，可能会改变执行的结果，因为 JMM 没有保证</p>\\n</blockquote>\\n<h4 id=\\\"happens-before-关系和-jmm-的设计意图\\\">happens-before 关系和 JMM 的设计意图</h4>\\n<p>Happens Before 是 JMM 最核心的概念，理解 Happens Before 就理解了 JMM 的管理机制。</p>\\n<h5 id=\\\"jmm-的设计\\\">JMM 的设计</h5>\\n<p>JMM 作为 Java 的内存管理的一方霸主，它的设计自然不能特别随意，JMM 的设计需要考虑：</p>\\n<ul>\\n<li>从程序员的角度来说：需要一个易于理解易于编程的强有力的内存模型来写代码</li>\\n<li>从编译器和处理器的角度来说：内存模型的束缚越少越好，这样性能也快</li>\\n</ul>\\n<p>这在计算机领域中是随处可见的矛盾，既要方便安全，又要性能，于是 JMM 设计的核心目标就是找到一个平衡点，既要有强有力的规则来保证内存可见性，又要保证处理器可以大展手脚</p>\\n<p>于是就有了<strong>Happens Before 规则</strong></p>\\n<p><img src=\\\"../../../public/img/20180721222909.png\\\" alt=\\\"\\\"></p>\\n<p>可以看到，JMM 将重排序情况分为：会改变结果的排序、不会改变结果的排序</p>\\n<p>对于这两种情况，JMM 也有不同的策略：</p>\\n<ul>\\n<li>如果重排序会改变结果，那么 JMM 要求处理器和编译器坚决禁止这种排序</li>\\n<li>如果不影响 JMM 则没有要求</li>\\n</ul>\\n<p>换句话说：<strong>只要不坑程序员，处理器和编译器想怎么玩就怎么玩~</strong></p>\\n<p>举两个例子，如果编译器经过细致的分析过后，判定一个锁只会被一个线程单独访问，那么这个锁可以被消除；</p>\\n<p>如果编译器经过细致的分析过后，认定一个 volatila 变量只会被单线程访问，那么编译器可以把这个变量当作普通变量去对待；</p>\\n<h5 id=\\\"happens-before-关系是什么？\\\">happens-before 关系是什么？</h5>\\n<blockquote>\\n<p>JSR-133 使用 happens-before 的概念来指定两个操作之间的执行顺序。由于这两个操作可以在同一个线程，也可以在不同线程之间，因此，JMM 可以通过 happens-before 关系向程序员提供跨线程的内存可见性保证。</p>\\n</blockquote>\\n<p><em>《JSR-133：Java Memory Model and Thread Specification》</em>对 happens-before 关系的定义如下：</p>\\n<ol>\\n<li>如果一个操作 happens-before 另一个操作，那么第一个操作的执行结果对第二个操作可见，且第一个操作的执行顺序排在第二个操作之前</li>\\n<li>两个操作之间存在 happens-before 关系，并不意味着 Java 平台的具体实现必须要按照 happens-before 关系指定的顺序来执行，如果重排序的执行结果，和保持 happens-before 关系的执行结果一致，那么 JMM 允许这种重排序</li>\\n</ol>\\n<ul>\\n<li>上面的 1.是<strong>JMM 对程序员的承诺</strong>，但需要注意的是，这只是 JMM 向程序员做出的保证。</li>\\n<li>上面的 2.是<strong>JMM 对编译器和处理器重排序的约束原则</strong>，前面已经说过，JMM 允许重排序的原则是只要不改变程序运行结果，你想怎么优化都行，而对于程序员和编译器处理器这两者之间来说，只要后者重排序之后，即使操作顺序改变了，但是结果没变，对前者看来，程序还是按照他们的预期去执行。</li>\\n</ul>\\n<blockquote>\\n<p><strong>我们需要特别注意的一点：</strong></p>\\n<p>所谓的 happens-before 规则，只是对程序员的<strong>承诺</strong>，它只反映了程序运行结果，实际运行情况和规则所表达的不同，举个最简单的例子：</p>\\n<p>比如两条语句 1 和 2，由顺序规则有<code>1 happens-before 2</code>，JMM 在编译的时候允许将这段代码重排序为 2 先于 1，之所以允许重排序是因为 JMM 觉得这会提高处理器性能（至于为什么你就别管了 JMM 说了算），但是这种排序并不改变程序执行结果，所以对于程序员来说，2 先于 1 和 1 先于 2 没有区别，但这依旧得是在我们程序员的设计之下，所以即使执行的是 2 先于 1，程序员以<code>1 happens-before 2</code>这样的规则去判断程序就好了。</p>\\n</blockquote>\\n<p>基于上面的原因，happens-before 关系本质上和 as-if-serial 语义是一回事</p>\\n<ul>\\n<li>as-if-serial 语言保证单线程内程序执行的结果不变，happens-before 关系保证**<u>正确同步</u>**的多线程程序的执行结果不被改变</li>\\n<li>as-if-before 让程序员以为他们写的单线程程序是按照顺序执行的，happens-before 关系让程序员以为他们写的正确同步的多线程程序是按照 happens-before 指定的顺序去执行的</li>\\n</ul>\\n<h5 id=\\\"happens-before-规则\\\">happens-before 规则</h5>\\n<p><em>《JSR-133：Java Memory Model and Thread Specification》</em>定义了如下 happens-before 规则：</p>\\n<ol>\\n<li><strong>程序顺序规则：</strong>一个线程中的每个操作，happens-beofore 于该线程中的任意后续操作</li>\\n<li><strong>监视器锁规则：</strong>对一个锁的解锁，happens-before 于随后对这个锁的加锁</li>\\n<li><strong>volatile 变量规则：</strong>对一个 volatile 域的写操作，happens-before 于任意后续对这个 volatile 域的读</li>\\n<li><strong>传递性规则：</strong>如果 A happens-before B，且 B happens-before C，那么 A happens-bofore C</li>\\n<li><strong>start()规则：</strong>如果线程 A 执行操作<code>ThreadB.start()</code>（启动线程 B），那么 A 线程的<code>ThreadB.start()</code>操作 happens-before 于线程 B 中的任意操作</li>\\n<li><strong>join()规则：</strong>如果线程 A 执行操作<code>ThreadB.join()</code>并成功返回，那么线程 B 中的任意操作 happens-before 于线程 A 从<code>ThreadB.join()</code>操作成功返回</li>\\n</ol>\\n<h5 id=\\\"happens-before-应用例子\\\">happens-before 应用例子</h5>\\n<h6 id=\\\"程序顺序规则\\\">程序顺序规则</h6>\\n<pre><code class=\\\"hljs language-java\\\"><span class=\\\"hljs-type\\\">double</span> <span class=\\\"hljs-variable\\\">pi</span> <span class=\\\"hljs-operator\\\">=</span> <span class=\\\"hljs-number\\\">3.14</span>;    <span class=\\\"hljs-comment\\\">// A</span>\\n<span class=\\\"hljs-type\\\">double</span> <span class=\\\"hljs-variable\\\">r</span> <span class=\\\"hljs-operator\\\">=</span> <span class=\\\"hljs-number\\\">1.0</span>;        <span class=\\\"hljs-comment\\\">// B</span>\\n<span class=\\\"hljs-type\\\">double</span> <span class=\\\"hljs-variable\\\">area</span> <span class=\\\"hljs-operator\\\">=</span> pi * r * r; <span class=\\\"hljs-comment\\\">// C</span>\\n</code></pre>\\n<p>根据顺序规则有：</p>\\n<blockquote>\\n<ol>\\n<li>A happens-before B</li>\\n<li>B happens-before C</li>\\n<li>A happens-before C // 传递性推导</li>\\n</ol>\\n</blockquote>\\n<p>这里 1 和 2 允许重排序，但是不改变 3 的结果，因为 pi 和 r 谁先被初始化都无所谓，只要不改变 area 的结果就好</p>\\n<h4 id=\\\"volatile-的内存语义\\\">volatile 的内存语义</h4>\\n<h5 id=\\\"特性\\\">特性</h5>\\n<p>我们可以用两段程序来说明 volatile 变量和一般变量访问锁方法之间的读写等效，首先看 volatile 变量：</p>\\n<pre><code class=\\\"hljs language-java\\\"><span class=\\\"hljs-keyword\\\">class</span> <span class=\\\"hljs-title class_\\\">A</span>{\\n    <span class=\\\"hljs-keyword\\\">volatile</span> <span class=\\\"hljs-type\\\">int</span> <span class=\\\"hljs-variable\\\">i</span> <span class=\\\"hljs-operator\\\">=</span> <span class=\\\"hljs-number\\\">0</span>;\\n    <span class=\\\"hljs-keyword\\\">public</span> <span class=\\\"hljs-keyword\\\">void</span> <span class=\\\"hljs-title function_\\\">set</span><span class=\\\"hljs-params\\\">(<span class=\\\"hljs-type\\\">int</span> i)</span>{\\n        <span class=\\\"hljs-built_in\\\">this</span>.i = i;    <span class=\\\"hljs-comment\\\">// 单个变量的写</span>\\n    }\\n    <span class=\\\"hljs-keyword\\\">public</span> <span class=\\\"hljs-keyword\\\">void</span> <span class=\\\"hljs-title function_\\\">increment</span><span class=\\\"hljs-params\\\">()</span>{\\n        i++;    <span class=\\\"hljs-comment\\\">// 复合操作的读/写</span>\\n    }\\n    <span class=\\\"hljs-keyword\\\">public</span> <span class=\\\"hljs-type\\\">int</span> <span class=\\\"hljs-title function_\\\">get</span><span class=\\\"hljs-params\\\">()</span>{\\n        <span class=\\\"hljs-keyword\\\">return</span> i;    <span class=\\\"hljs-comment\\\">// 单个变量的读</span>\\n    }\\n}\\n</code></pre>\\n<p>上面的程序段等效于下面的对一般变量的方法锁方法：</p>\\n<pre><code class=\\\"hljs language-java\\\"><span class=\\\"hljs-keyword\\\">class</span> <span class=\\\"hljs-title class_\\\">B</span>{\\n    <span class=\\\"hljs-type\\\">int</span> <span class=\\\"hljs-variable\\\">i</span> <span class=\\\"hljs-operator\\\">=</span> <span class=\\\"hljs-number\\\">0</span>;\\n    <span class=\\\"hljs-keyword\\\">public</span> <span class=\\\"hljs-keyword\\\">synchronized</span> <span class=\\\"hljs-keyword\\\">void</span> <span class=\\\"hljs-title function_\\\">set</span><span class=\\\"hljs-params\\\">(<span class=\\\"hljs-type\\\">int</span> i)</span>{    <span class=\\\"hljs-comment\\\">// 上锁写</span>\\n        <span class=\\\"hljs-built_in\\\">this</span>.i = i;\\n    }\\n    <span class=\\\"hljs-keyword\\\">public</span> <span class=\\\"hljs-keyword\\\">void</span> <span class=\\\"hljs-title function_\\\">increment</span><span class=\\\"hljs-params\\\">()</span>{    <span class=\\\"hljs-comment\\\">// 普通方法调用</span>\\n        <span class=\\\"hljs-type\\\">int</span> <span class=\\\"hljs-variable\\\">temp</span> <span class=\\\"hljs-operator\\\">=</span> get();    <span class=\\\"hljs-comment\\\">// 调用同步读方法</span>\\n        temp += <span class=\\\"hljs-number\\\">1</span>;    <span class=\\\"hljs-comment\\\">// 普通的写操作</span>\\n        set(temp);    <span class=\\\"hljs-comment\\\">// 调用同步写方法</span>\\n    }\\n    <span class=\\\"hljs-keyword\\\">public</span> <span class=\\\"hljs-keyword\\\">synchronized</span> <span class=\\\"hljs-type\\\">int</span> <span class=\\\"hljs-title function_\\\">get</span><span class=\\\"hljs-params\\\">()</span>{\\n        <span class=\\\"hljs-keyword\\\">return</span> i;\\n    }\\n}\\n</code></pre>\\n<blockquote>\\n<p>锁的 happens-before 规则保证释放锁和获取锁的两个线程之间的内存可见性，所以这意味着：</p>\\n<p><strong>对一个 volatile 变量的读，总是能看到所有线程对这个 volatile 变量的最后一次写入！</strong></p>\\n</blockquote>\\n<p>于是我们可以总结一下 volatile 变量的特性：</p>\\n<ul>\\n<li>可见性保证：对一个 volatile 变量的读，总是能看到所有线程对这个 volatile 变量的最后一次写入</li>\\n<li>原子性保证：对 volatile 变量的读写操作具有原子性，但是 volatile++这种复合操作一定不具有原子性</li>\\n</ul>\\n<h5 id=\\\"从-happens-before-关系看-volatile-的写-读\\\">从 happens-before 关系看 volatile 的写-读</h5>\\n<p>从 JSR-133（JDK1.5）开始，volatile 变量的写-读可以实现线程之间的通信</p>\\n<ul>\\n<li>volatile 写和锁的释放有相同的内存语义</li>\\n<li>volatile 读和锁的获取有相同的内存语义</li>\\n</ul>\\n<p>我们看看例子：</p>\\n<pre><code class=\\\"hljs language-java\\\"><span class=\\\"hljs-keyword\\\">public</span> <span class=\\\"hljs-keyword\\\">class</span> <span class=\\\"hljs-title class_\\\">VolatileExample</span> {\\n    <span class=\\\"hljs-keyword\\\">public</span> <span class=\\\"hljs-keyword\\\">static</span> <span class=\\\"hljs-keyword\\\">void</span> <span class=\\\"hljs-title function_\\\">main</span><span class=\\\"hljs-params\\\">(String[] args)</span> <span class=\\\"hljs-keyword\\\">throws</span> InterruptedException {\\n        <span class=\\\"hljs-type\\\">V</span> <span class=\\\"hljs-variable\\\">v</span> <span class=\\\"hljs-operator\\\">=</span> <span class=\\\"hljs-keyword\\\">new</span> <span class=\\\"hljs-title class_\\\">V</span>();\\n        <span class=\\\"hljs-type\\\">Runnable</span> <span class=\\\"hljs-variable\\\">wirter</span> <span class=\\\"hljs-operator\\\">=</span> () -&gt; {v.wirter();};\\n        <span class=\\\"hljs-type\\\">Runnable</span> <span class=\\\"hljs-variable\\\">reader</span> <span class=\\\"hljs-operator\\\">=</span> () -&gt; {v.reader();};\\n        <span class=\\\"hljs-type\\\">Thread</span> <span class=\\\"hljs-variable\\\">wt</span> <span class=\\\"hljs-operator\\\">=</span> <span class=\\\"hljs-keyword\\\">new</span> <span class=\\\"hljs-title class_\\\">Thread</span>(wirter);\\n        <span class=\\\"hljs-type\\\">Thread</span> <span class=\\\"hljs-variable\\\">rt</span> <span class=\\\"hljs-operator\\\">=</span> <span class=\\\"hljs-keyword\\\">new</span> <span class=\\\"hljs-title class_\\\">Thread</span>(reader);\\n        wt.start();\\n        rt.start();\\n    }\\n}\\n\\n<span class=\\\"hljs-keyword\\\">class</span> <span class=\\\"hljs-title class_\\\">V</span>{\\n    <span class=\\\"hljs-type\\\">int</span> <span class=\\\"hljs-variable\\\">a</span> <span class=\\\"hljs-operator\\\">=</span> <span class=\\\"hljs-number\\\">0</span>;\\n    <span class=\\\"hljs-keyword\\\">volatile</span> <span class=\\\"hljs-type\\\">boolean</span> <span class=\\\"hljs-variable\\\">flag</span> <span class=\\\"hljs-operator\\\">=</span> <span class=\\\"hljs-literal\\\">false</span>;\\n    <span class=\\\"hljs-keyword\\\">public</span> <span class=\\\"hljs-keyword\\\">void</span> <span class=\\\"hljs-title function_\\\">wirter</span><span class=\\\"hljs-params\\\">()</span> {\\n        a = <span class=\\\"hljs-number\\\">999</span>;                        <span class=\\\"hljs-comment\\\">// 1</span>\\n        flag = <span class=\\\"hljs-literal\\\">true</span>;                    <span class=\\\"hljs-comment\\\">// 2</span>\\n    }\\n    <span class=\\\"hljs-keyword\\\">public</span> <span class=\\\"hljs-keyword\\\">void</span> <span class=\\\"hljs-title function_\\\">reader</span><span class=\\\"hljs-params\\\">()</span> {\\n        <span class=\\\"hljs-keyword\\\">if</span> (flag) {\\n            <span class=\\\"hljs-type\\\">int</span> <span class=\\\"hljs-variable\\\">i</span> <span class=\\\"hljs-operator\\\">=</span> a;                    <span class=\\\"hljs-comment\\\">// 3</span>\\n            System.out.println(i);        <span class=\\\"hljs-comment\\\">// 4</span>\\n        }\\n    }\\n}\\n</code></pre>\\n<blockquote>\\n<p>假设线程 A 执行 writer()方法之后，线程 B 执行 reader()方法，根据 happens-before 规则有：</p>\\n<ol>\\n<li>根据程序顺序规则，1 happens-before 2；3 happens-before 4</li>\\n<li>根据 volatile 规则，2 happens-before 3</li>\\n<li>根据传递性规则，1 happens-before 4</li>\\n</ol>\\n</blockquote>\\n<p>其中，2 是一个放锁相同原语，3 是一个加锁相同原语，在这里我们需要注意一个有意思的事情，当你运行程序之后你会发现，i 的值是 999，也就是说，两个线程之间的本地变量 a 值被**<u>同步了</u>**！书里的原话是：</p>\\n<blockquote>\\n<p>线程 A 写一个 volatile 变量之后，线程 B 读同一个变量。线程 A 在写 volatile 变量之前所有可见的共享变量（这里指 a），在线程 B 读取同一个 volatile 变量之后将立即变得对线程 B 可见。</p>\\n</blockquote>\\n<p>具体为什么，我们看下一节如何解释 volatile 的写-读的内存语义！</p>\\n<p>我也尝试过去验证这些结论的反面，但是很遗憾的是，很有可能由于<strong>“CPU 一旦空闲就刷共享内存（JVM 尽可能的给你保证共享变量同步）”</strong>的原因，即使你不读取同一个 volatile 变量，甚至你不读取任何 volatile 变量，a 的值也是 999，在这样的情况下，不能说书上的结论有误，只能说这应该是两个不同的机制去做同一件事。</p>\\n<h5 id=\\\"volatile-写-读的内存语义\\\">volatile 写-读的内存语义</h5>\\n<h6 id=\\\"写-volatile-变量内存语义\\\">写 volatile 变量内存语义</h6>\\n<blockquote>\\n<p>当写一个 volatile 变的时候，JMM 会把该线程对应的本地内存中的共享比变量刷新到主内存。</p>\\n</blockquote>\\n<p><img src=\\\"../../../public/img/20180722220148.png\\\" alt=\\\"\\\"></p>\\n<p>线程 A 在写 flag 变量之后，本地内存 A 中被线程更新过的两个共享变量被更新到主内存中。此时本地内存 A 和主内存中的变量的值是一致的。</p>\\n<h6 id=\\\"读-volatile-内存语义\\\">读 volatile 内存语义</h6>\\n<blockquote>\\n<p>当读一个 volatile 变量的时候，JMM 会把该线程对应的本地内存置为无效，然后从主内存中读取共享变量</p>\\n</blockquote>\\n<p><img src=\\\"../../../public/img/20180722222721.png\\\" alt=\\\"\\\"></p>\\n<p>如图，在读 flag 之后，本地内存 B 中的值已经无效了，这时线程 B 必须从主内存中读取共享变量，这样就完成了内存可见性保证。</p>\\n<p>现在对 volatile 写和 volatile 读的内存语义做个总结：</p>\\n<ol>\\n<li>线程 A 写一个 volatile 变量，实质上是把自己的本地内存刷到主内存，并向接下来要读这个变量的线程发出信息：“你的本地内存无效啦！你从主内存读数据吧！”</li>\\n<li>线程 B 读一个 volatile 变量，实质上是接收了之前线程 A 发出的消息，知道了自己的本地内存变量已经无效了，所以就从主内存读取共享变量</li>\\n<li><strong>线程 A 写一个 volatile 变量，随后线程 B 读取 volatile 变量，实际上是线程 A 通过主内存向线程 B 发消息！</strong></li>\\n</ol>\\n<h4 id=\\\"锁的内存语义\\\">锁的内存语义</h4>\\n<h5 id=\\\"从-happens-before-关系看锁的释放和获取\\\">从 happens-before 关系看锁的释放和获取</h5>\\n<p>下面代码引自 P47</p>\\n<pre><code class=\\\"hljs language-java\\\"><span class=\\\"hljs-keyword\\\">class</span> <span class=\\\"hljs-title class_\\\">MonitorExample</span>{\\n    <span class=\\\"hljs-type\\\">int</span> <span class=\\\"hljs-variable\\\">a</span> <span class=\\\"hljs-operator\\\">=</span> <span class=\\\"hljs-number\\\">0</span>;\\n    <span class=\\\"hljs-keyword\\\">public</span> <span class=\\\"hljs-keyword\\\">synchronized</span> <span class=\\\"hljs-keyword\\\">void</span> <span class=\\\"hljs-title function_\\\">writer</span><span class=\\\"hljs-params\\\">()</span>{    <span class=\\\"hljs-comment\\\">// 1    拿锁</span>\\n        a++;                            <span class=\\\"hljs-comment\\\">// 2    操作临界资源</span>\\n    }                                    <span class=\\\"hljs-comment\\\">// 3    放锁</span>\\n    <span class=\\\"hljs-keyword\\\">public</span> <span class=\\\"hljs-keyword\\\">synchronized</span> <span class=\\\"hljs-keyword\\\">void</span> <span class=\\\"hljs-title function_\\\">reader</span><span class=\\\"hljs-params\\\">()</span>{    <span class=\\\"hljs-comment\\\">// 4    拿锁</span>\\n        <span class=\\\"hljs-type\\\">ini</span> <span class=\\\"hljs-variable\\\">i</span> <span class=\\\"hljs-operator\\\">=</span> a;                        <span class=\\\"hljs-comment\\\">// 5    操作临界资源</span>\\n    }                                    <span class=\\\"hljs-comment\\\">// 6    放锁</span>\\n}\\n</code></pre>\\n<blockquote>\\n<p>假设线程 A 执行 writer()方法，随后线程 B 执行 readre()方法，根据 happens-before 规则有：</p>\\n<ul>\\n<li>根据程序顺序规则：1 happens-before 2，2 happens-before 3；4 happens-before 5；5 happens-before 6</li>\\n<li>根据监视器规则：3 happens-before 4</li>\\n<li>根据传递性：2 happens-before 5</li>\\n</ul>\\n</blockquote>\\n<blockquote>\\n<p>线程 A 释放了锁之后，随后线程 B 获取同一个锁，根据传递的来的<code>2 happens-before 5</code>，A 在释放锁之前的所有可变共享变量，在线程 B 获取同一个锁之后立即对线程 B 可见。</p>\\n</blockquote>\\n<h5 id=\\\"锁的释放和获取的内存语义\\\">锁的释放和获取的内存语义</h5>\\n<ul>\\n<li><strong>获取锁</strong>：JMM 会把本地内存置为无效，让线程执行临界区代码的时候必须去主内存中读取共享变量值（和<strong>volatile 读</strong>一样）</li>\\n<li><strong>释放锁</strong>：JMM 建本地内存中的值刷到主内存中（和<strong>volatile 写</strong>一样）</li>\\n</ul>\\n<h5 id=\\\"锁的内存语义的实现\\\">锁的内存语义的实现</h5>\\n<ol>\\n<li>利用 volatile 变量的写-读具有的内存语义</li>\\n<li>利用 CAS 所附带的 volatile 读和 volatile 写的内存语义（同时具有两种语义）</li>\\n</ol>\\n\";","export default \"<h3 id=\\\"introduction\\\">Introduction</h3>\\n<p>有了一些铺垫之后，我们就能开始了解一下Electron的主体功能都提供了什么东西，具体的列表可以看：<a href=\\\"https://electronjs.org/docs/api\\\">https://electronjs.org/docs/api</a></p>\\n<ul>\\n<li>配置相关与对象<ul>\\n<li>app：整个应用程序生命周期相关的api和事件</li>\\n<li>BrowserView：创建和控制视图</li>\\n<li>BrowserWindow：创建和控制浏览器窗口</li>\\n<li>webContent：渲染以及控制 web 页面</li>\\n<li>screen：检索有关屏幕大小、显示器、光标位置等的信息。</li>\\n<li>session：管理浏览器会话、cookie、缓存、代理设置等。</li>\\n<li>process：nodejs的process对象的扩展</li>\\n</ul>\\n</li>\\n<li>UI<ul>\\n<li>对话框</li>\\n<li>菜单</li>\\n<li>任务栏</li>\\n<li>托盘</li>\\n</ul>\\n</li>\\n<li>功能<ul>\\n<li>快捷键/系统快捷键：</li>\\n<li>剪切板</li>\\n<li>操作文件</li>\\n</ul>\\n</li>\\n</ul>\\n<h3 id=\\\"app\\\">app</h3>\\n<blockquote>\\n<p>控制你的应用程序的事件生命周期。</p>\\n</blockquote>\\n<p>进程：<a href=\\\"https://electronjs.org/docs/glossary#main-process\\\">主进程</a></p>\\n<p>下面的这个例子将会展示如何在最后一个窗口被关闭时退出应用：</p>\\n<pre><code class=\\\"hljs language-javascript\\\"><span class=\\\"hljs-keyword\\\">const</span> { app } = <span class=\\\"hljs-built_in\\\">require</span>(<span class=\\\"hljs-string\\\">&#x27;electron&#x27;</span>)\\napp.<span class=\\\"hljs-title function_\\\">on</span>(<span class=\\\"hljs-string\\\">&#x27;window-all-closed&#x27;</span>, <span class=\\\"hljs-function\\\">() =&gt;</span> {\\n  app.<span class=\\\"hljs-title function_\\\">quit</span>()\\n})<span class=\\\"hljs-title class_\\\">Copy</span>\\n</code></pre>\\n<h4 id=\\\"事件\\\">事件</h4>\\n<p>一些主要的事件如启动前后、退出先后的事件</p>\\n<ul>\\n<li><p><a href=\\\"https://electronjs.org/docs/api/app#%E4%BA%8B%E4%BB%B6-will-finish-launching\\\">事件: &#39;will-finish-launching&#39;</a></p>\\n</li>\\n<li><p><a href=\\\"https://electronjs.org/docs/api/app#%E4%BA%8B%E4%BB%B6-ready\\\">事件: &#39;ready&#39;</a></p>\\n</li>\\n<li><p><a href=\\\"https://electronjs.org/docs/api/app#%E4%BA%8B%E4%BB%B6-window-all-closed\\\">事件: &#39;window-all-closed&#39;</a></p>\\n</li>\\n<li><p><a href=\\\"https://electronjs.org/docs/api/app#%E4%BA%8B%E4%BB%B6%EF%BC%9Abefore-quit\\\">事件：&#39;before-quit&#39;</a></p>\\n</li>\\n<li><p><a href=\\\"https://electronjs.org/docs/api/app#%E4%BA%8B%E4%BB%B6-will-quit\\\">事件: &#39;will-quit&#39;</a></p>\\n</li>\\n<li><p><a href=\\\"https://electronjs.org/docs/api/app#%E4%BA%8B%E4%BB%B6-quit\\\">事件: &#39;quit&#39;</a></p>\\n</li>\\n</ul>\\n<p><strong>其他事件：</strong></p>\\n<p>还有一些窗口blur和focus、webcontent创建、remote相关、crashed相关的事件</p>\\n<h4 id=\\\"api\\\">API</h4>\\n<h5 id=\\\"appquit\\\"><a href=\\\"https://electronjs.org/docs/api/app#appquit\\\"><code>app.quit()</code></a></h5>\\n<p>尝试关闭所有窗口 将首先发出 <code>before-quit</code> 事件。 如果所有窗口都已成功关闭, 则将发出 <code>will-quit</code> 事件, 并且默认情况下应用程序将终止。</p>\\n<p>此方法会确保执行所有<code>beforeunload</code> 和 <code>unload</code>事件处理程序。 可以在退出窗口之前的<code>beforeunload</code>事件处理程序中返回<code>false</code>取消退出。</p>\\n<h5 id=\\\"appexitexitcode\\\"><a href=\\\"https://electronjs.org/docs/api/app#appexitexitcode\\\"><code>app.exit([exitCode])</code></a></h5>\\n<ul>\\n<li><code>exitCode</code> Integer (可选)</li>\\n</ul>\\n<p>立即退出程序并返回 <code>exitCode</code>。<code>exitCode</code> 的默认值是 0。</p>\\n<p>所有窗口都将立即被关闭，而不询问用户，而且 <code>before-quit</code> 和 <code>will-quit</code> 事件也不会被触发。</p>\\n<h5 id=\\\"apprelaunchoptions\\\"><a href=\\\"https://electronjs.org/docs/api/app#apprelaunchoptions\\\"><code>app.relaunch([options])</code></a></h5>\\n<ul>\\n<li><code>options</code> Object (可选)<ul>\\n<li><code>args</code> String</li>\\n<li><code>execPath</code> String (可选)</li>\\n</ul>\\n</li>\\n</ul>\\n<p>从当前实例退出，重启应用。</p>\\n<p>默认情况下，新的实例将会使用和当前实例相同的工作目录以及命令行参数。 当设置了 <code>args</code> 参数时， <code>args</code> 将作为命令行参数传递。 当设置了 <code>execPath</code> ，<code>execPath</code> 将被执行以重新启动，而不是当前的应用程序。</p>\\n<p>请注意, 此方法在执行时不会退出当前的应用程序, 你需要在调用 <code>app.relaunch</code> 方法后再执行 <code>app. quit</code> 或者 <code>app.exit</code> 来让应用重启。</p>\\n<h5 id=\\\"appdisablehardwareacceleration\\\"><a href=\\\"https://electronjs.org/docs/api/app#appdisablehardwareacceleration\\\"><code>app.disableHardwareAcceleration()</code></a></h5>\\n<p>禁用当前应用程序的硬件加速。</p>\\n<p>这个方法只能在应用程序准备就绪（ready）之前调用。</p>\\n<h5 id=\\\"appdisabledomainblockingfor3dapis\\\"><a href=\\\"https://electronjs.org/docs/api/app#appdisabledomainblockingfor3dapis\\\"><code>app.disableDomainBlockingFor3DAPIs()</code></a></h5>\\n<p>默认情况下, 如果 GPU 进程频繁崩溃, Chromium 会禁用 3D api (例如 WebGL) 直到每个域重新启动。此函数禁用该行为。</p>\\n<p>这个方法只能在应用程序准备就绪（ready）之前调用。</p>\\n<h5 id=\\\"appgetappmetrics\\\"><a href=\\\"https://electronjs.org/docs/api/app#appgetappmetrics\\\"><code>app.getAppMetrics()</code></a></h5>\\n<p>返回 <a href=\\\"https://electronjs.org/docs/api/structures/process-metric\\\"><code>ProcessMetric[]</code></a>: 包含所有与应用相关的进程的内存和CPU的使用统计的 <code>ProcessMetric</code> 对象的数组。</p>\\n<h5 id=\\\"appgetgpufeaturestatus\\\"><a href=\\\"https://electronjs.org/docs/api/app#appgetgpufeaturestatus\\\"><code>app.getGPUFeatureStatus()</code></a></h5>\\n<p>返回 <a href=\\\"https://electronjs.org/docs/api/structures/gpu-feature-status\\\"><code>GPUFeatureStatus</code></a>-来自 <code>chrome://gpu/</code> 的图形功能状态。</p>\\n<h5 id=\\\"appgetgpuinfoinfotype\\\"><a href=\\\"https://electronjs.org/docs/api/app#appgetgpuinfoinfotype\\\"><code>app.getGPUInfo(infoType)</code></a></h5>\\n<ul>\\n<li><code>infoType</code> String - 值可以是基本信息的<code>basic</code>，也可以是完整信息的<code>complete</code></li>\\n</ul>\\n<h5 id=\\\"其他api\\\">其他API</h5>\\n<ul>\\n<li>资源path相关</li>\\n<li>应用信息相关</li>\\n<li>任务栏List、最近打开文档相关</li>\\n<li>单例锁</li>\\n</ul>\\n<h3 id=\\\"browserview\\\">BrowserView</h3>\\n<blockquote>\\n<p>创建和控制视图</p>\\n</blockquote>\\n<p>进程：<a href=\\\"https://electronjs.org/docs/glossary#main-process\\\">主进程</a></p>\\n<p><code>BrowserView</code> 被用来让 <a href=\\\"https://electronjs.org/docs/api/browser-window\\\"><code>BrowserWindow</code></a> 嵌入更多的 web 内容。 它就像一个子窗口，除了它的位置是相对于父窗口。 这意味着可以替代<code>webview</code>标签.</p>\\n<p>这个类有静态方法能够获取所有的BrowserView，也能够再窗口中创建新的Browser实例，也有destory等方法。</p>\\n<h3 id=\\\"browserwindow\\\">BrowserWindow</h3>\\n<blockquote>\\n<p>创建和控制浏览器窗口</p>\\n</blockquote>\\n<p>进程：<a href=\\\"https://electronjs.org/docs/glossary#main-process\\\">主进程</a></p>\\n<pre><code class=\\\"hljs language-javascript\\\"><span class=\\\"hljs-comment\\\">// 在主进程中.</span>\\n<span class=\\\"hljs-keyword\\\">const</span> { <span class=\\\"hljs-title class_\\\">BrowserWindow</span> } = <span class=\\\"hljs-built_in\\\">require</span>(<span class=\\\"hljs-string\\\">&#x27;electron&#x27;</span>)\\n\\n<span class=\\\"hljs-comment\\\">// 或者从渲染进程中使用 `remote`.</span>\\n<span class=\\\"hljs-comment\\\">// const { BrowserWindow } = require(&#x27;electron&#x27;).remote</span>\\n\\n<span class=\\\"hljs-keyword\\\">let</span> win = <span class=\\\"hljs-keyword\\\">new</span> <span class=\\\"hljs-title class_\\\">BrowserWindow</span>({ <span class=\\\"hljs-attr\\\">width</span>: <span class=\\\"hljs-number\\\">800</span>, <span class=\\\"hljs-attr\\\">height</span>: <span class=\\\"hljs-number\\\">600</span> })\\nwin.<span class=\\\"hljs-title function_\\\">on</span>(<span class=\\\"hljs-string\\\">&#x27;closed&#x27;</span>, <span class=\\\"hljs-function\\\">() =&gt;</span> {\\n  win = <span class=\\\"hljs-literal\\\">null</span>\\n})\\n\\n<span class=\\\"hljs-comment\\\">// 加载远程URL</span>\\nwin.<span class=\\\"hljs-title function_\\\">loadURL</span>(<span class=\\\"hljs-string\\\">&#x27;https://github.com&#x27;</span>)\\n\\n<span class=\\\"hljs-comment\\\">// 或加载本地HTML文件</span>\\nwin.<span class=\\\"hljs-title function_\\\">loadURL</span>(<span class=\\\"hljs-string\\\">`file://<span class=\\\"hljs-subst\\\">${__dirname}</span>/app/index.html`</span>)\\n</code></pre>\\n<h4 id=\\\"api-1\\\">API</h4>\\n<p><a href=\\\"https://electronjs.org/docs/api/browser-window#new-browserwindowoptions\\\"><code>new BrowserWindow([options])</code></a></p>\\n<ul>\\n<li><code>选项</code> Object (可选)<ul>\\n<li><code>width</code> Integer (可选) - 窗口的宽度，单位为像素。默认为<code>800</code>.</li>\\n<li><code>height</code> Integer(可选) - 窗口的高度，单位为像素。默认为<code>600</code>.</li>\\n<li><code>x</code> Integer (可选) (如果 y 存在时<strong>必填</strong>) - 窗口相对于屏幕左侧的偏移位置. 默认居中.</li>\\n<li><code>y</code> Integer (可选) (如果 x 存在时<strong>必填</strong>) - 窗口相对于屏幕顶部的偏移位置. 默认居中.</li>\\n<li><code>useContentSize</code> Boolean (可选) - <code>width</code> 和 <code>height</code> 将设置为 web 页面的尺寸(译注: 不包含边框), 这意味着窗口的实际尺寸将包括窗口边框的大小，稍微会大一点。 默认值为 <code>false</code>.</li>\\n<li><code>center</code> Boolean (可选) - 窗口在屏幕居中.</li>\\n<li><code>minWidth</code> Integer (可选) - 窗口的最小宽度, 默认值为 <code>0</code>.</li>\\n<li><code>minHeight</code> Integer (可选) - 窗口的最小高度. 默认值为 <code>0</code>.</li>\\n<li><code>maxWidth</code> Integer (可选) - 窗口的最大宽度, 默认无限制.</li>\\n<li><code>maxHeight</code> Integer (可选) - 窗口的最大高度, 默认无限制.</li>\\n<li><code>resizable</code> Boolean (可选) - 窗口是否可以改变尺寸. 默认值为<code>true</code>.</li>\\n<li><code>movable</code> Boolean (可选) - 窗口是否可以移动. 在 Linux 中无效. 默认值为 <code>true</code>.</li>\\n<li><code>minimizable</code> Boolean (可选) - 窗口是否可以最小化. 在 Linux 中无效. 默认值为 <code>true</code>.</li>\\n<li><code>maximizable</code> Boolean (可选) - 窗口是否可以最大化动. 在 Linux 中无效. 默认值为 <code>true</code>.</li>\\n<li><code>closable</code> Boolean (可选) - 窗口是否可以关闭. 在 Linux 中无效. 默认值为 <code>true</code>.</li>\\n<li><code>focusable</code> Boolean (可选) - 窗口是否可以聚焦. 默认值为 <code>true</code>。 在 Windows 中设置 <code>focusable: false</code> 也意味着设置了<code>skipTaskbar: true</code>. 在 Linux 中设置 <code>focusable: false</code> 时窗口停止与 wm 交互, 并且窗口将始终置顶。</li>\\n<li><code>alwaysOnTop</code> Boolean (可选) -窗口是否永远在别的窗口的上面. 默认值为<code>false</code>.</li>\\n<li><code>fullscreen</code> Boolean (可选) - 窗口是否全屏. 当明确设置为 <code>false</code> 时，在 macOS 上全屏的按钮将被隐藏或禁用. 默认值为 <code>false</code>.</li>\\n<li><code>fullscreenable</code> Boolean (可选) - 窗口是否可以进入全屏状态. 在 macOS上, 最大化/缩放按钮是否可用 默认值为 <code>true</code>。</li>\\n<li><code>simpleFullscreen</code> Boolean (可选) - 在 macOS 上使用 pre-Lion 全屏. 默认为<code>false</code>.</li>\\n<li><code>skipTaskbar</code> Boolean (可选) - 是否在任务栏中显示窗口. 默认值为<code>false</code>.</li>\\n<li><code>kiosk</code> Boolean (可选) - kiosk 模式. 默认值为 <code>false</code>.</li>\\n<li><code>title</code>String(可选) - 默认窗口标题 默认为<code>&quot;Electron&quot;</code>。 如果由<code>loadURL()</code>加载的HTML文件中含有标签<code>&lt;title&gt;</code>，此属性将被忽略。</li>\\n<li><code>icon</code> (<a href=\\\"https://electronjs.org/docs/api/native-image\\\">NativeImage</a> | String) (可选) - 窗口的图标. 在 Windows 上推荐使用 <code>ICO</code> 图标来获得最佳的视觉效果, 默认使用可执行文件的图标.</li>\\n<li><code>show</code> Boolean (可选) - 窗口创建的时候是否显示. 默认值为<code>true</code>.</li>\\n<li><code>frame</code> Boolean (可选) - 设置为 <code>false</code> 时可以创建一个<a href=\\\"https://electronjs.org/docs/api/frameless-window\\\">Frameless Window</a>. 默认值为 <code>true</code>.</li>\\n<li><code>parent</code> BrowserWindow (可选) - 指定父窗口. 默认值为 <code>null</code>.</li>\\n<li><code>modal</code> Boolean (可选) -是否为模态窗. 仅供子窗口使用. 默认值为<code>false</code>.</li>\\n<li><code>acceptFirstMouse</code> Boolean (可选) - 是否允许单击页面来激活窗口. 默认值为 <code>false</code>.</li>\\n<li><code>disableAutoHideCursor</code> Boolean (可选) - 是否在输入时隐藏鼠标. 默认值为<code>false</code>.</li>\\n<li><code>autoHideMenuBar</code> Boolean (可选) - 自动隐藏菜单栏, 除非按了<code>Alt</code>键. 默认值为<code>false</code>.</li>\\n<li><code>enableLargerThanScreen</code> Boolean (可选) - 是否允许改变窗口的大小时, 大于屏幕的尺寸. 默认值为<code>false</code>.</li>\\n<li><code>backgroundColor</code> String(可选) - 窗口的背景颜色为十六进制值，例如<code>#66CD00</code>, <code>#FFF</code>, <code>#80FFFFFF</code> (设置<code>transparent</code>为<code>true</code>方可支持alpha属性，格式为#AARRGGBB)。 默认值为 <code>#FFF</code>（白色）。</li>\\n<li><code>hasShadow</code> Boolean (可选) - 窗口是否有阴影. 仅在 macOS 上支持. 默认值为 <code>true</code>.</li>\\n<li><code>opacity</code> Number (可选)-设置窗口初始的不透明度, 介于 0.0 (完全透明) 和 1.0 (完全不透明) 之间。仅支持 Windows 和 macOS 。</li>\\n<li><code>darkTheme</code> Boolean (可选) - 强制窗口使用 dark 主题, 只在一些拥有 GTK+3 桌面环境上有效. 默认值为 <code>false</code>.</li>\\n<li><code>transparent</code> Boolean (可选) - 使窗口 <a href=\\\"https://electronjs.org/docs/api/frameless-window\\\">透明</a>. 默认值为 <code>false</code>.</li>\\n<li><code>type</code> String (可选) - 窗口的类型, 默认为普通窗口. 下面可以查看更多.</li>\\n<li><code>titleBarStyle</code> String (可选) - 窗口标题栏的样式. 默认值为 <code>default</code>. 可能的值有：<ul>\\n<li><code>default</code> - 标准灰色不透明的Mac标题栏</li>\\n<li><code>hidden</code> - 隐藏标题栏, 内容充满整个窗口, 但它依然在左上角, 仍然受标准窗口控制.</li>\\n<li><code>hiddenInset</code> - 隐藏标题栏, 显示小的控制按钮在窗口边缘</li>\\n<li><code>customButtonsOnHover</code> Boolean (可选) - 在macOS的无框窗口上绘制自定义的关闭与最小化按钮. 除非鼠标悬停到窗口的左上角, 否则这些按钮不会显示出来. 这些自定义的按钮能防止, 与发生于标准的窗口工具栏按钮处的鼠标事件相关的问题. <strong>注意:</strong> 此选项目前是实验性的。</li>\\n</ul>\\n</li>\\n<li><code>fullscreenWindowTitle</code> Boolean (可选) - 在 macOS 全屏模式时，为所有带 <code>titleBarStyle</code> 选项的标题栏显示标题。默认值为 <code>false</code>。</li>\\n<li><code>thickFrame</code> Boolean(可选)-对 Windows 上的无框窗口使用<code>WS_THICKFRAME</code> 样式，会增加标准窗口框架。 设置为 <code>false</code> 时将移除窗口的阴影和动画. 默认值为 <code>true</code>。</li>\\n<li><code>vibrancy</code> String (可选) - 窗口是否使用 vibrancy 动态效果, 仅 macOS 中有效. 可以为 <code>appearance-based</code>, <code>light</code>, <code>dark</code>, <code>titlebar</code>, <code>selection</code>, <code>menu</code>, <code>popover</code>, <code>sidebar</code>, <code>medium-light</code> 或 <code>ultra-dark</code>. 请注意，结合一个 vibrancy 值使用 <code>frame: false</code> ，需要确保<code>titleBarStyle</code>为一个非默认值。</li>\\n<li><code>zoomToPageWidth</code> Boolean (可选) - 单击工具栏上的绿色信号灯按钮或单击 窗口&gt;缩放 菜单项时的行为, 仅macOS中有效. 如果为 <code>true</code>, 窗口将放大到网页的本身宽度, <code>false</code> 将使其缩放到屏幕的宽度。 这也会影响直接调用 <code>maximize()</code> 时的行为。 默认值为 <code>false</code>.</li>\\n<li><code>tabbingIdentifier</code> String (可选) - 选项组卡的名称，在macOS 10.12+上可使窗口在原生选项卡中打开. 具有相同标识符的窗口将被组合在一起。 这还会在窗口的标签栏中添加一个原生的新选项卡按钮, 并允许 <code>app</code> 和窗口接收 <code>new-window-for-tab</code> 事件。</li>\\n<li><code>webPreferences</code> Object (可选) - 网页功能的设置<ul>\\n<li><code>devTools</code> Boolean (可选) - 是否开启 DevTools. 如果设置为 <code>false</code>, 则无法使用 <code>BrowserWindow.webContents.openDevTools ()</code> 打开 DevTools。 默认值为 <code>true</code>。</li>\\n<li><code>nodeIntegration</code> Boolean (可选) - 是否集成Node，默认为<code>false</code>。</li>\\n<li><code>nodeIntegrationInWorker</code> Boolean (可选) - 是否在Web工作器中启用了Node集成. 默认值为 <code>false</code>. 更多内容参见 <a href=\\\"https://electronjs.org/docs/tutorial/multithreading\\\">多线程</a>.</li>\\n<li><code>nodeIntegrationInSubFrames</code> Boolean (optional) - Experimental option for enabling Node.js support in sub-frames such as iframes and child windows. All your preloads will load for every iframe, you can use <code>process.isMainFrame</code> to determine if you are in the main frame or not.</li>\\n<li><code>preload</code> String (可选) -在页面运行其他脚本之前预先加载指定的脚本 无论页面是否集成Node, 此脚本都可以访问所有Node API 脚本路径为文件的绝对路径。 当 node integration 关闭时, 预加载的脚本将从全局范围重新引入node的全局引用标志 <a href=\\\"https://electronjs.org/docs/api/process#event-loaded\\\">参考示例</a>.</li>\\n<li><code>sandbox</code> Boolean (可选)-如果设置该参数, 沙箱的渲染器将与窗口关联, 使它与Chromium OS-level 的沙箱兼容, 并禁用 Node. js 引擎。 它与 <code>nodeIntegration</code> 的选项不同，且预加载脚本的 API 也有限制. <a href=\\\"https://electronjs.org/docs/api/sandbox-option\\\">更多详情</a>. **注意:**改选项目前是为实验性质，可能会在 Electron 未来的版本中移除。</li>\\n<li><code>enableRemoteModule</code> Boolean（可选）- 是否启用 <a href=\\\"https://electronjs.org/docs/api/remote\\\"><code>Remote</code></a> 模块。 默认值为 <code>true</code>。</li>\\n<li><code>session</code> <a href=\\\"https://electronjs.org/docs/api/session#class-session\\\">Session</a> (可选) - 设置页面的 session 而不是直接忽略 Session 对象, 也可用 <code>partition</code> 选项来代替，它接受一个 partition 字符串. 同时设置了<code>session</code> 和 <code>partition</code>时, <code>session</code> 的优先级更高. 默认使用默认的 session.</li>\\n<li><code>partition</code> String (optional) - 通过 session 的 partition 字符串来设置界面session. 如果 <code>partition</code> 以 <code>persist:</code>开头, 该页面将使用持续的 session，并在所有页面生效，且使用同一个<code>partition</code>. 如果没有 <code>persist:</code> 前缀, 页面将使用 in-memory session. 通过分配相同的 <code>partition</code>, 多个页可以共享同一会话。 默认使用默认的 session.</li>\\n<li><code>affinity</code> String (可选) - 当指定，具有相同<code>affinity</code> 的 web页面将在相同的渲染进程运行。 需要注意的是，由于渲染过程中会有代码重用，如 <code>webPreferences</code>的<code>preload</code>, <code>sandbox</code> 和 <code>nodeIntegration</code>等选项会在不同页面之间共用，即使你已经在不同页面中为同一选项设置过不同的值，它们仍会被共用。 因此，建议为<code>affinity</code>相同的页面，使用相同的 <code>webPreferences</code> <em>这一选项当前是实验性的</em></li>\\n<li><code>zoomFactor</code> Number (可选) - 页面的默认缩放系数, <code>3.0</code> 表示 <code>300%</code>. 默认值为 <code>1.0</code>.</li>\\n<li><code>javascript</code> Boolean (可选) - 是否启用 JavaScript 支持. 默认值为 <code>true</code>.</li>\\n<li><code>webSecurity</code> Boolean (可选) - 当设置为 <code>false</code>, 它将禁用同源策略 (通常用来测试网站), 如果此选项不是由开发者设置的，还会把 <code>allowRunningInsecureContent</code>设置为 <code>true</code>. 默认值为 <code>true</code>。</li>\\n<li><code>allowRunningInsecureContent</code> Boolean (可选) -允许一个 https 页面运行 http url 里的资源，包括 JavaScript, CSS 或 plugins. 默认值为 <code>false</code>.</li>\\n<li><code>images</code> Boolean (可选) - 启动图像支持. 默认值为 <code>true</code>.</li>\\n<li><code>textAreasAreResizable</code> Boolean (可选) - 让 TextArea 元素可以调整大小. 默认值为 <code>true</code>.</li>\\n<li><code>webgl</code> Boolean (可选) - 启用 WebGL 支持. 默认值为 <code>true</code>.</li>\\n<li><code>plugins</code> Boolean (可选) - 是否支持插件. 默认值为 <code>false</code>.</li>\\n<li><code>experimentalFeatures</code> Boolean (optional) - 启用 Chromium 的实验功能. 默认值为 <code>false</code>.</li>\\n<li><code>scrollBounce</code> Boolean (可选) - 在 macOS 启用弹力动画 (橡皮筋) 效果. 默认值为 <code>false</code>.</li>\\n<li><code>enableBlinkFeatures</code>String(可选) - 以<code>逗号</code>分隔的需要启用的特性列表，譬如<code>CSSVariables,KeyboardEventKey</code> 在 <a href=\\\"https://cs.chromium.org/chromium/src/third_party/blink/renderer/platform/runtime_enabled_features.json5?l=70\\\">RuntimeEnabledFeatures.json5</a>文件中查看被支持的所有特性.</li>\\n<li><code>disableBlinkFeatures</code> String (可选) - 以 <code>,</code>分隔的禁用特性列表, 如 <code>CSSVariables,KeyboardEventKey</code>. 在<a href=\\\"https://cs.chromium.org/chromium/src/third_party/blink/renderer/platform/runtime_enabled_features.json5?l=70\\\">RuntimeEnabledFeatures.json5</a> 文件中查看被支持的所有特性.</li>\\n<li><code>defaultFontFamily</code> Object (可选) - 设置 font-family 的默认字体.<ul>\\n<li><code>standard</code> String (可选) - 默认值为 <code>Times New Roman</code>.</li>\\n<li><code>serif</code> String (可选) - 默认值为 <code>Times New Roman</code>.</li>\\n<li><code>sansSerif</code> String (可选) - 默认值为 <code>Arial</code>.</li>\\n<li><code>monospace</code> String (可选) - 默认值为 <code>Courier New</code>.</li>\\n<li><code>cursive</code> String (可选) - 默认值为 <code>Script</code>.</li>\\n<li><code>fantasy</code> String (可选) - 默认值为 <code>Impact</code>.</li>\\n</ul>\\n</li>\\n<li><code>defaultFontSize</code> Integer (可选) - 默认值为 <code>16</code>.</li>\\n<li><code>defaultMonospaceFontSize</code> Integer (可选) - 默认值为 <code>13</code>.</li>\\n<li><code>minimumFontSize</code> Integer (可选) - 默认值为 <code>0</code>.</li>\\n<li><code>defaultEncoding</code> String (可选) - 默认值为 <code>ISO-8859-1</code>.</li>\\n<li><code>backgroundThrottling</code>Boolean (可选)-是否在页面成为背景时限制动画和计时器。 这也会影响到 <a href=\\\"https://electronjs.org/docs/api/browser-window#page-visibility\\\">Page Visibility API</a>. 默认值为 <code>true</code>。</li>\\n<li><code>offscreen</code> Boolean (optional) - 是否绘制和渲染可视区域外的窗口. 默认值为 <code>false</code>. 更多详情, 请参见 <a href=\\\"https://electronjs.org/docs/tutorial/offscreen-rendering\\\">offscreen rendering tutorial </a>。</li>\\n<li><code>contextIsolation</code> Boolean (可选) - 是否在独立 JavaScript 环境中运行 Electron API和指定的<code>preload</code> 脚本. 默认值为 <code>false</code>. <code>preload</code>脚本的运行环境仍然可以访问<code>document</code> 和 <code>window</code>全局变量，但它将使用自己内置的函数 (如<code>Array</code>, <code>Object</code>, <code>JSON</code>等)，并且将被加载的页面与对全局环境所做的任何更改隔离开来. Electron API 仅在 <code>preload</code> 脚本中有效，而不是加载的页面。 在加载可能不受信任的远程内容时, 应使用此选项, 以确保加载的内容不能篡改 <code>preload</code> 脚本和使用的 Electron APIs。 此选项使用 <a href=\\\"https://developer.chrome.com/extensions/content_scripts#execution-environment\\\">Chrome Content Scripts </a>使用的相同技术。 通过在控制台选项卡顶部的组合框中选择 &quot;Electron Isolated Context&quot; 条目, 可以在开发工具中访问此上下文。</li>\\n<li><code>nativeWindowOpen</code> Boolean (可选) - 是否使用原生的<code>window.open()</code>. 默认值为 <code>false</code>. Child windows will always have node integration disabled unless <code>nodeIntegrationInSubFrames</code> is true. <strong>注意:</strong> 此选项目前是实验性的。</li>\\n<li><code>webviewTag</code> Boolean (可选) - 是否启用 <a href=\\\"https://electronjs.org/docs/api/webview-tag\\\">`` tag</a>标签. 默认值为 <code>false</code>. <strong>注意:</strong> 为 <code>&lt; webview&gt;</code> 配置的 <code>preload</code> 脚本在执行时将启用节点集成, 因此应确保远程或不受信任的内容无法创建恶意的 <code>preload</code> 脚本 。 可以使用 <a href=\\\"https://electronjs.org/docs/api/web-contents\\\">webContents </a>上的 <code>will-attach-webview</code> 事件对 <code>preload</code> 脚本进行剥离, 并验证或更改 <code>&lt;webview&gt;</code> 的初始设置。</li>\\n<li><code>additionalArguments</code> String[] (可选) - 一系列将会被附加至此app的渲染进程的<code>process.argv</code>的字符串. 对于将少量数据向下传至渲染进程的预加载脚本而言是十分实用的.</li>\\n<li><code>safeDialogs</code> Boolean (可选) - 是否启用浏览器样式的持续对话框保护。 缺省为<code>false</code>。</li>\\n<li><code>safeDialogsMessage</code> String (可选) - 当持续对话框保护被触发时显示的消息。 如果没有定义，那么将使用缺省的消息。注意：当前缺省消息是英文，并没有本地化。</li>\\n<li><code>navigateOnDragDrop</code> Boolean (可选) - 将文件或链接拖放到页面上时是否触发页面跳转. 默认为<code>false</code>.</li>\\n<li><code>autoplayPolicy</code> String (optional) - Autoplay policy to apply to content in the window, can be <code>no-user-gesture-required</code>, <code>user-gesture-required</code>, <code>document-user-activation-required</code>. Defaults to <code>no-user-gesture-required</code>.</li>\\n<li><code>disableHtmlFullscreenWindowResize</code> Boolean (optional) - Whether to prevent the window from resizing when entering HTML Fullscreen. Default is <code>false</code>.</li>\\n</ul>\\n</li>\\n</ul>\\n</li>\\n</ul>\\n<p>当使用 <code>minWidth</code>/<code>maxWidth</code>/<code>minHeight</code>/<code>maxHeight</code> 设置最小或最大窗口大小时, 它只限制用户。 它不会阻止您将不符合大小限制的值传递给 <code>setBounds</code>/<code>setSize</code> 或 <code>BrowserWindow</code> 的构造函数。</p>\\n<p><code>type</code> 选项的可能值和行为与平台相关。可能的值为:</p>\\n<ul>\\n<li>在 Linux 上, 可能的类型有 <code>desktop</code>、<code>dock</code>、<code>toolbar</code>、<code>splash</code>、<code>notification</code>。</li>\\n<li>在 macOS, 可能的类型是 <code>desktop</code>, <code>textured</code>.<ul>\\n<li><code>textured</code> 类型增加金属色泽的外观 (<code>NSTexturedBackgroundWindowMask</code>).</li>\\n<li><code>desktop</code> 类型将窗口置于桌面背景级别 (<code>kCGDesktopWindowLevel - 1</code>). 注意，桌面窗口不会接收焦点、键盘或鼠标事件，但您可以使用<code>globalShortcut</code>接收快捷键的消息</li>\\n</ul>\\n</li>\\n<li>在 Windows 上, 可能的类型为 <code>toolbar</code>.</li>\\n</ul>\\n<h5 id=\\\"静态方法\\\">静态方法</h5>\\n<p><a href=\\\"https://electronjs.org/docs/api/browser-window#browserwindowgetallwindows\\\"><code>BrowserWindow.getAllWindows()</code></a></p>\\n<p>返回 <code>BrowserWindow[]</code> - 所有打开的窗口的数组</p>\\n<p><a href=\\\"https://electronjs.org/docs/api/browser-window#browserwindowgetfocusedwindow\\\"><code>BrowserWindow.getFocusedWindow()</code></a></p>\\n<p>返回 <code>BrowserWindow | null</code> - 此应用程序中当前获得焦点的窗口，如果无就返回 <code>null</code>.</p>\\n<p><a href=\\\"https://electronjs.org/docs/api/browser-window#browserwindowfromwebcontentswebcontents\\\"><code>BrowserWindow.fromWebContents(webContents)</code></a></p>\\n<ul>\\n<li><code>webContents</code> <a href=\\\"https://electronjs.org/docs/api/web-contents\\\">WebContents</a></li>\\n</ul>\\n<p>返回 <code>BrowserWindow</code> - 拥有给定 <code>webContents</code> 的窗口.</p>\\n<p><a href=\\\"https://electronjs.org/docs/api/browser-window#browserwindowfrombrowserviewbrowserview\\\"><code>BrowserWindow.fromBrowserView(browserView)</code></a></p>\\n<ul>\\n<li><code>browserView</code> <a href=\\\"https://electronjs.org/docs/api/browser-view\\\">BrowserView</a></li>\\n</ul>\\n<p>返回 <code>BrowserWindow | null</code>-拥有给定 <code>browserView</code> 的窗口。如果给定视图未附加到任何窗口, 则返回 <code>null</code>。</p>\\n<p><a href=\\\"https://electronjs.org/docs/api/browser-window#browserwindowfromidid\\\"><code>BrowserWindow.fromId(id)</code></a></p>\\n<ul>\\n<li><code>id</code> Integer</li>\\n</ul>\\n<p>返回 <code>BrowserWindow</code> -拥有给定 <code>id</code> 的窗口.</p>\\n<p>还有其他的静态方法能够控制浏览器扩展程序和开发者工具</p>\\n<h5 id=\\\"实例方法\\\">实例方法</h5>\\n<p>各种窗口方法：缩放、最大化最小化、关闭、移动、未响应、展示隐藏、聚焦失焦、窗口位置设置、置顶设置、全屏设置、各种属性的获取、各种状态的获取、加载网页、文件、重启应用、添加删除显示隐藏菜单、子窗口父窗口、菜单可见性、浏览器可见性（透明度）</p>\\n<h4 id=\\\"事件-1\\\">事件</h4>\\n<p>关于浏览器窗口的各种事件：缩放、最大化最小化、关闭、移动、未响应、展示隐藏、聚焦失焦</p>\\n<h4 id=\\\"例1：窗口关闭不退出程序\\\">例1：窗口关闭不退出程序</h4>\\n<pre><code class=\\\"hljs language-javascript\\\"><span class=\\\"hljs-comment\\\">// 取消窗口关闭则推出应用的行为</span>\\n<span class=\\\"hljs-variable language_\\\">window</span>.<span class=\\\"hljs-property\\\">onbeforeunload</span> = <span class=\\\"hljs-function\\\">(<span class=\\\"hljs-params\\\">e</span>) =&gt;</span> {\\n    <span class=\\\"hljs-variable language_\\\">console</span>.<span class=\\\"hljs-title function_\\\">log</span>(<span class=\\\"hljs-string\\\">&#x27;I don\\\\&#x27;t want to be closed.&#x27;</span>)\\n    <span class=\\\"hljs-comment\\\">// 返回默认值会取消关闭</span>\\n    e.<span class=\\\"hljs-property\\\">returnValue</span> = <span class=\\\"hljs-literal\\\">false</span>\\n    <span class=\\\"hljs-comment\\\">// 直接调用hide方法 这样窗口会关闭 但应用还未推出 还能通过托盘还原</span>\\n    win.<span class=\\\"hljs-title function_\\\">hide</span>()\\n}\\n</code></pre>\\n<h4 id=\\\"例2：透明度kiosk模式无边框任务栏隐藏窗口全屏大小\\\">例2：透明度/kiosk模式/无边框/任务栏隐藏/窗口全屏大小</h4>\\n<pre><code class=\\\"hljs language-javascript\\\"><span class=\\\"hljs-keyword\\\">const</span> {\\n    width,\\n    height\\n} = <span class=\\\"hljs-built_in\\\">require</span>(<span class=\\\"hljs-string\\\">&#x27;electron&#x27;</span>).<span class=\\\"hljs-property\\\">screen</span>.<span class=\\\"hljs-title function_\\\">getPrimaryDisplay</span>().<span class=\\\"hljs-property\\\">workAreaSize</span>\\n\\nwin = <span class=\\\"hljs-keyword\\\">new</span> <span class=\\\"hljs-title class_\\\">BrowserWindow</span>({\\n    <span class=\\\"hljs-attr\\\">width</span>: width,\\n    <span class=\\\"hljs-attr\\\">height</span>: height,\\n    <span class=\\\"hljs-comment\\\">// 窗口无边框</span>\\n    <span class=\\\"hljs-comment\\\">// frame: false,</span>\\n\\n    <span class=\\\"hljs-comment\\\">// 透明度</span>\\n    <span class=\\\"hljs-attr\\\">opacity</span>: <span class=\\\"hljs-number\\\">0.8</span>,\\n\\n    <span class=\\\"hljs-comment\\\">// 是否在任务栏中显示窗口</span>\\n    <span class=\\\"hljs-comment\\\">// skipTaskbar: true,</span>\\n\\n    <span class=\\\"hljs-comment\\\">// 终极全屏模式 配合上无边框之后 就像游戏的全屏模式一样</span>\\n    <span class=\\\"hljs-comment\\\">// kiosk: true,</span>\\n})\\n</code></pre>\\n<h3 id=\\\"webcontents\\\">webContents</h3>\\n<blockquote>\\n<p>渲染以及控制 web 页面</p>\\n</blockquote>\\n<p>进程：<a href=\\\"https://electronjs.org/docs/glossary#main-process\\\">主进程</a></p>\\n<p><code>webContents</code> 是 <a href=\\\"https://nodejs.org/api/events.html#events_class_eventemitter\\\">EventEmitter </a>的实例， 负责渲染和控制网页, 是 <a href=\\\"https://electronjs.org/docs/api/browser-window\\\"><code>BrowserWindow</code></a> 对象的一个属性。 这是一个访问 <code>webContents</code> 对象的例子:</p>\\n<pre><code class=\\\"hljs language-javascript\\\"><span class=\\\"hljs-keyword\\\">const</span> { <span class=\\\"hljs-title class_\\\">BrowserWindow</span> } = <span class=\\\"hljs-built_in\\\">require</span>(<span class=\\\"hljs-string\\\">&#x27;electron&#x27;</span>)\\n\\n<span class=\\\"hljs-keyword\\\">let</span> win = <span class=\\\"hljs-keyword\\\">new</span> <span class=\\\"hljs-title class_\\\">BrowserWindow</span>({ <span class=\\\"hljs-attr\\\">width</span>: <span class=\\\"hljs-number\\\">800</span>, <span class=\\\"hljs-attr\\\">height</span>: <span class=\\\"hljs-number\\\">1500</span> })\\nwin.<span class=\\\"hljs-title function_\\\">loadURL</span>(<span class=\\\"hljs-string\\\">&#x27;http://github.com&#x27;</span>)\\n\\n<span class=\\\"hljs-keyword\\\">let</span> contents = win.<span class=\\\"hljs-property\\\">webContents</span>\\n<span class=\\\"hljs-variable language_\\\">console</span>.<span class=\\\"hljs-title function_\\\">log</span>(contents)\\n</code></pre>\\n<h4 id=\\\"api-2\\\">API</h4>\\n<p>通过<code>webContents</code>模块可以访问以下方法：</p>\\n<pre><code class=\\\"hljs language-javascript\\\"><span class=\\\"hljs-keyword\\\">const</span> { webContents } = <span class=\\\"hljs-built_in\\\">require</span>(<span class=\\\"hljs-string\\\">&#x27;electron&#x27;</span>)\\n<span class=\\\"hljs-variable language_\\\">console</span>.<span class=\\\"hljs-title function_\\\">log</span>(webContents)<span class=\\\"hljs-title class_\\\">Copy</span>\\n</code></pre>\\n<p><a href=\\\"https://electronjs.org/docs/api/web-contents#webcontentsgetallwebcontents\\\"><code>webContents.getAllWebContents()</code></a></p>\\n<p><a href=\\\"https://electronjs.org/docs/api/web-contents#webcontentsgetfocusedwebcontents\\\"><code>webContents.getFocusedWebContents()</code></a></p>\\n<p><a href=\\\"https://electronjs.org/docs/api/web-contents#webcontentsfromidid\\\"><code>webContents.fromId(id)</code></a></p>\\n<p>其他的api还有：</p>\\n<ul>\\n<li><p>load资源相关的：URL或者文件</p>\\n</li>\\n<li><p>页面停止加载、重载、前进后退导航</p>\\n</li>\\n<li><p>插入css或者执行js</p>\\n</li>\\n<li><p>放大缩小</p>\\n</li>\\n<li><p>页面音频静音</p>\\n</li>\\n<li><p>编辑命令：redo、undo、cut、copy、select等等</p>\\n</li>\\n<li><p>页面字符查找</p>\\n</li>\\n<li><p>截图</p>\\n<pre><code class=\\\"hljs language-javascript\\\">$(<span class=\\\"hljs-string\\\">&#x27;#jietu&#x27;</span>).<span class=\\\"hljs-title function_\\\">click</span>(<span class=\\\"hljs-function\\\">() =&gt;</span> {\\n    <span class=\\\"hljs-comment\\\">// 截图</span>\\n    <span class=\\\"hljs-keyword\\\">let</span> c = contents[<span class=\\\"hljs-number\\\">0</span>].<span class=\\\"hljs-title function_\\\">capturePage</span>()\\n    <span class=\\\"hljs-comment\\\">// 从promise中获取数据</span>\\n    c.<span class=\\\"hljs-title function_\\\">then</span>(<span class=\\\"hljs-keyword\\\">function</span> (<span class=\\\"hljs-params\\\">data</span>) {\\n        <span class=\\\"hljs-keyword\\\">const</span> fs = <span class=\\\"hljs-built_in\\\">require</span>(<span class=\\\"hljs-string\\\">&#x27;fs&#x27;</span>)\\n        <span class=\\\"hljs-comment\\\">// 用fs处理buffer</span>\\n        <span class=\\\"hljs-keyword\\\">let</span> bf = data.<span class=\\\"hljs-title function_\\\">toPNG</span>()\\n        <span class=\\\"hljs-comment\\\">// 写到文件</span>\\n        fs.<span class=\\\"hljs-title function_\\\">writeFile</span>(<span class=\\\"hljs-string\\\">&#x27;a.png&#x27;</span>, bf, <span class=\\\"hljs-function\\\">(<span class=\\\"hljs-params\\\">err</span>) =&gt;</span> {})\\n    })\\n})\\n</code></pre>\\n</li>\\n<li><p>打印机调用</p>\\n</li>\\n<li><p>打开关闭开发者工具</p>\\n</li>\\n</ul>\\n<h4 id=\\\"事件-2\\\">事件</h4>\\n<p>load相关、导航相关、页面寻找相关</p>\\n<h3 id=\\\"screen\\\">screen</h3>\\n<blockquote>\\n<p>检索有关屏幕大小、显示器、光标位置等的信息。</p>\\n</blockquote>\\n<p>进程：<a href=\\\"https://electronjs.org/docs/glossary#main-process\\\">主进程</a></p>\\n<p>在 <code>app</code> 模块发出 <code>ready</code> 事件之前, 您不能引用或者使用此模块。</p>\\n<p><code>screen</code> 是一个 <a href=\\\"https://nodejs.org/api/events.html#events_class_eventemitter\\\">EventEmitter</a>.</p>\\n<p><strong>注意:</strong> 在 renderer/DevTools 中, <code>window.screen</code> 是一个保留的 DOM 属性, 因此编写 <code>let { screen } = require(&#39;electron&#39;)</code> 将不起作用。</p>\\n<p>创建填充整个屏幕的窗口的示例:</p>\\n<pre><code class=\\\"hljs language-javascript\\\"><span class=\\\"hljs-keyword\\\">const</span> electron = <span class=\\\"hljs-built_in\\\">require</span>(<span class=\\\"hljs-string\\\">&#x27;electron&#x27;</span>)\\n<span class=\\\"hljs-keyword\\\">const</span> { app, <span class=\\\"hljs-title class_\\\">BrowserWindow</span> } = electron\\n\\n<span class=\\\"hljs-keyword\\\">let</span> win\\n\\napp.<span class=\\\"hljs-title function_\\\">on</span>(<span class=\\\"hljs-string\\\">&#x27;ready&#x27;</span>, <span class=\\\"hljs-function\\\">() =&gt;</span> {\\n  <span class=\\\"hljs-keyword\\\">const</span> { width, height } = electron.<span class=\\\"hljs-property\\\">screen</span>.<span class=\\\"hljs-title function_\\\">getPrimaryDisplay</span>().<span class=\\\"hljs-property\\\">workAreaSize</span>\\n  win = <span class=\\\"hljs-keyword\\\">new</span> <span class=\\\"hljs-title class_\\\">BrowserWindow</span>({ width, height })\\n  win.<span class=\\\"hljs-title function_\\\">loadURL</span>(<span class=\\\"hljs-string\\\">&#x27;https://github.com&#x27;</span>)\\n})<span class=\\\"hljs-title class_\\\">Copy</span>\\n</code></pre>\\n<p>另一个在外部显示器中创建窗口的例子</p>\\n<pre><code class=\\\"hljs language-javascript\\\"><span class=\\\"hljs-keyword\\\">const</span> electron = <span class=\\\"hljs-built_in\\\">require</span>(<span class=\\\"hljs-string\\\">&#x27;electron&#x27;</span>)\\n<span class=\\\"hljs-keyword\\\">const</span> { app, <span class=\\\"hljs-title class_\\\">BrowserWindow</span> } = <span class=\\\"hljs-built_in\\\">require</span>(<span class=\\\"hljs-string\\\">&#x27;electron&#x27;</span>)\\n\\n<span class=\\\"hljs-keyword\\\">let</span> win\\n\\napp.<span class=\\\"hljs-title function_\\\">on</span>(<span class=\\\"hljs-string\\\">&#x27;ready&#x27;</span>, <span class=\\\"hljs-function\\\">() =&gt;</span> {\\n  <span class=\\\"hljs-keyword\\\">let</span> displays = electron.<span class=\\\"hljs-property\\\">screen</span>.<span class=\\\"hljs-title function_\\\">getAllDisplays</span>()\\n  <span class=\\\"hljs-keyword\\\">let</span> externalDisplay = displays.<span class=\\\"hljs-title function_\\\">find</span>(<span class=\\\"hljs-function\\\">(<span class=\\\"hljs-params\\\">display</span>) =&gt;</span> {\\n    <span class=\\\"hljs-keyword\\\">return</span> display.<span class=\\\"hljs-property\\\">bounds</span>.<span class=\\\"hljs-property\\\">x</span> !== <span class=\\\"hljs-number\\\">0</span> || display.<span class=\\\"hljs-property\\\">bounds</span>.<span class=\\\"hljs-property\\\">y</span> !== <span class=\\\"hljs-number\\\">0</span>\\n  })\\n\\n  <span class=\\\"hljs-keyword\\\">if</span> (externalDisplay) {\\n    win = <span class=\\\"hljs-keyword\\\">new</span> <span class=\\\"hljs-title class_\\\">BrowserWindow</span>({\\n      <span class=\\\"hljs-attr\\\">x</span>: externalDisplay.<span class=\\\"hljs-property\\\">bounds</span>.<span class=\\\"hljs-property\\\">x</span> + <span class=\\\"hljs-number\\\">50</span>,\\n      <span class=\\\"hljs-attr\\\">y</span>: externalDisplay.<span class=\\\"hljs-property\\\">bounds</span>.<span class=\\\"hljs-property\\\">y</span> + <span class=\\\"hljs-number\\\">50</span>\\n    })\\n    win.<span class=\\\"hljs-title function_\\\">loadURL</span>(<span class=\\\"hljs-string\\\">&#x27;https://github.com&#x27;</span>)\\n  }\\n})\\n</code></pre>\\n<h3 id=\\\"session\\\">session</h3>\\n<blockquote>\\n<p>管理浏览器会话、cookie、缓存、代理设置等。</p>\\n</blockquote>\\n<p>进程：<a href=\\\"https://electronjs.org/docs/glossary#main-process\\\">主进程</a></p>\\n<p><code>session</code> 模块可用于创建新的 <code>session</code> 对象。</p>\\n<p>你还可以使用<a href=\\\"https://electronjs.org/docs/api/web-contents\\\"><code>WebContents</code></a>的<code>session</code>属性或<code>session</code>模块访问现有页的<code>session</code></p>\\n<pre><code class=\\\"hljs language-javascript\\\"><span class=\\\"hljs-keyword\\\">const</span> { <span class=\\\"hljs-title class_\\\">BrowserWindow</span> } = <span class=\\\"hljs-built_in\\\">require</span>(<span class=\\\"hljs-string\\\">&#x27;electron&#x27;</span>)\\n\\n<span class=\\\"hljs-keyword\\\">let</span> win = <span class=\\\"hljs-keyword\\\">new</span> <span class=\\\"hljs-title class_\\\">BrowserWindow</span>({ <span class=\\\"hljs-attr\\\">width</span>: <span class=\\\"hljs-number\\\">800</span>, <span class=\\\"hljs-attr\\\">height</span>: <span class=\\\"hljs-number\\\">600</span> })\\nwin.<span class=\\\"hljs-title function_\\\">loadURL</span>(<span class=\\\"hljs-string\\\">&#x27;http://github.com&#x27;</span>)\\n\\n<span class=\\\"hljs-keyword\\\">const</span> ses = win.<span class=\\\"hljs-property\\\">webContents</span>.<span class=\\\"hljs-property\\\">session</span>\\n<span class=\\\"hljs-variable language_\\\">console</span>.<span class=\\\"hljs-title function_\\\">log</span>(ses.<span class=\\\"hljs-title function_\\\">getUserAgent</span>())\\n</code></pre>\\n<h4 id=\\\"api-3\\\">API</h4>\\n<p>它的api包括：浏览器缓存清除、代理设置</p>\\n<h3 id=\\\"process\\\">process</h3>\\n<blockquote>\\n<p>处理对象的扩展</p>\\n</blockquote>\\n<p>进程： <a href=\\\"https://electronjs.org/docs/glossary#main-process\\\">Main</a>, <a href=\\\"https://electronjs.org/docs/glossary#renderer-process\\\">Renderer</a></p>\\n<p>Electron&#39;s <code>process</code> 对象继承 <a href=\\\"https://nodejs.org/api/process.html\\\">Node.js <code>process</code> object</a>。 它新增了以下事件、属性和方法</p>\\n<p>api新增了有内存信息、系统信息、CPU信息</p>\\n\";","export default \"<h3 id=\\\"tess\\\">Tess</h3>\\n<h4 id=\\\"0-what-is-tess\\\">0. What is Tess?</h4>\\n<p>Tess.IO is eBay’s cluster manager, with a vision of ensuring a world-class <strong>build, ship and run</strong> experience for eBay’s applications at scale, while ensuring high efficiency, security, and agility to the developers. Tess.IO leverages Kubernetes under its hood. Kubernetes (commonly referred to as “k8s”) is an open source container cluster manager that aims to provide a “platform for automating deployment, scaling, and operations of application containers across clusters of hosts.”</p>\\n<p>Tess makes DevOps a breeze.</p>\\n<blockquote>\\n<p>So, you don&#39;t have to setup k8s or docker on your server anymore.</p>\\n<p>Tess is not an new tech, it&#39;s a plus-version of k8s cli with eBay&#39;s own way.</p>\\n</blockquote>\\n<h4 id=\\\"01-further-reading\\\">0.1. Further Reading</h4>\\n<p>To best introduce topics, the following instructions suggest a way of consuming this documentation such that topics build upon previous topics.</p>\\n<p>First, you’ll want to understand what Tess.IO is. For this, read the <a href=\\\"https://tess.io/userdocs/getting-start/intro\\\">Introduction</a>. Next, you’ll want to set up your machine with the necessary tools and configuration to talk to Tess.IO. For this, read <a href=\\\"https://tess.io/userdocs/getting-start/setup\\\">Setup</a>. Finally, you’ll want to run the <a href=\\\"https://tess.io/userdocs/getting-start/hello-world\\\">Hello World</a> example.</p>\\n<p>From here, you can branch out depending on your needs. Consider starting with <a href=\\\"https://tess.io/userdocs/getting-start/models\\\">Model Workloads</a> followed by <a href=\\\"https://tess.io/userdocs/getting-start/build-and-deploy\\\">Build and Deploy</a>.</p>\\n<p>For a better understanding of Kubernetes we recommend reading the following documentation:</p>\\n<ul>\\n<li>Core Kubernetes <a href=\\\"https://kubernetes.io/docs/home\\\">documentation</a></li>\\n<li><a href=\\\"https://kubernetes.io/docs/concepts/overview/object-management-kubectl/declarative-config/\\\">Declarative</a> configuration files</li>\\n<li>Kubernetes <a href=\\\"https://github.com/kubernetes/examples\\\">examples</a>.</li>\\n<li>Kubernetes <a href=\\\"https://www.youtube.com/playlist?list=PLIivdWyY5sqL3xfXz5xJvwzFW_tlQB_GB\\\">best practices</a>.</li>\\n</ul>\\n<blockquote>\\n<p>I strongly recommends Tess user would have basic knowledge of k8s, otherwise you will get some trouble and you don&#39;t event know how to fix it.</p>\\n<p>Anyway, keep learning.</p>\\n</blockquote>\\n<h4 id=\\\"1-setup-tess-on-your-server\\\">1. Setup Tess on your server</h4>\\n<p>Follow the instructions of <a href=\\\"https://tess.io/userdocs/getting-start/setup/\\\">setup</a>.</p>\\n<h4 id=\\\"2-finish-your-helloworld\\\">2. Finish your helloworld</h4>\\n<p>Follow the instructions of <a href=\\\"https://tess.io/userdocs/getting-start/hello-world/\\\">helloworld</a>.</p>\\n<h5 id=\\\"21-why-does-my-applications-creations-are-always-failed\\\">2.1 Why does my application&#39;s creations are always failed?</h5>\\n<p>Try</p>\\n<pre><code class=\\\"hljs language-bash\\\">$ tskb get application tesshjapp -o yaml\\n</code></pre>\\n<p>and</p>\\n<pre><code class=\\\"hljs language-bash\\\">apiVersion: ebay/v1alpha1\\nkind: Application\\nmetadata:\\n  creationTimestamp: 2018-11-13T08:46:53Z\\n  labels:\\n    account.tess.io/name: jhuang9\\n  name: tesshjapp\\n  resourceVersion: <span class=\\\"hljs-string\\\">&quot;1527349281&quot;</span>\\n  selfLink: /apis/ebay/v1alpha1/applications/tesshjapp\\n  uid: ab51990f-e720-11e8-8642-74dbd180c0ec\\nspec:\\n  appType:\\n    category: web\\n    <span class=\\\"hljs-built_in\\\">type</span>: generic\\n  owner: jhuang9\\nstatus:\\n  conditions:\\n  - lastProbeTime: 2018-11-13T08:47:24Z\\n    lastTransitionTime: 2018-11-13T08:47:24Z\\n    message: Error querying escalation owner name manager Owner not found <span class=\\\"hljs-keyword\\\">for</span> the\\n      given user - jhuang9\\n    reason: MissingEscalationOwner\\n    status: <span class=\\\"hljs-string\\\">&quot;True&quot;</span>\\n    <span class=\\\"hljs-built_in\\\">type</span>: Failed\\n  phase: Failed\\n  startTime: 2018-11-13T08:47:24Z\\n</code></pre>\\n<p>It seems like your account is &quot;MissingEscalationOwner&quot;</p>\\n<p><img src=\\\"../../../public/img/20181115155241.png\\\" alt=\\\"\\\"></p>\\n<p>As Tess member said, we can create Application using -f option to create app with file:</p>\\n<pre><code class=\\\"hljs language-bash\\\">$ tskb create -f app.yaml\\n</code></pre>\\n<p>and the app.yaml file may look like:</p>\\n<pre><code class=\\\"hljs language-yaml\\\"><span class=\\\"hljs-attr\\\">apiVersion:</span> <span class=\\\"hljs-string\\\">apps.tess.io/v1alpha1</span>\\n<span class=\\\"hljs-attr\\\">kind:</span> <span class=\\\"hljs-string\\\">Application</span>\\n<span class=\\\"hljs-attr\\\">metadata:</span>\\n  <span class=\\\"hljs-attr\\\">labels:</span>\\n    <span class=\\\"hljs-attr\\\">account.tess.io/name:</span> <span class=\\\"hljs-string\\\">accountName</span>\\n  <span class=\\\"hljs-attr\\\">name:</span> <span class=\\\"hljs-string\\\">applicationName</span>\\n<span class=\\\"hljs-attr\\\">spec:</span>\\n  <span class=\\\"hljs-attr\\\">appType:</span>\\n    <span class=\\\"hljs-attr\\\">category:</span> <span class=\\\"hljs-string\\\">web</span>\\n    <span class=\\\"hljs-attr\\\">type:</span> <span class=\\\"hljs-string\\\">generic</span>\\n  <span class=\\\"hljs-attr\\\">escalationOwner:</span> <span class=\\\"hljs-string\\\">manager</span>\\n  <span class=\\\"hljs-attr\\\">owner:</span> <span class=\\\"hljs-string\\\">appOwner</span>\\n</code></pre>\\n<h4 id=\\\"3-learn-the-main-concepts-of-tess-model\\\">3. Learn the main concepts of Tess Model</h4>\\n<p><a href=\\\"https://tess.io/userdocs/models/\\\">Tess Model</a></p>\\n<h4 id=\\\"4-now-get-to-work\\\">4. Now, get to work!</h4>\\n<p>You&#39;ve got enough knowledge to move to k8s/prometheus/grafana.</p>\\n<p>This is not the end, it just a beginning.</p>\\n<p>Here&#39;s some tips:</p>\\n<ol>\\n<li><p>work with namespace at the most of time</p>\\n</li>\\n<li><p>use tess to get help, It does give a lot of help</p>\\n<pre><code class=\\\"hljs language-bash\\\">$ tess\\nTess CLI Version: {<span class=\\\"hljs-string\\\">&quot;Experimental&quot;</span>:<span class=\\\"hljs-string\\\">&quot;true&quot;</span>,<span class=\\\"hljs-string\\\">&quot;Major&quot;</span>:<span class=\\\"hljs-string\\\">&quot;1&quot;</span>,<span class=\\\"hljs-string\\\">&quot;Minor&quot;</span>:<span class=\\\"hljs-string\\\">&quot;8+&quot;</span>,<span class=\\\"hljs-string\\\">&quot;Tess Release&quot;</span>:<span class=\\\"hljs-string\\\">&quot;release-0.33.2&quot;</span>}\\nFetching released Tess CLI versions...\\n** New version release-0.33.5 available. Please use `tess version list` to get the released versions.\\nClient Version: version.Info{Major:<span class=\\\"hljs-string\\\">&quot;1&quot;</span>, Minor:<span class=\\\"hljs-string\\\">&quot;8+&quot;</span>, GitVersion:<span class=\\\"hljs-string\\\">&quot;v0.0.0-master+<span class=\\\"hljs-variable\\\">$Format</span>:%h$&quot;</span>, GitCommit:<span class=\\\"hljs-string\\\">&quot;<span class=\\\"hljs-variable\\\">$Format</span>:%H$&quot;</span>, GitTreeState:<span class=\\\"hljs-string\\\">&quot;&quot;</span>, BuildDate:<span class=\\\"hljs-string\\\">&quot;1970-01-01T00:00:00Z&quot;</span>, GoVersion:<span class=\\\"hljs-string\\\">&quot;go1.9.6&quot;</span>, Compiler:<span class=\\\"hljs-string\\\">&quot;gc&quot;</span>, Platform:<span class=\\\"hljs-string\\\">&quot;linux/amd64&quot;</span>}\\n\\nTess CLI is currently an alpha offering. Functionalities are subject to be changed based on customer feedback and\\nproduct direction.\\n\\n  * We are on slack: https://tessio.slack.com\\n\\nCommands to initialize tess\\n  login       Login to Tess\\n  init        Initialize Tess workspace\\n\\nCommands to manipulate kube objects\\n  kubectl     kubectl controls the Kubernetes cluster manager\\n\\nCommands to manipulate <span class=\\\"hljs-built_in\\\">groups</span>/applications/accounts\\n  get         Display one or many resources\\n  annotate    Update the annotations on a resource\\n  create      Create a resource by filename or stdin\\n  delete      Delete resources by filenames, stdin, resources and names, or by resources and label selector\\n  describe    Show details of a specific resource or group of resources\\n  edit        Edit a resource on the server\\n  label       Update the labels on a resource\\n  replace     Replace a resource by filename or stdin\\n\\nOther Commands:\\n  clusters    List Tess clusters\\n  <span class=\\\"hljs-built_in\\\">help</span>        Help about any <span class=\\\"hljs-built_in\\\">command</span>\\n  install     Install specified Tess CLI version\\n  status      Print the cluster and user account information\\n  version     Print the client and server version information\\n\\nUse <span class=\\\"hljs-string\\\">&quot;tess &lt;command&gt; --help&quot;</span> <span class=\\\"hljs-keyword\\\">for</span> more information about a given <span class=\\\"hljs-built_in\\\">command</span>.\\nUse <span class=\\\"hljs-string\\\">&quot;tess options&quot;</span> <span class=\\\"hljs-keyword\\\">for</span> a list of global command-line options (applies to all commands).\\n</code></pre>\\n</li>\\n</ol>\\n<hr>\\n\";","export default \"<p>Introduce how to use multi-thread tech with python, refer to: <a href=\\\"https://docs.python.org/3/library/threading.html\\\">https://docs.python.org/3/library/threading.html</a></p>\\n<h3 id=\\\"lib---threading\\\">Lib - threading</h3>\\n<p>Example of basic usage:</p>\\n<pre><code class=\\\"hljs language-python\\\"><span class=\\\"hljs-keyword\\\">from</span> threading <span class=\\\"hljs-keyword\\\">import</span> Thread\\n<span class=\\\"hljs-keyword\\\">import</span> threading\\n<span class=\\\"hljs-keyword\\\">import</span> time\\n\\n<span class=\\\"hljs-keyword\\\">def</span> <span class=\\\"hljs-title function_\\\">running</span>():\\n    count = <span class=\\\"hljs-number\\\">0</span>\\n    <span class=\\\"hljs-keyword\\\">while</span> count &lt; <span class=\\\"hljs-number\\\">3</span>:\\n        count = count + <span class=\\\"hljs-number\\\">1</span>\\n        time.sleep(<span class=\\\"hljs-number\\\">1</span>)\\n        <span class=\\\"hljs-built_in\\\">print</span>(<span class=\\\"hljs-string\\\">&#x27;Thread running&#x27;</span>, count, <span class=\\\"hljs-string\\\">&#x27; &#x27;</span>, threading.currentThread())\\n\\nt = Thread(target=running)\\nt.start()\\n\\n<span class=\\\"hljs-keyword\\\">def</span> <span class=\\\"hljs-title function_\\\">trace</span>():\\n    <span class=\\\"hljs-built_in\\\">print</span>(<span class=\\\"hljs-string\\\">&#x27;trace&#x27;</span>)\\n\\nthreading.settrace(trace)\\n\\n<span class=\\\"hljs-built_in\\\">print</span>(threading.current_thread())\\n<span class=\\\"hljs-built_in\\\">print</span>(threading.main_thread())\\n<span class=\\\"hljs-built_in\\\">print</span>(threading.get_ident())\\n<span class=\\\"hljs-built_in\\\">print</span>(threading.<span class=\\\"hljs-built_in\\\">enumerate</span>())\\n<span class=\\\"hljs-built_in\\\">print</span>(threading.active_count())\\n</code></pre>\\n<p>Out:</p>\\n<pre><code class=\\\"hljs language-console\\\">&lt;_MainThread(MainThread, started 9908)&gt;\\n&lt;_MainThread(MainThread, started 9908)&gt;\\n9908\\n[&lt;_MainThread(MainThread, started 9908)&gt;, &lt;Thread(Thread-1, started 7536)&gt;]\\n2\\nThread running 1   &lt;Thread(Thread-1, started 7536)&gt;\\nThread running 2   &lt;Thread(Thread-1, started 7536)&gt;\\nThread running 3   &lt;Thread(Thread-1, started 7536)&gt;\\n</code></pre>\\n<h3 id=\\\"thread-object\\\">Thread Object</h3>\\n<p>Create a thread with:</p>\\n<p><em>class</em> <code>threading.Thread</code>(<em>group=None</em>, <em>target=None</em>, <em>name=None</em>, <em>args=()</em>, <em>kwargs={}</em>, <em>*</em>, <em>daemon=None</em>)</p>\\n<ul>\\n<li><p><em>group</em> should be <code>None</code>; reserved for future extension when a <code>ThreadGroup</code> class is implemented.</p>\\n</li>\\n<li><p><em>target</em> is the callable object to be invoked by the <a href=\\\"https://docs.python.org/3/library/threading.html#threading.Thread.run\\\"><code>run()</code></a> method. Defaults to <code>None</code>, meaning nothing is called.</p>\\n</li>\\n<li><p><em>name</em> is the thread name. By default, a unique name is constructed of the form “Thread-<em>N</em>” where <em>N</em> is a small decimal number.</p>\\n</li>\\n<li><p><em>args</em> is the argument tuple for the target invocation. Defaults to <code>()</code>.</p>\\n</li>\\n<li><p><em>kwargs</em> is a dictionary of keyword arguments for the target invocation. Defaults to <code>{}</code>.</p>\\n</li>\\n<li><p>If not <code>None</code>, <em>daemon</em> explicitly sets whether the thread is daemonic. If <code>None</code> (the default), the daemonic property is inherited from the current thread.</p>\\n<p>If the subclass overrides the constructor, it must make sure to invoke the base class constructor (<code>Thread.__init__()</code>) before doing anything else to the thread.</p>\\n</li>\\n</ul>\\n<p>What is deamon thread?</p>\\n<blockquote>\\n<p>A thread can be flagged as a “daemon thread”. The significance of this flag is that the entire Python program exits when only daemon threads are left. The initial value is inherited from the creating thread. The flag can be set through the <a href=\\\"https://docs.python.org/3/library/threading.html#threading.Thread.daemon\\\"><code>daemon</code></a> property or the <em>daemon</em> constructor argument.</p>\\n<p>Daemon threads are abruptly stopped at shutdown. Their resources (such as open files, database transactions, etc.) may not be released properly. If you want your threads to stop gracefully, make them non-daemonic and use a suitable signalling mechanism such as an <a href=\\\"https://docs.python.org/3/library/threading.html#threading.Event\\\"><code>Event</code></a>.</p>\\n</blockquote>\\n<p>Example:</p>\\n<pre><code class=\\\"hljs language-python\\\"><span class=\\\"hljs-keyword\\\">from</span> threading <span class=\\\"hljs-keyword\\\">import</span> Thread\\n<span class=\\\"hljs-keyword\\\">import</span> threading\\n<span class=\\\"hljs-keyword\\\">def</span> <span class=\\\"hljs-title function_\\\">running</span>():\\n    count = <span class=\\\"hljs-number\\\">0</span>\\n    <span class=\\\"hljs-keyword\\\">while</span> <span class=\\\"hljs-literal\\\">True</span>:\\n        count = count + <span class=\\\"hljs-number\\\">1</span>\\n        <span class=\\\"hljs-built_in\\\">print</span>(<span class=\\\"hljs-string\\\">&#x27;Thread running&#x27;</span>, count, <span class=\\\"hljs-string\\\">&#x27; &#x27;</span>, threading.currentThread())\\n\\nt = Thread(target=running)\\nt.start()\\n</code></pre>\\n<h3 id=\\\"lock-object\\\">Lock Object</h3>\\n<p>A primitive lock is a synchronization primitive that is not owned by a particular thread when locked. In Python, it is currently the lowest level synchronization primitive available, implemented directly by the <a href=\\\"https://docs.python.org/3/library/_thread.html#module-_thread\\\"><code>_thread</code></a> extension module.</p>\\n<ul>\\n<li><p><code>class threading.Lock</code>\\nThe class implementing primitive lock objects. Once a thread has acquired a lock, subsequent attempts to acquire it block, until it is released; any thread may release it.</p>\\n<p>Note that Lock is actually a factory function which returns an instance of the most efficient version of the concrete Lock class that is supported by the platform.</p>\\n<ul>\\n<li><p><code>acquire(blocking=True, timeout=-1)</code>\\nAcquire a lock, blocking or non-blocking.</p>\\n<p>When invoked with the blocking argument set to True (the default), block until the lock is unlocked, then set it to locked and return True.</p>\\n<p>When invoked with the blocking argument set to False, do not block. If a call with blocking set to True would block, return False immediately; otherwise, set the lock to locked and return True.</p>\\n<p>When invoked with the floating-point timeout argument set to a positive value, block for at most the number of seconds specified by timeout and as long as the lock cannot be acquired. A timeout argument of -1 specifies an unbounded wait. It is forbidden to specify a timeout when blocking is false.</p>\\n<p>The return value is True if the lock is acquired successfully, False if not (for example if the timeout expired).</p>\\n</li>\\n<li><p><code>release()</code>\\nRelease a lock. This can be called from any thread, not only the thread which has acquired the lock.</p>\\n<p>When the lock is locked, reset it to unlocked, and return. If any other threads are blocked waiting for the lock to become unlocked, allow exactly one of them to proceed.</p>\\n<p>When invoked on an unlocked lock, a RuntimeError is raised.</p>\\n<p>There is no return value.</p>\\n</li>\\n<li><p><code>locked()</code>\\nReturn true if the lock is acquired.</p>\\n</li>\\n</ul>\\n</li>\\n</ul>\\n<p>Example:</p>\\n<pre><code class=\\\"hljs language-python\\\"><span class=\\\"hljs-keyword\\\">from</span> threading <span class=\\\"hljs-keyword\\\">import</span> Thread\\n<span class=\\\"hljs-keyword\\\">from</span> threading <span class=\\\"hljs-keyword\\\">import</span> Lock\\n<span class=\\\"hljs-keyword\\\">import</span> threading\\n<span class=\\\"hljs-keyword\\\">import</span> time\\n\\nl = Lock()\\n\\nmoney = <span class=\\\"hljs-number\\\">0</span>\\n\\n<span class=\\\"hljs-keyword\\\">def</span> <span class=\\\"hljs-title function_\\\">addMoneyAction</span>():\\n    <span class=\\\"hljs-keyword\\\">if</span> l.acquire():\\n        <span class=\\\"hljs-keyword\\\">global</span> money\\n        money = money + <span class=\\\"hljs-number\\\">100</span>\\n        l.release()\\n\\n<span class=\\\"hljs-keyword\\\">def</span> <span class=\\\"hljs-title function_\\\">minusMoneyAction</span>():\\n    <span class=\\\"hljs-keyword\\\">if</span> l.acquire():\\n        <span class=\\\"hljs-keyword\\\">global</span> money\\n        money = money - <span class=\\\"hljs-number\\\">50</span>\\n        l.release()\\n\\n<span class=\\\"hljs-keyword\\\">def</span> <span class=\\\"hljs-title function_\\\">addMoneyProcess</span>():\\n    count = <span class=\\\"hljs-number\\\">1</span>\\n    <span class=\\\"hljs-keyword\\\">while</span> count &lt;= <span class=\\\"hljs-number\\\">100000</span>:\\n        count = count + <span class=\\\"hljs-number\\\">1</span>\\n        addMoneyAction()\\n\\n<span class=\\\"hljs-keyword\\\">def</span> <span class=\\\"hljs-title function_\\\">minusMoneyProcess</span>():\\n    count = <span class=\\\"hljs-number\\\">1</span>\\n    <span class=\\\"hljs-keyword\\\">while</span> count &lt;= <span class=\\\"hljs-number\\\">100000</span>:\\n        count = count + <span class=\\\"hljs-number\\\">1</span>\\n        minusMoneyAction()\\n\\n\\nt = Thread(target=addMoneyProcess)\\nt.start()\\n\\nt2 = Thread(target=minusMoneyProcess)\\nt2.start()\\n\\n\\n<span class=\\\"hljs-keyword\\\">while</span> threading.activeCount() &gt; <span class=\\\"hljs-number\\\">1</span>:\\n    <span class=\\\"hljs-keyword\\\">if</span> l.acquire():\\n        <span class=\\\"hljs-built_in\\\">print</span>(<span class=\\\"hljs-string\\\">&#x27;check money:&#x27;</span>, money)\\n        l.release()\\n    time.sleep(<span class=\\\"hljs-number\\\">1</span>)\\n    \\n<span class=\\\"hljs-built_in\\\">print</span>(<span class=\\\"hljs-string\\\">&#x27;final money:&#x27;</span>, money)\\n</code></pre>\\n<p>Output:</p>\\n<pre><code class=\\\"hljs language-console\\\">check money: 3269550\\nfinal money: 5000000\\n</code></pre>\\n<p>The final money will always be 5000000.</p>\\n<h3 id=\\\"rlock-object\\\">RLock Object</h3>\\n<p>A reentrant lock is a synchronization primitive that may be acquired multiple times by the same thread. Internally, it uses the concepts of “owning thread” and “recursion level” in addition to the locked/unlocked state used by primitive locks. In the locked state, some thread owns the lock; in the unlocked state, no thread owns it.</p>\\n<p>To lock the lock, a thread calls its <a href=\\\"https://docs.python.org/3/library/threading.html#threading.RLock.acquire\\\"><code>acquire()</code></a> method; this returns once the thread owns the lock. </p>\\n<p>To unlock the lock, a thread calls its <a href=\\\"https://docs.python.org/3/library/threading.html#threading.Lock.release\\\"><code>release()</code></a> method. <a href=\\\"https://docs.python.org/3/library/threading.html#threading.Lock.acquire\\\"><code>acquire()</code></a>/<a href=\\\"https://docs.python.org/3/library/threading.html#threading.Lock.release\\\"><code>release()</code></a> call pairs may be nested; only the final <a href=\\\"https://docs.python.org/3/library/threading.html#threading.Lock.release\\\"><code>release()</code></a> (the <a href=\\\"https://docs.python.org/3/library/threading.html#threading.Lock.release\\\"><code>release()</code></a> of the outermost pair) resets the lock to unlocked and allows another thread blocked in <a href=\\\"https://docs.python.org/3/library/threading.html#threading.Lock.acquire\\\"><code>acquire()</code></a> to proceed.</p>\\n<p>Methods:</p>\\n<ul>\\n<li><p><code>acquire(blocking=True, timeout=-1)</code>\\nAcquire a lock, blocking or non-blocking.</p>\\n</li>\\n<li><p><code>release()</code></p>\\n<p>There is no return value.</p>\\n</li>\\n</ul>\\n<p>Example:</p>\\n<pre><code class=\\\"hljs language-python\\\"><span class=\\\"hljs-keyword\\\">from</span> threading <span class=\\\"hljs-keyword\\\">import</span> Thread\\n<span class=\\\"hljs-keyword\\\">from</span> threading <span class=\\\"hljs-keyword\\\">import</span> RLock\\n<span class=\\\"hljs-keyword\\\">import</span> threading\\n<span class=\\\"hljs-keyword\\\">import</span> time\\n\\nrl = RLock()\\n\\n<span class=\\\"hljs-keyword\\\">def</span> <span class=\\\"hljs-title function_\\\">running</span>():\\n    <span class=\\\"hljs-keyword\\\">if</span> (rl.acquire()):\\n        <span class=\\\"hljs-built_in\\\">print</span>(<span class=\\\"hljs-string\\\">&#x27;aquire first&#x27;</span>)\\n        time.sleep(<span class=\\\"hljs-number\\\">1</span>)\\n        <span class=\\\"hljs-keyword\\\">if</span> (rl.acquire()):\\n            time.sleep(<span class=\\\"hljs-number\\\">1</span>)\\n            <span class=\\\"hljs-built_in\\\">print</span>(<span class=\\\"hljs-string\\\">&#x27;aquire second&#x27;</span>)\\n            <span class=\\\"hljs-keyword\\\">if</span> (rl.acquire()):\\n                time.sleep(<span class=\\\"hljs-number\\\">1</span>)\\n                <span class=\\\"hljs-built_in\\\">print</span>(<span class=\\\"hljs-string\\\">&#x27;aquire third&#x27;</span>)\\n                rl.release()\\n                <span class=\\\"hljs-built_in\\\">print</span>(<span class=\\\"hljs-string\\\">&#x27;release third&#x27;</span>)\\n            rl.release()\\n            <span class=\\\"hljs-built_in\\\">print</span>(<span class=\\\"hljs-string\\\">&#x27;release second&#x27;</span>)\\n        rl.release()\\n    <span class=\\\"hljs-built_in\\\">print</span>(<span class=\\\"hljs-string\\\">&#x27;release first&#x27;</span>)\\n\\nt = Thread(target=running)\\nt.start()\\n                \\n<span class=\\\"hljs-keyword\\\">def</span> <span class=\\\"hljs-title function_\\\">aq</span>():\\n    <span class=\\\"hljs-keyword\\\">while</span> <span class=\\\"hljs-keyword\\\">not</span> rl.acquire(timeout=<span class=\\\"hljs-number\\\">0</span>):\\n        <span class=\\\"hljs-built_in\\\">print</span>(<span class=\\\"hljs-string\\\">&#x27;tring to aquire rl&#x27;</span>)\\n        time.sleep(<span class=\\\"hljs-number\\\">0.5</span>)\\n    <span class=\\\"hljs-built_in\\\">print</span>(<span class=\\\"hljs-string\\\">&#x27;rl aquired&#x27;</span>)\\n\\nt2 = Thread(target=aq)\\nt2.start()\\n</code></pre>\\n<p>Out:</p>\\n<pre><code class=\\\"hljs language-console\\\">aquire first\\ntring to aquire rl\\ntring to aquire rl\\ntring to aquire rl\\ntring to aquire rl\\naquire second\\ntring to aquire rl\\ntring to aquire rl\\naquire third\\nrelease third\\nrelease second\\nrelease first\\nrl aquired\\n</code></pre>\\n<h3 id=\\\"event-object\\\">Event Object</h3>\\n<p>This is one of the simplest mechanisms for communication between threads: one thread signals an event and other threads wait for it.</p>\\n<p>An event object manages an internal flag that can be set to true with the <a href=\\\"https://docs.python.org/3/library/threading.html#threading.Event.set\\\"><code>set()</code></a> method and reset to false with the <a href=\\\"https://docs.python.org/3/library/threading.html#threading.Event.clear\\\"><code>clear()</code></a> method. The <a href=\\\"https://docs.python.org/3/library/threading.html#threading.Event.wait\\\"><code>wait()</code></a> method blocks until the flag is true.</p>\\n<ul>\\n<li><p><code>class threading.Event</code>\\nClass implementing event objects. An event manages a flag that can be set to true with the set() method and reset to false with the clear() method. The wait() method blocks until the flag is true. <strong>The flag is initially false</strong>.</p>\\n<ul>\\n<li><p><code>is_set()</code>\\nReturn True if and only if the internal flag is true.</p>\\n</li>\\n<li><p><code>set()</code>\\nSet the internal flag to true. All threads waiting for it to become true are awakened. Threads that call wait() once the flag is true will not block at all.</p>\\n</li>\\n<li><p><code>clear()</code>\\nReset the internal flag to false. Subsequently, threads calling wait() will block until set() is called to set the internal flag to true again.</p>\\n</li>\\n<li><p><code>wait(timeout=None)</code>\\nBlock until the internal flag is true. If the internal flag is true on entry, return immediately. Otherwise, block until another thread calls set() to set the flag to true, or until the optional timeout occurs.</p>\\n<p>When the timeout argument is present and not None, it should be a floating point number specifying a timeout for the operation in seconds (or fractions thereof).</p>\\n<p>This method returns True if and only if the internal flag has been set to true, either before the wait call or after the wait starts, so it will always return True except if a timeout is given and the operation times out.</p>\\n</li>\\n</ul>\\n</li>\\n</ul>\\n<p>Example:</p>\\n<pre><code class=\\\"hljs language-python\\\"><span class=\\\"hljs-keyword\\\">from</span> threading <span class=\\\"hljs-keyword\\\">import</span> Thread\\n<span class=\\\"hljs-keyword\\\">from</span> threading <span class=\\\"hljs-keyword\\\">import</span> Event\\n<span class=\\\"hljs-keyword\\\">import</span> threading\\n<span class=\\\"hljs-keyword\\\">import</span> time\\n\\ne = Event()\\n\\n<span class=\\\"hljs-comment\\\"># the gate is opened when the flag is true</span>\\ne.<span class=\\\"hljs-built_in\\\">set</span>()\\n\\nrelease_count = <span class=\\\"hljs-number\\\">0</span>\\ngoods = <span class=\\\"hljs-number\\\">0</span>\\n\\n<span class=\\\"hljs-keyword\\\">def</span> <span class=\\\"hljs-title function_\\\">collect</span>():\\n    <span class=\\\"hljs-keyword\\\">while</span> <span class=\\\"hljs-literal\\\">True</span>:        \\n        <span class=\\\"hljs-keyword\\\">global</span> release_count\\n        <span class=\\\"hljs-keyword\\\">if</span> (release_count == <span class=\\\"hljs-number\\\">3</span>):\\n            <span class=\\\"hljs-built_in\\\">print</span>(<span class=\\\"hljs-string\\\">&#x27;Mission done, collecting process stop.&#x27;</span>)\\n            <span class=\\\"hljs-keyword\\\">break</span>\\n        <span class=\\\"hljs-keyword\\\">if</span> (e.isSet()):\\n            <span class=\\\"hljs-keyword\\\">global</span> goods\\n            <span class=\\\"hljs-built_in\\\">print</span>(<span class=\\\"hljs-string\\\">&#x27;collecting&#x27;</span>, <span class=\\\"hljs-string\\\">&#x27; &#x27;</span>, goods)\\n            goods = goods + <span class=\\\"hljs-number\\\">200</span>\\n            time.sleep(<span class=\\\"hljs-number\\\">0.3</span>)\\n        <span class=\\\"hljs-keyword\\\">else</span>:\\n            <span class=\\\"hljs-built_in\\\">print</span>(<span class=\\\"hljs-string\\\">&#x27;Wating the gate\\\\&#x27;s opening&#x27;</span>)\\n            e.wait()\\n\\nt = Thread(target=collect)\\nt.start()\\n\\n<span class=\\\"hljs-keyword\\\">def</span> <span class=\\\"hljs-title function_\\\">release</span>():\\n    <span class=\\\"hljs-keyword\\\">while</span> <span class=\\\"hljs-literal\\\">True</span>:\\n        <span class=\\\"hljs-keyword\\\">global</span> goods\\n        <span class=\\\"hljs-keyword\\\">global</span> release_count\\n        <span class=\\\"hljs-keyword\\\">if</span> (release_count == <span class=\\\"hljs-number\\\">3</span>):\\n            <span class=\\\"hljs-built_in\\\">print</span>(<span class=\\\"hljs-string\\\">&#x27;Mission done, release process stop..&#x27;</span>)\\n            <span class=\\\"hljs-keyword\\\">break</span>\\n        <span class=\\\"hljs-keyword\\\">if</span> (goods == <span class=\\\"hljs-number\\\">1000</span>):\\n            e.clear()\\n            release_count = release_count+ <span class=\\\"hljs-number\\\">1</span>\\n            <span class=\\\"hljs-built_in\\\">print</span>(<span class=\\\"hljs-string\\\">&#x27;close the gate and release goods&#x27;</span>)\\n            goods = <span class=\\\"hljs-number\\\">0</span>\\n            time.sleep(<span class=\\\"hljs-number\\\">1</span>)\\n            <span class=\\\"hljs-built_in\\\">print</span>(<span class=\\\"hljs-string\\\">&#x27;goods empty, open the gate&#x27;</span>)\\n            e.<span class=\\\"hljs-built_in\\\">set</span>()\\n\\nt2 = Thread(target=release)\\nt2.start()\\n</code></pre>\\n<p>Out:</p>\\n<pre><code class=\\\"hljs language-console\\\">collecting   0\\ncollecting   200\\ncollecting   400\\ncollecting   600\\ncollecting   800\\nclose the gate and release goods\\nWating the gate&#x27;s opening\\ngoods empty, open the gate\\ncollecting   0\\ncollecting   200\\ncollecting   400\\ncollecting   600\\ncollecting   800\\nclose the gate and release goods\\nWating the gate&#x27;s opening\\ngoods empty, open the gate\\ncollecting   0\\ncollecting   200\\ncollecting   400\\ncollecting   600\\ncollecting   800\\nclose the gate and release goods\\nMission done, collecting process stop.\\ngoods empty, open the gate\\nMission done, release process stop..\\n</code></pre>\\n<h3 id=\\\"more-on-threading\\\">More on threading</h3>\\n<h4 id=\\\"condition-objects\\\">Condition Objects</h4>\\n<p>A condition variable is always associated with some kind of lock; this can be passed in or one will be created by default. Passing one in is useful when several condition variables must share the same lock. The lock is part of the condition object: you don’t have to track it separately.</p>\\n<p>The typical programming style using condition variables uses the lock to synchronize access to some shared state; threads that are interested in a particular change of state call <a href=\\\"https://docs.python.org/3/library/threading.html#threading.Condition.wait\\\"><code>wait()</code></a> repeatedly until they see the desired state, while threads that modify the state call <a href=\\\"https://docs.python.org/3/library/threading.html#threading.Condition.notify\\\"><code>notify()</code></a> or <a href=\\\"https://docs.python.org/3/library/threading.html#threading.Condition.notify_all\\\"><code>notify_all()</code></a> when they change the state in such a way that it could possibly be a desired state for one of the waiters. For example, the following code is a generic producer-consumer situation with unlimited buffer capacity:</p>\\n<pre><code class=\\\"hljs language-python\\\"><span class=\\\"hljs-comment\\\"># Consume one item</span>\\n<span class=\\\"hljs-keyword\\\">with</span> cv:\\n    <span class=\\\"hljs-keyword\\\">while</span> <span class=\\\"hljs-keyword\\\">not</span> an_item_is_available():\\n        cv.wait()\\n    get_an_available_item()\\n\\n<span class=\\\"hljs-comment\\\"># Produce one item</span>\\n<span class=\\\"hljs-keyword\\\">with</span> cv:\\n    make_an_item_available()\\n    cv.notify()\\n</code></pre>\\n<p>The <code>while</code> loop checking for the application’s condition is necessary because <a href=\\\"https://docs.python.org/3/library/threading.html#threading.Condition.wait\\\"><code>wait()</code></a> can return after an arbitrary long time, and the condition which prompted the <a href=\\\"https://docs.python.org/3/library/threading.html#threading.Condition.notify\\\"><code>notify()</code></a> call may no longer hold true. This is inherent to multi-threaded programming. The <a href=\\\"https://docs.python.org/3/library/threading.html#threading.Condition.wait_for\\\"><code>wait_for()</code></a> method can be used to automate the condition checking, and eases the computation of timeouts:</p>\\n<pre><code class=\\\"hljs language-python\\\"><span class=\\\"hljs-comment\\\"># Consume an item</span>\\n<span class=\\\"hljs-keyword\\\">with</span> cv:\\n    cv.wait_for(an_item_is_available)\\n    get_an_available_item()\\n</code></pre>\\n<h4 id=\\\"timer-objects\\\">Timer Objects</h4>\\n<p>This class represents an action that should be run only after a certain amount of time has passed — a timer. <a href=\\\"https://docs.python.org/3/library/threading.html#threading.Timer\\\"><code>Timer</code></a> is a subclass of <a href=\\\"https://docs.python.org/3/library/threading.html#threading.Thread\\\"><code>Thread</code></a> and as such also functions as an example of creating custom threads.</p>\\n<p>Timers are started, as with threads, by calling their <code>start()</code> method. The timer can be stopped (before its action has begun) by calling the <a href=\\\"https://docs.python.org/3/library/threading.html#threading.Timer.cancel\\\"><code>cancel()</code></a> method. The interval the timer will wait before executing its action may not be exactly the same as the interval specified by the user.</p>\\n<p>For example:</p>\\n<pre><code class=\\\"hljs language-python\\\"><span class=\\\"hljs-keyword\\\">def</span> <span class=\\\"hljs-title function_\\\">hello</span>():\\n    <span class=\\\"hljs-built_in\\\">print</span>(<span class=\\\"hljs-string\\\">&quot;hello, world&quot;</span>)\\n\\nt = Timer(<span class=\\\"hljs-number\\\">30.0</span>, hello)\\nt.start()  <span class=\\\"hljs-comment\\\"># after 30 seconds, &quot;hello, world&quot; will be printed</span>\\n</code></pre>\\n<h4 id=\\\"barrier-objects\\\">Barrier Objects</h4>\\n<p>This class provides a simple synchronization primitive for use by a fixed number of threads that need to wait for each other. Each of the threads tries to pass the barrier by calling the <a href=\\\"https://docs.python.org/3/library/threading.html#threading.Barrier.wait\\\"><code>wait()</code></a> method and will block until all of the threads have made their <a href=\\\"https://docs.python.org/3/library/threading.html#threading.Barrier.wait\\\"><code>wait()</code></a> calls. At this point, the threads are released simultaneously.</p>\\n<p>The barrier can be reused any number of times for the same number of threads.</p>\\n<p>As an example, here is a simple way to synchronize a client and server thread:</p>\\n<pre><code class=\\\"hljs language-python\\\">b = Barrier(<span class=\\\"hljs-number\\\">2</span>, timeout=<span class=\\\"hljs-number\\\">5</span>)\\n\\n<span class=\\\"hljs-keyword\\\">def</span> <span class=\\\"hljs-title function_\\\">server</span>():\\n    start_server()\\n    b.wait()\\n    <span class=\\\"hljs-keyword\\\">while</span> <span class=\\\"hljs-literal\\\">True</span>:\\n        connection = accept_connection()\\n        process_server_connection(connection)\\n\\n<span class=\\\"hljs-keyword\\\">def</span> <span class=\\\"hljs-title function_\\\">client</span>():\\n    b.wait()\\n    <span class=\\\"hljs-keyword\\\">while</span> <span class=\\\"hljs-literal\\\">True</span>:\\n        connection = make_connection()\\n        process_client_connection(connection)\\n</code></pre>\\n<h4 id=\\\"using-locks-conditions-and-semaphores-in-the-with-statement\\\">Using locks, conditions, and semaphores in the <code>with</code> statement</h4>\\n<p>All of the objects provided by this module that have <code>acquire()</code> and <code>release()</code> methods can be used as context managers for a <a href=\\\"https://docs.python.org/3/reference/compound_stmts.html#with\\\"><code>with</code></a> statement. The <code>acquire()</code> method will be called when the block is entered, and <code>release()</code> will be called when the block is exited. Hence, the following snippet:</p>\\n<pre><code>with some_lock:\\n    # do something...\\n</code></pre>\\n<p>is equivalent to:</p>\\n<pre><code>some_lock.acquire()\\ntry:\\n    # do something...\\nfinally:\\n    some_lock.release()\\n</code></pre>\\n<p>Currently, <a href=\\\"https://docs.python.org/3/library/threading.html#threading.Lock\\\"><code>Lock</code></a>, <a href=\\\"https://docs.python.org/3/library/threading.html#threading.RLock\\\"><code>RLock</code></a>, <a href=\\\"https://docs.python.org/3/library/threading.html#threading.Condition\\\"><code>Condition</code></a>, <a href=\\\"https://docs.python.org/3/library/threading.html#threading.Semaphore\\\"><code>Semaphore</code></a>, and <a href=\\\"https://docs.python.org/3/library/threading.html#threading.BoundedSemaphore\\\"><code>BoundedSemaphore</code></a> objects may be used as <a href=\\\"https://docs.python.org/3/reference/compound_stmts.html#with\\\"><code>with</code></a> statement context managers.</p>\\n\";","export default \"<h3 id=\\\"11-container-with-most-watermedium\\\">11. Container With Most Water(Medium)</h3>\\n<p>Given <em>n</em> non-negative integers <em>a1</em>, <em>a2</em>, ..., <em>an</em> , where each represents a point at coordinate (<em>i</em>, <em>ai</em>). <em>n</em> vertical lines are drawn such that the two endpoints of line <em>i</em> is at (<em>i</em>, <em>ai</em>) and (<em>i</em>, 0). Find two lines, which together with x-axis forms a container, such that the container contains the most water.</p>\\n<p><strong>Note:</strong> You may not slant the container and <em>n</em> is at least 2.</p>\\n<p><img src=\\\"../../../public/img/20190228214420.png\\\" alt=\\\"\\\"></p>\\n<p>The above vertical lines are represented by array [1,8,6,2,5,4,8,3,7]. In this case, the max area of water (blue section) the container can contain is 49.</p>\\n<p><strong>Example:</strong></p>\\n<pre><code>Input: [1,8,6,2,5,4,8,3,7]\\nOutput: 49\\n</code></pre>\\n<h4 id=\\\"ⅰ-brute-force---on2\\\">Ⅰ. Brute Force - O(n^2)</h4>\\n<pre><code class=\\\"hljs language-java\\\"><span class=\\\"hljs-keyword\\\">public</span> <span class=\\\"hljs-type\\\">int</span> <span class=\\\"hljs-title function_\\\">maxArea2</span><span class=\\\"hljs-params\\\">(<span class=\\\"hljs-type\\\">int</span>[] height)</span> {\\n    <span class=\\\"hljs-type\\\">int</span> <span class=\\\"hljs-variable\\\">ans</span> <span class=\\\"hljs-operator\\\">=</span> <span class=\\\"hljs-number\\\">0</span>;\\n    <span class=\\\"hljs-keyword\\\">for</span> (<span class=\\\"hljs-type\\\">int</span> <span class=\\\"hljs-variable\\\">i</span> <span class=\\\"hljs-operator\\\">=</span> <span class=\\\"hljs-number\\\">0</span>; i &lt; height.length; i++) {\\n        <span class=\\\"hljs-keyword\\\">if</span> (Math.max(i * height[i], (height.length - i - <span class=\\\"hljs-number\\\">1</span>) * height[i]) &gt; ans) {\\n            <span class=\\\"hljs-keyword\\\">for</span> (<span class=\\\"hljs-type\\\">int</span> <span class=\\\"hljs-variable\\\">j</span> <span class=\\\"hljs-operator\\\">=</span> <span class=\\\"hljs-number\\\">0</span>; j &lt; height.length; j++) {\\n                <span class=\\\"hljs-keyword\\\">if</span> (i != j) {\\n                    <span class=\\\"hljs-type\\\">int</span> <span class=\\\"hljs-variable\\\">l</span> <span class=\\\"hljs-operator\\\">=</span> Math.min(height[i], height[j]);\\n                    <span class=\\\"hljs-type\\\">int</span> <span class=\\\"hljs-variable\\\">w</span> <span class=\\\"hljs-operator\\\">=</span> Math.abs(i - j);\\n                    ans = Math.max(w * l, ans);\\n                }\\n            }\\n\\n        }\\n    }\\n    <span class=\\\"hljs-keyword\\\">return</span> ans;\\n}\\n</code></pre>\\n<h4 id=\\\"ⅱ-two-pointer---o-n\\\">Ⅱ. Two Pointer - O (n)</h4>\\n<p>既然要找 2 根柱子，那么我们就设有 2 个指针，分别从两端开始往里走，因为指针撑到最大的时候，对于两边指针都可能是它们能得到的最大值</p>\\n<p>设**(L, R)**表示一组可能的解，对于示例输入，最开始是<code>(1, 7)</code>，如果 L 比 R 小，那么证明以 1 为 L 的 case：<code>(1, 3)、(1, 8)...</code>等等都不需要考虑了，因为这时候已经找到了以 1 为 L 的最优解了，<code>(1, 7) = 1*7i</code>，<code>(1, 3) = 1 * （7i - 1)</code></p>\\n<p>所以 L 后走一步，情况反过来就 R 往前走一步，直到 L 和 R 相遇；并且这样做的同时我们不必运算对角线 case 和对称 case</p>\\n<pre><code class=\\\"hljs language-java\\\"><span class=\\\"hljs-keyword\\\">public</span> <span class=\\\"hljs-type\\\">int</span> <span class=\\\"hljs-title function_\\\">maxArea2</span><span class=\\\"hljs-params\\\">(<span class=\\\"hljs-type\\\">int</span>[] height)</span> {\\n    <span class=\\\"hljs-type\\\">int</span> <span class=\\\"hljs-variable\\\">ans</span> <span class=\\\"hljs-operator\\\">=</span> <span class=\\\"hljs-number\\\">0</span>, l = <span class=\\\"hljs-number\\\">0</span>, r = height.length - <span class=\\\"hljs-number\\\">1</span>;\\n    <span class=\\\"hljs-keyword\\\">while</span> (l &lt; r) {\\n        <span class=\\\"hljs-type\\\">int</span> <span class=\\\"hljs-variable\\\">w</span> <span class=\\\"hljs-operator\\\">=</span> r - l;\\n        <span class=\\\"hljs-keyword\\\">if</span> (height[l] &gt; height[r]) {\\n            ans = Math.max(ans, height[r] * w);\\n            r--;\\n        } <span class=\\\"hljs-keyword\\\">else</span> {\\n            ans = Math.max(ans, height[l] * w);\\n            l++;\\n        }\\n    }\\n    <span class=\\\"hljs-keyword\\\">return</span> ans;\\n}\\n</code></pre>\\n<p>然后在讨论区有更具象化的解释：<a href=\\\"https://leetcode.com/problems/container-with-most-water/discuss/6099/yet-another-way-to-see-what-happens-in-the-on-algorithm\\\">Yet another way to see what happens in the O(n) algorithm</a></p>\\n<blockquote>\\n<p>The O(n) solution with proof by contradiction doesn&#39;t look intuitive enough to me. Before moving on, read any <a href=\\\"https://leetcode.com/problems/container-with-most-water/discuss/6100/Simple-and-clear-proofexplanation\\\">example</a> of the algorithm first if you don&#39;t know it yet.</p>\\n<p>Here&#39; another way to see what happens in a matrix representation:</p>\\n<p>Draw a matrix where the row is the first line, and the column is the second line. For example, say <code>n=6</code>.</p>\\n<p>In the figures below, <code>x</code> means we don&#39;t need to compute the volume for that case: (1) On the diagonal, the two lines are overlapped; (2) The lower left triangle area of the matrix is symmetric to the upper right area.</p>\\n<p>We start by computing the volume at <code>(1,6)</code>, denoted by <code>o</code>. Now if the left line is shorter than the right line, then all the elements left to <code>(1,6)</code> on the first row have smaller volume, so we don&#39;t need to compute those cases (crossed by <code>---</code>).</p>\\n<pre><code>  1 2 3 4 5 6\\n1 x ------- o\\n2 x x\\n3 x x x\\n4 x x x x\\n5 x x x x x\\n6 x x x x x x\\n</code></pre>\\n<p>Next we move the left line and compute <code>(2,6)</code>. Now if the right line is shorter, all cases below <code>(2,6)</code> are eliminated.</p>\\n<pre><code>  1 2 3 4 5 6\\n1 x ------- o\\n2 x x       o\\n3 x x x     |\\n4 x x x x   |\\n5 x x x x x |\\n6 x x x x x x\\n</code></pre>\\n<p>And no matter how this <code>o</code> path goes, we end up only need to find the max value on this path, which contains <code>n-1</code> cases.</p>\\n<pre><code>  1 2 3 4 5 6\\n1 x ------- o\\n2 x x - o o o\\n3 x x x o | |\\n4 x x x x | |\\n5 x x x x x |\\n6 x x x x x x\\n</code></pre>\\n<p>Hope this helps. I feel more comfortable seeing things this way.</p>\\n</blockquote>\\n<h3 id=\\\"12-int-to-romanmedium\\\">12. Int To Roman(Medium)</h3>\\n<p>Roman numerals are represented by seven different symbols: <code>I</code>, <code>V</code>, <code>X</code>, <code>L</code>, <code>C</code>, <code>D</code> and <code>M</code>.</p>\\n<pre><code>Symbol       Value\\nI             1\\nV             5\\nX             10\\nL             50\\nC             100\\nD             500\\nM             1000\\n</code></pre>\\n<p>For example, two is written as <code>II</code> in Roman numeral, just two one&#39;s added together. Twelve is written as, <code>XII</code>, which is simply <code>X</code> + <code>II</code>. The number twenty seven is written as <code>XXVII</code>, which is <code>XX</code> + <code>V</code> + <code>II</code>.</p>\\n<p>Roman numerals are usually written largest to smallest from left to right. However, the numeral for four is not <code>IIII</code>. Instead, the number four is written as <code>IV</code>. Because the one is before the five we subtract it making four. The same principle applies to the number nine, which is written as <code>IX</code>. There are six instances where subtraction is used:</p>\\n<ul>\\n<li><code>I</code> can be placed before <code>V</code> (5) and <code>X</code> (10) to make 4 and 9.</li>\\n<li><code>X</code> can be placed before <code>L</code> (50) and <code>C</code> (100) to make 40 and 90.</li>\\n<li><code>C</code> can be placed before <code>D</code> (500) and <code>M</code> (1000) to make 400 and 900.</li>\\n</ul>\\n<p>Given an integer, convert it to a roman numeral. Input is guaranteed to be within the range from 1 to 3999.</p>\\n<p><strong>Example 1:</strong></p>\\n<pre><code>Input: 3\\nOutput: &quot;III&quot;\\n</code></pre>\\n<p><strong>Example 2:</strong></p>\\n<pre><code>Input: 4\\nOutput: &quot;IV&quot;\\n</code></pre>\\n<p><strong>Example 3:</strong></p>\\n<pre><code>Input: 9\\nOutput: &quot;IX&quot;\\n</code></pre>\\n<p><strong>Example 4:</strong></p>\\n<pre><code>Input: 58\\nOutput: &quot;LVIII&quot;\\nExplanation: L = 50, V = 5, III = 3.\\n</code></pre>\\n<p><strong>Example 5:</strong></p>\\n<pre><code>Input: 1994\\nOutput: &quot;MCMXCIV&quot;\\nExplanation: M = 1000, CM = 900, XC = 90 and IV = 4.\\n</code></pre>\\n<h4 id=\\\"hashing\\\">Hashing</h4>\\n<p>这题没什么说的，一看就是 Hashing</p>\\n<pre><code class=\\\"hljs language-java\\\"><span class=\\\"hljs-keyword\\\">private</span> String[] hashRom = {\\n        <span class=\\\"hljs-string\\\">&quot;&quot;</span>, <span class=\\\"hljs-string\\\">&quot;I&quot;</span>,<span class=\\\"hljs-string\\\">&quot;II&quot;</span>,<span class=\\\"hljs-string\\\">&quot;III&quot;</span>,<span class=\\\"hljs-string\\\">&quot;IV&quot;</span>,<span class=\\\"hljs-string\\\">&quot;V&quot;</span>,<span class=\\\"hljs-string\\\">&quot;VI&quot;</span>,<span class=\\\"hljs-string\\\">&quot;VII&quot;</span>,<span class=\\\"hljs-string\\\">&quot;VIII&quot;</span>,<span class=\\\"hljs-string\\\">&quot;IX&quot;</span>,\\n        <span class=\\\"hljs-string\\\">&quot;&quot;</span>, <span class=\\\"hljs-string\\\">&quot;X&quot;</span>,<span class=\\\"hljs-string\\\">&quot;XX&quot;</span>,<span class=\\\"hljs-string\\\">&quot;XXX&quot;</span>,<span class=\\\"hljs-string\\\">&quot;XL&quot;</span>,<span class=\\\"hljs-string\\\">&quot;L&quot;</span>,<span class=\\\"hljs-string\\\">&quot;LX&quot;</span>,<span class=\\\"hljs-string\\\">&quot;LXX&quot;</span>,<span class=\\\"hljs-string\\\">&quot;LXXX&quot;</span>,<span class=\\\"hljs-string\\\">&quot;XC&quot;</span>,\\n        <span class=\\\"hljs-string\\\">&quot;&quot;</span>, <span class=\\\"hljs-string\\\">&quot;C&quot;</span>,<span class=\\\"hljs-string\\\">&quot;CC&quot;</span>,<span class=\\\"hljs-string\\\">&quot;CCC&quot;</span>,<span class=\\\"hljs-string\\\">&quot;CD&quot;</span>,<span class=\\\"hljs-string\\\">&quot;D&quot;</span>,<span class=\\\"hljs-string\\\">&quot;DC&quot;</span>,<span class=\\\"hljs-string\\\">&quot;DCC&quot;</span>,<span class=\\\"hljs-string\\\">&quot;DCCC&quot;</span>,<span class=\\\"hljs-string\\\">&quot;CM&quot;</span>,\\n        <span class=\\\"hljs-string\\\">&quot;&quot;</span>, <span class=\\\"hljs-string\\\">&quot;M&quot;</span>,<span class=\\\"hljs-string\\\">&quot;MM&quot;</span>,<span class=\\\"hljs-string\\\">&quot;MMM&quot;</span>,\\n};\\n\\n<span class=\\\"hljs-keyword\\\">public</span> String <span class=\\\"hljs-title function_\\\">intToRoman</span><span class=\\\"hljs-params\\\">(<span class=\\\"hljs-type\\\">int</span> num)</span> {\\n    <span class=\\\"hljs-keyword\\\">return</span> hashRom[<span class=\\\"hljs-number\\\">30</span> + (num / <span class=\\\"hljs-number\\\">1000</span>)] +\\n            hashRom[<span class=\\\"hljs-number\\\">20</span> + ((num % <span class=\\\"hljs-number\\\">1000</span>) / <span class=\\\"hljs-number\\\">100</span>)] +\\n            hashRom[<span class=\\\"hljs-number\\\">10</span> + ((num % <span class=\\\"hljs-number\\\">100</span>) / <span class=\\\"hljs-number\\\">10</span>)] +\\n            hashRom[num % <span class=\\\"hljs-number\\\">10</span>];\\n}\\n</code></pre>\\n<h3 id=\\\"13-roman-to-inteasy\\\">13. Roman To Int(Easy)</h3>\\n<pre><code class=\\\"hljs language-java\\\"><span class=\\\"hljs-keyword\\\">private</span> <span class=\\\"hljs-type\\\">int</span> <span class=\\\"hljs-title function_\\\">mapping</span><span class=\\\"hljs-params\\\">(<span class=\\\"hljs-type\\\">char</span> c)</span> {\\n    <span class=\\\"hljs-keyword\\\">switch</span> (c) {\\n        <span class=\\\"hljs-keyword\\\">case</span> <span class=\\\"hljs-string\\\">&#x27;I&#x27;</span>:\\n            <span class=\\\"hljs-keyword\\\">return</span> <span class=\\\"hljs-number\\\">1</span>;\\n        <span class=\\\"hljs-keyword\\\">case</span> <span class=\\\"hljs-string\\\">&#x27;V&#x27;</span>:\\n            <span class=\\\"hljs-keyword\\\">return</span> <span class=\\\"hljs-number\\\">5</span>;\\n        <span class=\\\"hljs-keyword\\\">case</span> <span class=\\\"hljs-string\\\">&#x27;X&#x27;</span>:\\n            <span class=\\\"hljs-keyword\\\">return</span> <span class=\\\"hljs-number\\\">10</span>;\\n        <span class=\\\"hljs-keyword\\\">case</span> <span class=\\\"hljs-string\\\">&#x27;L&#x27;</span>:\\n            <span class=\\\"hljs-keyword\\\">return</span> <span class=\\\"hljs-number\\\">50</span>;\\n        <span class=\\\"hljs-keyword\\\">case</span> <span class=\\\"hljs-string\\\">&#x27;C&#x27;</span>:\\n            <span class=\\\"hljs-keyword\\\">return</span> <span class=\\\"hljs-number\\\">100</span>;\\n        <span class=\\\"hljs-keyword\\\">case</span> <span class=\\\"hljs-string\\\">&#x27;D&#x27;</span>:\\n            <span class=\\\"hljs-keyword\\\">return</span> <span class=\\\"hljs-number\\\">500</span>;\\n        <span class=\\\"hljs-keyword\\\">case</span> <span class=\\\"hljs-string\\\">&#x27;M&#x27;</span>:\\n            <span class=\\\"hljs-keyword\\\">return</span> <span class=\\\"hljs-number\\\">1000</span>;\\n        <span class=\\\"hljs-keyword\\\">default</span>:\\n            <span class=\\\"hljs-keyword\\\">return</span> <span class=\\\"hljs-number\\\">0</span>;\\n    }\\n}\\n\\n<span class=\\\"hljs-keyword\\\">public</span> <span class=\\\"hljs-type\\\">int</span> <span class=\\\"hljs-title function_\\\">romanToInt</span><span class=\\\"hljs-params\\\">(String s)</span> {\\n    <span class=\\\"hljs-type\\\">char</span>[] rs = s.toCharArray();\\n    <span class=\\\"hljs-type\\\">int</span> <span class=\\\"hljs-variable\\\">ans</span> <span class=\\\"hljs-operator\\\">=</span> <span class=\\\"hljs-number\\\">0</span>;\\n    <span class=\\\"hljs-keyword\\\">for</span> (<span class=\\\"hljs-type\\\">int</span> <span class=\\\"hljs-variable\\\">i</span> <span class=\\\"hljs-operator\\\">=</span> <span class=\\\"hljs-number\\\">0</span>; i &lt; rs.length;) {\\n        <span class=\\\"hljs-type\\\">int</span> <span class=\\\"hljs-variable\\\">nowInt</span> <span class=\\\"hljs-operator\\\">=</span> mapping(rs[i]), nextInt;\\n        <span class=\\\"hljs-keyword\\\">if</span> (i + <span class=\\\"hljs-number\\\">1</span> &lt; rs.length\\n                && (nextInt = mapping(rs[i + <span class=\\\"hljs-number\\\">1</span>])) &gt; nowInt) {\\n            ans += nextInt - nowInt;\\n            i += <span class=\\\"hljs-number\\\">2</span>;\\n        } <span class=\\\"hljs-keyword\\\">else</span> {\\n            ans += nowInt;\\n            i++;\\n        }\\n    }\\n    <span class=\\\"hljs-keyword\\\">return</span> ans;\\n}\\n</code></pre>\\n<h3 id=\\\"14-longest-common-prefixeasy\\\">14. Longest Common Prefix(Easy)</h3>\\n<p>Write a function to find the longest common prefix string amongst an array of strings.</p>\\n<p>If there is no common prefix, return an empty string <code>&quot;&quot;</code>.</p>\\n<p><strong>Example 1:</strong></p>\\n<pre><code>Input: [&quot;flower&quot;,&quot;flow&quot;,&quot;flight&quot;]\\nOutput: &quot;fl&quot;\\n</code></pre>\\n<p><strong>Example 2:</strong></p>\\n<pre><code>Input: [&quot;dog&quot;,&quot;racecar&quot;,&quot;car&quot;]\\nOutput: &quot;&quot;\\nExplanation: There is no common prefix among the input strings.\\n</code></pre>\\n<p><strong>Note:</strong></p>\\n<p>All given inputs are in lowercase letters <code>a-z</code>.</p>\\n<h4 id=\\\"brute-force-beat-9985\\\">Brute Force (Beat 99.85%)</h4>\\n<pre><code class=\\\"hljs language-java\\\"><span class=\\\"hljs-keyword\\\">public</span> String <span class=\\\"hljs-title function_\\\">longestCommonPrefix</span><span class=\\\"hljs-params\\\">(String[] strs)</span> {\\n    <span class=\\\"hljs-keyword\\\">if</span> (strs.length == <span class=\\\"hljs-number\\\">0</span>) {\\n        <span class=\\\"hljs-keyword\\\">return</span> <span class=\\\"hljs-string\\\">&quot;&quot;</span>;\\n    }\\n    <span class=\\\"hljs-type\\\">StringBuilder</span> <span class=\\\"hljs-variable\\\">stringBuilder</span> <span class=\\\"hljs-operator\\\">=</span> <span class=\\\"hljs-keyword\\\">new</span> <span class=\\\"hljs-title class_\\\">StringBuilder</span>();\\n    <span class=\\\"hljs-type\\\">String</span> <span class=\\\"hljs-variable\\\">flag</span> <span class=\\\"hljs-operator\\\">=</span> strs[<span class=\\\"hljs-number\\\">0</span>];\\n    <span class=\\\"hljs-type\\\">boolean</span> <span class=\\\"hljs-variable\\\">stop</span> <span class=\\\"hljs-operator\\\">=</span> <span class=\\\"hljs-literal\\\">false</span>;\\n    <span class=\\\"hljs-keyword\\\">for</span> (<span class=\\\"hljs-type\\\">int</span> <span class=\\\"hljs-variable\\\">i</span> <span class=\\\"hljs-operator\\\">=</span> <span class=\\\"hljs-number\\\">0</span>; i &lt; flag.length() && !stop; i++) {\\n        <span class=\\\"hljs-type\\\">char</span> <span class=\\\"hljs-variable\\\">flagP</span> <span class=\\\"hljs-operator\\\">=</span> flag.charAt(i);\\n        <span class=\\\"hljs-keyword\\\">for</span> (<span class=\\\"hljs-type\\\">int</span> <span class=\\\"hljs-variable\\\">j</span> <span class=\\\"hljs-operator\\\">=</span> <span class=\\\"hljs-number\\\">1</span>; j &lt; strs.length; j++) {\\n            <span class=\\\"hljs-type\\\">String</span> <span class=\\\"hljs-variable\\\">next</span> <span class=\\\"hljs-operator\\\">=</span> strs[j];\\n            <span class=\\\"hljs-keyword\\\">if</span> (next.length() - <span class=\\\"hljs-number\\\">1</span> &lt; i || next.charAt(i) != flagP) {\\n                stop = <span class=\\\"hljs-literal\\\">true</span>;\\n            }\\n        }\\n        <span class=\\\"hljs-keyword\\\">if</span> (!stop) {\\n            stringBuilder.append(flagP);\\n        }\\n    }\\n    <span class=\\\"hljs-keyword\\\">return</span> stringBuilder.toString();\\n}\\n</code></pre>\\n<h3 id=\\\"15-3summedium\\\">15. 3Sum(Medium)</h3>\\n<p>Given an array <code>nums</code> of <em>n</em> integers, are there elements <em>a</em>, <em>b</em>, <em>c</em> in <code>nums</code> such that <em>a</em> + <em>b</em> + <em>c</em> = 0? Find all unique triplets in the array which gives the sum of zero.</p>\\n<p><strong>Note:</strong></p>\\n<p>The solution set must not contain duplicate triplets.</p>\\n<p><strong>Example:</strong></p>\\n<pre><code>Given array nums = [-1, 0, 1, 2, -1, -4],\\n\\nA solution set is:\\n[\\n  [-1, 0, 1],\\n  [-1, -1, 2]\\n]\\n</code></pre>\\n<p>这题和 2sum 的思路有非常大的不同，2sum 是通过哈希去寻找是否有 target，而从 3sum 开始，到后面的 4sum，做法都比较 tricky，评论区里的第一解法也都是同一种思路</p>\\n<p>因为 2sum 里的元素都是不重复的，所以可以用 hash，而 3sum 开始就不能用 hash 去解了</p>\\n<p>这题难点就在于，如何去重，比如说例子里给的<code>nums</code>，里面有两个负一，如果用暴力解的话，不免会出现两个<code>[-1, 0, 1]</code>，于是暴力解也很难受</p>\\n<p>所以去重的思路，才是这题思路的关键</p>\\n<h4 id=\\\"sorted--double-pointer\\\">Sorted & Double Pointer</h4>\\n<p>先排序，然后再前后双指针遍历解，遍历的同时直接根据排序的性质去重</p>\\n<p>比如<code>nums=[-2,1,1,2,0,-2,4,4,-2]</code>排完序之后：<code>nums=[-2,-2,-2,0,1,1,2,4,4]</code></p>\\n<p>套一层循环 i=0，从-4 开始寻找可能的解，指针 L= i + 1，从 i 的下一位开始，R=nums.length - 1，从末尾开始：</p>\\n<ul>\\n<li><p>如果<code>nums[i] + nums[L] + nums[R] &gt; 0</code>，证明 R 值大了，于是 R--，继续下一轮比较；</p>\\n</li>\\n<li><p>如果<code>nums[i] + nums[L] + nums[R] &lt; 0</code>，证明 L 值小了，于是 L++，继续下一轮比较；</p>\\n</li>\\n<li><p>如果<code>nums[i] + nums[L] + nums[R] = 0</code>，证明找到了一个可能的解，于是将这个解记录，<strong>同时 L++，R--继续下一组迭代</strong></p>\\n<p>但是还没处理完，这时候要处理重复，因为 L 和 R 同时靠拢了一步，如果下一步 L 或者 R 还是同样的值，那么这个答案不可取，L 和 R 要继续靠拢到和上一个解不一样为止，比如例子中第一组解找到的是<code>nums[i] = -2,nums[L]=-2,nums[R]=4</code>，LR 靠拢后，<code>nums[L]</code>还是<code>-2</code>，<code>nums[R]</code>还是<code>4</code>，这时候要各自考虑到和前值不一样的位置，再做考虑</p>\\n</li>\\n<li><p>如果<code>L &gt;= R</code>则枚举完了</p>\\n</li>\\n</ul>\\n<p>在<code>i</code>循环中也是一样的，如果**nums[i] = nums[i - 1]**，那么说明当前值可能的解在上一次循环中已经求过了，再求也是重复的，于是跳过这种情况</p>\\n<p>所以代码为：</p>\\n<pre><code class=\\\"hljs language-java\\\"><span class=\\\"hljs-keyword\\\">public</span> List&lt;List&lt;Integer&gt;&gt; <span class=\\\"hljs-title function_\\\">threeSum</span><span class=\\\"hljs-params\\\">(<span class=\\\"hljs-type\\\">int</span>[] nums)</span> {\\n    Arrays.sort(nums);\\n    List&lt;List&lt;Integer&gt;&gt; res = <span class=\\\"hljs-keyword\\\">new</span> <span class=\\\"hljs-title class_\\\">ArrayList</span>&lt;&gt;();\\n    <span class=\\\"hljs-keyword\\\">for</span> (<span class=\\\"hljs-type\\\">int</span> <span class=\\\"hljs-variable\\\">i</span> <span class=\\\"hljs-operator\\\">=</span> <span class=\\\"hljs-number\\\">0</span>; i &lt; nums.length; i++) {\\n        <span class=\\\"hljs-keyword\\\">if</span> (i &gt; <span class=\\\"hljs-number\\\">0</span> && nums[i] == nums[i-<span class=\\\"hljs-number\\\">1</span>]) {\\n            <span class=\\\"hljs-keyword\\\">continue</span>;\\n        }\\n        <span class=\\\"hljs-type\\\">int</span> <span class=\\\"hljs-variable\\\">l</span> <span class=\\\"hljs-operator\\\">=</span> i+<span class=\\\"hljs-number\\\">1</span>, r = nums.length - <span class=\\\"hljs-number\\\">1</span>, need = <span class=\\\"hljs-number\\\">0</span> - nums[i];\\n        <span class=\\\"hljs-keyword\\\">while</span> (l &lt; r) {\\n            <span class=\\\"hljs-keyword\\\">if</span> (nums[l] + nums[r] == need) {\\n                res.add(Arrays.asList(nums[i], nums[l++], nums[r--]));\\n                <span class=\\\"hljs-keyword\\\">while</span> (r &gt; l && nums[l] == nums[l-<span class=\\\"hljs-number\\\">1</span>]) {\\n                    l++;\\n                }\\n                <span class=\\\"hljs-keyword\\\">while</span> (r &gt; l && nums[r] == nums[r+<span class=\\\"hljs-number\\\">1</span>]) {\\n                    r--;\\n                }\\n            } <span class=\\\"hljs-keyword\\\">else</span> <span class=\\\"hljs-keyword\\\">if</span> (nums[l] + nums[r] &gt; need) {\\n                r--;\\n            } <span class=\\\"hljs-keyword\\\">else</span>{\\n                l++;\\n            }\\n        }\\n    }\\n    <span class=\\\"hljs-keyword\\\">return</span> res;\\n}\\n</code></pre>\\n<p>其中排序用的是 JDK 提供的排序，具体实现是<code>DualPivotQuicksort</code>，效率比一般的快排快很多</p>\\n\";","export default \"<h3 id=\\\"introduction\\\">Introduction</h3>\\n<p>在排序算法中有堆排序，而要理解好堆排序，首先我们得先理解好堆的概念，一般在数据结构上，我们把优先队列的数据结构称为堆，那什么是有限队列呢？它能应用在哪些场景呢？这些是本篇要介绍的重点</p>\\n<h3 id=\\\"priority-queue\\\">Priority Queue</h3>\\n<p>定义：</p>\\n<blockquote>\\n<p>优先队列至少要实现以下个操作：insert（插入）；deleteMin（删除最小元素），要找出、删除并返回队列中最小的元素</p>\\n<p>插入等于是入队，删除等于是出队：</p>\\n<pre><code class=\\\"hljs language-graph\\\">      删除最小元素         ┏------------------┓      插入元素\\n&lt;-------------------------|     优先队列      |&lt;--------------------\\n                          ┗------------------┛\\n</code></pre>\\n</blockquote>\\n<h3 id=\\\"binary-heap\\\">Binary Heap</h3>\\n<p>最常见的堆实现就是二叉堆，和二叉查找树一样，二叉堆也有两个性质：结构性、堆序性</p>\\n<ul>\\n<li><strong>结构性：</strong>堆在逻辑上可以看作的一个完全二叉树，而且因为完全二叉树的规律性，我们可以使用数组来存放堆元素，其中：<ol>\\n<li>对于数组上任意<code>i</code>位置，其左儿子的位置在<code>2i</code>上，右儿子在<code>2i + 1</code>上，其父亲在<code>└i / 2┘</code>位置；</li>\\n<li>最大堆的大小需要提前决定一个合适的值，尽量减少数组扩容；</li>\\n</ol>\\n</li>\\n<li><strong>堆序性：</strong>堆中任意根节点应该<strong>小于等于</strong>它的后裔；</li>\\n</ul>\\n<pre><code class=\\\"hljs language-graph\\\">            13                   13\\n          /    \\\\               /    \\\\\\n        14     15             6     16\\n        / \\\\                  / \\\\\\n       19 27                19  27\\n           堆                    非堆       \\n</code></pre>\\n<h4 id=\\\"insert\\\">Insert</h4>\\n<p>为了将一个元素X插入到堆中，我们在堆的下一个可用位置（堆的尾部）创建一个“空穴”，以保证该堆还是一个完全树</p>\\n<p>如果X可以放在空穴中而不破坏堆序性（如果此时X的值大于等于空穴的父节点的值），那么X就放在这个位置；否则，我们将该空穴的父节点放到空穴，然后父节点的原来的位置充当心的空穴；以此直到X能够放进空穴为止；</p>\\n<pre><code class=\\\"hljs language-graph\\\">比如插入5\\n        13                   13                 ▢                 5\\n      /    \\\\               /    \\\\             /    \\\\            /    \\\\\\n    21     16     →       ▢     16     →    13     16     →   13     16\\n    / \\\\                  / \\\\                / \\\\               / \\\\\\n   24  ▢                19 21             19  21            19  21  \\n</code></pre>\\n<p>这个过程叫上滤（percolate up），相关的伪码：</p>\\n<pre><code class=\\\"hljs language-pseudocode\\\">// arr[]\\ninsert(x):\\n    hole = ++currentSize;\\n    while x &lt; arr[hole / 2]:\\n        arr[hole] = arr[hole/2];\\n        hole /= 2;\\n    arr[hole] = x;\\n</code></pre>\\n<p>根据<em>《数据结构与算法分析——Mark Allen Weiss》</em>的结论，<strong>插入/上滤算法的平均效率为<em>O(1)<em>，最坏为</em>O(logN)</em></strong></p>\\n<h4 id=\\\"deletemin\\\">DeleteMin</h4>\\n<p>要删除最小元素，首先把堆顶元素挖空（数组第一个元素），然后再调整堆序性，由于这时候少了一个元素，所以要重新调整堆，我们把堆中最后一个元素当成对比元素，如果对比元素可以放在该空穴，那么就放置，否则将该空穴位置上较小的子元素放置到空穴处，原较小元素的位置称为新的空穴，再和对比元素进行比较；</p>\\n<pre><code class=\\\"hljs language-graph\\\">        ▢                    13                 13               13\\n      /    \\\\               /    \\\\             /    \\\\            /    \\\\\\n     13    16     →       ▢     16     →    19     16     →   19    16\\n    / \\\\                  / \\\\                / \\\\               /\\n   24  21               19  21             ▢  21            21\\n</code></pre>\\n<p>但是当堆中有偶数个元素的时候，再使用这种算法会出现问题：</p>\\n<pre><code class=\\\"hljs language-graph\\\">        ▢                    13                 13               13\\n      /    \\\\               /    \\\\             /    \\\\            /    \\\\\\n     13    16     →      ▢      16     →    21     16     →   21    16\\n    / \\\\    /            /  \\\\    /           / \\\\    /         /  \\\\  \\n  24  21 19            24  21 19           24  ▢ 19        24   19?\\n</code></pre>\\n<p>所以我们需要巧妙地将每个根节点都视为都有2个子节点，实现的伪码：</p>\\n<pre><code class=\\\"hljs language-pseudocode\\\">// arr[]，且元素从下标1开始存放，保证当下标i为1的时候，其两倍是有效的下标2\\ndeleteMin():\\n    min = findMin();\\n    arr[1] = arr[currentSize--];\\n    percolateDown(1);\\n    return min;\\n    \\npercolateDown(hole):\\n    tmp = arr[hole];\\n    while hole * 2 &lt;= currentSize:\\n        child = hole * 2;\\n        if child != currentSize and arr[child + 1] &lt; arr[child]:\\n            child++;\\n        if arr[child] &lt; tmp:\\n            arr[hole] = arr[child];\\n        else:\\n            break;\\n        hole = child;\\n    arr[hole] = tmp;\\n</code></pre>\\n<pre><code class=\\\"hljs language-graph\\\">若原来15有左子节点19，则这时候堆顶为19，且将它挖空，tmp为19\\n        ▢                    13                 13 \\n      /    \\\\               /    \\\\             /    \\\\ \\n     13    16     →      ▢      16     →    19     16 \\n    / \\\\                 /  \\\\    /           / \\\\   \\n  24  21               24  21 19           24  21 \\n</code></pre>\\n<p>如上图，执行情况：</p>\\n<ol>\\n<li>当<code>hole = 1</code>时，这时候child为2，于是会对比13和16的值，发现13小于16，所以child还是2，然后<code>tmp = 19</code>大于<code>arr[child] = 13</code>，于是13填到空穴处，13原来的位置称为新的空穴；</li>\\n<li>当<code>hole = 2</code>，这时候child为4，于是会对比24和21的值，发现24大于21，所以child加一，然后<code>tmp = 19</code>小于<code>arr[child] = 21</code>，于是break；</li>\\n<li>最后退出了循环，直接<code>arr[hole] = tmp;</code></li>\\n</ol>\\n<p>根据<em>《数据结构与算法分析——Mark Allen Weiss》</em>的结论，<strong>删除最小点/下滤算法的平均效率为<em>O(logN)</em></strong></p>\\n<h4 id=\\\"buildheap\\\">BuildHeap</h4>\\n<p>二叉堆的还有一个重要的操作就是构建堆，有两种思路，一是对每个新增节点都进行插入操作，<strong>平均效率为<em>O(N)</em></strong>;</p>\\n<p>还有就是直接对原数组从中间节点（最后一个父节点）开始忘数组前面一一进行下滤，而这个的平均效率也被证明*<em>为</em>O(N)***；</p>\\n<pre><code class=\\\"hljs language-pseudocode\\\">buildHeap():\\n    for i = currentSize / 2 -&gt; 1:\\n        percolateDown(i);\\n</code></pre>\\n<h3 id=\\\"application-for-binaryheap\\\">Application For BinaryHeap</h3>\\n<ol>\\n<li>寻找序列中第k小的数：以线性效率建堆之后，调用<code>deleteMin()</code>k - 1次，此时堆顶就是第k小的数，因此平均效率为***O(N + klogN)***；</li>\\n<li>寻找序列中前k小的数：调用<code>deleteMin()</code>k 次，此时堆顶就是第k小的数；</li>\\n<li>“寻找序列中前90%大的数”，变治为“寻找序列中前10%小的数”；</li>\\n</ol>\\n<h3 id=\\\"heap-sort\\\">Heap Sort</h3>\\n<p>我们观察一下二叉堆的应用，如果说，应用1的k等于N的话，那么我们等于将序列从小到大输出了出来，效率为***O(NlogN)<em><strong>再加上</strong></em>O(N)***的空间，那么我们能不能够优化一下呢？</p>\\n<p>我们在建堆的时候申请了N的空间，每次删除最小元素之后，虽然物理空间数组长度还是N，但是我们的关心的堆范围已经，假如说我们每次删除最小元素之后，把最小元素放在删除之前堆的大小的尾部，那么等所有删除最小元素操作完之后，我们就得到了一个逆序的数组，我们把实现这种功能的方法叫做小顶堆排序</p>\\n<p>于是我们发现：小顶堆能在***O(NlogN)***时间常量空间内把乱序数组整理称逆序数组！</p>\\n<p>我们再反过来想，如果要对数组进行排序，是不是可以构建<strong>大顶堆</strong>然后以相同的思路<strong>删除最大元素</strong>呢？</p>\\n<p>按照书上的思路，实现起来就是：</p>\\n<pre><code class=\\\"hljs language-java\\\"><span class=\\\"hljs-keyword\\\">public</span> <span class=\\\"hljs-keyword\\\">static</span> <span class=\\\"hljs-keyword\\\">void</span> <span class=\\\"hljs-title function_\\\">heapSort</span><span class=\\\"hljs-params\\\">(<span class=\\\"hljs-type\\\">int</span>[] arr)</span> {\\n    <span class=\\\"hljs-keyword\\\">for</span> (<span class=\\\"hljs-type\\\">int</span> <span class=\\\"hljs-variable\\\">i</span> <span class=\\\"hljs-operator\\\">=</span> arr.length / <span class=\\\"hljs-number\\\">2</span> - <span class=\\\"hljs-number\\\">1</span>; i &gt;= <span class=\\\"hljs-number\\\">0</span>; i--)\\n        percDown(arr, i, arr.length);\\n\\n    <span class=\\\"hljs-keyword\\\">for</span> (<span class=\\\"hljs-type\\\">int</span> <span class=\\\"hljs-variable\\\">i</span> <span class=\\\"hljs-operator\\\">=</span> arr.length - <span class=\\\"hljs-number\\\">1</span>; i &gt; <span class=\\\"hljs-number\\\">0</span>; i--) {\\n        swap(arr, <span class=\\\"hljs-number\\\">0</span>, i);\\n        percDown(arr, <span class=\\\"hljs-number\\\">0</span>, i);\\n    }\\n}\\n\\n<span class=\\\"hljs-keyword\\\">public</span> <span class=\\\"hljs-keyword\\\">static</span> <span class=\\\"hljs-keyword\\\">void</span> <span class=\\\"hljs-title function_\\\">percDown</span><span class=\\\"hljs-params\\\">(<span class=\\\"hljs-type\\\">int</span>[] arr, <span class=\\\"hljs-type\\\">int</span> hole, <span class=\\\"hljs-type\\\">int</span> nowSize)</span> {\\n    <span class=\\\"hljs-type\\\">int</span> child;\\n    <span class=\\\"hljs-type\\\">int</span> <span class=\\\"hljs-variable\\\">tmp</span> <span class=\\\"hljs-operator\\\">=</span> arr[hole];\\n    <span class=\\\"hljs-keyword\\\">for</span> (; hole * <span class=\\\"hljs-number\\\">2</span> + <span class=\\\"hljs-number\\\">1</span> &lt; nowSize; hole = child) {\\n        child = hole * <span class=\\\"hljs-number\\\">2</span> + <span class=\\\"hljs-number\\\">1</span>;\\n        <span class=\\\"hljs-keyword\\\">if</span> (child != nowSize - <span class=\\\"hljs-number\\\">1</span> && arr[child] &lt; arr[child + <span class=\\\"hljs-number\\\">1</span>]) {\\n            child++;\\n        }\\n        <span class=\\\"hljs-keyword\\\">if</span> (tmp &lt; arr[child]) {\\n            arr[hole] = arr[child];\\n        } <span class=\\\"hljs-keyword\\\">else</span> <span class=\\\"hljs-keyword\\\">break</span>;\\n    }\\n    arr[hole] = tmp;\\n}\\n</code></pre>\\n<p>还有一种实现方式，但是这个效率稍差，参考<a href=\\\"https://www.geeksforgeeks.org/heap-sort/\\\">GeeksforGeeks</a></p>\\n<pre><code class=\\\"hljs language-java\\\"><span class=\\\"hljs-keyword\\\">public</span> <span class=\\\"hljs-keyword\\\">void</span> <span class=\\\"hljs-title function_\\\">sort</span><span class=\\\"hljs-params\\\">(<span class=\\\"hljs-type\\\">int</span> arr[])</span> \\n{ \\n    <span class=\\\"hljs-comment\\\">// Build heap</span>\\n    <span class=\\\"hljs-keyword\\\">for</span> (<span class=\\\"hljs-type\\\">int</span> <span class=\\\"hljs-variable\\\">i</span> <span class=\\\"hljs-operator\\\">=</span> arr.length / <span class=\\\"hljs-number\\\">2</span> - <span class=\\\"hljs-number\\\">1</span>; i &gt;= <span class=\\\"hljs-number\\\">0</span>; i--) \\n        heapify(arr, arr.length, i); \\n    \\n    <span class=\\\"hljs-keyword\\\">for</span> (<span class=\\\"hljs-type\\\">int</span> i= arr.length - <span class=\\\"hljs-number\\\">1</span>; i &gt; <span class=\\\"hljs-number\\\">0</span>; i--) { \\n        <span class=\\\"hljs-type\\\">int</span> <span class=\\\"hljs-variable\\\">temp</span> <span class=\\\"hljs-operator\\\">=</span> arr[<span class=\\\"hljs-number\\\">0</span>]; \\n        arr[<span class=\\\"hljs-number\\\">0</span>] = arr[i]; \\n        arr[i] = temp; \\n        heapify(arr, i, <span class=\\\"hljs-number\\\">0</span>); \\n    } \\n} \\n\\n<span class=\\\"hljs-comment\\\">// To heapify a subtree rooted with node i which is </span>\\n<span class=\\\"hljs-comment\\\">// an index in arr[]. n is size of heap </span>\\n<span class=\\\"hljs-keyword\\\">void</span> <span class=\\\"hljs-title function_\\\">heapify</span><span class=\\\"hljs-params\\\">(<span class=\\\"hljs-type\\\">int</span> arr[], <span class=\\\"hljs-type\\\">int</span> currentSize, <span class=\\\"hljs-type\\\">int</span> holeIndex)</span> { \\n    <span class=\\\"hljs-type\\\">int</span> <span class=\\\"hljs-variable\\\">largestIndex</span> <span class=\\\"hljs-operator\\\">=</span> holeIndex; <span class=\\\"hljs-comment\\\">// Initialize largest as root </span>\\n    <span class=\\\"hljs-type\\\">int</span> <span class=\\\"hljs-variable\\\">leftIndex</span> <span class=\\\"hljs-operator\\\">=</span> <span class=\\\"hljs-number\\\">2</span> * holeIndex + <span class=\\\"hljs-number\\\">1</span>;\\n    <span class=\\\"hljs-type\\\">int</span> <span class=\\\"hljs-variable\\\">rightIndex</span> <span class=\\\"hljs-operator\\\">=</span> <span class=\\\"hljs-number\\\">2</span> * holeIndex + <span class=\\\"hljs-number\\\">2</span>;\\n\\n    <span class=\\\"hljs-comment\\\">// If left child is larger than root </span>\\n    <span class=\\\"hljs-keyword\\\">if</span> (leftIndex &lt; currentSize && arr[leftIndex] &gt; arr[largestIndex]) \\n        largestIndex = leftIndex; \\n\\n    <span class=\\\"hljs-comment\\\">// If right child is larger than largest so far </span>\\n    <span class=\\\"hljs-keyword\\\">if</span> (rightIndex &lt; currentSize && arr[rightIndex] &gt; arr[largestIndex]) \\n        largestIndex = rightIndex; \\n\\n    <span class=\\\"hljs-comment\\\">// If largest is not root </span>\\n    <span class=\\\"hljs-keyword\\\">if</span> (largestIndex != holeIndex) { \\n        <span class=\\\"hljs-type\\\">int</span> <span class=\\\"hljs-variable\\\">swap</span> <span class=\\\"hljs-operator\\\">=</span> arr[holeIndex]; \\n        arr[holeIndex] = arr[largestIndex]; \\n        arr[largestIndex] = swap; \\n        <span class=\\\"hljs-comment\\\">// Recursively heapify the affected sub-tree </span>\\n        heapify(arr, currentSize, largestIndex); \\n    } \\n} \\n</code></pre>\\n\";","export default \"<p><div class=\\\"saying mb-4\\\"><div class=\\\"saying-quote saying-left-quote\\\">“</div><div class=\\\"saying-quote saying-right-quote\\\">”</div></p>\\n<p>Filters：过滤你的日志信息</p>\\n<p></div></p>\\n<!-- more -->\\n\\n<h3 id=\\\"重要概念\\\">重要概念</h3>\\n<h4 id=\\\"枚举值\\\">枚举值</h4>\\n<p>Filters可以用来对日志事件进行过滤，过滤器会返回一个枚举类型的值，枚举值包含三个：ACCEPT、DENY和NEUTRAL。</p>\\n<ul>\\n<li><p>ACCEPT：时会跳过这一级别的其它过滤器,进入下个级别的过滤器；</p>\\n</li>\\n<li><p>DENY：时会直接终止事件的传递；</p>\\n</li>\\n<li><p>NEUTRAL：时会继续交给同级别的其它过滤器处理（若已经是同级别最后一个过滤器，那么将日志事件传递给下个级别）。</p>\\n</li>\\n</ul>\\n<h4 id=\\\"过滤位置\\\">过滤位置</h4>\\n<p>可以在以下四个位置配置过滤器：</p>\\n<ul>\\n<li><p>上下文范围有效的过滤器直接在<Configuration>标签里配置，被这种过滤器拒绝的日志事件不再会向后传递。一旦日志事件被一个上下文范围有效的过滤器判定为ACCEPT时，其它上下文有效的过滤器将不会对日志事件进行过滤，日志事件将会继续呗Logger和Appender的过滤器过滤。</p>\\n</li>\\n<li><p>Logger过滤器配置在一个特定的Logger上面。这些过滤器会在上下文范围有效的过滤器之后发挥作用，被这些过滤器拒绝的日志事件将会被丢弃，也不管additivity的配置如何，不会将日志传递给父亲Logger。</p>\\n</li>\\n<li><p>Appender过滤器用于决定一个指定的Appender是否应该处理和发布日志事件。</p>\\n</li>\\n<li><p>Appender引用过滤器用于决定Logger是否应该将日志事件路由到一个Appender。</p>\\n</li>\\n</ul>\\n<h3 id=\\\"我常用的过滤器\\\">我常用的过滤器</h3>\\n<h4 id=\\\"compositefilter\\\">CompositeFilter</h4>\\n<p>组合过滤器，使用一个<code>Filters</code>元素组合多个Filter，这个元素没有其他参数。</p>\\n<pre><code class=\\\"hljs language-xml\\\"><span class=\\\"hljs-tag\\\">&lt;<span class=\\\"hljs-name\\\">Filters</span>&gt;</span>\\n  <span class=\\\"hljs-tag\\\">&lt;<span class=\\\"hljs-name\\\">MarkerFilter</span> <span class=\\\"hljs-attr\\\">marker</span>=<span class=\\\"hljs-string\\\">&quot;EVENT&quot;</span> <span class=\\\"hljs-attr\\\">onMatch</span>=<span class=\\\"hljs-string\\\">&quot;ACCEPT&quot;</span> <span class=\\\"hljs-attr\\\">onMismatch</span>=<span class=\\\"hljs-string\\\">&quot;NEUTRAL&quot;</span>/&gt;</span>\\n    <span class=\\\"hljs-tag\\\">&lt;<span class=\\\"hljs-name\\\">DynamicThresholdFilter</span> <span class=\\\"hljs-attr\\\">key</span>=<span class=\\\"hljs-string\\\">&quot;loginId&quot;</span> <span class=\\\"hljs-attr\\\">defaultThreshold</span>=<span class=\\\"hljs-string\\\">&quot;ERROR&quot;</span>\\n                          <span class=\\\"hljs-attr\\\">onMatch</span>=<span class=\\\"hljs-string\\\">&quot;ACCEPT&quot;</span> <span class=\\\"hljs-attr\\\">onMismatch</span>=<span class=\\\"hljs-string\\\">&quot;NEUTRAL&quot;</span>&gt;</span>\\n    <span class=\\\"hljs-tag\\\">&lt;<span class=\\\"hljs-name\\\">KeyValuePair</span> <span class=\\\"hljs-attr\\\">key</span>=<span class=\\\"hljs-string\\\">&quot;User1&quot;</span> <span class=\\\"hljs-attr\\\">value</span>=<span class=\\\"hljs-string\\\">&quot;DEBUG&quot;</span>/&gt;</span>\\n  <span class=\\\"hljs-tag\\\">&lt;/<span class=\\\"hljs-name\\\">DynamicThresholdFilter</span>&gt;</span>\\n<span class=\\\"hljs-tag\\\">&lt;/<span class=\\\"hljs-name\\\">Filters</span>&gt;</span>\\n</code></pre>\\n<h4 id=\\\"thresholdfilter\\\">ThresholdFilter</h4>\\n<p>根据输出的日志级别过滤日志</p>\\n<h5 id=\\\"level\\\">Level</h5>\\n<pre><code class=\\\"hljs language-js\\\"><span class=\\\"hljs-variable constant_\\\">FATAL</span> &lt; <span class=\\\"hljs-variable constant_\\\">ERROR</span> &lt; <span class=\\\"hljs-variable constant_\\\">WARN</span> &lt; <span class=\\\"hljs-variable constant_\\\">INFO</span> &lt; <span class=\\\"hljs-variable constant_\\\">DEBUG</span> &lt; <span class=\\\"hljs-variable constant_\\\">TRACE</span>\\n</code></pre>\\n<h5 id=\\\"filter-rule\\\">Filter Rule</h5>\\n<pre><code class=\\\"hljs language-js\\\"><span class=\\\"hljs-keyword\\\">if</span> (输出日志级别 &lt;= 过滤器配置级别) <span class=\\\"hljs-keyword\\\">return</span> <span class=\\\"hljs-string\\\">&#x27;onMatch&#x27;</span>\\n<span class=\\\"hljs-keyword\\\">else</span> <span class=\\\"hljs-keyword\\\">return</span> <span class=\\\"hljs-string\\\">&#x27;onMismatch&#x27;</span>;\\n</code></pre>\\n<h5 id=\\\"parameter\\\">Parameter</h5>\\n<ul>\\n<li>level：string：需要匹配的日志级别</li>\\n<li>onMatch：string：指定匹配到的LogEvents的过滤策略</li>\\n<li>onMismatch：string：指定不匹配的LogEvents的过滤策略</li>\\n</ul>\\n<p>比如，如果ThresholdFilter配置的级别为ERROR，日志事件级别为DEBUG，那么onMismatch值就会返回。只有ERROR或级别更低的FATAL级别到日志事件的到来，才会返回onMatch。</p>\\n<pre><code class=\\\"hljs language-xml\\\"><span class=\\\"hljs-tag\\\">&lt;<span class=\\\"hljs-name\\\">File</span> <span class=\\\"hljs-attr\\\">name</span>=<span class=\\\"hljs-string\\\">&quot;infoFile&quot;</span> <span class=\\\"hljs-attr\\\">fileName</span>=<span class=\\\"hljs-string\\\">&quot;logs/info/info.log&quot;</span>&gt;</span>\\n    <span class=\\\"hljs-tag\\\">&lt;<span class=\\\"hljs-name\\\">Filters</span>&gt;</span>\\n        <span class=\\\"hljs-tag\\\">&lt;<span class=\\\"hljs-name\\\">ThresholdFilter</span> <span class=\\\"hljs-attr\\\">level</span>=<span class=\\\"hljs-string\\\">&quot;warn&quot;</span> <span class=\\\"hljs-attr\\\">onMatch</span>=<span class=\\\"hljs-string\\\">&quot;DENY&quot;</span> <span class=\\\"hljs-attr\\\">onMismatch</span>=<span class=\\\"hljs-string\\\">&quot;NEUTRAL&quot;</span>/&gt;</span>\\n        <span class=\\\"hljs-tag\\\">&lt;<span class=\\\"hljs-name\\\">ThresholdFilter</span> <span class=\\\"hljs-attr\\\">level</span>=<span class=\\\"hljs-string\\\">&quot;info&quot;</span> <span class=\\\"hljs-attr\\\">onMatch</span>=<span class=\\\"hljs-string\\\">&quot;ACCEPT&quot;</span> <span class=\\\"hljs-attr\\\">onMismatch</span>=<span class=\\\"hljs-string\\\">&quot;DENY&quot;</span>/&gt;</span>\\n    <span class=\\\"hljs-tag\\\">&lt;/<span class=\\\"hljs-name\\\">Filters</span>&gt;</span>\\n    <span class=\\\"hljs-tag\\\">&lt;<span class=\\\"hljs-name\\\">PatternLayout</span>&gt;</span>\\n        <span class=\\\"hljs-tag\\\">&lt;<span class=\\\"hljs-name\\\">Pattern</span>&gt;</span>%d %p %c{1.} [%t] %m%n<span class=\\\"hljs-tag\\\">&lt;/<span class=\\\"hljs-name\\\">Pattern</span>&gt;</span>\\n    <span class=\\\"hljs-tag\\\">&lt;/<span class=\\\"hljs-name\\\">PatternLayout</span>&gt;</span>\\n<span class=\\\"hljs-tag\\\">&lt;/<span class=\\\"hljs-name\\\">File</span>&gt;</span>\\n</code></pre>\\n<p>上面这个例子就把仅为INFO级别的日志信息输出到特定的地方</p>\\n<p>我们看第一个过滤器：</p>\\n<pre><code class=\\\"hljs language-xml\\\"><span class=\\\"hljs-tag\\\">&lt;<span class=\\\"hljs-name\\\">ThresholdFilter</span> <span class=\\\"hljs-attr\\\">level</span>=<span class=\\\"hljs-string\\\">&quot;warn&quot;</span> <span class=\\\"hljs-attr\\\">onMatch</span>=<span class=\\\"hljs-string\\\">&quot;DENY&quot;</span> <span class=\\\"hljs-attr\\\">onMismatch</span>=<span class=\\\"hljs-string\\\">&quot;NEUTRAL&quot;</span>/&gt;</span>\\n</code></pre>\\n<p>warn即warn以下（fatal、error）的级别被拒绝了，warn以上的级别被传递到下一个过滤器；</p>\\n<p>第二个过滤器：</p>\\n<pre><code class=\\\"hljs language-xml\\\"><span class=\\\"hljs-tag\\\">&lt;<span class=\\\"hljs-name\\\">ThresholdFilter</span> <span class=\\\"hljs-attr\\\">level</span>=<span class=\\\"hljs-string\\\">&quot;info&quot;</span> <span class=\\\"hljs-attr\\\">onMatch</span>=<span class=\\\"hljs-string\\\">&quot;ACCEPT&quot;</span> <span class=\\\"hljs-attr\\\">onMismatch</span>=<span class=\\\"hljs-string\\\">&quot;DENY&quot;</span>/&gt;</span>\\n</code></pre>\\n<p>info即info以下（warn、fatal、error）的级别被接受了，info以上的级别被拒绝；</p>\\n<h4 id=\\\"regexfilter\\\">RegexFilter</h4>\\n<p>根据日志内容来使用正则表达式去过滤日志信息</p>\\n<h5 id=\\\"parameter-1\\\">Parameter</h5>\\n<ul>\\n<li>regex：stirng：正则表达式</li>\\n<li>onMatch：string：指定匹配到的LogEvents的过滤策略</li>\\n<li>onMismatch：string：指定不匹配的LogEvents的过滤策略</li>\\n</ul>\\n<pre><code class=\\\"hljs language-xml\\\"><span class=\\\"hljs-tag\\\">&lt;<span class=\\\"hljs-name\\\">RegexFilter</span> <span class=\\\"hljs-attr\\\">regex</span>=<span class=\\\"hljs-string\\\">&quot;.* test .*&quot;</span> <span class=\\\"hljs-attr\\\">onMatch</span>=<span class=\\\"hljs-string\\\">&quot;ACCEPT&quot;</span> <span class=\\\"hljs-attr\\\">onMismatch</span>=<span class=\\\"hljs-string\\\">&quot;DENY&quot;</span>/&gt;</span>\\n</code></pre>\\n<p>上面这个例子只使出含有test字样的日志。</p>\\n\";","export default \"<h3 id=\\\"前提\\\">前提</h3>\\n<p>当年玩上博客的时候，整过很多活儿，什么Hexo，WP甚至Jekyll都来了，还搭到服务器上用nginx，然后各种域名、备案、CNAME各种乱搞</p>\\n<p>后面累了，不想折腾了，直接挂github pages，然后就还是用hexo</p>\\n<p>后面要学前端的时候直接想着，自己写一个博客页面，正好修炼一下，于是就又开始折腾了</p>\\n<p>最终定下方案：</p>\\n<ol>\\n<li>md文件自己一个<strong>仓库</strong></li>\\n<li>博客自己一个<strong>仓库</strong>，博文放issues中，然后前端调用<strong>github api</strong>去获取博文内容，然后客户端调用**<a href=\\\"https://github.com/pandao/editor.md\\\">editor.md</a>**实时渲染</li>\\n<li>评论也是放issues下面，调用<strong>github api</strong></li>\\n<li>后期因为手动两头更新很麻烦，自己在服务器上搞了个Jenkins，两个仓库都挂钩子，这边更新issues，那边创建md文档然后push；或者这边本地写好md文档，那边开新的issues；这个过程都由Jenkins接到钩子请求然后执行一个自己写的<strong>处理程序</strong>；</li>\\n</ol>\\n<p>其中过程实在是无比繁杂，而且表现非常烂，整个博客非常依赖<strong>github</strong>和<strong>github api</strong>，然后还<strong>依赖域名服务器</strong>，有段事件备案挂了，直接钩子停工。</p>\\n<p>然后一咬牙，改！基本需求如下：</p>\\n<h4 id=\\\"现在是什么样\\\">现在是什么样</h4>\\n<ol>\\n<li>基于issues</li>\\n<li>本地浏览器，用token调用api</li>\\n<li>md浏览器实时渲染</li>\\n<li>原稿和issues分两个仓库，虽然两头都可以更新，但是依赖Jenkins，依赖服务器和域名</li>\\n<li>无分类、标签管理</li>\\n<li>七牛云图床，依赖域名</li>\\n<li>目录树需要在浏览器手动更新</li>\\n<li>搜索依赖第三方</li>\\n</ol>\\n<h4 id=\\\"想变成什么样\\\">想变成什么样</h4>\\n<ol>\\n<li>尽量去token</li>\\n<li>免渲染</li>\\n<li>去掉图床依赖</li>\\n<li>一个仓库，免Jenkins依赖，免后台依赖，免手动更新目录树</li>\\n<li>一个客户端<ol>\\n<li>文章管理</li>\\n<li>图片管理</li>\\n<li>分类、标签管理</li>\\n<li>基于git、electron</li>\\n<li>发布script和todo</li>\\n<li>友链管理</li>\\n</ol>\\n</li>\\n</ol>\\n<h3 id=\\\"博客内容的处理\\\">博客内容的处理</h3>\\n<h4 id=\\\"静态化\\\">静态化</h4>\\n<p>现有的博客内容有：</p>\\n<ol>\\n<li>所有的博文；</li>\\n<li>about、scripts、todos、resume等内容；</li>\\n<li>一些额外的数据，比如友链；</li>\\n</ol>\\n<p>除了友链之外，其他都是md文档，我就干脆直接：</p>\\n<ol>\\n<li>本地用<a href=\\\"https://github.com/markedjs/marked\\\">marked</a>转换md文档为html</li>\\n<li>然后转换出的html再拼接到我的主体HTML文件中，单独生成一个HTML文件</li>\\n<li>转换的过程中，生成一些博客页面需要的元数据，比如博客的前面内容的截取、博客的字数、博客的title等，封装成一个cache.js，注入到所有的HTML页面中</li>\\n<li>友链也是读取内容然后生成js文件，又HTML去注入</li>\\n</ol>\\n<p>这样，博客目前除了评论之外的所有数据都是<strong>静态化</strong>的，由本地生成，然后推上去部署就行了。</p>\\n<h4 id=\\\"动态资源的生成以及导入的处理\\\">动态资源的生成以及导入的处理</h4>\\n<p>因为一个博文生成一个HTML，上百篇博文上百个HTML，所以HTML的主体内容和资源，应该尽量静态，比如JS资源、CSS资源，原来的资源导入方式都是写<code>&lt;link&gt;</code>标签和<code>&lt;script&gt;</code>标签去导入，现在不行了，更新一个资源要更新上百个HTML，于是做了资源统一的入口，CSS资源就很简单，统一到一个<code>style.css</code>然后在这里导入就行了：</p>\\n<pre><code class=\\\"hljs language-css\\\"><span class=\\\"hljs-keyword\\\">@import</span> <span class=\\\"hljs-string\\\">&#x27;./default.css&#x27;</span>;\\n<span class=\\\"hljs-keyword\\\">@import</span> <span class=\\\"hljs-string\\\">&#x27;./main.css&#x27;</span>;\\n<span class=\\\"hljs-keyword\\\">@import</span> <span class=\\\"hljs-string\\\">&#x27;./media.css&#x27;</span>;\\n\\n<span class=\\\"hljs-keyword\\\">@import</span> <span class=\\\"hljs-string\\\">&#x27;https://cdn.jsdelivr.net/gh/youyinnn/youyinnn.github.io@master/css/bootstrap.min.css&#x27;</span>;\\n<span class=\\\"hljs-keyword\\\">@import</span> <span class=\\\"hljs-string\\\">&#x27;https://cdn.jsdelivr.net/gh/youyinnn/youyinnn.github.io@master/css/editormd.preview.min.css&#x27;</span>;\\n<span class=\\\"hljs-keyword\\\">@import</span> <span class=\\\"hljs-string\\\">&#x27;https://cdn.jsdelivr.net/gh/highlightjs/highlight.js@9-18-stable/src/styles/github-gist.css&#x27;</span>;\\n<span class=\\\"hljs-keyword\\\">@import</span> <span class=\\\"hljs-string\\\">&#x27;https://cdn.jsdelivr.net/gh/daneden/animate.css@master/animate.min.css&#x27;</span>;\\n<span class=\\\"hljs-keyword\\\">@import</span> <span class=\\\"hljs-string\\\">&#x27;https://cdn.jsdelivr.net/npm/katex@0.11.1/dist/katex.min.css&#x27;</span>;\\n</code></pre>\\n<p>JS资源有点麻烦，因为有的资源是要在<code>&lt;head&gt;</code>标签里导入，有的是要在<code>&lt;/body&gt;</code>之前导入，于是找到了一个<a href=\\\"https://github.com/eldargab/load-script\\\">load-script</a>, 统一成一个<code>scriptlist.js</code>然后分别导入就行了：</p>\\n<pre><code class=\\\"hljs language-javascript\\\"><span class=\\\"hljs-comment\\\">// &lt;head&gt;里要导入的资源</span>\\n<span class=\\\"hljs-keyword\\\">var</span> before = [\\n    ...\\n]\\n<span class=\\\"hljs-comment\\\">// 博客的额外资源，比如友链和元数据 但是元数据资源可能会生成一个很大的js，所以用cdn去导入</span>\\n<span class=\\\"hljs-keyword\\\">for</span> (<span class=\\\"hljs-keyword\\\">let</span> i = <span class=\\\"hljs-number\\\">0</span>; i &lt; resourcesList.<span class=\\\"hljs-property\\\">length</span>; i++) {\\n    <span class=\\\"hljs-keyword\\\">if</span> (location.<span class=\\\"hljs-property\\\">hostname</span> !== <span class=\\\"hljs-string\\\">&#x27;youyinnn.github.io&#x27;</span>) {\\n        resourcesList[i] = <span class=\\\"hljs-string\\\">&#x27;/resources/&#x27;</span> + resourcesList[i]\\n    } <span class=\\\"hljs-keyword\\\">else</span> {\\n        resourcesList[i] = <span class=\\\"hljs-string\\\">&#x27;cdn&#x27;</span> + resourcesList[i]\\n    }\\n}\\n<span class=\\\"hljs-comment\\\">// &lt;/body&gt; 之前导入的资源 比如jquery等 以及自己的js资源</span>\\n<span class=\\\"hljs-keyword\\\">var</span> after = [\\n    ...\\n]\\nafter = resourcesList.<span class=\\\"hljs-title function_\\\">concat</span>(after)\\n<span class=\\\"hljs-keyword\\\">function</span> <span class=\\\"hljs-title function_\\\">importJsBeforeLoad</span>(<span class=\\\"hljs-params\\\"></span>) {\\n    <span class=\\\"hljs-keyword\\\">for</span> (path <span class=\\\"hljs-keyword\\\">of</span> before) {\\n        <span class=\\\"hljs-title function_\\\">load</span>(path, {\\n            <span class=\\\"hljs-attr\\\">async</span>: <span class=\\\"hljs-literal\\\">false</span>\\n        })\\n    }\\n}\\n<span class=\\\"hljs-comment\\\">// 直接执行</span>\\n<span class=\\\"hljs-title function_\\\">importJsBeforeLoad</span>()\\n\\n<span class=\\\"hljs-keyword\\\">function</span> <span class=\\\"hljs-title function_\\\">importJsAfterLoad</span>(<span class=\\\"hljs-params\\\"></span>) {\\n    <span class=\\\"hljs-keyword\\\">let</span> map = {}\\n    map.<span class=\\\"hljs-property\\\">defer</span> = <span class=\\\"hljs-literal\\\">true</span>\\n    <span class=\\\"hljs-keyword\\\">for</span> (path <span class=\\\"hljs-keyword\\\">of</span> after) {\\n        <span class=\\\"hljs-title function_\\\">load</span>(path, {\\n            <span class=\\\"hljs-attr\\\">async</span>: <span class=\\\"hljs-literal\\\">false</span>,\\n            <span class=\\\"hljs-attr\\\">attrs</span>: map\\n        },<span class=\\\"hljs-keyword\\\">function</span> (<span class=\\\"hljs-params\\\">err, script</span>) {\\n            <span class=\\\"hljs-variable language_\\\">console</span>.<span class=\\\"hljs-title function_\\\">debug</span>(script.<span class=\\\"hljs-property\\\">src</span>)\\n        })\\n    }\\n    <span class=\\\"hljs-comment\\\">// 一些需要特殊标签参数的资源单独导入</span>\\n    map.<span class=\\\"hljs-property\\\">integrity</span> = <span class=\\\"hljs-string\\\">&#x27;sha---&#x27;</span>\\n    map.<span class=\\\"hljs-property\\\">crossorigin</span> = <span class=\\\"hljs-string\\\">&#x27;anonymous&#x27;</span>\\n    <span class=\\\"hljs-title function_\\\">load</span>(<span class=\\\"hljs-string\\\">&#x27;katex.min.js&#x27;</span>, {\\n        <span class=\\\"hljs-attr\\\">async</span>: <span class=\\\"hljs-literal\\\">false</span>,\\n        <span class=\\\"hljs-attr\\\">attrs</span>: map\\n    })\\n    map.<span class=\\\"hljs-property\\\">integrity</span> = <span class=\\\"hljs-string\\\">&#x27;sha---&#x27;</span>\\n    <span class=\\\"hljs-title function_\\\">load</span>(<span class=\\\"hljs-string\\\">&#x27;auto-render.min.js&#x27;</span>, {\\n        <span class=\\\"hljs-attr\\\">async</span>: <span class=\\\"hljs-literal\\\">false</span>,\\n        <span class=\\\"hljs-attr\\\">attrs</span>: map\\n    }, <span class=\\\"hljs-function\\\">() =&gt;</span> {\\n        <span class=\\\"hljs-keyword\\\">for</span> (el <span class=\\\"hljs-keyword\\\">of</span> <span class=\\\"hljs-variable language_\\\">document</span>.<span class=\\\"hljs-title function_\\\">getElementsByClassName</span>(<span class=\\\"hljs-string\\\">&#x27;markdown-body&#x27;</span>)) {\\n            <span class=\\\"hljs-title function_\\\">renderMathInElement</span>(el)\\n        }\\n    })\\n}\\n<span class=\\\"hljs-comment\\\">// 等DOMContentLoaded之后导入</span>\\n<span class=\\\"hljs-variable language_\\\">document</span>.<span class=\\\"hljs-title function_\\\">addEventListener</span>(<span class=\\\"hljs-string\\\">&#x27;DOMContentLoaded&#x27;</span>, <span class=\\\"hljs-keyword\\\">function</span> (<span class=\\\"hljs-params\\\"></span>) {\\n    <span class=\\\"hljs-title function_\\\">importJsAfterLoad</span>()\\n})\\n</code></pre>\\n<h3 id=\\\"去掉的东西\\\">去掉的东西</h3>\\n<ul>\\n<li><a href=\\\"https://github.com/pandao/editor.md\\\">editor.md</a>没有博客端选软md的需求了；</li>\\n<li><a href=\\\"https://github.com/afeld/emoji-css\\\">emoji.css</a>这玩意要用推特的图片资源，非常慢；</li>\\n<li><a href=\\\"https://github.com/adrai/flowchart.js\\\">flowchart.js</a> 这玩意的cdn非常慢（cdn.clouldflare.com真菜，还是jsdelivr牛皮），而且很多博客没什么必要使用md语法去写流程图，直接画图然后上传图片多好，而且还是实时渲染的；</li>\\n<li>github api，速度是真的慢，静态化就没必要用它了</li>\\n</ul>\\n<h3 id=\\\"新操作\\\">新操作</h3>\\n<h4 id=\\\"动态插入script标签\\\">动态插入&lt;script&gt;标签</h4>\\n<p>这个之前提到过，如果写死<code>&lt;script&gt;</code>标签去加载JS资源，那么主体HTML一变，上百个根据主体HTML生成的文章HTML就得跟着变，所以主体留一个js，这个js负责用代码动态插入JS资源，这样整个主体HTML就只剩：</p>\\n<pre><code class=\\\"hljs language-html\\\"><span class=\\\"hljs-meta\\\">&lt;!DOCTYPE <span class=\\\"hljs-keyword\\\">html</span>&gt;</span>\\n<span class=\\\"hljs-tag\\\">&lt;<span class=\\\"hljs-name\\\">html</span> <span class=\\\"hljs-attr\\\">lang</span>=<span class=\\\"hljs-string\\\">&quot;en&quot;</span>&gt;</span>\\n<span class=\\\"hljs-tag\\\">&lt;<span class=\\\"hljs-name\\\">head</span>&gt;</span>\\n    <span class=\\\"hljs-tag\\\">&lt;<span class=\\\"hljs-name\\\">meta</span> <span class=\\\"hljs-attr\\\">charset</span>=<span class=\\\"hljs-string\\\">&quot;UTF-8&quot;</span>&gt;</span>\\n    <span class=\\\"hljs-tag\\\">&lt;<span class=\\\"hljs-name\\\">title</span>&gt;</span>blog | youyinnn<span class=\\\"hljs-tag\\\">&lt;/<span class=\\\"hljs-name\\\">title</span>&gt;</span>\\n    \\n    // 动态加载JS资源的函数定义\\n    <span class=\\\"hljs-tag\\\">&lt;<span class=\\\"hljs-name\\\">script</span> <span class=\\\"hljs-attr\\\">src</span>=<span class=\\\"hljs-string\\\">&quot;/myjs/loadscripts.js&quot;</span>&gt;</span><span class=\\\"hljs-tag\\\">&lt;/<span class=\\\"hljs-name\\\">script</span>&gt;</span>\\n    <span class=\\\"hljs-tag\\\">&lt;<span class=\\\"hljs-name\\\">script</span> <span class=\\\"hljs-attr\\\">src</span>=<span class=\\\"hljs-string\\\">&quot;/myjs/jump-1.2.js&quot;</span>&gt;</span><span class=\\\"hljs-tag\\\">&lt;/<span class=\\\"hljs-name\\\">script</span>&gt;</span>\\n\\n    <span class=\\\"hljs-tag\\\">&lt;<span class=\\\"hljs-name\\\">link</span> <span class=\\\"hljs-attr\\\">rel</span>=<span class=\\\"hljs-string\\\">&quot;stylesheet&quot;</span> <span class=\\\"hljs-attr\\\">href</span>=<span class=\\\"hljs-string\\\">&quot;/mycss/style.css&quot;</span>&gt;</span>\\n\\n    // 就在这里调用scriptlist.js\\n    <span class=\\\"hljs-tag\\\">&lt;<span class=\\\"hljs-name\\\">script</span> <span class=\\\"hljs-attr\\\">src</span>=<span class=\\\"hljs-string\\\">&quot;/resources/resources.js&quot;</span>&gt;</span><span class=\\\"hljs-tag\\\">&lt;/<span class=\\\"hljs-name\\\">script</span>&gt;</span>\\n    <span class=\\\"hljs-tag\\\">&lt;<span class=\\\"hljs-name\\\">script</span> <span class=\\\"hljs-attr\\\">src</span>=<span class=\\\"hljs-string\\\">&quot;/myjs/scriptlist.js&quot;</span>&gt;</span><span class=\\\"hljs-tag\\\">&lt;/<span class=\\\"hljs-name\\\">script</span>&gt;</span>\\n<span class=\\\"hljs-tag\\\">&lt;/<span class=\\\"hljs-name\\\">head</span>&gt;</span>\\n<span class=\\\"hljs-tag\\\">&lt;<span class=\\\"hljs-name\\\">body</span>&gt;</span>\\n    <span class=\\\"hljs-comment\\\">&lt;!--&gt; 主体内容 &lt;--&gt;</span>\\n<span class=\\\"hljs-tag\\\">&lt;/<span class=\\\"hljs-name\\\">body</span>&gt;</span>\\n<span class=\\\"hljs-tag\\\">&lt;/<span class=\\\"hljs-name\\\">html</span>&gt;</span>\\n</code></pre>\\n<p>要更新JS资源的话 就更改<code>scriptlist.js</code>的内容就行了</p>\\n<h4 id=\\\"固定唯一id生成crc技术\\\">固定唯一ID生成——CRC技术</h4>\\n<h5 id=\\\"什么是crc？\\\">什么是<a href=\\\"https://baike.baidu.com/item/CRC/1453359?fr=aladdin\\\">CRC</a>？</h5>\\n<blockquote>\\n<p>循环冗余校验（Cyclic Redundancy Check， CRC）是一种根据网络数据包或计算机文件等数据产生简短固定位数校验码的一种<a href=\\\"https://baike.baidu.com/item/%E4%BF%A1%E9%81%93%E7%BC%96%E7%A0%81%E6%8A%80%E6%9C%AF/2366288\\\">信道编码技术</a>，主要用来检测或校验数据传输或者保存后可能出现的错误。它是利用除法及余数的原理来作错误侦测的。</p>\\n</blockquote>\\n<p>感觉和MD5、SHA算法差不多，都是生成唯一串做数据校验，但是CRC的计算方式不一样、安全性比前两者小、计算效率高，而且CRC值比前两者的Hash值要简短很多，<a href=\\\"https://yq.aliyun.com/articles/233027\\\">参考</a>。</p>\\n<h5 id=\\\"为什么要生成唯一id？\\\">为什么要生成唯一ID？</h5>\\n<p>用途有2个：</p>\\n<ol>\\n<li><p>文章是中文名，这个做浏览器URL路径处理的时候挺麻烦的，转码之后各种%，还挺长的，特别不美观，这方面参考了hexo的插件<a href=\\\"https://github.com/Rozbo/hexo-abbrlink\\\">abbrlink</a>的做法使用了CRC</p>\\n<pre><code class=\\\"hljs language-javascript\\\"><span class=\\\"hljs-keyword\\\">for</span> (pname <span class=\\\"hljs-keyword\\\">of</span> postsrs) {\\n    <span class=\\\"hljs-keyword\\\">let</span> abbrlink = <span class=\\\"hljs-title function_\\\">crc32</span>(pname).<span class=\\\"hljs-title function_\\\">toString</span>(<span class=\\\"hljs-number\\\">36</span>)\\n    <span class=\\\"hljs-title function_\\\">md2html</span>(\\n        path.<span class=\\\"hljs-title function_\\\">join</span>(postsPath, pname),\\n        path.<span class=\\\"hljs-title function_\\\">join</span>(__dirname, <span class=\\\"hljs-string\\\">&#x27;..&#x27;</span>, <span class=\\\"hljs-string\\\">&#x27;article&#x27;</span>, abbrlink + <span class=\\\"hljs-string\\\">&#x27;.html&#x27;</span>),\\n        <span class=\\\"hljs-keyword\\\">function</span>(<span class=\\\"hljs-params\\\">sourceMdStr</span>) {\\n            <span class=\\\"hljs-comment\\\">// md处理</span>\\n        }\\n    )\\n}\\n</code></pre>\\n</li>\\n<li><p>由于cache文件很大，所以要用cdn，但是每次cache文件在每次本地静态渲染之后，内容都会发生改变，所以每次都要生成不同文件名的cache文件才能保证cdn能用上最新的cache文件</p>\\n</li>\\n</ol>\\n<h4 id=\\\"ip检测跳转gitee\\\">IP检测跳转Gitee</h4>\\n<h5 id=\\\"寻找免费公共接口\\\">寻找免费公共接口</h5>\\n<ul>\\n<li><p>国内：</p>\\n<ul>\\n<li><p>搜狐</p>\\n<ul>\\n<li><a href=\\\"https://link.jianshu.com?t=http://pv.sohu.com/cityjson\\\">http://pv.sohu.com/cityjson</a></li>\\n<li><a href=\\\"https://link.jianshu.com?t=http://pv.sohu.com/cityjson?ie=utf-8\\\">http://pv.sohu.com/cityjson?ie=utf-8</a></li>\\n<li><a href=\\\"https://link.jianshu.com?t=http://txt.go.sohu.com/ip/soip\\\">http://txt.go.sohu.com/ip/soip</a></li>\\n</ul>\\n<p>其中有一个支持https，但是有跨域问题，如果使用<code>&lt;script&gt;</code>标签解决跨域的话，它的代码是直接注入的，而不是返回的callback，而且因为没有正式的开放信息，只是搜出来的，不知道什么时候就下线了</p>\\n</li>\\n<li><p>某大佬个人维护的免费开放接口平台：<a href=\\\"https://github.com/MZCretin/RollToolsApi%EF%BC%8C%E6%9C%89https%EF%BC%8C%E6%9C%89%E8%B7%A8%E5%9F%9F%EF%BC%8C%E4%BD%86%E6%98%AF%E5%9B%A0%E4%B8%BA%E6%98%AF%E4%B8%AA%E4%BA%BA%E7%BB%B4%E6%8A%A4%EF%BC%8C%E8%BF%98%E6%98%AF%E6%80%95%E4%B8%8D%E7%A8%B3%E5%AE%9A%EF%BC%8C%E8%99%BD%E7%84%B6%E6%9C%89%E5%B0%8F%E7%A8%8B%E5%BA%8F%E7%9B%91%E6%8E%A7%EF%BC%9B%E4%B9%9F%E6%98%AF%E7%AC%AC%E4%B8%80%E7%89%88%E8%B7%B3%E8%BD%ACipcheck\\\">https://github.com/MZCretin/RollToolsApi，有https，有跨域，但是因为是个人维护，还是怕不稳定，虽然有小程序监控；也是第一版跳转ipcheck</a></p>\\n<pre><code class=\\\"hljs language-javascript\\\"><span class=\\\"hljs-keyword\\\">var</span> xmlhttp2 = <span class=\\\"hljs-keyword\\\">new</span> <span class=\\\"hljs-title class_\\\">XMLHttpRequest</span>()\\nxmlhttp2.<span class=\\\"hljs-property\\\">onreadystatechange</span> = <span class=\\\"hljs-keyword\\\">function</span>(<span class=\\\"hljs-params\\\"></span>) {\\n    <span class=\\\"hljs-keyword\\\">if</span> (xmlhttp2.<span class=\\\"hljs-property\\\">readyState</span> == <span class=\\\"hljs-number\\\">4</span> && xmlhttp2.<span class=\\\"hljs-property\\\">status</span> == <span class=\\\"hljs-number\\\">200</span>) {\\n        <span class=\\\"hljs-keyword\\\">let</span> rsjson = <span class=\\\"hljs-title class_\\\">JSON</span>.<span class=\\\"hljs-title function_\\\">parse</span>(xmlhttp2.<span class=\\\"hljs-property\\\">responseText</span>)\\n        <span class=\\\"hljs-keyword\\\">if</span> (rsjson.<span class=\\\"hljs-property\\\">data</span>.<span class=\\\"hljs-property\\\">provinceId</span> !== <span class=\\\"hljs-number\\\">999999</span>) {\\n            <span class=\\\"hljs-comment\\\">// chinese visitor</span>\\n            sessionStorage.<span class=\\\"hljs-title function_\\\">setItem</span>(<span class=\\\"hljs-string\\\">&#x27;__ischinese&#x27;</span>, <span class=\\\"hljs-string\\\">&#x27;yes&#x27;</span>)\\n        } <span class=\\\"hljs-keyword\\\">else</span> {\\n            <span class=\\\"hljs-comment\\\">// foreign visitor</span>\\n            sessionStorage.<span class=\\\"hljs-title function_\\\">setItem</span>(<span class=\\\"hljs-string\\\">&#x27;__isforeigner&#x27;</span>, <span class=\\\"hljs-string\\\">&#x27;yes&#x27;</span>)\\n        }\\n    }\\n}\\nxmlhttp2.<span class=\\\"hljs-title function_\\\">open</span>(<span class=\\\"hljs-string\\\">&quot;GET&quot;</span>, <span class=\\\"hljs-string\\\">&quot;https://www.mxnzp.com/ip/self?app_id=123&app_secret=456&quot;</span>, <span class=\\\"hljs-literal\\\">true</span>);\\nxmlhttp2.<span class=\\\"hljs-title function_\\\">send</span>()\\n</code></pre>\\n</li>\\n<li><p>百度地图开放API：<a href=\\\"http://lbs.baidu.com/index.php?title=webapi/ip-api\\\">http://lbs.baidu.com/index.php?title=webapi/ip-api</a></p>\\n<p>虽然跨域，但是好在有callback，不用怕注入，而且平台是正式开放的；虽然文档里没有callback的说明，我还是搜出来了，确实接口支持callback，这也是我现在使用的跳转ipcheck</p>\\n<pre><code class=\\\"hljs language-javascript\\\"><span class=\\\"hljs-keyword\\\">function</span> <span class=\\\"hljs-title function_\\\">cb</span>(<span class=\\\"hljs-params\\\">rs</span>) {\\n    <span class=\\\"hljs-keyword\\\">if</span> (rs.<span class=\\\"hljs-property\\\">status</span> === <span class=\\\"hljs-number\\\">0</span>) {\\n        <span class=\\\"hljs-comment\\\">// chinese visitor</span>\\n        sessionStorage.<span class=\\\"hljs-title function_\\\">setItem</span>(<span class=\\\"hljs-string\\\">&#x27;__ischinese&#x27;</span>, <span class=\\\"hljs-string\\\">&#x27;yes&#x27;</span>)\\n    } <span class=\\\"hljs-keyword\\\">else</span> {\\n        <span class=\\\"hljs-comment\\\">// foreign visitor</span>\\n        sessionStorage.<span class=\\\"hljs-title function_\\\">setItem</span>(<span class=\\\"hljs-string\\\">&#x27;__isforeigner&#x27;</span>, <span class=\\\"hljs-string\\\">&#x27;yes&#x27;</span>)\\n    }\\n}\\n\\n<span class=\\\"hljs-comment\\\">// loadscript.js</span>\\n<span class=\\\"hljs-title function_\\\">load</span>(<span class=\\\"hljs-string\\\">&#x27;https://api.map.baidu.com/location/ip?ak=12345&callback=cb&#x27;</span>, {\\n    <span class=\\\"hljs-attr\\\">async</span>: <span class=\\\"hljs-literal\\\">true</span>\\n})\\n</code></pre>\\n</li>\\n</ul>\\n</li>\\n<li><p>国外：</p>\\n<ul>\\n<li><a href=\\\"https://ip-api.com/\\\">ip-api</a> https要会员</li>\\n<li><a href=\\\"https://freegeoip.app/\\\">freegeoip</a> 还行 免费https 每小时1万5的请求 比下面的快</li>\\n<li><a href=\\\"https://ipinfo.io/developers#https-ssl\\\">ipinfo</a> https免费 速度慢点</li>\\n</ul>\\n</li>\\n</ul>\\n<h5 id=\\\"github-pages-build的坑\\\">Github Pages Build的坑</h5>\\n<p>因为会有页面跳转的逻辑，所以Github Pages Build肯定会失败，导致网站无法上线。可以通过在根目录下创建<code>.nojekyll</code>文件来passby Jekyll Build的过程，直接上线。</p>\\n<blockquote>\\n<p><a href=\\\"https://github.blog/2009-12-29-bypassing-jekyll-on-github-pages/\\\">https://github.blog/2009-12-29-bypassing-jekyll-on-github-pages/</a></p>\\n<p>It is now possible to completely bypass Jekyll processing on <a href=\\\"http://pages.github.com/\\\">GitHub Pages</a> by creating a file named <code>.nojekyll</code> in the root of your pages repo and pushing it to GitHub. This should only be necessary if your site uses files or directories that start with underscores since Jekyll considers these to be special resources and does not copy them to the final site.</p>\\n</blockquote>\\n<blockquote>\\n<p><a href=\\\"https://stackoverflow.com/questions/25262183/github-page-build-failure\\\">https://stackoverflow.com/questions/25262183/github-page-build-failure</a></p>\\n<p>By default in a github repository, the <strong>gh-pages</strong> branch is build with <strong>Jekyll</strong>.</p>\\n<p>If you have underscored folders (eg: _myfolder) Jekyll tries to build. If they are not real Jekyll folders, this breaks the build.</p>\\n<p>If you don&#39;t want to process you html/js code, add a <strong>.nojekyll</strong> file at the root of your code. Github will then not try to build, it will just serve your pages as is.</p>\\n<p>More info in <a href=\\\"https://help.github.com/articles/using-jekyll-with-pages#turning-jekyll-off\\\">Github pages doc</a></p>\\n</blockquote>\\n\";","export default \"<h3 id=\\\"163sumclosestmedium\\\">16.3SumClosest(Medium)</h3>\\n<p>Given an array <code>nums</code> of <em>n</em> integers and an integer <code>target</code>, find three integers in <code>nums</code> such that the sum is closest to <code>target</code>. Return the sum of the three integers. You may assume that each input would have exactly one solution.</p>\\n<p><strong>Example:</strong></p>\\n<pre><code>Given array nums = [-1, 2, 1, -4], and target = 1.\\n\\nThe sum that is closest to the target is 2. (-1 + 2 + 1 = 2).\\n</code></pre>\\n<p>和上一题一样，只不过这一题并不用废心思处理重复</p>\\n<pre><code class=\\\"hljs language-java\\\"><span class=\\\"hljs-keyword\\\">public</span> <span class=\\\"hljs-type\\\">int</span> <span class=\\\"hljs-title function_\\\">threeSumClosest2</span><span class=\\\"hljs-params\\\">(<span class=\\\"hljs-type\\\">int</span>[] nums, <span class=\\\"hljs-type\\\">int</span> target)</span> {\\n    Arrays.sort(nums);\\n    <span class=\\\"hljs-type\\\">int</span> <span class=\\\"hljs-variable\\\">closest</span> <span class=\\\"hljs-operator\\\">=</span> nums[<span class=\\\"hljs-number\\\">0</span>] + nums[<span class=\\\"hljs-number\\\">1</span>] + nums[nums.length - <span class=\\\"hljs-number\\\">1</span>];\\n    <span class=\\\"hljs-keyword\\\">for</span> (<span class=\\\"hljs-type\\\">int</span> <span class=\\\"hljs-variable\\\">i</span> <span class=\\\"hljs-operator\\\">=</span> <span class=\\\"hljs-number\\\">0</span>; i &lt; nums.length - <span class=\\\"hljs-number\\\">2</span>; i++) {\\n        <span class=\\\"hljs-type\\\">int</span> <span class=\\\"hljs-variable\\\">l</span> <span class=\\\"hljs-operator\\\">=</span> i + <span class=\\\"hljs-number\\\">1</span>, r = nums.length - <span class=\\\"hljs-number\\\">1</span>;\\n        <span class=\\\"hljs-keyword\\\">while</span> (l &lt; r) {\\n            <span class=\\\"hljs-type\\\">int</span> <span class=\\\"hljs-variable\\\">sum</span> <span class=\\\"hljs-operator\\\">=</span> nums[i] + nums[l] + nums[r];\\n            <span class=\\\"hljs-keyword\\\">if</span> (sum == target) {\\n                <span class=\\\"hljs-keyword\\\">return</span> sum;\\n            }\\n            <span class=\\\"hljs-keyword\\\">if</span> (Math.abs(sum - target) &lt; Math.abs(closest - target)) {\\n                closest = sum;\\n            }\\n            <span class=\\\"hljs-keyword\\\">if</span> (sum &gt; target) {\\n                r--;\\n            } <span class=\\\"hljs-keyword\\\">else</span> {\\n                l++;\\n            }\\n        }\\n    }\\n    <span class=\\\"hljs-keyword\\\">return</span> closest;\\n}\\n</code></pre>\\n<h3 id=\\\"17-letter-combinations-of-a-phone-numbermedium\\\">17. Letter Combinations of a Phone Number(Medium)</h3>\\n<p>Given a string containing digits from <code>2-9</code> inclusive, return all possible letter combinations that the number could represent.</p>\\n<p>A mapping of digit to letters (just like on the telephone buttons) is given below. Note that 1 does not map to any letters.</p>\\n<p><img src=\\\"http://upload.wikimedia.org/wikipedia/commons/thumb/7/73/Telephone-keypad2.svg/200px-Telephone-keypad2.svg.png\\\" alt=\\\"img\\\"></p>\\n<p><strong>Example:</strong></p>\\n<pre><code>Input: &quot;23&quot;\\nOutput: [&quot;ad&quot;, &quot;ae&quot;, &quot;af&quot;, &quot;bd&quot;, &quot;be&quot;, &quot;bf&quot;, &quot;cd&quot;, &quot;ce&quot;, &quot;cf&quot;].\\n</code></pre>\\n<p><strong>Note:</strong></p>\\n<p>Although the above answer is in lexicographical order, your answer could be in any order you want.</p>\\n<p>这题怎么说，一看就是DP，最终解法有点像最近点对，然后也有点像<strong>Merge Kth Sorted List</strong></p>\\n<p>上一个公式：<code>Get(&quot;234&quot;)=Get(&quot;2&quot;) X Get(&quot;34&quot;)</code>；<code>Get(&quot;34&quot;)=Get(&quot;3&quot;) X Get(&quot;4&quot;)</code>；</p>\\n<p>于是我们将多个问题始终简化为只处理2个符号的问题，最后暴力求2个符号的问题即可</p>\\n<pre><code class=\\\"hljs language-java\\\"><span class=\\\"hljs-keyword\\\">private</span> <span class=\\\"hljs-keyword\\\">static</span> <span class=\\\"hljs-type\\\">char</span>[][] map = {\\n        {}, <span class=\\\"hljs-comment\\\">// 0</span>\\n        {}, <span class=\\\"hljs-comment\\\">// 1</span>\\n        {<span class=\\\"hljs-string\\\">&#x27;a&#x27;</span>,<span class=\\\"hljs-string\\\">&#x27;b&#x27;</span>,<span class=\\\"hljs-string\\\">&#x27;c&#x27;</span>},  <span class=\\\"hljs-comment\\\">// 2</span>\\n        {<span class=\\\"hljs-string\\\">&#x27;d&#x27;</span>,<span class=\\\"hljs-string\\\">&#x27;e&#x27;</span>,<span class=\\\"hljs-string\\\">&#x27;f&#x27;</span>},  <span class=\\\"hljs-comment\\\">// 3</span>\\n        {<span class=\\\"hljs-string\\\">&#x27;g&#x27;</span>,<span class=\\\"hljs-string\\\">&#x27;h&#x27;</span>,<span class=\\\"hljs-string\\\">&#x27;i&#x27;</span>},  <span class=\\\"hljs-comment\\\">// 4</span>\\n        {<span class=\\\"hljs-string\\\">&#x27;j&#x27;</span>,<span class=\\\"hljs-string\\\">&#x27;k&#x27;</span>,<span class=\\\"hljs-string\\\">&#x27;l&#x27;</span>},  <span class=\\\"hljs-comment\\\">// 5</span>\\n        {<span class=\\\"hljs-string\\\">&#x27;m&#x27;</span>,<span class=\\\"hljs-string\\\">&#x27;n&#x27;</span>,<span class=\\\"hljs-string\\\">&#x27;o&#x27;</span>},  <span class=\\\"hljs-comment\\\">// 6</span>\\n        {<span class=\\\"hljs-string\\\">&#x27;p&#x27;</span>,<span class=\\\"hljs-string\\\">&#x27;q&#x27;</span>,<span class=\\\"hljs-string\\\">&#x27;r&#x27;</span>,<span class=\\\"hljs-string\\\">&#x27;s&#x27;</span>}, <span class=\\\"hljs-comment\\\">// 7</span>\\n        {<span class=\\\"hljs-string\\\">&#x27;t&#x27;</span>,<span class=\\\"hljs-string\\\">&#x27;u&#x27;</span>,<span class=\\\"hljs-string\\\">&#x27;v&#x27;</span>},  <span class=\\\"hljs-comment\\\">// 8</span>\\n        {<span class=\\\"hljs-string\\\">&#x27;w&#x27;</span>,<span class=\\\"hljs-string\\\">&#x27;x&#x27;</span>,<span class=\\\"hljs-string\\\">&#x27;y&#x27;</span>,<span class=\\\"hljs-string\\\">&#x27;z&#x27;</span>}, <span class=\\\"hljs-comment\\\">// 9</span>\\n};\\n\\n<span class=\\\"hljs-keyword\\\">private</span> <span class=\\\"hljs-keyword\\\">static</span> <span class=\\\"hljs-type\\\">char</span>[] mapping(<span class=\\\"hljs-type\\\">char</span> digitalChar) {\\n    <span class=\\\"hljs-keyword\\\">return</span> map[digitalChar - <span class=\\\"hljs-string\\\">&#x27;0&#x27;</span>];\\n}\\n\\n<span class=\\\"hljs-keyword\\\">public</span> <span class=\\\"hljs-keyword\\\">static</span> List&lt;String&gt; <span class=\\\"hljs-title function_\\\">letterCombinations</span><span class=\\\"hljs-params\\\">(String digits)</span> {\\n    <span class=\\\"hljs-keyword\\\">if</span> (digits.isEmpty()) {\\n        <span class=\\\"hljs-keyword\\\">return</span> Collections.emptyList();\\n    }\\n    <span class=\\\"hljs-type\\\">char</span>[] chars = digits.toCharArray();\\n    <span class=\\\"hljs-keyword\\\">return</span> get(chars, <span class=\\\"hljs-number\\\">0</span>, chars.length - <span class=\\\"hljs-number\\\">1</span>);\\n}\\n\\n<span class=\\\"hljs-keyword\\\">private</span> <span class=\\\"hljs-keyword\\\">static</span> List&lt;String&gt; <span class=\\\"hljs-title function_\\\">get</span><span class=\\\"hljs-params\\\">(<span class=\\\"hljs-type\\\">char</span>[] set, <span class=\\\"hljs-type\\\">int</span> start, <span class=\\\"hljs-type\\\">int</span> end)</span> {\\n    LinkedList&lt;String&gt; ans = <span class=\\\"hljs-keyword\\\">new</span> <span class=\\\"hljs-title class_\\\">LinkedList</span>&lt;&gt;();\\n    <span class=\\\"hljs-keyword\\\">if</span> (start == end) {\\n        <span class=\\\"hljs-type\\\">char</span>[] mapping = mapping(set[start]);\\n        <span class=\\\"hljs-keyword\\\">for</span> (<span class=\\\"hljs-type\\\">char</span> c : mapping) {\\n            ans.add(String.valueOf(c));\\n        }\\n    } <span class=\\\"hljs-keyword\\\">else</span> <span class=\\\"hljs-keyword\\\">if</span> (end - start == <span class=\\\"hljs-number\\\">1</span>) {\\n        <span class=\\\"hljs-type\\\">char</span>[] sm = mapping(set[start]);\\n        <span class=\\\"hljs-type\\\">char</span>[] em = mapping(set[end]);\\n        <span class=\\\"hljs-keyword\\\">for</span> (<span class=\\\"hljs-type\\\">char</span> aSm : sm) {\\n            <span class=\\\"hljs-keyword\\\">for</span> (<span class=\\\"hljs-type\\\">char</span> anEm : em) {\\n                ans.add(aSm + String.valueOf(anEm));\\n            }\\n        }\\n    } <span class=\\\"hljs-keyword\\\">else</span> {\\n        List&lt;String&gt; a = get(set, start, start + <span class=\\\"hljs-number\\\">1</span>);\\n        List&lt;String&gt; b = get(set, start + <span class=\\\"hljs-number\\\">2</span>, end);\\n        <span class=\\\"hljs-keyword\\\">for</span> (String as : a) {\\n            <span class=\\\"hljs-keyword\\\">for</span> (String bs : b) {\\n                ans.add(as + bs);\\n            }\\n        }\\n    }\\n    <span class=\\\"hljs-keyword\\\">return</span> ans;\\n}\\n</code></pre>\\n<h3 id=\\\"18-4summedium\\\">18. 4Sum(Medium)</h3>\\n<p>Given an array <code>nums</code> of <em>n</em> integers and an integer <code>target</code>, are there elements <em>a</em>, <em>b</em>, <em>c</em>, and <em>d</em> in <code>nums</code> such that <em>a</em> + <em>b</em> + <em>c</em> + <em>d</em> = <code>target</code>? Find all unique quadruplets in the array which gives the sum of <code>target</code>.</p>\\n<p><strong>Note:</strong></p>\\n<p>The solution set must not contain duplicate quadruplets.</p>\\n<p><strong>Example:</strong></p>\\n<pre><code>Given array nums = [1, 0, -1, 0, -2, 2], and target = 0.\\n\\nA solution set is:\\n[\\n  [-1,  0, 0, 1],\\n  [-2, -1, 1, 2],\\n  [-2,  0, 0, 2]\\n]\\n</code></pre>\\n<p>有了3sum的经验，4sum迎刃而解</p>\\n<pre><code class=\\\"hljs language-java\\\"><span class=\\\"hljs-keyword\\\">public</span> List&lt;List&lt;Integer&gt;&gt; <span class=\\\"hljs-title function_\\\">fourSum</span><span class=\\\"hljs-params\\\">(<span class=\\\"hljs-type\\\">int</span>[] nums, <span class=\\\"hljs-type\\\">int</span> target)</span> {\\n    LinkedList&lt;List&lt;Integer&gt;&gt; ans = <span class=\\\"hljs-keyword\\\">new</span> <span class=\\\"hljs-title class_\\\">LinkedList</span>&lt;&gt;();\\n    Arrays.sort(nums);\\n    <span class=\\\"hljs-keyword\\\">for</span> (<span class=\\\"hljs-type\\\">int</span> <span class=\\\"hljs-variable\\\">i</span> <span class=\\\"hljs-operator\\\">=</span> <span class=\\\"hljs-number\\\">0</span>; i &lt; nums.length; i++) {\\n        <span class=\\\"hljs-keyword\\\">if</span> (i &gt; <span class=\\\"hljs-number\\\">0</span> && nums[i] == nums[i - <span class=\\\"hljs-number\\\">1</span>]) {\\n            <span class=\\\"hljs-keyword\\\">continue</span>;\\n        }\\n        <span class=\\\"hljs-type\\\">int</span> <span class=\\\"hljs-variable\\\">a</span> <span class=\\\"hljs-operator\\\">=</span> nums[i];\\n        <span class=\\\"hljs-keyword\\\">for</span> (<span class=\\\"hljs-type\\\">int</span> <span class=\\\"hljs-variable\\\">j</span> <span class=\\\"hljs-operator\\\">=</span> i + <span class=\\\"hljs-number\\\">1</span>; j &lt; nums.length; j++) {\\n            <span class=\\\"hljs-keyword\\\">if</span> (j &gt; i + <span class=\\\"hljs-number\\\">1</span> && nums[j] == nums[j - <span class=\\\"hljs-number\\\">1</span>]) {\\n                <span class=\\\"hljs-keyword\\\">continue</span>;\\n            }\\n            <span class=\\\"hljs-type\\\">int</span> <span class=\\\"hljs-variable\\\">b</span> <span class=\\\"hljs-operator\\\">=</span> nums[j];\\n            <span class=\\\"hljs-type\\\">int</span> <span class=\\\"hljs-variable\\\">l</span> <span class=\\\"hljs-operator\\\">=</span> j + <span class=\\\"hljs-number\\\">1</span>, r = nums.length - <span class=\\\"hljs-number\\\">1</span>;\\n            <span class=\\\"hljs-keyword\\\">while</span> (l &lt; r) {\\n                <span class=\\\"hljs-keyword\\\">if</span> (a + b + nums[l] + nums[r] == target) {\\n                    <span class=\\\"hljs-comment\\\">// l++ r-- here</span>\\n                    ans.add(Arrays.asList(a, b, nums[l++], nums[r--]));\\n                    <span class=\\\"hljs-comment\\\">// skip same result when low is the same value</span>\\n                    <span class=\\\"hljs-keyword\\\">while</span> (l &lt; r && nums[l - <span class=\\\"hljs-number\\\">1</span>] == nums[l]) {\\n                        l++;\\n                    }\\n                    <span class=\\\"hljs-comment\\\">// skip same result when high is the same value</span>\\n                    <span class=\\\"hljs-keyword\\\">while</span> (l &lt; r && nums[r] == nums[r + <span class=\\\"hljs-number\\\">1</span>]) {\\n                        r--;\\n                    }\\n                } <span class=\\\"hljs-keyword\\\">else</span> <span class=\\\"hljs-keyword\\\">if</span> (a + b + nums[l] + nums[r] &gt; target) {\\n                    r--;\\n                } <span class=\\\"hljs-keyword\\\">else</span> {\\n                    l++;\\n                }\\n            }\\n        }\\n    }\\n    <span class=\\\"hljs-keyword\\\">return</span> ans;\\n}\\n</code></pre>\\n<h3 id=\\\"19-remove-nth-node-from-end-of-listmedium\\\">19. Remove Nth Node From End Of List(Medium)</h3>\\n<p>Given a linked list, remove the <em>n</em>-th node from the end of list and return its head.</p>\\n<p><strong>Example:</strong></p>\\n<pre><code>Given linked list: 1-&gt;2-&gt;3-&gt;4-&gt;5, and n = 2.\\n\\nAfter removing the second node from the end, the linked list becomes 1-&gt;2-&gt;3-&gt;5.\\n</code></pre>\\n<p><strong>Note:</strong></p>\\n<p>Given <em>n</em> will always be valid.</p>\\n<p><strong>Follow up:</strong></p>\\n<p>Could you do this in one pass?</p>\\n<h4 id=\\\"two-pass-solution\\\">Two Pass Solution</h4>\\n<pre><code class=\\\"hljs language-java\\\"><span class=\\\"hljs-keyword\\\">public</span> ListNode <span class=\\\"hljs-title function_\\\">removeNthFromEnd</span><span class=\\\"hljs-params\\\">(ListNode head, <span class=\\\"hljs-type\\\">int</span> n)</span> {\\n    <span class=\\\"hljs-type\\\">ListNode</span> <span class=\\\"hljs-variable\\\">pre</span> <span class=\\\"hljs-operator\\\">=</span> head;\\n    <span class=\\\"hljs-type\\\">int</span> <span class=\\\"hljs-variable\\\">size</span> <span class=\\\"hljs-operator\\\">=</span> <span class=\\\"hljs-number\\\">1</span>;\\n    <span class=\\\"hljs-keyword\\\">while</span> (pre.next != <span class=\\\"hljs-literal\\\">null</span>) {\\n        pre = pre.next;\\n        size++;\\n    }\\n    <span class=\\\"hljs-type\\\">int</span> <span class=\\\"hljs-variable\\\">f</span> <span class=\\\"hljs-operator\\\">=</span> size - n;\\n    <span class=\\\"hljs-keyword\\\">if</span> (f == <span class=\\\"hljs-number\\\">0</span>) {\\n        head = head.next;\\n    } <span class=\\\"hljs-keyword\\\">else</span> {\\n        pre = <span class=\\\"hljs-keyword\\\">new</span> <span class=\\\"hljs-title class_\\\">ListNode</span>(<span class=\\\"hljs-number\\\">0</span>);\\n        pre.next = head;\\n        <span class=\\\"hljs-keyword\\\">while</span> (f &gt; <span class=\\\"hljs-number\\\">0</span>) {\\n            pre = pre.next;\\n            f--;\\n        }\\n        <span class=\\\"hljs-type\\\">ListNode</span> <span class=\\\"hljs-variable\\\">remove</span> <span class=\\\"hljs-operator\\\">=</span> pre.next;\\n        pre.next = remove.next;\\n    }\\n    <span class=\\\"hljs-keyword\\\">return</span> head;\\n}\\n</code></pre>\\n<p>没什么说的，one pass获得长度，two pass直接定位删除</p>\\n<h4 id=\\\"one-pass-solution\\\">One Pass Solution</h4>\\n<pre><code class=\\\"hljs language-java\\\"><span class=\\\"hljs-keyword\\\">public</span> ListNode <span class=\\\"hljs-title function_\\\">removeNthFromEnd2</span><span class=\\\"hljs-params\\\">(ListNode head, <span class=\\\"hljs-type\\\">int</span> n)</span> {\\n    <span class=\\\"hljs-type\\\">ListNode</span> <span class=\\\"hljs-variable\\\">pre</span> <span class=\\\"hljs-operator\\\">=</span> <span class=\\\"hljs-keyword\\\">new</span> <span class=\\\"hljs-title class_\\\">ListNode</span>(<span class=\\\"hljs-number\\\">0</span>), now = head, check;\\n    pre.next = head;\\n    <span class=\\\"hljs-keyword\\\">if</span> (head == <span class=\\\"hljs-literal\\\">null</span>) {\\n        <span class=\\\"hljs-keyword\\\">return</span> <span class=\\\"hljs-literal\\\">null</span>;\\n    }\\n    <span class=\\\"hljs-keyword\\\">while</span> (<span class=\\\"hljs-literal\\\">true</span>) {\\n        <span class=\\\"hljs-type\\\">int</span> <span class=\\\"hljs-variable\\\">count</span> <span class=\\\"hljs-operator\\\">=</span> <span class=\\\"hljs-number\\\">0</span>;\\n        check = now;\\n        <span class=\\\"hljs-keyword\\\">while</span> (count &lt; n) {\\n            <span class=\\\"hljs-keyword\\\">if</span> (check == <span class=\\\"hljs-literal\\\">null</span>) {\\n                <span class=\\\"hljs-keyword\\\">return</span> head.next;\\n            }\\n            check = check.next;\\n            count++;\\n        }\\n        <span class=\\\"hljs-keyword\\\">if</span> (check != <span class=\\\"hljs-literal\\\">null</span>) {\\n            pre = pre.next;\\n            now = now.next;\\n        } <span class=\\\"hljs-keyword\\\">else</span> {\\n            <span class=\\\"hljs-keyword\\\">if</span> (pre.next == head) {\\n                <span class=\\\"hljs-keyword\\\">return</span> head.next;\\n            }\\n            pre.next = pre.next.next;\\n            <span class=\\\"hljs-keyword\\\">break</span>;\\n        }\\n    }\\n    <span class=\\\"hljs-keyword\\\">return</span> head;\\n}\\n</code></pre>\\n<p>遍历链，对每个结点都往后找n+1个结点记为<strong>CHECK</strong>，如果<strong>CHECK</strong>为NULL，则说明当前的now就是要删掉的结点，我觉得这种方法还不如遍历两遍</p>\\n<h4 id=\\\"one-pass-solution---tow-pointers\\\">One Pass Solution - Tow pointers</h4>\\n<p>从剑指Offer上面看到的思路，对应面试题22，思想是设立两个指针，指针1先走n步，然后这时候指针2开始走，在这个过程种指针1和2始终有n步的距离差，所以当指针1走到null位置时，指针2自然就走到倒数第n个节点的位置了。</p>\\n<pre><code class=\\\"hljs language-java\\\"><span class=\\\"hljs-keyword\\\">public</span> ListNode <span class=\\\"hljs-title function_\\\">removeNthFromEnd3</span><span class=\\\"hljs-params\\\">(ListNode head, <span class=\\\"hljs-type\\\">int</span> n)</span> {\\n    <span class=\\\"hljs-keyword\\\">if</span> (head == <span class=\\\"hljs-literal\\\">null</span> || head.next == <span class=\\\"hljs-literal\\\">null</span>) <span class=\\\"hljs-keyword\\\">return</span> <span class=\\\"hljs-literal\\\">null</span>;\\n    <span class=\\\"hljs-type\\\">ListNode</span> <span class=\\\"hljs-variable\\\">p1</span> <span class=\\\"hljs-operator\\\">=</span> head, p2 = head, pre = head;\\n    <span class=\\\"hljs-keyword\\\">while</span> (p1 != <span class=\\\"hljs-literal\\\">null</span>) {\\n        <span class=\\\"hljs-keyword\\\">if</span> (n != <span class=\\\"hljs-number\\\">0</span>) {\\n            n--;\\n        } <span class=\\\"hljs-keyword\\\">else</span> {\\n            pre = p2;\\n            p2 = p2.next;    \\n        }\\n        p1 = p1.next;\\n    }\\n    <span class=\\\"hljs-comment\\\">// 当长度为n的链表要求删除倒数第n个节点时，p2始终呆在头节点，所以直接返回头节点的next</span>\\n    <span class=\\\"hljs-keyword\\\">if</span> (p2 == head) {\\n        <span class=\\\"hljs-keyword\\\">return</span> head.next;\\n    }\\n    pre.next = p2.next;\\n    <span class=\\\"hljs-keyword\\\">return</span> head;\\n}\\n</code></pre>\\n<h3 id=\\\"20-valid-parentheses\\\">20. Valid Parentheses</h3>\\n<p>Given a string containing just the characters <code>&#39;(&#39;</code>, <code>&#39;)&#39;</code>, <code>&#39;{&#39;</code>, <code>&#39;}&#39;</code>, <code>&#39;[&#39;</code> and <code>&#39;]&#39;</code>, determine if the input string is valid.</p>\\n<p>An input string is valid if:</p>\\n<ol>\\n<li>Open brackets must be closed by the same type of brackets.</li>\\n<li>Open brackets must be closed in the correct order.</li>\\n</ol>\\n<p>Note that an empty string is also considered valid.</p>\\n<p><strong>Example 1:</strong></p>\\n<pre><code>Input: &quot;()&quot;\\nOutput: true\\n</code></pre>\\n<p><strong>Example 2:</strong></p>\\n<pre><code>Input: &quot;()[]{}&quot;\\nOutput: true\\n</code></pre>\\n<p><strong>Example 3:</strong></p>\\n<pre><code>Input: &quot;(]&quot;\\nOutput: false\\n</code></pre>\\n<p><strong>Example 4:</strong></p>\\n<pre><code>Input: &quot;([)]&quot;\\nOutput: false\\n</code></pre>\\n<p><strong>Example 5:</strong></p>\\n<pre><code>Input: &quot;{[]}&quot;\\nOutput: true\\n</code></pre>\\n<h4 id=\\\"stack\\\">Stack</h4>\\n<p>没什么说的，和数据结构书上的表达式求值是一样的，比书上的简单</p>\\n<pre><code class=\\\"hljs language-java\\\"><span class=\\\"hljs-keyword\\\">public</span> <span class=\\\"hljs-type\\\">boolean</span> <span class=\\\"hljs-title function_\\\">isValid</span><span class=\\\"hljs-params\\\">(String s)</span> {\\n    <span class=\\\"hljs-keyword\\\">if</span> (s.isEmpty()) {\\n        <span class=\\\"hljs-keyword\\\">return</span> <span class=\\\"hljs-literal\\\">true</span>;\\n    }\\n    Stack&lt;Character&gt; stack = <span class=\\\"hljs-keyword\\\">new</span> <span class=\\\"hljs-title class_\\\">Stack</span>&lt;&gt;();\\n    <span class=\\\"hljs-keyword\\\">for</span> (<span class=\\\"hljs-type\\\">char</span> c : s.toCharArray()) {\\n        <span class=\\\"hljs-keyword\\\">if</span> (isBegin(c)) {\\n            stack.push(c);\\n        } <span class=\\\"hljs-keyword\\\">else</span> {\\n            <span class=\\\"hljs-keyword\\\">if</span> (stack.isEmpty()) {\\n                <span class=\\\"hljs-keyword\\\">return</span> <span class=\\\"hljs-literal\\\">false</span>;\\n            }\\n            <span class=\\\"hljs-type\\\">Character</span> <span class=\\\"hljs-variable\\\">begin</span> <span class=\\\"hljs-operator\\\">=</span> stack.pop();\\n            <span class=\\\"hljs-keyword\\\">if</span> (!isPair(begin, c)) {\\n                <span class=\\\"hljs-keyword\\\">return</span> <span class=\\\"hljs-literal\\\">false</span>;\\n            }\\n        }\\n    }\\n    <span class=\\\"hljs-keyword\\\">return</span> stack.empty();\\n}\\n\\n<span class=\\\"hljs-keyword\\\">public</span> <span class=\\\"hljs-type\\\">boolean</span> <span class=\\\"hljs-title function_\\\">isBegin</span><span class=\\\"hljs-params\\\">(<span class=\\\"hljs-type\\\">char</span> a)</span> {\\n    <span class=\\\"hljs-type\\\">return</span> <span class=\\\"hljs-variable\\\">a</span> <span class=\\\"hljs-operator\\\">=</span>= <span class=\\\"hljs-string\\\">&#x27;(&#x27;</span> || a == <span class=\\\"hljs-string\\\">&#x27;[&#x27;</span> || a == <span class=\\\"hljs-string\\\">&#x27;{&#x27;</span>;\\n}\\n\\n<span class=\\\"hljs-keyword\\\">public</span> <span class=\\\"hljs-type\\\">boolean</span> <span class=\\\"hljs-title function_\\\">isPair</span><span class=\\\"hljs-params\\\">(<span class=\\\"hljs-type\\\">char</span> begin, <span class=\\\"hljs-type\\\">char</span> end)</span> {\\n    <span class=\\\"hljs-keyword\\\">if</span> (begin == <span class=\\\"hljs-string\\\">&#x27;(&#x27;</span>) {\\n        <span class=\\\"hljs-type\\\">return</span> <span class=\\\"hljs-variable\\\">end</span> <span class=\\\"hljs-operator\\\">=</span>= <span class=\\\"hljs-string\\\">&#x27;)&#x27;</span>;\\n    } <span class=\\\"hljs-keyword\\\">else</span> <span class=\\\"hljs-keyword\\\">if</span> (begin == <span class=\\\"hljs-string\\\">&#x27;[&#x27;</span>) {\\n        <span class=\\\"hljs-type\\\">return</span> <span class=\\\"hljs-variable\\\">end</span> <span class=\\\"hljs-operator\\\">=</span>= <span class=\\\"hljs-string\\\">&#x27;]&#x27;</span>;\\n    } <span class=\\\"hljs-keyword\\\">else</span> {\\n        <span class=\\\"hljs-type\\\">return</span> <span class=\\\"hljs-variable\\\">end</span> <span class=\\\"hljs-operator\\\">=</span>= <span class=\\\"hljs-string\\\">&#x27;}&#x27;</span>;\\n    }\\n}\\n</code></pre>\\n\";","export default \"<p><div class=\\\"saying mb-4\\\"><div class=\\\"saying-quote saying-left-quote\\\">“</div><div class=\\\"saying-quote saying-right-quote\\\">”</div></p>\\n<p>Lookups：让你的配置更灵活</p>\\n<p></div></p>\\n<!-- more -->\\n\\n<h3 id=\\\"lookups\\\">Lookups</h3>\\n<p>Lookups使得我们可以自由地在Log4j2配置文件中添加某些值（使用占位符设置变量），它们是一种特殊类型的插件，并且实现了StrLookup接口。</p>\\n<h4 id=\\\"contextmap-lookup\\\">ContextMap Lookup</h4>\\n<p>ContextMapLookup使得我们可以在Log4j2的ThreadContext Map中保存值，并在Log4j2的配置文件中可以取得值。</p>\\n<p><strong>引用方法：<code><span class=\\\"katex-display katexp\\\"><span class=\\\"katex-error\\\" title=\\\"ParseError: KaTeX parse error: Expected &#x27;EOF&#x27;, got &#x27;&amp;&#x27; at position 126: …=&quot;hljs-string&quot;&gt;&amp;̲quot;aaa&amp;quot;&lt;…\\\" style=\\\"color:#cc0000\\\">{ctx:KEY}&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt;\\n&lt;p&gt;代码中写：&lt;/p&gt;\\n&lt;pre&gt;&lt;code class=&quot;hljs language-java&quot;&gt;ThreadContext.put(&lt;span class=&quot;hljs-string&quot;&gt;&amp;quot;aaa&amp;quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&amp;quot;bbb&amp;quot;&lt;/span&gt;);\\n&lt;/code&gt;&lt;/pre&gt;\\n&lt;p&gt;配置示例：&lt;/p&gt;\\n&lt;pre&gt;&lt;code class=&quot;hljs language-xml&quot;&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;PatternLayout&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;pattern&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&amp;quot;</span></span>{ctx:aaa} %d{HH:mm:ss.SSS} [%t] %-5level - %msg%n&quot;</span> /&gt;</span>\\n</code></pre>\\n<p>输出：</p>\\n<pre><code class=\\\"hljs language-console\\\">bbb  log4j2test.Main 19 15:20:07.859 [main] INFO  - info level\\n</code></pre>\\n<h4 id=\\\"date-lookup\\\">Date Lookup</h4>\\n<p>DateLookUp跟其它lookups不太一样，它并非根据一个关键字变量去获取一个值的，但它可以利用关键字来指定一种格式，且为SimpleDateFormat合法的格式。以下示例表示当前日志事件产生的时间：</p>\\n<p><strong>引用方法：<code><span class=\\\"katex-display katexp\\\"><span class=\\\"katex-error\\\" title=\\\"ParseError: KaTeX parse error: Expected &#x27;EOF&#x27;, got &#x27;&amp;&#x27; at position 118: …ass=&quot;hljs-tag&quot;&gt;&amp;̲lt;&lt;span class=…\\\" style=\\\"color:#cc0000\\\">{date:SimpleDateFormat}&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt;\\n&lt;p&gt;配置示例：&lt;/p&gt;\\n&lt;pre&gt;&lt;code class=&quot;hljs language-xml&quot;&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;PatternLayout&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;pattern&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&amp;quot;</span></span>{ctx:aaa} <span class=\\\"katex-display katexp\\\"><span class=\\\"katex-display\\\"><span class=\\\"katex\\\"><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:1em;vertical-align:-0.25em;\\\"></span><span class=\\\"mord\\\"><span class=\\\"mord mathnormal\\\">d</span><span class=\\\"mord mathnormal\\\">a</span><span class=\\\"mord mathnormal\\\">t</span><span class=\\\"mord mathnormal\\\">e</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2778em;\\\"></span><span class=\\\"mrel\\\">:</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2778em;\\\"></span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.08125em;\\\">HH</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2778em;\\\"></span><span class=\\\"mrel\\\">:</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2778em;\\\"></span><span class=\\\"mord mathnormal\\\">mm</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2778em;\\\"></span><span class=\\\"mrel\\\">:</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2778em;\\\"></span><span class=\\\"mord mathnormal\\\">ss</span><span class=\\\"mord\\\">.</span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.05764em;\\\">SSS</span></span><span class=\\\"mopen\\\">[</span><span class=\\\"mrel\\\">&lt;</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2778em;\\\"></span></span><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:1em;vertical-align:-0.25em;\\\"></span><span class=\\\"mord\\\">/</span><span class=\\\"mord mathnormal\\\">co</span><span class=\\\"mord mathnormal\\\">d</span><span class=\\\"mord mathnormal\\\">e</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2778em;\\\"></span><span class=\\\"mrel\\\">&gt;&lt;</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2778em;\\\"></span></span><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:1em;vertical-align:-0.25em;\\\"></span><span class=\\\"mord\\\">/</span><span class=\\\"mord mathnormal\\\">p</span><span class=\\\"mord mathnormal\\\">re</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2778em;\\\"></span><span class=\\\"mrel\\\">&gt;&lt;</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2778em;\\\"></span></span><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.6944em;\\\"></span><span class=\\\"mord mathnormal\\\">h</span><span class=\\\"mord\\\">4</span><span class=\\\"mord mathnormal\\\">i</span><span class=\\\"mord mathnormal\\\">d</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2778em;\\\"></span><span class=\\\"mrel\\\">=</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2778em;\\\"></span></span><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.7778em;vertical-align:-0.0833em;\\\"></span><span class=\\\"mord\\\">&quot;</span><span class=\\\"mord mathnormal\\\">e</span><span class=\\\"mord mathnormal\\\">n</span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.03588em;\\\">v</span><span class=\\\"mord mathnormal\\\">i</span><span class=\\\"mord mathnormal\\\">ro</span><span class=\\\"mord mathnormal\\\">nm</span><span class=\\\"mord mathnormal\\\">e</span><span class=\\\"mord mathnormal\\\">n</span><span class=\\\"mord mathnormal\\\">t</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2222em;\\\"></span><span class=\\\"mbin\\\">−</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2222em;\\\"></span></span><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.8889em;vertical-align:-0.1944em;\\\"></span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.01968em;\\\">l</span><span class=\\\"mord mathnormal\\\">oo</span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.03148em;\\\">k</span><span class=\\\"mord mathnormal\\\">u</span><span class=\\\"mord mathnormal\\\">p</span><span class=\\\"mord\\\">&quot;</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2778em;\\\"></span><span class=\\\"mrel\\\">&gt;</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2778em;\\\"></span></span><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.8889em;vertical-align:-0.1944em;\\\"></span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.05764em;\\\">E</span><span class=\\\"mord mathnormal\\\">n</span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.03588em;\\\">v</span><span class=\\\"mord mathnormal\\\">i</span><span class=\\\"mord mathnormal\\\">ro</span><span class=\\\"mord mathnormal\\\">nm</span><span class=\\\"mord mathnormal\\\">e</span><span class=\\\"mord mathnormal\\\">n</span><span class=\\\"mord mathnormal\\\">t</span><span class=\\\"mord mathnormal\\\">L</span><span class=\\\"mord mathnormal\\\">oo</span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.03148em;\\\">k</span><span class=\\\"mord mathnormal\\\">u</span><span class=\\\"mord mathnormal\\\">p</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2778em;\\\"></span><span class=\\\"mrel\\\">&lt;</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2778em;\\\"></span></span><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:1em;vertical-align:-0.25em;\\\"></span><span class=\\\"mord\\\">/</span><span class=\\\"mord mathnormal\\\">h</span><span class=\\\"mord\\\">4</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2778em;\\\"></span><span class=\\\"mrel\\\">&gt;&lt;</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2778em;\\\"></span></span><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.7335em;vertical-align:-0.1944em;\\\"></span><span class=\\\"mord mathnormal\\\">p</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2778em;\\\"></span><span class=\\\"mrel\\\">&gt;</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2778em;\\\"></span></span><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.7224em;vertical-align:-0.0391em;\\\"></span><span class=\\\"mord cjk_fallback\\\">输出系统中的环境变量，无论是全局变量文件</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2778em;\\\"></span><span class=\\\"mrel\\\">&lt;</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2778em;\\\"></span></span><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.7335em;vertical-align:-0.0391em;\\\"></span><span class=\\\"mord mathnormal\\\">co</span><span class=\\\"mord mathnormal\\\">d</span><span class=\\\"mord mathnormal\\\">e</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2778em;\\\"></span><span class=\\\"mrel\\\">&gt;</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2778em;\\\"></span></span><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:1em;vertical-align:-0.25em;\\\"></span><span class=\\\"mord\\\">/</span><span class=\\\"mord mathnormal\\\">e</span><span class=\\\"mord mathnormal\\\">t</span><span class=\\\"mord mathnormal\\\">c</span><span class=\\\"mord\\\">/</span><span class=\\\"mord mathnormal\\\">p</span><span class=\\\"mord mathnormal\\\">ro</span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.10764em;\\\">f</span><span class=\\\"mord mathnormal\\\">i</span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.01968em;\\\">l</span><span class=\\\"mord mathnormal\\\">e</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2778em;\\\"></span><span class=\\\"mrel\\\">&lt;</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2778em;\\\"></span></span><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:1em;vertical-align:-0.25em;\\\"></span><span class=\\\"mord\\\">/</span><span class=\\\"mord mathnormal\\\">co</span><span class=\\\"mord mathnormal\\\">d</span><span class=\\\"mord mathnormal\\\">e</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2778em;\\\"></span><span class=\\\"mrel\\\">&gt;</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2778em;\\\"></span></span><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.7224em;vertical-align:-0.0391em;\\\"></span><span class=\\\"mord cjk_fallback\\\">中的，还是运行时定义的变量。</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2778em;\\\"></span><span class=\\\"mrel\\\">&lt;</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2778em;\\\"></span></span><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:1em;vertical-align:-0.25em;\\\"></span><span class=\\\"mord\\\">/</span><span class=\\\"mord mathnormal\\\">p</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2778em;\\\"></span><span class=\\\"mrel\\\">&gt;&lt;</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2778em;\\\"></span></span><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.7335em;vertical-align:-0.1944em;\\\"></span><span class=\\\"mord mathnormal\\\">p</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2778em;\\\"></span><span class=\\\"mrel\\\">&gt;&lt;</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2778em;\\\"></span></span><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.8095em;vertical-align:-0.1944em;\\\"></span><span class=\\\"mord mathnormal\\\">s</span><span class=\\\"mord mathnormal\\\">t</span><span class=\\\"mord mathnormal\\\">ro</span><span class=\\\"mord mathnormal\\\">n</span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.03588em;\\\">g</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2778em;\\\"></span><span class=\\\"mrel\\\">&gt;</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2778em;\\\"></span></span><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.7224em;vertical-align:-0.0391em;\\\"></span><span class=\\\"mord cjk_fallback\\\">引用方法：</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2778em;\\\"></span><span class=\\\"mrel\\\">&lt;</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2778em;\\\"></span></span><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.7335em;vertical-align:-0.0391em;\\\"></span><span class=\\\"mord mathnormal\\\">co</span><span class=\\\"mord mathnormal\\\">d</span><span class=\\\"mord mathnormal\\\">e</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2778em;\\\"></span><span class=\\\"mrel\\\">&gt;</span></span></span></span></span></span>{env:KEY}</code></strong></p>\\n<p>配置示例：</p>\\n<pre><code class=\\\"hljs language-xml\\\"><span class=\\\"hljs-tag\\\">&lt;<span class=\\\"hljs-name\\\">PatternLayout</span> <span class=\\\"hljs-attr\\\">pattern</span>=<span class=\\\"hljs-string\\\">&quot;<span class=\\\"katex-display katexp\\\"><span class=\\\"katex-display\\\"><span class=\\\"katex\\\"><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:1em;vertical-align:-0.25em;\\\"></span><span class=\\\"mord\\\"><span class=\\\"mord mathnormal\\\">e</span><span class=\\\"mord mathnormal\\\">n</span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.03588em;\\\">v</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2778em;\\\"></span><span class=\\\"mrel\\\">:</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2778em;\\\"></span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.10903em;\\\">U</span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.00773em;\\\">SER</span></span><span class=\\\"mopen\\\">[</span><span class=\\\"mrel\\\">&lt;</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2778em;\\\"></span></span><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:1em;vertical-align:-0.25em;\\\"></span><span class=\\\"mord\\\">/</span><span class=\\\"mord mathnormal\\\">co</span><span class=\\\"mord mathnormal\\\">d</span><span class=\\\"mord mathnormal\\\">e</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2778em;\\\"></span><span class=\\\"mrel\\\">&gt;&lt;</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2778em;\\\"></span></span><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:1em;vertical-align:-0.25em;\\\"></span><span class=\\\"mord\\\">/</span><span class=\\\"mord mathnormal\\\">p</span><span class=\\\"mord mathnormal\\\">re</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2778em;\\\"></span><span class=\\\"mrel\\\">&gt;&lt;</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2778em;\\\"></span></span><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.6944em;\\\"></span><span class=\\\"mord mathnormal\\\">h</span><span class=\\\"mord\\\">4</span><span class=\\\"mord mathnormal\\\">i</span><span class=\\\"mord mathnormal\\\">d</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2778em;\\\"></span><span class=\\\"mrel\\\">=</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2778em;\\\"></span></span><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.8889em;vertical-align:-0.1944em;\\\"></span><span class=\\\"mord\\\">&quot;</span><span class=\\\"mord mathnormal\\\">ja</span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.03588em;\\\">v</span><span class=\\\"mord mathnormal\\\">a</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2222em;\\\"></span><span class=\\\"mbin\\\">−</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2222em;\\\"></span></span><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.8889em;vertical-align:-0.1944em;\\\"></span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.01968em;\\\">l</span><span class=\\\"mord mathnormal\\\">oo</span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.03148em;\\\">k</span><span class=\\\"mord mathnormal\\\">u</span><span class=\\\"mord mathnormal\\\">p</span><span class=\\\"mord\\\">&quot;</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2778em;\\\"></span><span class=\\\"mrel\\\">&gt;</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2778em;\\\"></span></span><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.8889em;vertical-align:-0.1944em;\\\"></span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.09618em;\\\">J</span><span class=\\\"mord mathnormal\\\">a</span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.03588em;\\\">v</span><span class=\\\"mord mathnormal\\\">a</span><span class=\\\"mord mathnormal\\\">L</span><span class=\\\"mord mathnormal\\\">oo</span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.03148em;\\\">k</span><span class=\\\"mord mathnormal\\\">u</span><span class=\\\"mord mathnormal\\\">p</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2778em;\\\"></span><span class=\\\"mrel\\\">&lt;</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2778em;\\\"></span></span><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:1em;vertical-align:-0.25em;\\\"></span><span class=\\\"mord\\\">/</span><span class=\\\"mord mathnormal\\\">h</span><span class=\\\"mord\\\">4</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2778em;\\\"></span><span class=\\\"mrel\\\">&gt;&lt;</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2778em;\\\"></span></span><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.7335em;vertical-align:-0.1944em;\\\"></span><span class=\\\"mord mathnormal\\\">p</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2778em;\\\"></span><span class=\\\"mrel\\\">&gt;</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2778em;\\\"></span></span><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.7224em;vertical-align:-0.0391em;\\\"></span><span class=\\\"mord cjk_fallback\\\">输出一些</span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.09618em;\\\">J</span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.22222em;\\\">V</span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.10903em;\\\">M</span><span class=\\\"mord cjk_fallback\\\">信息：</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2778em;\\\"></span><span class=\\\"mrel\\\">&lt;</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2778em;\\\"></span></span><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:1em;vertical-align:-0.25em;\\\"></span><span class=\\\"mord\\\">/</span><span class=\\\"mord mathnormal\\\">p</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2778em;\\\"></span><span class=\\\"mrel\\\">&gt;&lt;</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2778em;\\\"></span></span><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.7335em;vertical-align:-0.0391em;\\\"></span><span class=\\\"mord mathnormal\\\">u</span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.01968em;\\\">l</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2778em;\\\"></span><span class=\\\"mrel\\\">&gt;&lt;</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2778em;\\\"></span></span><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.7335em;vertical-align:-0.0391em;\\\"></span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.01968em;\\\">l</span><span class=\\\"mord mathnormal\\\">i</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2778em;\\\"></span><span class=\\\"mrel\\\">&gt;</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2778em;\\\"></span></span><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.7224em;vertical-align:-0.0391em;\\\"></span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.03588em;\\\">v</span><span class=\\\"mord mathnormal\\\">ers</span><span class=\\\"mord mathnormal\\\">i</span><span class=\\\"mord mathnormal\\\">o</span><span class=\\\"mord mathnormal\\\">n</span><span class=\\\"mord cjk_fallback\\\">：</span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.09618em;\\\">J</span><span class=\\\"mord mathnormal\\\">a</span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.03588em;\\\">v</span><span class=\\\"mord mathnormal\\\">a</span><span class=\\\"mord cjk_fallback\\\">版本</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2778em;\\\"></span><span class=\\\"mrel\\\">&lt;</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2778em;\\\"></span></span><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:1em;vertical-align:-0.25em;\\\"></span><span class=\\\"mord\\\">/</span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.01968em;\\\">l</span><span class=\\\"mord mathnormal\\\">i</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2778em;\\\"></span><span class=\\\"mrel\\\">&gt;&lt;</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2778em;\\\"></span></span><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.7335em;vertical-align:-0.0391em;\\\"></span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.01968em;\\\">l</span><span class=\\\"mord mathnormal\\\">i</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2778em;\\\"></span><span class=\\\"mrel\\\">&gt;</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2778em;\\\"></span></span><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.7224em;vertical-align:-0.0391em;\\\"></span><span class=\\\"mord mathnormal\\\">re</span><span class=\\\"mord mathnormal\\\">n</span><span class=\\\"mord mathnormal\\\">t</span><span class=\\\"mord mathnormal\\\">im</span><span class=\\\"mord mathnormal\\\">e</span><span class=\\\"mord cjk_fallback\\\">：</span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.09618em;\\\">J</span><span class=\\\"mord mathnormal\\\">a</span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.03588em;\\\">v</span><span class=\\\"mord mathnormal\\\">a</span><span class=\\\"mord cjk_fallback\\\">运行时版本信息</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2778em;\\\"></span><span class=\\\"mrel\\\">&lt;</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2778em;\\\"></span></span><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:1em;vertical-align:-0.25em;\\\"></span><span class=\\\"mord\\\">/</span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.01968em;\\\">l</span><span class=\\\"mord mathnormal\\\">i</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2778em;\\\"></span><span class=\\\"mrel\\\">&gt;&lt;</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2778em;\\\"></span></span><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.7335em;vertical-align:-0.0391em;\\\"></span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.01968em;\\\">l</span><span class=\\\"mord mathnormal\\\">i</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2778em;\\\"></span><span class=\\\"mrel\\\">&gt;</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2778em;\\\"></span></span><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.7224em;vertical-align:-0.0391em;\\\"></span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.03588em;\\\">v</span><span class=\\\"mord mathnormal\\\">m</span><span class=\\\"mord cjk_fallback\\\">：虚拟机版本</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2778em;\\\"></span><span class=\\\"mrel\\\">&lt;</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2778em;\\\"></span></span><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:1em;vertical-align:-0.25em;\\\"></span><span class=\\\"mord\\\">/</span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.01968em;\\\">l</span><span class=\\\"mord mathnormal\\\">i</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2778em;\\\"></span><span class=\\\"mrel\\\">&gt;&lt;</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2778em;\\\"></span></span><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.7335em;vertical-align:-0.0391em;\\\"></span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.01968em;\\\">l</span><span class=\\\"mord mathnormal\\\">i</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2778em;\\\"></span><span class=\\\"mrel\\\">&gt;</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2778em;\\\"></span></span><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.7224em;vertical-align:-0.0391em;\\\"></span><span class=\\\"mord mathnormal\\\">os</span><span class=\\\"mord cjk_fallback\\\">：操作系统版本</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2778em;\\\"></span><span class=\\\"mrel\\\">&lt;</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2778em;\\\"></span></span><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:1em;vertical-align:-0.25em;\\\"></span><span class=\\\"mord\\\">/</span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.01968em;\\\">l</span><span class=\\\"mord mathnormal\\\">i</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2778em;\\\"></span><span class=\\\"mrel\\\">&gt;&lt;</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2778em;\\\"></span></span><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.7335em;vertical-align:-0.0391em;\\\"></span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.01968em;\\\">l</span><span class=\\\"mord mathnormal\\\">i</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2778em;\\\"></span><span class=\\\"mrel\\\">&gt;</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2778em;\\\"></span></span><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.8889em;vertical-align:-0.1944em;\\\"></span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.01968em;\\\">l</span><span class=\\\"mord mathnormal\\\">oc</span><span class=\\\"mord mathnormal\\\">a</span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.01968em;\\\">l</span><span class=\\\"mord mathnormal\\\">e</span><span class=\\\"mord cjk_fallback\\\">：一些硬件信息如：</span><span class=\\\"mord mathnormal\\\">d</span><span class=\\\"mord mathnormal\\\">e</span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.10764em;\\\">f</span><span class=\\\"mord mathnormal\\\">a</span><span class=\\\"mord mathnormal\\\">u</span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.01968em;\\\">ltl</span><span class=\\\"mord mathnormal\\\">oc</span><span class=\\\"mord mathnormal\\\">a</span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.01968em;\\\">l</span><span class=\\\"mord mathnormal\\\">e</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2778em;\\\"></span><span class=\\\"mrel\\\">:</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2778em;\\\"></span></span><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.8889em;vertical-align:-0.1944em;\\\"></span><span class=\\\"mord mathnormal\\\">e</span><span class=\\\"mord\\\"><span class=\\\"mord mathnormal\\\">n</span><span class=\\\"msupsub\\\"><span class=\\\"vlist-t vlist-t2\\\"><span class=\\\"vlist-r\\\"><span class=\\\"vlist\\\" style=\\\"height:0.3283em;\\\"><span style=\\\"top:-2.55em;margin-left:0em;margin-right:0.05em;\\\"><span class=\\\"pstrut\\\" style=\\\"height:2.7em;\\\"></span><span class=\\\"sizing reset-size6 size3 mtight\\\"><span class=\\\"mord mathnormal mtight\\\" style=\\\"margin-right:0.10903em;\\\">U</span></span></span></span><span class=\\\"vlist-s\\\">​</span></span><span class=\\\"vlist-r\\\"><span class=\\\"vlist\\\" style=\\\"height:0.15em;\\\"><span></span></span></span></span></span></span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.05764em;\\\">S</span><span class=\\\"mpunct\\\">,</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.1667em;\\\"></span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.01968em;\\\">pl</span><span class=\\\"mord mathnormal\\\">a</span><span class=\\\"mord mathnormal\\\">t</span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.10764em;\\\">f</span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.02778em;\\\">or</span><span class=\\\"mord mathnormal\\\">m</span><span class=\\\"mord mathnormal\\\">e</span><span class=\\\"mord mathnormal\\\">n</span><span class=\\\"mord mathnormal\\\">co</span><span class=\\\"mord mathnormal\\\">d</span><span class=\\\"mord mathnormal\\\">in</span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.03588em;\\\">g</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2778em;\\\"></span><span class=\\\"mrel\\\">:</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2778em;\\\"></span></span><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.8778em;vertical-align:-0.1944em;\\\"></span><span class=\\\"mord mathnormal\\\">Cp</span><span class=\\\"mord\\\">1252</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2778em;\\\"></span><span class=\\\"mrel\\\">&lt;</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2778em;\\\"></span></span><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:1em;vertical-align:-0.25em;\\\"></span><span class=\\\"mord\\\">/</span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.01968em;\\\">l</span><span class=\\\"mord mathnormal\\\">i</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2778em;\\\"></span><span class=\\\"mrel\\\">&gt;&lt;</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2778em;\\\"></span></span><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.7335em;vertical-align:-0.0391em;\\\"></span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.01968em;\\\">l</span><span class=\\\"mord mathnormal\\\">i</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2778em;\\\"></span><span class=\\\"mrel\\\">&gt;</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2778em;\\\"></span></span><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.8889em;vertical-align:-0.1944em;\\\"></span><span class=\\\"mord mathnormal\\\">h</span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.02691em;\\\">w</span><span class=\\\"mord cjk_fallback\\\">：一些硬件信息如：</span><span class=\\\"mord mathnormal\\\">p</span><span class=\\\"mord mathnormal\\\">rocessors</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2778em;\\\"></span><span class=\\\"mrel\\\">:</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2778em;\\\"></span></span><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.8889em;vertical-align:-0.1944em;\\\"></span><span class=\\\"mord\\\">4</span><span class=\\\"mpunct\\\">,</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.1667em;\\\"></span><span class=\\\"mord mathnormal\\\">a</span><span class=\\\"mord mathnormal\\\">rc</span><span class=\\\"mord mathnormal\\\">hi</span><span class=\\\"mord mathnormal\\\">t</span><span class=\\\"mord mathnormal\\\">ec</span><span class=\\\"mord mathnormal\\\">t</span><span class=\\\"mord mathnormal\\\">u</span><span class=\\\"mord mathnormal\\\">re</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2778em;\\\"></span><span class=\\\"mrel\\\">:</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2778em;\\\"></span></span><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.7778em;vertical-align:-0.0833em;\\\"></span><span class=\\\"mord mathnormal\\\">am</span><span class=\\\"mord mathnormal\\\">d</span><span class=\\\"mord\\\">64</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2222em;\\\"></span><span class=\\\"mbin\\\">−</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2222em;\\\"></span></span><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.854em;vertical-align:-0.1944em;\\\"></span><span class=\\\"mord\\\">64</span><span class=\\\"mpunct\\\">,</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.1667em;\\\"></span><span class=\\\"mord mathnormal\\\">in</span><span class=\\\"mord mathnormal\\\">s</span><span class=\\\"mord mathnormal\\\">t</span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.02778em;\\\">r</span><span class=\\\"mord mathnormal\\\">u</span><span class=\\\"mord mathnormal\\\">c</span><span class=\\\"mord mathnormal\\\">t</span><span class=\\\"mord mathnormal\\\">i</span><span class=\\\"mord mathnormal\\\">o</span><span class=\\\"mord mathnormal\\\">n</span><span class=\\\"mord mathnormal\\\">se</span><span class=\\\"mord mathnormal\\\">t</span><span class=\\\"mord mathnormal\\\">s</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2778em;\\\"></span><span class=\\\"mrel\\\">:</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2778em;\\\"></span></span><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.7335em;vertical-align:-0.0391em;\\\"></span><span class=\\\"mord mathnormal\\\">am</span><span class=\\\"mord mathnormal\\\">d</span><span class=\\\"mord\\\">64</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2778em;\\\"></span><span class=\\\"mrel\\\">&lt;</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2778em;\\\"></span></span><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:1em;vertical-align:-0.25em;\\\"></span><span class=\\\"mord\\\">/</span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.01968em;\\\">l</span><span class=\\\"mord mathnormal\\\">i</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2778em;\\\"></span><span class=\\\"mrel\\\">&gt;&lt;</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2778em;\\\"></span></span><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:1em;vertical-align:-0.25em;\\\"></span><span class=\\\"mord\\\">/</span><span class=\\\"mord mathnormal\\\">u</span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.01968em;\\\">l</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2778em;\\\"></span><span class=\\\"mrel\\\">&gt;&lt;</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2778em;\\\"></span></span><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.7335em;vertical-align:-0.1944em;\\\"></span><span class=\\\"mord mathnormal\\\">p</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2778em;\\\"></span><span class=\\\"mrel\\\">&gt;&lt;</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2778em;\\\"></span></span><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.8095em;vertical-align:-0.1944em;\\\"></span><span class=\\\"mord mathnormal\\\">s</span><span class=\\\"mord mathnormal\\\">t</span><span class=\\\"mord mathnormal\\\">ro</span><span class=\\\"mord mathnormal\\\">n</span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.03588em;\\\">g</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2778em;\\\"></span><span class=\\\"mrel\\\">&gt;</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2778em;\\\"></span></span><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.7224em;vertical-align:-0.0391em;\\\"></span><span class=\\\"mord cjk_fallback\\\">引用方法：</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2778em;\\\"></span><span class=\\\"mrel\\\">&lt;</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2778em;\\\"></span></span><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.7335em;vertical-align:-0.0391em;\\\"></span><span class=\\\"mord mathnormal\\\">co</span><span class=\\\"mord mathnormal\\\">d</span><span class=\\\"mord mathnormal\\\">e</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2778em;\\\"></span><span class=\\\"mrel\\\">&gt;</span></span></span></span></span></span>{java:KEY}</code></strong></p>\\n<p>配置示例：</p>\\n<pre><code class=\\\"hljs language-xml\\\"><span class=\\\"hljs-tag\\\">&lt;<span class=\\\"hljs-name\\\">PatternLayout</span> <span class=\\\"hljs-attr\\\">header</span>=<span class=\\\"hljs-string\\\">&quot;${java:runtime} - ${java:vm} - ${java:os}&quot;</span>&gt;</span>\\n  <span class=\\\"hljs-tag\\\">&lt;<span class=\\\"hljs-name\\\">Pattern</span>&gt;</span>%d %m%n<span class=\\\"hljs-tag\\\">&lt;/<span class=\\\"hljs-name\\\">Pattern</span>&gt;</span>\\n<span class=\\\"hljs-tag\\\">&lt;/<span class=\\\"hljs-name\\\">PatternLayout</span>&gt;</span>\\n</code></pre>\\n<h4 id=\\\"system-properties-lookup\\\">System Properties Lookup</h4>\\n<p>获取系统属性的值</p>\\n<p><strong>引用方法：<code>$${sys:KEY}</code></strong></p>\\n<p>配置示例：</p>\\n<pre><code class=\\\"hljs language-xml\\\"><span class=\\\"hljs-tag\\\">&lt;<span class=\\\"hljs-name\\\">Appenders</span>&gt;</span>\\n  <span class=\\\"hljs-tag\\\">&lt;<span class=\\\"hljs-name\\\">File</span> <span class=\\\"hljs-attr\\\">name</span>=<span class=\\\"hljs-string\\\">&quot;ApplicationLog&quot;</span> <span class=\\\"hljs-attr\\\">fileName</span>=<span class=\\\"hljs-string\\\">&quot;${sys:logPath}/app.log&quot;</span>/&gt;</span>\\n<span class=\\\"hljs-tag\\\">&lt;/<span class=\\\"hljs-name\\\">Appenders</span>&gt;</span>\\n</code></pre>\\n\";","export default \"<h3 id=\\\"26-remove-duplicated-from-sorted-arrayeasy\\\">26. Remove Duplicated From Sorted Array(Easy)</h3>\\n<p>Given a sorted array <em>nums</em>, remove the duplicates <a href=\\\"https://en.wikipedia.org/wiki/In-place_algorithm\\\"><strong>in-place</strong></a> such that each element appear only <em>once</em> and return the new length.</p>\\n<p>Do not allocate extra space for another array, you must do this by <strong>modifying the input array in-place</strong> with O(1) extra memory.</p>\\n<p><strong>Example 1:</strong></p>\\n<pre><code>Given nums = [1,1,2],\\n\\nYour function should return length = 2, with the first two elements of nums being 1 and 2 respectively.\\n\\nIt doesn&#x27;t matter what you leave beyond the returned length.\\n</code></pre>\\n<p><strong>Example 2:</strong></p>\\n<pre><code>Given nums = [0,0,1,1,1,2,2,3,3,4],\\n\\nYour function should return length = 5, with the first five elements of nums being modified to 0, 1, 2, 3, and 4 respectively.\\n\\nIt doesn&#x27;t matter what values are set beyond the returned length.\\n</code></pre>\\n<p><strong>Clarification:</strong></p>\\n<p>Confused why the returned value is an integer but your answer is an array?</p>\\n<p>Note that the input array is passed in by <strong>reference</strong>, which means modification to the input array will be known to the caller as well.</p>\\n<p>Internally you can think of this:</p>\\n<pre><code class=\\\"hljs language-java\\\"><span class=\\\"hljs-comment\\\">// nums is passed in by reference. (i.e., without making a copy)</span>\\n<span class=\\\"hljs-type\\\">int</span> <span class=\\\"hljs-variable\\\">len</span> <span class=\\\"hljs-operator\\\">=</span> removeDuplicates(nums);\\n\\n<span class=\\\"hljs-comment\\\">// any modification to nums in your function would be known by the caller.</span>\\n<span class=\\\"hljs-comment\\\">// using the length returned by your function, it prints the first len elements.</span>\\n<span class=\\\"hljs-keyword\\\">for</span> (<span class=\\\"hljs-type\\\">int</span> <span class=\\\"hljs-variable\\\">i</span> <span class=\\\"hljs-operator\\\">=</span> <span class=\\\"hljs-number\\\">0</span>; i &lt; len; i++) {\\n    print(nums[i]);\\n}\\n</code></pre>\\n<h4 id=\\\"brute-force\\\">Brute Force</h4>\\n<pre><code class=\\\"hljs language-java\\\"><span class=\\\"hljs-keyword\\\">public</span> <span class=\\\"hljs-type\\\">int</span> <span class=\\\"hljs-title function_\\\">removeDuplicates</span><span class=\\\"hljs-params\\\">(<span class=\\\"hljs-type\\\">int</span>[] nums)</span> {\\n    <span class=\\\"hljs-type\\\">int</span> <span class=\\\"hljs-variable\\\">len</span> <span class=\\\"hljs-operator\\\">=</span> <span class=\\\"hljs-number\\\">0</span>;\\n    <span class=\\\"hljs-type\\\">int</span> <span class=\\\"hljs-variable\\\">range</span> <span class=\\\"hljs-operator\\\">=</span> <span class=\\\"hljs-number\\\">0</span>, set = <span class=\\\"hljs-number\\\">0</span>;\\n    <span class=\\\"hljs-keyword\\\">for</span> (<span class=\\\"hljs-type\\\">int</span> <span class=\\\"hljs-variable\\\">i</span> <span class=\\\"hljs-operator\\\">=</span> <span class=\\\"hljs-number\\\">0</span>; i &lt; nums.length; i++) {\\n        <span class=\\\"hljs-keyword\\\">if</span> (range &lt; nums.length - <span class=\\\"hljs-number\\\">1</span> &&\\n            nums[range] == nums[range + <span class=\\\"hljs-number\\\">1</span>]) {\\n            range++;\\n        } <span class=\\\"hljs-keyword\\\">else</span> {\\n            nums[set] = nums[range];\\n            set++;\\n            range++;\\n            len++;\\n        }\\n    }\\n    <span class=\\\"hljs-keyword\\\">return</span> len;\\n}\\n</code></pre>\\n<h3 id=\\\"27-remove-elementeasy\\\">27. Remove Element(Easy)</h3>\\n<p>Given an array <em>nums</em> and a value <em>val</em>, remove all instances of that value <a href=\\\"https://en.wikipedia.org/wiki/In-place_algorithm\\\"><strong>in-place</strong></a> and return the new length.</p>\\n<p>Do not allocate extra space for another array, you must do this by <strong>modifying the input array in-place</strong> with O(1) extra memory.</p>\\n<p>The order of elements can be changed. It doesn&#39;t matter what you leave beyond the new length.</p>\\n<p><strong>Example 1:</strong></p>\\n<pre><code>Given nums = [3,2,2,3], val = 3,\\n\\nYour function should return length = 2, with the first two elements of nums being 2.\\n\\nIt doesn&#x27;t matter what you leave beyond the returned length.\\n</code></pre>\\n<p><strong>Example 2:</strong></p>\\n<pre><code>Given nums = [0,1,2,2,3,0,4,2], val = 2,\\n\\nYour function should return length = 5, with the first five elements of nums containing 0, 1, 3, 0, and 4.\\n\\nNote that the order of those five elements can be arbitrary.\\n\\nIt doesn&#x27;t matter what values are set beyond the returned length.\\n</code></pre>\\n<p><strong>Clarification:</strong></p>\\n<p>Confused why the returned value is an integer but your answer is an array?</p>\\n<p>Note that the input array is passed in by <strong>reference</strong>, which means modification to the input array will be known to the caller as well.</p>\\n<h4 id=\\\"brute-force-1\\\">Brute Force</h4>\\n<pre><code class=\\\"hljs language-java\\\"><span class=\\\"hljs-keyword\\\">public</span> <span class=\\\"hljs-type\\\">int</span> <span class=\\\"hljs-title function_\\\">removeElement</span><span class=\\\"hljs-params\\\">(<span class=\\\"hljs-type\\\">int</span>[] nums, <span class=\\\"hljs-type\\\">int</span> val)</span> {\\n    <span class=\\\"hljs-type\\\">int</span> <span class=\\\"hljs-variable\\\">len</span> <span class=\\\"hljs-operator\\\">=</span> <span class=\\\"hljs-number\\\">0</span>;\\n    <span class=\\\"hljs-keyword\\\">for</span> (<span class=\\\"hljs-type\\\">int</span> <span class=\\\"hljs-variable\\\">i</span> <span class=\\\"hljs-operator\\\">=</span> <span class=\\\"hljs-number\\\">0</span>; i &lt; nums.length; i++) {\\n        <span class=\\\"hljs-keyword\\\">if</span> (nums[i] != val) {\\n            nums[len++] = nums[i];   \\n        }\\n    }\\n    <span class=\\\"hljs-keyword\\\">return</span> len;\\n}\\n</code></pre>\\n<h3 id=\\\"28-implement-strstr-easy\\\">28. Implement strStr() (Easy)</h3>\\n<p>Implement <a href=\\\"http://www.cplusplus.com/reference/cstring/strstr/\\\">strStr()</a>.</p>\\n<p>Return the index of the first occurrence of needle in haystack, or <strong>-1</strong> if needle is not part of haystack.</p>\\n<p><strong>Example 1:</strong></p>\\n<pre><code>Input: haystack = &quot;hello&quot;, needle = &quot;ll&quot;\\nOutput: 2\\n</code></pre>\\n<p><strong>Example 2:</strong></p>\\n<pre><code>Input: haystack = &quot;aaaaa&quot;, needle = &quot;bba&quot;\\nOutput: -1\\n</code></pre>\\n<p><strong>Clarification:</strong></p>\\n<p>What should we return when <code>needle</code> is an empty string? This is a great question to ask during an interview.</p>\\n<p>For the purpose of this problem, we will return 0 when <code>needle</code> is an empty string. This is consistent to C&#39;s <a href=\\\"http://www.cplusplus.com/reference/cstring/strstr/\\\">strstr()</a> and Java&#39;s <a href=\\\"https://docs.oracle.com/javase/7/docs/api/java/lang/String.html#indexOf(java.lang.String)\\\">indexOf()</a>.</p>\\n<p>这题其实就是字符串匹配，所以没什么多说的，要么暴力解要么kmp，比较遗憾的是，Leetcode的case不够多，于是暴力解的Runtime居然比KMP解的Runtime还要快</p>\\n<h4 id=\\\"brute-force---on--m\\\">Brute Force - O(n * m)</h4>\\n<pre><code class=\\\"hljs language-java\\\"><span class=\\\"hljs-keyword\\\">public</span> <span class=\\\"hljs-type\\\">int</span> <span class=\\\"hljs-title function_\\\">strStr</span><span class=\\\"hljs-params\\\">(String haystack, String needle)</span> {\\n    <span class=\\\"hljs-keyword\\\">if</span> (needle.isEmpty()) {\\n        <span class=\\\"hljs-keyword\\\">return</span> <span class=\\\"hljs-number\\\">0</span>;\\n    }\\n    <span class=\\\"hljs-type\\\">char</span>[] t = haystack.toCharArray();\\n    <span class=\\\"hljs-type\\\">char</span>[] p = needle.toCharArray();\\n    <span class=\\\"hljs-type\\\">int</span> <span class=\\\"hljs-variable\\\">n</span> <span class=\\\"hljs-operator\\\">=</span> t.length;\\n    <span class=\\\"hljs-type\\\">int</span> <span class=\\\"hljs-variable\\\">m</span> <span class=\\\"hljs-operator\\\">=</span> p.length;\\n    <span class=\\\"hljs-keyword\\\">for</span> (<span class=\\\"hljs-type\\\">int</span> <span class=\\\"hljs-variable\\\">i</span> <span class=\\\"hljs-operator\\\">=</span> <span class=\\\"hljs-number\\\">0</span>; i &lt;= n - m; i++){\\n        <span class=\\\"hljs-type\\\">int</span> <span class=\\\"hljs-variable\\\">j</span> <span class=\\\"hljs-operator\\\">=</span> <span class=\\\"hljs-number\\\">0</span>;\\n        <span class=\\\"hljs-keyword\\\">while</span>(j &lt; m && p[j] == t[i + j]){\\n            j++;\\n            <span class=\\\"hljs-keyword\\\">if</span> (j == m) <span class=\\\"hljs-keyword\\\">return</span> i;\\n        }\\n    }\\n    <span class=\\\"hljs-keyword\\\">return</span> -<span class=\\\"hljs-number\\\">1</span>;\\n}\\n</code></pre>\\n<h4 id=\\\"kmp---on--m\\\">KMP - O(n + m)</h4>\\n<pre><code class=\\\"hljs language-java\\\"><span class=\\\"hljs-keyword\\\">public</span> <span class=\\\"hljs-type\\\">int</span> <span class=\\\"hljs-title function_\\\">strStr</span><span class=\\\"hljs-params\\\">(String haystack, String needle)</span> {\\n    <span class=\\\"hljs-keyword\\\">if</span> (needle.isEmpty()) {\\n        <span class=\\\"hljs-keyword\\\">return</span> <span class=\\\"hljs-number\\\">0</span>;\\n    }\\n    <span class=\\\"hljs-keyword\\\">return</span> kmp(haystack.toCharArray(), needle.toCharArray());\\n}\\n\\n<span class=\\\"hljs-keyword\\\">private</span> <span class=\\\"hljs-type\\\">int</span> <span class=\\\"hljs-title function_\\\">kmp</span><span class=\\\"hljs-params\\\">(<span class=\\\"hljs-type\\\">char</span>[] t, <span class=\\\"hljs-type\\\">char</span>[] p)</span> {\\n    <span class=\\\"hljs-type\\\">int</span>[] next = nextVal(p);\\n    <span class=\\\"hljs-type\\\">int</span> <span class=\\\"hljs-variable\\\">i</span> <span class=\\\"hljs-operator\\\">=</span> <span class=\\\"hljs-number\\\">0</span>;\\n    <span class=\\\"hljs-type\\\">int</span> <span class=\\\"hljs-variable\\\">j</span> <span class=\\\"hljs-operator\\\">=</span> <span class=\\\"hljs-number\\\">0</span>;\\n    <span class=\\\"hljs-keyword\\\">while</span> (i &lt; t.length && j &lt; p.length) {\\n        <span class=\\\"hljs-keyword\\\">if</span> (j == -<span class=\\\"hljs-number\\\">1</span> || t[i] == p[j]) {\\n            <span class=\\\"hljs-comment\\\">// 有匹配就++</span>\\n            i++;\\n            j++;\\n        } <span class=\\\"hljs-keyword\\\">else</span> {\\n            <span class=\\\"hljs-comment\\\">// 否则就按照next去移位j</span>\\n            j = next[j];\\n        }\\n    }\\n    <span class=\\\"hljs-keyword\\\">if</span> (j == p.length) {\\n        <span class=\\\"hljs-keyword\\\">return</span> i - j;\\n    } <span class=\\\"hljs-keyword\\\">else</span> {\\n        <span class=\\\"hljs-keyword\\\">return</span> -<span class=\\\"hljs-number\\\">1</span>;\\n    }\\n}\\n    \\n<span class=\\\"hljs-keyword\\\">public</span> <span class=\\\"hljs-type\\\">int</span>[] nextVal(<span class=\\\"hljs-type\\\">char</span>[] p) {\\n    <span class=\\\"hljs-type\\\">int</span>[] nextVal = <span class=\\\"hljs-keyword\\\">new</span> <span class=\\\"hljs-title class_\\\">int</span>[p.length];\\n    <span class=\\\"hljs-type\\\">int</span> <span class=\\\"hljs-variable\\\">j</span> <span class=\\\"hljs-operator\\\">=</span> <span class=\\\"hljs-number\\\">0</span>;\\n    <span class=\\\"hljs-type\\\">int</span> <span class=\\\"hljs-variable\\\">k</span> <span class=\\\"hljs-operator\\\">=</span> -<span class=\\\"hljs-number\\\">1</span>;\\n    nextVal[<span class=\\\"hljs-number\\\">0</span>] = -<span class=\\\"hljs-number\\\">1</span>;\\n    <span class=\\\"hljs-keyword\\\">while</span> (j &lt; p.length - <span class=\\\"hljs-number\\\">1</span>) {\\n        <span class=\\\"hljs-keyword\\\">if</span> (k == -<span class=\\\"hljs-number\\\">1</span> || p[j] == p[k]) {\\n            j++;\\n            k++;\\n            <span class=\\\"hljs-keyword\\\">if</span> (p[j] != p[k]) {\\n                nextVal[j] = k;\\n            } <span class=\\\"hljs-keyword\\\">else</span> {\\n                nextVal[j] = nextVal[k];\\n            }\\n        } <span class=\\\"hljs-keyword\\\">else</span> {\\n            k = nextVal[k];\\n        }\\n    }\\n    <span class=\\\"hljs-keyword\\\">return</span> nextVal;\\n}\\n</code></pre>\\n<h3 id=\\\"29-divide-two-integer-medium\\\">29. Divide Two Integer (Medium)</h3>\\n<p>Given two integers <code>dividend</code> and <code>divisor</code>, divide two integers without using multiplication, division and mod operator.</p>\\n<p>Return the quotient after dividing <code>dividend</code> by <code>divisor</code>.</p>\\n<p>The integer division should truncate toward zero.</p>\\n<p><strong>Example 1:</strong></p>\\n<pre><code>Input: dividend = 10, divisor = 3\\nOutput: 3\\n</code></pre>\\n<p><strong>Example 2:</strong></p>\\n<pre><code>Input: dividend = 7, divisor = -3\\nOutput: -2\\n</code></pre>\\n<p><strong>Note:</strong></p>\\n<ul>\\n<li>Both dividend and divisor will be 32-bit signed integers.</li>\\n<li>The divisor will never be 0.</li>\\n<li>Assume we are dealing with an environment which could only store integers within the 32-bit signed integer range: [−231,  231 − 1]. For the purpose of this problem, assume that your function returns 231 − 1 when the division result overflows.</li>\\n</ul>\\n<p>不能用乘除符号、不能用Long，行吧，用位运算试试，两倍两倍地运算，总比暴力一个一个的减要快多了</p>\\n<p>但是怎么说，这题也是垃圾题，500+👍，2700+的👎</p>\\n<h4 id=\\\"bit-operation-beat-100\\\">Bit operation (Beat 100%)</h4>\\n<pre><code class=\\\"hljs language-java\\\"><span class=\\\"hljs-keyword\\\">public</span> <span class=\\\"hljs-type\\\">int</span> <span class=\\\"hljs-title function_\\\">divide</span><span class=\\\"hljs-params\\\">(<span class=\\\"hljs-type\\\">int</span> dividend, <span class=\\\"hljs-type\\\">int</span> divisor)</span> {       \\n    <span class=\\\"hljs-keyword\\\">if</span>(dividend ==  Integer.MIN_VALUE && divisor == -<span class=\\\"hljs-number\\\">1</span>){\\n        <span class=\\\"hljs-keyword\\\">return</span> Integer.MAX_VALUE;\\n    }\\n    \\n    <span class=\\\"hljs-type\\\">boolean</span> <span class=\\\"hljs-variable\\\">isNeg</span> <span class=\\\"hljs-operator\\\">=</span> (dividend &lt; <span class=\\\"hljs-number\\\">0</span>) ^ (divisor &lt; <span class=\\\"hljs-number\\\">0</span>);\\n    <span class=\\\"hljs-keyword\\\">if</span>(dividend &gt; <span class=\\\"hljs-number\\\">0</span>) dividend = -dividend;\\n    <span class=\\\"hljs-keyword\\\">if</span>(divisor &gt; <span class=\\\"hljs-number\\\">0</span>) divisor = -divisor;\\n       \\n    <span class=\\\"hljs-keyword\\\">return</span> isNeg? -div(dividend, divisor) : div(dividend, divisor);\\n}\\n<span class=\\\"hljs-keyword\\\">public</span> <span class=\\\"hljs-type\\\">int</span> <span class=\\\"hljs-title function_\\\">div</span><span class=\\\"hljs-params\\\">(<span class=\\\"hljs-type\\\">int</span> divid, <span class=\\\"hljs-type\\\">int</span> divis)</span>{\\n    <span class=\\\"hljs-keyword\\\">if</span>(divid &gt; divis) <span class=\\\"hljs-keyword\\\">return</span> <span class=\\\"hljs-number\\\">0</span>;\\n    <span class=\\\"hljs-type\\\">int</span> <span class=\\\"hljs-variable\\\">curSum</span> <span class=\\\"hljs-operator\\\">=</span> divis &lt;&lt; <span class=\\\"hljs-number\\\">1</span>, prevSum = divis, q = <span class=\\\"hljs-number\\\">1</span>;\\n    \\n    <span class=\\\"hljs-keyword\\\">while</span>(divid &lt;= curSum && curSum &lt; prevSum){\\n        prevSum = curSum;\\n        curSum &lt;&lt;= <span class=\\\"hljs-number\\\">1</span>; q &lt;&lt;= <span class=\\\"hljs-number\\\">1</span>;\\n    }\\n    <span class=\\\"hljs-keyword\\\">return</span> q + div(divid - prevSum, divis);\\n}\\n</code></pre>\\n<h3 id=\\\"30-substring-with-concatenation-of-all-wordshard-\\\">30. Substring with Concatenation of All Words(Hard !!)</h3>\\n<p>You are given a string, <strong>s</strong>, and a list of words, <strong>words</strong>, that are all of the same length. Find all starting indices of substring(s) in <strong>s</strong> that is a concatenation of each word in <strong>words</strong> exactly once and without any intervening characters.</p>\\n<p><strong>Example 1:</strong></p>\\n<pre><code>Input:\\n  s = &quot;barfoothefoobarman&quot;,\\n  words = [&quot;foo&quot;,&quot;bar&quot;]\\nOutput: [0,9]\\nExplanation: Substrings starting at index 0 and 9 are &quot;barfoor&quot; and &quot;foobar&quot; respectively.\\nThe output order does not matter, returning [9,0] is fine too.\\n</code></pre>\\n<p><strong>Example 2:</strong></p>\\n<pre><code>Input:\\n  s = &quot;wordgoodgoodgoodbestword&quot;,\\n  words = [&quot;word&quot;,&quot;good&quot;,&quot;best&quot;,&quot;word&quot;]\\nOutput: []\\n</code></pre>\\n<p>这题，变态难，首先words能全排列出n！种pattern，如果这题用全排列去做，然后每个排列去indexOf，那肯定TLE，先不说indexOf的效率，就是非递归的全排列，一时半会也写不出来，递归全排列绝壁TLE</p>\\n<p>不用全排列，那么我们从概率的角度来思考一下，假如我们把全排列的一个解称为一个<strong>pattern</strong></p>\\n<p>从第二个例子我们可以知道，一个可能的<strong>pattern</strong>必然包含所有单词出现的频数；这是第一个关键点；</p>\\n<p>第二个点就是，我们处理字符串匹配的时候，不免会具象化一个滑动窗口出来，这个滑动窗口阔着s串中的一个和<strong>pattern</strong>一样长的子串；</p>\\n<p>那么一个明显的思路是：我们知道words中的单词都是一样长的，假如说窗口中的子串，从头开始每个一个word长度，都有一个单词匹配到words中的word，而且我们可以维护一个临时的words频数计数器，每匹配到一个单词就增加这个频数计数</p>\\n<p>于是到最后就只会有三种可能：</p>\\n<ol>\\n<li>窗口中的某个word并没有在words中记过频数；</li>\\n<li>窗口中的某个word临时出现的频数超过words中记过频数；</li>\\n<li>窗口中最后一个word都没有出现上面两个可能；那么这就是一个解！</li>\\n</ol>\\n<p>于是我们处理问题的关键就在于，如何<strong>避免重复的单词对比而滑动窗口</strong></p>\\n<p>其实我自己想是已经想到了频数记录，然后滑动窗口了，但是我只能i++地滑动窗口，效率慢了许多，先放上我的解</p>\\n<h4 id=\\\"my-solution-550ms-beat-90\\\">My Solution (550+ms Beat 9.0%)</h4>\\n<pre><code class=\\\"hljs language-java\\\"><span class=\\\"hljs-keyword\\\">public</span> List&lt;Integer&gt; <span class=\\\"hljs-title function_\\\">findSubstring</span><span class=\\\"hljs-params\\\">(String s, String[] words)</span> {\\n    LinkedList&lt;Integer&gt; ans = <span class=\\\"hljs-keyword\\\">new</span> <span class=\\\"hljs-title class_\\\">LinkedList</span>&lt;&gt;();\\n    <span class=\\\"hljs-keyword\\\">if</span> (words.length == <span class=\\\"hljs-number\\\">0</span>) {\\n        <span class=\\\"hljs-keyword\\\">return</span> ans;\\n    }\\n    <span class=\\\"hljs-type\\\">int</span> <span class=\\\"hljs-variable\\\">wordLength</span> <span class=\\\"hljs-operator\\\">=</span> words[<span class=\\\"hljs-number\\\">0</span>].length();\\n    HashMap&lt;String, Integer&gt; countMap = <span class=\\\"hljs-keyword\\\">new</span> <span class=\\\"hljs-title class_\\\">HashMap</span>&lt;&gt;(words.length);\\n    <span class=\\\"hljs-type\\\">int</span> <span class=\\\"hljs-variable\\\">count</span> <span class=\\\"hljs-operator\\\">=</span> <span class=\\\"hljs-number\\\">0</span>;\\n    <span class=\\\"hljs-keyword\\\">for</span> (String word : words) {\\n        <span class=\\\"hljs-type\\\">Integer</span> <span class=\\\"hljs-variable\\\">integer</span> <span class=\\\"hljs-operator\\\">=</span> countMap.get(word);\\n        <span class=\\\"hljs-keyword\\\">if</span> (integer != <span class=\\\"hljs-literal\\\">null</span>) {\\n            countMap.put(word, ++integer);\\n        } <span class=\\\"hljs-keyword\\\">else</span> {\\n            countMap.put(word, <span class=\\\"hljs-number\\\">1</span>);\\n        }\\n        count++;\\n    }\\n\\n    <span class=\\\"hljs-keyword\\\">for</span> (<span class=\\\"hljs-type\\\">int</span> <span class=\\\"hljs-variable\\\">i</span> <span class=\\\"hljs-operator\\\">=</span> <span class=\\\"hljs-number\\\">0</span>; i &lt; s.length() - wordLength + <span class=\\\"hljs-number\\\">1</span>; i++) {\\n        <span class=\\\"hljs-type\\\">String</span> <span class=\\\"hljs-variable\\\">first</span> <span class=\\\"hljs-operator\\\">=</span> s.substring(i, i + wordLength);\\n        <span class=\\\"hljs-type\\\">Integer</span> <span class=\\\"hljs-variable\\\">firstCount</span> <span class=\\\"hljs-operator\\\">=</span> countMap.get(first);\\n        <span class=\\\"hljs-type\\\">int</span> <span class=\\\"hljs-variable\\\">tmpCount</span> <span class=\\\"hljs-operator\\\">=</span> count;\\n        <span class=\\\"hljs-keyword\\\">if</span> (firstCount != <span class=\\\"hljs-literal\\\">null</span>) {\\n            HashMap&lt;String, Integer&gt; tmp = (HashMap&lt;String, Integer&gt;) countMap.clone();\\n            tmp.put(first, --firstCount);\\n            tmpCount--;\\n            <span class=\\\"hljs-type\\\">int</span> <span class=\\\"hljs-variable\\\">tmpI</span> <span class=\\\"hljs-operator\\\">=</span> i;\\n            <span class=\\\"hljs-keyword\\\">do</span> {\\n                <span class=\\\"hljs-keyword\\\">if</span> (tmpCount == <span class=\\\"hljs-number\\\">0</span>) {\\n                    ans.add(i);\\n                    <span class=\\\"hljs-keyword\\\">break</span>;\\n                } <span class=\\\"hljs-keyword\\\">else</span> {\\n                    tmpI = tmpI + wordLength;\\n                    <span class=\\\"hljs-keyword\\\">if</span> (tmpI &lt;= s.length() - wordLength) {\\n                        <span class=\\\"hljs-type\\\">String</span> <span class=\\\"hljs-variable\\\">next</span> <span class=\\\"hljs-operator\\\">=</span> s.substring(tmpI, tmpI + wordLength);\\n                        <span class=\\\"hljs-type\\\">Integer</span> <span class=\\\"hljs-variable\\\">nextCount</span> <span class=\\\"hljs-operator\\\">=</span> tmp.get(next);\\n                        <span class=\\\"hljs-keyword\\\">if</span> (nextCount != <span class=\\\"hljs-literal\\\">null</span> && nextCount != <span class=\\\"hljs-number\\\">0</span>) {\\n                            tmp.put(next, --nextCount);\\n                            tmpCount--;\\n                        } <span class=\\\"hljs-keyword\\\">else</span> {\\n                            <span class=\\\"hljs-keyword\\\">break</span>;\\n                        }\\n                    } <span class=\\\"hljs-keyword\\\">else</span> {\\n                        <span class=\\\"hljs-keyword\\\">break</span>;\\n                    }\\n                }\\n            } <span class=\\\"hljs-keyword\\\">while</span> (<span class=\\\"hljs-literal\\\">true</span>);\\n        }\\n    }\\n    <span class=\\\"hljs-keyword\\\">return</span> ans;\\n}\\n</code></pre>\\n<h4 id=\\\"elegant-solution-9ms-beat-996\\\">Elegant Solution (9ms Beat 99.6%)</h4>\\n<p>leetcode上效率最快的解，用一种难以想象的方式去滑动窗口，优雅而晦涩</p>\\n<pre><code class=\\\"hljs language-java\\\"><span class=\\\"hljs-keyword\\\">public</span> List&lt;Integer&gt; <span class=\\\"hljs-title function_\\\">findSubstring2</span><span class=\\\"hljs-params\\\">(String s, String[] words)</span> {\\n    List&lt;Integer&gt; indexes = <span class=\\\"hljs-keyword\\\">new</span> <span class=\\\"hljs-title class_\\\">ArrayList</span>&lt;&gt;();\\n    <span class=\\\"hljs-keyword\\\">if</span> (words.length == <span class=\\\"hljs-number\\\">0</span>) {\\n        <span class=\\\"hljs-keyword\\\">return</span> indexes;\\n    }\\n    <span class=\\\"hljs-type\\\">int</span> <span class=\\\"hljs-variable\\\">wordLength</span> <span class=\\\"hljs-operator\\\">=</span> words[<span class=\\\"hljs-number\\\">0</span>].length();\\n    <span class=\\\"hljs-type\\\">int</span> <span class=\\\"hljs-variable\\\">patternLength</span> <span class=\\\"hljs-operator\\\">=</span> wordLength * words.length;\\n    <span class=\\\"hljs-keyword\\\">if</span> (patternLength &gt; s.length()) {\\n        <span class=\\\"hljs-keyword\\\">return</span> indexes;\\n    }\\n\\n    Map&lt;String, Integer&gt; strings = <span class=\\\"hljs-keyword\\\">new</span> <span class=\\\"hljs-title class_\\\">HashMap</span>&lt;&gt;(words.length);\\n    <span class=\\\"hljs-keyword\\\">for</span> (<span class=\\\"hljs-type\\\">int</span> <span class=\\\"hljs-variable\\\">i</span> <span class=\\\"hljs-operator\\\">=</span> <span class=\\\"hljs-number\\\">0</span>; i &lt; words.length; ++i) {\\n        strings.put(words[i], strings.getOrDefault(words[i], <span class=\\\"hljs-number\\\">0</span>) + <span class=\\\"hljs-number\\\">1</span>);\\n    }\\n\\n    Map&lt;String, Integer&gt; temp = <span class=\\\"hljs-keyword\\\">new</span> <span class=\\\"hljs-title class_\\\">HashMap</span>&lt;&gt;();\\n    <span class=\\\"hljs-keyword\\\">for</span> (<span class=\\\"hljs-type\\\">int</span> <span class=\\\"hljs-variable\\\">k</span> <span class=\\\"hljs-operator\\\">=</span> <span class=\\\"hljs-number\\\">0</span>; k &lt; wordLength; ++k) {\\n        <span class=\\\"hljs-keyword\\\">for</span> (<span class=\\\"hljs-type\\\">int</span> <span class=\\\"hljs-variable\\\">i</span> <span class=\\\"hljs-operator\\\">=</span> k; i &lt;= s.length() - patternLength; i += wordLength) {\\n            <span class=\\\"hljs-type\\\">int</span> <span class=\\\"hljs-variable\\\">j</span> <span class=\\\"hljs-operator\\\">=</span> i + patternLength;\\n            <span class=\\\"hljs-keyword\\\">for</span> (; j &gt; i; j -= wordLength) {\\n                <span class=\\\"hljs-type\\\">String</span> <span class=\\\"hljs-variable\\\">word</span> <span class=\\\"hljs-operator\\\">=</span> s.substring(j - wordLength, j);\\n                <span class=\\\"hljs-keyword\\\">if</span> (temp.getOrDefault(word, <span class=\\\"hljs-number\\\">0</span>) + <span class=\\\"hljs-number\\\">1</span>\\n                        &gt; strings.getOrDefault(word, <span class=\\\"hljs-number\\\">0</span>)) {\\n                    i = j - wordLength;\\n                    <span class=\\\"hljs-keyword\\\">break</span>;\\n                }\\n                temp.put(word, temp.getOrDefault(word, <span class=\\\"hljs-number\\\">0</span>) + <span class=\\\"hljs-number\\\">1</span>);\\n            }\\n            <span class=\\\"hljs-keyword\\\">if</span> (j == i) {\\n                indexes.add(i);\\n            }\\n            temp.clear();\\n        }\\n    }\\n    <span class=\\\"hljs-keyword\\\">return</span> indexes;\\n}\\n</code></pre>\\n<p>假如我们一个单词的长度是<code>wordLength</code>，一个pattern的长度是<code>patternLength</code></p>\\n<p>18行开始是精髓，用了3个for去做滑动窗口，其中：</p>\\n<ul>\\n<li><p>第一个for长度是单词的长度，它可以处理偏差，可以理解为滑动窗口的出发点，因为我们<strong>滑动窗口的长度总是单词长度的倍数（<code>j = i + patternLength</code>），并且总是以单词长度的倍数为距离做滑动（<code>i += wordLength</code>）</strong>，想象一下就知道了，比如：</p>\\n<p>  <code>s = “aasosfoobar” words = [&quot;foo&quot;, &quot;bar&quot;]</code>的时候，第一个第一个循环表示只需要每次从<strong>第一个a</strong>或者<strong>第二个a</strong>或<strong>第三个s</strong>开始往后滑动窗口就行了，因为<strong>第四个o</strong>如果也需要滑动的话，它得到的结果会有一部分和<strong>第一个a</strong>重叠；再其次，如果要窗口滑动到解<code>foobar</code>处的话，必须从<strong>第三个s</strong>为起点，对比两次（<strong>滑动两个单词长度距离</strong>）才滑动到正解处；</p>\\n</li>\\n<li><p>第二个for循环是用于滑动窗口距离的；</p>\\n</li>\\n<li><p>第三个for循环也是精髓，是用于对比窗口里的单词出现的频数的，根据频数结果来<strong>记录解或者决定下一次滑动窗口的起点</strong></p>\\n<p>  为什么这里要决定下一次滑动窗口的起点？原因很简单，在处理的时候我们已经知道当前窗口<strong>尾部</strong>有几组<strong>连续</strong>单词是<strong>出现在words</strong>里的，而当前窗口<strong>头部</strong>可能有几组单词是<strong>不出现在words</strong>里的，如果有不出现在words中的单词，那么我们下一次滑动窗口的起点可以从当前窗口中<strong>尾部连续命中</strong>的地方开始继续对比窗口，因为这部分连续的命中单词在下一个窗口中可能是一个解；</p>\\n</li>\\n</ul>\\n<p>分析起来比较复杂，实现起来就更精妙了，我们从第三个for循环中可以看到，我们是从窗口的后面往前比较的（<code>j -= wordLength</code>），如果比较到没有命中的单词，那么<strong>当前的j</strong>，就是下一次窗口的起点，为什么要<code>i = j - wordLength</code> ？因为下一次i循环之前会执行一次<code>i += wordLength</code></p>\\n<p>然后30行处，如果j已经和i一样了，那么说明从窗口的最后到最前都命中了，并且符合频数限制，于是这是一组合法的解</p>\\n\";","export default \"<h3 id=\\\"introduction\\\">Introduction</h3>\\n<p>Java 中的<code>String</code>其实有很多东西可以深入的，比如最快拼接效率，比如常量池，比如老生常谈的<code>==</code>问题</p>\\n<p>研究它们的时候我们始终要记住，<code>String</code>是不可变的<strong>（immutable）</strong></p>\\n<p>还有比如它的本质是一个<code>char[]</code>数组这些事实就简单带过了</p>\\n<p>我们需要深入的是<code>String</code>的内存问题，既然它是一成不变的，有一个对象是一个对象，那么 JVM 是如何减少内存的开销的？以及它引申出的一系列内存问题</p>\\n<p>而我想写这篇文章的引子，则是<a href=\\\"https://github.com/hollischuang\\\">Hollis 前辈</a>的一篇：<a href=\\\"https://mp.weixin.qq.com/s/Zs8en3T8TxCMbxGWHkDwBw?comefrom=http://blogread.cn/news/\\\">为什么阿里巴巴不建议在 for 循环中使用&quot;+&quot;进行字符串拼接</a></p>\\n<h3 id=\\\"constant-pool--runtime-constant-pool\\\">Constant Pool & Runtime Constant Pool</h3>\\n<p>关于常量池，它用于存放 Java 编译期生成的各种字面量和符号引用，于是每个 Class 文件都会有一个 Constant Pool，具体的你可以通过<code>javap -v ClassName</code>一个类去看到；</p>\\n<p>而在 JVM 装载 class 文件的时候，会读取 Constant Pool 里的内容到 Runtime Constant Pool，而 Runtime Constant Pool 会在程序运行的时候动态产生新的常量；</p>\\n<h3 id=\\\"literal\\\">Literal</h3>\\n<p>我们知道 String 有两种创建的方式：</p>\\n<pre><code class=\\\"hljs language-java\\\"><span class=\\\"hljs-type\\\">String</span> <span class=\\\"hljs-variable\\\">a</span> <span class=\\\"hljs-operator\\\">=</span> <span class=\\\"hljs-string\\\">&quot;hello&quot;</span>;        <span class=\\\"hljs-comment\\\">// literal</span>\\n<span class=\\\"hljs-type\\\">String</span> <span class=\\\"hljs-variable\\\">b</span> <span class=\\\"hljs-operator\\\">=</span> <span class=\\\"hljs-keyword\\\">new</span> <span class=\\\"hljs-title class_\\\">String</span>(<span class=\\\"hljs-string\\\">&quot;hello&quot;</span>);        <span class=\\\"hljs-comment\\\">// new an object</span>\\n</code></pre>\\n<p>我们当然也知道，a 和 b 是两个不同的对象，因为 a 是直接引用 String Pool 的<strong>字面量</strong>，而 b 引用的是一个 String 对象，虽然这个 String 对象中的字面量实际上也是引用到 String Pool</p>\\n<p><img src=\\\"../../../public/img/20190302153504.png\\\" alt=\\\"\\\"></p>\\n<p>图引自<a href=\\\"https://mp.weixin.qq.com/s?__biz=MzI3NzE0NjcwMg==&mid=2650121551&idx=1&sn=b14691e0daeca8d1283fc8a860732405&chksm=f36bb86ec41c3178bb5f17ae733ffa73a7249e39fcc473f63db928c909466397b352b493c0a3&scene=21#wechat_redirect\\\">我终于搞清楚了和 String 有关的那点事儿。</a></p>\\n<blockquote>\\n<p>在不同版本的 JDK 中，Java 堆和字符串池（字符串表）之间的关系也是不同的，这里为了方便表述，就画成两个独立的物理区域了。具体情况请参考 Java 虚拟机规范。</p>\\n</blockquote>\\n<h3 id=\\\"string-pool\\\">String Pool</h3>\\n<p>那么问题来了，我之前确实知道有 String Pool 这玩意，那么它到底在哪里？堆还是栈？StackOverFlow 上面有一段很有意思的问答：<a href=\\\"https://stackoverflow.com/questions/4918399/where-does-javas-string-constant-pool-live-the-heap-or-the-stack\\\">where does javas string constant pool live? the heap or the stack?</a></p>\\n<blockquote>\\n<p>The answer is technically neither. <strong>According to the Java Virtual Machine Specification</strong>, the area for storing string literals is in the <a href=\\\"https://docs.oracle.com/javase/specs/jvms/se8/html/jvms-5.html#jvms-5.1\\\">runtime constant pool</a>.</p>\\n<p><strong>The runtime constant pool</strong> memory area is allocated on a per-class or per-interface basis, so it&#39;s not tied to any object instances at all.</p>\\n<p><strong>The runtime constant pool</strong> is a subset of the <em>method area</em> which <strong>&quot;stores per-class structures such as the runtime constant pool, field and method data, and the code for methods and constructors, including the special methods used in class and instance initialization and interface type initialization&quot;</strong>.</p>\\n<p>The VM spec says that although the <em>method area</em> is <strong>logically part of the heap</strong>, it doesn&#39;t dictate that memory allocated in the method area be subject to garbage collection or other behaviors that would be associated with normal data structure allocated to the heap.</p>\\n</blockquote>\\n<p>String Pool 是 RT Constant Pool 的一部分，而 RT Constant Pool 是<strong>方法区</strong>的一部分，虽然方法区也是 Heap 的一部分，但它的行为和 Heap 主区域不同；</p>\\n<p>也有人说：</p>\\n<blockquote>\\n<p>As explained by <a href=\\\"https://stackoverflow.com/a/4918466/829571\\\">previous answer</a>, the exact location of the string pool is not specified and can vary from one JVM implementation to another.</p>\\n<p>It is interesting to note that until Java 7, the pool was in the permgen space of the heap on hotspot JVM but <a href=\\\"http://www.oracle.com/technetwork/java/javase/jdk7-relnotes-418459.html#jdk7changes\\\">it has been moved to the main part of the heap since Java 7</a>:</p>\\n<blockquote>\\n<p><strong>Area</strong>: HotSpot\\n<strong>Synopsis</strong>: In JDK 7, interned strings are no longer allocated in the permanent generation of the Java heap, but <strong>are instead allocated in the main part of the Java heap</strong> (known as the young and old generations), along with the other objects created by the application. This change will result in more data residing in the main Java heap, and less data in the permanent generation, and thus may require heap sizes to be adjusted. Most applications will see only relatively small differences in heap usage due to this change, but larger applications that load many classes or make heavy use of the String.intern() method will see more significant differences. RFE: 6962931</p>\\n</blockquote>\\n<p>And in Java 8 Hotspot, Permanent Generation has been completely removed.</p>\\n</blockquote>\\n<p>严格来说，String Pool 的位置根据不同的 JVM 以及不同的 JDK 版本而变化，而在 HotSpot 中，7 之前的 StringPool 确实是在永久代，但是 7 之后就将它从永久代移除掉了，被集中的 String 实际上在堆的主要部分分配；</p>\\n<p>我认为这样做的目的是让 GCor 也能处理冗余的字符串常量，并且避免因为字符串常量爆满而引发的 PermGen Space 的 OOM</p>\\n<p>在<a href=\\\"https://www.baeldung.com/java-string-pool#garbage-collection\\\">Bealdung: Guide to Java String Pool</a>中有提到过这个事</p>\\n<blockquote>\\n<p>From Java 7 onwards, the Java String Pool is <strong>stored in the <em>Heap</em> space, which is garbage collected</strong> by the JVM*.* The advantage of this approach is the <strong>reduced risk of <em>OutOfMemory</em> error</strong> because unreferenced <em>Strings</em> will be removed from the pool, thereby releasing memory.</p>\\n</blockquote>\\n<p>并且从中我们得知，即使 String Pool 是在堆内存中，它自身也是有大小限制的，CG 会根据这个大小限制去工作：</p>\\n<blockquote>\\n<p>In Java 7, we have more detailed options to examine and expand/reduce the pool size. Let&#39;s see the two options for viewing the pool size:</p>\\n<pre><code>-XX:+PrintFlagsFinal\\n-XX:+PrintStringTableStatistics\\n</code></pre>\\n<p>If we want to increase the pool size in terms of buckets, we can use the <em>StringTableSize</em> JVM option:</p>\\n<pre><code>-XX:StringTableSize=``4901\\n</code></pre>\\n<p>Prior to Java 7u40, the default pool size was 1009 buckets but this value was subject to a few changes in more recent Java versions. To be precise, the default pool size from Java 7u40 until Java 11 was 60013 and now it increased to 65536.</p>\\n<p><strong>Note that increasing the pool size will consume more memory but has the advantage of reducing the time required to insert the <em>Strings</em> into the table.</strong></p>\\n</blockquote>\\n<p>再提一句，在 HotSpot 的 Java 8 中，永久代被完全移除掉了，下面我们详细说这个事</p>\\n<h3 id=\\\"permgen-\\\">PermGen ?</h3>\\n<p>之前了解到，方法区是永久代的所在地，那么 Java 8 HotSpot 中移除掉了永久代然后影响到了什么？之前永久代存在的意义又是什么？</p>\\n<blockquote>\\n<p>PermGen is an abbreviation for Permanent Generation and it’s a special heap space which is separate from the main Java heap where JVM keeps track of metadata of the classes which have been loaded.</p>\\n</blockquote>\\n<p>并且找到如下参考：</p>\\n<ul>\\n<li><a href=\\\"https://dzone.com/articles/permgen-and-metaspace\\\">PermGen And Metaspace</a></li>\\n<li><a href=\\\"https://blogs.oracle.com/jonthecollector/presenting-the-permanent-generation\\\">Presenting The Permanent Genaration</a></li>\\n</ul>\\n<h4 id=\\\"in-java-7\\\">In Java 7</h4>\\n<p>永久代是之前 JVM 用来保留用于类加载的元数据的地方，除此之外还存储所有的静态内容：静态方法、原始变量、静态对象的引用等等；它还存储了字节码、所有名称对应的数据、以及 JIT 的信息；最后就是字符串池也在这里；</p>\\n<p>PermGen Space 是有默认的最大空间限制的，所以在 Java 7 之前，字符串池（字符串表）还在 PermGen Space 的时候，万一字符串爆了，就会引发 OOM；于是 7 就将 String Pool 移到 main part of heap；</p>\\n<p>当我们需要调整这一片的大小的时候，JVM 会将它和 Heap 主 part 的调整大小操作一起进行，通常会引发一次<strong>Full GC</strong>，这样的操作非常昂贵，特别是如果程序装载类信息过多的时候，JVM 会考虑增大 PermGen Space，从而引发<strong>Full GC</strong>，于是我们启动程序的时候也会变得很慢，所以我们加上启动参数，调整 PermGen 的默认初始化大小和最大可用空间：</p>\\n<p><code>-XX:PermSize=N</code> - sets the initial (and minimum size) of the Permanent Generation space.</p>\\n<p><code>-XX:MaxPermSize=N</code> - sets the maximum size of the Permanent Generation space.</p>\\n<h4 id=\\\"whats-more-\\\">What&#39;s More ?</h4>\\n<p>Java 中每个对象都是一个类的示例，JVM 管理这些对象并将它们存放在 Heap 中；</p>\\n<p>Java 中每一个类也是有一个 Class 对象去对应的，于是经过前面的铺垫我们可以归总一下，Java 类对象，也就是所有的 Class 对象，是存放在 PermGen 的；</p>\\n<p>于是他们的关系如图：</p>\\n<p><img src=\\\"../../../public/img/20190302174113.png\\\" alt=\\\"\\\"></p>\\n<p>那么我们说既然都是对象，而且它们在 GCor 的眼里反正都是一样的，那为什么不将他们放在一起呢？为什么要将类对象放在 PermGen 呢？</p>\\n<p>有一个技术上的原因是，Class 对象仅仅只是用来给 JVM 看的，而 Heap 中的其他程序业务相关的示例对象，是 Java 开发者真正要去关心的，如果说这两个放在一起，那么开发者可能需要花费大量的精力去理解这些 Class 对象甚至是处理它们可能会报出来的错误；</p>\\n<p>在更久以前，它俩确实是放在一起的，但是因为系统类和开发者写的自定义类的装载行为不一样，所以卸载行为变得很少发生，出于性能优化的考虑才推出了 PermGen，效果也很显著；</p>\\n<p>还有更多的细节，还是去参考上面放出的第二个原文连接</p>\\n<h4 id=\\\"in-java-8\\\">In Java 8</h4>\\n<p>PermGen Space 被一个新的区域替代——Metaspace，它和前者的不同之处就在于：它并不限制默认的最大可用空间，虽然你也可以自行设置：</p>\\n<p><code>-XX:MetaspaceSize=N</code> - sets the initial (and minimum size) of the Metaspace.</p>\\n<p><code>-XX:MaxMetaspaceSize=N</code> - sets the maximum size of the Metaspace.</p>\\n<p>有关 Metaspace 的特点，可以参考一个大神写的<a href=\\\"https://www.cnblogs.com/duanxz/p/3520829.html\\\">文章</a>，以后我有时间也研究一下；或者还有一个参考<a href=\\\"http://java-latte.blogspot.com/2014/03/metaspace-in-java-8.html\\\">Metaspae in Java 8</a></p>\\n<h4 id=\\\"so\\\">So</h4>\\n<p>所以永久代的一部分被移到普通堆，剩下的用 Metaspace Native Memory 替代了，于是这部分内存开销由直接内存承担，不属于 JVM 的一部分</p>\\n<h3 id=\\\"syntactic-sugar\\\">Syntactic Sugar</h3>\\n<p>参考自：<a href=\\\"https://www.experts-exchange.com/articles/17406/String-concatenation-in-Java-syntactic-sugar-versus-efficiency.html\\\">String concatenation in Java: syntactic sugar versus efficiency</a></p>\\n<p>Java provides two main ways to perform string concatenation and one of them could cause you some trouble. The first one most of us encounter is the <strong>+</strong> operator, where doing something like <strong>String value = &quot;Hello &quot; + &quot;world&quot;;</strong> results in a string with the value <strong>&quot;Hello world&quot;</strong>. Most of the time, developers don&#39;t immediately learn that the <strong>+</strong> operator is just <a href=\\\"https://en.wikipedia.org/wiki/Syntactic_sugar\\\">syntactic sugar</a> that the compiler turns into <strong>StringBuilder</strong> operations, that being the other main way one can concatenate strings in Java.</p>\\n<p>Just about every time the compiler encounters a <strong>+ operator</strong> that has <strong>String objects</strong> or literals as its arguments, it translates that code into a three-step sequence of operations:</p>\\n<ol>\\n<li>Create a new <strong>StringBuilder</strong> instance, passing the first argument to its constructor.</li>\\n<li>Call <strong>StringBuilder.append()</strong> and pass the second argument.</li>\\n<li>Call <strong>StringBuilder.toString()</strong>.</li>\\n</ol>\\n<pre><code class=\\\"hljs language-java\\\"><span class=\\\"hljs-type\\\">String</span> <span class=\\\"hljs-variable\\\">s1</span> <span class=\\\"hljs-operator\\\">=</span> <span class=\\\"hljs-string\\\">&quot;12&quot;</span>;\\n<span class=\\\"hljs-type\\\">String</span> <span class=\\\"hljs-variable\\\">s2</span> <span class=\\\"hljs-operator\\\">=</span> <span class=\\\"hljs-string\\\">&quot;1&quot;</span>;\\n<span class=\\\"hljs-type\\\">String</span> <span class=\\\"hljs-variable\\\">s3</span> <span class=\\\"hljs-operator\\\">=</span> s2 + <span class=\\\"hljs-string\\\">&quot;1&quot;</span>;    <span class=\\\"hljs-comment\\\">// sb way</span>\\nSystem.out.println(s1 == s3); <span class=\\\"hljs-comment\\\">// false</span>\\n</code></pre>\\n<h3 id=\\\"stringintern\\\">String.intern()</h3>\\n<p><strong>编译期</strong>生成的各种<strong>字面量</strong>和<strong>符号引用</strong>是运行时常量池中比较重要的一部分来源，但是并不是全部。那么还有一种情况，可以在运行期像运行时常量池中增加常量。那就是<code>String</code>的<code>intern</code>方法。</p>\\n<p>当一个<code>String</code>实例调用<code>intern()</code>方法时，JVM 会查找常量池中是否有相同 Unicode 的字符串常量，如果有，则返回其的引用，如果没有，则在常量池中增加一个 Unicode 等于 str 的字符串并返回它的引用；</p>\\n<p><strong>intern()有两个作用，第一个是将字符串字面量放入常量池（如果池没有的话），第二个是返回这个常量的引用。</strong></p>\\n<p>比如：</p>\\n<pre><code class=\\\"hljs language-java\\\"><span class=\\\"hljs-type\\\">String</span> <span class=\\\"hljs-variable\\\">s1</span> <span class=\\\"hljs-operator\\\">=</span> <span class=\\\"hljs-string\\\">&quot;Hollis&quot;</span>;\\n<span class=\\\"hljs-type\\\">String</span> <span class=\\\"hljs-variable\\\">s2</span> <span class=\\\"hljs-operator\\\">=</span> <span class=\\\"hljs-keyword\\\">new</span> <span class=\\\"hljs-title class_\\\">String</span>(<span class=\\\"hljs-string\\\">&quot;Hollis&quot;</span>);\\n<span class=\\\"hljs-type\\\">String</span> <span class=\\\"hljs-variable\\\">s3</span> <span class=\\\"hljs-operator\\\">=</span> <span class=\\\"hljs-keyword\\\">new</span> <span class=\\\"hljs-title class_\\\">String</span>(<span class=\\\"hljs-string\\\">&quot;Hollis&quot;</span>).intern();\\n\\nSystem.out.println(s1 == s2);    <span class=\\\"hljs-comment\\\">// false</span>\\nSystem.out.println(s1 == s3);    <span class=\\\"hljs-comment\\\">// true</span>\\n</code></pre>\\n<p><img src=\\\"../../../public/img/20190302153504.png\\\" alt=\\\"\\\"></p>\\n<p>由于 s1 和 s3 都是字符串池（字符串表）中的字面量的引用，所以 s1==s3。但是，s2 的引用是堆中的对象，所以 s2!=s1。</p>\\n<h4 id=\\\"real-purpose-of-stringintern\\\">Real Purpose Of String.intern()</h4>\\n<p>其实，在<code>String s3 = new String(&quot;Hollis&quot;).intern();</code>中，<code>intern</code>是多余的。</p>\\n<p>因为就算不用<code>intern</code>，<code>&quot;Hollis&quot;</code>已经作为一个字面量在编译时就被加载到 Class 文件的常量池，进而加入到运行时常量池中，</p>\\n<p>那么到底什么场景下才会用到 intern 呢?</p>\\n<p>在解释这个之前，我们先来看下以下代码：</p>\\n<pre><code class=\\\"hljs language-java\\\"><span class=\\\"hljs-type\\\">String</span> <span class=\\\"hljs-variable\\\">s1</span> <span class=\\\"hljs-operator\\\">=</span> <span class=\\\"hljs-string\\\">&quot;Hollis&quot;</span>;\\n<span class=\\\"hljs-type\\\">String</span> <span class=\\\"hljs-variable\\\">s2</span> <span class=\\\"hljs-operator\\\">=</span> <span class=\\\"hljs-string\\\">&quot;Chuang&quot;</span>;\\n<span class=\\\"hljs-type\\\">String</span> <span class=\\\"hljs-variable\\\">s3</span> <span class=\\\"hljs-operator\\\">=</span> s1 + s2;\\n<span class=\\\"hljs-type\\\">String</span> <span class=\\\"hljs-variable\\\">s4</span> <span class=\\\"hljs-operator\\\">=</span> <span class=\\\"hljs-string\\\">&quot;Hollis&quot;</span> + <span class=\\\"hljs-string\\\">&quot;Chuang&quot;</span>;\\n</code></pre>\\n<p>在经过反编译后，得到代码如下：</p>\\n<pre><code class=\\\"hljs language-java\\\"><span class=\\\"hljs-type\\\">String</span> <span class=\\\"hljs-variable\\\">s1</span> <span class=\\\"hljs-operator\\\">=</span> <span class=\\\"hljs-string\\\">&quot;Hollis&quot;</span>;\\n<span class=\\\"hljs-type\\\">String</span> <span class=\\\"hljs-variable\\\">s2</span> <span class=\\\"hljs-operator\\\">=</span> <span class=\\\"hljs-string\\\">&quot;Chuang&quot;</span>;\\n<span class=\\\"hljs-type\\\">String</span> <span class=\\\"hljs-variable\\\">s3</span> <span class=\\\"hljs-operator\\\">=</span> (<span class=\\\"hljs-keyword\\\">new</span> <span class=\\\"hljs-title class_\\\">StringBuilder</span>()).append(s1).append(s2).toString();\\n<span class=\\\"hljs-type\\\">String</span> <span class=\\\"hljs-variable\\\">s4</span> <span class=\\\"hljs-operator\\\">=</span> <span class=\\\"hljs-string\\\">&quot;HollisChuang&quot;</span>;\\n</code></pre>\\n<p>可以发现，同样是字符串拼接，s3 和 s4 在经过编译器编译后的实现方式并不一样。s3 被转化成<code>StringBuilder</code>及<code>append</code>，而 s4 被直接拼接成新的字符串。</p>\\n<p>如果你感兴趣，你还能发现，<code>String s4 = s1 + s2;</code> 经过编译之后，常量池中是有两个字符串常量的分别是 <code>Hollis</code>、<code>Chuang</code>（其实<code>Hollis</code>和<code>Chuang</code>是<code>String s1 = &quot;Hollis&quot;;</code>和<code>String s2 = &quot;Chuang&quot;;</code>定义出来的），拼接结果<code>HollisChuang</code>并不在常量池中。</p>\\n<p>如果代码只有<code>String s4 = &quot;Hollis&quot; + &quot;Chuang&quot;;</code>，那么常量池中将只有<code>HollisChuang</code>而没有 Hollis 和 Chuang。</p>\\n<p>究其原因，是因为常量池要保存的是<strong>已确定</strong>的字面量值。也就是说，对于字符串的拼接，纯字面量和字面量的拼接，会把拼接结果作为常量保存到字符串。</p>\\n<p>如果在字符串拼接中，有一个参数是非字面量，而是一个变量的话，整个拼接操作会被编译成<code>StringBuilder.append</code>，这种情况编译器是无法知道其确定值的。只有在运行期才能确定。</p>\\n<p>那么，有了这个特性了，<code>intern</code>就有用武之地了。<strong>那就是很多时候，我们在程序中用到的字符串是只有在运行期才能确定的，在编译期是无法确定的，那么也就没办法在编译期被加入到常量池中。</strong></p>\\n<p>这时候，对于那种可能经常使用的字符串，使用<code>intern</code>进行定义，每次 JVM 运行到这段代码的时候，就会直接把常量池中该字面值的引用返回，这样就可以减少大量字符串对象的创建了。</p>\\n<p>如一美团点评团队的<a href=\\\"https://tech.meituan.com/2014/03/06/in-depth-understanding-string-intern.html\\\">《深入解析 String#intern》</a>文中举的一个例子：</p>\\n<pre><code class=\\\"hljs language-java\\\"><span class=\\\"hljs-keyword\\\">static</span> <span class=\\\"hljs-keyword\\\">final</span> <span class=\\\"hljs-type\\\">int</span> <span class=\\\"hljs-variable\\\">MAX</span> <span class=\\\"hljs-operator\\\">=</span> <span class=\\\"hljs-number\\\">1000</span> * <span class=\\\"hljs-number\\\">10000</span>;\\n<span class=\\\"hljs-keyword\\\">static</span> <span class=\\\"hljs-keyword\\\">final</span> String[] arr = <span class=\\\"hljs-keyword\\\">new</span> <span class=\\\"hljs-title class_\\\">String</span>[MAX];\\n\\n<span class=\\\"hljs-keyword\\\">public</span> <span class=\\\"hljs-keyword\\\">static</span> <span class=\\\"hljs-keyword\\\">void</span> <span class=\\\"hljs-title function_\\\">main</span><span class=\\\"hljs-params\\\">(String[] args)</span> <span class=\\\"hljs-keyword\\\">throws</span> Exception {\\n    Integer[] DB_DATA = <span class=\\\"hljs-keyword\\\">new</span> <span class=\\\"hljs-title class_\\\">Integer</span>[<span class=\\\"hljs-number\\\">10</span>];\\n    <span class=\\\"hljs-type\\\">Random</span> <span class=\\\"hljs-variable\\\">random</span> <span class=\\\"hljs-operator\\\">=</span> <span class=\\\"hljs-keyword\\\">new</span> <span class=\\\"hljs-title class_\\\">Random</span>(<span class=\\\"hljs-number\\\">10</span> * <span class=\\\"hljs-number\\\">10000</span>);\\n    <span class=\\\"hljs-keyword\\\">for</span> (<span class=\\\"hljs-type\\\">int</span> <span class=\\\"hljs-variable\\\">i</span> <span class=\\\"hljs-operator\\\">=</span> <span class=\\\"hljs-number\\\">0</span>; i &lt; DB_DATA.length; i++) {\\n        DB_DATA[i] = random.nextInt();\\n    }\\n    <span class=\\\"hljs-keyword\\\">for</span> (<span class=\\\"hljs-type\\\">int</span> <span class=\\\"hljs-variable\\\">i</span> <span class=\\\"hljs-operator\\\">=</span> <span class=\\\"hljs-number\\\">0</span>; i &lt; MAX; i++) {\\n        <span class=\\\"hljs-comment\\\">//arr[i] = new String(String.valueOf(DB_DATA[i % DB_DATA.length]));</span>\\n         arr[i] = <span class=\\\"hljs-keyword\\\">new</span> <span class=\\\"hljs-title class_\\\">String</span>(String.valueOf(DB_DATA[i % DB_DATA.length])).intern();\\n    }\\n}\\n</code></pre>\\n<p>在以上代码中，我们明确的知道，会有很多<strong>重复的相同的字符串</strong>产生，但是这些字符串的值都是只有在运行期才能确定的。所以，只能我们通过<code>intern</code>显示的将其加入常量池，这样可以减少很多字符串的重复创建。</p>\\n<p>文章种给出的测试结果：</p>\\n<blockquote>\\n<p>不使用 intern 的代码生成了 1000w 个字符串，占用了大约 640m 空间。 使用了 intern 的代码生成了 1345 个字符串，占用总空间 133k 左右。其实通过观察程序中只是用到了 10 个字符串，所以准确计算后应该是正好相差 100w 倍。虽然例子有些极端，但确实能准确反应出 intern 使用后产生的巨大空间节省。</p>\\n<p>使用了 intern 方法后时间上有了一些增长。这是因为程序中每次都是用了 <code>new String</code> 后，然后又进行 intern 操作的耗时时间，这一点如果在内存空间充足的情况下确实是无法避免的，但我们平时使用时，内存空间肯定不是无限大的，不使用 intern 占用空间导致 jvm 垃圾回收的时间是要远远大于这点时间的。 毕竟这里使用了 1000w 次 intern 才多出来 1 秒钟多的时间。</p>\\n</blockquote>\\n<p>但是不要盲目地使用这个方法，过多地使用这个方法在字符串变化量巨大的情况下会给字符串池（字符串表）带来压力。</p>\\n<h3 id=\\\"new-string\\\">new String()</h3>\\n<p>结合美团文章给出的错误案例，我们顺道说一下<code>new String()</code>的一个细节</p>\\n<p>当我们的字符串对象是运行时创造的时候，比如：</p>\\n<pre><code class=\\\"hljs language-java\\\"><span class=\\\"hljs-type\\\">String</span> <span class=\\\"hljs-variable\\\">a</span> <span class=\\\"hljs-operator\\\">=</span> <span class=\\\"hljs-string\\\">&quot;Hello&quot;</span>;\\n<span class=\\\"hljs-type\\\">String</span> <span class=\\\"hljs-variable\\\">b</span> <span class=\\\"hljs-operator\\\">=</span> <span class=\\\"hljs-string\\\">&quot;World&quot;</span>;\\n<span class=\\\"hljs-type\\\">String</span> <span class=\\\"hljs-variable\\\">c</span> <span class=\\\"hljs-operator\\\">=</span> a + b;        <span class=\\\"hljs-comment\\\">// StringBuilder().append(a).append(b).toString()</span>\\n</code></pre>\\n<p>最后的<code>toString()</code>其实就有<code>new String()</code>的操作但是我们来说说数据的内存分布情况：</p>\\n<p><img src=\\\"../../../public/img/stringpool.png\\\" alt=\\\"\\\"></p>\\n<p>我们可以知道，运行时产生的所有字符串的值都是存在堆的主内存区的，除非你调用<code>intern()</code>方法将它放进字符串池中，而美团给出的错误例子就是讲大量的不同值的字符串值放进字符串池，导致字符串池压力过大，从而性能降低。</p>\\n<h3 id=\\\"switch-for-string\\\">Switch For String</h3>\\n<p>还是先上代码：</p>\\n<pre><code class=\\\"hljs language-java\\\"><span class=\\\"hljs-keyword\\\">public</span> <span class=\\\"hljs-keyword\\\">class</span> <span class=\\\"hljs-title class_\\\">switchDemoString</span> {\\n    <span class=\\\"hljs-keyword\\\">public</span> <span class=\\\"hljs-keyword\\\">static</span> <span class=\\\"hljs-keyword\\\">void</span> <span class=\\\"hljs-title function_\\\">main</span><span class=\\\"hljs-params\\\">(String[] args)</span> {\\n        <span class=\\\"hljs-type\\\">String</span> <span class=\\\"hljs-variable\\\">str</span> <span class=\\\"hljs-operator\\\">=</span> <span class=\\\"hljs-string\\\">&quot;world&quot;</span>;\\n        <span class=\\\"hljs-keyword\\\">switch</span> (str) {\\n        <span class=\\\"hljs-keyword\\\">case</span> <span class=\\\"hljs-string\\\">&quot;hello&quot;</span>:\\n            System.out.println(<span class=\\\"hljs-string\\\">&quot;hello&quot;</span>);\\n            <span class=\\\"hljs-keyword\\\">break</span>;\\n        <span class=\\\"hljs-keyword\\\">case</span> <span class=\\\"hljs-string\\\">&quot;world&quot;</span>:\\n            System.out.println(<span class=\\\"hljs-string\\\">&quot;world&quot;</span>);\\n            <span class=\\\"hljs-keyword\\\">break</span>;\\n        <span class=\\\"hljs-keyword\\\">default</span>:\\n            <span class=\\\"hljs-keyword\\\">break</span>;\\n        }\\n    }\\n}\\n</code></pre>\\n<p>对代码进行反编译：</p>\\n<pre><code class=\\\"hljs language-java\\\"><span class=\\\"hljs-keyword\\\">public</span> <span class=\\\"hljs-keyword\\\">class</span> <span class=\\\"hljs-title class_\\\">switchDemoString</span>\\n{\\n    <span class=\\\"hljs-keyword\\\">public</span> <span class=\\\"hljs-title function_\\\">switchDemoString</span><span class=\\\"hljs-params\\\">()</span>\\n    {\\n    }\\n    <span class=\\\"hljs-keyword\\\">public</span> <span class=\\\"hljs-keyword\\\">static</span> <span class=\\\"hljs-keyword\\\">void</span> <span class=\\\"hljs-title function_\\\">main</span><span class=\\\"hljs-params\\\">(String args[])</span>\\n    {\\n        <span class=\\\"hljs-type\\\">String</span> <span class=\\\"hljs-variable\\\">str</span> <span class=\\\"hljs-operator\\\">=</span> <span class=\\\"hljs-string\\\">&quot;world&quot;</span>;\\n        String s;\\n        <span class=\\\"hljs-keyword\\\">switch</span>((s = str).hashCode())\\n        {\\n        <span class=\\\"hljs-keyword\\\">default</span>:\\n            <span class=\\\"hljs-keyword\\\">break</span>;\\n        <span class=\\\"hljs-keyword\\\">case</span> <span class=\\\"hljs-number\\\">99162322</span>:\\n            <span class=\\\"hljs-keyword\\\">if</span>(s.equals(<span class=\\\"hljs-string\\\">&quot;hello&quot;</span>))\\n                System.out.println(<span class=\\\"hljs-string\\\">&quot;hello&quot;</span>);\\n            <span class=\\\"hljs-keyword\\\">break</span>;\\n        <span class=\\\"hljs-keyword\\\">case</span> <span class=\\\"hljs-number\\\">113318802</span>:\\n            <span class=\\\"hljs-keyword\\\">if</span>(s.equals(<span class=\\\"hljs-string\\\">&quot;world&quot;</span>))\\n                System.out.println(<span class=\\\"hljs-string\\\">&quot;world&quot;</span>);\\n            <span class=\\\"hljs-keyword\\\">break</span>;\\n        }\\n    }\\n}\\n</code></pre>\\n<p>看到这个代码，你知道原来字符串的 switch 是通过<code>equals()</code>和<code>hashCode()</code>方法来实现的。<strong>记住，switch 中只能使用整型</strong>，比如<code>byte</code>，<code>short</code>，<code>char</code>(ackii 码是整型)以及<code>int</code>。</p>\\n<p>仔细看下可以发现，进行<code>switch</code>的实际是哈希值，然后通过使用 equals 方法比较进行安全检查，这个检查是必要的，因为哈希可能会发生碰撞。</p>\\n<p>所以，<strong>其实 swich 只支持一种数据类型，那就是整型，其他数据类型都是转换成整型之后在使用 switch 的。</strong></p>\\n<h3 id=\\\"substring-in-java6--java7\\\">Substring In Java6 & Java7</h3>\\n<p>简单一句话，6 里的方法得出的子串还和源串有联系，所以会引发内存泄漏问题；而 7 的方法会真正分配一个空间存储字串；</p>\\n<h3 id=\\\"concating-string\\\">Concating String</h3>\\n<p>终于来到我们的引子了，大部分参考自<a href=\\\"https://mp.weixin.qq.com/s/Zs8en3T8TxCMbxGWHkDwBw?comefrom=http://blogread.cn/news/\\\">为什么阿里巴巴不建议在 for 循环中使用&quot;+&quot;进行字符串拼接</a></p>\\n<p>一般来说，我们可以直接使用<code>+</code>去拼接，对于字面量而言，首先就可以直接+起来</p>\\n<p>但是要注意的是，对于 String 对象之间而言，<code>+</code>是 Java 中的语法糖，前面我们有一节提到过，编译后其实是<code>StringBuilder.append()</code></p>\\n<pre><code class=\\\"hljs language-java\\\"><span class=\\\"hljs-type\\\">String</span> <span class=\\\"hljs-variable\\\">a</span> <span class=\\\"hljs-operator\\\">=</span> <span class=\\\"hljs-string\\\">&quot;xixi&quot;</span>;\\n<span class=\\\"hljs-type\\\">String</span> <span class=\\\"hljs-variable\\\">b</span> <span class=\\\"hljs-operator\\\">=</span> <span class=\\\"hljs-string\\\">&quot;haha&quot;</span>;\\n\\n<span class=\\\"hljs-type\\\">String</span> <span class=\\\"hljs-variable\\\">s1</span> <span class=\\\"hljs-operator\\\">=</span> <span class=\\\"hljs-string\\\">&quot;xixi&quot;</span> + <span class=\\\"hljs-string\\\">&quot;haha&quot;</span>;\\n<span class=\\\"hljs-type\\\">String</span> <span class=\\\"hljs-variable\\\">s2</span> <span class=\\\"hljs-operator\\\">=</span> a.concat(b);\\n<span class=\\\"hljs-type\\\">String</span> <span class=\\\"hljs-variable\\\">s3</span> <span class=\\\"hljs-operator\\\">=</span> a + b; <span class=\\\"hljs-comment\\\">// (new StringBuilder()).append(a).append(b).toString();</span>\\n</code></pre>\\n<p>所以说为什么字符串对象不推荐在 for 循环中用+去连接呢？因为这样做每层循环都会创造一个新的<code>StringBuilder</code>对象，倒不如直接定义一个<code>StringBuilder</code>在外边，统一用它去连接所有的字符串</p>\\n<p>而 concat 的源码一读就懂：</p>\\n<pre><code class=\\\"hljs language-java\\\"><span class=\\\"hljs-keyword\\\">public</span> String <span class=\\\"hljs-title function_\\\">concat</span><span class=\\\"hljs-params\\\">(String str)</span> {\\n    <span class=\\\"hljs-type\\\">int</span> <span class=\\\"hljs-variable\\\">otherLen</span> <span class=\\\"hljs-operator\\\">=</span> str.length();\\n    <span class=\\\"hljs-keyword\\\">if</span> (otherLen == <span class=\\\"hljs-number\\\">0</span>) {\\n        <span class=\\\"hljs-keyword\\\">return</span> <span class=\\\"hljs-built_in\\\">this</span>;\\n    }\\n    <span class=\\\"hljs-type\\\">int</span> <span class=\\\"hljs-variable\\\">len</span> <span class=\\\"hljs-operator\\\">=</span> value.length;\\n    <span class=\\\"hljs-type\\\">char</span> buf[] = Arrays.copyOf(value, len + otherLen);\\n    str.getChars(buf, len);\\n    <span class=\\\"hljs-keyword\\\">return</span> <span class=\\\"hljs-keyword\\\">new</span> <span class=\\\"hljs-title class_\\\">String</span>(buf, <span class=\\\"hljs-literal\\\">true</span>);\\n}\\n</code></pre>\\n<p>然后就是显示地使用<code>StringBuilder</code>（非线程安全）、和<code>StringBuffer</code>（线程安全）去拼接了</p>\\n<p>更多的是，<code>String.join()</code>（Java 8）或者<code>StringUtils.join()</code>方法，这两个方法主要是让多个串之间以某个分隔符连接在一起</p>\\n<p>然后在 Java 8 中，又新增了<code>StringJoiner</code>，在前辈的<a href=\\\"https://juejin.im/entry/5c75e576e51d453ed7681719/\\\">文章</a>中说到过：它的实现几乎就是<code>StringBuilder</code>，所以性能差不多，也是非线程安全的，之所以增加这个类，是因为配合 Java 8 Stream 的特性：</p>\\n<pre><code class=\\\"hljs language-java\\\"><span class=\\\"hljs-comment\\\">// 假如说有</span>\\nList&lt;String&gt; list = ImmutableList.of(<span class=\\\"hljs-string\\\">&quot;Hollis&quot;</span>,<span class=\\\"hljs-string\\\">&quot;hollischuang&quot;</span>,<span class=\\\"hljs-string\\\">&quot;Java干货&quot;</span>);\\n\\n<span class=\\\"hljs-comment\\\">// 想拼接在一起我们可以：</span>\\n<span class=\\\"hljs-type\\\">StringBuilder</span> <span class=\\\"hljs-variable\\\">builder</span> <span class=\\\"hljs-operator\\\">=</span> <span class=\\\"hljs-keyword\\\">new</span> <span class=\\\"hljs-title class_\\\">StringBuilder</span>();\\n<span class=\\\"hljs-keyword\\\">if</span> (!list.isEmpty()) {\\n    builder.append(list.get(<span class=\\\"hljs-number\\\">0</span>));\\n    <span class=\\\"hljs-keyword\\\">for</span> (<span class=\\\"hljs-type\\\">int</span> <span class=\\\"hljs-variable\\\">i</span> <span class=\\\"hljs-operator\\\">=</span> <span class=\\\"hljs-number\\\">1</span>, n = list.size(); i &lt; n; i++) {\\n        builder.append(<span class=\\\"hljs-string\\\">&quot;,&quot;</span>).append(list.get(i));\\n    }\\n}\\nbuilder.toString();\\n\\n<span class=\\\"hljs-comment\\\">// 又或者</span>\\nlist.stream().reduce(<span class=\\\"hljs-keyword\\\">new</span> <span class=\\\"hljs-title class_\\\">StringBuilder</span>(), (sb, s) -&gt; sb.append(s).append(<span class=\\\"hljs-string\\\">&#x27;,&#x27;</span>), StringBuilder::append).toString();\\n\\n<span class=\\\"hljs-comment\\\">// 甚至是</span>\\nlist.stream().reduce((a,b)-&gt;a + <span class=\\\"hljs-string\\\">&quot;,&quot;</span> + b).toString();\\n\\n<span class=\\\"hljs-comment\\\">// 但我们现在可以</span>\\nlist.stream().collect(Collectors.joining(<span class=\\\"hljs-string\\\">&quot;:&quot;</span>));\\n</code></pre>\\n<p>而<code>Collectors.joining()</code>的实现就是通过<code>StringJoiner</code>去做的</p>\\n<blockquote>\\n<p>当然，或许在 Collector 中直接使用 StringBuilder 似乎也可以实现类似的功能，只不过稍微麻烦一些</p>\\n<p>所以，Java 8 中提供了 StringJoiner 来丰富 Stream 的用法</p>\\n<p>而且 StringJoiner 也可以方便的增加前缀和后缀，比如我们希望得到的字符串是&quot;[Hollis,hollischuang,Java 干货]&quot;而不是&quot;Hollis,hollischuang,Java 干货&quot;的话，StringJoiner 的优势就更加明显了</p>\\n</blockquote>\\n\";","export default \"<h3 id=\\\"introduction\\\">Introduction</h3>\\n<blockquote>\\n<p>事前吐槽：<em>Doug Lea</em>老爷子的注释可真难读，也许是我英语太菜鸡了- -（本来还挺自信的，现在哭着学英语）</p>\\n</blockquote>\\n<p>接下来我们进入Java并发编程的一个崭新的阶段</p>\\n<p>前面我们对于锁的实现和同步的编程，都是基于<code>synchronized</code>关键字的实现，现在开始接触到的，是Java并发包中提供的锁相关的API，首先可以了解到的是，我们可以通过API的方式去实现<strong>“获取锁”</strong>和<strong>“释放锁”</strong>，从而更灵活的去进行并发编程</p>\\n<p>至此，以后我们再谈起<strong>“Java中的锁”</strong>，它可能指的是多个意义上的，讨论之前先要明确一个方向：</p>\\n<ul>\\n<li><code>synchronized</code>/<code>volatile</code>关键字的使用</li>\\n<li>锁的几种<strong>等级</strong>和区别</li>\\n<li>锁的几种<strong>类型</strong>和使用场景</li>\\n<li><strong>Lock API</strong>的使用以及和<code>synchronized</code>的区别</li>\\n</ul>\\n<h3 id=\\\"lock-接口\\\">Lock 接口</h3>\\n<p>在Lock之前，Java是靠<code>synchronized</code>关键字去实现锁的，Java5之后，并发包中新增了Lock接口</p>\\n<p>它提供了同步功能，需要使用者<strong>显式</strong>地去获取锁和释放锁：</p>\\n<pre><code class=\\\"hljs language-java\\\"><span class=\\\"hljs-type\\\">Lock</span> <span class=\\\"hljs-variable\\\">lock</span> <span class=\\\"hljs-operator\\\">=</span> <span class=\\\"hljs-keyword\\\">new</span> <span class=\\\"hljs-title class_\\\">ReentrantLock</span>();\\nlock.lock();\\n<span class=\\\"hljs-keyword\\\">try</span> {}\\n<span class=\\\"hljs-keyword\\\">finally</span> { <span class=\\\"hljs-comment\\\">// 保证获取锁之后，最终能够被释放掉</span>\\n    lock.unlock();\\n}\\n</code></pre>\\n<p>虽然不比关键字便捷，但是它的使用非常灵活，不一定要先获取锁才能够释放锁，拥有了更方便的可操作性、可中断性和<strong>超时获取锁</strong>等关键字不具备的特点</p>\\n<table>\\n<thead>\\n<tr>\\n<th align=\\\"center\\\">特性</th>\\n<th align=\\\"center\\\">描述</th>\\n</tr>\\n</thead>\\n<tbody><tr>\\n<td align=\\\"center\\\">非阻塞获取锁</td>\\n<td align=\\\"center\\\">无论有没有获取成功，都会从获取动作返回；</td>\\n</tr>\\n<tr>\\n<td align=\\\"center\\\">能够被中断地获取锁</td>\\n<td align=\\\"center\\\">和<code>synchronized</code>不同，线程在获取锁的过程中能够响应中断，当获取到锁的线程被中断的时候，中断异常会抛出，同时释放锁；</td>\\n</tr>\\n<tr>\\n<td align=\\\"center\\\">超时获取</td>\\n<td align=\\\"center\\\">在指定的时间内获取到锁，否则从获取动作返回；</td>\\n</tr>\\n</tbody></table>\\n<p>上面这三个点都有一些值得玩味的地方，我们一一去解开，首先我们看第二点，我们先来验证一下之前使用<code>synchronized</code>的时候的一个细节：<code>synchronized</code>与中断</p>\\n<pre><code class=\\\"hljs language-java\\\"><span class=\\\"hljs-keyword\\\">public</span> <span class=\\\"hljs-keyword\\\">static</span> <span class=\\\"hljs-keyword\\\">void</span> <span class=\\\"hljs-title function_\\\">main</span><span class=\\\"hljs-params\\\">(String[] args)</span> <span class=\\\"hljs-keyword\\\">throws</span> InterruptedException {\\n    <span class=\\\"hljs-type\\\">String</span> <span class=\\\"hljs-variable\\\">lockA</span> <span class=\\\"hljs-operator\\\">=</span> <span class=\\\"hljs-string\\\">&quot;A&quot;</span>;\\n    <span class=\\\"hljs-type\\\">Thread</span> <span class=\\\"hljs-variable\\\">t1</span> <span class=\\\"hljs-operator\\\">=</span> <span class=\\\"hljs-keyword\\\">new</span> <span class=\\\"hljs-title class_\\\">Thread</span>(() -&gt; {\\n        <span class=\\\"hljs-keyword\\\">synchronized</span> (lockA) {\\n            System.out.println(<span class=\\\"hljs-string\\\">&quot;T1 get LockA&quot;</span>);\\n            <span class=\\\"hljs-keyword\\\">while</span> (<span class=\\\"hljs-literal\\\">true</span>) {\\n            }\\n        }\\n    });\\n    Thread t2= <span class=\\\"hljs-keyword\\\">new</span> <span class=\\\"hljs-title class_\\\">Thread</span>(() -&gt; {\\n        <span class=\\\"hljs-keyword\\\">try</span> {\\n            TimeUnit.SECONDS.sleep(<span class=\\\"hljs-number\\\">2</span>);\\n        } <span class=\\\"hljs-keyword\\\">catch</span> (InterruptedException e) {\\n            e.printStackTrace();\\n        }\\n        System.out.println(<span class=\\\"hljs-string\\\">&quot;T2 trying to get LockA&quot;</span>);\\n        <span class=\\\"hljs-keyword\\\">synchronized</span> (lockA) {\\n            System.out.println(<span class=\\\"hljs-string\\\">&quot;T2 get LockA&quot;</span>);\\n        }\\n    });\\n    t1.start();\\n    t2.start();\\n    TimeUnit.SECONDS.sleep(<span class=\\\"hljs-number\\\">3</span>);\\n    <span class=\\\"hljs-keyword\\\">while</span> (t2.isAlive() && t1.isAlive()) {\\n        TimeUnit.MILLISECONDS.sleep(<span class=\\\"hljs-number\\\">300</span>);\\n        <span class=\\\"hljs-keyword\\\">if</span> (!t1.isInterrupted()) {t1.interrupt();}\\n        <span class=\\\"hljs-keyword\\\">if</span> (!t2.isInterrupted()) {t2.interrupt();}\\n        System.out.println(<span class=\\\"hljs-string\\\">&quot;T1 Alive: &quot;</span> + t1.isAlive() + <span class=\\\"hljs-string\\\">&quot;, isInterrupted: &quot;</span> + t1.isInterrupted() + <span class=\\\"hljs-string\\\">&quot;, State: &quot;</span> + t1.getState());\\n        System.out.println(<span class=\\\"hljs-string\\\">&quot;T2 Alive: &quot;</span> + t2.isAlive() + <span class=\\\"hljs-string\\\">&quot;, isInterrupted: &quot;</span> + t2.isInterrupted() + <span class=\\\"hljs-string\\\">&quot;, State: &quot;</span> + t2.getState());\\n    }\\n}\\n</code></pre>\\n<pre><code class=\\\"hljs language-java\\\">T1 get LockA\\nT2 trying to get LockA\\nT1 Alive: <span class=\\\"hljs-literal\\\">true</span>, isInterrupted: <span class=\\\"hljs-literal\\\">true</span>, State: RUNNABLE\\nT2 Alive: <span class=\\\"hljs-literal\\\">true</span>, isInterrupted: <span class=\\\"hljs-literal\\\">true</span>, State: BLOCKED\\nT1 Alive: <span class=\\\"hljs-literal\\\">true</span>, isInterrupted: <span class=\\\"hljs-literal\\\">true</span>, State: RUNNABLE\\nT2 Alive: <span class=\\\"hljs-literal\\\">true</span>, isInterrupted: <span class=\\\"hljs-literal\\\">true</span>, State: BLOCKED\\n<span class=\\\"hljs-comment\\\">// ....</span>\\n</code></pre>\\n<p>我们发现，在<code>synchronized</code>的过程中，T2是等待获取锁被BLOCKED住的线程，这时候是无法响应中断的，<strong>即使线程的已经打了中断标志！</strong>而在T1中，是可以根据中断标志去响应中断的，或者能够短睡眠去响应中断异常；</p>\\n<p>也就是，在<code>synchronized</code>外面BLOCKED住的线程：<strong>只能是阻塞；无法被中断；没有超时；</strong></p>\\n<p>而Lock就更为灵活</p>\\n<table>\\n<thead>\\n<tr>\\n<th>方法名称</th>\\n<th>描述</th>\\n</tr>\\n</thead>\\n<tbody><tr>\\n<td>void lock()</td>\\n<td>等阻塞获取锁，获取到锁之后，从该方法返回；否则一直在该方法中等待（此时线程的状态是WATING）</td>\\n</tr>\\n<tr>\\n<td>void lockInterruptibly() <code>throws InterruptedException</code></td>\\n<td>可中断地获取锁，在锁的获取过程中，其它线程可以中断这个过程</td>\\n</tr>\\n<tr>\\n<td>boolean tryLock()</td>\\n<td>非阻塞式地获取锁，如果获取成功，则返回true，获取失败，则返回false</td>\\n</tr>\\n<tr>\\n<td>boolean tryLock(long time, TimeUnit unit) <code>throws InterruptedException</code></td>\\n<td>超时获取：若在限定时间内获取到锁，则返回true；若获取过程中被中断，则抛出异常；若超时，则返回false</td>\\n</tr>\\n<tr>\\n<td>void unlock()</td>\\n<td>释放锁</td>\\n</tr>\\n<tr>\\n<td>Condition newCondition()</td>\\n<td>获取等待通知组件，改组件和当前的锁绑定，当前线程只有获取到锁了，才能调用改组件的<code>wait()</code>方法</td>\\n</tr>\\n</tbody></table>\\n<p>看了下上面的API，我们对于Lock和<code>synchronized</code>的区别就清楚了</p>\\n<h3 id=\\\"队列同步器\\\">队列同步器</h3>\\n<p>Lock接口的实现依赖队列同步器AbstractQueuedSynchronizer，它用来构建同步框架的基础</p>\\n<p><strong>原理：</strong>它使用一个int成员变量来表示<strong>同步状态（state）</strong>，对锁的获取其实就是对该state的获取，对于同步状态的获取和改变，同步器提供了线程安全的方法；另外它还通过一个内置的FIFO的队列来完成资源获取线程的排队。</p>\\n<blockquote>\\n<p><strong>同步状态</strong>的概念，如果学过操作系统的都知道，在PV问题中会有一个值来代表当前可以访问临界资源的资格，这里的同步状态大概也是这么个意思</p>\\n<p>基本上state如果是0就代表无法获取，如果大于0就代表能够获取一次，比如说如果现在AQS的state是2，你还能acquire2次，每次acquire(1)，因为是只有1个线程在acquire嘛，等到state不够了的时候，就开始排队了</p>\\n</blockquote>\\n<p>同步器的使用主要是通过<strong>继承</strong>的方式，实现Lock API的时候，推荐同时在里面写一个静态内部类来实现同步器，同步器没有实现任何同步接口，仅是定义了若干同步状态的获取和释放方法来提供自定义组件去使用，并且同步器支持独占式和共享式的实现，所以它可以为多种不同的同步组件去服务（<code>ReentrantLock</code>、<code>ReentrantReadWriteLock</code>、<code>CountDownLatch</code>）</p>\\n<p>它和Lock的关系就像前后端的关系一样：</p>\\n<ul>\\n<li>Lock是面向锁使用者的，它定义了使用者所需要的锁的方法，隐藏了实现细节</li>\\n<li>同步器是面向锁实现者的，它简化了锁的实现，屏蔽了同步状态管理、线程排队、等待和唤醒等底层操作</li>\\n</ul>\\n<p><strong>锁和同步器很好地隔离了使用者和实现者锁关注的领域，又增强了锁的可操作性和降低了锁的实现难度</strong></p>\\n<h4 id=\\\"接口与示例\\\">接口与示例</h4>\\n<p>同步器的设计是基于模板方法模式的，锁的实现者需要继承同步器并重写指定的方法，然后使用了这个同步器的自定义同步组件会调用这个同步器提供的同步方法，而这些方法就是实现者重写的方法</p>\\n<h5 id=\\\"状态相关方法\\\">状态相关方法</h5>\\n<p>重写模板方法的时候，需要用到同步器提供的状态相关方法</p>\\n<ul>\\n<li><code>getState()</code>：获取同步状态</li>\\n<li><code>setState()</code>：设置当前同步状态</li>\\n<li><code>compareAndSetState()</code>用CAS设置同步状态，该方法保证设置动作的原子性</li>\\n</ul>\\n<h5 id=\\\"实现同步器需要重写的方法\\\">实现同步器需要重写的方法</h5>\\n<table>\\n<thead>\\n<tr>\\n<th>方法</th>\\n<th>描述</th>\\n</tr>\\n</thead>\\n<tbody><tr>\\n<td><code>protected boolean tryAccquire(int arg)</code></td>\\n<td>独占式获取同步状态，这个方法需要查询同步状态是否符合预期，然后再使用CAS设置新的同步状态</td>\\n</tr>\\n<tr>\\n<td><code>protected boolean tryRelease(int arg)</code></td>\\n<td>独占式释放同步状态</td>\\n</tr>\\n<tr>\\n<td><code>protected int tryAcquireShared(int arg)</code></td>\\n<td>共享式获取同步状态，若返回大于0的值则表示获取成功，否则获取失败</td>\\n</tr>\\n<tr>\\n<td><code>protected int tryReleaseShared(int arg)</code></td>\\n<td>共享式释放同步状态</td>\\n</tr>\\n<tr>\\n<td><code>protected boolean isHeldExclusively()</code></td>\\n<td>当前同步器是否在独占模式下被线程占用，一般用来表示是否被当前线程独占</td>\\n</tr>\\n</tbody></table>\\n<h5 id=\\\"同步器提供的模板方法\\\">同步器提供的模板方法</h5>\\n<table>\\n<thead>\\n<tr>\\n<th>方法</th>\\n<th>描述</th>\\n</tr>\\n</thead>\\n<tbody><tr>\\n<td><code>void acquire(int arg)</code></td>\\n<td>独占式获取同步状态，如果同步状态获取成功，则从该方法返回，否则进入同步队列等待，该方法会调用重写的<code>tryAcquire</code>方法</td>\\n</tr>\\n<tr>\\n<td><code>void acquireInterruptibly(int arg)</code></td>\\n<td>和<code>acquire</code>相同，但是这个方法能够响应中断，当前线程如果没获取到同步状态而进入到同步队列中等待的时候，这时候中断这个线程，它就会从队列中退出并且抛出异常</td>\\n</tr>\\n<tr>\\n<td><code>boolean tryAcquireNanos(int arg, long nanos)</code></td>\\n<td>在<code>acquireInterruptibly</code>的基础上加了超时限制，如果在限时内获取到同步状态了就返回true，否则返回false</td>\\n</tr>\\n<tr>\\n<td><code>void acquireShared(int arg)</code></td>\\n<td>共享式获取同步状态，也就是同一时间允许有多个线程获取到同步状态，该方法会调用重写的<code>tryAcquireShared</code>方法</td>\\n</tr>\\n<tr>\\n<td><code>void acquireSharedInterruptibly(int arg)</code></td>\\n<td>共享式可中断获取同步状态</td>\\n</tr>\\n<tr>\\n<td><code>boolean acquireSharedNanos(ing arg, long nanos)</code></td>\\n<td>共享式可中断有超时获取同步状态，限时内获取到就返回true，否则返回false</td>\\n</tr>\\n<tr>\\n<td><code>boolean release(int arg)</code></td>\\n<td>独占式释放同步状态，并唤醒在同步队列中等待的第一个线程，该方法会调用重写的<code>tryRelease</code>方法</td>\\n</tr>\\n<tr>\\n<td><code>boolean releaseShared(int arg)</code></td>\\n<td>共享式释放同步状态，该方法会调用重写的<code>tryReleaseShared</code>方法</td>\\n</tr>\\n<tr>\\n<td><code>Collection&lt;Thread&gt; getQueuedThreads()</code></td>\\n<td>获取等待在同步队列上的线程集合</td>\\n</tr>\\n</tbody></table>\\n<p>可以看到，模板方法分为三类：独占式获取和释放、共享式获取和释放、同步队列线程集合</p>\\n<h3 id=\\\"尝试实现一个独占锁\\\">尝试实现一个独占锁</h3>\\n<pre><code class=\\\"hljs language-java\\\"><span class=\\\"hljs-keyword\\\">class</span> <span class=\\\"hljs-title class_\\\">Mutex</span> <span class=\\\"hljs-keyword\\\">implements</span> <span class=\\\"hljs-title class_\\\">Lock</span> {\\n    <span class=\\\"hljs-keyword\\\">static</span> <span class=\\\"hljs-keyword\\\">class</span> <span class=\\\"hljs-title class_\\\">Q</span> <span class=\\\"hljs-keyword\\\">extends</span> <span class=\\\"hljs-title class_\\\">AbstractQueuedSynchronizer</span> {\\n        <span class=\\\"hljs-comment\\\">// 查看是否处于占用状态</span>\\n        <span class=\\\"hljs-meta\\\">@Override</span>\\n        <span class=\\\"hljs-keyword\\\">protected</span> <span class=\\\"hljs-type\\\">boolean</span> <span class=\\\"hljs-title function_\\\">isHeldExclusively</span><span class=\\\"hljs-params\\\">()</span> {<span class=\\\"hljs-keyword\\\">return</span> getState() == <span class=\\\"hljs-number\\\">1</span>;}\\n        <span class=\\\"hljs-meta\\\">@Override</span>\\n        <span class=\\\"hljs-keyword\\\">public</span> <span class=\\\"hljs-type\\\">boolean</span> <span class=\\\"hljs-title function_\\\">tryAcquire</span><span class=\\\"hljs-params\\\">(<span class=\\\"hljs-type\\\">int</span> acquire)</span> {\\n            <span class=\\\"hljs-comment\\\">// 状态为0的时候获取锁</span>\\n            <span class=\\\"hljs-keyword\\\">if</span> (compareAndSetState(<span class=\\\"hljs-number\\\">0</span>, acquire)) {\\n                setExclusiveOwnerThread(Thread.currentThread());\\n                <span class=\\\"hljs-keyword\\\">return</span> <span class=\\\"hljs-literal\\\">true</span>;\\n            }\\n            <span class=\\\"hljs-keyword\\\">return</span> <span class=\\\"hljs-literal\\\">false</span>;\\n        }\\n        <span class=\\\"hljs-meta\\\">@Override</span>\\n        <span class=\\\"hljs-keyword\\\">protected</span> <span class=\\\"hljs-type\\\">boolean</span> <span class=\\\"hljs-title function_\\\">tryRelease</span><span class=\\\"hljs-params\\\">(<span class=\\\"hljs-type\\\">int</span> release)</span> {\\n            <span class=\\\"hljs-keyword\\\">if</span> (getState() == <span class=\\\"hljs-number\\\">0</span>) {\\n                <span class=\\\"hljs-keyword\\\">throw</span> <span class=\\\"hljs-keyword\\\">new</span> <span class=\\\"hljs-title class_\\\">IllegalMonitorStateException</span>();\\n            }\\n            <span class=\\\"hljs-comment\\\">// 释放锁并将状态设置为0</span>\\n            setExclusiveOwnerThread(<span class=\\\"hljs-literal\\\">null</span>);\\n            setState(<span class=\\\"hljs-number\\\">0</span>);\\n            <span class=\\\"hljs-keyword\\\">return</span> <span class=\\\"hljs-literal\\\">true</span>;\\n        }\\n        <span class=\\\"hljs-comment\\\">// 返回一个Condition对象 每一个conditionObject都包含了一个condition队列</span>\\n        Condition <span class=\\\"hljs-title function_\\\">newCondition</span><span class=\\\"hljs-params\\\">()</span> {<span class=\\\"hljs-keyword\\\">return</span> <span class=\\\"hljs-keyword\\\">new</span> <span class=\\\"hljs-title class_\\\">ConditionObject</span>();}\\n        <span class=\\\"hljs-comment\\\">// 返回当前持有本锁的线程对象</span>\\n        <span class=\\\"hljs-keyword\\\">public</span> Thread <span class=\\\"hljs-title function_\\\">getOwnerThread</span><span class=\\\"hljs-params\\\">()</span> {<span class=\\\"hljs-keyword\\\">return</span> getExclusiveOwnerThread();}\\n    }\\n    <span class=\\\"hljs-keyword\\\">private</span> <span class=\\\"hljs-keyword\\\">final</span> <span class=\\\"hljs-type\\\">Q</span> <span class=\\\"hljs-variable\\\">q</span> <span class=\\\"hljs-operator\\\">=</span> <span class=\\\"hljs-keyword\\\">new</span> <span class=\\\"hljs-title class_\\\">Q</span>();\\n    <span class=\\\"hljs-meta\\\">@Override</span>\\n    <span class=\\\"hljs-keyword\\\">public</span> <span class=\\\"hljs-keyword\\\">void</span> <span class=\\\"hljs-title function_\\\">lock</span><span class=\\\"hljs-params\\\">()</span> {q.acquire(<span class=\\\"hljs-number\\\">1</span>);}\\n    <span class=\\\"hljs-meta\\\">@Override</span>\\n    <span class=\\\"hljs-keyword\\\">public</span> <span class=\\\"hljs-keyword\\\">void</span> <span class=\\\"hljs-title function_\\\">lockInterruptibly</span><span class=\\\"hljs-params\\\">()</span> <span class=\\\"hljs-keyword\\\">throws</span> InterruptedException {\\n        q.acquireInterruptibly(<span class=\\\"hljs-number\\\">1</span>);\\n    }\\n    <span class=\\\"hljs-meta\\\">@Override</span>\\n    <span class=\\\"hljs-keyword\\\">public</span> <span class=\\\"hljs-type\\\">boolean</span> <span class=\\\"hljs-title function_\\\">tryLock</span><span class=\\\"hljs-params\\\">()</span> {<span class=\\\"hljs-keyword\\\">return</span> q.tryAcquire(<span class=\\\"hljs-number\\\">1</span>);}\\n    <span class=\\\"hljs-meta\\\">@Override</span>\\n    <span class=\\\"hljs-keyword\\\">public</span> <span class=\\\"hljs-type\\\">boolean</span> <span class=\\\"hljs-title function_\\\">tryLock</span><span class=\\\"hljs-params\\\">(<span class=\\\"hljs-type\\\">long</span> time, TimeUnit unit)</span> <span class=\\\"hljs-keyword\\\">throws</span> InterruptedException {\\n        <span class=\\\"hljs-keyword\\\">return</span> q.tryAcquireNanos(<span class=\\\"hljs-number\\\">1</span>, unit.toNanos(time));\\n    }\\n    <span class=\\\"hljs-meta\\\">@Override</span>\\n    <span class=\\\"hljs-keyword\\\">public</span> <span class=\\\"hljs-keyword\\\">void</span> <span class=\\\"hljs-title function_\\\">unlock</span><span class=\\\"hljs-params\\\">()</span> {q.release(<span class=\\\"hljs-number\\\">1</span>);}\\n    <span class=\\\"hljs-meta\\\">@Override</span>\\n    <span class=\\\"hljs-keyword\\\">public</span> Condition <span class=\\\"hljs-title function_\\\">newCondition</span><span class=\\\"hljs-params\\\">()</span> {<span class=\\\"hljs-keyword\\\">return</span> q.newCondition();}\\n    <span class=\\\"hljs-comment\\\">// 可以额外附加的实现</span>\\n    <span class=\\\"hljs-keyword\\\">public</span> <span class=\\\"hljs-type\\\">boolean</span> <span class=\\\"hljs-title function_\\\">isLocked</span><span class=\\\"hljs-params\\\">()</span> {<span class=\\\"hljs-keyword\\\">return</span> q.isHeldExclusively();}\\n    <span class=\\\"hljs-keyword\\\">public</span> <span class=\\\"hljs-type\\\">boolean</span> <span class=\\\"hljs-title function_\\\">hasQueuedThreads</span><span class=\\\"hljs-params\\\">()</span> {<span class=\\\"hljs-keyword\\\">return</span> q.hasQueuedThreads();}\\n    <span class=\\\"hljs-keyword\\\">public</span> Thread <span class=\\\"hljs-title function_\\\">getExclusiveOwnerThread</span><span class=\\\"hljs-params\\\">()</span> {<span class=\\\"hljs-keyword\\\">return</span> q.getOwnerThread();}\\n}\\n</code></pre>\\n<p>我们要实现一个Mutex，首先实现<code>Lock</code>接口，然后写一个内部类并继承<code>AbstractQueuedSynchronizer</code>，在Mutex中实例化一个同步器对象，并把同步器对象的方法代理为，Lock接口的方法的实现</p>\\n<p>值得注意的是，<code>AbstractQueuedSynchronizer</code>类本身就提供了很多方法作为实现同步组件的有力工具，比如在<code>tryAcquire(int acquire)</code>方法的实现里，就用到了<code>compareAndSetState</code>尝试设置同步状态，并且如果设置成功的话，就代表当前线程已经获取到该锁了，随后就把当前线程和该同步器进行绑定，即通过<code>setExclusiveOwnerThread</code>方法将该线程设置为锁的持有者</p>\\n<p>其他诸如获取Queue中的线程集合、判断是锁是否被锁上、获取锁的持有线程等等这些方法，都能通过同步器提供的方法去灵活实现，在这样灵活的同步器的帮助下，能够实现符合很多场景的同步组件</p>\\n<p>最后，我们还注意到有一个<code>newCondition</code>方法，这个方法返回的对象有什么用，我们以后再慢慢研究</p>\\n\";","export default \"<h3 id=\\\"前言\\\">前言</h3>\\n<p>这篇记录下从今天开始，复习到、新遇到的所有算法题</p>\\n<ul>\\n<li>栈相关</li>\\n<li>数学逻辑相关</li>\\n</ul>\\n<hr>\\n<h4 id=\\\"栈相关\\\">栈相关</h4>\\n<h5 id=\\\"汉诺塔（递归方法）\\\">汉诺塔（递归方法）</h5>\\n<h6 id=\\\"c-语言实现\\\">C 语言实现</h6>\\n<pre><code class=\\\"hljs language-c\\\"><span class=\\\"hljs-type\\\">void</span> <span class=\\\"hljs-title function_\\\">hanoi</span><span class=\\\"hljs-params\\\">(<span class=\\\"hljs-type\\\">int</span> n, <span class=\\\"hljs-type\\\">char</span> source, <span class=\\\"hljs-type\\\">char</span> help, <span class=\\\"hljs-type\\\">char</span> target)</span> {\\n    <span class=\\\"hljs-comment\\\">// 讲塔座上按照直径大小自上而下编号为1到n的n个圆盘按规则搬到塔座target上，help做辅助塔</span>\\n    <span class=\\\"hljs-keyword\\\">if</span> (n == <span class=\\\"hljs-number\\\">1</span>) {\\n        move(source, <span class=\\\"hljs-number\\\">1</span>, target);\\n    } <span class=\\\"hljs-keyword\\\">else</span> {\\n        hanoi(n<span class=\\\"hljs-number\\\">-1</span>, source, target, help);    <span class=\\\"hljs-comment\\\">// 将要搬离的n个盘中的前n-1个盘搬到help塔上，用target塔为辅助</span>\\n        move(source, n, target);            <span class=\\\"hljs-comment\\\">// 将编号为n的盘移动到target塔上</span>\\n        hanoi(n<span class=\\\"hljs-number\\\">-1</span>, help, source, target);    <span class=\\\"hljs-comment\\\">// 将之前的放在help塔上的n-1个盘移动到target塔，用souece塔做辅助塔</span>\\n    }\\n}\\n\\n<span class=\\\"hljs-type\\\">void</span> <span class=\\\"hljs-title function_\\\">move</span><span class=\\\"hljs-params\\\">(<span class=\\\"hljs-type\\\">char</span> source, <span class=\\\"hljs-type\\\">int</span> n, <span class=\\\"hljs-type\\\">char</span> target)</span>{\\n    <span class=\\\"hljs-comment\\\">// 将source塔上的盘子n搬到target塔上，移动步数加1（设置为全局变量）</span>\\n    <span class=\\\"hljs-built_in\\\">printf</span>(<span class=\\\"hljs-string\\\">&quot;Step: %i. Move disk %i from %c to %c\\\\n&quot;</span>, ++stepCount, n, x, z);\\n}\\n</code></pre>\\n<blockquote>\\n<p>参考：《数据结构（C 语言版）》——严蔚敏. P55</p>\\n</blockquote>\\n<hr>\\n<h4 id=\\\"数学逻辑相关\\\">数学逻辑相关</h4>\\n<h5 id=\\\"有理数的循环节\\\">有理数的循环节</h5>\\n<blockquote>\\n<p>两次看到这题，第一次是在某年蓝桥杯上，第二次就是昨天（2018 年 9 月 10 日）的快手笔试。如出一辙，分码未写。</p>\\n<p>1/7 = 0.142857142... 是个无限循环小数。任何有理数都可以表示为无限循环小数的形式。本题目要求即是：给出一个数字的循环小数表示法。</p>\\n<p>例如：</p>\\n<p>输入：\\n1,5</p>\\n<p>则输出：\\n0.2</p>\\n<p>输入：\\n1,7</p>\\n<p>则输出：</p>\\n<p>0.[142857]</p>\\n<p>输入：</p>\\n<p>7,6</p>\\n<p>则输出:</p>\\n<p>1.1[6]</p>\\n<p>用户输入的格式是：</p>\\n<p>整数,整数</p>\\n<p>每个整数范围均为：1~1000</p>\\n<p>程序输出两个整数做除法产生的小数或无限循环小数（循环节用方括号括起）。</p>\\n</blockquote>\\n<p>这题.....真是纯数学题，你要是不懂怎么判断循环节，那就凉了，然后就求循环嘛，然后又发现一个很尴尬的事情，余数不会求....折腾了大半天，搞定- -</p>\\n<p>首先我们手算 3 个例子，1/4 和 1/7 和 1/6</p>\\n<p><img src=\\\"../../../public/img/20180912111445.png\\\" alt=\\\"\\\"></p>\\n<p>我们每次计算的时候，<strong>都需要将余数乘以 10，再和除数取余，再进行下一轮计算，直到余数为 0 或者余数重复出现为止，与此同时我们可以记录每一轮的商</strong>；</p>\\n<p>比如 1/4，余数是 1，<code>(1*10)%4=2</code>，再继续<code>(2*10)%4=0</code>，算到 0 就可以截止了</p>\\n<p>1/7，余数是 1，<code>(1*10)%7=3</code>，<code>(3*10)%7=2</code>，<code>(2*10)%7=6</code>，<code>(6*10)%7=4</code>，<code>(4*10)%7=5``(5*10)%7=1</code>，又碰到一样的余数了，说明下一轮得到的商之前是已经求出来过的，所以已经找到循环节了；</p>\\n<h6 id=\\\"java-实现\\\">Java 实现</h6>\\n<pre><code class=\\\"hljs language-java\\\"><span class=\\\"hljs-comment\\\">// resulet : k.(m1m2m3m4...mn)</span>\\n<span class=\\\"hljs-keyword\\\">private</span> <span class=\\\"hljs-keyword\\\">static</span> String <span class=\\\"hljs-title function_\\\">getRepetend</span><span class=\\\"hljs-params\\\">(<span class=\\\"hljs-type\\\">int</span> a, <span class=\\\"hljs-type\\\">int</span> b)</span> {\\n    <span class=\\\"hljs-type\\\">int</span> <span class=\\\"hljs-variable\\\">k</span> <span class=\\\"hljs-operator\\\">=</span> a / b;\\n    a = a % b;\\n    <span class=\\\"hljs-type\\\">StringBuilder</span> <span class=\\\"hljs-variable\\\">msb</span> <span class=\\\"hljs-operator\\\">=</span> <span class=\\\"hljs-keyword\\\">new</span> <span class=\\\"hljs-title class_\\\">StringBuilder</span>();\\n    msb.append(<span class=\\\"hljs-string\\\">&quot;.&quot;</span>);\\n    <span class=\\\"hljs-keyword\\\">while</span> (<span class=\\\"hljs-literal\\\">true</span>) {\\n        <span class=\\\"hljs-type\\\">int</span> <span class=\\\"hljs-variable\\\">mi</span> <span class=\\\"hljs-operator\\\">=</span> (a * <span class=\\\"hljs-number\\\">10</span>) / b;\\n        a = (a * <span class=\\\"hljs-number\\\">10</span>) % b;\\n        <span class=\\\"hljs-type\\\">int</span> <span class=\\\"hljs-variable\\\">index</span> <span class=\\\"hljs-operator\\\">=</span> msb.indexOf(mi + <span class=\\\"hljs-string\\\">&quot;&quot;</span>);\\n        <span class=\\\"hljs-keyword\\\">if</span> (index != -<span class=\\\"hljs-number\\\">1</span>) {\\n            msb.insert(index, <span class=\\\"hljs-string\\\">&quot;(&quot;</span>);\\n            <span class=\\\"hljs-keyword\\\">break</span>;\\n        }\\n        msb.append(mi);\\n        <span class=\\\"hljs-keyword\\\">if</span> (a == <span class=\\\"hljs-number\\\">0</span>) {\\n            <span class=\\\"hljs-keyword\\\">break</span>;\\n        }\\n    }\\n    msb.insert(<span class=\\\"hljs-number\\\">0</span>, k);\\n    <span class=\\\"hljs-keyword\\\">if</span> (msb.indexOf(<span class=\\\"hljs-string\\\">&quot;(&quot;</span>) != -<span class=\\\"hljs-number\\\">1</span>) {\\n        msb.append(<span class=\\\"hljs-string\\\">&quot;)&quot;</span>);\\n    }\\n    <span class=\\\"hljs-keyword\\\">return</span> msb.toString();\\n}\\n</code></pre>\\n\";","export default \"<h3 id=\\\"前言\\\">前言</h3>\\n<p>我</p>\\n<p>面试（大约两个月前）</p>\\n<p>被问线程安全单例</p>\\n<p>实际上写得出</p>\\n<p>只是不知道可以这样写</p>\\n<p>所以没答好- -</p>\\n<p>回来一看</p>\\n<p>可以答</p>\\n<p>耻辱</p>\\n<p>说明：本篇代码大部分引自：<a href=\\\"https://github.com/iluwatar/java-design-patterns\\\">https://github.com/iluwatar/java-design-patterns</a> </p>\\n<hr>\\n<h3 id=\\\"singleton\\\">Singleton</h3>\\n<p>单例模式（Singleton）算是工厂模式的一种特例，你不需要给出任何参数，就可以马上得到一个在任何地方都可以调用到的唯一的实例</p>\\n<p>第一次接触到单例，还是在1年多前学习spring的时候，在配置Bean的时候有单例多例配置</p>\\n<p>总的来说，一个实例，如果是用作工具类或者工具对象的话，那么它并不需要创建多个实例，我们就可以用单例的形式去获取这个对象</p>\\n<h4 id=\\\"hungrymanstyle（thread-safe）\\\">HungryManStyle（thread safe）</h4>\\n<pre><code class=\\\"hljs language-java\\\"><span class=\\\"hljs-comment\\\">/**\\n * 使用静态对象进行预加载来保证线程安全的\\n * 一般我们称这样的单例为饿汉式单例 不管三七二十一 一旦加载这个类就创建对象\\n * 一般是在第一次引用这个类的时候就加载这个类\\n */</span>\\n<span class=\\\"hljs-keyword\\\">class</span> <span class=\\\"hljs-title class_\\\">Singleton</span>{\\n    <span class=\\\"hljs-keyword\\\">private</span> <span class=\\\"hljs-title function_\\\">Singleton</span><span class=\\\"hljs-params\\\">()</span>{}\\n    <span class=\\\"hljs-keyword\\\">private</span> <span class=\\\"hljs-keyword\\\">static</span> <span class=\\\"hljs-keyword\\\">final</span> <span class=\\\"hljs-type\\\">Singleton</span> <span class=\\\"hljs-variable\\\">INSTANCE</span> <span class=\\\"hljs-operator\\\">=</span> <span class=\\\"hljs-keyword\\\">new</span> <span class=\\\"hljs-title class_\\\">Singleton</span>();\\n    <span class=\\\"hljs-keyword\\\">public</span> <span class=\\\"hljs-keyword\\\">static</span> Singleton <span class=\\\"hljs-title function_\\\">getInstance</span><span class=\\\"hljs-params\\\">()</span> {\\n        <span class=\\\"hljs-keyword\\\">return</span> INSTANCE;\\n    }\\n}\\n</code></pre>\\n<p>要说的话都在注释里了</p>\\n<h4 id=\\\"lazymanstyle\\\">LazyManStyle</h4>\\n<h5 id=\\\"无锁（非线程安全）\\\">无锁（非线程安全）</h5>\\n<pre><code class=\\\"hljs language-java\\\"><span class=\\\"hljs-keyword\\\">public</span> <span class=\\\"hljs-keyword\\\">class</span> <span class=\\\"hljs-title class_\\\">Singleton</span> {\\n    <span class=\\\"hljs-keyword\\\">private</span> <span class=\\\"hljs-title function_\\\">Singleton</span><span class=\\\"hljs-params\\\">()</span>{}\\n    <span class=\\\"hljs-keyword\\\">private</span> <span class=\\\"hljs-keyword\\\">static</span> <span class=\\\"hljs-keyword\\\">final</span> Singleton INSTANCE;\\n    <span class=\\\"hljs-keyword\\\">public</span> <span class=\\\"hljs-keyword\\\">static</span> Singleton <span class=\\\"hljs-title function_\\\">getInstance</span><span class=\\\"hljs-params\\\">()</span>{\\n        <span class=\\\"hljs-keyword\\\">if</span> (INSTANCE == <span class=\\\"hljs-literal\\\">null</span>) {\\n            INSTANCE = <span class=\\\"hljs-keyword\\\">new</span> <span class=\\\"hljs-title class_\\\">Singleton</span>();\\n        }\\n        <span class=\\\"hljs-keyword\\\">return</span> INSTANCE;\\n    }\\n}\\n</code></pre>\\n<p>这种是最基本的单例</p>\\n<ul>\\n<li>私有无参构造方法保证外部引用不可以new一个对象</li>\\n<li>判断是否初始化了instance变量 始终只返会同一个对象</li>\\n</ul>\\n<p>但是这种单例只能在单线程的情况下正常工作，在多线程的情况下，如果多个线程同一时刻在line5处判断实例变量不为空，那么就可能有多个线程同时执行line6，在这个时间，会有大量的实例挤破头得被instance引用，这样会造成资源浪费</p>\\n<h5 id=\\\"简单synchronized上锁（线程安全）\\\">简单Synchronized上锁（线程安全）</h5>\\n<pre><code class=\\\"hljs language-java\\\"><span class=\\\"hljs-keyword\\\">public</span> <span class=\\\"hljs-keyword\\\">class</span> <span class=\\\"hljs-title class_\\\">Singleton</span>{\\n    <span class=\\\"hljs-keyword\\\">private</span> <span class=\\\"hljs-title function_\\\">Singleton</span><span class=\\\"hljs-params\\\">()</span>{}\\n    <span class=\\\"hljs-keyword\\\">private</span> <span class=\\\"hljs-keyword\\\">static</span> <span class=\\\"hljs-keyword\\\">final</span> Singletion INSTANCE;\\n    <span class=\\\"hljs-keyword\\\">public</span> <span class=\\\"hljs-keyword\\\">static</span> <span class=\\\"hljs-keyword\\\">synchronized</span> Singleton <span class=\\\"hljs-title function_\\\">getInstance</span><span class=\\\"hljs-params\\\">()</span>{\\n        <span class=\\\"hljs-keyword\\\">if</span> (INSTANCE == <span class=\\\"hljs-literal\\\">null</span>) {\\n            INSTANCE = <span class=\\\"hljs-keyword\\\">new</span> <span class=\\\"hljs-title class_\\\">Singleton</span>();\\n        }\\n        <span class=\\\"hljs-keyword\\\">return</span> INSTANCE;\\n    }\\n}\\n\\n<span class=\\\"hljs-comment\\\">// 另外一种写法</span>\\n<span class=\\\"hljs-keyword\\\">public</span> <span class=\\\"hljs-keyword\\\">static</span> Singleton <span class=\\\"hljs-title function_\\\">getInstance</span><span class=\\\"hljs-params\\\">()</span>{\\n    <span class=\\\"hljs-keyword\\\">synchronized</span>(Singleton.class) {\\n        <span class=\\\"hljs-keyword\\\">if</span> (INSTANCE == <span class=\\\"hljs-literal\\\">null</span>) {\\n            INSTANCE = <span class=\\\"hljs-keyword\\\">new</span> <span class=\\\"hljs-title class_\\\">Singleton</span>();\\n        }\\n    }\\n    <span class=\\\"hljs-keyword\\\">return</span> INSTANCE;\\n}\\n</code></pre>\\n<p>优点，比上面那种安全，缺点，获取对象的时候资源浪费，我们上锁的目的只是<strong>防止最开始在实例未被初始化的时候，被多线程访问导致line5判断异常</strong>，往后在实例被创建好了之后，并不需要防止多线程同时访问，每次调用方法都加锁只会增加无意义的消耗，我称这个为<strong>“无意义锁”</strong></p>\\n<p>这种实现不可取</p>\\n<h5 id=\\\"想当然的双重检查锁（非线程安全）\\\">想当然的双重检查锁（非线程安全）</h5>\\n<pre><code class=\\\"hljs language-java\\\"><span class=\\\"hljs-keyword\\\">public</span> <span class=\\\"hljs-keyword\\\">class</span> <span class=\\\"hljs-title class_\\\">Singleton</span>{\\n    <span class=\\\"hljs-keyword\\\">private</span> <span class=\\\"hljs-title function_\\\">Singleton</span><span class=\\\"hljs-params\\\">()</span>{}\\n    <span class=\\\"hljs-keyword\\\">private</span> <span class=\\\"hljs-keyword\\\">static</span> <span class=\\\"hljs-keyword\\\">final</span> Singletion INSTANCE;\\n    <span class=\\\"hljs-keyword\\\">public</span> <span class=\\\"hljs-keyword\\\">static</span> Singleton <span class=\\\"hljs-title function_\\\">getInstance</span><span class=\\\"hljs-params\\\">()</span>{\\n        <span class=\\\"hljs-keyword\\\">if</span> (INSTANCE == <span class=\\\"hljs-literal\\\">null</span>) {\\n            <span class=\\\"hljs-keyword\\\">synchronized</span>(Singleton.class) {\\n                <span class=\\\"hljs-keyword\\\">if</span> (INSTANCE == <span class=\\\"hljs-literal\\\">null</span>) {\\n                    INSTANCE = <span class=\\\"hljs-keyword\\\">new</span> <span class=\\\"hljs-title class_\\\">Singleton</span>();\\n                }\\n            }\\n        }\\n        <span class=\\\"hljs-keyword\\\">return</span> INSTANCE;\\n    }\\n}\\n</code></pre>\\n<p>这个实现，看似可以避免<strong>无意义锁</strong>的问题，但是line8可能会因为某单线程的重排序导致其他线程对该实例的可见性问题，对于双重检查锁的错误，在系列文章《并发编程第六坎》中可以看到，这里不再赘述</p>\\n<p>基于双重检查锁的解决方案，给出两种比较标准的实现：</p>\\n<h5 id=\\\"基于内部类和类加载机制的initialization-on-demand-holder-idiom\\\">基于内部类和类加载机制的——Initialization On Demand Holder Idiom</h5>\\n<pre><code class=\\\"hljs language-java\\\"><span class=\\\"hljs-keyword\\\">public</span> <span class=\\\"hljs-keyword\\\">final</span> <span class=\\\"hljs-keyword\\\">class</span> <span class=\\\"hljs-title class_\\\">InitializingOnDemandHolderIdiom</span> {\\n    <span class=\\\"hljs-keyword\\\">private</span> <span class=\\\"hljs-title function_\\\">InitializingOnDemandHolderIdiom</span><span class=\\\"hljs-params\\\">()</span>{}\\n    <span class=\\\"hljs-keyword\\\">public</span> <span class=\\\"hljs-keyword\\\">static</span> InitializingOnDemandHolderIdiom <span class=\\\"hljs-title function_\\\">getInstance</span><span class=\\\"hljs-params\\\">()</span> {\\n        <span class=\\\"hljs-keyword\\\">return</span> HelperHolder.INSTANCE;\\n    }\\n    <span class=\\\"hljs-keyword\\\">private</span> <span class=\\\"hljs-keyword\\\">static</span> <span class=\\\"hljs-keyword\\\">class</span> <span class=\\\"hljs-title class_\\\">HelperHolder</span> {\\n        <span class=\\\"hljs-keyword\\\">private</span> <span class=\\\"hljs-keyword\\\">static</span> <span class=\\\"hljs-keyword\\\">final</span> <span class=\\\"hljs-type\\\">InitializingOnDemandHolderIdiom</span> <span class=\\\"hljs-variable\\\">INSTANCE</span> <span class=\\\"hljs-operator\\\">=</span> \\n            <span class=\\\"hljs-keyword\\\">new</span> <span class=\\\"hljs-title class_\\\">InitializingOnDemandHolderIdiom</span>();\\n    }\\n}\\n</code></pre>\\n<p>这个实现的好处就是，它可以在既可以保证线程安全和懒加载，又可以适应所有的JDK版本，比如我们下面的实现用到了volatile变量，就需要JDK1.5以上的支持</p>\\n<blockquote>\\n<p> 参考：</p>\\n<ul>\\n<li><a href=\\\"https://en.wikipedia.org/wiki/Initialization-on-demand_holder_idiom\\\">https://en.wikipedia.org/wiki/Initialization-on-demand_holder_idiom</a> </li>\\n<li><a href=\\\"http://ifeve.com/initialization-on-demand-holder-idiom/\\\">http://ifeve.com/initialization-on-demand-holder-idiom/</a></li>\\n<li><a href=\\\"https://www.cnblogs.com/fuyoucaoyu/p/6547715.html\\\">https://www.cnblogs.com/fuyoucaoyu/p/6547715.html</a></li>\\n</ul>\\n</blockquote>\\n<p>在这里我们多接触了一个概念——<strong>初始化锁LC锁</strong>，具体的介绍可以看第六坎</p>\\n<h5 id=\\\"基于volatile变量的线程安全的双重检查锁\\\">基于volatile变量的——线程安全的双重检查锁</h5>\\n<pre><code class=\\\"hljs language-java\\\"><span class=\\\"hljs-keyword\\\">public</span> <span class=\\\"hljs-keyword\\\">final</span> <span class=\\\"hljs-keyword\\\">class</span> <span class=\\\"hljs-title class_\\\">ThreadSafeDoubleCheckLocking</span> {\\n  <span class=\\\"hljs-keyword\\\">private</span> <span class=\\\"hljs-keyword\\\">static</span> <span class=\\\"hljs-keyword\\\">volatile</span> ThreadSafeDoubleCheckLocking instance;\\n  <span class=\\\"hljs-keyword\\\">private</span> <span class=\\\"hljs-title function_\\\">ThreadSafeDoubleCheckLocking</span><span class=\\\"hljs-params\\\">()</span> {\\n    <span class=\\\"hljs-comment\\\">// 防止被反射实例化</span>\\n    <span class=\\\"hljs-keyword\\\">if</span> (instance != <span class=\\\"hljs-literal\\\">null</span>) {\\n      <span class=\\\"hljs-keyword\\\">throw</span> <span class=\\\"hljs-keyword\\\">new</span> <span class=\\\"hljs-title class_\\\">IllegalStateException</span>(<span class=\\\"hljs-string\\\">&quot;Already initialized.&quot;</span>);\\n    }\\n  }\\n  <span class=\\\"hljs-keyword\\\">public</span> <span class=\\\"hljs-keyword\\\">static</span> ThreadSafeDoubleCheckLocking <span class=\\\"hljs-title function_\\\">getInstance</span><span class=\\\"hljs-params\\\">()</span> {\\n    <span class=\\\"hljs-comment\\\">// 这个本地变量会提高25%的性能 Joshua Bloch &quot;Effective Java, Second Edition&quot;, p. 283-284</span>\\n    <span class=\\\"hljs-type\\\">ThreadSafeDoubleCheckLocking</span> <span class=\\\"hljs-variable\\\">result</span> <span class=\\\"hljs-operator\\\">=</span> instance;\\n    <span class=\\\"hljs-comment\\\">// 第一次检查 不为空直接返回</span>\\n    <span class=\\\"hljs-keyword\\\">if</span> (result == <span class=\\\"hljs-literal\\\">null</span>) {\\n      <span class=\\\"hljs-comment\\\">// 上锁同步初始化的过程</span>\\n      <span class=\\\"hljs-keyword\\\">synchronized</span> (ThreadSafeDoubleCheckLocking.class) {\\n        <span class=\\\"hljs-comment\\\">// 再一次指派本地变量 用于检查是否有其他线程在当前线程被阻塞在锁外的时候已经完成初始化工作了</span>\\n        <span class=\\\"hljs-comment\\\">// 如果已经完成了 那么可以直接返回结果</span>\\n        result = instance;\\n        <span class=\\\"hljs-keyword\\\">if</span> (result == <span class=\\\"hljs-literal\\\">null</span>) {\\n          <span class=\\\"hljs-comment\\\">// 在这个区域完全就是单线程访问了 完成初始化工作</span>\\n          instance = result = <span class=\\\"hljs-keyword\\\">new</span> <span class=\\\"hljs-title class_\\\">ThreadSafeDoubleCheckLocking</span>();\\n        }\\n      }\\n    }\\n    <span class=\\\"hljs-keyword\\\">return</span> result;\\n  }\\n}\\n</code></pre>\\n<p>关键是volatile的声明，原因见第六坎</p>\\n<h5 id=\\\"枚举法单例\\\">枚举法单例</h5>\\n<pre><code class=\\\"hljs language-java\\\"><span class=\\\"hljs-keyword\\\">public</span> <span class=\\\"hljs-keyword\\\">enum</span> <span class=\\\"hljs-title class_\\\">EnumSingleton</span> {\\n  INSTANCE;\\n  <span class=\\\"hljs-meta\\\">@Override</span>\\n  <span class=\\\"hljs-keyword\\\">public</span> String <span class=\\\"hljs-title function_\\\">toString</span><span class=\\\"hljs-params\\\">()</span> {\\n    <span class=\\\"hljs-keyword\\\">return</span> getDeclaringClass().getCanonicalName() + <span class=\\\"hljs-string\\\">&quot;@&quot;</span> + hashCode();\\n  }\\n}\\n</code></pre>\\n<p>也是利用枚举的特点，线程安全，简单、直接、省事、可用</p>\\n<p>单例的枚举实现在《Effective Java》中有提到，因为其<strong>功能完整、使用简洁、无偿地提供了序列化机制、在面对复杂的序列化或者反射攻击时仍然可以绝对防止多次实例化</strong>等优点，单元素的枚举类型被作者认为是实现Singleton的最佳方法。 </p>\\n<p>具体可以参考：<a href=\\\"https://blog.csdn.net/gavin_dyson/article/details/70832185\\\">https://blog.csdn.net/gavin_dyson/article/details/70832185</a></p>\\n<p>里面说了，为什么枚举类会有一次性锁的效果，其实枚举是一种语法糖，本质是上利用的还是静态特性，然后因为<strong>语法糖揪在一起（自创说法）</strong>的原因，序列化绝对安全</p>\\n<h4 id=\\\"总结\\\">总结</h4>\\n<p>这么多单例，最好的实现无疑是最后三种，最后三种各自有各自的优点</p>\\n<ul>\\n<li><strong>静态内部类实现：</strong>所有版本通用，常规且有效</li>\\n<li><strong>volatile双重检查锁实现：</strong>只适用JDK1.5以上，正式切有效</li>\\n<li><strong>枚举法实现：</strong>蜜汁实现，简单暴力省事高效，但是不易理解其特性</li>\\n</ul>\\n<p>多提一句，饿汉式写法没有绝对的漏洞，只是如果你的实例内容如果多，占用空间大，而且没有一开始就需要伴随系统初始化的必要的话，有点浪费资源，其他也没差。</p>\\n<hr>\\n<h3 id=\\\"observerdependentspublisher-subscriber\\\">Observer/Dependents/Publisher-Subscriber</h3>\\n<p>观察者模式意在建立一种一对多的关联关系，在这个关系中，任意其中一个对象发生了状态变化，其他对象都可以自动感知到这个变化。</p>\\n<p>观察者模式又称为：关联模式、发布者-订阅者模式</p>\\n<p>这样的关系很容易理解，就像电视台播报的天气预报一样，天气一变，气象台就会发送变动天气的短信给当地用户，武汉就一天至少2封高温预警的短信- -</p>\\n<p>我们首先来看</p>\\n<h4 id=\\\"subjectpublisher\\\">Subject/Publisher</h4>\\n<pre><code class=\\\"hljs language-java\\\"><span class=\\\"hljs-comment\\\">/**\\n * Weather对象可以被实现了观察者接口WeatherObserver并且在Weather对象这里注册为观察者的对象才能接受\\n * 该Weather对象的发布内容\\n */</span>\\n<span class=\\\"hljs-keyword\\\">public</span> <span class=\\\"hljs-keyword\\\">class</span> <span class=\\\"hljs-title class_\\\">Weather</span> {\\n  <span class=\\\"hljs-keyword\\\">private</span> WeatherType currentWeather;\\n  <span class=\\\"hljs-keyword\\\">private</span> List&lt;WeatherObserver&gt; observers;\\n  <span class=\\\"hljs-keyword\\\">public</span> <span class=\\\"hljs-title function_\\\">Weather</span><span class=\\\"hljs-params\\\">()</span> {\\n    observers = <span class=\\\"hljs-keyword\\\">new</span> <span class=\\\"hljs-title class_\\\">ArrayList</span>&lt;&gt;();\\n    currentWeather = WeatherType.SUNNY;\\n  }\\n  <span class=\\\"hljs-comment\\\">// 注册订阅者</span>\\n  <span class=\\\"hljs-keyword\\\">public</span> <span class=\\\"hljs-keyword\\\">void</span> <span class=\\\"hljs-title function_\\\">addObserver</span><span class=\\\"hljs-params\\\">(WeatherObserver obs)</span> {\\n    observers.add(obs);\\n  }\\n  <span class=\\\"hljs-comment\\\">// 注销订阅者</span>\\n  <span class=\\\"hljs-keyword\\\">public</span> <span class=\\\"hljs-keyword\\\">void</span> <span class=\\\"hljs-title function_\\\">removeObserver</span><span class=\\\"hljs-params\\\">(WeatherObserver obs)</span> {\\n    observers.remove(obs);\\n  }\\n  <span class=\\\"hljs-comment\\\">// 状态变更</span>\\n  <span class=\\\"hljs-keyword\\\">public</span> <span class=\\\"hljs-keyword\\\">void</span> <span class=\\\"hljs-title function_\\\">timePasses</span><span class=\\\"hljs-params\\\">()</span> {\\n    WeatherType[] enumValues = WeatherType.values();\\n    currentWeather = enumValues[(currentWeather.ordinal() + <span class=\\\"hljs-number\\\">1</span>) % enumValues.length];\\n    notifyObservers();        <span class=\\\"hljs-comment\\\">// 通知</span>\\n  }\\n  <span class=\\\"hljs-comment\\\">// 发布订阅到所有订阅者</span>\\n  <span class=\\\"hljs-keyword\\\">private</span> <span class=\\\"hljs-keyword\\\">void</span> <span class=\\\"hljs-title function_\\\">notifyObservers</span><span class=\\\"hljs-params\\\">()</span> {\\n    <span class=\\\"hljs-keyword\\\">for</span> (WeatherObserver obs : observers) {\\n      obs.update(currentWeather);\\n    }\\n  }\\n}\\n<span class=\\\"hljs-keyword\\\">public</span> <span class=\\\"hljs-keyword\\\">enum</span> <span class=\\\"hljs-title class_\\\">WeatherType</span> {\\n  SUNNY, RAINY, WINDY, COLD;\\n  <span class=\\\"hljs-meta\\\">@Override</span>\\n  <span class=\\\"hljs-keyword\\\">public</span> String <span class=\\\"hljs-title function_\\\">toString</span><span class=\\\"hljs-params\\\">()</span> {\\n    <span class=\\\"hljs-keyword\\\">return</span> <span class=\\\"hljs-built_in\\\">this</span>.name().toLowerCase();\\n  }\\n}\\n</code></pre>\\n<h4 id=\\\"观察者接口\\\">观察者接口</h4>\\n<pre><code class=\\\"hljs language-java\\\"><span class=\\\"hljs-keyword\\\">public</span> <span class=\\\"hljs-keyword\\\">interface</span> <span class=\\\"hljs-title class_\\\">WeatherObserver</span> {\\n  <span class=\\\"hljs-keyword\\\">void</span> <span class=\\\"hljs-title function_\\\">update</span><span class=\\\"hljs-params\\\">(WeatherType currentWeather)</span>;\\n}\\n</code></pre>\\n<h4 id=\\\"observersubscriber\\\">Observer/Subscriber</h4>\\n<pre><code class=\\\"hljs language-java\\\"><span class=\\\"hljs-keyword\\\">public</span> <span class=\\\"hljs-keyword\\\">class</span> <span class=\\\"hljs-title class_\\\">Orcs</span> <span class=\\\"hljs-keyword\\\">implements</span> <span class=\\\"hljs-title class_\\\">WeatherObserver</span> {\\n  <span class=\\\"hljs-meta\\\">@Override</span>\\n  <span class=\\\"hljs-keyword\\\">public</span> <span class=\\\"hljs-keyword\\\">void</span> <span class=\\\"hljs-title function_\\\">update</span><span class=\\\"hljs-params\\\">(WeatherType currentWeather)</span> {\\n    <span class=\\\"hljs-keyword\\\">switch</span> (currentWeather) {\\n      <span class=\\\"hljs-comment\\\">// 根据状态选择对应逻辑</span>\\n    }\\n  }\\n}\\n</code></pre>\\n<h4 id=\\\"main\\\">Main</h4>\\n<pre><code class=\\\"hljs language-java\\\">  <span class=\\\"hljs-keyword\\\">public</span> <span class=\\\"hljs-keyword\\\">static</span> <span class=\\\"hljs-keyword\\\">void</span> <span class=\\\"hljs-title function_\\\">main</span><span class=\\\"hljs-params\\\">(String[] args)</span> {\\n    <span class=\\\"hljs-type\\\">Weather</span> <span class=\\\"hljs-variable\\\">weather</span> <span class=\\\"hljs-operator\\\">=</span> <span class=\\\"hljs-keyword\\\">new</span> <span class=\\\"hljs-title class_\\\">Weather</span>();\\n    weather.addObserver(<span class=\\\"hljs-keyword\\\">new</span> <span class=\\\"hljs-title class_\\\">Orcs</span>());\\n    weather.timePasses();\\n    weather.timePasses();\\n    weather.timePasses();\\n    weather.timePasses();\\n  }\\n</code></pre>\\n<h4 id=\\\"通用模板\\\">通用模板</h4>\\n<h5 id=\\\"abstractsubject\\\">AbstractSubject</h5>\\n<pre><code class=\\\"hljs language-java\\\"><span class=\\\"hljs-comment\\\">/**\\n * 基于泛型和集合框架的通用Subject模板\\n * <span class=\\\"hljs-doctag\\\">@param</span> &lt;S&gt; Subject\\n * <span class=\\\"hljs-doctag\\\">@param</span> &lt;O&gt; Observer\\n * <span class=\\\"hljs-doctag\\\">@param</span> &lt;A&gt; Argument type\\n */</span>\\n<span class=\\\"hljs-keyword\\\">public</span> <span class=\\\"hljs-keyword\\\">abstract</span> <span class=\\\"hljs-keyword\\\">class</span> <span class=\\\"hljs-title class_\\\">Observable</span>&lt;\\n    S <span class=\\\"hljs-keyword\\\">extends</span> <span class=\\\"hljs-title class_\\\">Observable</span>&lt;S, O, A&gt;,\\n    O <span class=\\\"hljs-keyword\\\">extends</span> <span class=\\\"hljs-title class_\\\">Observer</span>&lt;S, O, A&gt;, \\n    A&gt; {\\n\\n  <span class=\\\"hljs-keyword\\\">protected</span> List&lt;O&gt; observers;\\n  <span class=\\\"hljs-keyword\\\">public</span> <span class=\\\"hljs-title function_\\\">Observable</span><span class=\\\"hljs-params\\\">()</span> {\\n      <span class=\\\"hljs-built_in\\\">this</span>.observers = <span class=\\\"hljs-keyword\\\">new</span> <span class=\\\"hljs-title class_\\\">CopyOnWriteArrayList</span>&lt;&gt;();    <span class=\\\"hljs-comment\\\">// 线程安全的实现</span>\\n  }\\n  <span class=\\\"hljs-keyword\\\">public</span> <span class=\\\"hljs-keyword\\\">void</span> <span class=\\\"hljs-title function_\\\">addObserver</span><span class=\\\"hljs-params\\\">(O observer)</span> {\\n      <span class=\\\"hljs-built_in\\\">this</span>.observers.add(observer);\\n  }\\n  <span class=\\\"hljs-keyword\\\">public</span> <span class=\\\"hljs-keyword\\\">void</span> <span class=\\\"hljs-title function_\\\">removeObserver</span><span class=\\\"hljs-params\\\">(O observer)</span> {\\n      <span class=\\\"hljs-built_in\\\">this</span>.observers.remove(observer);\\n  }\\n  <span class=\\\"hljs-keyword\\\">public</span> <span class=\\\"hljs-keyword\\\">void</span> <span class=\\\"hljs-title function_\\\">notifyObservers</span><span class=\\\"hljs-params\\\">(A argument)</span> {\\n    <span class=\\\"hljs-keyword\\\">for</span> (O observer : observers) {\\n      observer.update((S) <span class=\\\"hljs-built_in\\\">this</span>, argument);\\n    }\\n  }\\n}\\n</code></pre>\\n<h5 id=\\\"observer-interface\\\">Observer-Interface</h5>\\n<p>观察者接口的最顶层抽象接口</p>\\n<pre><code class=\\\"hljs language-java\\\"><span class=\\\"hljs-comment\\\">/**\\n * Observer\\n * <span class=\\\"hljs-doctag\\\">@param</span> &lt;S&gt; Observable\\n * <span class=\\\"hljs-doctag\\\">@param</span> &lt;O&gt; Observer\\n * <span class=\\\"hljs-doctag\\\">@param</span> &lt;A&gt; Action\\n */</span>\\n<span class=\\\"hljs-keyword\\\">public</span> <span class=\\\"hljs-keyword\\\">interface</span> <span class=\\\"hljs-title class_\\\">Observer</span>&lt;S <span class=\\\"hljs-keyword\\\">extends</span> <span class=\\\"hljs-title class_\\\">Observable</span>&lt;S, O, A&gt;, \\n                          O <span class=\\\"hljs-keyword\\\">extends</span> <span class=\\\"hljs-title class_\\\">Observer</span>&lt;S, O, A&gt;, \\n                          A&gt; {\\n\\n  <span class=\\\"hljs-keyword\\\">void</span> <span class=\\\"hljs-title function_\\\">update</span><span class=\\\"hljs-params\\\">(S subject, A argument)</span>;\\n}\\n</code></pre>\\n<h5 id=\\\"observer-generics-map\\\">Observer-Generics-Map</h5>\\n<p>规定好泛型的观察者接口</p>\\n<pre><code class=\\\"hljs language-java\\\"><span class=\\\"hljs-keyword\\\">public</span> <span class=\\\"hljs-keyword\\\">interface</span> <span class=\\\"hljs-title class_\\\">Race</span> <span class=\\\"hljs-keyword\\\">extends</span> <span class=\\\"hljs-title class_\\\">Observer</span>&lt;GWeather, Race, WeatherType&gt; {\\n}\\n</code></pre>\\n<h5 id=\\\"subject-implement\\\">Subject-Implement</h5>\\n<pre><code class=\\\"hljs language-java\\\"><span class=\\\"hljs-keyword\\\">public</span> <span class=\\\"hljs-keyword\\\">class</span> <span class=\\\"hljs-title class_\\\">GWeather</span> <span class=\\\"hljs-keyword\\\">extends</span> <span class=\\\"hljs-title class_\\\">Observable</span>&lt;GWeather, Race, WeatherType&gt; {\\n  <span class=\\\"hljs-keyword\\\">private</span> WeatherType currentWeather;\\n  <span class=\\\"hljs-keyword\\\">public</span> <span class=\\\"hljs-title function_\\\">GWeather</span><span class=\\\"hljs-params\\\">()</span> {\\n    currentWeather = WeatherType.SUNNY;\\n  }\\n  <span class=\\\"hljs-comment\\\">// 状态变更</span>\\n  <span class=\\\"hljs-keyword\\\">public</span> <span class=\\\"hljs-keyword\\\">void</span> <span class=\\\"hljs-title function_\\\">timePasses</span><span class=\\\"hljs-params\\\">()</span> {\\n    WeatherType[] enumValues = WeatherType.values();\\n    currentWeather = enumValues[(currentWeather.ordinal() + <span class=\\\"hljs-number\\\">1</span>) % enumValues.length];\\n    LOGGER.info(<span class=\\\"hljs-string\\\">&quot;The weather changed to {}.&quot;</span>, currentWeather);\\n    notifyObservers(currentWeather);  <span class=\\\"hljs-comment\\\">//通知</span>\\n  }\\n}\\n</code></pre>\\n<h5 id=\\\"observer-implement\\\">Observer-implement</h5>\\n<pre><code class=\\\"hljs language-java\\\"><span class=\\\"hljs-keyword\\\">public</span> <span class=\\\"hljs-keyword\\\">class</span> <span class=\\\"hljs-title class_\\\">GOrcs</span> <span class=\\\"hljs-keyword\\\">implements</span> <span class=\\\"hljs-title class_\\\">Race</span> {\\n\\n  <span class=\\\"hljs-meta\\\">@Override</span>\\n  <span class=\\\"hljs-keyword\\\">public</span> <span class=\\\"hljs-keyword\\\">void</span> <span class=\\\"hljs-title function_\\\">update</span><span class=\\\"hljs-params\\\">(GWeather weather, WeatherType weatherType)</span> {\\n    <span class=\\\"hljs-keyword\\\">switch</span> (weatherType) {\\n      <span class=\\\"hljs-comment\\\">// ...</span>\\n    }\\n  }\\n}\\n</code></pre>\\n<h5 id=\\\"main-1\\\">Main</h5>\\n<pre><code class=\\\"hljs language-java\\\">  <span class=\\\"hljs-keyword\\\">public</span> <span class=\\\"hljs-keyword\\\">static</span> <span class=\\\"hljs-keyword\\\">void</span> <span class=\\\"hljs-title function_\\\">main</span><span class=\\\"hljs-params\\\">(String[] args)</span> {\\n    <span class=\\\"hljs-type\\\">GWeather</span> <span class=\\\"hljs-variable\\\">gWeather</span> <span class=\\\"hljs-operator\\\">=</span> <span class=\\\"hljs-keyword\\\">new</span> <span class=\\\"hljs-title class_\\\">GWeather</span>();\\n    gWeather.addObserver(<span class=\\\"hljs-keyword\\\">new</span> <span class=\\\"hljs-title class_\\\">GOrcs</span>());\\n    gWeather.addObserver(<span class=\\\"hljs-keyword\\\">new</span> <span class=\\\"hljs-title class_\\\">GHobbits</span>());\\n\\n    gWeather.timePasses();\\n    gWeather.timePasses();\\n    gWeather.timePasses();\\n    gWeather.timePasses();\\n  }\\n</code></pre>\\n<h4 id=\\\"总结-1\\\">总结</h4>\\n<p>总的来说就是：<strong>观察者把自己的引用注册到发布者给的接口中，发布者每次状态变更就通知所有注册了的引用。</strong></p>\\n<hr>\\n<h3 id=\\\"decoratorwrapper\\\">Decorator/Wrapper</h3>\\n<p>装饰器（也称包装器）的意图是<strong>动态（运行时）、弹性的（可选）、无侵入的（不改源码）</strong>地给某个类添加功能或者增强功能。</p>\\n<p>参考项目的作者<code>iluwatter</code>有这样一段比喻：</p>\\n<blockquote>\\n<p>附近的山里有一只巨魔（Troll），他平时都空着手，偶尔也会拿着武器；</p>\\n<p>如果你要让同一只巨魔拿着武器的话，你不需要new一只一模一样的巨魔，你只需要包装这只巨魔就好了[doge]</p>\\n</blockquote>\\n<h4 id=\\\"object-interface-and-simple-implement\\\">Object-Interface and Simple Implement</h4>\\n<pre><code class=\\\"hljs language-java\\\"><span class=\\\"hljs-keyword\\\">public</span> <span class=\\\"hljs-keyword\\\">interface</span> <span class=\\\"hljs-title class_\\\">Troll</span> {\\n  <span class=\\\"hljs-keyword\\\">void</span> <span class=\\\"hljs-title function_\\\">attack</span><span class=\\\"hljs-params\\\">()</span>;\\n  <span class=\\\"hljs-type\\\">int</span> <span class=\\\"hljs-title function_\\\">getAttackPower</span><span class=\\\"hljs-params\\\">()</span>;\\n}\\n\\n<span class=\\\"hljs-keyword\\\">public</span> <span class=\\\"hljs-keyword\\\">class</span> <span class=\\\"hljs-title class_\\\">SimpleTroll</span> <span class=\\\"hljs-keyword\\\">implements</span> <span class=\\\"hljs-title class_\\\">Troll</span> {\\n  <span class=\\\"hljs-meta\\\">@Override</span>\\n  <span class=\\\"hljs-keyword\\\">public</span> <span class=\\\"hljs-keyword\\\">void</span> <span class=\\\"hljs-title function_\\\">attack</span><span class=\\\"hljs-params\\\">()</span> {\\n    System.out.println(<span class=\\\"hljs-string\\\">&quot;hp - &quot;</span> + <span class=\\\"hljs-built_in\\\">this</span>.getAttackPower());\\n  }\\n  <span class=\\\"hljs-meta\\\">@Override</span>\\n  <span class=\\\"hljs-keyword\\\">public</span> <span class=\\\"hljs-type\\\">int</span> <span class=\\\"hljs-title function_\\\">getAttackPower</span><span class=\\\"hljs-params\\\">()</span> {\\n    <span class=\\\"hljs-keyword\\\">return</span> <span class=\\\"hljs-number\\\">10</span>;\\n  }\\n}\\n</code></pre>\\n<p>现在我们有一只攻击力+10的巨魔，接下来我们给它把无尽</p>\\n<h4 id=\\\"decorator\\\">Decorator</h4>\\n<pre><code class=\\\"hljs language-java\\\"><span class=\\\"hljs-keyword\\\">public</span> <span class=\\\"hljs-keyword\\\">class</span> <span class=\\\"hljs-title class_\\\">ClubbedTroll</span> <span class=\\\"hljs-keyword\\\">implements</span> <span class=\\\"hljs-title class_\\\">Troll</span> {\\n  <span class=\\\"hljs-keyword\\\">private</span> Troll decorated;\\n  <span class=\\\"hljs-keyword\\\">public</span> <span class=\\\"hljs-title function_\\\">ClubbedTroll</span><span class=\\\"hljs-params\\\">(Troll decorated)</span> {\\n    <span class=\\\"hljs-built_in\\\">this</span>.decorated = decorated;\\n  }\\n  <span class=\\\"hljs-meta\\\">@Override</span>\\n  <span class=\\\"hljs-keyword\\\">public</span> <span class=\\\"hljs-keyword\\\">void</span> <span class=\\\"hljs-title function_\\\">attack</span><span class=\\\"hljs-params\\\">()</span> {\\n    System.out.println(<span class=\\\"hljs-string\\\">&quot;hp - &quot;</span> + <span class=\\\"hljs-built_in\\\">this</span>.getAttackPower());\\n  }\\n  <span class=\\\"hljs-meta\\\">@Override</span>\\n  <span class=\\\"hljs-keyword\\\">public</span> <span class=\\\"hljs-type\\\">int</span> <span class=\\\"hljs-title function_\\\">getAttackPower</span><span class=\\\"hljs-params\\\">()</span> {\\n    <span class=\\\"hljs-keyword\\\">return</span> decorated.getAttackPower() + <span class=\\\"hljs-number\\\">100</span>;\\n  }\\n}\\n</code></pre>\\n<h4 id=\\\"main-2\\\">Main</h4>\\n<pre><code class=\\\"hljs language-java\\\"><span class=\\\"hljs-comment\\\">// 空手巨魔</span>\\n<span class=\\\"hljs-type\\\">Troll</span> <span class=\\\"hljs-variable\\\">troll</span> <span class=\\\"hljs-operator\\\">=</span> <span class=\\\"hljs-keyword\\\">new</span> <span class=\\\"hljs-title class_\\\">SimpleTroll</span>();\\ntroll.attack(); <span class=\\\"hljs-comment\\\">// 平A无暴击</span>\\n\\n<span class=\\\"hljs-comment\\\">// 出无尽的巨魔</span>\\ntroll = <span class=\\\"hljs-keyword\\\">new</span> <span class=\\\"hljs-title class_\\\">ClubbedTroll</span>(troll);\\ntroll.attack(); <span class=\\\"hljs-comment\\\">// 暴击！</span>\\n</code></pre>\\n<h4 id=\\\"总结-2\\\">总结</h4>\\n<p>感觉和AOP差不多，只不过实现思路和需求不一样</p>\\n<hr>\\n<h3 id=\\\"adapterwrapper\\\">Adapter/Wrapper</h3>\\n<p>适配器模式，也是包装模式的一种，它和装饰器模式有一方面像的一点就是，它们都是包装要使用的类，只不过装饰器是针对同一种类去包装，企图强化这个类；而适配器是要包装两个类为一个统一的类，在适配器里兼容一个类的输出，让它的输出为另一个类可用的输入，适配器输出这另一个类的输出，企图让这两个类联合工作。</p>\\n<p>参考项目的作者<code>iluwatter</code>有这样一段比喻：</p>\\n<blockquote>\\n<p>假设你想将你内存卡上的一些图片传到你电脑上去，你需要一种适配器，这个适配器可以适用于你电脑的端口，这样你才能将你的内存卡装载到你的电脑上去，在这个例子里面，读卡器就是一个适配器。</p>\\n</blockquote>\\n<p>专业的解释就是：</p>\\n<blockquote>\\n<p>适配器是要包装两个类为一个统一的类，在适配器里兼容一个类的输出，让它的输出为另一个类可用的输入，适配器输出这另一个类的输出，企图让这两个类联合工作。（这话是我说的~）</p>\\n</blockquote>\\n<h4 id=\\\"two-interfaces\\\">Two Interfaces</h4>\\n<p>首先我们来看适配器要适配的两个对象类，场景如下：<code>假设船长只会划船，并不会航海，但是旁边有一艘渔船可以出海</code>，于是我们先有两个接口，划船只能划水，渔船可以航海：</p>\\n<pre><code class=\\\"hljs language-java\\\"><span class=\\\"hljs-keyword\\\">public</span> <span class=\\\"hljs-keyword\\\">interface</span> <span class=\\\"hljs-title class_\\\">RowingBoat</span> {\\n  <span class=\\\"hljs-keyword\\\">void</span> <span class=\\\"hljs-title function_\\\">row</span><span class=\\\"hljs-params\\\">()</span>;\\n}\\n\\n<span class=\\\"hljs-keyword\\\">public</span> <span class=\\\"hljs-keyword\\\">class</span> <span class=\\\"hljs-title class_\\\">FishingBoat</span> {\\n  <span class=\\\"hljs-keyword\\\">public</span> <span class=\\\"hljs-keyword\\\">void</span> <span class=\\\"hljs-title function_\\\">sail</span><span class=\\\"hljs-params\\\">()</span> {\\n    System.out.println(<span class=\\\"hljs-string\\\">&quot;The fishing boat is sailing&quot;</span>);\\n  }\\n}\\n</code></pre>\\n<h4 id=\\\"user\\\">User</h4>\\n<p>再来看看我们的船长：</p>\\n<pre><code class=\\\"hljs language-java\\\"><span class=\\\"hljs-keyword\\\">public</span> <span class=\\\"hljs-keyword\\\">class</span> <span class=\\\"hljs-title class_\\\">Captain</span> <span class=\\\"hljs-keyword\\\">implements</span> <span class=\\\"hljs-title class_\\\">RowingBoat</span> {\\n\\n  <span class=\\\"hljs-keyword\\\">private</span> RowingBoat rowingBoat;\\n\\n  <span class=\\\"hljs-keyword\\\">public</span> <span class=\\\"hljs-title function_\\\">Captain</span><span class=\\\"hljs-params\\\">(RowingBoat rowingBoat)</span> {\\n    <span class=\\\"hljs-built_in\\\">this</span>.rowingBoat = rowingBoat;\\n  }\\n\\n  <span class=\\\"hljs-meta\\\">@Override</span>\\n  <span class=\\\"hljs-keyword\\\">public</span> <span class=\\\"hljs-keyword\\\">void</span> <span class=\\\"hljs-title function_\\\">row</span><span class=\\\"hljs-params\\\">()</span> {\\n    rowingBoat.row();\\n  }\\n}\\n</code></pre>\\n<p>可以看到，这里有一个关键的地方，船长实现RowingBoat类的方式是解耦的，是传入一个RowingBoat对象，基于这个，我们可以编写一个适配器</p>\\n<h4 id=\\\"adapter\\\">Adapter</h4>\\n<pre><code class=\\\"hljs language-java\\\"><span class=\\\"hljs-keyword\\\">public</span> <span class=\\\"hljs-keyword\\\">class</span> <span class=\\\"hljs-title class_\\\">FishingBoatAdapter</span> <span class=\\\"hljs-keyword\\\">implements</span> <span class=\\\"hljs-title class_\\\">RowingBoat</span> {\\n  <span class=\\\"hljs-keyword\\\">private</span> FishingBoat boat;\\n  <span class=\\\"hljs-keyword\\\">public</span> <span class=\\\"hljs-title function_\\\">FishingBoatAdapter</span><span class=\\\"hljs-params\\\">()</span> {\\n    boat = <span class=\\\"hljs-keyword\\\">new</span> <span class=\\\"hljs-title class_\\\">FishingBoat</span>();\\n  }\\n  <span class=\\\"hljs-meta\\\">@Override</span>\\n  <span class=\\\"hljs-keyword\\\">public</span> <span class=\\\"hljs-keyword\\\">void</span> <span class=\\\"hljs-title function_\\\">row</span><span class=\\\"hljs-params\\\">()</span> {\\n    boat.sail();\\n  }\\n}\\n</code></pre>\\n<p>在这个适配器中我们可以看到，我们将<code>RowingBoat</code>中的<code>row()</code>方法实现为<code>FishingBoat</code>的<code>sail()</code>方法</p>\\n<h4 id=\\\"main-3\\\">Main</h4>\\n<pre><code class=\\\"hljs language-java\\\"><span class=\\\"hljs-type\\\">Captain</span> <span class=\\\"hljs-variable\\\">captain</span> <span class=\\\"hljs-operator\\\">=</span> <span class=\\\"hljs-keyword\\\">new</span> <span class=\\\"hljs-title class_\\\">Captain</span>(<span class=\\\"hljs-keyword\\\">new</span> <span class=\\\"hljs-title class_\\\">FishingBoatAdapter</span>());\\ncaptain.row();\\n</code></pre>\\n<h4 id=\\\"总结-3\\\">总结</h4>\\n<p>总的来说，适配器和装饰器差不多，我们需要注意的点是，我们的使用者需要对原来的对象有良好的解耦支持，这样我们适配后的对象才能更好地被使用者使用。</p>\\n<hr>\\n<h3 id=\\\"factory\\\">Factory</h3>\\n<p>工厂模式，在工程化编程中有着举足轻重的地位，将对象的创建、参数分派等行为工程化，是一个项目严谨编写的第一步体现。</p>\\n<p>项目的作者写分别引了<code>Factory-method</code>和<code>Factory-kit</code>两部分，我们先从method开始说起</p>\\n<h4 id=\\\"factory-method\\\">Factory-method</h4>\\n<p>工厂方法模式，是要定义一个专门用于创建对象的接口，只不过创建对象的方式是让实现子类去决定应该创建具体哪一个对象，工厂方法模式<strong>让一个类将实例化过程延迟到子类上</strong>。</p>\\n<p>我们来看比喻：</p>\\n<blockquote>\\n<p> 一个铁匠（BlackSmith）打造（manufacture）武器，精灵（Elves）要求使用小巧的（Elvish）武器，半兽人（Orcs）要求使用重型武器（Orcish）。根据客户要求的不同会召集到打造同一类型武器的铁匠。</p>\\n</blockquote>\\n<p>专业的解释：</p>\\n<blockquote>\\n<p>将实例化过程的逻辑以委派方式提供给子类</p>\\n</blockquote>\\n<h5 id=\\\"factory-interface\\\">Factory Interface</h5>\\n<pre><code class=\\\"hljs language-java\\\"><span class=\\\"hljs-keyword\\\">public</span> <span class=\\\"hljs-keyword\\\">interface</span> <span class=\\\"hljs-title class_\\\">Blacksmith</span> {\\n  Weapon <span class=\\\"hljs-title function_\\\">manufactureWeapon</span><span class=\\\"hljs-params\\\">(WeaponType weaponType)</span>;\\n}\\n</code></pre>\\n<p>首先我们有个工厂类，这个类代表能够制造武器的工匠（先不管可以制造什么类型的武器）</p>\\n<p>然后下面就是武器的抽象接口和武器的类型</p>\\n<h5 id=\\\"product-interface\\\">Product Interface</h5>\\n<pre><code class=\\\"hljs language-java\\\"><span class=\\\"hljs-keyword\\\">public</span> <span class=\\\"hljs-keyword\\\">interface</span> <span class=\\\"hljs-title class_\\\">Weapon</span> {\\n  WeaponType <span class=\\\"hljs-title function_\\\">getWeaponType</span><span class=\\\"hljs-params\\\">()</span>;\\n}\\n<span class=\\\"hljs-keyword\\\">public</span> <span class=\\\"hljs-keyword\\\">enum</span> <span class=\\\"hljs-title class_\\\">WeaponType</span> {\\n  SHORT_SWORD(<span class=\\\"hljs-string\\\">&quot;short sword&quot;</span>), SPEAR(<span class=\\\"hljs-string\\\">&quot;spear&quot;</span>), AXE(<span class=\\\"hljs-string\\\">&quot;axe&quot;</span>), UNDEFINED(<span class=\\\"hljs-string\\\">&quot;&quot;</span>);\\n  <span class=\\\"hljs-keyword\\\">private</span> String title;\\n  WeaponType(String title) {\\n    <span class=\\\"hljs-built_in\\\">this</span>.title = title;\\n  }\\n  <span class=\\\"hljs-meta\\\">@Override</span>\\n  <span class=\\\"hljs-keyword\\\">public</span> String <span class=\\\"hljs-title function_\\\">toString</span><span class=\\\"hljs-params\\\">()</span> {\\n    <span class=\\\"hljs-keyword\\\">return</span> title;\\n  }\\n}\\n</code></pre>\\n<h5 id=\\\"different-instance-class\\\">Different Instance Class</h5>\\n<p>然后我们有不同的实例类，分别是精灵武器和兽人武器</p>\\n<pre><code class=\\\"hljs language-java\\\"><span class=\\\"hljs-keyword\\\">public</span> <span class=\\\"hljs-keyword\\\">class</span> <span class=\\\"hljs-title class_\\\">ElfWeapon</span> <span class=\\\"hljs-keyword\\\">implements</span> <span class=\\\"hljs-title class_\\\">Weapon</span> {\\n  <span class=\\\"hljs-keyword\\\">private</span> WeaponType weaponType;\\n  <span class=\\\"hljs-keyword\\\">public</span> <span class=\\\"hljs-title function_\\\">ElfWeapon</span><span class=\\\"hljs-params\\\">(WeaponType weaponType)</span> {<span class=\\\"hljs-built_in\\\">this</span>.weaponType = weaponType;}\\n  <span class=\\\"hljs-meta\\\">@Override</span>\\n  <span class=\\\"hljs-keyword\\\">public</span> String <span class=\\\"hljs-title function_\\\">toString</span><span class=\\\"hljs-params\\\">()</span> {<span class=\\\"hljs-keyword\\\">return</span> <span class=\\\"hljs-string\\\">&quot;Elven &quot;</span> + weaponType;}\\n  <span class=\\\"hljs-meta\\\">@Override</span>\\n  <span class=\\\"hljs-keyword\\\">public</span> WeaponType <span class=\\\"hljs-title function_\\\">getWeaponType</span><span class=\\\"hljs-params\\\">()</span> {<span class=\\\"hljs-keyword\\\">return</span> weaponType;}\\n}\\n<span class=\\\"hljs-comment\\\">// ============================</span>\\n<span class=\\\"hljs-keyword\\\">public</span> <span class=\\\"hljs-keyword\\\">class</span> <span class=\\\"hljs-title class_\\\">OrcWeapon</span> <span class=\\\"hljs-keyword\\\">implements</span> <span class=\\\"hljs-title class_\\\">Weapon</span> {\\n  <span class=\\\"hljs-keyword\\\">private</span> WeaponType weaponType;\\n  <span class=\\\"hljs-keyword\\\">public</span> <span class=\\\"hljs-title function_\\\">OrcWeapon</span><span class=\\\"hljs-params\\\">(WeaponType weaponType)</span> {<span class=\\\"hljs-built_in\\\">this</span>.weaponType = weaponType;}\\n  <span class=\\\"hljs-meta\\\">@Override</span>\\n  <span class=\\\"hljs-keyword\\\">public</span> String <span class=\\\"hljs-title function_\\\">toString</span><span class=\\\"hljs-params\\\">()</span> {<span class=\\\"hljs-keyword\\\">return</span> <span class=\\\"hljs-string\\\">&quot;Orcish &quot;</span> + weaponType;}\\n  <span class=\\\"hljs-meta\\\">@Override</span>\\n  <span class=\\\"hljs-keyword\\\">public</span> WeaponType <span class=\\\"hljs-title function_\\\">getWeaponType</span><span class=\\\"hljs-params\\\">()</span> {<span class=\\\"hljs-keyword\\\">return</span> weaponType;}\\n}\\n</code></pre>\\n<h5 id=\\\"different-factory-class\\\">Different Factory Class</h5>\\n<p>然后我们有不同的工厂类，分别是精灵武器工匠和兽人武器工具</p>\\n<pre><code class=\\\"hljs language-java\\\"><span class=\\\"hljs-keyword\\\">public</span> <span class=\\\"hljs-keyword\\\">class</span> <span class=\\\"hljs-title class_\\\">ElfBlacksmith</span> <span class=\\\"hljs-keyword\\\">implements</span> <span class=\\\"hljs-title class_\\\">Blacksmith</span> {\\n  <span class=\\\"hljs-keyword\\\">public</span> Weapon <span class=\\\"hljs-title function_\\\">manufactureWeapon</span><span class=\\\"hljs-params\\\">(WeaponType weaponType)</span> {\\n    <span class=\\\"hljs-keyword\\\">return</span> <span class=\\\"hljs-keyword\\\">new</span> <span class=\\\"hljs-title class_\\\">ElfWeapon</span>(weaponType);\\n  }\\n}\\n<span class=\\\"hljs-comment\\\">// =============================</span>\\n<span class=\\\"hljs-keyword\\\">public</span> <span class=\\\"hljs-keyword\\\">class</span> <span class=\\\"hljs-title class_\\\">OrcBlacksmith</span> <span class=\\\"hljs-keyword\\\">implements</span> <span class=\\\"hljs-title class_\\\">Blacksmith</span> {\\n  <span class=\\\"hljs-keyword\\\">public</span> Weapon <span class=\\\"hljs-title function_\\\">manufactureWeapon</span><span class=\\\"hljs-params\\\">(WeaponType weaponType)</span> {\\n    <span class=\\\"hljs-keyword\\\">return</span> <span class=\\\"hljs-keyword\\\">new</span> <span class=\\\"hljs-title class_\\\">OrcWeapon</span>(weaponType);\\n  }\\n}\\n</code></pre>\\n<h5 id=\\\"main-4\\\">Main</h5>\\n<pre><code class=\\\"hljs language-java\\\"><span class=\\\"hljs-keyword\\\">public</span> <span class=\\\"hljs-keyword\\\">class</span> <span class=\\\"hljs-title class_\\\">App</span> {\\n  <span class=\\\"hljs-keyword\\\">private</span> <span class=\\\"hljs-keyword\\\">final</span> Blacksmith blacksmith;\\n  <span class=\\\"hljs-keyword\\\">public</span> <span class=\\\"hljs-title function_\\\">App</span><span class=\\\"hljs-params\\\">(Blacksmith blacksmith)</span> {\\n    <span class=\\\"hljs-built_in\\\">this</span>.blacksmith = blacksmith;\\n  }\\n  \\n  <span class=\\\"hljs-keyword\\\">public</span> <span class=\\\"hljs-keyword\\\">static</span> <span class=\\\"hljs-keyword\\\">void</span> <span class=\\\"hljs-title function_\\\">main</span><span class=\\\"hljs-params\\\">(String[] args)</span> {\\n    <span class=\\\"hljs-comment\\\">// Lets go to war with Orc weapons</span>\\n    <span class=\\\"hljs-type\\\">App</span> <span class=\\\"hljs-variable\\\">app</span> <span class=\\\"hljs-operator\\\">=</span> <span class=\\\"hljs-keyword\\\">new</span> <span class=\\\"hljs-title class_\\\">App</span>(<span class=\\\"hljs-keyword\\\">new</span> <span class=\\\"hljs-title class_\\\">OrcBlacksmith</span>());\\n    app.manufactureWeapons();\\n \\n    <span class=\\\"hljs-comment\\\">// Lets go to war with Elf weapons</span>\\n    app = <span class=\\\"hljs-keyword\\\">new</span> <span class=\\\"hljs-title class_\\\">App</span>(<span class=\\\"hljs-keyword\\\">new</span> <span class=\\\"hljs-title class_\\\">ElfBlacksmith</span>());\\n    app.manufactureWeapons();\\n  }\\n  \\n  <span class=\\\"hljs-keyword\\\">private</span> <span class=\\\"hljs-keyword\\\">void</span> <span class=\\\"hljs-title function_\\\">manufactureWeapons</span><span class=\\\"hljs-params\\\">()</span> {\\n    Weapon weapon;\\n    weapon = blacksmith.manufactureWeapon(WeaponType.SPEAR);\\n    <span class=\\\"hljs-comment\\\">//weapon = blacksmith.manufactureWeapon(WeaponType.AXE);</span>\\n  }\\n}\\n</code></pre>\\n<p>通过上面的<code>Factory-method</code>的例子，不难发现代码的解耦性还是不高，感觉创造者和工厂本身，这两个概念还是有点摸棱两可的，我们在正确地理顺一下工厂模式到底怎么回事：</p>\\n<blockquote>\\n<ol>\\n<li>首先一个工厂（Factory）只生产同一类产品（Product），这里将工厂映射为<code>BlackSmith interface</code>接口，他可以制造<code>Weapon</code>对象</li>\\n<li>其次产品有很多种产品，所以我们也把产品抽象成接口<code>Weapon interface</code></li>\\n<li>那么我们要指派不同的创造者（Producer/Builder），去生产不同的产品，这其实就是不同的工厂接口的实现，这映射到的就是<code>ElfBlacksmith</code>和<code>OrcBlacksmith</code>，分别生产<code>ElfWeapon</code>和<code>OrcWeapon</code></li>\\n<li>最后在App里面，完美地使用了多态的特性：<strong>父类引用指向子类对象</strong></li>\\n</ol>\\n</blockquote>\\n<h4 id=\\\"factory-kit\\\">Factory-kit</h4>\\n<p>为了更加清晰化工厂模式，于是就有了<code>Factory-kit</code>，意图定义一个不变的常量来将工匠和工厂区分开来</p>\\n<h5 id=\\\"product\\\">Product</h5>\\n<p>我们先看产品有哪些：</p>\\n<pre><code class=\\\"hljs language-java\\\"><span class=\\\"hljs-keyword\\\">public</span> <span class=\\\"hljs-keyword\\\">interface</span> <span class=\\\"hljs-title class_\\\">Weapon</span> {\\n}\\n<span class=\\\"hljs-keyword\\\">public</span> <span class=\\\"hljs-keyword\\\">class</span> <span class=\\\"hljs-title class_\\\">Axe</span> <span class=\\\"hljs-keyword\\\">implements</span> <span class=\\\"hljs-title class_\\\">Weapon</span> {\\n  <span class=\\\"hljs-meta\\\">@Override</span>\\n  <span class=\\\"hljs-keyword\\\">public</span> String <span class=\\\"hljs-title function_\\\">toString</span><span class=\\\"hljs-params\\\">()</span> {\\n    <span class=\\\"hljs-keyword\\\">return</span> <span class=\\\"hljs-string\\\">&quot;Axe&quot;</span>;\\n  }\\n}\\n<span class=\\\"hljs-keyword\\\">public</span> <span class=\\\"hljs-keyword\\\">class</span> <span class=\\\"hljs-title class_\\\">Bow</span> <span class=\\\"hljs-keyword\\\">implements</span> <span class=\\\"hljs-title class_\\\">Weapon</span> {\\n  <span class=\\\"hljs-meta\\\">@Override</span>\\n  <span class=\\\"hljs-keyword\\\">public</span> String <span class=\\\"hljs-title function_\\\">toString</span><span class=\\\"hljs-params\\\">()</span> {\\n    <span class=\\\"hljs-keyword\\\">return</span> <span class=\\\"hljs-string\\\">&quot;Bow&quot;</span>;\\n  }\\n}\\n<span class=\\\"hljs-keyword\\\">public</span> <span class=\\\"hljs-keyword\\\">class</span> <span class=\\\"hljs-title class_\\\">Sword</span> <span class=\\\"hljs-keyword\\\">implements</span> <span class=\\\"hljs-title class_\\\">Weapon</span> {\\n  <span class=\\\"hljs-meta\\\">@Override</span>\\n  <span class=\\\"hljs-keyword\\\">public</span> String <span class=\\\"hljs-title function_\\\">toString</span><span class=\\\"hljs-params\\\">()</span> {\\n    <span class=\\\"hljs-keyword\\\">return</span> <span class=\\\"hljs-string\\\">&quot;Sword&quot;</span>;\\n  }\\n}\\n<span class=\\\"hljs-keyword\\\">public</span> <span class=\\\"hljs-keyword\\\">enum</span> <span class=\\\"hljs-title class_\\\">WeaponType</span> {\\n  SWORD, AXE, BOW\\n}\\n</code></pre>\\n<h5 id=\\\"builder\\\">Builder</h5>\\n<p>再看看工匠，这里用到了Java8的函数式特性，传入一个供给者对象</p>\\n<pre><code class=\\\"hljs language-java\\\"><span class=\\\"hljs-keyword\\\">public</span> <span class=\\\"hljs-keyword\\\">interface</span> <span class=\\\"hljs-title class_\\\">Builder</span> {\\n  <span class=\\\"hljs-keyword\\\">void</span> <span class=\\\"hljs-title function_\\\">add</span><span class=\\\"hljs-params\\\">(WeaponType name, Supplier&lt;Weapon&gt; supplier)</span>;            <span class=\\\"hljs-comment\\\">// 4</span>\\n}\\n</code></pre>\\n<h5 id=\\\"factory-1\\\">Factory</h5>\\n<p>接下来就是重点，看看我们的工厂是如何协调工匠和产品的</p>\\n<pre><code class=\\\"hljs language-java\\\"><span class=\\\"hljs-keyword\\\">public</span> <span class=\\\"hljs-keyword\\\">interface</span> <span class=\\\"hljs-title class_\\\">WeaponFactory</span> {\\n  <span class=\\\"hljs-comment\\\">// 制造武器，根据传入的WeaponType选取工厂中存在的工匠制造想对应的武器</span>\\n  Weapon <span class=\\\"hljs-title function_\\\">create</span><span class=\\\"hljs-params\\\">(WeaponType name)</span>;                                <span class=\\\"hljs-comment\\\">// 6</span>\\n\\n  <span class=\\\"hljs-comment\\\">// 聚集工匠，factory负责维护一个map，一种武器类型对应一类工匠</span>\\n  <span class=\\\"hljs-keyword\\\">static</span> WeaponFactory <span class=\\\"hljs-title function_\\\">factory</span><span class=\\\"hljs-params\\\">(Consumer&lt;Builder&gt; consumer)</span> {    <span class=\\\"hljs-comment\\\">// 1.2</span>\\n    Map&lt;WeaponType, Supplier&lt;Weapon&gt;&gt; map = <span class=\\\"hljs-keyword\\\">new</span> <span class=\\\"hljs-title class_\\\">HashMap</span>&lt;&gt;();    <span class=\\\"hljs-comment\\\">// 2</span>\\n    consumer.accept(map::put);                                    <span class=\\\"hljs-comment\\\">// 3.0</span>\\n    <span class=\\\"hljs-keyword\\\">return</span> name -&gt; map.get(name).get();                            <span class=\\\"hljs-comment\\\">// 5</span>\\n  }\\n}\\n</code></pre>\\n<h5 id=\\\"main-5\\\">Main</h5>\\n<pre><code class=\\\"hljs language-java\\\"><span class=\\\"hljs-keyword\\\">public</span> <span class=\\\"hljs-keyword\\\">class</span> <span class=\\\"hljs-title class_\\\">App</span> {\\n  <span class=\\\"hljs-keyword\\\">public</span> <span class=\\\"hljs-keyword\\\">static</span> <span class=\\\"hljs-keyword\\\">void</span> <span class=\\\"hljs-title function_\\\">main</span><span class=\\\"hljs-params\\\">(String[] args)</span> {\\n    <span class=\\\"hljs-type\\\">WeaponFactory</span> <span class=\\\"hljs-variable\\\">factory</span> <span class=\\\"hljs-operator\\\">=</span> WeaponFactory.factory(builder -&gt; {    <span class=\\\"hljs-comment\\\">// 1.1</span>\\n      builder.add(WeaponType.SWORD, Sword::<span class=\\\"hljs-keyword\\\">new</span>);                <span class=\\\"hljs-comment\\\">// 3.1</span>\\n      builder.add(WeaponType.AXE, Axe::<span class=\\\"hljs-keyword\\\">new</span>);                    <span class=\\\"hljs-comment\\\">// 3.2</span>\\n      builder.add(WeaponType.SPEAR, Spear::<span class=\\\"hljs-keyword\\\">new</span>);                <span class=\\\"hljs-comment\\\">// 3.3</span>\\n      builder.add(WeaponType.BOW, Bow::<span class=\\\"hljs-keyword\\\">new</span>);                    <span class=\\\"hljs-comment\\\">// 3.4</span>\\n    });\\n    <span class=\\\"hljs-type\\\">Weapon</span> <span class=\\\"hljs-variable\\\">axe</span> <span class=\\\"hljs-operator\\\">=</span> factory.create(WeaponType.AXE);\\n    System.out.println(axe.toString());\\n  }\\n}\\n</code></pre>\\n<p>这里有一段稍微难懂的方法引用语法，我们可以这样理解，跟着标号走</p>\\n<ol>\\n<li>首先传入一个<code>consumer</code>对象（1.1-1.2），这个对象就是Builder，它要实现的唯一方法就是<code>add</code>方法，在括号内我们注意到他利用<code>builder</code>调用了多次<code>add</code>方法，将武器类型和武器对象一一对应了起来；</li>\\n<li>维护一个map，用作映射武器类型名字和武器制造方法（Suplier）这个武器制造方法可以制造一种武器</li>\\n<li>3.0的代码代表，<code>builder.add(a, b)</code>传入的参数a和b被这个map的<code>put</code>方法所接管，在这个意义上，我们在<code>Main</code>中看到的3.1-3.4相当于在<code>Factory.factory()</code>方法中调用map的<code>put</code>方法，我们看到3.1-3.4后一个参数是一个构造方法引用，用于作为Suplier对象来直接返回一个武器对象</li>\\n<li>往上看到的是Builder的add方法，这个方法的实现被3.0接管了</li>\\n<li>看到这个return语句，千万不要会错意，这个return语句其实是上面<code>create</code>方法的实现语句，用于返回一件武器</li>\\n<li>这段实现真的是无比的迷，毫无逻辑可言</li>\\n</ol>\\n<p>大致看懂这段语法糖之后，可以自己尝试实现一个平民版的工厂Kit，函数式编程很大程度上扭曲了Java程序编程的直接意图，让程序晦涩难懂，复现难度大。</p>\\n<h4 id=\\\"friendly-factory-kit\\\">Friendly Factory-kit</h4>\\n<p>下面是我改进的亲民版的<code>Factory-kit</code>，虽然也用到了Lambda和方法引用，但是特别强调了面向对象思想，并不难懂</p>\\n<h5 id=\\\"interfaces\\\">Interfaces</h5>\\n<pre><code class=\\\"hljs language-java\\\"><span class=\\\"hljs-keyword\\\">public</span> <span class=\\\"hljs-keyword\\\">interface</span> <span class=\\\"hljs-title class_\\\">Builder</span> {\\n    Product <span class=\\\"hljs-title function_\\\">build</span><span class=\\\"hljs-params\\\">()</span>;\\n}\\n<span class=\\\"hljs-keyword\\\">public</span> <span class=\\\"hljs-keyword\\\">interface</span> <span class=\\\"hljs-title class_\\\">Product</span> {\\n}\\n</code></pre>\\n<p>两个接口，一个代表工匠，提供一个<code>buili()</code>方法去获取<code>Product</code>，一个<code>Product</code>接口用做类型约束</p>\\n<h5 id=\\\"factory-2\\\">Factory</h5>\\n<pre><code class=\\\"hljs language-java\\\"><span class=\\\"hljs-keyword\\\">public</span> <span class=\\\"hljs-keyword\\\">class</span> <span class=\\\"hljs-title class_\\\">Factory</span>&lt;PT&gt; {\\n    <span class=\\\"hljs-keyword\\\">private</span> HashMap&lt;PT, Builder&gt; builders = <span class=\\\"hljs-keyword\\\">new</span> <span class=\\\"hljs-title class_\\\">HashMap</span>&lt;&gt;();\\n\\n    <span class=\\\"hljs-keyword\\\">void</span> <span class=\\\"hljs-title function_\\\">addBuilder</span><span class=\\\"hljs-params\\\">(PT productType, Builder builder)</span> {\\n        builders.put(productType, builder);\\n    }\\n\\n    <span class=\\\"hljs-keyword\\\">public</span> Product <span class=\\\"hljs-title function_\\\">produce</span><span class=\\\"hljs-params\\\">(PT productType)</span> {\\n        <span class=\\\"hljs-keyword\\\">return</span> builders.get(productType).build();\\n    }\\n}\\n</code></pre>\\n<p>注意<code>addBuilder</code>方法，第二个参数直接就是Builder，因为你观察Builder可以发现，Builder接口直接就可以是一个<code>Supplier</code>，用以直接生产产品</p>\\n<h5 id=\\\"implements\\\">Implements</h5>\\n<h6 id=\\\"product-implemenets\\\">Product implemenets</h6>\\n<pre><code class=\\\"hljs language-java\\\"><span class=\\\"hljs-keyword\\\">public</span> <span class=\\\"hljs-keyword\\\">class</span> <span class=\\\"hljs-title class_\\\">Axe</span> <span class=\\\"hljs-keyword\\\">implements</span> <span class=\\\"hljs-title class_\\\">Product</span> {\\n  <span class=\\\"hljs-meta\\\">@Override</span>\\n  <span class=\\\"hljs-keyword\\\">public</span> String <span class=\\\"hljs-title function_\\\">toString</span><span class=\\\"hljs-params\\\">()</span> {\\n    <span class=\\\"hljs-keyword\\\">return</span> <span class=\\\"hljs-string\\\">&quot;Axe&quot;</span>;\\n  }\\n}\\n<span class=\\\"hljs-keyword\\\">public</span> <span class=\\\"hljs-keyword\\\">class</span> <span class=\\\"hljs-title class_\\\">Bow</span> <span class=\\\"hljs-keyword\\\">implements</span> <span class=\\\"hljs-title class_\\\">Product</span> {\\n  <span class=\\\"hljs-meta\\\">@Override</span>\\n  <span class=\\\"hljs-keyword\\\">public</span> String <span class=\\\"hljs-title function_\\\">toString</span><span class=\\\"hljs-params\\\">()</span> {\\n    <span class=\\\"hljs-keyword\\\">return</span> <span class=\\\"hljs-string\\\">&quot;Bow&quot;</span>;\\n  }\\n}\\n<span class=\\\"hljs-keyword\\\">public</span> <span class=\\\"hljs-keyword\\\">enum</span> <span class=\\\"hljs-title class_\\\">WeaponType</span> {\\n  AXE, BOW\\n}\\n</code></pre>\\n<h6 id=\\\"factory-implements\\\">Factory implements</h6>\\n<pre><code class=\\\"hljs language-java\\\"><span class=\\\"hljs-keyword\\\">public</span> <span class=\\\"hljs-keyword\\\">class</span> <span class=\\\"hljs-title class_\\\">WeaponFactory</span> <span class=\\\"hljs-keyword\\\">extends</span> <span class=\\\"hljs-title class_\\\">Factory</span>&lt;WeaponType&gt; {\\n    <span class=\\\"hljs-keyword\\\">public</span> <span class=\\\"hljs-title function_\\\">WeaponFactory</span><span class=\\\"hljs-params\\\">()</span> {\\n        addBuilder(WeaponType.AXE, Axe::<span class=\\\"hljs-keyword\\\">new</span>);\\n        addBuilder(WeaponType.BOW, () -&gt; <span class=\\\"hljs-keyword\\\">new</span> <span class=\\\"hljs-title class_\\\">Bow</span>());\\n    }\\n}\\n</code></pre>\\n<p>这里稍微用到了一些Lambda的语法了，我们在继承<code>Factory</code>的时候，用泛型去规定产品类型，然后在实现子类的构造方法里面注册工匠，我们注意到，传递<code>Builder</code>的时候，第一次传生产<code>Axe</code>对象的<code>Builder</code>的时候，我直接使用了<code>Axe</code>的构造方法引用，这其实是<strong>初始化了一个专门生产<code>Axe</code>对象的<code>Builder</code>对象，这个<code>Builder</code>对象的<code>build</code>方法的实现就是返回生成的<code>Axe</code>对象</strong>，如果不是很好理解，可以看第二次传入生产<code>Bow</code>对象的<code>Builder</code>对象，一看就懂</p>\\n<h5 id=\\\"main-6\\\">Main</h5>\\n<pre><code class=\\\"hljs language-java\\\"><span class=\\\"hljs-keyword\\\">public</span> <span class=\\\"hljs-keyword\\\">class</span> <span class=\\\"hljs-title class_\\\">App</span> {\\n    <span class=\\\"hljs-keyword\\\">public</span> <span class=\\\"hljs-keyword\\\">static</span> <span class=\\\"hljs-keyword\\\">void</span> <span class=\\\"hljs-title function_\\\">main</span><span class=\\\"hljs-params\\\">(String[] args)</span> {\\n        <span class=\\\"hljs-type\\\">WeaponFactory</span> <span class=\\\"hljs-variable\\\">factory</span> <span class=\\\"hljs-operator\\\">=</span> <span class=\\\"hljs-keyword\\\">new</span> <span class=\\\"hljs-title class_\\\">WeaponFactory</span>();\\n        System.out.println(factory.produce(WeaponType.AXE));\\n        System.out.println(factory.produce(WeaponType.BOW));\\n    }\\n}\\n</code></pre>\\n<h4 id=\\\"总结-4\\\">总结</h4>\\n<p>对于工厂方法，因为它的地位太重要，所以我们在设计一个工厂的时候要特别注意方法和其他对象之间的解耦性，让这个工厂通用性更强一些</p>\\n<hr>\\n\";","export default \"<p><div class=\\\"saying mb-4\\\"><div class=\\\"saying-quote saying-left-quote\\\">“</div><div class=\\\"saying-quote saying-right-quote\\\">”</div></p>\\n<p>惊！仅用前端技术就可以打造跨平台桌面应用！</p>\\n<p></div></p>\\n<h3 id=\\\"快速入门\\\">快速入门</h3>\\n<hr>\\n<p>简单介绍一下什么是 Electron：</p>\\n<blockquote>\\n<p>如果你只会前端技术，如果你想打造一个桌面应用，如果你不想学 C#、Swing 之类的技术，那么 Electron 绝对是你的不二之选。</p>\\n<p>它的本质就是提供一个轻巧的 chrome 内核（其实也有 131M），把你的项目包在里面运行，等于是你项目的专属浏览器！</p>\\n<p>为什么想要使用这门技术，首先非常有趣，其次我只是个半吊子的前端选手，写项目完全不存在浏览器兼容性考虑这回事（我觉得兼容考虑就是前端开发届的一大毒瘤之一），我写的项目全部基于 Chrome 的 V8，IE 什么的傻逼浏览器我是不会去管的。因此你如果想要使用我的项目，要么使用 Chrome，要么使用我项目打包成的桌面应用咯- -</p>\\n</blockquote>\\n<p>然后这篇基本就算官网<a href=\\\"https://electronjs.org/docs/tutorial/quick-start\\\">快速入门</a>的照搬</p>\\n<p>我开始上的是中文网，它的快速入门文档我觉得还是有点对菜鸟不友好，整个文档，居然没教怎么安装！</p>\\n<p>它只说是 npm 安装，但是没说具体安装哪一个！！这太不友好了！</p>\\n<p>关键 Electron 中文网并没有原官网的<code>博客</code>模块！！百度一下之后找到<a href=\\\"https://electronjs.org/blog/npm-install-electron\\\">此文</a>，里面提到怎么安装 electron。</p>\\n<p>在这里提醒一下：</p>\\n<p><strong>千万不要</strong>使用 Electron 中文网：<a href=\\\"https://electron.org.cn/\\\">https://electron.org.cn/</a></p>\\n<p><strong>千万要</strong>使用原官网：<a href=\\\"https://electronjs.org/\\\">https://electronjs.org/</a></p>\\n<p>原官网也支持中文！中文网的内容有缺失！</p>\\n<p>所以我们可以正式开始了！</p>\\n<h3 id=\\\"安装\\\">安装</h3>\\n<hr>\\n<p>贴一个 Electron 的 github 项目地址：<a href=\\\"https://github.com/electron/electron\\\">https://github.com/electron/electron</a> ，里面有安装说明。</p>\\n<p>我觉得玩什么东西，安装才是第一步！</p>\\n<blockquote>\\n<p>环境准备：node.js 以及 npm 是必须的，git 就不用说了。</p>\\n</blockquote>\\n<p>然后以下命令进行全局安装（就全局，不要怂）：</p>\\n<pre><code class=\\\"hljs language-shell\\\">npm install electron --save-dev -g\\n</code></pre>\\n<p>如果安装的时候卡住了的话，可能是因为 electron 的源被墙了的原因，解决：</p>\\n<p>修改~/.npmrc 文件，加入如下代码：</p>\\n<pre><code class=\\\"hljs language-cpp\\\">registry=https:<span class=\\\"hljs-comment\\\">//registry.npm.taobao.org</span>\\nelectron_mirror=<span class=\\\"hljs-string\\\">&quot;https://npm.taobao.org/mirrors/electron/&quot;</span>\\n</code></pre>\\n<h3 id=\\\"基本概念\\\">基本概念</h3>\\n<hr>\\n<h4 id=\\\"主进程\\\">主进程</h4>\\n<blockquote>\\n<p>在 <code>Electron</code> 里，运行 <code>package.json</code> 里 <code>main</code> 脚本的进程被称为主进程。在主进程运行的脚本可以以创建 web 页面的形式展示 GUI。</p>\\n</blockquote>\\n<h4 id=\\\"渲染进程\\\">渲染进程</h4>\\n<blockquote>\\n<p>由于 <code>Electron</code> 使用 <code>Chromium</code> 来展示页面，所以 <code>Chromium</code> 的多进程结构也被充分利用。每个 <code>Electron</code> 的页面都在运行着自己的进程，这样的进程我们称之为渲染进程。</p>\\n<p>在一般浏览器中，网页通常会在沙盒环境下运行，并且不允许访问原生资源。然而，<code>Electron</code> 用户拥有在网页中调用 <code>Node.js</code> 的 <code>APIs</code> 的能力，可以与底层操作系统直接交互。</p>\\n</blockquote>\\n<h4 id=\\\"主进程与渲染进程的区别\\\">主进程与渲染进程的区别</h4>\\n<blockquote>\\n<p>主进程使用 <code>BrowserWindow</code> 实例创建页面。每个 <code>BrowserWindow</code> 实例都在自己的渲染进程里运行页面。当一个 <code>BrowserWindow</code> 实例被销毁后，相应的渲染进程也会被终止。</p>\\n<p>主进程管理所有页面和与之对应的渲染进程。每个渲染进程都是相互独立的，并且只关心他们自己的页面。</p>\\n<p>由于在页面里管理原生 <code>GUI</code> 资源是非常危险而且容易造成资源泄露，所以在页面调用 <code>GUI</code> 相关的 <code>APIs</code> 是不被允许的。如果你想在网页里使用 <code>GUI</code> 操作，其对应的渲染进程必须与主进程进行通讯，请求主进程进行相关的 <code>GUI</code> 操作。</p>\\n<p>在 <code>Electron</code>，我们提供几种方法用于主进程和渲染进程之间的通讯。像 <code>ipcRenderer</code> 和 <code>ipcMain</code> 模块用于发送消息， <code>remote</code> 模块用于 <code>RPC</code> 方式通讯。这些内容都可以在一个 FAQ 中查看 <a href=\\\"https://electron.org.cn/doc/faq.html#how-to-share-data-between-web-pages\\\">how to share data between web pages</a>。</p>\\n</blockquote>\\n<h3 id=\\\"helloworld\\\">HelloWorld</h3>\\n<hr>\\n<p>大体上，一个<code>Electron</code>应用的目录结构如下：</p>\\n<pre><code>your-app/\\n├── package.json\\n├── main.js\\n└── index.html\\n</code></pre>\\n<p><code>package.json</code>的格式和 Node 完全一致，而且被 main 字段声明的脚本文件是你的应用的启动脚本，它运行在主进程上。你应用里的<code>package.json</code>看起来应该：</p>\\n<pre><code class=\\\"hljs language-json\\\"><span class=\\\"hljs-punctuation\\\">{</span>\\n  <span class=\\\"hljs-attr\\\">&quot;name&quot;</span><span class=\\\"hljs-punctuation\\\">:</span> <span class=\\\"hljs-string\\\">&quot;your-app&quot;</span><span class=\\\"hljs-punctuation\\\">,</span>\\n  <span class=\\\"hljs-attr\\\">&quot;version&quot;</span><span class=\\\"hljs-punctuation\\\">:</span> <span class=\\\"hljs-string\\\">&quot;0.1.0&quot;</span><span class=\\\"hljs-punctuation\\\">,</span>\\n  <span class=\\\"hljs-attr\\\">&quot;main&quot;</span><span class=\\\"hljs-punctuation\\\">:</span> <span class=\\\"hljs-string\\\">&quot;main.js&quot;</span>\\n<span class=\\\"hljs-punctuation\\\">}</span>\\n</code></pre>\\n<p><strong>注意：如果 main 字段没有在 package.json 声明，Electron 会优先加载 index.js。</strong></p>\\n<p><code>main.js</code> 应该用于创建窗口和处理系统事件，一个典型的例子如下：</p>\\n<pre><code class=\\\"hljs language-JavaScript\\\"><span class=\\\"hljs-keyword\\\">const</span> {app, <span class=\\\"hljs-title class_\\\">BrowserWindow</span>} = <span class=\\\"hljs-built_in\\\">require</span>(<span class=\\\"hljs-string\\\">&#x27;electron&#x27;</span>)\\n<span class=\\\"hljs-keyword\\\">const</span> path = <span class=\\\"hljs-built_in\\\">require</span>(<span class=\\\"hljs-string\\\">&#x27;path&#x27;</span>)\\n<span class=\\\"hljs-keyword\\\">const</span> url = <span class=\\\"hljs-built_in\\\">require</span>(<span class=\\\"hljs-string\\\">&#x27;url&#x27;</span>)\\n\\n<span class=\\\"hljs-comment\\\">// 保持一个对于 window 对象的全局引用，如果你不这样做，</span>\\n<span class=\\\"hljs-comment\\\">// 当 JavaScript 对象被垃圾回收， window 会被自动地关闭</span>\\n<span class=\\\"hljs-keyword\\\">let</span> win\\n\\n<span class=\\\"hljs-keyword\\\">function</span> <span class=\\\"hljs-title function_\\\">createWindow</span> () {\\n  <span class=\\\"hljs-comment\\\">// 创建浏览器窗口。</span>\\n  win = <span class=\\\"hljs-keyword\\\">new</span> <span class=\\\"hljs-title class_\\\">BrowserWindow</span>({<span class=\\\"hljs-attr\\\">width</span>: <span class=\\\"hljs-number\\\">800</span>, <span class=\\\"hljs-attr\\\">height</span>: <span class=\\\"hljs-number\\\">600</span>})\\n\\n  <span class=\\\"hljs-comment\\\">// 加载应用的 index.html。</span>\\n  win.<span class=\\\"hljs-title function_\\\">loadURL</span>(url.<span class=\\\"hljs-title function_\\\">format</span>({\\n    <span class=\\\"hljs-attr\\\">pathname</span>: path.<span class=\\\"hljs-title function_\\\">join</span>(__dirname, <span class=\\\"hljs-string\\\">&#x27;index.html&#x27;</span>),\\n    <span class=\\\"hljs-attr\\\">protocol</span>: <span class=\\\"hljs-string\\\">&#x27;file:&#x27;</span>,\\n    <span class=\\\"hljs-attr\\\">slashes</span>: <span class=\\\"hljs-literal\\\">true</span>\\n  }))\\n\\n  <span class=\\\"hljs-comment\\\">// 打开开发者工具。</span>\\n  win.<span class=\\\"hljs-property\\\">webContents</span>.<span class=\\\"hljs-title function_\\\">openDevTools</span>()\\n\\n  <span class=\\\"hljs-comment\\\">// 当 window 被关闭，这个事件会被触发。</span>\\n  win.<span class=\\\"hljs-title function_\\\">on</span>(<span class=\\\"hljs-string\\\">&#x27;closed&#x27;</span>, <span class=\\\"hljs-function\\\">() =&gt;</span> {\\n    <span class=\\\"hljs-comment\\\">// 取消引用 window 对象，如果你的应用支持多窗口的话，</span>\\n    <span class=\\\"hljs-comment\\\">// 通常会把多个 window 对象存放在一个数组里面，</span>\\n    <span class=\\\"hljs-comment\\\">// 与此同时，你应该删除相应的元素。</span>\\n    win = <span class=\\\"hljs-literal\\\">null</span>\\n  })\\n}\\n\\n<span class=\\\"hljs-comment\\\">// Electron 会在初始化后并准备</span>\\n<span class=\\\"hljs-comment\\\">// 创建浏览器窗口时，调用这个函数。</span>\\n<span class=\\\"hljs-comment\\\">// 部分 API 在 ready 事件触发后才能使用。</span>\\napp.<span class=\\\"hljs-title function_\\\">on</span>(<span class=\\\"hljs-string\\\">&#x27;ready&#x27;</span>, createWindow)\\n\\n<span class=\\\"hljs-comment\\\">// 当全部窗口关闭时退出。</span>\\napp.<span class=\\\"hljs-title function_\\\">on</span>(<span class=\\\"hljs-string\\\">&#x27;window-all-closed&#x27;</span>, <span class=\\\"hljs-function\\\">() =&gt;</span> {\\n  <span class=\\\"hljs-comment\\\">// 在 macOS 上，除非用户用 Cmd + Q 确定地退出，</span>\\n  <span class=\\\"hljs-comment\\\">// 否则绝大部分应用及其菜单栏会保持激活。</span>\\n  <span class=\\\"hljs-keyword\\\">if</span> (process.<span class=\\\"hljs-property\\\">platform</span> !== <span class=\\\"hljs-string\\\">&#x27;darwin&#x27;</span>) {\\n    app.<span class=\\\"hljs-title function_\\\">quit</span>()\\n  }\\n})\\n\\napp.<span class=\\\"hljs-title function_\\\">on</span>(<span class=\\\"hljs-string\\\">&#x27;activate&#x27;</span>, <span class=\\\"hljs-function\\\">() =&gt;</span> {\\n  <span class=\\\"hljs-comment\\\">// 在这文件，你可以续写应用剩下主进程代码。</span>\\n  <span class=\\\"hljs-comment\\\">// 也可以拆分成几个文件，然后用 require 导入。</span>\\n  <span class=\\\"hljs-keyword\\\">if</span> (win === <span class=\\\"hljs-literal\\\">null</span>) {\\n    <span class=\\\"hljs-title function_\\\">createWindow</span>()\\n  }\\n})\\n\\n<span class=\\\"hljs-comment\\\">// 在这文件，你可以续写应用剩下主进程代码。</span>\\n<span class=\\\"hljs-comment\\\">// 也可以拆分成几个文件，然后用 require 导入。</span>\\n</code></pre>\\n<p>最后，你想展示的 <code>index.html</code>：</p>\\n<pre><code class=\\\"hljs language-html\\\"><span class=\\\"hljs-meta\\\">&lt;!DOCTYPE <span class=\\\"hljs-keyword\\\">html</span>&gt;</span>\\n<span class=\\\"hljs-tag\\\">&lt;<span class=\\\"hljs-name\\\">html</span>&gt;</span>\\n  <span class=\\\"hljs-tag\\\">&lt;<span class=\\\"hljs-name\\\">head</span>&gt;</span>\\n    <span class=\\\"hljs-tag\\\">&lt;<span class=\\\"hljs-name\\\">meta</span> <span class=\\\"hljs-attr\\\">charset</span>=<span class=\\\"hljs-string\\\">&quot;UTF-8&quot;</span> /&gt;</span>\\n    <span class=\\\"hljs-tag\\\">&lt;<span class=\\\"hljs-name\\\">title</span>&gt;</span>Hello World!<span class=\\\"hljs-tag\\\">&lt;/<span class=\\\"hljs-name\\\">title</span>&gt;</span>\\n  <span class=\\\"hljs-tag\\\">&lt;/<span class=\\\"hljs-name\\\">head</span>&gt;</span>\\n  <span class=\\\"hljs-tag\\\">&lt;<span class=\\\"hljs-name\\\">body</span>&gt;</span>\\n    <span class=\\\"hljs-tag\\\">&lt;<span class=\\\"hljs-name\\\">h1</span>&gt;</span>Hello World!<span class=\\\"hljs-tag\\\">&lt;/<span class=\\\"hljs-name\\\">h1</span>&gt;</span>\\n    We are using node\\n    <span class=\\\"hljs-tag\\\">&lt;<span class=\\\"hljs-name\\\">script</span>&gt;</span><span class=\\\"language-javascript\\\">\\n      <span class=\\\"hljs-variable language_\\\">document</span>.<span class=\\\"hljs-title function_\\\">write</span>(process.<span class=\\\"hljs-property\\\">versions</span>.<span class=\\\"hljs-property\\\">node</span>);\\n    </span><span class=\\\"hljs-tag\\\">&lt;/<span class=\\\"hljs-name\\\">script</span>&gt;</span>\\n    , Chrome\\n    <span class=\\\"hljs-tag\\\">&lt;<span class=\\\"hljs-name\\\">script</span>&gt;</span><span class=\\\"language-javascript\\\">\\n      <span class=\\\"hljs-variable language_\\\">document</span>.<span class=\\\"hljs-title function_\\\">write</span>(process.<span class=\\\"hljs-property\\\">versions</span>.<span class=\\\"hljs-property\\\">chrome</span>);\\n    </span><span class=\\\"hljs-tag\\\">&lt;/<span class=\\\"hljs-name\\\">script</span>&gt;</span>\\n    , and Electron\\n    <span class=\\\"hljs-tag\\\">&lt;<span class=\\\"hljs-name\\\">script</span>&gt;</span><span class=\\\"language-javascript\\\">\\n      <span class=\\\"hljs-variable language_\\\">document</span>.<span class=\\\"hljs-title function_\\\">write</span>(process.<span class=\\\"hljs-property\\\">versions</span>.<span class=\\\"hljs-property\\\">electron</span>);\\n    </span><span class=\\\"hljs-tag\\\">&lt;/<span class=\\\"hljs-name\\\">script</span>&gt;</span>\\n    .\\n  <span class=\\\"hljs-tag\\\">&lt;/<span class=\\\"hljs-name\\\">body</span>&gt;</span>\\n<span class=\\\"hljs-tag\\\">&lt;/<span class=\\\"hljs-name\\\">html</span>&gt;</span>\\n</code></pre>\\n<h3 id=\\\"run-helloworld\\\">Run HelloWorld</h3>\\n<hr>\\n<p>一旦你创建了最初的 <code>main.js</code>， <code>index.html</code> 和<code> package.json</code> 这几个文件，你可能会想尝试在本地运行并测试，看看是不是和期望的那样正常运行。</p>\\n<p>安装文档说明，运行 electron 应用的方式有两种：</p>\\n<ul>\\n<li>npm 安装 electron 模块 使用模块运行</li>\\n<li>直接使用二进制文件运行</li>\\n</ul>\\n<p>如果你没有 nodejs 环境，你可以考虑使用二进制文件运行应用。</p>\\n<p>使用模块去运行 electron 应用的命令是这样的：</p>\\n<p><em>electron 是一个 npm 模块，包含所使用的 Electron 预编译版本。 如果你已经用 npm 全局安装了它，你只需要按照如下方式直接运行你的应用：</em></p>\\n<pre><code class=\\\"hljs language-shell\\\">electron .\\n</code></pre>\\n<p>下面是我自己的演示：</p>\\n<ul>\\n<li><p>目录结构：\\n<img src=\\\"../../../public/img/302c77ea7393fa19e487b69fc98ec917.png\\\" alt=\\\"electron1\\\"></p>\\n</li>\\n<li><p>运行：\\n<img src=\\\"../../../public/img/e003ac2bb2e4383b892641cba60ba100.png\\\" alt=\\\"electron2\\\"></p>\\n</li>\\n<li><p>界面：\\n<img src=\\\"../../../public/img/7617fb5337cfd6d0e19a74b1a7968cc9.png\\\" alt=\\\"electron3\\\"></p>\\n</li>\\n</ul>\\n<hr>\\n<p>然后官网里还给了一个 quickstar 项目，那个项目没必要跑了，内容基本和上面的 HelloWorld 是一样的。</p>\\n<p>这样 Electron 的 HelloWorld 的体验已经完成了！前端变桌面应用的感觉巨奇妙！超级期待后面的学习！</p>\\n\";","export default \"<p>本篇开始了解 MySQL 中 InnoDB 引擎的索引，索引是 MySQL 里非常重要的部分，它的出现极大地提升了 MySQL 处理数据的性能，而且索引使用的好坏也决定着一个系统的执行效率</p>\\n<p>因此，想要高效地使用 MySQL 数据库，合理地创建索引，甚至是合理地编写 SQL 语句，都需要先了解索引在 MySQL 中的行为以及原理</p>\\n<p>InnoDB 的索引常见的有：B+树索引、全文索引、哈希索引</p>\\n<p>之前我们说过哈希索引，它是引擎自适应的，所以我们并不需要关心该索引的管理；而 B+树索引是引擎使用地最多的索引数据结构，其构造类似于二叉树，根据键值快速找到数据，但是要理解它我们要注意两个问题：</p>\\n<ol>\\n<li>B+树里的“B”不是代表二叉，而是代表平衡，以为它是从平衡二叉树演化到 B 树再演化而来；</li>\\n<li>B+树索引并不直接找到给定键值的具体行，只能找到数据的<strong>所在页</strong>，然后该页加载进内存，再从内存中查找数据；</li>\\n</ol>\\n<h3 id=\\\"b树与索引概述\\\">B+树与索引概述</h3>\\n<p>B+树的出现，是为磁盘这类直接存去辅助设备而设计的一种平衡查找树，其目的是为了降低查找次数，因为在磁盘上一次查找就需要一次磁盘 IO，只有尽量减少 IO 时间才能提高效率，所以要一次性尽可能 IO 到合适的数据集，我们把这种能力形容为<strong>“高扇出性”</strong></p>\\n<p>本篇不介绍 B+树的特性、结构、操作原理，因为也挺复杂的；</p>\\n<p>因为高扇出性，因此在数据库中，B+树的高度一般都在 2~4 层，也就是说查找某一键值最多只需要 2 到 4 次磁盘 IO</p>\\n<p><img src=\\\"../../../public/img/20200614143631.png\\\" alt=\\\"\\\"></p>\\n<p style=\\\"text-align: center\\\">一棵高度为2的B+树</p>\\n\\n<h4 id=\\\"聚集索引（clustered-index）\\\">聚集索引（Clustered Index）</h4>\\n<p>InnoDB 存储引擎是索组织表，即数据是按照主键的顺序存放的，而聚集索引就是按照每张表的主键构造的一棵 B+树（每张表有且仅有一个聚集索引），其叶子节点存放的即为<strong>整张表的行记录数据</strong>，因此聚集索引的叶子节点也被称为数据页，因此每个数据页都由双向链表互相连通</p>\\n<p>聚集索引设计的优点：</p>\\n<ol>\\n<li>因为双向链表，聚集索引虽然逻辑上连续，物理上不要求一定连续；</li>\\n<li>对主键的<strong>排序查找</strong>和<strong>范围查找</strong>速度非常快；</li>\\n<li>先天支持查询的顺序排序，因为索引键就是顺序的；</li>\\n</ol>\\n<h4 id=\\\"辅助索引（secondary-index）\\\">辅助索引（Secondary Index）</h4>\\n<p>对于辅助索引，叶子节点并不包含记录的全部数据，它主要包含一个<strong>书签（bookmark）</strong>，该书签用来告诉引擎在哪里可以找到和索引对应的行数据，也就是该书签就是相应的<strong>聚集索引键</strong>；辅助索引的存在并不影响聚集索引的组织，所以可以有多个辅助索引</p>\\n<p>当通过辅助索引寻找数据的时候，引擎会遍历辅助索引并得到主键索引的主键，再通过主键索引来找到完整的记录，比如说高度为 3 的辅助索引，找到高度为 3 的主键索引，总边查找次数为 6，因此需要 6 次逻辑 IO 才能得到最终的数据页</p>\\n<h4 id=\\\"相关-sql\\\">相关 SQL</h4>\\n<pre><code class=\\\"hljs language-bash\\\">mysql root@youyinnn.top:<span class=\\\"hljs-built_in\\\">test</span>&gt; show columns from mytable;\\n+-------+----------+------+-----+---------+----------------+\\n| Field | Type     | Null | Key | Default | Extra          |\\n+-------+----------+------+-----+---------+----------------+\\n| a     | int(11)  | NO   | PRI | &lt;null&gt;  | auto_increment |\\n| b     | char(20) | NO   |     | &lt;null&gt;  |                |\\n| c     | char(30) | YES  |     | &lt;null&gt;  |                |\\n| d     | int(11)  | NO   | PRI | &lt;null&gt;  |                |\\n+-------+----------+------+-----+---------+----------------+\\n\\nmysql root@youyinnn.top:<span class=\\\"hljs-built_in\\\">test</span>&gt; show index from mytable;\\n+---------+------------+----------+--------------+-------------+-----------+-------------+----------+--------+------+------------+---------+---------------+\\n| Table   | Non_unique | Key_name | Seq_in_index | Column_name | Collation | Cardinality | Sub_part | Packed | Null | Index_type | Comment | Index_comment |\\n+---------+------------+----------+--------------+-------------+-----------+-------------+----------+--------+------+------------+---------+---------------+\\n| mytable | 0          | PRIMARY  | 1            | a           | A         | 0           | &lt;null&gt;   | &lt;null&gt; |      | BTREE      |         |               |\\n| mytable | 0          | PRIMARY  | 2            | d           | A         | 0           | &lt;null&gt;   | &lt;null&gt; |      | BTREE      |         |               |\\n+---------+------------+----------+--------------+-------------+-----------+-------------+----------+--------+------+------------+---------+---------------+\\n</code></pre>\\n<p>一般来说，在创建表的时候，指定了的主键就会有与之对应的聚集索引创建，而我们可以通过 ALTER TABLE 命令对数据表的字段进行主键约束的增删来控制聚集索引的增删，上面展示了一个拥有两个主键的表也有两个 Primary 索引；</p>\\n<p>我们也可以索引一个列的开头部分数据，比如对 e 的 1000 长度的数据只取前 100 范围的字段：</p>\\n<pre><code class=\\\"hljs language-bash\\\">mysql root@youyinnn.top:<span class=\\\"hljs-built_in\\\">test</span>&gt; alter table mytable\\n                           -&gt; add column e varchar(1000);\\n\\nmysql root@youyinnn.top:<span class=\\\"hljs-built_in\\\">test</span>&gt; show columns from mytable;\\n+-------+---------------+------+-----+---------+----------------+\\n| Field | Type          | Null | Key | Default | Extra          |\\n+-------+---------------+------+-----+---------+----------------+\\n| a     | int(11)       | NO   | PRI | &lt;null&gt;  | auto_increment |\\n| b     | char(20)      | NO   |     | &lt;null&gt;  |                |\\n| c     | char(30)      | YES  |     | &lt;null&gt;  |                |\\n| d     | int(11)       | NO   | PRI | &lt;null&gt;  |                |\\n| e     | varchar(1000) | YES  |     | &lt;null&gt;  |                |\\n+-------+---------------+------+-----+---------+----------------+\\n\\nmysql root@youyinnn.top:<span class=\\\"hljs-built_in\\\">test</span>&gt; alter table mytable\\n                           -&gt; add key idx_e (e(100));\\n\\nmysql root@youyinnn.top:<span class=\\\"hljs-built_in\\\">test</span>&gt; show columns from mytable;\\n+-------+---------------+------+-----+---------+----------------+\\n| Field | Type          | Null | Key | Default | Extra          |\\n+-------+---------------+------+-----+---------+----------------+\\n| a     | int(11)       | NO   | PRI | &lt;null&gt;  | auto_increment |\\n| b     | char(20)      | NO   |     | &lt;null&gt;  |                |\\n| c     | char(30)      | YES  |     | &lt;null&gt;  |                |\\n| d     | int(11)       | NO   | PRI | &lt;null&gt;  |                |\\n| e     | varchar(1000) | YES  | MUL | &lt;null&gt;  |                |\\n+-------+---------------+------+-----+---------+----------------+\\n\\nmysql root@youyinnn.top:<span class=\\\"hljs-built_in\\\">test</span>&gt; alter table mytable\\n                           -&gt; add key idx_b_c (b, c);\\n\\nmysql root@youyinnn.top:<span class=\\\"hljs-built_in\\\">test</span>&gt; show index from mytable;\\n+---------+------------+----------+--------------+-------------+-----------+-------------+----------+--------+------+------------+---------+---------------+\\n| Table   | Non_unique | Key_name | Seq_in_index | Column_name | Collation | Cardinality | Sub_part | Packed | Null | Index_type | Comment | Index_comment |\\n+---------+------------+----------+--------------+-------------+-----------+-------------+----------+--------+------+------------+---------+---------------+\\n| mytable | 0          | PRIMARY  | 1            | a           | A         | 0           | &lt;null&gt;   | &lt;null&gt; |      | BTREE      |         |               |\\n| mytable | 0          | PRIMARY  | 2            | d           | A         | 0           | &lt;null&gt;   | &lt;null&gt; |      | BTREE      |         |               |\\n| mytable | 1          | idx_e    | 1            | e           | A         | 0           | 100      | &lt;null&gt; | YES  | BTREE      |         |               |\\n| mytable | 1          | idx_b_c  | 1            | b           | A         | 0           | &lt;null&gt;   | &lt;null&gt; |      | BTREE      |         |               |\\n| mytable | 1          | idx_b_c  | 2            | c           | A         | 0           | &lt;null&gt;   | &lt;null&gt; | YES  | BTREE      |         |               |\\n+---------+------------+----------+--------------+-------------+-----------+-------------+----------+--------+------+------------+---------+---------------+\\n</code></pre>\\n<p>我们还需要注意到，索引信息的各个列分别有以下含义：</p>\\n<ol>\\n<li>table，索引所在的表名；</li>\\n<li>Non_unique：非唯一索引；</li>\\n<li>Key_name：索引名称，用户可以通过这个名字来执行 Drop Index；</li>\\n<li>Seq_in_index：索引中该列的位置；</li>\\n<li>Column_name：索引列的名称，观察联合索引<code>idx_a_c</code>；</li>\\n<li>Collation：列以什么方式存储在索引中，可以是 A 或者 Null，B+树索引总是 A（表示是顺序的），如果是 Hash 索引这里就是 Null；</li>\\n<li><strong>Cardinality：这个值很重要</strong>，表示索引中唯一值的数目的估计值；</li>\\n<li>Sub_part：是否列的部分被索引，观察<code>idx_e</code>，这里的值是 100，表示列的左前缀 100；如果 Null，则表示索引整个列；</li>\\n<li>Packed：关键字是否被压缩；</li>\\n<li>Null：索引列是否含有空值；</li>\\n<li>Index_type：索引类型，B+树就都是 BTREE；</li>\\n<li>Comment：注释；</li>\\n</ol>\\n<h5 id=\\\"cardinality\\\">Cardinality</h5>\\n<p>Cardinality 这个值很重要，优化器会根据这个值来判断是否使用这个索引，但因为不能在每次索引更新的时候就更新这个值，索引这个值并不是精准的，如果需要更新这个值，可以使用<code>analyze table</code>命令</p>\\n<p>在某些情况下，该值可能为 Null，可能是因为发生索引建立了但是没有用到的情况，还是使用上面的命令来更新这个值；</p>\\n<p>但并不是在所有查询条件中出现的列都需要上索引，一般的经验是，在访问表中很少一部分的时候，使用 B+树索引还有意义</p>\\n<p>比如一些<strong>低选择性</strong>的字段：性别、地区、类型等等，有时候根据这些字段范围进行查询可能会得到整半张表，因此这时候 B+树索引的作用是没有必要的，相反，<strong>在某个值取值范围很广</strong>的时候，属于<strong>高选择性</strong>的时候，适合建立 B+树索引</p>\\n<p><strong>重点</strong></p>\\n<p>这也是 Cardinality 这个值代表的意思，如果有<code>Cardinality / n_rows_in_table</code>一值非常接近 0，那么说明该索引对应的字段属于低选择性，建议删除；而当这个值接近 1 的时候，说明索引的效率还不错；</p>\\n<p>但由于不是每次更新索引都更新该值，所以该值具有延迟，而且数据量越多的数据表该值就越延迟更新</p>\\n<h4 id=\\\"对于-key-值\\\">*对于 Key 值</h4>\\n<p>转载自：<a href=\\\"https://www.cnblogs.com/yy20141204bb/p/8421338.html\\\">https://www.cnblogs.com/yy20141204bb/p/8421338.html</a></p>\\n<ol>\\n<li><p>如果 Key 是空的, 那么该列值的可以重复, 表示该列没有索引, 或者是一个非唯一的复合索引的非前导列；</p>\\n</li>\\n<li><p>如果 Key 是<strong>PRI</strong>, 那么该列是主键的组成部分；</p>\\n</li>\\n<li><p>如果 Key 是<strong>UNI</strong>, 那么该列是一个唯一值索引的第一列(前导列),并别不能含有空值(NULL)；</p>\\n</li>\\n<li><p>如果 Key 是<strong>MUL</strong>, 那么该列的值可以重复, 该列是一个非唯一索引的前导列(第一列)或者是一个唯一性索引的组成部分但是可以含有空值 NULL。</p>\\n</li>\\n</ol>\\n<p>如果对于一个列的定义，同时满足上述 4 种情况的多种，比如一个列既是<strong>PRI</strong>,又是<strong>UNI</strong>，那么&quot;desc 表名&quot;的时候，显示的 Key 值按照优先级来显示 <strong>PRI-&gt;UNI-&gt;MUL</strong>。那么此时，显示<strong>PRI</strong>。</p>\\n<p>一个唯一性索引列可以显示为<strong>PRI</strong>,并且该列不能含有空值，同时该表没有主键。</p>\\n<p>一个唯一性索引列可以显示为<strong>MUL</strong>, 如果多列构成了一个唯一性复合索引，因为虽然索引的多列组合是唯一的，比如 ID+NAME 是唯一的，但是没一个单独的列依然可以有重复的值，只要 ID+NAME 是唯一的即可。</p>\\n<h3 id=\\\"索引的使用概述\\\">索引的使用概述</h3>\\n<h4 id=\\\"联合索引\\\">联合索引</h4>\\n<p>联合索引是指对表上的多个列进行索引，我们之前有创建过联合索引的例子，它和创建单个索引没有区别，单个索引可以看出是联合索引元素为 1 的特例；</p>\\n<pre><code class=\\\"hljs language-bash\\\">mysql root@youyinnn.top:<span class=\\\"hljs-built_in\\\">test</span>&gt; create table mytable2 (\\n                           -&gt;   a int,\\n                           -&gt;   b int,\\n                           -&gt;   primary key (a),\\n                           -&gt;   key idx_a_b (a, b)\\n                           -&gt; );\\n\\nmysql root@youyinnn.top:<span class=\\\"hljs-built_in\\\">test</span>&gt; show columns from mytable2;\\n+-------+---------+------+-----+---------+-------+\\n| Field | Type    | Null | Key | Default | Extra |\\n+-------+---------+------+-----+---------+-------+\\n| a     | int(11) | NO   | PRI | &lt;null&gt;  |       |\\n| b     | int(11) | YES  |     | &lt;null&gt;  |       |\\n+-------+---------+------+-----+---------+-------+\\n\\nmysql root@youyinnn.top:<span class=\\\"hljs-built_in\\\">test</span>&gt; show index from mytable2;\\n+----------+------------+----------+--------------+-------------+-----------+-------------+----------+--------+------+------------+---------+---------------+\\n| Table    | Non_unique | Key_name | Seq_in_index | Column_name | Collation | Cardinality | Sub_part | Packed | Null | Index_type | Comment | Index_comment |\\n+----------+------------+----------+--------------+-------------+-----------+-------------+----------+--------+------+------------+---------+---------------+\\n| mytable2 | 0          | PRIMARY  | 1            | a           | A         | 0           | &lt;null&gt;   | &lt;null&gt; |      | BTREE      |         |               |\\n| mytable2 | 1          | idx_a_b  | 1            | a           | A         | 0           | &lt;null&gt;   | &lt;null&gt; |      | BTREE      |         |               |\\n| mytable2 | 1          | idx_a_b  | 2            | b           | A         | 0           | &lt;null&gt;   | &lt;null&gt; | YES  | BTREE      |         |               |\\n+----------+------------+----------+--------------+-------------+-----------+-------------+----------+--------+------+------------+---------+---------------+\\n</code></pre>\\n<p>联合索引的触发例子：</p>\\n<pre><code class=\\\"hljs language-sql\\\"><span class=\\\"hljs-keyword\\\">select</span> <span class=\\\"hljs-operator\\\">*</span> <span class=\\\"hljs-keyword\\\">from</span> <span class=\\\"hljs-keyword\\\">table</span> <span class=\\\"hljs-keyword\\\">where</span> a<span class=\\\"hljs-operator\\\">=</span>xxx <span class=\\\"hljs-keyword\\\">and</span> b<span class=\\\"hljs-operator\\\">=</span>xxx;\\n</code></pre>\\n<p>这样的句子显然是可以使用<code>idx_a_b</code>的</p>\\n<pre><code class=\\\"hljs language-sql\\\"><span class=\\\"hljs-keyword\\\">select</span> <span class=\\\"hljs-operator\\\">*</span> <span class=\\\"hljs-keyword\\\">from</span> <span class=\\\"hljs-keyword\\\">table</span> <span class=\\\"hljs-keyword\\\">where</span> a<span class=\\\"hljs-operator\\\">=</span>xxx;\\n</code></pre>\\n<p>也可以使用联合索引，因为 a 字段是主键，是顺序的，而下面这个语句就不会使用到联合索引，因为在没有键值 a 确定的情况下，联合索引（a，b）中单独看 b 是非顺序的：</p>\\n<pre><code class=\\\"hljs language-sql\\\"><span class=\\\"hljs-keyword\\\">select</span> <span class=\\\"hljs-operator\\\">*</span> <span class=\\\"hljs-keyword\\\">from</span> <span class=\\\"hljs-keyword\\\">table</span> <span class=\\\"hljs-keyword\\\">where</span> b<span class=\\\"hljs-operator\\\">=</span>xxx;\\n</code></pre>\\n<p>对此情况，书上举例的解释为：</p>\\n<p><img src=\\\"../../../public/img/20200614171318.png\\\" alt=\\\"\\\"></p>\\n<p style=\\\"text-align: center\\\">多键值的B+树</p>\\n对于第三条语句，但看键值中的b元素：1、2、1、4、2，显然是不连续的，所以不使用该联合索引\\n\\n<p>但是对于这样的语句：</p>\\n<pre><code class=\\\"hljs language-sql\\\"><span class=\\\"hljs-keyword\\\">select</span> <span class=\\\"hljs-operator\\\">*</span> <span class=\\\"hljs-keyword\\\">from</span> <span class=\\\"hljs-keyword\\\">table</span> <span class=\\\"hljs-keyword\\\">where</span> a<span class=\\\"hljs-operator\\\">=</span>xxx <span class=\\\"hljs-keyword\\\">order</span> <span class=\\\"hljs-keyword\\\">by</span> b;\\n</code></pre>\\n<p>联合索引在这里也起到了预排序的作用，因为在 a 键值确定的情况下，b 键值是有序的，所以这样的索引使用会减少<code>filesort</code>的操作</p>\\n<h4 id=\\\"索引覆盖\\\">索引覆盖</h4>\\n<p><strong>*覆盖索引不是索引类型，而是优化器的索引选择行为！</strong></p>\\n<p>InnoDB 支持索引覆盖，即从辅助索引就能直接得到记录，而不需要查询聚集索引，它的好处是该辅助索引不会包含整行记录的所有信息，因此大小会比聚集索引小很多，以此减少大量 IO 时间；</p>\\n<p>特别是辅助索引，由于它存的是主键，很多查询都可以通过辅助联合索引来完成查询</p>\\n<p>比如有主键：a、b，辅助索引 c，因为辅助索引 c 的存放数据为<code>(a, b, c)</code>，所以一些对于主键的查询可以直接根据辅助索引的查询：</p>\\n<pre><code class=\\\"hljs language-sql\\\"><span class=\\\"hljs-keyword\\\">select</span> a <span class=\\\"hljs-keyword\\\">from</span> t <span class=\\\"hljs-keyword\\\">where</span> c <span class=\\\"hljs-operator\\\">=</span> <span class=\\\"hljs-string\\\">&#x27;123&#x27;</span>;\\n</code></pre>\\n<p>还有就是对于一些统计语句</p>\\n<pre><code class=\\\"hljs language-sql\\\"><span class=\\\"hljs-keyword\\\">select</span> <span class=\\\"hljs-built_in\\\">count</span>(<span class=\\\"hljs-operator\\\">*</span>) <span class=\\\"hljs-keyword\\\">from</span> table_name;\\n</code></pre>\\n<p>引擎并不会选择聚集索引来进行统计，如果有辅助索引，则可以通过辅助索引来完成统计</p>\\n<p>再比如，若有联合索引<code>idx_a_b</code></p>\\n<p>如果统计：</p>\\n<pre><code class=\\\"hljs language-sql\\\"><span class=\\\"hljs-keyword\\\">select</span> <span class=\\\"hljs-built_in\\\">count</span>(<span class=\\\"hljs-operator\\\">*</span>) <span class=\\\"hljs-keyword\\\">from</span> mytable\\n    <span class=\\\"hljs-keyword\\\">where</span> b <span class=\\\"hljs-operator\\\">&gt;=</span> <span class=\\\"hljs-number\\\">1000</span> <span class=\\\"hljs-keyword\\\">and</span> b <span class=\\\"hljs-operator\\\">&lt;=</span> <span class=\\\"hljs-number\\\">5000</span>;\\n</code></pre>\\n<p>这样的语句，虽然没有 b 的单独索引，但是因为是统计语句，所以可以<strong>“选择使用”</strong>刚才的联合索引来完成这一操作，这个<strong>“选择使用”</strong>的过程就是<strong>覆盖索引</strong></p>\\n<h4 id=\\\"优化器不使用索引的情况\\\">优化器不使用索引的情况</h4>\\n<p>有时候优化器并不会选择辅助索引取找数据，而是直接进行全表扫描（直接查询聚集索引）来查询，这种情况多发生与范围查找、JOIN 链接操作</p>\\n<p>有的时候我们有<strong>某非主键字段进行范围查找整行数据（select *）</strong>的情况，对某个非主键字段进行范围查找，这时候虽然该字段可能有辅助索引，但是辅助索引并不能包含整行信息，于是查到辅助索引还要再查一次聚集索引，因为是书签，所以在磁盘上进行的是离散的而不是顺序的读操作，这时候优化器会选择直接利用聚集索引来依次查找</p>\\n<p>比如：</p>\\n<pre><code class=\\\"hljs language-sql\\\"><span class=\\\"hljs-keyword\\\">select</span> <span class=\\\"hljs-operator\\\">*</span> <span class=\\\"hljs-keyword\\\">from</span> order_tb <span class=\\\"hljs-keyword\\\">where</span> orderid <span class=\\\"hljs-operator\\\">&gt;</span> <span class=\\\"hljs-number\\\">10000</span> <span class=\\\"hljs-keyword\\\">and</span> orderid <span class=\\\"hljs-operator\\\">&lt;</span> <span class=\\\"hljs-number\\\">20000</span>;\\n</code></pre>\\n<p>在这样的情况下，如果用户觉得磁盘速度不是问题，可以使用<code>force index</code>来强制使用某个索引来查询</p>\\n<pre><code class=\\\"hljs language-sql\\\"><span class=\\\"hljs-keyword\\\">select</span> <span class=\\\"hljs-operator\\\">*</span> <span class=\\\"hljs-keyword\\\">from</span> order_tb force index(orderID) <span class=\\\"hljs-keyword\\\">where</span> orderid <span class=\\\"hljs-operator\\\">&gt;</span> <span class=\\\"hljs-number\\\">10000</span> <span class=\\\"hljs-keyword\\\">and</span> orderid <span class=\\\"hljs-operator\\\">&lt;</span> <span class=\\\"hljs-number\\\">20000</span>;\\n</code></pre>\\n<p>当然还可以给数据库提供索引建议，可以用 SQL 语句创建<code>Index Hint</code>，但是最终选择哪个索引还是由优化器决定</p>\\n<h3 id=\\\"mysql-中哈希算法概述\\\">MySQL 中哈希算法概述</h3>\\n<h4 id=\\\"innodb-缓冲池里的哈希\\\">InnoDB 缓冲池里的哈希</h4>\\n<p>之前说过，有的索引页可能会建立为自适应哈希索引，但其实在 InnoDB 引擎中另一个地方也用到了哈希算法，那就是<strong>在缓冲池找页</strong>的时候</p>\\n<p>缓冲池中存储页的结构是数组加链表，利用链表来解决哈希冲突，而引擎的存储表空间都有一个 space_id，引擎根据这个 id 再加上一定的偏移算法来散列到各个槽去</p>\\n<h4 id=\\\"自适应哈希索引\\\">自适应哈希索引</h4>\\n<p>数据库行为，DBA 不能干预；而且哈希索引只能用于等值查询，不能用于其他类型查询，比如范围查找；</p>\\n<h3 id=\\\"全文索引概述\\\">全文索引概述</h3>\\n<p>之前有创建过部分范围索引，在 InnoDB 的之前的版本是不对长文字列进行索引创建，也就是不支持全文索引，只有 MyISAM 支持，从 InnoDB 1.2.x 开始支持全文索引</p>\\n<p>但是 InnoDB 的全文索引用起来还是有限制：</p>\\n<ol>\\n<li>每张表只能有一个全文检索的索引；</li>\\n<li>多列组成的全文所以的索引列必须使用相同的字符集和排序规则；</li>\\n<li>不支持没有单词定界符的语言，如中日韩文；</li>\\n</ol>\\n<p>关于全文索引其实书上还有很多内容，这里不再深入</p>\\n\";","export default \"<p><div class=\\\"saying mb-4\\\"><div class=\\\"saying-quote saying-left-quote\\\">“</div><div class=\\\"saying-quote saying-right-quote\\\">”</div></p>\\n<p>其实必要的时候使用<code>git commit -m &quot;xxxxx&quot;</code>也木有关系 但你也别每条都这样写</p>\\n<p></div></p>\\n<!-- more -->\\n\\n<p>好久没更博了，最近一直在疯狂的推<a href=\\\"https://github.com/DomBro96/dataimport\\\">数据快速导入</a>的项目，推的使用在使用git做一些fix和optimize等工作，经常会进行版本回退和msg查阅，看看我昨天晚上到底干了些什么。</p>\\n<p>然后发现我特么看不懂前一天晚上写的什么鬼msg，这时候才觉得，有一个良好的commit习惯是多么重要！</p>\\n<p>之前有转过一篇：<a href=\\\"https://youyinnn.github.io/post/ce7091ac.html\\\">5 Useful Tips For A Better Commit Message</a></p>\\n<p>按照这篇文章，我自己给我自己的commit msg做个规范。</p>\\n<h3 id=\\\"第一行\\\">第一行</h3>\\n<p>使用规定的标识符表明当次commit一共做了哪些工作,不同的提示符使用空格<code> </code>分隔，提示符规定如下（持续补充）：</p>\\n<p>我把一次工作的标识符分“动作”、“对象”两部分描述：</p>\\n<ul>\\n<li><p>可能的动作前缀有：</p>\\n<ul>\\n<li><p>基本操作前缀：</p>\\n<blockquote>\\n<p><code>ADD</code>：Add 增加\\n<code>DEL</code>：Delete 删除\\n<code>IMP</code>：Improve 改进\\n<code>MG</code>：Merge 合并\\n<code>MOD</code>：Modifie 修改\\n<code>CPL</code>：Complete 完成</p>\\n</blockquote>\\n</li>\\n<li><p>其他操作前缀：</p>\\n<blockquote>\\n<p><code>RN</code>：Rename 重命名\\n<code>MOV</code>：Move 移动\\n<code>CRE</code>：Create 创造\\n<code>AMD</code>：Amend 修正\\n<code>SUP</code>：Supplement 补充\\n<code>RM</code>：Remove 移除</p>\\n</blockquote>\\n</li>\\n<li><p>独立动作：</p>\\n<blockquote>\\n<p><code>INIT</code>：Initialized Repository 初始化仓库\\n<code>RELEASE</code>：Release a Version 发布一个版本\\n<code>TODO</code>：Todo List 增加TODO\\n<code>TOFUNC</code>：提取重复代码为方法增加代码重用\\n<code>FIXBUG</code>：Fix Bug 修复BUG\\n<code>RPBUG</code>：Report Bug 通报BUG\\n<code>SAYING</code>：Saying 有话要说</p>\\n</blockquote>\\n</li>\\n</ul>\\n</li>\\n<li><p>可能的对象有：</p>\\n<ul>\\n<li><p>业务之内的对象：</p>\\n<blockquote>\\n<p><code>FEAT</code>：Feature 某个功能\\n<code>MODU</code>：Module 某个模块\\n<code>FUNC</code>：Function 某个函数\\n<code>CODE</code>：Code 某段代码\\n<code>CONT</code>：Content 某种内容\\n<code>ANNO</code>：Annotation 某些注释</p>\\n</blockquote>\\n</li>\\n<li><p>业务之外的对象：</p>\\n<blockquote>\\n<p><code>CONF</code>：Config 配置文件\\n<code>DEP</code>：Dependences 依赖配置\\n<code>POM</code>：POM文件\\n<code>README</code>：Readme文件\\n<code>IGNORE</code>：gitignore文件\\n<code>FILE</code>：File\\n<code>STRUCT</code>：Project Structure 项目结构</p>\\n</blockquote>\\n</li>\\n</ul>\\n</li>\\n</ul>\\n<hr>\\n<p>所以我commit的第一行会是这样的：</p>\\n<pre><code class=\\\"hljs language-vim\\\">CPLFEAT RPBUG TOFUNC FIXBUG MODIGNORE\\n</code></pre>\\n<p>这表示我当次commit完成了：</p>\\n<blockquote>\\n<p><em>我在完成一个<code>新功能</code>的同时还<code>发现了一个BUG</code>顺便<code>封装了之前写的重复的代码为函数</code>提高了代码重用率接着<code>修复了之前发现的一些BUG</code>最后还<code>修改了一下ignore文件</code>！</em></p>\\n</blockquote>\\n<h3 id=\\\"第二行\\\">第二行</h3>\\n<p>得是一个空行</p>\\n<h3 id=\\\"第三行\\\">第三行</h3>\\n<p>开始按照第一行的写下的工作标识符顺序分条进行简要说明，一般来说，简单而清晰表达即可。但是有以下规定：</p>\\n<ul>\\n<li>以工作标识符加冒号占一行。</li>\\n<li>如有当前工作有多个要点，必须有序得分条说明。</li>\\n<li>每条说明文字必须要指明改动源与改动目的。</li>\\n<li>当commit多个文件时，涉及代码改动的每条说明文字的最后一个字符必须以一个tab键进行制表空格；然后写上<code>//fileName.fileSuffix</code>来表明当前这条改动的工作是在哪个文件上进行的；如有必要，可在文件名后面加上<code>(12-67)</code>表明改动的行段；如涉及多个文件，则文件之间以空格分隔。</li>\\n<li>每个工作说明完之后必须空一行，最后一个工作除外。</li>\\n<li>全英文标点符号，即使有中文说明；说明行末不加任何标点符号，即使是英文句号。</li>\\n<li>FIX后面必须加上对应<code>RPBUG</code>的版本号（如果是以前的commit中report的BUG的话，如果是当次commit发现的BUG可以不用写版本号，并且可以不写<code>RPBUG</code>标识符），然后再简单说明FIX了什么BUG，最后明如何FIX即可。</li>\\n<li>如果是一些可以忽略说明的工作，则可以直接在标识符后面加上<code>*</code>，表示忽略说明（如<code>MODIGNORE</code>标识符）。</li>\\n</ul>\\n<p>比如：</p>\\n<pre><code class=\\\"hljs language-vim\\\">CPLFEAT:\\n<span class=\\\"hljs-number\\\">1</span>.初步完成了用户登陆功能 //LoginService.java\\n<span class=\\\"hljs-number\\\">2</span>.初步完成了用户注册功能 //SignupService.java\\n</code></pre>\\n<hr>\\n<p>以上基本可以清晰表达commit的内容了，下面是一个完整的示例：</p>\\n<pre><code class=\\\"hljs language-vim\\\">CPLFEAT RPBUG TOFUNC FIXBUG MODIGNORE\\n\\nCPLFEAT:\\n<span class=\\\"hljs-number\\\">1</span>.初步完成了用户登陆功能 //LoginService.java\\n<span class=\\\"hljs-number\\\">2</span>.初步完成了用户注册功能 //SignupService.java\\n\\nREBUG:\\n<span class=\\\"hljs-number\\\">1</span>.登陆免验证时,在获取session变量时抛空指针异常  //LoginFilter.java(<span class=\\\"hljs-number\\\">39</span>)\\n\\nTOFUNC:\\n<span class=\\\"hljs-number\\\">1</span>.用户名非法判断抽象成userNameRegExp()方法  //LoginFilter.java(<span class=\\\"hljs-number\\\">46</span>-<span class=\\\"hljs-number\\\">68</span>) LoginService.java(<span class=\\\"hljs-number\\\">35</span>-<span class=\\\"hljs-number\\\">57</span>)\\n\\nFIXBUG：\\n<span class=\\\"hljs-number\\\">1.59</span>ad23do,表单重复提交,增加了session验证来防止表单重复提交 //BaseService.java\\n\\nMODIGNORE:*\\n</code></pre>\\n\";","export default \"<h4 id=\\\"小声bb\\\">小声BB</h4>\\n<p>整理一波查找相关的东西</p>\\n<ul>\\n<li>几个元素查找算法如：<ul>\\n<li>顺序查找</li>\\n<li>二分查找</li>\\n<li>分块查找</li>\\n<li>哈希查找</li>\\n</ul>\\n</li>\\n<li>字符串匹配：<ul>\\n<li>蛮力法</li>\\n<li>KMP</li>\\n</ul>\\n</li>\\n</ul>\\n<hr>\\n<h4 id=\\\"术语\\\">术语</h4>\\n<h5 id=\\\"asl（average-search-length）\\\">ASL（Average Search Length）</h5>\\n<p>平均查找长度：为确定记录在查找表中的位置，需和给定值进行比较的关键字的个数的期望值；</p>\\n<p>公式：</p>\\n<p><span class=\\\"katex-display katexp\\\"><span class=\\\"katex-display\\\"><span class=\\\"katex\\\"><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:1.5324em;vertical-align:-0.2769em;\\\"></span><span class=\\\"mord mathnormal\\\">A</span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.05764em;\\\">S</span><span class=\\\"mord mathnormal\\\">L</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2778em;\\\"></span><span class=\\\"mrel\\\"><span class=\\\"mrel\\\">=</span><span class=\\\"msupsub\\\"><span class=\\\"vlist-t vlist-t2\\\"><span class=\\\"vlist-r\\\"><span class=\\\"vlist\\\" style=\\\"height:1.2556em;\\\"><span style=\\\"top:-2.4231em;margin-left:0em;margin-right:0.05em;\\\"><span class=\\\"pstrut\\\" style=\\\"height:2.7em;\\\"></span><span class=\\\"sizing reset-size6 size3 mtight\\\"><span class=\\\"mord mtight\\\"><span class=\\\"mord mathnormal mtight\\\">i</span><span class=\\\"mrel mtight\\\">=</span><span class=\\\"mord mtight\\\">1</span></span></span></span><span style=\\\"top:-3.4106em;margin-right:0.05em;\\\"><span class=\\\"pstrut\\\" style=\\\"height:2.7em;\\\"></span><span class=\\\"sizing reset-size6 size3 mtight\\\"><span class=\\\"mord mtight\\\"><span class=\\\"mord mtight\\\"><span class=\\\"mopen nulldelimiter sizing reset-size3 size6\\\"></span><span class=\\\"mfrac\\\"><span class=\\\"vlist-t vlist-t2\\\"><span class=\\\"vlist-r\\\"><span class=\\\"vlist\\\" style=\\\"height:0.7785em;\\\"><span style=\\\"top:-2.1917em;\\\"><span class=\\\"pstrut\\\" style=\\\"height:2.5357em;\\\"></span><span class=\\\"sizing reset-size3 size1 mtight\\\"><span class=\\\"mord mtight\\\"><span class=\\\"mop op-symbol small-op mtight\\\" style=\\\"position:relative;top:0em;\\\">∑</span></span></span></span><span style=\\\"top:-3.0067em;\\\"><span class=\\\"pstrut\\\" style=\\\"height:2.5357em;\\\"></span><span class=\\\"sizing reset-size3 size1 mtight\\\"><span class=\\\"mord mtight\\\"><span class=\\\"mord mathnormal mtight\\\">n</span></span></span></span></span><span class=\\\"vlist-s\\\">​</span></span><span class=\\\"vlist-r\\\"><span class=\\\"vlist\\\" style=\\\"height:0.5226em;\\\"><span></span></span></span></span></span><span class=\\\"mclose nulldelimiter sizing reset-size3 size6\\\"></span></span></span></span></span></span><span class=\\\"vlist-s\\\">​</span></span><span class=\\\"vlist-r\\\"><span class=\\\"vlist\\\" style=\\\"height:0.2769em;\\\"><span></span></span></span></span></span></span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2778em;\\\"></span></span><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.8333em;vertical-align:-0.15em;\\\"></span><span class=\\\"mord\\\"><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.13889em;\\\">P</span><span class=\\\"msupsub\\\"><span class=\\\"vlist-t vlist-t2\\\"><span class=\\\"vlist-r\\\"><span class=\\\"vlist\\\" style=\\\"height:0.3117em;\\\"><span style=\\\"top:-2.55em;margin-left:-0.1389em;margin-right:0.05em;\\\"><span class=\\\"pstrut\\\" style=\\\"height:2.7em;\\\"></span><span class=\\\"sizing reset-size6 size3 mtight\\\"><span class=\\\"mord mathnormal mtight\\\">i</span></span></span></span><span class=\\\"vlist-s\\\">​</span></span><span class=\\\"vlist-r\\\"><span class=\\\"vlist\\\" style=\\\"height:0.15em;\\\"><span></span></span></span></span></span></span><span class=\\\"mord\\\"><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.07153em;\\\">C</span><span class=\\\"msupsub\\\"><span class=\\\"vlist-t vlist-t2\\\"><span class=\\\"vlist-r\\\"><span class=\\\"vlist\\\" style=\\\"height:0.3117em;\\\"><span style=\\\"top:-2.55em;margin-left:-0.0715em;margin-right:0.05em;\\\"><span class=\\\"pstrut\\\" style=\\\"height:2.7em;\\\"></span><span class=\\\"sizing reset-size6 size3 mtight\\\"><span class=\\\"mord mathnormal mtight\\\">i</span></span></span></span><span class=\\\"vlist-s\\\">​</span></span><span class=\\\"vlist-r\\\"><span class=\\\"vlist\\\" style=\\\"height:0.15em;\\\"><span></span></span></span></span></span></span></span></span></span></span></span>\\n其中<em><strong>Pi</strong></em>为查找表中第<em><strong>i</strong></em>个记录的概率；<em><strong>Ci</strong></em>为找到表中关键字和给定值的第<em><strong>i</strong></em>个记录时，和给定值已进行比较的<strong>关键字个数</strong></p>\\n<p>假设有顺序查找，长度为n，假设每个记录查找的概率相等（无重复），即</p>\\n<p><span class=\\\"katex-display katexp\\\"><span class=\\\"katex-display\\\"><span class=\\\"katex\\\"><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.8333em;vertical-align:-0.15em;\\\"></span><span class=\\\"mord\\\"><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.13889em;\\\">P</span><span class=\\\"msupsub\\\"><span class=\\\"vlist-t vlist-t2\\\"><span class=\\\"vlist-r\\\"><span class=\\\"vlist\\\" style=\\\"height:0.3117em;\\\"><span style=\\\"top:-2.55em;margin-left:-0.1389em;margin-right:0.05em;\\\"><span class=\\\"pstrut\\\" style=\\\"height:2.7em;\\\"></span><span class=\\\"sizing reset-size6 size3 mtight\\\"><span class=\\\"mord mathnormal mtight\\\">i</span></span></span></span><span class=\\\"vlist-s\\\">​</span></span><span class=\\\"vlist-r\\\"><span class=\\\"vlist\\\" style=\\\"height:0.15em;\\\"><span></span></span></span></span></span></span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2778em;\\\"></span><span class=\\\"mrel\\\">=</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2778em;\\\"></span></span><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:1em;vertical-align:-0.25em;\\\"></span><span class=\\\"mord\\\">1/</span><span class=\\\"mord mathnormal\\\">n</span></span></span></span></span></span>\\n则：</p>\\n<p><span class=\\\"katex-display katexp\\\"><span class=\\\"katex-display\\\"><span class=\\\"katex\\\"><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:3.8074em;vertical-align:-1.6537em;\\\"></span><span class=\\\"mord\\\"><span class=\\\"mtable\\\"><span class=\\\"col-align-r\\\"><span class=\\\"vlist-t vlist-t2\\\"><span class=\\\"vlist-r\\\"><span class=\\\"vlist\\\" style=\\\"height:2.1537em;\\\"><span style=\\\"top:-4.6352em;\\\"><span class=\\\"pstrut\\\" style=\\\"height:3.3214em;\\\"></span><span class=\\\"mord\\\"><span class=\\\"mord mathnormal\\\">A</span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.05764em;\\\">S</span><span class=\\\"mord mathnormal\\\">L</span></span></span><span style=\\\"top:-2.6537em;\\\"><span class=\\\"pstrut\\\" style=\\\"height:3.3214em;\\\"></span><span class=\\\"mord\\\"></span></span></span><span class=\\\"vlist-s\\\">​</span></span><span class=\\\"vlist-r\\\"><span class=\\\"vlist\\\" style=\\\"height:1.6537em;\\\"><span></span></span></span></span></span><span class=\\\"col-align-l\\\"><span class=\\\"vlist-t vlist-t2\\\"><span class=\\\"vlist-r\\\"><span class=\\\"vlist\\\" style=\\\"height:2.1537em;\\\"><span style=\\\"top:-4.6352em;\\\"><span class=\\\"pstrut\\\" style=\\\"height:3.3214em;\\\"></span><span class=\\\"mord\\\"><span class=\\\"mord\\\"></span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2778em;\\\"></span><span class=\\\"mrel\\\">=</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2778em;\\\"></span><span class=\\\"mopen\\\">(</span><span class=\\\"mord\\\">1</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2222em;\\\"></span><span class=\\\"mbin\\\">∗</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2222em;\\\"></span><span class=\\\"mord\\\">1/</span><span class=\\\"mord mathnormal\\\">n</span><span class=\\\"mclose\\\">)</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2222em;\\\"></span><span class=\\\"mbin\\\">+</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2222em;\\\"></span><span class=\\\"mopen\\\">(</span><span class=\\\"mord\\\">2</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2222em;\\\"></span><span class=\\\"mbin\\\">∗</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2222em;\\\"></span><span class=\\\"mord\\\">1/</span><span class=\\\"mord mathnormal\\\">n</span><span class=\\\"mclose\\\">)</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2222em;\\\"></span><span class=\\\"mbin\\\">+</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2222em;\\\"></span><span class=\\\"minner\\\">⋯</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2222em;\\\"></span><span class=\\\"mbin\\\">+</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2222em;\\\"></span><span class=\\\"mopen\\\">(</span><span class=\\\"mord mathnormal\\\">n</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2222em;\\\"></span><span class=\\\"mbin\\\">∗</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2222em;\\\"></span><span class=\\\"mord\\\">1/</span><span class=\\\"mord mathnormal\\\">n</span><span class=\\\"mclose\\\">)</span></span></span><span style=\\\"top:-2.6537em;\\\"><span class=\\\"pstrut\\\" style=\\\"height:3.3214em;\\\"></span><span class=\\\"mord\\\"><span class=\\\"mord\\\"></span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2778em;\\\"></span><span class=\\\"mrel\\\">=</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2778em;\\\"></span><span class=\\\"mopen\\\">[</span><span class=\\\"mord\\\">1/</span><span class=\\\"mord mathnormal\\\">n</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2222em;\\\"></span><span class=\\\"mbin\\\">∗</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2222em;\\\"></span><span class=\\\"mopen\\\">(</span><span class=\\\"mord mathnormal\\\">n</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2222em;\\\"></span><span class=\\\"mbin\\\">∗</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2222em;\\\"></span><span class=\\\"mord\\\"><span class=\\\"mopen nulldelimiter\\\"></span><span class=\\\"mfrac\\\"><span class=\\\"vlist-t vlist-t2\\\"><span class=\\\"vlist-r\\\"><span class=\\\"vlist\\\" style=\\\"height:1.3214em;\\\"><span style=\\\"top:-2.314em;\\\"><span class=\\\"pstrut\\\" style=\\\"height:3em;\\\"></span><span class=\\\"mord\\\"><span class=\\\"mord\\\">2</span></span></span><span style=\\\"top:-3.23em;\\\"><span class=\\\"pstrut\\\" style=\\\"height:3em;\\\"></span><span class=\\\"frac-line\\\" style=\\\"border-bottom-width:0.04em;\\\"></span></span><span style=\\\"top:-3.677em;\\\"><span class=\\\"pstrut\\\" style=\\\"height:3em;\\\"></span><span class=\\\"mord\\\"><span class=\\\"mord mathnormal\\\">n</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2222em;\\\"></span><span class=\\\"mbin\\\">+</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2222em;\\\"></span><span class=\\\"mord\\\">1</span></span></span></span><span class=\\\"vlist-s\\\">​</span></span><span class=\\\"vlist-r\\\"><span class=\\\"vlist\\\" style=\\\"height:0.686em;\\\"><span></span></span></span></span></span><span class=\\\"mclose nulldelimiter\\\"></span></span><span class=\\\"mclose\\\">)]</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2778em;\\\"></span><span class=\\\"mrel\\\">=</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2778em;\\\"></span><span class=\\\"mord\\\"><span class=\\\"mopen nulldelimiter\\\"></span><span class=\\\"mfrac\\\"><span class=\\\"vlist-t vlist-t2\\\"><span class=\\\"vlist-r\\\"><span class=\\\"vlist\\\" style=\\\"height:1.3214em;\\\"><span style=\\\"top:-2.314em;\\\"><span class=\\\"pstrut\\\" style=\\\"height:3em;\\\"></span><span class=\\\"mord\\\"><span class=\\\"mord\\\">2</span></span></span><span style=\\\"top:-3.23em;\\\"><span class=\\\"pstrut\\\" style=\\\"height:3em;\\\"></span><span class=\\\"frac-line\\\" style=\\\"border-bottom-width:0.04em;\\\"></span></span><span style=\\\"top:-3.677em;\\\"><span class=\\\"pstrut\\\" style=\\\"height:3em;\\\"></span><span class=\\\"mord\\\"><span class=\\\"mord mathnormal\\\">n</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2222em;\\\"></span><span class=\\\"mbin\\\">+</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2222em;\\\"></span><span class=\\\"mord\\\">1</span></span></span></span><span class=\\\"vlist-s\\\">​</span></span><span class=\\\"vlist-r\\\"><span class=\\\"vlist\\\" style=\\\"height:0.686em;\\\"><span></span></span></span></span></span><span class=\\\"mclose nulldelimiter\\\"></span></span></span></span></span><span class=\\\"vlist-s\\\">​</span></span><span class=\\\"vlist-r\\\"><span class=\\\"vlist\\\" style=\\\"height:1.6537em;\\\"><span></span></span></span></span></span></span></span></span></span></span></span></span>\\n但是以上仅是查找成功的概率，如果查找成功和查找成功则这个概率是</p>\\n<p><span class=\\\"katex-display katexp\\\"><span class=\\\"katex-display\\\"><span class=\\\"katex\\\"><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:2.0074em;vertical-align:-0.686em;\\\"></span><span class=\\\"mord\\\"><span class=\\\"mopen nulldelimiter\\\"></span><span class=\\\"mfrac\\\"><span class=\\\"vlist-t vlist-t2\\\"><span class=\\\"vlist-r\\\"><span class=\\\"vlist\\\" style=\\\"height:1.3214em;\\\"><span style=\\\"top:-2.314em;\\\"><span class=\\\"pstrut\\\" style=\\\"height:3em;\\\"></span><span class=\\\"mord\\\"><span class=\\\"mord\\\">4</span></span></span><span style=\\\"top:-3.23em;\\\"><span class=\\\"pstrut\\\" style=\\\"height:3em;\\\"></span><span class=\\\"frac-line\\\" style=\\\"border-bottom-width:0.04em;\\\"></span></span><span style=\\\"top:-3.677em;\\\"><span class=\\\"pstrut\\\" style=\\\"height:3em;\\\"></span><span class=\\\"mord\\\"><span class=\\\"mord\\\">3</span></span></span></span><span class=\\\"vlist-s\\\">​</span></span><span class=\\\"vlist-r\\\"><span class=\\\"vlist\\\" style=\\\"height:0.686em;\\\"><span></span></span></span></span></span><span class=\\\"mclose nulldelimiter\\\"></span></span><span class=\\\"mopen\\\">(</span><span class=\\\"mord mathnormal\\\">n</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2222em;\\\"></span><span class=\\\"mbin\\\">+</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2222em;\\\"></span></span><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:1em;vertical-align:-0.25em;\\\"></span><span class=\\\"mord\\\">1</span><span class=\\\"mclose\\\">)</span></span></span></span></span></span></p>\\n<hr>\\n<h4 id=\\\"元素查找算法\\\">元素查找算法</h4>\\n<h5 id=\\\"顺序查找（sequential-search）\\\">顺序查找（Sequential Search）</h5>\\n<pre><code class=\\\"hljs language-java\\\"><span class=\\\"hljs-keyword\\\">public</span> <span class=\\\"hljs-keyword\\\">static</span> <span class=\\\"hljs-type\\\">int</span> <span class=\\\"hljs-title function_\\\">orderSearch</span><span class=\\\"hljs-params\\\">(<span class=\\\"hljs-type\\\">int</span> arr[], <span class=\\\"hljs-type\\\">int</span> target)</span> {\\n    <span class=\\\"hljs-keyword\\\">for</span> (<span class=\\\"hljs-type\\\">int</span> <span class=\\\"hljs-variable\\\">i</span> <span class=\\\"hljs-operator\\\">=</span> <span class=\\\"hljs-number\\\">0</span>; i &lt; arr.length; i++)\\n        <span class=\\\"hljs-keyword\\\">if</span> (arr[i] == target)\\n            <span class=\\\"hljs-keyword\\\">return</span> i;\\n    <span class=\\\"hljs-keyword\\\">return</span> -<span class=\\\"hljs-number\\\">1</span>;\\n}\\n</code></pre>\\n<p>不解释，时间复杂度：<strong>O(n)，ASL(ss) =（n + 1）/ 2</strong></p>\\n<h5 id=\\\"二分查找折半查找（binary-search）\\\">二分查找/折半查找（Binary Search）</h5>\\n<blockquote>\\n<p>二分查找又称折半查找，优点是比较次数少，查找速度快，平均性能好；其缺点是要求待查表为有序表，且插入删除困难。</p>\\n<p>因此，折半查找方法适用于不经常变动而查找频繁的有序列表。</p>\\n<p>两个条件：1）序列有序；2）可以随机访问</p>\\n</blockquote>\\n<pre><code class=\\\"hljs language-java\\\"><span class=\\\"hljs-keyword\\\">public</span> <span class=\\\"hljs-keyword\\\">static</span> <span class=\\\"hljs-type\\\">int</span> <span class=\\\"hljs-title function_\\\">dynamicBinarySearch</span><span class=\\\"hljs-params\\\">(<span class=\\\"hljs-type\\\">int</span>[] arr, <span class=\\\"hljs-type\\\">int</span> start, <span class=\\\"hljs-type\\\">int</span> end, <span class=\\\"hljs-type\\\">int</span> target)</span> {\\n    <span class=\\\"hljs-type\\\">int</span> <span class=\\\"hljs-variable\\\">low</span> <span class=\\\"hljs-operator\\\">=</span> start, high = end, mid;\\n    <span class=\\\"hljs-keyword\\\">while</span> (low &lt;= high) {\\n        mid = (low + high) &gt;&gt;&gt; <span class=\\\"hljs-number\\\">1</span>;\\n        <span class=\\\"hljs-keyword\\\">if</span> (arr[mid] &lt; target) {\\n            low = mid + <span class=\\\"hljs-number\\\">1</span>;\\n        } <span class=\\\"hljs-keyword\\\">else</span> <span class=\\\"hljs-keyword\\\">if</span> (arr[mid] &gt; target) {\\n            high = mid - <span class=\\\"hljs-number\\\">1</span>;\\n        } <span class=\\\"hljs-keyword\\\">else</span> {\\n            <span class=\\\"hljs-keyword\\\">return</span> mid;\\n        }\\n    }\\n    <span class=\\\"hljs-keyword\\\">return</span> -low;\\n}\\n</code></pre>\\n<p>以上为动态二分查找，也就是如果找不到结果，就返回元素要插入位置的负数；一般的查找，找不到元素就返回-1；</p>\\n<p>时间复杂度为<strong>O(logn)</strong></p>\\n<h6 id=\\\"二分的asl计算\\\">二分的ASL计算</h6>\\n<blockquote>\\n<p>来源：<a href=\\\"https://www.nowcoder.com/profile/1105774/myFollowings/detail/6105243\\\">https://www.nowcoder.com/profile/1105774/myFollowings/detail/6105243</a></p>\\n</blockquote>\\n<blockquote>\\n<p>题目：</p>\\n<p>具有12个关键字的有序表,折半查找的平均查找长度为（）</p>\\n<p>A 3.1    B 4        C 2.5    D 5</p>\\n</blockquote>\\n<blockquote>\\n<p>解答：</p>\\n<p>将12个数画成完全二叉树，第一层有1个、第二次2个、第三层4个，第四层只有5个。</p>\\n<p>二分查找时：</p>\\n<p>第一层需要比较1次</p>\\n<p>第二两个数，每个比较2次</p>\\n<p>第三层四个数，每个比较3次</p>\\n<p>第四层五个数，每个比较4次</p>\\n<p>则平均查找长度即为：（1 + <strong>2 * 2</strong> + <strong>3 * 4</strong> + <strong>4 * 5</strong>）/ 12 = 37/12 = 3.0833 即为 A、3.1</p>\\n</blockquote>\\n<h5 id=\\\"分块查找索引查找（block-searchindex-search）\\\">分块查找/索引查找（Block Search/Index Search）</h5>\\n<blockquote>\\n<h4 id=\\\"简介\\\">简介</h4>\\n<p>分块查找是折半查找和顺序查找的一种改进方法，分块查找由于只要求索引表是有序的，对块内节点没有排序要求（块内无序，块间有序），因此特别适合于节点<strong>动态变化</strong>的情况。</p>\\n<p>折半查找虽然具有很好的性能，但其前提条件时线性表顺序存储而且按照关键码排序，这一前提条件在结点树很大且表元素动态变化时是难以满足的。而顺序查找可以解决表元素动态变化的要求，但查找效率很低。如果既要保持对线性表的查找具有较快的速度，又要能够满足表元素动态变化的要求，则可采用分块查找的方法。</p>\\n<p>当增加或减少节以及节点的关键码改变时，只需将该节点调整到所在的块即可。在空间复杂性上，分块查找的主要代价是增加了一个辅助数组。</p>\\n<h4 id=\\\"方法描述\\\">方法描述</h4>\\n<p>分块查找要求把一个大的线性表分解成若干块，每块中的节点可以任意存放，但块与块之间必须排序。假设是按关键码值非递减的，那么这种块与块之间必须满足已排序要求，实际上就是对于任意的i，第i块中的所有节点的关键码值都必须小于第i+1块中的所有节点的关键码值。还要建立一个索引表（索引表中为每一块都设置索引项，每一个索引项都包含两个内容）</p>\\n<ul>\\n<li>该块的起始地址</li>\\n<li>该块中最大的元素</li>\\n</ul>\\n<h4 id=\\\"性能分析\\\">性能分析</h4>\\n<p>这种带索引表的分块有序表查找的时间性能取决于两步查找时间之和：如前面所述，第一步可以采用简单顺序查找和折半查找之一进行。第二步只能采用简单顺序查找，但由于子表的长度较原表的长度小。因此，其时间性能介于顺序查找和折半查找之间。</p>\\n<p>假设索引表有n个元素，每块含有s个元素，</p>\\n<ul>\\n<li><p>平均查找长度为：<strong>ASL=(n/s+s)/2 +1</strong></p>\\n</li>\\n<li><p>时间复杂度为：<strong>O(n)~O(log2n)</strong></p>\\n</li>\\n</ul>\\n</blockquote>\\n<hr>\\n<h4 id=\\\"字符串匹配\\\">字符串匹配</h4>\\n<p>问题：给定一个n长度的字符串（text），一个m（m&lt;=n）长度的串（pattern），从text中找匹配pattern的字串</p>\\n<h5 id=\\\"蛮力法\\\">蛮力法</h5>\\n<blockquote>\\n<p>实现1，参考于：<em>《算法设计与分析基础》（第三版）P-81</em></p>\\n</blockquote>\\n<pre><code class=\\\"hljs language-java\\\"><span class=\\\"hljs-keyword\\\">public</span> <span class=\\\"hljs-type\\\">int</span> <span class=\\\"hljs-title function_\\\">bruteForceStringMatch</span><span class=\\\"hljs-params\\\">(String text, String pattern)</span>{\\n    <span class=\\\"hljs-type\\\">char</span>[] t = text.toCharArray();\\n    <span class=\\\"hljs-type\\\">char</span>[] p = pattern.toCharArray();\\n    <span class=\\\"hljs-type\\\">int</span> <span class=\\\"hljs-variable\\\">n</span> <span class=\\\"hljs-operator\\\">=</span> t.length;\\n    <span class=\\\"hljs-type\\\">int</span> <span class=\\\"hljs-variable\\\">m</span> <span class=\\\"hljs-operator\\\">=</span> p.length;\\n    <span class=\\\"hljs-keyword\\\">for</span> (<span class=\\\"hljs-type\\\">int</span> <span class=\\\"hljs-variable\\\">i</span> <span class=\\\"hljs-operator\\\">=</span> <span class=\\\"hljs-number\\\">0</span>; i &lt;= n - m; i++){\\n        <span class=\\\"hljs-type\\\">int</span> <span class=\\\"hljs-variable\\\">j</span> <span class=\\\"hljs-operator\\\">=</span> <span class=\\\"hljs-number\\\">0</span>;\\n        <span class=\\\"hljs-keyword\\\">while</span>(j &lt; m && p[j] == t[i + j]){\\n            j++;\\n            <span class=\\\"hljs-keyword\\\">if</span> (j == m) <span class=\\\"hljs-keyword\\\">return</span> i;\\n        }\\n    }\\n    <span class=\\\"hljs-keyword\\\">return</span> -<span class=\\\"hljs-number\\\">1</span>;\\n}\\n</code></pre>\\n<p>时间复杂度：最坏<strong>O(nm)<strong>，平均</strong>O(n)</strong></p>\\n<p>上法之所以叫蛮力法，因为它真的是在两串之间逐个字符地去比较，花费了很多不必要的工作，比如：</p>\\n<p>有text：“abcabe”</p>\\n<p>有patt：“abe”</p>\\n<p>当<strong>i = 0，j = 2</strong>的时候，也就是c和e比较的时候就发现不等了，蛮力法的做法是讲<strong>i往后移1位，j置0，从第一个b开始和patt的a开始比较！</strong>但是我们前面已经知道了patt的第一个字符就是<strong>a</strong>，和<strong>text[1]b</strong>比较必然无果</p>\\n<p>这时候就会做一些徒劳工，<strong>你要把主串中前面比较过的元素再和匹配串从头到尾进行一次比较</strong></p>\\n<p>因此就需要找到一个方法，记录好每次的已知条件，不再做徒劳的事情，于是就有了KMP算法</p>\\n<h5 id=\\\"kmp\\\">KMP</h5>\\n<p>关于KMP的原理不再多说了，因为时间关系，以后如果有时间，会自己再写清楚的</p>\\n<blockquote>\\n<p>原理参考：</p>\\n<ul>\\n<li></li>\\n<li><p><a href=\\\"http://jakeboxer.com/blog/2009/12/13/the-knuth-morris-pratt-algorithm-in-my-own-words/\\\">http://jakeboxer.com/blog/2009/12/13/the-knuth-morris-pratt-algorithm-in-my-own-words/</a></p>\\n</li>\\n<li><p><a href=\\\"https://www.cnblogs.com/yjiyjige/p/3263858.html\\\">https://www.cnblogs.com/yjiyjige/p/3263858.html</a></p>\\n</li>\\n<li><p><a href=\\\"https://subetter.com/algorithm/kmp-algorithm.html\\\">刘毅</a></p>\\n</li>\\n</ul>\\n</blockquote>\\n<h6 id=\\\"next\\\">next</h6>\\n<p>下面主要讨论<em>next函数</em>的代码和手算过程：</p>\\n<pre><code class=\\\"hljs language-java\\\"><span class=\\\"hljs-keyword\\\">public</span> <span class=\\\"hljs-keyword\\\">static</span> <span class=\\\"hljs-type\\\">int</span>[] next(<span class=\\\"hljs-type\\\">char</span>[] p) {\\n    <span class=\\\"hljs-type\\\">int</span>[] next = <span class=\\\"hljs-keyword\\\">new</span> <span class=\\\"hljs-title class_\\\">int</span>[p.length];\\n    next[<span class=\\\"hljs-number\\\">0</span>] = -<span class=\\\"hljs-number\\\">1</span>;\\n    <span class=\\\"hljs-type\\\">int</span> <span class=\\\"hljs-variable\\\">j</span> <span class=\\\"hljs-operator\\\">=</span> <span class=\\\"hljs-number\\\">0</span>;\\n    <span class=\\\"hljs-type\\\">int</span> <span class=\\\"hljs-variable\\\">k</span> <span class=\\\"hljs-operator\\\">=</span> -<span class=\\\"hljs-number\\\">1</span>;\\n    <span class=\\\"hljs-keyword\\\">while</span> (j &lt; p.length - <span class=\\\"hljs-number\\\">1</span>) {\\n        <span class=\\\"hljs-keyword\\\">if</span> (k == -<span class=\\\"hljs-number\\\">1</span> || p[j] == p[k]) {\\n            j++;\\n            k++;\\n            next[j] = k;\\n        } <span class=\\\"hljs-keyword\\\">else</span> {\\n            k = next[k];\\n        }\\n    }\\n    <span class=\\\"hljs-keyword\\\">return</span> next;\\n}\\n</code></pre>\\n<p>根据这个，求出next数组，数组中每个值代表<strong>部分匹配</strong>，一下摘自<a href=\\\"https://subetter.com/articles/2018/04/how-to-understand-kmp.html\\\">刘毅</a>中的手算过程，稍作修改：</p>\\n<blockquote>\\n<p>手算<strong>“ABCDABD”</strong></p>\\n<ol>\\n<li>i = 0，对于模式串的首字符，我们统一为<code>next[0] = -1</code>；</li>\\n<li>i = 1，<code>p[1] = B</code>前面的字符串为<code>A</code>，其最长相同真前后缀长度为 0，即<code>next[1] = 0</code>；</li>\\n<li>i = 2，<code>p[2] = C</code>前面的字符串为<code>AB</code>，其最长相同真前后缀长度为 0，即<code>next[2] = 0</code>；</li>\\n<li>i = 3，<code>p[3] = D</code>前面的字符串为<code>ABC</code>，其最长相同真前后缀长度为 0，即<code>next[3] = 0</code>；</li>\\n<li>i = 4，<code>p[4] = A</code>前面的字符串为<code>ABCD</code>，其最长相同真前后缀长度为 0，即<code>next[4] = 0</code>；</li>\\n<li>i = 5，<code>p[5] = B</code>前面的字符串为<code>ABCDA</code>，其最长相同真前后缀为<code>A</code>，即<code>next[5] = 1</code>；</li>\\n<li>i = 6，<code>p[6] = D</code>前面的字符串为<code>ABCDAB</code>，其最长相同真前后缀为<code>AB</code>，即<code>next[6] = 2</code>；</li>\\n</ol>\\n</blockquote>\\n<h6 id=\\\"kmp-1\\\">kmp</h6>\\n<p>这是稍微简洁一点的实现</p>\\n<pre><code class=\\\"hljs language-java\\\"><span class=\\\"hljs-keyword\\\">public</span> <span class=\\\"hljs-keyword\\\">static</span> <span class=\\\"hljs-type\\\">int</span> <span class=\\\"hljs-title function_\\\">kmp</span><span class=\\\"hljs-params\\\">(<span class=\\\"hljs-type\\\">char</span>[] t, <span class=\\\"hljs-type\\\">char</span>[] p)</span> {\\n    <span class=\\\"hljs-type\\\">int</span>[] next = next(p);\\n    <span class=\\\"hljs-type\\\">int</span> <span class=\\\"hljs-variable\\\">i</span> <span class=\\\"hljs-operator\\\">=</span> <span class=\\\"hljs-number\\\">0</span>;\\n    <span class=\\\"hljs-type\\\">int</span> <span class=\\\"hljs-variable\\\">j</span> <span class=\\\"hljs-operator\\\">=</span> <span class=\\\"hljs-number\\\">0</span>;\\n    <span class=\\\"hljs-keyword\\\">while</span> (i &lt; t.length && j &lt; p.length) {\\n        <span class=\\\"hljs-keyword\\\">if</span> (j == -<span class=\\\"hljs-number\\\">1</span> || t[i] == p[j]) {\\n            <span class=\\\"hljs-comment\\\">// 有匹配就++</span>\\n            i++;\\n            j++;\\n        } <span class=\\\"hljs-keyword\\\">else</span> {\\n            <span class=\\\"hljs-comment\\\">// 否则就按照next去移位j</span>\\n            j = next[j];\\n        }\\n    }\\n    <span class=\\\"hljs-keyword\\\">if</span> (j == p.length) {\\n        <span class=\\\"hljs-keyword\\\">return</span> i - j;\\n    } <span class=\\\"hljs-keyword\\\">else</span> {\\n        <span class=\\\"hljs-keyword\\\">return</span> -<span class=\\\"hljs-number\\\">1</span>;\\n    }\\n}\\n</code></pre>\\n<p>考虑得多一点的话，我们可以少匹配几次，比如我们考虑：</p>\\n<ul>\\n<li><p>如果text和pattern长度相等，如果text[0] != pattern[0]，那么就可以直接判断无匹配；</p>\\n</li>\\n<li><p>如果text长度小于pattern，直接-1；</p>\\n</li>\\n<li><p>在比对过程中，根据next[j]移位之时，如果移位后pattern接着要比对的串长，长过text剩下要比对的串长，直接-1，这是什么意思呢？</p>\\n<p>比如有text：abcdab<strong>c</strong>da</p>\\n<p>pattern：abcdab<strong>d</strong></p>\\n<p>i到c时，j到d时做比对，发现不等，但是主串这时的c前面有两个ab和pattern的前abc是相等的，移位后只需要<strong>j从pattern[3] = d开始比剩余的就好了，但是这时候text剩余要比较的只有da，但是pattern还有dabd要比较，所以这个长度之下就没必要再比较了，针对这个情况做优化</strong></p>\\n</li>\\n</ul>\\n<pre><code class=\\\"hljs language-java\\\"><span class=\\\"hljs-keyword\\\">public</span> <span class=\\\"hljs-keyword\\\">static</span> <span class=\\\"hljs-type\\\">int</span> <span class=\\\"hljs-title function_\\\">kmp</span><span class=\\\"hljs-params\\\">(<span class=\\\"hljs-type\\\">char</span>[] t, <span class=\\\"hljs-type\\\">char</span>[] p)</span> {\\n    <span class=\\\"hljs-keyword\\\">if</span> (t.length &lt; p.length) {\\n        <span class=\\\"hljs-keyword\\\">return</span> -<span class=\\\"hljs-number\\\">1</span>;\\n    } <span class=\\\"hljs-keyword\\\">else</span> <span class=\\\"hljs-keyword\\\">if</span> (t.length == p.length && t[<span class=\\\"hljs-number\\\">0</span>] != p[<span class=\\\"hljs-number\\\">0</span>]) {\\n        <span class=\\\"hljs-keyword\\\">return</span> -<span class=\\\"hljs-number\\\">1</span>;\\n    }\\n    <span class=\\\"hljs-type\\\">int</span>[] next = next(pattern);\\n    <span class=\\\"hljs-type\\\">int</span> <span class=\\\"hljs-variable\\\">i</span> <span class=\\\"hljs-operator\\\">=</span> <span class=\\\"hljs-number\\\">0</span>;\\n    <span class=\\\"hljs-type\\\">int</span> <span class=\\\"hljs-variable\\\">j</span> <span class=\\\"hljs-operator\\\">=</span> <span class=\\\"hljs-number\\\">0</span>;\\n    <span class=\\\"hljs-keyword\\\">while</span> (i &lt; t.length && j &lt; p.length) {\\n        <span class=\\\"hljs-keyword\\\">if</span> (j == -<span class=\\\"hljs-number\\\">1</span> || t[i] == p[j]) {\\n            i++;\\n            j++;\\n        } <span class=\\\"hljs-keyword\\\">else</span> {\\n            j = next[j];\\n            <span class=\\\"hljs-keyword\\\">if</span> (t.length - i &lt;= p.length && j != -<span class=\\\"hljs-number\\\">1</span> && p.length - next[j] &lt;= t.length - i - <span class=\\\"hljs-number\\\">1</span>) {\\n                <span class=\\\"hljs-keyword\\\">return</span> -<span class=\\\"hljs-number\\\">1</span>;\\n            }\\n        }\\n    }\\n    <span class=\\\"hljs-keyword\\\">if</span> (j == p.length) {\\n        <span class=\\\"hljs-keyword\\\">return</span> i - j;\\n    } <span class=\\\"hljs-keyword\\\">else</span> {\\n        <span class=\\\"hljs-keyword\\\">return</span> -<span class=\\\"hljs-number\\\">1</span>;\\n    }\\n}\\n</code></pre>\\n<p>这里主要是<code>line：18-20</code>：在保证剩余串长还可以有效比对的情况下，还要保证移位后也能在长度内有效比对</p>\\n<h6 id=\\\"nextval\\\">nextVal</h6>\\n<p>nextVal数组是对next数组的变体，意在快速找到<strong>相同的真前后缀</strong>，便于定位匹配串，</p>\\n<p>nextVal有两种算法，一种是根据算好的next去算，另一种是直接根据定义去另外算nextVal；</p>\\n<p>第一种，适合笔试的时候手算，因为笔试的时候观察法手算next贼简单，然后算nextVal也贼简单，第二种就是写代码的时候简单，但是跟着代码去心算不好算</p>\\n<p>关于next和nextVal的对比，引用自<a href=\\\"https://subetter.com/algorithm/kmp-algorithm.html\\\">刘毅</a>：</p>\\n<blockquote>\\n<p><strong>KMP 算法（next）：</strong> next 数组表示最长的相同真前后缀的长度，我们不仅可以利用 next 来解决模式串的匹配问题，也可以用来解决类似字符串重复问题等等，这类问题大家可以在各大 OJ 找到，这里不作过多表述。</p>\\n<p><strong>KMP 算法（nextVal）：</strong> 根据代码很容易知道（名称也改为了 nextval），优化后的 next 仅仅表示相同真前后缀的长度，但<strong>不一定是最长</strong>（称其为 “最优相同真前后缀” 更为恰当）。此时我们利用优化后的 next 可以在模式串匹配问题中以更快的速度得到我们的答案（相较于未优化版），但是上述所说的字符串重复问题，优化版本则束手无策。</p>\\n<p>所以，该采用哪个版本，取决于你在现实中遇到的实际问题。</p>\\n</blockquote>\\n<pre><code class=\\\"hljs language-java\\\"><span class=\\\"hljs-keyword\\\">public</span> <span class=\\\"hljs-keyword\\\">static</span> <span class=\\\"hljs-type\\\">int</span>[] nextVal(<span class=\\\"hljs-type\\\">char</span>[] p) {\\n    <span class=\\\"hljs-type\\\">int</span>[] nextVal = <span class=\\\"hljs-keyword\\\">new</span> <span class=\\\"hljs-title class_\\\">int</span>[p.length];\\n    <span class=\\\"hljs-type\\\">int</span> <span class=\\\"hljs-variable\\\">j</span> <span class=\\\"hljs-operator\\\">=</span> <span class=\\\"hljs-number\\\">0</span>;\\n    <span class=\\\"hljs-type\\\">int</span> <span class=\\\"hljs-variable\\\">k</span> <span class=\\\"hljs-operator\\\">=</span> -<span class=\\\"hljs-number\\\">1</span>;\\n    nextVal[<span class=\\\"hljs-number\\\">0</span>] = -<span class=\\\"hljs-number\\\">1</span>;\\n    <span class=\\\"hljs-keyword\\\">while</span> (j &lt; p.length - <span class=\\\"hljs-number\\\">1</span>) {\\n        <span class=\\\"hljs-keyword\\\">if</span> (k == -<span class=\\\"hljs-number\\\">1</span> || p[j] == p[k]) {\\n            j++;\\n            k++;\\n            <span class=\\\"hljs-keyword\\\">if</span> (p[j] != p[k]) {\\n                nextVal[j] = k;\\n            } <span class=\\\"hljs-keyword\\\">else</span> {\\n                nextVal[j] = nextVal[k];\\n            }\\n        } <span class=\\\"hljs-keyword\\\">else</span> {\\n            k = nextVal[k];\\n        }\\n    }\\n    <span class=\\\"hljs-keyword\\\">return</span> nextVal;\\n}\\n</code></pre>\\n<p>下面展示如何手算，首先有next：</p>\\n<table>\\n<thead>\\n<tr>\\n<th align=\\\"center\\\">Index</th>\\n<th align=\\\"center\\\">0</th>\\n<th align=\\\"center\\\">1</th>\\n<th align=\\\"center\\\">2</th>\\n<th align=\\\"center\\\">3</th>\\n<th align=\\\"center\\\">4</th>\\n<th align=\\\"center\\\">5</th>\\n<th align=\\\"center\\\">6</th>\\n<th align=\\\"center\\\">7</th>\\n<th align=\\\"center\\\">8</th>\\n</tr>\\n</thead>\\n<tbody><tr>\\n<td align=\\\"center\\\"><strong>text[i]</strong></td>\\n<td align=\\\"center\\\">a</td>\\n<td align=\\\"center\\\">b</td>\\n<td align=\\\"center\\\">a</td>\\n<td align=\\\"center\\\">b</td>\\n<td align=\\\"center\\\">a</td>\\n<td align=\\\"center\\\">a</td>\\n<td align=\\\"center\\\">b</td>\\n<td align=\\\"center\\\">a</td>\\n<td align=\\\"center\\\">b</td>\\n</tr>\\n<tr>\\n<td align=\\\"center\\\"><strong>next[i]</strong></td>\\n<td align=\\\"center\\\">-1</td>\\n<td align=\\\"center\\\">0</td>\\n<td align=\\\"center\\\">0</td>\\n<td align=\\\"center\\\">1</td>\\n<td align=\\\"center\\\">2</td>\\n<td align=\\\"center\\\">3</td>\\n<td align=\\\"center\\\">1</td>\\n<td align=\\\"center\\\">2</td>\\n<td align=\\\"center\\\">3</td>\\n</tr>\\n</tbody></table>\\n<p>和next一样，nextVal的首位nextVal[0]也是定值-1，然后从<strong>nextVal[1] = b开始描述手算：</strong></p>\\n<p>当<code>i = 1</code>时，<code>compare = next[i] = 0</code>，<code>text[i] == text[compare] 即 b = a 吗？</code>，结果不等于，则<code>nextVal[i] = next[i] = 0</code>；</p>\\n<table>\\n<thead>\\n<tr>\\n<th align=\\\"center\\\">Index</th>\\n<th align=\\\"center\\\">0</th>\\n<th align=\\\"center\\\">1</th>\\n<th align=\\\"center\\\">2</th>\\n<th align=\\\"center\\\">3</th>\\n<th align=\\\"center\\\">4</th>\\n<th align=\\\"center\\\">5</th>\\n<th align=\\\"center\\\">6</th>\\n<th align=\\\"center\\\">7</th>\\n<th align=\\\"center\\\">8</th>\\n</tr>\\n</thead>\\n<tbody><tr>\\n<td align=\\\"center\\\"><strong>text[i]</strong></td>\\n<td align=\\\"center\\\">a</td>\\n<td align=\\\"center\\\">b</td>\\n<td align=\\\"center\\\">a</td>\\n<td align=\\\"center\\\">b</td>\\n<td align=\\\"center\\\">a</td>\\n<td align=\\\"center\\\">a</td>\\n<td align=\\\"center\\\">b</td>\\n<td align=\\\"center\\\">a</td>\\n<td align=\\\"center\\\">b</td>\\n</tr>\\n<tr>\\n<td align=\\\"center\\\"><strong>next[i]</strong></td>\\n<td align=\\\"center\\\">-1</td>\\n<td align=\\\"center\\\">0⭐</td>\\n<td align=\\\"center\\\">0</td>\\n<td align=\\\"center\\\">1</td>\\n<td align=\\\"center\\\">2</td>\\n<td align=\\\"center\\\">3</td>\\n<td align=\\\"center\\\">1</td>\\n<td align=\\\"center\\\">2</td>\\n<td align=\\\"center\\\">3</td>\\n</tr>\\n<tr>\\n<td align=\\\"center\\\"><strong>nextVal[i]</strong></td>\\n<td align=\\\"center\\\">-1</td>\\n<td align=\\\"center\\\">0👈</td>\\n<td align=\\\"center\\\"></td>\\n<td align=\\\"center\\\"></td>\\n<td align=\\\"center\\\"></td>\\n<td align=\\\"center\\\"></td>\\n<td align=\\\"center\\\"></td>\\n<td align=\\\"center\\\"></td>\\n<td align=\\\"center\\\"></td>\\n</tr>\\n</tbody></table>\\n<p>当<code>i = 2</code>时，<code>compare = next[i] = 0</code>，<code>text[i] == text[compare] 即 a = a 吗？</code>，结果等于，则<code>nextVal[i] = nextVal[compare] = -1</code>；</p>\\n<table>\\n<thead>\\n<tr>\\n<th align=\\\"center\\\">Index</th>\\n<th align=\\\"center\\\">0</th>\\n<th align=\\\"center\\\">1</th>\\n<th align=\\\"center\\\">2</th>\\n<th align=\\\"center\\\">3</th>\\n<th align=\\\"center\\\">4</th>\\n<th align=\\\"center\\\">5</th>\\n<th align=\\\"center\\\">6</th>\\n<th align=\\\"center\\\">7</th>\\n<th align=\\\"center\\\">8</th>\\n</tr>\\n</thead>\\n<tbody><tr>\\n<td align=\\\"center\\\"><strong>text[i]</strong></td>\\n<td align=\\\"center\\\">a</td>\\n<td align=\\\"center\\\">b</td>\\n<td align=\\\"center\\\">a</td>\\n<td align=\\\"center\\\">b</td>\\n<td align=\\\"center\\\">a</td>\\n<td align=\\\"center\\\">a</td>\\n<td align=\\\"center\\\">b</td>\\n<td align=\\\"center\\\">a</td>\\n<td align=\\\"center\\\">b</td>\\n</tr>\\n<tr>\\n<td align=\\\"center\\\"><strong>next[i]</strong></td>\\n<td align=\\\"center\\\">-1</td>\\n<td align=\\\"center\\\">0</td>\\n<td align=\\\"center\\\">0</td>\\n<td align=\\\"center\\\">1</td>\\n<td align=\\\"center\\\">2</td>\\n<td align=\\\"center\\\">3</td>\\n<td align=\\\"center\\\">1</td>\\n<td align=\\\"center\\\">2</td>\\n<td align=\\\"center\\\">3</td>\\n</tr>\\n<tr>\\n<td align=\\\"center\\\"><strong>nextVal[i]</strong></td>\\n<td align=\\\"center\\\">-1⭐</td>\\n<td align=\\\"center\\\">0</td>\\n<td align=\\\"center\\\">-1👈</td>\\n<td align=\\\"center\\\"></td>\\n<td align=\\\"center\\\"></td>\\n<td align=\\\"center\\\"></td>\\n<td align=\\\"center\\\"></td>\\n<td align=\\\"center\\\"></td>\\n<td align=\\\"center\\\"></td>\\n</tr>\\n</tbody></table>\\n<p>当<code>i = 3</code>时，<code>compare = next[i] = 1</code>，<code>text[i] == text[compare] 即 b = b 吗？</code>，结果等于，则<code>nextVal[i] = nextVal[compare] = 0</code>；</p>\\n<table>\\n<thead>\\n<tr>\\n<th align=\\\"center\\\">Index</th>\\n<th align=\\\"center\\\">0</th>\\n<th align=\\\"center\\\">1</th>\\n<th align=\\\"center\\\">2</th>\\n<th align=\\\"center\\\">3</th>\\n<th align=\\\"center\\\">4</th>\\n<th align=\\\"center\\\">5</th>\\n<th align=\\\"center\\\">6</th>\\n<th align=\\\"center\\\">7</th>\\n<th align=\\\"center\\\">8</th>\\n</tr>\\n</thead>\\n<tbody><tr>\\n<td align=\\\"center\\\"><strong>text[i]</strong></td>\\n<td align=\\\"center\\\">a</td>\\n<td align=\\\"center\\\">b</td>\\n<td align=\\\"center\\\">a</td>\\n<td align=\\\"center\\\">b</td>\\n<td align=\\\"center\\\">a</td>\\n<td align=\\\"center\\\">a</td>\\n<td align=\\\"center\\\">b</td>\\n<td align=\\\"center\\\">a</td>\\n<td align=\\\"center\\\">b</td>\\n</tr>\\n<tr>\\n<td align=\\\"center\\\"><strong>next[i]</strong></td>\\n<td align=\\\"center\\\">-1</td>\\n<td align=\\\"center\\\">0</td>\\n<td align=\\\"center\\\">0</td>\\n<td align=\\\"center\\\">1</td>\\n<td align=\\\"center\\\">2</td>\\n<td align=\\\"center\\\">3</td>\\n<td align=\\\"center\\\">1</td>\\n<td align=\\\"center\\\">2</td>\\n<td align=\\\"center\\\">3</td>\\n</tr>\\n<tr>\\n<td align=\\\"center\\\"><strong>nextVal[i]</strong></td>\\n<td align=\\\"center\\\">-1</td>\\n<td align=\\\"center\\\">0⭐</td>\\n<td align=\\\"center\\\">-1</td>\\n<td align=\\\"center\\\">0👈</td>\\n<td align=\\\"center\\\"></td>\\n<td align=\\\"center\\\"></td>\\n<td align=\\\"center\\\"></td>\\n<td align=\\\"center\\\"></td>\\n<td align=\\\"center\\\"></td>\\n</tr>\\n</tbody></table>\\n<p>当<code>i = 4</code>时，<code>compare = next[i] = 2</code>，<code>text[i] == text[compare] 即 a = a 吗？</code>，结果等于，则<code>nextVal[i] = nextVal[compare] = -1</code>；</p>\\n<table>\\n<thead>\\n<tr>\\n<th align=\\\"center\\\">Index</th>\\n<th align=\\\"center\\\">0</th>\\n<th align=\\\"center\\\">1</th>\\n<th align=\\\"center\\\">2</th>\\n<th align=\\\"center\\\">3</th>\\n<th align=\\\"center\\\">4</th>\\n<th align=\\\"center\\\">5</th>\\n<th align=\\\"center\\\">6</th>\\n<th align=\\\"center\\\">7</th>\\n<th align=\\\"center\\\">8</th>\\n</tr>\\n</thead>\\n<tbody><tr>\\n<td align=\\\"center\\\"><strong>text[i]</strong></td>\\n<td align=\\\"center\\\">a</td>\\n<td align=\\\"center\\\">b</td>\\n<td align=\\\"center\\\">a</td>\\n<td align=\\\"center\\\">b</td>\\n<td align=\\\"center\\\">a</td>\\n<td align=\\\"center\\\">a</td>\\n<td align=\\\"center\\\">b</td>\\n<td align=\\\"center\\\">a</td>\\n<td align=\\\"center\\\">b</td>\\n</tr>\\n<tr>\\n<td align=\\\"center\\\"><strong>next[i]</strong></td>\\n<td align=\\\"center\\\">-1</td>\\n<td align=\\\"center\\\">0</td>\\n<td align=\\\"center\\\">0</td>\\n<td align=\\\"center\\\">1</td>\\n<td align=\\\"center\\\">2</td>\\n<td align=\\\"center\\\">3</td>\\n<td align=\\\"center\\\">1</td>\\n<td align=\\\"center\\\">2</td>\\n<td align=\\\"center\\\">3</td>\\n</tr>\\n<tr>\\n<td align=\\\"center\\\"><strong>nextVal[i]</strong></td>\\n<td align=\\\"center\\\">-1</td>\\n<td align=\\\"center\\\">0</td>\\n<td align=\\\"center\\\">-1⭐</td>\\n<td align=\\\"center\\\">0</td>\\n<td align=\\\"center\\\">-1👈</td>\\n<td align=\\\"center\\\"></td>\\n<td align=\\\"center\\\"></td>\\n<td align=\\\"center\\\"></td>\\n<td align=\\\"center\\\"></td>\\n</tr>\\n</tbody></table>\\n<p>当<code>i = 5</code>时，<code>compare = next[i] = 3</code>，<code>text[i] == text[compare] 即 a = b 吗？</code>，结果不等于，则<code>nextVal[i] = next[i] = 3</code>；</p>\\n<table>\\n<thead>\\n<tr>\\n<th align=\\\"center\\\">Index</th>\\n<th align=\\\"center\\\">0</th>\\n<th align=\\\"center\\\">1</th>\\n<th align=\\\"center\\\">2</th>\\n<th align=\\\"center\\\">3</th>\\n<th align=\\\"center\\\">4</th>\\n<th align=\\\"center\\\">5</th>\\n<th align=\\\"center\\\">6</th>\\n<th align=\\\"center\\\">7</th>\\n<th align=\\\"center\\\">8</th>\\n</tr>\\n</thead>\\n<tbody><tr>\\n<td align=\\\"center\\\"><strong>text[i]</strong></td>\\n<td align=\\\"center\\\">a</td>\\n<td align=\\\"center\\\">b</td>\\n<td align=\\\"center\\\">a</td>\\n<td align=\\\"center\\\">b</td>\\n<td align=\\\"center\\\">a</td>\\n<td align=\\\"center\\\">a</td>\\n<td align=\\\"center\\\">b</td>\\n<td align=\\\"center\\\">a</td>\\n<td align=\\\"center\\\">b</td>\\n</tr>\\n<tr>\\n<td align=\\\"center\\\"><strong>next[i]</strong></td>\\n<td align=\\\"center\\\">-1</td>\\n<td align=\\\"center\\\">0</td>\\n<td align=\\\"center\\\">0</td>\\n<td align=\\\"center\\\">1</td>\\n<td align=\\\"center\\\">2</td>\\n<td align=\\\"center\\\">3⭐</td>\\n<td align=\\\"center\\\">1</td>\\n<td align=\\\"center\\\">2</td>\\n<td align=\\\"center\\\">3</td>\\n</tr>\\n<tr>\\n<td align=\\\"center\\\"><strong>nextVal[i]</strong></td>\\n<td align=\\\"center\\\">-1</td>\\n<td align=\\\"center\\\">0</td>\\n<td align=\\\"center\\\">-1</td>\\n<td align=\\\"center\\\">0</td>\\n<td align=\\\"center\\\">-1</td>\\n<td align=\\\"center\\\">3👈</td>\\n<td align=\\\"center\\\"></td>\\n<td align=\\\"center\\\"></td>\\n<td align=\\\"center\\\"></td>\\n</tr>\\n</tbody></table>\\n<p>当<code>i = 6</code>时，<code>compare = next[i] = 1</code>，<code>text[i] == text[compare] 即 b = b 吗？</code>，结果等于，则<code>nextVal[i] = nextVal[compare] = 0</code>；</p>\\n<table>\\n<thead>\\n<tr>\\n<th align=\\\"center\\\">Index</th>\\n<th align=\\\"center\\\">0</th>\\n<th align=\\\"center\\\">1</th>\\n<th align=\\\"center\\\">2</th>\\n<th align=\\\"center\\\">3</th>\\n<th align=\\\"center\\\">4</th>\\n<th align=\\\"center\\\">5</th>\\n<th align=\\\"center\\\">6</th>\\n<th align=\\\"center\\\">7</th>\\n<th align=\\\"center\\\">8</th>\\n</tr>\\n</thead>\\n<tbody><tr>\\n<td align=\\\"center\\\"><strong>text[i]</strong></td>\\n<td align=\\\"center\\\">a</td>\\n<td align=\\\"center\\\">b</td>\\n<td align=\\\"center\\\">a</td>\\n<td align=\\\"center\\\">b</td>\\n<td align=\\\"center\\\">a</td>\\n<td align=\\\"center\\\">a</td>\\n<td align=\\\"center\\\">b</td>\\n<td align=\\\"center\\\">a</td>\\n<td align=\\\"center\\\">b</td>\\n</tr>\\n<tr>\\n<td align=\\\"center\\\"><strong>next[i]</strong></td>\\n<td align=\\\"center\\\">-1</td>\\n<td align=\\\"center\\\">0</td>\\n<td align=\\\"center\\\">0</td>\\n<td align=\\\"center\\\">1</td>\\n<td align=\\\"center\\\">2</td>\\n<td align=\\\"center\\\">3</td>\\n<td align=\\\"center\\\">1</td>\\n<td align=\\\"center\\\">2</td>\\n<td align=\\\"center\\\">3</td>\\n</tr>\\n<tr>\\n<td align=\\\"center\\\"><strong>nextVal[i]</strong></td>\\n<td align=\\\"center\\\">-1</td>\\n<td align=\\\"center\\\">0⭐</td>\\n<td align=\\\"center\\\">-1</td>\\n<td align=\\\"center\\\">0</td>\\n<td align=\\\"center\\\">-1</td>\\n<td align=\\\"center\\\">3</td>\\n<td align=\\\"center\\\">0👈</td>\\n<td align=\\\"center\\\"></td>\\n<td align=\\\"center\\\"></td>\\n</tr>\\n</tbody></table>\\n<p>当<code>i = 7</code>时，<code>compare = next[i] = 2</code>，<code>text[i] == text[compare] 即 a = a 吗？</code>，结果等于，则<code>nextVal[i] = nextVal[compare] = 0</code>；</p>\\n<table>\\n<thead>\\n<tr>\\n<th align=\\\"center\\\">Index</th>\\n<th align=\\\"center\\\">0</th>\\n<th align=\\\"center\\\">1</th>\\n<th align=\\\"center\\\">2</th>\\n<th align=\\\"center\\\">3</th>\\n<th align=\\\"center\\\">4</th>\\n<th align=\\\"center\\\">5</th>\\n<th align=\\\"center\\\">6</th>\\n<th align=\\\"center\\\">7</th>\\n<th align=\\\"center\\\">8</th>\\n</tr>\\n</thead>\\n<tbody><tr>\\n<td align=\\\"center\\\"><strong>text[i]</strong></td>\\n<td align=\\\"center\\\">a</td>\\n<td align=\\\"center\\\">b</td>\\n<td align=\\\"center\\\">a</td>\\n<td align=\\\"center\\\">b</td>\\n<td align=\\\"center\\\">a</td>\\n<td align=\\\"center\\\">a</td>\\n<td align=\\\"center\\\">b</td>\\n<td align=\\\"center\\\">a</td>\\n<td align=\\\"center\\\">b</td>\\n</tr>\\n<tr>\\n<td align=\\\"center\\\"><strong>next[i]</strong></td>\\n<td align=\\\"center\\\">-1</td>\\n<td align=\\\"center\\\">0</td>\\n<td align=\\\"center\\\">0</td>\\n<td align=\\\"center\\\">1</td>\\n<td align=\\\"center\\\">2</td>\\n<td align=\\\"center\\\">3</td>\\n<td align=\\\"center\\\">1</td>\\n<td align=\\\"center\\\">2</td>\\n<td align=\\\"center\\\">3</td>\\n</tr>\\n<tr>\\n<td align=\\\"center\\\"><strong>naxtVal[i]</strong></td>\\n<td align=\\\"center\\\">-1</td>\\n<td align=\\\"center\\\">0</td>\\n<td align=\\\"center\\\">-1⭐</td>\\n<td align=\\\"center\\\">0</td>\\n<td align=\\\"center\\\">-1</td>\\n<td align=\\\"center\\\">3</td>\\n<td align=\\\"center\\\">0</td>\\n<td align=\\\"center\\\">-1👈</td>\\n<td align=\\\"center\\\"></td>\\n</tr>\\n</tbody></table>\\n<p>当<code>i = 8</code>时，<code>compare = next[i] = 3</code>，<code>text[i] == text[compare] 即 b = b 吗？</code>，结果等于，则<code>nextVal[i] = nextVal[compare] = 0</code>；</p>\\n<table>\\n<thead>\\n<tr>\\n<th align=\\\"center\\\">Index</th>\\n<th align=\\\"center\\\">0</th>\\n<th align=\\\"center\\\">1</th>\\n<th align=\\\"center\\\">2</th>\\n<th align=\\\"center\\\">3</th>\\n<th align=\\\"center\\\">4</th>\\n<th align=\\\"center\\\">5</th>\\n<th align=\\\"center\\\">6</th>\\n<th align=\\\"center\\\">7</th>\\n<th align=\\\"center\\\">8</th>\\n</tr>\\n</thead>\\n<tbody><tr>\\n<td align=\\\"center\\\"><strong>text[i]</strong></td>\\n<td align=\\\"center\\\">a</td>\\n<td align=\\\"center\\\">b</td>\\n<td align=\\\"center\\\">a</td>\\n<td align=\\\"center\\\">b</td>\\n<td align=\\\"center\\\">a</td>\\n<td align=\\\"center\\\">a</td>\\n<td align=\\\"center\\\">b</td>\\n<td align=\\\"center\\\">a</td>\\n<td align=\\\"center\\\">b</td>\\n</tr>\\n<tr>\\n<td align=\\\"center\\\"><strong>next[i]</strong></td>\\n<td align=\\\"center\\\">-1</td>\\n<td align=\\\"center\\\">0</td>\\n<td align=\\\"center\\\">0</td>\\n<td align=\\\"center\\\">1</td>\\n<td align=\\\"center\\\">2</td>\\n<td align=\\\"center\\\">3</td>\\n<td align=\\\"center\\\">1</td>\\n<td align=\\\"center\\\">2</td>\\n<td align=\\\"center\\\">3</td>\\n</tr>\\n<tr>\\n<td align=\\\"center\\\"><strong>nextVal[i]</strong></td>\\n<td align=\\\"center\\\">-1</td>\\n<td align=\\\"center\\\">0</td>\\n<td align=\\\"center\\\">-1</td>\\n<td align=\\\"center\\\">0⭐</td>\\n<td align=\\\"center\\\">-1</td>\\n<td align=\\\"center\\\">3</td>\\n<td align=\\\"center\\\">0</td>\\n<td align=\\\"center\\\">-1</td>\\n<td align=\\\"center\\\">0👈</td>\\n</tr>\\n</tbody></table>\\n<p>下面用通俗一点的语言来解释一下怎么抓：</p>\\n<p><strong>当前要算的i位置上的next值作为compare下标，如果当前位置的字符和compare位置的字符相等，那么就抓compare位置对应的nextVal作为当前位置的nextVal，否则就拿自己的next作为自己的nextVal</strong></p>\\n<p>参考：</p>\\n<blockquote>\\n<p><a href=\\\"http://www.slyar.com/blog/kmp-next-nextval.html\\\">http://www.slyar.com/blog/kmp-next-nextval.html</a></p>\\n<p><a href=\\\"https://www.nowcoder.com/profile/1105774/myFollowings/detail/6106514%EF%BC%88%E7%AC%AC%E4%B8%80%E6%9D%A1%E5%9B%9E%E7%AD%94%EF%BC%89\\\">https://www.nowcoder.com/profile/1105774/myFollowings/detail/6106514（第一条回答）</a></p>\\n</blockquote>\\n<h6 id=\\\"表示法注意事项\\\">表示法注意事项</h6>\\n<p>next的位移量多以-1开始表示，但是也有从0开始表示的，这样的情况下其实是一样的，只需要把-1那一组的next全+1就变成0那一组了；相对来说，-1的方法比较容易理解一点；</p>\\n<p>举例：</p>\\n<ul>\\n<li><a href=\\\"https://blog.csdn.net/nanami809/article/details/49367159\\\">https://blog.csdn.net/nanami809/article/details/49367159</a></li>\\n<li><a href=\\\"https://blog.csdn.net/zhengjia0826/article/details/39895781\\\">https://blog.csdn.net/zhengjia0826/article/details/39895781</a></li>\\n</ul>\\n<hr>\\n<h4 id=\\\"引用、参考\\\">引用、参考</h4>\\n<p><a href=\\\"https://blog.csdn.net/u011489043/article/details/78683856\\\">https://blog.csdn.net/u011489043/article/details/78683856</a></p>\\n\";","export default \"<h3 id=\\\"前言\\\">前言</h3>\\n<p>本<strong>系列</strong>文章主要是为 Java 并发入门做铺垫，集中清点：</p>\\n<ul>\\n<li><strong>Thread 的基本概念</strong></li>\\n<li><strong>生命周期</strong></li>\\n<li><strong>创建和使用</strong></li>\\n<li><strong>线程的魅力所在</strong><ul>\\n<li><strong>从线程不同步到线程安全</strong><ul>\\n<li><strong>锁</strong></li>\\n<li><strong>死锁情况</strong></li>\\n</ul>\\n</li>\\n<li><strong>从线程各自独立到线程通信</strong><ul>\\n<li><strong>停止线程</strong></li>\\n<li><strong>唤醒线程</strong></li>\\n<li><strong>通信</strong></li>\\n</ul>\\n</li>\\n</ul>\\n</li>\\n<li><strong>Java 中的并发编程</strong></li>\\n<li><strong>并发和单例模式的那些事</strong></li>\\n</ul>\\n<p>本系列除了参考<em>《Java 并发编程的艺术》</em>和<em>《Java 多线程编程核心技术》</em>这两本书之外，还会参考 JDK 的源码和<a href=\\\"https://docs.oracle.com/javase/8/docs/api/\\\">API 文档</a>，<strong>会翻译文档中部分重要的说明，比如过期方法为什么过期和官方解决办法等等</strong></p>\\n<p>本篇主要介绍一下三部分</p>\\n<ul>\\n<li><strong>Thread 的基本概念：</strong>线程是什么，什么是线程，Java 的线程优先级</li>\\n<li><strong>生命周期：</strong>生命周期的状态、转换、相关方法</li>\\n<li><strong>创建和使用：</strong>线程的创建的两种方法、常用方法如 sleep，yield，状态获取等</li>\\n</ul>\\n<hr>\\n<h3 id=\\\"thread-基本概念\\\">Thread 基本概念</h3>\\n<p><strong>程序(program)：</strong>是为完成特定任务、用某种语言编写的一组指令的集合。即指一段静态的代码，静态对象</p>\\n<p><strong>进程(process)：</strong>是程序的一次执行过程，或是正在运行的一个程序。动态过程：有它自身的产生、存在和消亡的过程。程序是静态的，进程是动态的</p>\\n<p><strong>线程(thread)：</strong>进程可进一步细化为线程，是一个程序内部的一条执行路径。若一个程序可同一时间执行多个线程，就是支持多线程的</p>\\n<p>Java 语言的 JVM 允许程序运行多个线程，它通过 java.lang.Thread 类来实现。</p>\\n<h4 id=\\\"进程和线程的区别\\\">进程和线程的区别</h4>\\n<p>一个进程包含多个线程，线程是进程的一个子任务</p>\\n<h4 id=\\\"java-的线程优先级\\\">Java 的线程优先级</h4>\\n<p>优先级的意义就是优先级越高，越有可能先获得 CPU 资源，或者更多的 CPU 资源</p>\\n<p>特点：</p>\\n<ul>\\n<li><strong>继承性：</strong>子线程持有和父线程一样的优先级</li>\\n<li><strong>概率性：</strong>高优先级仅仅是提高获取资源的概率，而不是绝对优先，换句话说，JVM 只是把你设置的优先级作为参考，实际执行还是看 JVM 自己的选择，大部分情况下 JVM 都会参考你的优先级</li>\\n</ul>\\n<h4 id=\\\"守护线程（daemon-thread）\\\">守护线程（Daemon Thread）</h4>\\n<p>从我的理解来看，线程的分类可以根据线程的服务对象来分为：</p>\\n<ul>\\n<li><strong>用户线程：</strong>直接为业务服务的线程</li>\\n<li><strong>守护线程：</strong>直接为线程服务的线程或者间接为业务服务的线程</li>\\n</ul>\\n<p>守护线程的意义在于<strong>“守护”</strong>，当线程中不存在用户线程了，守护线程就自动销毁，对于守护线程，<em>《Java 多线程编程核心技术》</em>一书说了一个很好的比喻：</p>\\n<blockquote>\\n<p>任何一个守护线程就想一个保姆一样守护着整个 JVM 中所有的用户线程（原话是非守护线程），只要当前 JVM 里面还有一个用户线程没有结束，守护线程就得一直工作。只有当最后一个用户线程结束的时候，守护线程才自动随着 JVM 一同结束工作。Daemon 线程的作用就是为其他线程的运行提供便利。</p>\\n<p>守护线程典型的代表就是 GC，当程序里面没有用户线程了，也就没有垃圾回收的必要了，执行 GC 的线程自动销毁。</p>\\n</blockquote>\\n<h3 id=\\\"生命周期\\\">生命周期</h3>\\n<table>\\n<thead>\\n<tr>\\n<th align=\\\"left\\\">状态名称</th>\\n<th align=\\\"left\\\">说明</th>\\n</tr>\\n</thead>\\n<tbody><tr>\\n<td align=\\\"left\\\">NEW</td>\\n<td align=\\\"left\\\">初试状态，刚刚 new 出线程，但是还没有调用 start 方法</td>\\n</tr>\\n<tr>\\n<td align=\\\"left\\\">RUNNABLE</td>\\n<td align=\\\"left\\\">运行状态，Java 线程中将操作系统中的“RUNNING”和“READY”两个状态统称为“RUNNABLE”</td>\\n</tr>\\n<tr>\\n<td align=\\\"left\\\">BLOCKED</td>\\n<td align=\\\"left\\\">阻塞状态，线程阻塞于锁</td>\\n</tr>\\n<tr>\\n<td align=\\\"left\\\">WAITING</td>\\n<td align=\\\"left\\\">等待状态，表示线程进入无时间限制的等待，线程需要其他线程做一些通知或者中断动作</td>\\n</tr>\\n<tr>\\n<td align=\\\"left\\\">TIMED_WAITING</td>\\n<td align=\\\"left\\\">超时等待状态，表示线程进入有时间限制的等待，在时间限制内可以进行中断或者通知操作，超时则自行返回</td>\\n</tr>\\n<tr>\\n<td align=\\\"left\\\">TERMINATED</td>\\n<td align=\\\"left\\\">终止状态，线程已经执行完毕</td>\\n</tr>\\n</tbody></table>\\n<p><img src=\\\"../../../public/img/TIM%E5%9B%BE%E7%89%8720180710172525.png\\\" alt=\\\"\\\"></p>\\n<h3 id=\\\"线程创建与使用\\\">线程创建与使用</h3>\\n<h4 id=\\\"创建\\\">创建</h4>\\n<p><strong>线程的实现方法：</strong></p>\\n<ol>\\n<li>继承 Thread 类</li>\\n<li>实现 Runnable 接口并实现 run()方法</li>\\n</ol>\\n<h5 id=\\\"方式-1：继承-thread-类\\\">方式 1：继承 Thread 类</h5>\\n<pre><code class=\\\"hljs language-java\\\"><span class=\\\"hljs-keyword\\\">public</span> <span class=\\\"hljs-keyword\\\">class</span> <span class=\\\"hljs-title class_\\\">testThread</span> {\\n    <span class=\\\"hljs-keyword\\\">public</span> <span class=\\\"hljs-keyword\\\">static</span> <span class=\\\"hljs-keyword\\\">void</span> <span class=\\\"hljs-title function_\\\">main</span><span class=\\\"hljs-params\\\">(String[] args)</span> {\\n        <span class=\\\"hljs-comment\\\">//3、创建子类独对象</span>\\n        <span class=\\\"hljs-type\\\">SubThread</span> <span class=\\\"hljs-variable\\\">subThread</span> <span class=\\\"hljs-operator\\\">=</span> <span class=\\\"hljs-keyword\\\">new</span> <span class=\\\"hljs-title class_\\\">SubThread</span>();\\n        <span class=\\\"hljs-comment\\\">//4、调用线程start方法 启动线程 调用run方法</span>\\n        <span class=\\\"hljs-comment\\\">//5、run方法 并不启动线程</span>\\n        subThread.start();\\n    }\\n}\\n\\n<span class=\\\"hljs-comment\\\">//1、创建一个继承Thread类的子类</span>\\n<span class=\\\"hljs-keyword\\\">class</span> <span class=\\\"hljs-title class_\\\">SubThread</span> <span class=\\\"hljs-keyword\\\">extends</span> <span class=\\\"hljs-title class_\\\">Thread</span>{\\n    <span class=\\\"hljs-comment\\\">//2、重写Thread类的run方法，方法内实现这个线程需要做的功能。</span>\\n    <span class=\\\"hljs-meta\\\">@Override</span>\\n    <span class=\\\"hljs-keyword\\\">public</span> <span class=\\\"hljs-keyword\\\">void</span> <span class=\\\"hljs-title function_\\\">run</span><span class=\\\"hljs-params\\\">()</span> {\\n        <span class=\\\"hljs-built_in\\\">super</span>.setName(<span class=\\\"hljs-string\\\">&quot;子线程&quot;</span>);\\n        <span class=\\\"hljs-keyword\\\">for</span> (<span class=\\\"hljs-type\\\">int</span> <span class=\\\"hljs-variable\\\">i</span> <span class=\\\"hljs-operator\\\">=</span> <span class=\\\"hljs-number\\\">0</span>; i&lt; <span class=\\\"hljs-number\\\">10</span> ; ++i){\\n            System.out.println(Thread.currentThread().getName()+<span class=\\\"hljs-string\\\">&quot;:线程方法&quot;</span>);\\n        }\\n    }\\n}\\n</code></pre>\\n<h5 id=\\\"方式-2：实现-runnable-接口\\\">方式 2：实现 Runnable 接口</h5>\\n<pre><code class=\\\"hljs language-java\\\"><span class=\\\"hljs-keyword\\\">public</span> <span class=\\\"hljs-keyword\\\">class</span> <span class=\\\"hljs-title class_\\\">testImplRunnable</span> {\\n    <span class=\\\"hljs-keyword\\\">public</span> <span class=\\\"hljs-keyword\\\">static</span> <span class=\\\"hljs-keyword\\\">void</span> <span class=\\\"hljs-title function_\\\">main</span><span class=\\\"hljs-params\\\">(String[] args)</span> {\\n        <span class=\\\"hljs-type\\\">PrintNumber</span> <span class=\\\"hljs-variable\\\">printNumber</span> <span class=\\\"hljs-operator\\\">=</span> <span class=\\\"hljs-keyword\\\">new</span> <span class=\\\"hljs-title class_\\\">PrintNumber</span>();\\n        <span class=\\\"hljs-comment\\\">//启动线程 执行Thread对象构造时传入的对象的run方法</span>\\n        <span class=\\\"hljs-type\\\">Thread</span> <span class=\\\"hljs-variable\\\">thread</span> <span class=\\\"hljs-operator\\\">=</span> <span class=\\\"hljs-keyword\\\">new</span> <span class=\\\"hljs-title class_\\\">Thread</span>(printNumber);\\n        thread.start();\\n\\n        <span class=\\\"hljs-type\\\">Thread</span> <span class=\\\"hljs-variable\\\">thread2</span> <span class=\\\"hljs-operator\\\">=</span> <span class=\\\"hljs-keyword\\\">new</span> <span class=\\\"hljs-title class_\\\">Thread</span>(printNumber);\\n        thread2.start();\\n    }\\n}\\n\\n<span class=\\\"hljs-keyword\\\">class</span> <span class=\\\"hljs-title class_\\\">PrintNumber</span> <span class=\\\"hljs-keyword\\\">implements</span> <span class=\\\"hljs-title class_\\\">Runnable</span>{\\n\\n    <span class=\\\"hljs-meta\\\">@Override</span>\\n    <span class=\\\"hljs-keyword\\\">public</span> <span class=\\\"hljs-keyword\\\">void</span> <span class=\\\"hljs-title function_\\\">run</span><span class=\\\"hljs-params\\\">()</span> {\\n        <span class=\\\"hljs-keyword\\\">for</span> (<span class=\\\"hljs-type\\\">int</span> <span class=\\\"hljs-variable\\\">i</span> <span class=\\\"hljs-operator\\\">=</span> <span class=\\\"hljs-number\\\">0</span> ; i &lt; <span class=\\\"hljs-number\\\">10</span> ; ++i){\\n            System.out.println(i);\\n        }\\n    }\\n}\\n</code></pre>\\n<h5 id=\\\"两种方式的对比\\\">两种方式的对比</h5>\\n<ul>\\n<li><strong>继承方式</strong>让类在继承上面的选择受限，<strong>接口实现方式</strong>则很随意</li>\\n<li><strong>继承方式</strong>让类拥有一些<strong>线程内建的方法</strong>例如<code>yield()</code>，<strong>接口实现方式</strong>则没有</li>\\n</ul>\\n<h5 id=\\\"start-和-run的区别\\\">start() 和 run()的区别</h5>\\n<ol>\\n<li><p>是否创建新线程：</p>\\n<pre><code class=\\\"hljs language-java\\\"><span class=\\\"hljs-keyword\\\">public</span> <span class=\\\"hljs-keyword\\\">class</span> <span class=\\\"hljs-title class_\\\">testThread</span> {\\n    <span class=\\\"hljs-keyword\\\">public</span> <span class=\\\"hljs-keyword\\\">static</span> <span class=\\\"hljs-keyword\\\">void</span> <span class=\\\"hljs-title function_\\\">main</span><span class=\\\"hljs-params\\\">(String[] args)</span> {\\n        <span class=\\\"hljs-type\\\">SubThread</span> <span class=\\\"hljs-variable\\\">subThread</span> <span class=\\\"hljs-operator\\\">=</span> <span class=\\\"hljs-keyword\\\">new</span> <span class=\\\"hljs-title class_\\\">SubThread</span>();\\n        <span class=\\\"hljs-comment\\\">// start方法  创建新线程    由新线程去调用run方法</span>\\n        subThread.start();\\n        <span class=\\\"hljs-comment\\\">// run方法    并不启动新线程 由当前线程调用run方法</span>\\n        subThread.run();\\n    }\\n}\\n<span class=\\\"hljs-keyword\\\">class</span> <span class=\\\"hljs-title class_\\\">SubThread</span> <span class=\\\"hljs-keyword\\\">extends</span> <span class=\\\"hljs-title class_\\\">Thread</span>{\\n    <span class=\\\"hljs-meta\\\">@Override</span>\\n    <span class=\\\"hljs-keyword\\\">public</span> <span class=\\\"hljs-keyword\\\">synchronized</span> <span class=\\\"hljs-keyword\\\">void</span> <span class=\\\"hljs-title function_\\\">start</span><span class=\\\"hljs-params\\\">()</span> {\\n        <span class=\\\"hljs-built_in\\\">super</span>.start();\\n        System.out.println(Thread.currentThread().getName() + <span class=\\\"hljs-string\\\">&quot; start&quot;</span>);\\n    }\\n    <span class=\\\"hljs-meta\\\">@Override</span>\\n    <span class=\\\"hljs-keyword\\\">public</span> <span class=\\\"hljs-keyword\\\">void</span> <span class=\\\"hljs-title function_\\\">run</span><span class=\\\"hljs-params\\\">()</span> {\\n        <span class=\\\"hljs-keyword\\\">for</span> (<span class=\\\"hljs-type\\\">int</span> <span class=\\\"hljs-variable\\\">i</span> <span class=\\\"hljs-operator\\\">=</span> <span class=\\\"hljs-number\\\">0</span>; i&lt; <span class=\\\"hljs-number\\\">3</span> ; ++i){\\n            System.out.println(Thread.currentThread().getName()+<span class=\\\"hljs-string\\\">&quot;:线程方法&quot;</span>);\\n        }\\n    }\\n}\\n</code></pre>\\n<p>Output:</p>\\n<pre><code class=\\\"hljs language-console\\\">main start\\nmain:线程方法\\nThread-0:线程方法\\nThread-0:线程方法\\nThread-0:线程方法\\nmain:线程方法\\nmain:线程方法\\n</code></pre>\\n</li>\\n<li><p>start 只能调用 1 次，而 run 可以调用无数次，就像调用一般的对象方法一样；</p>\\n</li>\\n<li><p>start 方法是 Thread 类实现的，而 run 方法是来自于 Runnable 接口的；</p>\\n</li>\\n<li><p>如果你重写了 start 方法，那么 start 方法中的当前线程是父线程，而不是新线程；</p>\\n</li>\\n</ol>\\n<h4 id=\\\"使用\\\">使用</h4>\\n<h5 id=\\\"currentthread方法\\\">currentThread()方法</h5>\\n<p>这个方法获取正在调用当前代码段的线程的<strong>线程对象</strong>，获取到线程对象，我们可以获取线程的<strong>名字、状态、ID 号、线程优先级、是否处于终端、是否处于活动状态</strong>等信息，这些 API 在后面我们会一个个讲到</p>\\n<pre><code class=\\\"hljs language-java\\\"><span class=\\\"hljs-meta\\\">@Test</span>\\n<span class=\\\"hljs-keyword\\\">public</span> <span class=\\\"hljs-keyword\\\">void</span> <span class=\\\"hljs-title function_\\\">testCurr</span><span class=\\\"hljs-params\\\">()</span>{\\n    System.out.println(Thread.currentThread().getName()); <span class=\\\"hljs-comment\\\">//main</span>\\n    System.out.println(Thread.currentThread().isAlive()); <span class=\\\"hljs-comment\\\">//true</span>\\n    System.out.println(Thread.currentThread().getState()); <span class=\\\"hljs-comment\\\">//RUNNABLE</span>\\n    System.out.println(Thread.currentThread().getPriority()); <span class=\\\"hljs-comment\\\">//5</span>\\n}\\n</code></pre>\\n<h5 id=\\\"isalive方法\\\">isAlive()方法</h5>\\n<p>作用是判断当前线程是否<strong>存活</strong>，这个存活的界定是：<strong>如果线程处于正在运行或者准备开始运行的状态，则判定线程存活</strong></p>\\n<h5 id=\\\"sleep方法\\\">sleep()方法</h5>\\n<p>让当前线程睡上<strong>n 毫秒</strong></p>\\n<pre><code class=\\\"hljs language-java\\\"><span class=\\\"hljs-meta\\\">@Test</span>\\n<span class=\\\"hljs-keyword\\\">public</span> <span class=\\\"hljs-keyword\\\">void</span> <span class=\\\"hljs-title function_\\\">testSleep</span><span class=\\\"hljs-params\\\">()</span> <span class=\\\"hljs-keyword\\\">throws</span> InterruptedException {\\n    <span class=\\\"hljs-type\\\">Runnable</span> <span class=\\\"hljs-variable\\\">sleep</span> <span class=\\\"hljs-operator\\\">=</span> () -&gt; {\\n        <span class=\\\"hljs-keyword\\\">try</span> {\\n            System.out.println(Thread.currentThread().getName() + <span class=\\\"hljs-string\\\">&quot; sleep&quot;</span>);\\n            Thread.sleep(<span class=\\\"hljs-number\\\">10</span> * <span class=\\\"hljs-number\\\">1000</span>);\\n            System.out.println(<span class=\\\"hljs-string\\\">&quot;sleep done&quot;</span>);\\n        } <span class=\\\"hljs-keyword\\\">catch</span> (InterruptedException e) {\\n            e.printStackTrace();\\n        }\\n    };\\n    <span class=\\\"hljs-type\\\">Thread</span> <span class=\\\"hljs-variable\\\">t</span> <span class=\\\"hljs-operator\\\">=</span> <span class=\\\"hljs-keyword\\\">new</span> <span class=\\\"hljs-title class_\\\">Thread</span>(sleep, <span class=\\\"hljs-string\\\">&quot;sleepThread&quot;</span>);\\n    t.start();\\n    <span class=\\\"hljs-comment\\\">//t.run();</span>\\n    Thread.sleep(<span class=\\\"hljs-number\\\">1000</span>);\\n    System.out.println(t.getState() + <span class=\\\"hljs-string\\\">&quot;  &quot;</span> + t.getName());\\n}\\n</code></pre>\\n<p>在<strong>line：13-14</strong>，我们需要注意：</p>\\n<ul>\\n<li>t.<strong>start()方法</strong>是以<strong>新开一个线程</strong>的方式运行<strong>sleep.run()</strong></li>\\n<li>start.<strong>run()方法</strong>是直接在<strong>当前线程</strong>中运行<strong>sleep.run()</strong></li>\\n</ul>\\n<p>所以当我们以<strong>start 方式</strong>去启动程序的时候，输出结果为：</p>\\n<pre><code class=\\\"hljs language-console\\\">sleepThread sleep\\nTIMED_WAITING  sleepThread\\n</code></pre>\\n<p>可以看到线程名字为<strong>sleepThread</strong>，需要注意的是：</p>\\n<ul>\\n<li>这个程序还有另外一个目的就是为了<strong>检测睡眠中的线程到底是处于什么状态</strong>，从结果得知，是<strong>TIMED_WAITING 状态</strong></li>\\n<li>为了可以检测到睡眠线程，我们<strong>在 main 线程中也睡了 1 秒</strong>，原因是<strong>sleepThread</strong>只是<strong>main 线程</strong>的一个<strong>子线程</strong>，<strong>如果 main 线程挂了，则其子线程也就跟着挂</strong>，所以理论上来说，整个程序并不会看到<strong>line：7</strong>所输出的语句</li>\\n</ul>\\n<p>当我们以<strong>run 方式</strong>启动线程的时候，输出为：</p>\\n<pre><code class=\\\"hljs language-console\\\">main sleep\\nsleep done\\nNEW  sleepThread\\n</code></pre>\\n<p>可以看到，执行<strong>sleep.run</strong>方法的确实是<strong>main 线程</strong>，而且整个程序在输出第一行的时候，是睡了 10 秒再输出接下来的，然后我们的<strong>sleepThread</strong>也是没有运行，还是处于<strong>NEW 状态</strong></p>\\n<h6 id=\\\"注意\\\">注意</h6>\\n<blockquote>\\n<p>在线程的<strong>sleep</strong>的过程中，如果调用了线程的中断方法<code>interrupt()</code>，则在 sleep 代码处会抛出<code>InterruptedException</code>异常，这个异常会<strong>清除线程的中断标识</strong>，所以你之前调用<code>interrupt()</code>方法设置的中断标识可能没用了，也就是说，如果要在有<strong>sleep</strong>代码的线程中使用中断标识去有效地进行终端操作的话，那么<code>catch(){}</code>语句块里就不能什么也不做，必须在<code>catch(){}</code>中有中断的逻辑，否则可能达不到中断的效果。</p>\\n</blockquote>\\n<h5 id=\\\"join方法\\\">join()方法</h5>\\n<p>在当前线程中调用<code>someThread.join()</code>方法，就是暂停当前线程，启动 someThread，只有当 someThread 执行完毕或者这个方法会被<code>interrupt()</code>打断，而抛出中断异常。</p>\\n<p><code>join()</code>还有<code>join(long timeout)</code>，其内部实现如：</p>\\n<pre><code class=\\\"hljs language-java\\\"><span class=\\\"hljs-keyword\\\">public</span> <span class=\\\"hljs-keyword\\\">final</span> <span class=\\\"hljs-keyword\\\">synchronized</span> <span class=\\\"hljs-keyword\\\">void</span> <span class=\\\"hljs-title function_\\\">join</span><span class=\\\"hljs-params\\\">(<span class=\\\"hljs-type\\\">long</span> millis)</span> <span class=\\\"hljs-keyword\\\">throws</span> InterruptedException {\\n    <span class=\\\"hljs-type\\\">long</span> <span class=\\\"hljs-variable\\\">base</span> <span class=\\\"hljs-operator\\\">=</span> System.currentTimeMillis();\\n    <span class=\\\"hljs-type\\\">long</span> <span class=\\\"hljs-variable\\\">now</span> <span class=\\\"hljs-operator\\\">=</span> <span class=\\\"hljs-number\\\">0</span>;\\n    <span class=\\\"hljs-keyword\\\">if</span> (millis &lt; <span class=\\\"hljs-number\\\">0</span>) {\\n        <span class=\\\"hljs-keyword\\\">throw</span> <span class=\\\"hljs-keyword\\\">new</span> <span class=\\\"hljs-title class_\\\">IllegalArgumentException</span>(<span class=\\\"hljs-string\\\">&quot;timeout value is negative&quot;</span>);\\n    }\\n    <span class=\\\"hljs-keyword\\\">if</span> (millis == <span class=\\\"hljs-number\\\">0</span>) {\\n        <span class=\\\"hljs-keyword\\\">while</span> (isAlive()) {\\n            wait(<span class=\\\"hljs-number\\\">0</span>);\\n        }\\n    } <span class=\\\"hljs-keyword\\\">else</span> {\\n        <span class=\\\"hljs-keyword\\\">while</span> (isAlive()) {\\n            <span class=\\\"hljs-type\\\">long</span> <span class=\\\"hljs-variable\\\">delay</span> <span class=\\\"hljs-operator\\\">=</span> millis - now;\\n            <span class=\\\"hljs-keyword\\\">if</span> (delay &lt;= <span class=\\\"hljs-number\\\">0</span>) {\\n                <span class=\\\"hljs-keyword\\\">break</span>;\\n            }\\n            wait(delay);\\n            now = System.currentTimeMillis() - base;\\n        }\\n    }\\n}\\n</code></pre>\\n<p>可以看到，join 方法就是如果本线程还存活，就无限等待自己，给别的线程让出机会</p>\\n<h5 id=\\\"yield方法\\\">yield()方法</h5>\\n<p>这个方法的作用是<strong>放弃当前的 CPU 资源</strong>，将它让给其他的任务去占用 CPU 执行，<strong>但是放弃的时间不确定，有可能刚一放弃，马上就抢回来了，有点不要脸！</strong></p>\\n<h5 id=\\\"getstate方法\\\">getState()方法</h5>\\n<p>获取一个 State 对象，表示当前线程的生命周期</p>\\n<h3 id=\\\"object-方法\\\">Object 方法</h3>\\n<h4 id=\\\"waitlong-timeout\\\">wait(long timeout)</h4>\\n<p>作用是使当前执行代码的<strong>线程（as T）</strong>进入等待状态，由于<code>wait()</code>方法是 Object 类的方法，用来将<strong>当前线程（T）</strong>置入“等待队列”中。所以需要显式地使用<strong>synchronized</strong>块包裹起来，在 synchronized 块中再次获取<strong>该锁（调用<code>wait()</code>的对象的对象锁，as OL）</strong>，才能调用<code>wait()</code>方法，否则会抛出<code>java.lang.IllegalMonitorStateException</code>异常</p>\\n<blockquote>\\n<p>注意：</p>\\n<ol>\\n<li>只有线程在获取了该锁对象的锁之后（在该锁对象的 synchronized 块或者方法中），才能调用该对象的<code>wait()</code>方法，否则抛出异常；</li>\\n<li>在哪个锁对象上调用<code>wait()</code>方法，就释放哪个锁对象；</li>\\n<li>无论 timeout 为多少，总是需要等到该同步区域再次竞争到锁对象时才能解除等待，如果其他同步区域一直不放弃该锁对象，那么前同步区域也一直获取不到该锁对象；</li>\\n</ol>\\n</blockquote>\\n<p>调用<code>wait()</code>方法之后，当前线程<strong>马上（从 wait 那一行开始马上放锁，而不是直到退出 sync 块）</strong>释放<strong>该锁（OL）</strong>，并进入等待队列<strong>（对象锁对应对象的等待队列）</strong>，此时线程进入 suspend 状态</p>\\n<p>如果 timeout 设置为 0 的话则没有超时时间，一直等到 notify</p>\\n<p>若要<strong>线程 T</strong>从<code>wait()</code>中返回：</p>\\n<ul>\\n<li><strong>其他线程</strong>，获取到<strong>OL</strong>，并且调用该对象的<code>notify()</code>方法，并且<strong>线程 T</strong>，在等待队列中<strong>随机地（arbitrarily）</strong>被选中唤醒</li>\\n<li><strong>其他线程</strong>，获取到<strong>OL</strong>，并且调用该对象的<code>notifyAll()</code>方法</li>\\n<li><strong>其他线程</strong>，调用了<strong>线程 T</strong>的<code>interrupt()</code>方法，所以需要处理中断异常</li>\\n<li>除非 timeout 不是 0，到期超时自己返回</li>\\n</ul>\\n<p><strong>线程 T</strong>被<strong>唤醒（notify）</strong>之后，仍然和其他线程在通常的情况下，再次竞争<strong>OL</strong>，以获取进入同步的权力，一旦获取到权力，<strong>线程 T</strong>就会恢复到 wait 时候完全一样的状态，继续工作。</p>\\n<p>等待状态中的线程也可以不必被其他线程唤醒、打断、或者等待超时，我们可以自行<strong>检测</strong>唤醒的条件，满足条件就不再等待，换句话说，我们推荐你在使用<code>wait()</code>的时候使用以下这样的 loop：</p>\\n<pre><code class=\\\"hljs language-java\\\"><span class=\\\"hljs-keyword\\\">synchronized</span> (obj) {\\n <span class=\\\"hljs-keyword\\\">while</span> (&lt;condition does not hold&gt;)\\n     obj.wait(timeout);\\n ... <span class=\\\"hljs-comment\\\">// Perform action appropriate to condition</span>\\n}\\n</code></pre>\\n<p>需要注意的是，<strong>线程 T</strong>在<code>wait()</code>的过程中，仅释放<strong>OL</strong>锁，线程原来持有的锁仍会随着线程进入 wait 状态，我们可以做个简单的测试：</p>\\n<pre><code class=\\\"hljs language-java\\\"><span class=\\\"hljs-keyword\\\">public</span> <span class=\\\"hljs-keyword\\\">class</span> <span class=\\\"hljs-title class_\\\">WaitTest</span> {\\n\\n    <span class=\\\"hljs-keyword\\\">private</span> <span class=\\\"hljs-keyword\\\">static</span> <span class=\\\"hljs-type\\\">String</span> <span class=\\\"hljs-variable\\\">lockA</span> <span class=\\\"hljs-operator\\\">=</span> <span class=\\\"hljs-string\\\">&quot;la&quot;</span>;\\n    <span class=\\\"hljs-keyword\\\">private</span> <span class=\\\"hljs-keyword\\\">static</span> <span class=\\\"hljs-type\\\">String</span> <span class=\\\"hljs-variable\\\">lockB</span> <span class=\\\"hljs-operator\\\">=</span> <span class=\\\"hljs-string\\\">&quot;lb&quot;</span>;\\n\\n    <span class=\\\"hljs-keyword\\\">public</span> <span class=\\\"hljs-keyword\\\">static</span> <span class=\\\"hljs-keyword\\\">void</span> <span class=\\\"hljs-title function_\\\">main</span><span class=\\\"hljs-params\\\">(String[] args)</span> {\\n        <span class=\\\"hljs-keyword\\\">new</span> <span class=\\\"hljs-title class_\\\">Thread</span>(() -&gt; {\\n            <span class=\\\"hljs-keyword\\\">synchronized</span> (lockA) {\\n                System.out.println(<span class=\\\"hljs-string\\\">&quot;T1 got locak A&quot;</span>);\\n                <span class=\\\"hljs-keyword\\\">synchronized</span> (lockB) {\\n                    System.out.println(<span class=\\\"hljs-string\\\">&quot;T1 got locak B&quot;</span>);\\n                    <span class=\\\"hljs-keyword\\\">try</span> {\\n                        System.out.println(<span class=\\\"hljs-string\\\">&quot;T1 wait, released lockA for now&quot;</span>);\\n                        lockA.wait(<span class=\\\"hljs-number\\\">5000</span>);\\n                        System.out.println(<span class=\\\"hljs-string\\\">&quot;T1 come back from wait, and got lockA again&quot;</span>);\\n                    } <span class=\\\"hljs-keyword\\\">catch</span> (InterruptedException e) {\\n                        e.printStackTrace();\\n                    }\\n                }\\n                System.out.println(<span class=\\\"hljs-string\\\">&quot;T1 released lockB&quot;</span>);\\n            }\\n            System.out.println(<span class=\\\"hljs-string\\\">&quot;T1 released lockA finally&quot;</span>);\\n        }).start();\\n        <span class=\\\"hljs-keyword\\\">new</span> <span class=\\\"hljs-title class_\\\">Thread</span>(() -&gt; {\\n            System.out.println(<span class=\\\"hljs-string\\\">&quot;T2 sleep 3 seconds&quot;</span>);\\n            <span class=\\\"hljs-keyword\\\">try</span> {\\n                Thread.sleep(<span class=\\\"hljs-number\\\">3000</span>);\\n            } <span class=\\\"hljs-keyword\\\">catch</span> (InterruptedException e) {\\n                e.printStackTrace();\\n            }\\n            <span class=\\\"hljs-keyword\\\">synchronized</span> (lockA) {\\n                System.out.println(<span class=\\\"hljs-string\\\">&quot;T2 got lockA, and sleep 6 sec&quot;</span>);\\n                <span class=\\\"hljs-keyword\\\">try</span> {\\n                    Thread.sleep(<span class=\\\"hljs-number\\\">6000</span>);\\n                } <span class=\\\"hljs-keyword\\\">catch</span> (InterruptedException e) {\\n                    e.printStackTrace();\\n                }\\n            }\\n            System.out.println(<span class=\\\"hljs-string\\\">&quot;T2 released lockA&quot;</span>);\\n        }).start();\\n        <span class=\\\"hljs-keyword\\\">new</span> <span class=\\\"hljs-title class_\\\">Thread</span>(() -&gt; {\\n            <span class=\\\"hljs-keyword\\\">try</span> {\\n                Thread.sleep(<span class=\\\"hljs-number\\\">1000</span>);\\n            } <span class=\\\"hljs-keyword\\\">catch</span> (InterruptedException e) {\\n                e.printStackTrace();\\n            }\\n            System.out.println(<span class=\\\"hljs-string\\\">&quot;T3 wanna get lockB&quot;</span>);\\n            <span class=\\\"hljs-keyword\\\">synchronized</span> (lockB) {\\n                System.out.println(<span class=\\\"hljs-string\\\">&quot;T3 got lockB&quot;</span>);\\n            }\\n            System.out.println(<span class=\\\"hljs-string\\\">&quot;T3 released lockB&quot;</span>);\\n        }).start();\\n    }\\n}\\n</code></pre>\\n<p>输出：</p>\\n<pre><code class=\\\"hljs language-console\\\">T1 got locak A\\nT2 sleep 3 seconds\\nT1 got locak B\\nT1 wait, released lockA for now\\nT3 wanna get lockB\\nT2 got lockA, and sleep 6 sec\\nT2 released lockA\\nT1 come back from wait, and got lockA again\\nT1 released lockB\\nT1 released lockA finally\\nT3 got lockB\\nT3 released lockB\\n</code></pre>\\n<p>我们需要注意 2 点：</p>\\n<ol>\\n<li>在 14 行虽然设置了超时时间是 5 秒，但是仍旧等待了 6 秒，因为 t2 占有了 lockA6 秒之久</li>\\n<li>虽然 t1 在某时刻释放了 lockA，但是 t1 持有的 lockB 还没释放，最后 t3 还是得等到 t1 释放了 lockB 之后才能获取到 lockB</li>\\n</ol>\\n<p>总结一下时间线，按照绝对时间来说：</p>\\n<ul>\\n<li><p>0 秒开始不久：</p>\\n<ul>\\n<li>T1 拿到 A 锁，随后拿到 B 锁，然后在 A 锁上 wait，并且超时 5 秒；</li>\\n<li>T2 开始沉睡 3 秒</li>\\n<li>T3 开始沉睡 1 秒</li>\\n</ul>\\n<blockquote>\\n<p>这时 A 锁已经释放，B 锁被 T1 抓住</p>\\n</blockquote>\\n</li>\\n<li><p>1 秒时：</p>\\n<ul>\\n<li>T3 醒来，在 B 锁的门前 BLOCK 住，因为这时候 B 锁被 T1 抓住着；</li>\\n<li>T2 还在睡，还有 2 秒；</li>\\n<li>T1 在等待 A 锁超时，还剩 4 秒；</li>\\n</ul>\\n</li>\\n<li><p>2 秒时：</p>\\n<ul>\\n<li>T1 在等待 A 锁超时，还剩 3 秒；</li>\\n<li>T2 还在睡，还有 1 秒；</li>\\n<li>T3 仍在等 B 锁；</li>\\n</ul>\\n</li>\\n<li><p>3 秒时：</p>\\n<ul>\\n<li>T2 醒来，拿到 A 锁，并沉睡 6 秒；</li>\\n<li>T1 在等待 A 锁超时，还剩 2 秒；</li>\\n<li>T3 仍在等 B 锁；</li>\\n</ul>\\n</li>\\n<li><p>5 秒时：</p>\\n<ul>\\n<li>T1 等待 A 锁超时结束，但是 A 锁被 T2 抓住睡觉了，还剩 1 秒，所以 T1 BLOCK 住；</li>\\n<li>T2 还有 1 秒苏醒；</li>\\n<li>T3 快哭了；</li>\\n</ul>\\n</li>\\n<li><p>6 秒时：</p>\\n<ul>\\n<li>T2 醒来，放开 A 锁；</li>\\n<li>T1 拿到 A 锁，没事干了，放开 B 锁，放开 A 锁；</li>\\n<li>T3 终于拿到 B 锁了；</li>\\n</ul>\\n</li>\\n</ul>\\n<h4 id=\\\"notify\\\">notify()</h4>\\n<p>唤醒在该对象<strong>等待队列</strong>中的一个等待线程，在队列中等待的线程是被<strong>随机选取</strong>唤醒的，且必须是由调用该对象<code>wait()</code>方法而进入的等待队列</p>\\n<p>被唤醒的线程会和其他线程一样，在同样的情况下一起竞争该<strong>对象的同步锁（as OL）</strong></p>\\n<blockquote>\\n<p>细节说明：</p>\\n<ol>\\n<li>被 notify 通知的对象，并不是马上就获取<strong>OL</strong>，而是还需要积极竞争</li>\\n<li>notify 之后，和 wait 不一样的是，并不是马上放锁，而是直到退出 sync 区域之后才释放锁</li>\\n</ol>\\n</blockquote>\\n<p>本方法只能在当前线程<strong>持有该对象锁的时候，才能调用该对象的<code>notify()</code>方法</strong>：</p>\\n<ul>\\n<li>By executing a synchronized instance method of that object.</li>\\n<li>By executing the body of a <code>synchronized</code> statement that synchronizes on the object.</li>\\n<li>For objects of type <code>Class,</code> by executing a synchronized static method of that class.</li>\\n</ul>\\n<p>否则会抛出<code>java.lang.IllegalMonitorStateException</code>异常</p>\\n<h4 id=\\\"notifyall\\\">notifyAll()</h4>\\n<p>唤醒在该对象<strong>等待队列</strong>中的所有等待线程，且必须是由调用该对象<code>wait()</code>方法而进入的等待队列</p>\\n<p>被唤醒的所有线程会和其他线程一样，在同样的情况下一起竞争该<strong>对象的同步锁（as OL）</strong></p>\\n<h4 id=\\\"讨论一下-wait-的风险\\\">讨论一下 wait 的风险</h4>\\n<p>这是在几个月前顺丰科技面试的时候，一面面试官问我的问题，当时我没答上，因为当时准备的很不充分，连 wait 和 sleep 的区别都没看，估计是因为这个原因，面试官以为又摸到我的上限了，顺丰科技还是挺想去的</p>\\n<p>今天看了一下 wait 和 notify 之后，感觉能回答出这个问题了</p>\\n<ol>\\n<li><p>因为 wait 并<strong>不会释放线程占有的其他锁</strong>，如果忽略掉这个问题的话，会隐形地制造一些<strong>死锁</strong>，当然，这属于<strong>设计上</strong>的问题</p>\\n<pre><code class=\\\"hljs language-java\\\"><span class=\\\"hljs-keyword\\\">new</span> <span class=\\\"hljs-title class_\\\">Thread</span>(() -&gt; {\\n    <span class=\\\"hljs-keyword\\\">synchronized</span> (lockA) {\\n        <span class=\\\"hljs-keyword\\\">synchronized</span> (lockB) {\\n            <span class=\\\"hljs-keyword\\\">try</span> {\\n                <span class=\\\"hljs-type\\\">String</span> <span class=\\\"hljs-variable\\\">lock</span> <span class=\\\"hljs-operator\\\">=</span> lockA;\\n                lock.wait(<span class=\\\"hljs-number\\\">10000</span>);\\n            } <span class=\\\"hljs-keyword\\\">catch</span> (InterruptedException e) {}\\n        }\\n    }\\n}).start();\\n<span class=\\\"hljs-keyword\\\">new</span> <span class=\\\"hljs-title class_\\\">Thread</span>(() -&gt; {\\n    <span class=\\\"hljs-keyword\\\">try</span> {Thread.sleep(<span class=\\\"hljs-number\\\">300</span>);} <span class=\\\"hljs-keyword\\\">catch</span> (InterruptedException e) {}\\n    <span class=\\\"hljs-keyword\\\">synchronized</span> (lockA) {\\n        <span class=\\\"hljs-keyword\\\">synchronized</span>(lockB) {}\\n    }\\n}).start();\\n</code></pre>\\n<p>当线程 1 放弃了 LockA 并且进入阻塞的情况下，线程 B 获取到了 LockA 并且在获取 LockB 的时候阻塞，然后线程 A 也进入了阻塞状态，因为要从 wait 返回的条件是竞争到 LockA，而这时候 LockA 已经被别的线程获取了；</p>\\n<p>在这种状态下，超时就无效了，发起中断也无效，因为发起中断只是打了标志，线程 A 仍然需要获取到 LockA 才能返回；</p>\\n<p>而使用<code>Lock</code>API 就能够很好地解决这个问题，因为它能够提供<strong>非阻塞式、有超时</strong>的获取锁获取不到就超时返回；</p>\\n</li>\\n<li><p>因为 wait 的唤醒机制还是重新去竞争锁，如果竞争不顺利的话，会一直返回不了<strong>等待前的状态</strong>，导致这个线程进入<strong>饥饿状态</strong></p>\\n</li>\\n<li><p>同样的 notify 的唤醒是随机的，如果运气不好的话，线程会一直在等待队列中没有被选中，也进入了一种<strong>饥饿状态</strong></p>\\n</li>\\n</ol>\\n\";","export default \"<p><span id=\\\"top\\\"></span></p>\\n<h3 id=\\\"ⅲ-jetty管理者指南-13注释\\\">Ⅲ. Jetty管理者指南-13.注释</h3>\\n<ul>\\n<li><ol start=\\\"13\\\">\\n<li><a href=\\\"#13%E6%B3%A8%E8%A7%A3\\\">注解</a></li>\\n</ol>\\n<ul>\\n<li><a href=\\\"#131%E5%BF%AB%E9%80%9F%E8%AE%BE%E7%BD%AE\\\">快速设置</a><ul>\\n<li><a href=\\\"#1311%E5%85%B3%E4%BA%8Ejetty%E5%8F%91%E8%A1%8C%E7%89%88\\\">关于Jetty发行版</a></li>\\n<li><a href=\\\"#1312%E5%85%B3%E4%BA%8Ejetty-maven-plugin\\\">关于Jetty Maven Plugin</a></li>\\n<li><a href=\\\"#1313%E5%85%B3%E4%BA%8E%E5%B5%8C%E5%85%A5%E5%BC%8F\\\">关于嵌入式</a></li>\\n</ul>\\n</li>\\n<li><a href=\\\"#132%E4%BD%BF%E7%94%A8%E6%B3%A8%E8%A7%A3\\\">使用注解</a><ul>\\n<li><a href=\\\"#1321%E6%94%AF%E6%8C%81%E5%93%AA%E4%BA%9B%E6%B3%A8%E8%A7%A3\\\">支持哪些注解</a></li>\\n<li><a href=\\\"#1322%E6%A3%80%E6%B5%8B%E6%B3%A8%E8%A7%A3%E5%92%8C%E8%87%AA%E6%A3%80%E6%B3%A8%E8%A7%A3%E7%9A%84%E5%AF%B9%E6%AF%94\\\">检测注解和自检注解的对比</a></li>\\n<li><a href=\\\"#1323%E5%93%AA%E4%BA%9Bjar%E5%8C%85%E6%94%AF%E6%8C%81%E6%89%AB%E6%8F%8F%E6%A3%80%E6%9F%A5%E6%B3%A8%E8%A7%A3\\\">哪些jar包支持扫描检查注解</a></li>\\n<li><a href=\\\"#1324%E5%A4%9A%E7%BA%BF%E7%A8%8B%E6%B3%A8%E8%A7%A3%E6%89%AB%E6%8F%8F\\\">多线程注解扫描</a></li>\\n<li><a href=\\\"#1325servletcontainerinitializers\\\">ServletContainerInitializers</a></li>\\n</ul>\\n</li>\\n<li><a href=\\\"#133%E5%9C%A8jetty%E5%B5%8C%E5%85%A5%E5%BC%8F%E5%BC%80%E5%8F%91%E4%B8%AD%E4%BD%BF%E7%94%A8%E6%B3%A8%E8%A7%A3\\\">在Jetty嵌入式开发中使用注解</a><ul>\\n<li><a href=\\\"#1331%E8%AE%BE%E7%BD%AE%E7%B1%BB%E8%B7%AF%E5%BE%84\\\">设置类路径</a></li>\\n<li><a href=\\\"#1332%E6%A0%97%E5%AD%90\\\">栗子</a></li>\\n</ul>\\n</li>\\n</ul>\\n</li>\\n</ul>\\n<hr>\\n<p><span id=\\\"13注解\\\"></span></p>\\n<h4 id=\\\"13、注解\\\">13、注解</h4>\\n<ul>\\n<li>13.1、<a href=\\\"#131%E5%BF%AB%E9%80%9F%E8%AE%BE%E7%BD%AE\\\">快速设置</a></li>\\n<li>13.2、<a href=\\\"#132%E4%BD%BF%E7%94%A8%E6%B3%A8%E8%A7%A3\\\">使用注解</a></li>\\n<li>13.3、<a href=\\\"#133%E5%9C%A8jetty%E5%B5%8C%E5%85%A5%E5%BC%8F%E5%BC%80%E5%8F%91%E4%B8%AD%E4%BD%BF%E7%94%A8%E6%B3%A8%E8%A7%A3\\\">在Jetty嵌入式开发中使用注解</a></li>\\n</ul>\\n<p>Jetty支持servlet规范的annotation。但是这默认是不开启的，所以接下来的内容会向你展示如何开启这个支持，以及如何使用它。</p>\\n<br>\\n\\n<p><span id=\\\"131快速设置\\\"></span></p>\\n<h5 id=\\\"131、快速设置\\\">13.1、快速设置</h5>\\n<ul>\\n<li>13.1.1、<a href=\\\"#1311%E5%85%B3%E4%BA%8Ejetty%E5%8F%91%E8%A1%8C%E7%89%88\\\">关于Jetty发行版</a></li>\\n<li>13.1.2、<a href=\\\"#1312%E5%85%B3%E4%BA%8Ejetty-maven-plugin\\\">关于Jetty Maven Plugin</a></li>\\n<li>13.1.3、<a href=\\\"#1313%E5%85%B3%E4%BA%8E%E5%B5%8C%E5%85%A5%E5%BC%8F\\\">关于嵌入式</a><br></li>\\n</ul>\\n<p><span id=\\\"1311关于jetty发行版\\\"></span></p>\\n<h6 id=\\\"1311、关于jetty发行版\\\">13.1.1、关于Jetty发行版</h6>\\n<p>如果你是使用的Jetty发行版，那么注解是默认支持的。注解模块以及它所需要的过渡的依赖都是负责支持注解功能的。</p>\\n<p>你需要注意的是，依赖JNDI的注解，比如<code>@Resource</code>和<code>@Resources</code>都是通过JNDI模块来实现的，JNDI模块是注解模块的过渡依赖模块。</p>\\n<blockquote>\\n<p><em>译者文外补充：Jetty发行版就是Jetty的客户端，与之相对的有Jetty嵌入式，我感觉文档是在强调这两个区别。</em></p>\\n</blockquote>\\n<p><a href=\\\"#top\\\">回到顶部</a>\\n<br></p>\\n<p><span id=\\\"1312关于jetty-maven-plugin\\\"></span></p>\\n<h6 id=\\\"1312、关于jetty-maven-plugin\\\">13.1.2、关于Jetty Maven Plugin</h6>\\n<p>注解和JNDI在Jetty Maven Plugin中都是预置的。</p>\\n<p><a href=\\\"#top\\\">回到顶部</a>\\n<br></p>\\n<p><span id=\\\"1313关于嵌入式\\\"></span></p>\\n<h6 id=\\\"1313、关于嵌入式\\\">13.1.3、关于嵌入式</h6>\\n<p>为了在嵌入式Jetty场景中使用注解，你需要加入<code>jetty-annotations</code>jar包和所有它依赖的jar包到classpath下。你还需要把<code>org.eclipse.jetty.annotations.AnnotationConfiguration</code>类添加到装载<code>Configuration classes</code>的列表中，并把这个列表应用到代表你的web应用的<code>org.eclipse.jetty.wabapp.WebAppContext</code>类中。</p>\\n<p>下面这个栗子设置了一个标准的<code>test-spec.war</code>web应用，这个包你可以在我们发行版的demo-base中找到。你需要注意的是<code>test-spec.war</code>并不只运用到了注解，还运用到了JNDI，所以这个栗子还激活了其它一系列的配置（通过<code> org.eclipse.jetty.plus.webapp.EnvConfiguration</code>，<code>org.eclipse.jetty.plus.webapp.PlusConfiguration</code>和它们自身依赖的jars）。</p>\\n<pre><code>package org.eclipse.jetty.embedded;\\n\\nimport java.io.File;\\n\\nimport org.eclipse.jetty.plus.jndi.EnvEntry;\\nimport org.eclipse.jetty.plus.jndi.Resource;\\nimport org.eclipse.jetty.plus.jndi.Transaction;\\nimport org.eclipse.jetty.security.HashLoginService;\\nimport org.eclipse.jetty.server.Server;\\nimport org.eclipse.jetty.webapp.Configuration;\\nimport org.eclipse.jetty.webapp.WebAppContext;\\n\\n/**\\n * ServerWithAnnotations\\n */\\npublic class ServerWithAnnotations\\n{\\n    public static final void main( String args[] ) throws Exception\\n    {\\n        // Create the server\\n        Server server = new Server(8080);\\n\\n        // Enable parsing of jndi-related parts of web.xml and jetty-env.xml\\n        Configuration.ClassList classlist = Configuration.ClassList\\n                .setServerDefault(server);\\n        classlist.addAfter(&quot;org.eclipse.jetty.webapp.FragmentConfiguration&quot;,\\n                &quot;org.eclipse.jetty.plus.webapp.EnvConfiguration&quot;,\\n                &quot;org.eclipse.jetty.plus.webapp.PlusConfiguration&quot;);\\n        classlist.addBefore(\\n                &quot;org.eclipse.jetty.webapp.JettyWebXmlConfiguration&quot;,\\n                &quot;org.eclipse.jetty.annotations.AnnotationConfiguration&quot;);\\n\\n        // Create a WebApp\\n        WebAppContext webapp = new WebAppContext();\\n        webapp.setContextPath(&quot;/&quot;);\\n        File warFile = new File(\\n                &quot;../../jetty-distribution/target/distribution/demo-base/webapps/test.war&quot;);\\n        webapp.setWar(warFile.getAbsolutePath());\\n        webapp.setAttribute(\\n                &quot;org.eclipse.jetty.server.webapp.ContainerIncludeJarPattern&quot;,\\n                &quot;.*/javax.servlet-[^/]*\\\\\\\\.jar$|.*/servlet-api-[^/]*\\\\\\\\.jar$&quot;);\\n        server.setHandler(webapp);\\n\\n        // Register new transaction manager in JNDI\\n        // At runtime, the webapp accesses this as java:comp/UserTransaction\\n        new Transaction(new com.acme.MockUserTransaction());\\n\\n        // Define an env entry with webapp scope.\\n        new EnvEntry(webapp, &quot;maxAmount&quot;, new Double(100), true);\\n\\n        // Register a mock DataSource scoped to the webapp\\n        new Resource(webapp, &quot;jdbc/mydatasource&quot;, new com.acme.MockDataSource());\\n\\n        // Configure a LoginService\\n        HashLoginService loginService = new HashLoginService();\\n        loginService.setName(&quot;Test Realm&quot;);\\n        loginService.setConfig(&quot;src/test/resources/realm.properties&quot;);\\n        server.addBean(loginService);\\n\\n        server.start();\\n        server.join();\\n    }\\n\\n}\\n</code></pre>\\n<p><a href=\\\"#top\\\">回到顶部</a>\\n<br></p>\\n<p><span id=\\\"132使用注解\\\"></span></p>\\n<h5 id=\\\"132、使用注解\\\">13.2、使用注解</h5>\\n<ul>\\n<li>13.2.1、<a href=\\\"#1321%E6%94%AF%E6%8C%81%E5%93%AA%E4%BA%9B%E6%B3%A8%E8%A7%A3\\\">支持哪些注解</a></li>\\n<li>13.2.2、<a href=\\\"#1322%E6%A3%80%E6%B5%8B%E6%B3%A8%E8%A7%A3%E5%92%8C%E8%87%AA%E6%A3%80%E6%B3%A8%E8%A7%A3%E7%9A%84%E5%AF%B9%E6%AF%94\\\">检测注解和自检注解的对比</a></li>\\n<li>13.2.3、<a href=\\\"#1323%E5%93%AA%E4%BA%9Bjar%E5%8C%85%E6%94%AF%E6%8C%81%E6%89%AB%E6%8F%8F%E6%A3%80%E6%9F%A5%E6%B3%A8%E8%A7%A3\\\">哪些jar包支持扫描检查注解</a></li>\\n<li>13.2.4、<a href=\\\"#1324%E5%A4%9A%E7%BA%BF%E7%A8%8B%E6%B3%A8%E8%A7%A3%E6%89%AB%E6%8F%8F\\\">多线程注解扫描</a></li>\\n<li>13.2.5、<a href=\\\"#1325servletcontainerinitializers\\\">ServletContainerInitializers</a></li>\\n</ul>\\n<p><span id=\\\"1321支持哪些注解\\\"></span></p>\\n<h6 id=\\\"1321、支持哪些注解\\\">13.2.1、支持哪些注解</h6>\\n<p>Jetty支持解释和运用的注解有：</p>\\n<ul>\\n<li>@Resource</li>\\n<li>@Resources</li>\\n<li>@PostConstruct</li>\\n<li>@PreDestroy</li>\\n<li>@DeclaredRoles</li>\\n<li>@RunAs</li>\\n<li>@MultipartConfig</li>\\n<li>@WebServlet</li>\\n<li>@WebFilter</li>\\n<li>@WebListener</li>\\n<li>@WebInitParam</li>\\n<li>@ServletSecurity, @HttpConstraint, @HttpMethodConstraint</li>\\n<li>@HandlesTypes (on ServletContainerInitializers)</li>\\n</ul>\\n<p><a href=\\\"#top\\\">回到顶部</a>\\n<br></p>\\n<p><span id=\\\"1322检测注解和自检注解的对比\\\"></span></p>\\n<h6 id=\\\"1322、检测注解和自检注解的对比\\\">13.2.2、检测注解和自检注解的对比</h6>\\n<p>一些类型的注解可以标注在任何类中，虽然这些注释并不一定能和容器产生直接交互作用。这些类型的注解我们称为“discovered（发现/检测）注释”，这代表容器需要主动的去检测这些注释。</p>\\n<p>其它类型的注释我们称之为“introspected（自检）注释”，这意味着这种自检行为会发生在被容器的生命周期中直接作用的类上面（比如<code>javax.servlet.Servlet, javax.servlet.Filter</code>等等）因此可以通过对该类的简单的检测就可以找到。</p>\\n<p>一些简单的“discovered（发现/检测）”注释比如：</p>\\n<ul>\\n<li>@WebServlet</li>\\n<li>@WebFilter</li>\\n<li>@WebListener</li>\\n</ul>\\n<p>一些简单的“introspected（自检）”注释比如：</p>\\n<ul>\\n<li>@PostConstruct</li>\\n<li>@PreDestroy</li>\\n<li>@Resource</li>\\n</ul>\\n<p><a href=\\\"#top\\\">回到顶部</a>\\n<br></p>\\n<p><span id=\\\"1323哪些jar包支持扫描检查注解\\\"></span></p>\\n<h6 id=\\\"1323、哪些jar包支持扫描检查注解\\\">13.2.3、哪些jar包支持扫描检查注解</h6>\\n<br>\\n\\n<p>web.xml文件可以包含<code>metadata-complete</code>属性。如果它的值为真，那么将不会扫描可检测的注释。然而，对类的扫描行为仍然会发生，因为有<code>javax.servlet.ServletContainerInitializer</code>。类一旦实现了这个接口，Jetty就会使用<code>javax.util.ServiceLoader</code>机制找到这个类，并且如果它里面有<code>@HandlesTypes</code>注释，那么jetty就必定会有层次地扫描这个类。如果你容器路径下或者<code>WEB-INF/lib</code>目录中包含了许多jar包的话，这样会非常消耗时间。</p>\\n<p>如果扫描一旦发生，要么是你没指定<code>metadata-complete</code>或者指定为false，要么是存在一个或者多个<code>javax.servlet.ServletContainerInitializer</code>和<code>@HandlesTypes</code>，这样Jetty就必须兼顾容器的路径内容以及web应用的类路径内容。</p>\\n<p>默认的情况下，Jetty不会扫描任何包含在容器类路径下的任何类。如果你需要扫描容器类路径下的类或者jar文件的话，你可以使用<code>org.eclipse.jetty.server.webapp.ContainerIncludeJarPattern</code>，这是一个<code>WebAppContext</code>属性，可以为你想要扫描容器类路径下的jar或者目录指定匹配模式，好进行扫描行为。</p>\\n<p>默认的情况下，Jetty会按照顺序扫描<strong>所有</strong><code>WEB-INF/classes</code>下的类和<strong>所有</strong><code>WEB-INF/lib</code>下的jar包，前提是你有在web.xml下制定任何绝对或者相对的顺序。如果你的web应用包含许多jar文件，你可以通过省略扫描这些jar包来显式的加速部署速度。为了做到这一点，你可以在<code>WebAppContext</code>中设置<code>org.eclipse.jetty.server.webapp.WebInfIncludeJarPattern</code>属性，通过模式来定义你需要扫描的jar包。</p>\\n<p>你需要注意到的是如果你有配置web应用的<code>extraClasspath</code>，那么它也会参与扫描过程。这里面的任何jar或者类都会像在<code>WEB-INF/classes</code>或者<code>WEB-INF/lib</code>中一样被扫描。</p>\\n<p>如果你需要控制它们被应用到的顺序，你可以在<a href=\\\"#1325servletcontainerinitializers\\\">这里</a>了解到更多。</p>\\n<p><a href=\\\"#top\\\">回到顶部</a>\\n<br></p>\\n<p><span id=\\\"1324多线程注解扫描\\\"></span></p>\\n<h6 id=\\\"1324、多线程注解扫描\\\">13.2.4、多线程注解扫描</h6>\\n<p>如果要执行注释扫描，默认的情况下，Jetty会使用多线程的方式去实现，企图以最短的时间完成。</p>\\n<p>如果处于某些原因你不想以多线程的方式扫描，你可以在Jetty中配置为单线程扫描。有以下几种方式：</p>\\n<ul>\\n<li>Set the context attribute org.eclipse.jetty.annotations.multiThreaded to false</li>\\n<li>Set the Server attribute org.eclipse.jetty.annotations.multiThreaded to false</li>\\n<li>Set the System property org.eclipse.jetty.annotations.multiThreaded to false</li>\\n</ul>\\n<p>第一种只适用当前web应用，第二种适用所有部署在同一个server实例上的webapp，第三种适用所有在同一个JVM下部署的webapp。</p>\\n<p>默认的情况下，Jetty会最大等待60秒来完成所有线程的扫描。你可以通过以下的设置来配置你想要的秒数：</p>\\n<ul>\\n<li>Set the context attribute org.eclipse.jetty.annotations.maxWait</li>\\n<li>Set the Server attribute org.eclipse.jetty.annotations.maxWait</li>\\n<li>Set the System property org.eclipse.jetty.annotations.maxWait</li>\\n</ul>\\n<p>第一种只适用当前web应用，第二种适用所有部署在同一个server实例上的webapp，第三种适用所有在同一个JVM下部署的webapp。</p>\\n<p><a href=\\\"#top\\\">回到顶部</a>\\n<br></p>\\n<p><span id=\\\"1325servletcontainerinitializers\\\"></span></p>\\n<h6 id=\\\"1325、servletcontainerinitializers\\\">13.2.5、ServletContainerInitializers</h6>\\n<p><code>javax.servlet.ServletContainerInitializer</code>可以在存在于容器的类路径下、webapp的<code>WEB-INF/classes</code>目录中、webapp的<code>WEB-INF/lib</code>jar中，或者是你为web应用配置的额外的<code>extraClasspath</code>下。</p>\\n<p>Servlet规范并没有定义说我们应该在web应用启动的时候必须得按照顺序调用哪一个<code>ServletContainerInitializer</code>。在默认的情况下，Jetty会按照以下的顺序调用：</p>\\n<ul>\\n<li>ServletContainerInitializers from the container’s classpath</li>\\n<li>ServletContainerInitializers from WEB-INF/classes</li>\\n<li>ServletContainerInitializers from WEB-INF/lib jars in the order established in web.xml, or in the order that the SCI is returned by the javax.util.ServiceLoader if there is no ordering</li>\\n</ul>\\n<blockquote>\\n<p><em>译者文外补充：后面还有两个内容是关于控制<code>javax.servlet.ServletContainerInitializer</code>的调用顺序配置，和排除<code>javax.servlet.ServletContainerInitializer</code>。我就不翻译了，有需要的可以看<a href=\\\"http://www.eclipse.org/jetty/documentation/9.4.6.v20170531/using-annotations.html\\\">原文</a>。</em></p>\\n</blockquote>\\n<p><a href=\\\"#top\\\">回到顶部</a>\\n<br></p>\\n<p><span id=\\\"133在jetty嵌入式开发中使用注解\\\"></span></p>\\n<h4 id=\\\"133、在jetty嵌入式开发中使用注解\\\">13.3、在Jetty嵌入式开发中使用注解</h4>\\n<ul>\\n<li>13.3.1、<a href=\\\"#1331%E8%AE%BE%E7%BD%AE%E7%B1%BB%E8%B7%AF%E5%BE%84\\\">设置类路径</a></li>\\n<li>13.3.2、<a href=\\\"#1332%E6%A0%97%E5%AD%90\\\">栗子</a></li>\\n</ul>\\n<p><span id=\\\"1331设置类路径\\\"></span></p>\\n<h5 id=\\\"1331、设置类路径\\\">13.3.1、设置类路径</h5>\\n<p>你需要在类路径下加入以下的jar。你可以从Jetty发行版目录中找到它们，或者使用maven依赖：</p>\\n<ul>\\n<li>jetty-plus.jar</li>\\n<li>jetty-annotations.jar</li>\\n</ul>\\n<p>你可能还需要<code>asm</code>jar，你可以通过<a href=\\\"http://central.maven.org/maven2/org/eclipse/jetty/orbit/org.objectweb.asm/3.3.1.v201105211655/org.objectweb.asm-3.3.1.v201105211655.jar\\\">这个连接</a>下载到。</p>\\n<p><a href=\\\"#top\\\">回到顶部</a>\\n<br></p>\\n<p><span id=\\\"1332栗子\\\"></span></p>\\n<h5 id=\\\"1332、栗子\\\">13.3.2、栗子</h5>\\n<p>这个栗子设置了一个Jetty服务器，执行了一些设置来确保注解被扫描到，然后部署一个运用到了注解的web应用。</p>\\n<p>这个栗子使用<code>@Resource</code>注解来调用JNDI，所以我们能看到classpath中有一些必要的JNDI的jar包。</p>\\n<p>这个栗子还添加了一些配置类来支持JNDI（见19行）。</p>\\n<pre><code>import org.eclipse.jetty.security.HashLoginService;\\nimport org.eclipse.jetty.server.Server;\\nimport org.eclipse.jetty.webapp.WebAppContext;\\n\\n/**\\n * ServerWithAnnotations\\n *\\n *\\n */\\npublic class ServerWithAnnotations\\n{\\n    public static final void main(String args[]) throws Exception\\n    {\\n        //Create the server\\n        Server server = new Server(8080);\\n\\n        //Enable parsing of jndi-related parts of web.xml and jetty-env.xml\\n        org.eclipse.jetty.webapp.Configuration.ClassList classlist = org.eclipse.jetty.webapp.Configuration.ClassList.setServerDefault(server);\\n        classlist.addAfter(&quot;org.eclipse.jetty.webapp.FragmentConfiguration&quot;, &quot;org.eclipse.jetty.plus.webapp.EnvConfiguration&quot;, &quot;org.eclipse.jetty.plus.webapp.PlusConfiguration&quot;);\\n        classlist.addBefore(&quot;org.eclipse.jetty.webapp.JettyWebXmlConfiguration&quot;, &quot;org.eclipse.jetty.annotations.AnnotationConfiguration&quot;);\\n\\n        //Create a WebApp\\n        WebAppContext webapp = new WebAppContext();\\n        webapp.setContextPath(&quot;/&quot;);\\n        webapp.setWar(&quot;../../tests/test-webapps/test-servlet-spec/test-spec-webapp/target/test-spec-webapp-9.0.4-SNAPSHOT.war&quot;);\\n        server.setHandler(webapp);\\n\\n        //Register new transaction manager in JNDI\\n        //At runtime, the webapp accesses this as java:comp/UserTransaction\\n        org.eclipse.jetty.plus.jndi.Transaction transactionMgr = new org.eclipse.jetty.plus.jndi.Transaction(new com.acme.MockUserTransaction());\\n\\n        //Define an env entry with webapp scope.\\n        org.eclipse.jetty.plus.jndi.EnvEntry maxAmount = new org.eclipse.jetty.plus.jndi.EnvEntry (webapp, &quot;maxAmount&quot;, new Double(100), true);\\n\\n\\n        // Register a  mock DataSource scoped to the webapp\\n        org.eclipse.jetty.plus.jndi.Resource mydatasource = new org.eclipse.jetty.plus.jndi.Resource(webapp, &quot;jdbc/mydatasource&quot;, new com.acme.MockDataSource());\\n\\n        // Configure a LoginService\\n        HashLoginService loginService = new HashLoginService();\\n        loginService.setName(&quot;Test Realm&quot;);\\n        loginService.setConfig(&quot;src/test/resources/realm.properties&quot;);\\n        server.addBean(loginService);\\n\\n\\n        server.start();\\n        server.join();\\n    }\\n\\n}\\n</code></pre>\\n<p>在19行中的配置类，负责设置JNDI和添加<code>java:comp/env</code>。</p>\\n<p>在20行我们添加了的类会确保注释会被检查到。</p>\\n<p>在30，33和37行的JNDI资源中，我们可以使用<code>@Resource</code>注释去配置。</p>\\n<p>根据下面的设置，一个使用注释的servlet，并且Jetty在webapp被部署的时候会遵循注释去创建这个类：</p>\\n<pre><code>import javax.annotation.security.DeclareRoles;\\nimport javax.annotation.security.RunAs;\\nimport javax.servlet.ServletConfig;\\nimport javax.servlet.ServletException;\\nimport javax.servlet.ServletOutputStream;\\nimport javax.servlet.annotation.WebInitParam;\\nimport javax.servlet.annotation.WebServlet;\\nimport javax.servlet.http.HttpServlet;\\nimport javax.servlet.http.HttpServletRequest;\\nimport javax.servlet.http.HttpServletResponse;\\nimport javax.sql.DataSource;\\nimport javax.transaction.UserTransaction;\\n\\n/**\\n * AnnotationTest\\n *\\n * Use servlet 3.0 annotations from within Jetty.\\n *\\n * Also uses servlet 2.5 resource injection and lifecycle callbacks\\n */\\n\\n@RunAs(&quot;special&quot;)\\n@WebServlet(urlPatterns = {&quot;/&quot;,&quot;/test/*&quot;}, name=&quot;AnnotationTest&quot;, initParams={@WebInitParam(name=&quot;fromAnnotation&quot;, value=&quot;xyz&quot;)})\\n@DeclareRoles({&quot;user&quot;,&quot;client&quot;})\\npublic class AnnotationTest extends HttpServlet\\n{\\n    private DataSource myDS;\\n\\n    @Resource(mappedName=&quot;UserTransaction&quot;)\\n    private UserTransaction myUserTransaction;\\n\\n    @Resource(mappedName=&quot;maxAmount&quot;)\\n    private Double maxAmount;\\n\\n\\n    @Resource(mappedName=&quot;jdbc/mydatasource&quot;)\\n    public void setMyDatasource(DataSource ds)\\n    {\\n        myDS=ds;\\n    }\\n\\n\\n    @PostConstruct\\n    private void myPostConstructMethod ()\\n    {\\n        System.err.println(&quot;PostConstruct called&quot;);\\n    }\\n\\n\\n    @PreDestroy\\n    private void myPreDestroyMethod()\\n    {\\n        System.err.println(&quot;PreDestroy called&quot;);\\n    }\\n\\n    public void init(ServletConfig config) throws ServletException\\n    {\\n        super.init(config);\\n    }\\n\\n\\n    public void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException\\n    {\\n        doGet(request, response);\\n    }\\n\\n    public void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException\\n    {\\n        try\\n        {\\n            response.setContentType(&quot;text/html&quot;);\\n            ServletOutputStream out = response.getOutputStream();\\n            out.println(&quot;&lt;html&gt;&quot;);\\n            out.println(&quot;&lt;body&gt;&quot;);\\n            out.println(&quot;&lt;h1&gt;Results&lt;/h1&gt;&quot;);\\n            out.println(myDS.toString());\\n            out.println(&quot;&lt;br/&gt;&quot;);\\n            out.println(maxAmount.toString());\\n            out.println(&quot;&lt;/body&gt;&quot;);\\n            out.println(&quot;&lt;/html&gt;&quot;);\\n            out.flush();\\n        }\\n        catch (Exception e)\\n        {\\n            throw new ServletException(e);\\n        }\\n    }\\n}\\n</code></pre>\\n<blockquote>\\n<p><em>译者文外补充：在Jetty中使用注释很重要的一点就是，Jetty只会扫描类路径下的.class文件，也即编译结果，以及项目lib中的jar文件，除此之外不会扫描其它地方。所以在使用编译器开发的时候，要详细设置好类路径。</em></p>\\n</blockquote>\\n<p><img src=\\\"https://github.com/youyinnn/JettyDocTranslation/raw/master/doc/img/ServletAnnontationExp.png\\\" alt=\\\"ServletAnnontationExp\\\"></p>\\n<blockquote>\\n<p><em>译者文外补充：如上图所示，我使用idea配置，我的war路径为src路径，但是在IDEA开发中，编译结果是在out目录下的，所以我设置了一个额外的类路径，将编译出的类结果加入到classpath中，这样我就可以扫描这下面的class，也就能扫描其中的注释了。我框出来的日志表明确实是有class被扫描到了并且有耗时结果，如果耗时结果为0的话，肯定是类路径设置错了。</em></p>\\n</blockquote>\\n<p><a href=\\\"#top\\\">回到顶部</a></p>\\n<hr>\\n\";","export default \"<h3 id=\\\"introduction\\\">Introduction</h3>\\n<p>本篇主要介绍什么是GC，GC一般发生在哪里，GC在这些地方都干些什么</p>\\n<p>顺带简单提一下四种<strong>引用类型</strong>以及<code>finalize()</code>方法</p>\\n<h3 id=\\\"about-garbage-collection\\\">About Garbage Collection</h3>\\n<p>你已经是一个成熟的JVM了，应该自己学会智能GC了</p>\\n<blockquote>\\n<p>说起GC，很多人把这项技术当作Java语言的伴生产物。事实上，GC的历史比Java更久远，1960年诞生于MIT的Lisp语言是第一门真正使用内存动态分配和垃圾收集技术的语言。当Lisp还在胚胎时期的时候，人们就在思考GC需要完成的事情：</p>\\n<ul>\\n<li>哪些内存需要回收？</li>\\n<li>什么时候回收？</li>\\n<li>如何回收？</li>\\n</ul>\\n<p>经过半个多世纪的发展，目前内存的动态分配和内存回收技术已经非常成熟了，一切看起来都进入了“自动化”时代，那我们为什么还要去了解GC和内存分配呢？——当需要排查各种内存溢出、内存泄漏问题的时候，当垃圾收集称为系统达到<strong>更高并发量</strong>的瓶颈的时候，我们就需要对这些自动化的技术实施必要的监控和调节。</p>\\n</blockquote>\\n<p>我们前面知道了JVM的内存区域会分成：Java堆、方法区、栈（本地方法栈、虚拟机栈）、程序计数器，我们一个一个来看</p>\\n<ul>\\n<li><p>栈（本地方法栈、虚拟机栈）、程序计数器：</p>\\n<p>  这部分的内存是线程私有的，随线程生，随线程灭，特别是<strong>每一个栈帧需要多少内存是在类结构确定的时候就已经定下来的了（基本）</strong>所以这部分的内存分配和回收都具备<strong>确定性</strong>，我们并不能在这部分的内存做出更多的考虑了</p>\\n</li>\\n<li><p>堆和方法区：</p>\\n<p>  对象的内存分配、常量的内存分配、类的加载和卸载，这部分内存是运行时动态变化的，这也正是GC要关注的，一般我们说GC就是在管理这部分的内存</p>\\n</li>\\n</ul>\\n<h3 id=\\\"heap-areas-gc\\\">Heap Area&#39;s GC</h3>\\n<p>因为堆是对象分配的主要区域，所以堆的垃圾回收非常重要，这里面也有很多值得深入的地方：</p>\\n<ul>\\n<li>对象回收判断；</li>\\n<li>基本垃圾回收思路；</li>\\n<li>垃圾回收算法在JVM中的实现——垃圾回收器；</li>\\n</ul>\\n<h3 id=\\\"method-areas-gc\\\">Method Area&#39;s GC</h3>\\n<p>我们知道，方法区（永久代）里面主要存放两部分东西：类信息和运行时常量。</p>\\n<p>一般我们说垃圾回收都是在堆里去回收，在新生代中回收垃圾，这部分的回收效率非常高，而永久代的回收效率就远低于此。</p>\\n<p>因为永久代主要回收2样东西：<strong>废弃常量和无用的类</strong></p>\\n<p>对于废弃常量的回收判定，基本和对象回收差不多，看引用就好了</p>\\n<p>而对于无用类的判定就需要谨慎对待了，要想回收一个类，该类必须满足一下3个条件：</p>\\n<ol>\\n<li>该类所有的实例都已经被回收</li>\\n<li>加载该类的ClassLoader已经被回收</li>\\n<li>该类对应的Class对象没有在任何地方被引用到，无法在代码中通过反射访问到该类的方法</li>\\n</ol>\\n<p>就算满足了这些条件，也仅仅是可以回收而已，而具体是否回收该类......作者也没有说- -</p>\\n<h3 id=\\\"reference-tips-reference-type\\\">Reference Tips: reference type</h3>\\n<p>关于Java中的引用，不是直接引用这么简单，无论是哪种存活判断，都和引用有关</p>\\n<p>在JDK1.2之前，引用只有一种定义：reference类型中存储的是另一块空间的地址，就代表是一个引用</p>\\n<p>这样的定义存粹，但是比较狭隘，一个对象可能会有“要你的时候你得在，不要的时候就管你死活”的备胎状态，这样尴尬的情况就需要更进一步地去进行引用描述了</p>\\n<p>我们希望能考虑到：系统内存充足的时候，你可以在这玩；内存紧张的时候，您还是请回吧；这样的情况</p>\\n<p>所以在JDK1.2之后增强了引用的概念，分别有强引用（Strong Reference）、软引用（Soft Reference）、弱引用（Weak Reference）、虚引用（Phantom Reference），引用强度依次减弱</p>\\n<ol>\\n<li>Strong Reference：描述必须的对象。有明确的赋值语句声明的对象引用，无论如何只要没有断开引用就不会被GC回收</li>\\n<li>Soft Reference：描述有用但是非必须的对象。可以通过实现<code>SoftReference</code>接口来表示存在软引用关联的对象，<strong>在系统将要内存溢出的时候，把这些对象标进可回收范围内进行二次回收，如果这次回收还没有足够的内存，才会抛出内存溢出异常</strong></li>\\n<li>Weak Reference：描述非必须的对象。可以通过实现<code>WeakReference</code>接口来表示存在弱引用关联的对象，这些对象只能生存到下次GC之前，无论内存是否紧张</li>\\n<li>Phantom Reference：可以通过实现<code>PhantomReference</code>接口来表示存在虚引用关联的对象，存在虚引用的对象不会在声明周期和GC策略上有任何的影响，仅仅是在这个对象被GC的时候收到一个系统通知而已</li>\\n</ol>\\n<h3 id=\\\"gc-process--objects-finalize-method\\\">GC Process & Object&#39;s finalize Method</h3>\\n<p>即使对象已经具备回收条件，执行了GC之后也不是马上就回收内存的，要宣告一个对象死亡，至少需要经历两次标记：</p>\\n<ol>\\n<li><p>如果对象在进行RA之后发现没有Reference Chian，那么他会被<strong>第一次标记</strong>，并且执行一次筛选，筛选的细节：</p>\\n<blockquote>\\n<p>*** 对象是否有必要执行finalize方法：**</p>\\n<ol>\\n<li><p>当对象没有覆盖finalize方法的时候</p>\\n</li>\\n<li><p>当对象已经被JVM调用过一次finalize方法的时候</p>\\n<p> 以上两种情况都是——<strong>没有必要执行finalize方法</strong></p>\\n</li>\\n</ol>\\n<p>*** 当有必要执行finalize方法的时候:**</p>\\n<ol>\\n<li><p>将对象放置到一个<code>F-Queue</code>队列中，并在稍后由一个由JVM建立、低优先级的Finalizer线程去处理它</p>\\n</li>\\n<li><p>开始处理<code>F-Queue</code>，对于每个对象，仅call一次它们的finalize方法，call的结果如何并不关心，注意是call，这是一个trigger，而不是执行，也就是不会等待finalize方法结束，GC和JVM都没有义务要等待一个对象的finalize方法；</p>\\n<p> 这时候对象可以在finalize方法中自救自己，为自己建立一个引用</p>\\n</li>\\n</ol>\\n</blockquote>\\n</li>\\n<li><p>对对象进行<strong>第二次标记</strong>：如果有第一次标记且进行RA之后还没有引用关联的话，就mark第二次且进行回收</p>\\n</li>\\n</ol>\\n<p>需要特别说明的是：</p>\\n<blockquote>\\n<p>finalize方法并不是用来自救用的，也不推荐使用这个方法，它是Java为了迎合C/C++程序员的产物、妥协</p>\\n<p>因为它运行代价高昂、不稳定、且无调用顺序保证</p>\\n</blockquote>\\n\";","export default \"<h3 id=\\\"前言\\\">前言</h3>\\n<p>这回说说 Java 并发编程第四坎，最常用的<strong>volatile 和 synchronized 关键字</strong>，这两个关键字是理解 java 同步编程的第一步，特别是<strong>synchronized 关键字</strong></p>\\n<p>而在<em>《Java 多线程编程核心技术》</em>的第 2.1 节中，作者不经意的道出了<strong>线程同步的真谛之一：避免脏读</strong></p>\\n<ul>\\n<li><strong>关键字的解说</strong><ul>\\n<li><strong>volatile 的含义、底层实现和使用</strong></li>\\n<li><strong>synchronized 的含义、底层实现和使用</strong><ul>\\n<li>Java 中的几种锁</li>\\n<li>Java 中的锁到底是什么？</li>\\n</ul>\\n</li>\\n<li><strong>两个关键字的对比</strong></li>\\n</ul>\\n</li>\\n</ul>\\n<hr>\\n<h3 id=\\\"关键字的解说\\\">关键字的解说</h3>\\n<p>关键字的解说分别从三个方面进行，首先解释关键字的基本含义，然后上一些基本使用的代码，最后结合两本书来说说关键字的底层实现。</p>\\n<p>以下两段摘自<em>《艺术》P96</em></p>\\n<blockquote>\\n<p><strong>关键字 volatile</strong>可以用来修饰字段（成员变量），就是告知程序任何对该变量的访问均需要从共享内存中获取，而对它的改变必须同步刷新回共享内存，它能保证所有线程对变量访问的<strong>可见性</strong>。</p>\\n</blockquote>\\n<blockquote>\\n<p><strong>关键字 synchronized</strong>可以修饰方法或者同步块，它主要保证多线程在同一时刻，只能有一个线程处于同步块或者同步方法中，它保证了线程对变量访问的<strong>可见性</strong>和<strong>排他性</strong>。</p>\\n</blockquote>\\n<h4 id=\\\"volatile-的含义、底层实现和使用\\\">volatile 的含义、底层实现和使用</h4>\\n<h5 id=\\\"volatile-的含义\\\">volatile 的含义</h5>\\n<blockquote>\\n<p>Java 语允许线程访问共享变量，为了确保共享变量可以被准确和一致地更新，线程应该确保通过<strong>排他锁</strong>单独获取这个变量。</p>\\n</blockquote>\\n<p>如果一个变量被声明为 volatile，Java 线程内存模型确保所有的线程看到这个变量的值是一致的。</p>\\n<p>关于 Java 内存模型我们放到以后再说，总的来说，使用<code>volatile</code>声明了的变量，可以说任何对该变量的读写都是上了锁的，这种锁只针对改变量，是一种轻量级的锁</p>\\n<p>共享变量是什么概念呢？我们知道，线程运行的时候，很多时候是使用自己创建的私有线程栈空间去操作数据的，那么每个线程都操作的自己的栈空间，导致同一个意义的值在不同的线程中可能有不同的值，所以 volatile 变量强制让线程只从共享内存的意义上去操作变量，保证了<strong>可见性</strong></p>\\n<p><img src=\\\"../../../public/img/TIM%E5%9B%BE%E7%89%8720180717215051.png\\\" alt=\\\"\\\"></p>\\n<h5 id=\\\"底层实现\\\">底层实现</h5>\\n<p>让我们来看看在对 volatile 变量进行写操作的时候，CPU 会干哪些事：</p>\\n<p>Java 代码：</p>\\n<pre><code class=\\\"hljs language-java\\\">instance = <span class=\\\"hljs-keyword\\\">new</span> <span class=\\\"hljs-title class_\\\">Singleton</span>()    <span class=\\\"hljs-comment\\\">//instance是volatile变量</span>\\n</code></pre>\\n<p>转变为底层汇编代码：</p>\\n<pre><code class=\\\"hljs language-assembly\\\">0x01a3deld: movb $0*0,0*1104800(%esi);\\n0x01a3de24: lock addl $0*0,(%esp);\\n</code></pre>\\n<p>需要注意的是第二行代码，有 volatile 修饰的变量进行写操作的时候会多出第二行汇编代码，关键是里面的<strong>lock</strong>前缀的指令，在多核处理器下会有：</p>\\n<ol>\\n<li>将当前处理器缓存行的数据写回到系统内存</li>\\n<li>这个写回内存的操作会使<strong>其他 CPU 里缓存了该内存地址的数据无效</strong></li>\\n</ol>\\n<p>因为要提高处理速度，处理器并不直接和内存通信，而是先把系统内存的数据读到内部缓存后再进行操作，但是操作完之后何时将数据写到内存是不确定的。</p>\\n<p>如果对生命了 volatile 的变量进行写操作，JVM 就会向处理器发出一条<strong>lock 前缀指令</strong>，将这个变量所在的缓存行写回到内存，但是就算写回内存，其他处理器的缓存行的值还是旧值，所以需要一种机制：</p>\\n<p><strong>缓存一致性协议：为了保证各个处理器的缓存是一致的，每个处理器通过嗅探在总线上传播的数据来检查自己的数据是否过期，如果过期则将自己缓存行中的值设置为无效，等待下次时机再去内存中取有效值。</strong></p>\\n<p>上面的两条规则也是实现 volatile 关键字的两条原则：</p>\\n<ol>\\n<li>Lock 前缀指令让处理器缓存写回内存</li>\\n<li>步骤 1 后，通过缓存一致性协议，让其他处理器的缓存行中的该值无效</li>\\n</ol>\\n<h5 id=\\\"使用\\\">使用</h5>\\n<p>volatile 的使用非常简单，有 volatile 修饰的变量天然是一个<strong>“受保护”</strong>的临界资源，对于变量的赋值和访问天然上锁</p>\\n<pre><code class=\\\"hljs language-java\\\">    <span class=\\\"hljs-keyword\\\">private</span> <span class=\\\"hljs-keyword\\\">volatile</span> <span class=\\\"hljs-type\\\">int</span> <span class=\\\"hljs-variable\\\">mutex</span> <span class=\\\"hljs-operator\\\">=</span> <span class=\\\"hljs-number\\\">0</span>;\\n    <span class=\\\"hljs-keyword\\\">public</span> <span class=\\\"hljs-keyword\\\">void</span> <span class=\\\"hljs-title function_\\\">setMutex</span><span class=\\\"hljs-params\\\">(<span class=\\\"hljs-type\\\">int</span> mutex)</span>{\\n        <span class=\\\"hljs-built_in\\\">this</span>.mutex = mutex;\\n    }\\n    <span class=\\\"hljs-keyword\\\">public</span> <span class=\\\"hljs-type\\\">int</span> <span class=\\\"hljs-title function_\\\">getMutex</span><span class=\\\"hljs-params\\\">()</span>{\\n        <span class=\\\"hljs-keyword\\\">return</span> mutex;\\n    }\\n</code></pre>\\n<p>但是我们需要注意的是，<strong>volatile 关键字只能对一个原子操作保持同步！</strong></p>\\n<p>常见的陷阱是：</p>\\n<pre><code class=\\\"hljs language-java\\\">    i++;    <span class=\\\"hljs-comment\\\">// i是volatile变量</span>\\n</code></pre>\\n<p>这行代码是否线程安全，答案是否定的，i++这行代码是分两步进行的：</p>\\n<pre><code class=\\\"hljs language-java\\\">    <span class=\\\"hljs-type\\\">int</span> <span class=\\\"hljs-variable\\\">temp</span> <span class=\\\"hljs-operator\\\">=</span> i + <span class=\\\"hljs-number\\\">1</span>;\\n    i = temp;\\n</code></pre>\\n<p>这样的两步操作有可能会引发线程安全问题，有可能就在这两行代码中间有多个线程进行操作，i 可能变成了脏数据</p>\\n<h4 id=\\\"synchronized-的含义、底层实现和使用\\\">synchronized 的含义、底层实现和使用</h4>\\n<p>对于这个关键字，在并发里也是非常重要了，在 Java SE1.6 之前，很多人把它称之为重量级锁，但是在 1.6 之后，很多情况下它变得不是那么重量了，为了减少获取锁和释放锁带来的性能消耗，Java SE1.6 引入了<strong>偏向锁</strong>和<strong>轻量级锁</strong>，在本节中间会讨论锁的存储和升级</p>\\n<h5 id=\\\"synchronized-的含义\\\">synchronized 的含义</h5>\\n<blockquote>\\n<p>Java 中的每个对象都可以作为<strong>“锁”</strong>，使用 synchronized 关键字可以表现为：</p>\\n<ul>\\n<li>可以修饰在在方法上，则锁是当前调用方法的对象</li>\\n<li>可以在修饰在静态方法上，锁是当前类的 Class 对象</li>\\n<li>可以作为同步方法快，锁是括号里配置的对象</li>\\n</ul>\\n<p>当一个线程视图要访问同步代码的时候，它首先要获得锁，<strong>退出锁范围或者抛出异常的时候，必须要释放锁</strong></p>\\n</blockquote>\\n<h5 id=\\\"底层实现-1\\\">底层实现</h5>\\n<p>JVM 规范中说明了 synchronized 的实现原理：JVM 基于进入和退出 Monitor 对象来实现方法同步和代码块同步，但是两者的实现细节不一样。</p>\\n<p>代码块同步是使用<code>monitor.enter</code>和<code>monitor.exit</code>指令实现的，而方法同步虽然实现不一样，但是也可以用这样的方法去实现。</p>\\n<p><code>monitor.enter</code>指令是在编译后插入到同步代码块的开始位置，而<code>monitor.exit</code>是插入到方法结束或者异常处，JVM 要保证每个<code>monitor.enter</code>都要有<code>monitor.exit</code>和之匹配，任何对象都有一个 monitor 与之关联，当一个 monitor 被线程持有之后，它就会锁定，其他不相干的线程无法一同持有该锁</p>\\n<h5 id=\\\"java-中的锁到底是什么\\\">Java 中的锁到底是什么</h5>\\n<p>接下来这节是重点重点重点重点重点重点重点！！！</p>\\n<p>基于上面的机制，我们可以来说说 Java 中的锁到底是什么</p>\\n<p>以下摘自<em>《艺术》P96-98</em></p>\\n<blockquote>\\n<p>首先我们看一段代码：</p>\\n<pre><code class=\\\"hljs language-java\\\"><span class=\\\"hljs-keyword\\\">public</span> <span class=\\\"hljs-keyword\\\">class</span> <span class=\\\"hljs-title class_\\\">Syn</span>{\\n    <span class=\\\"hljs-keyword\\\">public</span> <span class=\\\"hljs-keyword\\\">static</span> <span class=\\\"hljs-keyword\\\">void</span> <span class=\\\"hljs-title function_\\\">main</span><span class=\\\"hljs-params\\\">(Stirng[] args)</span>{\\n        <span class=\\\"hljs-comment\\\">// syn代码块</span>\\n        <span class=\\\"hljs-keyword\\\">synchronized</span>(Syn.class){}\\n        <span class=\\\"hljs-comment\\\">// 静态同步方法</span>\\n        m();\\n    }\\n    <span class=\\\"hljs-keyword\\\">public</span> <span class=\\\"hljs-keyword\\\">static</span> <span class=\\\"hljs-keyword\\\">synchronized</span> <span class=\\\"hljs-keyword\\\">void</span> <span class=\\\"hljs-title function_\\\">m</span><span class=\\\"hljs-params\\\">()</span>{}\\n}\\n</code></pre>\\n<p>在 Syn.class 同级目录执行<code>javap-v Syn.class</code>，部分输入如下：</p>\\n<pre><code class=\\\"hljs language-java\\\"><span class=\\\"hljs-keyword\\\">public</span> <span class=\\\"hljs-keyword\\\">static</span> <span class=\\\"hljs-keyword\\\">void</span> <span class=\\\"hljs-title function_\\\">main</span><span class=\\\"hljs-params\\\">(java.lang.String[])</span>;\\n    Code:\\n        stack=<span class=\\\"hljs-number\\\">2</span>, locals=<span class=\\\"hljs-number\\\">1</span>, args_size=<span class=\\\"hljs-number\\\">1</span>\\n        <span class=\\\"hljs-number\\\">0</span>: ldc\\n        <span class=\\\"hljs-number\\\">2</span>: dup\\n        <span class=\\\"hljs-number\\\">3</span>: monitorenter    <span class=\\\"hljs-comment\\\">// 这个地方监视器进入</span>\\n        <span class=\\\"hljs-number\\\">4</span>: monitoreit    <span class=\\\"hljs-comment\\\">// 监视器退出</span>\\n        <span class=\\\"hljs-number\\\">5</span>: invokestatic <span class=\\\"hljs-comment\\\">// m()</span>\\n        <span class=\\\"hljs-number\\\">8</span>: <span class=\\\"hljs-keyword\\\">return</span>\\n\\n    <span class=\\\"hljs-keyword\\\">public</span> <span class=\\\"hljs-keyword\\\">static</span> <span class=\\\"hljs-keyword\\\">synchronized</span> <span class=\\\"hljs-keyword\\\">void</span> <span class=\\\"hljs-title function_\\\">m</span><span class=\\\"hljs-params\\\">()</span>;\\n    flags: ACC_PUBLIC, ACC_STATIC, ACC_SYNCHRONIZED\\n        Code:\\n            stack=<span class=\\\"hljs-number\\\">0</span>, locals=<span class=\\\"hljs-number\\\">0</span>, args_size=<span class=\\\"hljs-number\\\">0</span>\\n            <span class=\\\"hljs-number\\\">0</span>: <span class=\\\"hljs-keyword\\\">return</span>\\n</code></pre>\\n<p>上面的 class 信息中，同步块是使用使用<code>monitor.enter</code>和<code>monitor.exit</code>指令实现的</p>\\n<p>而同步方法则是使用<code>ACC_SYNCHRONIZED</code>修饰符完成的</p>\\n<p>无论是那种方法，本质都是对一个对象的监视器进行获取，这个获取的过程是<strong>排他的</strong></p>\\n</blockquote>\\n<p>之前反复强调<strong>“锁”、“监视器”</strong>，我们模糊地知道<strong>“锁”</strong>是干嘛的，但什么是<strong>“监视器”</strong>？<em>《艺术》</em>告诉你答案！</p>\\n<blockquote>\\n<p>任意一个对象都拥有自己的<u>监视器</u>，当这个对象由同步块或者这个对象的同步方法调用的时候，执行方法的线程必须先获取到对象的监视器才能够进入同步块或者同步方法中，而没有获取到监视器（执行该方法）的线程会被阻塞在同步块和同步方法的入口处，进入<strong>BLOCKED</strong>状态</p>\\n</blockquote>\\n<p>引用书上的图来说明：</p>\\n<p><img src=\\\"../../../public/img/monitor.png\\\" alt=\\\"\\\"></p>\\n<p>如图所示，<strong>监视器负责坚定的维护一个同步队列，所有尝试获取监视器而失败的线程，都会在该监视器维护的同步队列后面排队，直到被唤醒或者出现意外情况</strong></p>\\n<p>所以从这个意义上来说，监视器可以说是一把钥匙，拿到钥匙（监视器）的人才可以进屋搞事情，没钥匙的人得先在门外（锁外）排队等，完事了的人（上一个拿到监视器的人退出锁区）出门走的时候，把钥匙交给当前正在排队的队伍最前面的人</p>\\n<p>所以优先级什么的，可以说是插队，意外情况比如抛异常可以说是中途离队</p>\\n<p>于是我们需要清楚的认识：<strong>门可以有多个，但是锁只有一把，一把锁一条队！要使用这把锁，上一个锁持有者没释放锁之前，你就去排队吧！</strong></p>\\n<h5 id=\\\"锁的升级和实现\\\">锁的升级和实现</h5>\\n<p>Java SE1.6 以后，锁一共有四个状态，从低到高一共是：无锁状态、偏向锁状态、轻量级锁状态和重量级锁状态</p>\\n<p>这几个状态会根据竞争的激烈情况逐渐升级，但是要注意：<u>锁可以升级但是不能降级</u></p>\\n<h6 id=\\\"偏向锁\\\">偏向锁</h6>\\n<p><strong>偏向锁的含义：</strong>如果总是同一线程某时段多次访问同步数据，则锁的意义不大。</p>\\n<p><strong>偏向锁的实现：</strong>当一个线程访问同步块并获取到锁的时候，会在对象头和栈帧中的锁记录里存储偏向锁的线程 ID，以后在没有争夺的时间段里，该线程获进入和退出同步块的时候不需要进行 CAS 操作来加锁和解锁</p>\\n<p><strong>偏向锁的撤销：</strong>偏向锁使用了一种<u>等到有竞争</u>的时候才解锁的机制</p>\\n<p>我将持有偏向锁的线程称为偏向线程，偏向锁的撤销机制指的是：当偏向线程执行过程中，有其他线程尝试竞争锁的时候，<u>偏向锁首先会暂停偏向线程，然后检查偏向线程是否存活，如果不存活，则对象头设置为无锁状态；如果存活，会执行偏向锁的栈，遍历偏向锁的竞争记录，最后偏向锁要么重新偏向于其他线程，要么恢复到无锁状态或者升级锁；这波操作做完之后，再唤醒原来的偏向线程</u></p>\\n<p>偏向锁要注意的事情：</p>\\n<ol>\\n<li>偏向锁机制的启动有延迟，一般是 Java 程序启动的几秒之后才启动这个机制，可以使用 JVM 参数来关闭延迟</li>\\n<li>还可以用 JVM 参数来关闭偏向锁，那么程序默认都会使用轻量级锁</li>\\n</ol>\\n<h6 id=\\\"轻量级锁\\\">轻量级锁</h6>\\n<p><strong>轻量级锁的含义：</strong>出现竞争的时候，线程并不阻塞，而是企图使用自旋的方式来继续尝试获取锁</p>\\n<p><strong>轻量级锁的加锁：</strong></p>\\n<ol>\\n<li>线程在执行同步块的之前，JVM 首先在<u>当前线程的栈帧</u>中创建用于存储锁记录的空间，并把对象头中的 Mark Word 复制到锁记录中，这部操作官方叫<strong>Displaced Mark Word</strong></li>\\n<li>然后线程要获取锁的时候，会尝试使用 CAS 将对象头中的 Mark Word 替换为指向锁记录的指针，如果成功，则获取到锁，如果失败，则表示有其他线程在使用锁或者先你一步竞争锁，则当前线程尝试使用<strong>自旋（用一个合理的永真循环来不停的试着获取锁）</strong>来获取锁</li>\\n</ol>\\n<p><strong>轻量级锁的解锁：</strong>解锁的时候，会使用 CAS 操作将<strong>Displaced Mark Word</strong>替换回对象头，如果成功，则表示没有发生竞争，如果失败，表示当前锁存在竞争，<u>锁就会膨胀成重量级锁</u></p>\\n<p>书里有一张图描述了膨胀的过程，我简单总结一下：两个线程 AB 分别访问同步块，同时尝试<u><strong>分配栈空间、复制 Mark Word 到栈</strong></u>，加入线程 A 比 B 快，则线程 A 成功<u><strong>使用 CAS 操作将 Mark Word 替换为轻量级锁，并执行同步块；</strong></u>此时线程 B<u><strong>尝试自旋获取锁，一段时间后未果，将锁修改为重量级锁，线程 B 阻塞；</strong></u>再回去看线程 A，线程 A 执行完同步语句块之后，<u><strong>尝试 CAS 替换会 Mark Word，但是已经被线程 B 修改了，所以失败，线程 A 释放锁并唤醒线程 B</strong></u>；线程 B 重新竞争同步语句块；</p>\\n<p>在线程 B<strong>自旋失败，打算膨胀的那一刻起，锁就已经升级了！</strong></p>\\n<h5 id=\\\"锁的优缺点对比\\\">锁的优缺点对比</h5>\\n<table>\\n<thead>\\n<tr>\\n<th align=\\\"center\\\">锁</th>\\n<th align=\\\"center\\\">优点</th>\\n<th align=\\\"center\\\">缺点</th>\\n<th align=\\\"center\\\">适用场景</th>\\n</tr>\\n</thead>\\n<tbody><tr>\\n<td align=\\\"center\\\">偏向锁</td>\\n<td align=\\\"center\\\">同线程的加锁解锁不需要消耗，和执行非同步方法相比速度相差纳秒级别</td>\\n<td align=\\\"center\\\">如果线程存在竞争，会带来额外的锁撤销的消耗</td>\\n<td align=\\\"center\\\">适用于只有一个线程访问同步块场景</td>\\n</tr>\\n<tr>\\n<td align=\\\"center\\\">轻量级锁</td>\\n<td align=\\\"center\\\">竞争线程不会阻塞，提高相应速度</td>\\n<td align=\\\"center\\\">如果始终得不到锁，会消耗大量的 CPU 资源</td>\\n<td align=\\\"center\\\">追求响应时间，同步块执行速度快</td>\\n</tr>\\n<tr>\\n<td align=\\\"center\\\">重量级锁</td>\\n<td align=\\\"center\\\">不用自旋，消耗少</td>\\n<td align=\\\"center\\\">线程阻塞，响应慢</td>\\n<td align=\\\"center\\\">追求吞吐量，同步块执行时间长</td>\\n</tr>\\n</tbody></table>\\n<h4 id=\\\"synchronized-关键字使用须知\\\">Synchronized 关键字使用须知</h4>\\n<p>上面说了很多原理性的东西，现在.....我们还是来说原理，现在主要是说一些该关键字的使用的注意事项</p>\\n<h5 id=\\\"1-脏读的情况\\\">1. 脏读的情况</h5>\\n<p>什么是脏读？脏读就是程序读到了不完整的数据，这是<strong>读取操作没有同步处理的原因</strong></p>\\n<p>什么又是不完整的数据？也就是在一次原子的更新过程中，程序在更新过程还没有完成的时候就读取了整个数据</p>\\n<p>比如我们的一个线程意图是将<strong>A（1，2，3）</strong>更新为<strong>A（4，5，6）</strong>的，虽然更新操作实现了同步，同一时刻只能保证一个程序对数据进行更新，但是读取操作没有进行同步，有可能有更新操作更新到一部分的时候<strong>A（4，5，3）</strong>，数据被错误地读取到了，这个脏读值是无效的</p>\\n<p>如何避免脏读？<strong>保证读取方法也被包含在同步块中或者方法本身就是同步方法，最重要的一点是，读取方法和更新方法所面向的监视器得的同一个监视器！不要排错队了！</strong></p>\\n<h5 id=\\\"2-锁重入\\\">2. 锁重入</h5>\\n<p>锁重入的概念挺简单：</p>\\n<pre><code class=\\\"hljs language-java\\\"><span class=\\\"hljs-keyword\\\">synchronized</span>(obj a){\\n    <span class=\\\"hljs-comment\\\">// some code before</span>\\n    <span class=\\\"hljs-keyword\\\">synchronized</span>(the same obj a){\\n        <span class=\\\"hljs-comment\\\">// another code in here</span>\\n    }\\n    <span class=\\\"hljs-comment\\\">// blablabla</span>\\n}\\n</code></pre>\\n<p>当然上面的代码是一个错误的示范，重入不是这么重入的，这样的重入没有意义，但实际上，有意义的锁重入从方法栈的角度来说，确实就是这样的，比如：</p>\\n<pre><code class=\\\"hljs language-java\\\"><span class=\\\"hljs-keyword\\\">synchronized</span> <span class=\\\"hljs-keyword\\\">public</span> <span class=\\\"hljs-keyword\\\">void</span> <span class=\\\"hljs-title function_\\\">a</span><span class=\\\"hljs-params\\\">()</span>{\\n    <span class=\\\"hljs-comment\\\">// a code</span>\\n    b();\\n}\\n\\n<span class=\\\"hljs-keyword\\\">synchronized</span> <span class=\\\"hljs-keyword\\\">public</span> <span class=\\\"hljs-keyword\\\">void</span> <span class=\\\"hljs-title function_\\\">b</span><span class=\\\"hljs-params\\\">()</span>{\\n    <span class=\\\"hljs-comment\\\">// b code</span>\\n    c();\\n}\\n\\n<span class=\\\"hljs-keyword\\\">synchronized</span> <span class=\\\"hljs-keyword\\\">public</span> <span class=\\\"hljs-keyword\\\">void</span> <span class=\\\"hljs-title function_\\\">c</span><span class=\\\"hljs-params\\\">()</span>{\\n    <span class=\\\"hljs-comment\\\">// c code</span>\\n}\\n</code></pre>\\n<p>为什么可以说这种锁重入是有意义的呢？我觉得也没什么意义，一旦某个线程拿到 a 方法的执行权之后，该对象下所有的同步方法，是无法被其他线程调用的，这里的意义只是，abc 三个方法需求的是同一个锁，也就是三个门用的是同一把钥匙，你既然已经拿到钥匙了，那么三个门你想怎么开就怎么开</p>\\n<h5 id=\\\"3-有异常-则放锁\\\">3. 有异常 则放锁</h5>\\n<p>基本的机制，贯彻整个同步知识，但是容易忽略掉</p>\\n<h5 id=\\\"4-代码块之间的同步性\\\">4. 代码块之间的同步性</h5>\\n<p>在使用同步块的情况下，如果有多个同步块持有的是同一个锁，在其中一个同步块被访问的时候，该锁就被该线程持有了，那么该锁的同步块无法被其他线程锁访问，说白了：<strong>钥匙只有一把！谁拿到钥匙，谁开锁进门！</strong></p>\\n<h5 id=\\\"5-对象的同步方法之间的同步性\\\">5. 对象的同步方法之间的同步性</h5>\\n<p>多个线程调用同一对象中不同的同步方法或者 synchronized(this)方法块的时候，多线程的调用效果是同步的，因为：<strong>拿的是一把锁，排的是一条队！</strong></p>\\n<h5 id=\\\"6-class-锁\\\">6. Class 锁</h5>\\n<p>Class 锁可以对改类的所有对象实例起同步作用，基于上述反复强调的原理，<u>同步 synchronized（class）代码块的作用和 synchronized static 方法的作用是一样的</u></p>\\n<h5 id=\\\"7-常量池对象作为锁的注意事项\\\">7. 常量池对象作为锁的注意事项</h5>\\n<p>String 因为有常量池去管理，所以有可能两个变量引用的是同一个 String 常量对象，尽量不要使用 String 直接量作为锁，宁可 new 一个作为锁</p>\\n<h4 id=\\\"volatile-和-synchronized-的对比\\\">Volatile 和 Synchronized 的对比</h4>\\n<table>\\n<thead>\\n<tr>\\n<th align=\\\"center\\\">关键字</th>\\n<th align=\\\"center\\\">性能</th>\\n<th align=\\\"center\\\">响应</th>\\n<th align=\\\"center\\\">安全性</th>\\n<th align=\\\"center\\\">场景</th>\\n</tr>\\n</thead>\\n<tbody><tr>\\n<td align=\\\"center\\\">volatile</td>\\n<td align=\\\"center\\\">快</td>\\n<td align=\\\"center\\\">不会阻塞</td>\\n<td align=\\\"center\\\">只能保证数据可见性，不能保证原子性</td>\\n<td align=\\\"center\\\">解决变量在多个线程之间的可见性</td>\\n</tr>\\n<tr>\\n<td align=\\\"center\\\">synchronized</td>\\n<td align=\\\"center\\\">虽然没 volatile 快，但是速度还是可以接受的</td>\\n<td align=\\\"center\\\">会阻塞</td>\\n<td align=\\\"center\\\">可以保证操作的原子性，<strong>也可以间接保证数据可见性</strong></td>\\n<td align=\\\"center\\\">解决多个线程之间访问资源的同步性</td>\\n</tr>\\n</tbody></table>\\n<p>然而对于 synchronizrd<strong>可以间接保证数据可见性</strong>，暂时需要找个合适的方法去验证</p>\\n<h3 id=\\\"-关于-synchronized-间接保证数据同步性的问题\\\">* 关于 synchronized 间接保证数据同步性的问题</h3>\\n<p>首先我们准备一个类作为验证区：</p>\\n<pre><code class=\\\"hljs language-java\\\"><span class=\\\"hljs-keyword\\\">class</span> <span class=\\\"hljs-title class_\\\">BService</span> {\\n    <span class=\\\"hljs-keyword\\\">private</span> <span class=\\\"hljs-type\\\">boolean</span> <span class=\\\"hljs-variable\\\">continueRun</span> <span class=\\\"hljs-operator\\\">=</span> <span class=\\\"hljs-literal\\\">true</span>;\\n    <span class=\\\"hljs-keyword\\\">public</span> <span class=\\\"hljs-keyword\\\">void</span> <span class=\\\"hljs-title function_\\\">runMethod</span><span class=\\\"hljs-params\\\">()</span> {\\n        <span class=\\\"hljs-keyword\\\">while</span>(continueRun == <span class=\\\"hljs-literal\\\">true</span>) {\\n            <span class=\\\"hljs-keyword\\\">try</span> {Thread.sleep(<span class=\\\"hljs-number\\\">10</span>);\\n            } <span class=\\\"hljs-keyword\\\">catch</span> (InterruptedException e) {e.printStackTrace();}\\n        }\\n        System.out.println(<span class=\\\"hljs-string\\\">&quot;停下来了！&quot;</span>);\\n    }\\n    <span class=\\\"hljs-keyword\\\">public</span> <span class=\\\"hljs-keyword\\\">void</span> <span class=\\\"hljs-title function_\\\">stop</span><span class=\\\"hljs-params\\\">()</span> {continueRun = <span class=\\\"hljs-literal\\\">false</span>;}\\n}\\n</code></pre>\\n<p>可以看到，该类有一个 run，一旦执行方法，只有等到<code>continueRun</code>被置否的时候，也就是说对象调用 stop 的时候，才会停下来，而我们在 run 方法里面，尝试睡眠 10ms</p>\\n<p>然后我们把这个类对象放到多线程场景当中去：</p>\\n<pre><code class=\\\"hljs language-java\\\"><span class=\\\"hljs-keyword\\\">class</span> <span class=\\\"hljs-title class_\\\">ThreadA</span> <span class=\\\"hljs-keyword\\\">extends</span> <span class=\\\"hljs-title class_\\\">Thread</span> {\\n    <span class=\\\"hljs-keyword\\\">private</span> BService service;\\n    <span class=\\\"hljs-keyword\\\">public</span> <span class=\\\"hljs-title function_\\\">ThreadA</span><span class=\\\"hljs-params\\\">(BService service)</span> {<span class=\\\"hljs-built_in\\\">this</span>.service = service;}\\n    <span class=\\\"hljs-meta\\\">@Override</span>\\n    <span class=\\\"hljs-keyword\\\">public</span> <span class=\\\"hljs-keyword\\\">void</span> <span class=\\\"hljs-title function_\\\">run</span><span class=\\\"hljs-params\\\">()</span> {service.runMethod();}\\n}\\n\\n<span class=\\\"hljs-keyword\\\">class</span> <span class=\\\"hljs-title class_\\\">ThreadB</span> <span class=\\\"hljs-keyword\\\">extends</span> <span class=\\\"hljs-title class_\\\">Thread</span> {\\n    <span class=\\\"hljs-keyword\\\">private</span> BService service;\\n    <span class=\\\"hljs-keyword\\\">public</span> <span class=\\\"hljs-title function_\\\">ThreadB</span><span class=\\\"hljs-params\\\">(BService service)</span> {<span class=\\\"hljs-built_in\\\">this</span>.service = service;}\\n    <span class=\\\"hljs-meta\\\">@Override</span>\\n    <span class=\\\"hljs-keyword\\\">public</span> <span class=\\\"hljs-keyword\\\">void</span> <span class=\\\"hljs-title function_\\\">run</span><span class=\\\"hljs-params\\\">()</span> {service.stop();}\\n}\\n</code></pre>\\n<p>线程 A 负责跑，线程 B 负责停，然后是我们的 main 方法：</p>\\n<pre><code class=\\\"hljs language-java\\\">    <span class=\\\"hljs-keyword\\\">public</span> <span class=\\\"hljs-keyword\\\">static</span> <span class=\\\"hljs-keyword\\\">void</span> <span class=\\\"hljs-title function_\\\">main</span><span class=\\\"hljs-params\\\">(String[] args)</span> <span class=\\\"hljs-keyword\\\">throws</span> InterruptedException {\\n        <span class=\\\"hljs-type\\\">BService</span> <span class=\\\"hljs-variable\\\">service</span> <span class=\\\"hljs-operator\\\">=</span> <span class=\\\"hljs-keyword\\\">new</span> <span class=\\\"hljs-title class_\\\">BService</span>();\\n        <span class=\\\"hljs-type\\\">ThreadA</span> <span class=\\\"hljs-variable\\\">a</span> <span class=\\\"hljs-operator\\\">=</span> <span class=\\\"hljs-keyword\\\">new</span> <span class=\\\"hljs-title class_\\\">ThreadA</span>(service);\\n        a.start();\\n        Thread.sleep(<span class=\\\"hljs-number\\\">1000</span>);\\n        <span class=\\\"hljs-type\\\">ThreadB</span> <span class=\\\"hljs-variable\\\">b</span> <span class=\\\"hljs-operator\\\">=</span> <span class=\\\"hljs-keyword\\\">new</span> <span class=\\\"hljs-title class_\\\">ThreadB</span>(service);\\n        b.start();\\n        System.out.println(<span class=\\\"hljs-string\\\">&quot;已经发起停止命令了！&quot;</span>);\\n    }\\n</code></pre>\\n<p>需要注意的是，这里 AB 线程虽然用的是同一个对象，但是因为线程私有栈的原因，每个线程虽然用的是同一个对象去调用方法，但是对象中的值在各自线程中有自己的副本，所以 B 线程置否了<code>continueRun</code>变量，但是线程 A 并不知道这个情况，除非<strong>B 置否的变量被同步到共享内存，而线程 A 放弃自己的副本值，采用共享内存的值</strong></p>\\n<h4 id=\\\"空闲-cpu-同步内存？\\\">空闲 CPU 同步内存？</h4>\\n<p>上面加粗的内容就是<strong>内存可见性</strong>的保证，在当前试验区类中，并没有做明显的保证线程安全的举措，但是当你运行程序你会发现，B 线程是可以停止 A 线程的，这是为什么？我在一篇博客中看到了一个有意思的想法：</p>\\n<blockquote>\\n<p>实际上，JVM 对于现代的机器做了最大程度的优化，也就是说，最大程度的保障了线程和主存之间的及时的同步，也就是相当于虚拟机尽可能的帮我们加了个 volatile，但是，当 CPU 被一直占用的时候，同步就会出现不及时，也就出现了后台线程一直不结束的情况。</p>\\n<p><em>参考：<a href=\\\"https://www.cnblogs.com/cookiezhi/p/5774583.html\\\">https://www.cnblogs.com/cookiezhi/p/5774583.html</a></em></p>\\n</blockquote>\\n<p>所以，当我们的线程在沉睡了 10ms 的时候，CPU 就有空闲时间去进行内存同步了，于是就有了线程 A 看见了线程 B 置否了变量</p>\\n<h4 id=\\\"无意义的-synchronized-块保证同步内存？\\\">无意义的 synchronized 块保证同步内存？</h4>\\n<p>来看看为什么我不认同<em>《技术》</em>一书上说的<strong>“syn 块具有同步功能”</strong>，首先上他所说的，没有内存可见的主体代码：</p>\\n<pre><code class=\\\"hljs language-java\\\"><span class=\\\"hljs-keyword\\\">public</span> <span class=\\\"hljs-keyword\\\">class</span> <span class=\\\"hljs-title class_\\\">BThreadTest</span> {\\n    <span class=\\\"hljs-keyword\\\">public</span> <span class=\\\"hljs-keyword\\\">static</span> <span class=\\\"hljs-keyword\\\">void</span> <span class=\\\"hljs-title function_\\\">main</span><span class=\\\"hljs-params\\\">(String[] args)</span> <span class=\\\"hljs-keyword\\\">throws</span> InterruptedException {\\n        <span class=\\\"hljs-type\\\">BService</span> <span class=\\\"hljs-variable\\\">service</span> <span class=\\\"hljs-operator\\\">=</span> <span class=\\\"hljs-keyword\\\">new</span> <span class=\\\"hljs-title class_\\\">BService</span>();\\n        <span class=\\\"hljs-type\\\">ThreadA</span> <span class=\\\"hljs-variable\\\">a</span> <span class=\\\"hljs-operator\\\">=</span> <span class=\\\"hljs-keyword\\\">new</span> <span class=\\\"hljs-title class_\\\">ThreadA</span>(service);\\n        a.start();\\n        Thread.sleep(<span class=\\\"hljs-number\\\">1000</span>);\\n        <span class=\\\"hljs-type\\\">ThreadB</span> <span class=\\\"hljs-variable\\\">b</span> <span class=\\\"hljs-operator\\\">=</span> <span class=\\\"hljs-keyword\\\">new</span> <span class=\\\"hljs-title class_\\\">ThreadB</span>(service);\\n        b.start();\\n    }\\n}\\n\\n<span class=\\\"hljs-keyword\\\">class</span> <span class=\\\"hljs-title class_\\\">BService</span> {\\n    <span class=\\\"hljs-keyword\\\">private</span> <span class=\\\"hljs-type\\\">boolean</span> <span class=\\\"hljs-variable\\\">continueRun</span> <span class=\\\"hljs-operator\\\">=</span> <span class=\\\"hljs-literal\\\">true</span>;\\n    <span class=\\\"hljs-keyword\\\">public</span> <span class=\\\"hljs-keyword\\\">void</span> <span class=\\\"hljs-title function_\\\">runMethod</span><span class=\\\"hljs-params\\\">()</span> {\\n        <span class=\\\"hljs-keyword\\\">while</span>(continueRun) {}\\n        System.out.println(<span class=\\\"hljs-string\\\">&quot;停下来了！&quot;</span>);\\n    }\\n    <span class=\\\"hljs-keyword\\\">public</span> <span class=\\\"hljs-keyword\\\">void</span> <span class=\\\"hljs-title function_\\\">stop</span><span class=\\\"hljs-params\\\">()</span> {continueRun = <span class=\\\"hljs-literal\\\">false</span>;}\\n}\\n\\n<span class=\\\"hljs-keyword\\\">class</span> <span class=\\\"hljs-title class_\\\">ThreadA</span> <span class=\\\"hljs-keyword\\\">extends</span> <span class=\\\"hljs-title class_\\\">Thread</span> {\\n    <span class=\\\"hljs-keyword\\\">private</span> BService service;\\n    <span class=\\\"hljs-keyword\\\">public</span> <span class=\\\"hljs-title function_\\\">ThreadA</span><span class=\\\"hljs-params\\\">(BService service)</span> {<span class=\\\"hljs-built_in\\\">this</span>.service = service;}\\n    <span class=\\\"hljs-meta\\\">@Override</span>\\n    <span class=\\\"hljs-keyword\\\">public</span> <span class=\\\"hljs-keyword\\\">void</span> <span class=\\\"hljs-title function_\\\">run</span><span class=\\\"hljs-params\\\">()</span> {service.runMethod();}\\n}\\n\\n<span class=\\\"hljs-keyword\\\">class</span> <span class=\\\"hljs-title class_\\\">ThreadB</span> <span class=\\\"hljs-keyword\\\">extends</span> <span class=\\\"hljs-title class_\\\">Thread</span> {\\n    <span class=\\\"hljs-keyword\\\">private</span> BService service;\\n    <span class=\\\"hljs-keyword\\\">public</span> <span class=\\\"hljs-title function_\\\">ThreadB</span><span class=\\\"hljs-params\\\">(BService service)</span> {<span class=\\\"hljs-built_in\\\">this</span>.service = service}\\n    <span class=\\\"hljs-meta\\\">@Override</span>\\n    <span class=\\\"hljs-keyword\\\">public</span> <span class=\\\"hljs-keyword\\\">void</span> <span class=\\\"hljs-title function_\\\">run</span><span class=\\\"hljs-params\\\">()</span> {service.stop();}\\n}\\n</code></pre>\\n<p>四个类大致和上面的例子差不多，这样的代码运行起来永远也不会停止，</p>\\n<p>而书上说，只需要将<code>runMethod</code>方法改为：</p>\\n<pre><code class=\\\"hljs language-java\\\">    <span class=\\\"hljs-keyword\\\">public</span> <span class=\\\"hljs-keyword\\\">void</span> <span class=\\\"hljs-title function_\\\">runMethod</span><span class=\\\"hljs-params\\\">()</span> {\\n        <span class=\\\"hljs-type\\\">String</span> <span class=\\\"hljs-variable\\\">anyString</span> <span class=\\\"hljs-operator\\\">=</span> <span class=\\\"hljs-keyword\\\">new</span> <span class=\\\"hljs-title class_\\\">String</span>();\\n        <span class=\\\"hljs-keyword\\\">while</span>(continueRun) {\\n            <span class=\\\"hljs-keyword\\\">synchronized</span>(anyString) {}\\n        }\\n        System.out.println(<span class=\\\"hljs-string\\\">&quot;停下来了！&quot;</span>);\\n    }\\n</code></pre>\\n<p>确实，这样做是可以停下来，但是书上的解释是：</p>\\n<blockquote>\\n<p>关键字 synchronized 可以保证在同一时刻，只有一个线程可以执行某一个方法或者某一个代码块。</p>\\n<p>它包含两个特征：互斥性和可见性。</p>\\n<p>同步 synchronized 不仅可以解决一个线程看到对象处于不一致的状态，还可以保证进入同步方法或者同步代码块的每个线程，都看到由同一个锁保护之前所有的修改效果。</p>\\n</blockquote>\\n<p>这句话，歧义扉多，而且和演示程序完全搭不上边，线程 A 的锁完全没有任何同步意义，线程 B 也完全不会和线程 A 进入同一个锁，甚至线程 B 根本就不会进入任何一个锁，在这样的意义下，无法验证 synchronized 影响到了两个线程的<code>continueRun</code>变量的同步</p>\\n<p>但事实上这个程序确实是可以停止的，至于为什么，我的猜测是：<strong>同步代码块虽然没有意义，但是它有一定的时长消耗性，在这样的情况下 CPU 出现了空闲，于是由上一个例子的结论可知，CPU 在空闲的时候对两个线程的本地变量进行了同步！！</strong></p>\\n<p>后面这节多是我自己的推断。</p>\\n\";","export default \"<h3 id=\\\"31-next-permutationmedium\\\">31. Next Permutation(Medium)</h3>\\n<p>Implement <strong>next permutation</strong>, which rearranges numbers into the lexicographically next greater permutation of numbers.</p>\\n<p>If such arrangement is not possible, it must rearrange it as the lowest possible order (ie, sorted in ascending order).</p>\\n<p>The replacement must be <strong>in-place</strong> and use only constant extra memory.</p>\\n<p>Here are some examples. Inputs are in the left-hand column and its corresponding outputs are in the right-hand column.</p>\\n<pre><code>1,2,3` → `1,3,2`\\n`3,2,1` → `1,2,3`\\n`1,1,5` → `1,5,1\\n</code></pre>\\n<h4 id=\\\"from-back7ms\\\">From Back(7ms)</h4>\\n<p>不难，找规律找出来就好了，首先弄清楚字典顺序是怎么回事，比如序列1 2 3 4，往后的序列是</p>\\n<pre><code>1 2 3 4  ┌→ 2 1 3 4  ┌→ 3 1 2 4  ┌→ 4 1 2 3\\n1 2 4 3  |  2 1 4 3  |  3 1 4 2  |  4 1 3 2\\n1 3 2 4  |  2 3 1 4  |  3 2 1 4  |  4 2 1 3\\n1 3 4 2  |  2 3 4 1  |  3 2 4 1  |  4 2 3 1\\n1 4 2 3  |  2 4 1 3  |  3 4 1 2  |  4 3 1 2\\n1 4 3 2 -┘  2 4 3 1 -┘  3 4 2 1 -┘  4 3 2 1\\n</code></pre>\\n<p>多看几组我们可以发现，如果我们从后往前找到<strong>顺序</strong>的一对，比如4 1 3 2中，1和3是顺序的，那么如果将1和<strong>它的下一个自然数交换位置</strong>，然后<strong>将该位置往后的序列自然排序</strong>，就可以得到下一组自然序列，比如1在当前序列中的下一个自然数是2，于是交换得到4 2 3 1，然后再对2后面的序列进行排序，如此得到4 2 1 3</p>\\n<p>于是代码为：</p>\\n<pre><code class=\\\"hljs language-java\\\"><span class=\\\"hljs-keyword\\\">public</span> <span class=\\\"hljs-keyword\\\">void</span> <span class=\\\"hljs-title function_\\\">nextPermutation</span><span class=\\\"hljs-params\\\">(<span class=\\\"hljs-type\\\">int</span>[] nums)</span> {\\n    <span class=\\\"hljs-keyword\\\">for</span> (<span class=\\\"hljs-type\\\">int</span> <span class=\\\"hljs-variable\\\">i</span> <span class=\\\"hljs-operator\\\">=</span> nums.length - <span class=\\\"hljs-number\\\">1</span>; i &gt;= <span class=\\\"hljs-number\\\">0</span>; i--) {\\n        <span class=\\\"hljs-type\\\">int</span> <span class=\\\"hljs-variable\\\">b</span> <span class=\\\"hljs-operator\\\">=</span> nums[i];\\n        <span class=\\\"hljs-keyword\\\">if</span> (i == <span class=\\\"hljs-number\\\">0</span>) {\\n            Arrays.sort(nums, i, nums.length);\\n            <span class=\\\"hljs-keyword\\\">break</span>;\\n        }\\n        <span class=\\\"hljs-type\\\">int</span> <span class=\\\"hljs-variable\\\">a</span> <span class=\\\"hljs-operator\\\">=</span> nums[i - <span class=\\\"hljs-number\\\">1</span>];\\n        <span class=\\\"hljs-keyword\\\">if</span> (a &lt; b) {\\n            <span class=\\\"hljs-type\\\">int</span> <span class=\\\"hljs-variable\\\">theBiggerOneIndex</span> <span class=\\\"hljs-operator\\\">=</span> findTheBiggerOne(nums, i - <span class=\\\"hljs-number\\\">1</span>, nums.length - <span class=\\\"hljs-number\\\">1</span>, a);\\n            swap(nums, i - <span class=\\\"hljs-number\\\">1</span>, theBiggerOneIndex);\\n            Arrays.sort(nums, i, nums.length);\\n            <span class=\\\"hljs-keyword\\\">break</span>;\\n        }\\n    }\\n}\\n\\n<span class=\\\"hljs-keyword\\\">private</span> <span class=\\\"hljs-keyword\\\">void</span> <span class=\\\"hljs-title function_\\\">swap</span><span class=\\\"hljs-params\\\">(<span class=\\\"hljs-type\\\">int</span>[] nums, <span class=\\\"hljs-type\\\">int</span> a, <span class=\\\"hljs-type\\\">int</span> b)</span> {\\n    <span class=\\\"hljs-type\\\">int</span> <span class=\\\"hljs-variable\\\">tmp</span> <span class=\\\"hljs-operator\\\">=</span> nums[a];\\n    nums[a] = nums[b];\\n    nums[b] = tmp;\\n}\\n\\n<span class=\\\"hljs-keyword\\\">private</span> <span class=\\\"hljs-type\\\">int</span> <span class=\\\"hljs-title function_\\\">findTheBiggerOne</span><span class=\\\"hljs-params\\\">(<span class=\\\"hljs-type\\\">int</span>[] nums, <span class=\\\"hljs-type\\\">int</span> start, <span class=\\\"hljs-type\\\">int</span> end, <span class=\\\"hljs-type\\\">int</span> target)</span> {\\n    <span class=\\\"hljs-keyword\\\">for</span> (<span class=\\\"hljs-type\\\">int</span> <span class=\\\"hljs-variable\\\">i</span> <span class=\\\"hljs-operator\\\">=</span> end; i &gt;= start; i--) {\\n        <span class=\\\"hljs-keyword\\\">if</span> (nums[i] &gt; target) {\\n            <span class=\\\"hljs-keyword\\\">return</span> i;\\n        }\\n    }\\n    <span class=\\\"hljs-keyword\\\">return</span> start;\\n}\\n</code></pre>\\n<h3 id=\\\"32-longest-valid-parentheseshard\\\">32. Longest Valid Parentheses(Hard)</h3>\\n<p>Given a string containing just the characters <code>&#39;(&#39;</code> and <code>&#39;)&#39;</code>, find the length of the longest valid (well-formed) parentheses substring.</p>\\n<p><strong>Example 1:</strong></p>\\n<pre><code>Input: &quot;(()&quot;\\nOutput: 2\\nExplanation: The longest valid parentheses substring is &quot;()&quot;\\n</code></pre>\\n<p><strong>Example 2:</strong></p>\\n<pre><code>Input: &quot;)()())&quot;\\nOutput: 4\\nExplanation: The longest valid parentheses substring is &quot;()()&quot;\\n</code></pre>\\n<p>这题，本来还想用找<strong>Q5最长回文数</strong>的套路去做的，不行，而且这题有更简单的方法</p>\\n<h4 id=\\\"dp\\\">DP</h4>\\n<p>想不到吧？这题居然可以dp，牛皮吧？根据官方给的solution，我优化了代码，以一种更简单的方式去用dp解这道题，我们先看几个例子：</p>\\n<pre><code class=\\\"hljs language-java\\\"><span class=\\\"hljs-number\\\">1.</span>假如我们有：\\n                ( ) ( )\\n    -------------------\\n                <span class=\\\"hljs-number\\\">0</span> <span class=\\\"hljs-number\\\">2</span> <span class=\\\"hljs-number\\\">0</span> <span class=\\\"hljs-number\\\">4</span>\\n    -------------------\\nmatch:            <span class=\\\"hljs-number\\\">2</span>   <span class=\\\"hljs-number\\\">2</span>\\n                  +   +\\nbefore match:     ?   <span class=\\\"hljs-number\\\">2</span>\\n    \\n对于最后一个<span class=\\\"hljs-number\\\">4</span>，我们可以做这样的解释：\\n<span class=\\\"hljs-number\\\">1</span>）因为它和前一个字符match了，所以算<span class=\\\"hljs-number\\\">2</span>个长度；\\n<span class=\\\"hljs-number\\\">2</span>）因为在这<span class=\\\"hljs-number\\\">2</span>个长度之前，紧前面也有一个长度为<span class=\\\"hljs-number\\\">2</span>的合法子串，所以这两紧挨着的串长度可以加在一起；\\n\\n<span class=\\\"hljs-number\\\">2.</span>为了方便处理before match，我们在每个处理串前加上一个+号，于是：\\n               + ( ) ( )\\n    --------------------\\n               <span class=\\\"hljs-number\\\">0</span> <span class=\\\"hljs-number\\\">0</span> <span class=\\\"hljs-number\\\">2</span> <span class=\\\"hljs-number\\\">0</span> <span class=\\\"hljs-number\\\">4</span>\\n    --------------------\\nmatch:             <span class=\\\"hljs-number\\\">2</span>   <span class=\\\"hljs-number\\\">2</span>\\n                   +   +\\nbefore match:      <span class=\\\"hljs-number\\\">0</span>   <span class=\\\"hljs-number\\\">2</span>\\n    \\n<span class=\\\"hljs-number\\\">3.</span>再看另外一个例子：\\n              + ( ( ) ) ( ( ) )\\n    ---------------------------\\n              <span class=\\\"hljs-number\\\">0</span> <span class=\\\"hljs-number\\\">0</span> <span class=\\\"hljs-number\\\">0</span> <span class=\\\"hljs-number\\\">2</span> <span class=\\\"hljs-number\\\">4</span> <span class=\\\"hljs-number\\\">0</span> <span class=\\\"hljs-number\\\">0</span> <span class=\\\"hljs-number\\\">2</span> <span class=\\\"hljs-number\\\">8</span>\\n    ---------------------------\\nmatch:              <span class=\\\"hljs-number\\\">2</span> <span class=\\\"hljs-number\\\">2</span>     <span class=\\\"hljs-number\\\">2</span> <span class=\\\"hljs-number\\\">2</span>\\n                    + +     + +\\ninside:             <span class=\\\"hljs-number\\\">0</span> <span class=\\\"hljs-number\\\">2</span>     <span class=\\\"hljs-number\\\">0</span> <span class=\\\"hljs-number\\\">2</span>\\n                    + +     + +\\nbefore match:       <span class=\\\"hljs-number\\\">0</span> <span class=\\\"hljs-number\\\">0</span>     <span class=\\\"hljs-number\\\">0</span> <span class=\\\"hljs-number\\\">4</span>\\n    \\n对于第一个<span class=\\\"hljs-number\\\">4</span>：\\n它前面一个符号是闭口，且这个闭口符号有效值为<span class=\\\"hljs-number\\\">2</span>，于是当前闭口要考虑的有效开口，\\n应该往前数<span class=\\\"hljs-number\\\">2</span>+<span class=\\\"hljs-number\\\">1</span>位，也就是下标为<span class=\\\"hljs-number\\\">1</span>的位置，如果这个位置是开口，那么证明match，\\n且before match的有效值为<span class=\\\"hljs-number\\\">0</span>，于是它的有效值就是<span class=\\\"hljs-number\\\">2</span>+<span class=\\\"hljs-number\\\">2</span>+<span class=\\\"hljs-number\\\">0</span>\\n\\n同理<span class=\\\"hljs-number\\\">8</span>：\\n它前面一个符号是闭口，且这个闭口符号有效值是<span class=\\\"hljs-number\\\">2</span>，于是当前闭口要考虑的有效开口，\\n应该往前数<span class=\\\"hljs-number\\\">2</span>+<span class=\\\"hljs-number\\\">1</span>位，也就是下标为<span class=\\\"hljs-number\\\">5</span>的位置，如果这个位置是开口，那么证明match，\\n且before match的有效值为<span class=\\\"hljs-number\\\">4</span>，于是它的有效值就是<span class=\\\"hljs-number\\\">2</span>+<span class=\\\"hljs-number\\\">2</span>+<span class=\\\"hljs-number\\\">4</span>\\n</code></pre>\\n<p>于是我们可以看出规律：</p>\\n<ul>\\n<li>开口有效值都是0</li>\\n<li>闭口：<ul>\\n<li>如果前一位是开口，那么直接match到2个长度，然后再连上这对开闭口<strong>紧前的符号</strong>的有效值；</li>\\n<li>如果前以为是闭口，那么说明有可能是大包小的情况，所以<strong>以前一位闭口的有效值为参考</strong>，在这个有效值<strong>再前一位（这里记为far match）</strong>与当前闭口做match：<ul>\\n<li>如果不match，那么当前闭口有效值为0；</li>\\n<li>否则match值2加上前一位闭口有效值再加上<strong>far match的紧前的符号</strong>的有效值，就是当前闭口的有效值；</li>\\n</ul>\\n</li>\\n</ul>\\n</li>\\n</ul>\\n<p>于是代码：</p>\\n<pre><code class=\\\"hljs language-java\\\"><span class=\\\"hljs-keyword\\\">public</span> <span class=\\\"hljs-type\\\">int</span> <span class=\\\"hljs-title function_\\\">longestValidParentheses</span><span class=\\\"hljs-params\\\">(String s)</span> {\\n    <span class=\\\"hljs-type\\\">int</span> <span class=\\\"hljs-variable\\\">maxMatch</span> <span class=\\\"hljs-operator\\\">=</span> <span class=\\\"hljs-number\\\">0</span>;\\n    s = <span class=\\\"hljs-string\\\">&quot;+&quot;</span> + s;\\n    <span class=\\\"hljs-type\\\">int</span>[] dp = <span class=\\\"hljs-keyword\\\">new</span> <span class=\\\"hljs-title class_\\\">int</span>[s.length()];\\n    <span class=\\\"hljs-type\\\">char</span>[] chars = s.toCharArray();\\n    <span class=\\\"hljs-keyword\\\">for</span> (<span class=\\\"hljs-type\\\">int</span> <span class=\\\"hljs-variable\\\">i</span> <span class=\\\"hljs-operator\\\">=</span> <span class=\\\"hljs-number\\\">2</span>; i &lt; chars.length; i++) {\\n        <span class=\\\"hljs-type\\\">char</span> <span class=\\\"hljs-variable\\\">now</span> <span class=\\\"hljs-operator\\\">=</span> chars[i];\\n        <span class=\\\"hljs-keyword\\\">if</span> (now == <span class=\\\"hljs-string\\\">&#x27;)&#x27;</span>) {\\n            <span class=\\\"hljs-type\\\">char</span> <span class=\\\"hljs-variable\\\">pre</span> <span class=\\\"hljs-operator\\\">=</span> chars[i - <span class=\\\"hljs-number\\\">1</span>];\\n            <span class=\\\"hljs-keyword\\\">if</span> (pre == <span class=\\\"hljs-string\\\">&#x27;(&#x27;</span>) {\\n                dp[i] = <span class=\\\"hljs-number\\\">2</span> + dp[i - <span class=\\\"hljs-number\\\">2</span>];\\n            } <span class=\\\"hljs-keyword\\\">else</span> <span class=\\\"hljs-keyword\\\">if</span> (chars[i - dp[i - <span class=\\\"hljs-number\\\">1</span>] - <span class=\\\"hljs-number\\\">1</span>] == <span class=\\\"hljs-string\\\">&#x27;(&#x27;</span>){\\n                dp[i] = <span class=\\\"hljs-number\\\">2</span> + dp[i - <span class=\\\"hljs-number\\\">1</span>] + dp[i - dp[i - <span class=\\\"hljs-number\\\">1</span>] - <span class=\\\"hljs-number\\\">2</span>];\\n            }\\n        }\\n        maxMatch = Math.max(dp[i], maxMatch);\\n    }\\n    <span class=\\\"hljs-keyword\\\">return</span> maxMatch;\\n}\\n</code></pre>\\n<h3 id=\\\"33-search-in-rotated-sorted-array-medium\\\">33. Search in Rotated sorted Array (Medium)</h3>\\n<p>Suppose an array sorted in ascending order is rotated at some pivot unknown to you beforehand.</p>\\n<p>(i.e., <code>[0,1,2,4,5,6,7]</code> might become <code>[4,5,6,7,0,1,2]</code>).</p>\\n<p>You are given a target value to search. If found in the array return its index, otherwise return <code>-1</code>.</p>\\n<p>You may assume no duplicate exists in the array.</p>\\n<p>Your algorithm&#39;s runtime complexity must be in the order of <em>O</em>(log <em>n</em>).</p>\\n<p><strong>Example 1:</strong></p>\\n<pre><code>Input: nums = [4,5,6,7,0,1,2], target = 0\\nOutput: 4\\n</code></pre>\\n<p><strong>Example 2:</strong></p>\\n<pre><code>Input: nums = [4,5,6,7,0,1,2], target = 3\\nOutput: -1\\n</code></pre>\\n<h4 id=\\\"find-the-rotate-pivot-with-binary--ologn\\\">Find The Rotate Pivot With Binary- O(logn)</h4>\\n<p>这题唯一的技巧就是，如何找到被轴转过的有序数组的轴，找到轴就能对轴两边进行二分法了</p>\\n<h5 id=\\\"find-pivot\\\">Find Pivot</h5>\\n<p>精髓，真的很直白的技巧，这也可以作为<strong>“找到被轴转过的有序数组的轴”</strong>的题解</p>\\n<pre><code class=\\\"hljs language-java\\\"><span class=\\\"hljs-keyword\\\">private</span> <span class=\\\"hljs-type\\\">int</span> <span class=\\\"hljs-title function_\\\">findPivot</span><span class=\\\"hljs-params\\\">(<span class=\\\"hljs-type\\\">int</span>[] nums)</span> {\\n    <span class=\\\"hljs-type\\\">int</span> <span class=\\\"hljs-variable\\\">low</span> <span class=\\\"hljs-operator\\\">=</span> <span class=\\\"hljs-number\\\">0</span>, high = nums.length - <span class=\\\"hljs-number\\\">1</span>, mid;\\n    <span class=\\\"hljs-keyword\\\">while</span> (low &lt; high) {\\n        mid = (high + low) / <span class=\\\"hljs-number\\\">2</span>;\\n        <span class=\\\"hljs-keyword\\\">if</span> (nums[mid] &gt; nums[high]) {\\n            low = mid + <span class=\\\"hljs-number\\\">1</span>;\\n        } <span class=\\\"hljs-keyword\\\">else</span> {\\n            high = mid;\\n        }\\n    }\\n    <span class=\\\"hljs-keyword\\\">return</span> low;\\n}\\n</code></pre>\\n<h5 id=\\\"with-pivot\\\">With Pivot</h5>\\n<pre><code class=\\\"hljs language-java\\\"><span class=\\\"hljs-keyword\\\">public</span> <span class=\\\"hljs-type\\\">int</span> <span class=\\\"hljs-title function_\\\">search</span><span class=\\\"hljs-params\\\">(<span class=\\\"hljs-type\\\">int</span>[] nums, <span class=\\\"hljs-type\\\">int</span> target)</span> {\\n    <span class=\\\"hljs-keyword\\\">if</span> (nums.length == <span class=\\\"hljs-number\\\">0</span>) {\\n        <span class=\\\"hljs-keyword\\\">return</span> -<span class=\\\"hljs-number\\\">1</span>;\\n    }\\n    <span class=\\\"hljs-type\\\">int</span> rs;\\n    <span class=\\\"hljs-keyword\\\">if</span> (nums[<span class=\\\"hljs-number\\\">0</span>] &lt;= nums[nums.length - <span class=\\\"hljs-number\\\">1</span>]) {\\n        rs = Arrays.binarySearch(nums, target);\\n        <span class=\\\"hljs-keyword\\\">return</span> rs &lt; <span class=\\\"hljs-number\\\">0</span> ? -<span class=\\\"hljs-number\\\">1</span> : rs;\\n    }\\n    <span class=\\\"hljs-type\\\">int</span> <span class=\\\"hljs-variable\\\">pivot</span> <span class=\\\"hljs-operator\\\">=</span> findPivot(nums);\\n\\n    <span class=\\\"hljs-keyword\\\">if</span> (nums[pivot] &lt;= target && nums[nums.length - <span class=\\\"hljs-number\\\">1</span>] &gt;= target) {\\n        rs = Arrays.binarySearch(nums, pivot, nums.length, target);\\n    } <span class=\\\"hljs-keyword\\\">else</span> {\\n        rs = Arrays.binarySearch(nums, <span class=\\\"hljs-number\\\">0</span>, pivot, target);\\n    }\\n    <span class=\\\"hljs-keyword\\\">return</span> rs &lt; <span class=\\\"hljs-number\\\">0</span> ? -<span class=\\\"hljs-number\\\">1</span> : rs;\\n}\\n</code></pre>\\n<h3 id=\\\"34-find-first-and-last-position-of-element-in-sorted-array\\\">34. Find First And Last Position Of Element In Sorted Array</h3>\\n<p>Given an array of integers <code>nums</code> sorted in ascending order, find the starting and ending position of a given <code>target</code> value.</p>\\n<p>Your algorithm&#39;s runtime complexity must be in the order of <em>O</em>(log <em>n</em>).</p>\\n<p>If the target is not found in the array, return <code>[-1, -1]</code>.</p>\\n<p><strong>Example 1:</strong></p>\\n<pre><code>Input: nums = [5,7,7,8,8,10], target = 8\\nOutput: [3,4]\\n</code></pre>\\n<p><strong>Example 2:</strong></p>\\n<pre><code>Input: nums = [5,7,7,8,8,10], target = 6\\nOutput: [-1,-1]\\n</code></pre>\\n<pre><code class=\\\"hljs language-java\\\"><span class=\\\"hljs-keyword\\\">public</span> <span class=\\\"hljs-type\\\">int</span>[] searchRange(<span class=\\\"hljs-type\\\">int</span>[] nums, <span class=\\\"hljs-type\\\">int</span> target) {\\n   <span class=\\\"hljs-type\\\">int</span> <span class=\\\"hljs-variable\\\">search</span> <span class=\\\"hljs-operator\\\">=</span> Arrays.binarySearch(nums, target);\\n    <span class=\\\"hljs-keyword\\\">if</span> (search &lt; <span class=\\\"hljs-number\\\">0</span>) {\\n        <span class=\\\"hljs-keyword\\\">return</span> <span class=\\\"hljs-keyword\\\">new</span> <span class=\\\"hljs-title class_\\\">int</span>[]{-<span class=\\\"hljs-number\\\">1</span>, -<span class=\\\"hljs-number\\\">1</span>};\\n    } <span class=\\\"hljs-keyword\\\">else</span> {\\n        <span class=\\\"hljs-type\\\">int</span> <span class=\\\"hljs-variable\\\">first</span> <span class=\\\"hljs-operator\\\">=</span> search, tmpFirst = search;\\n        <span class=\\\"hljs-keyword\\\">while</span> (tmpFirst &gt;= <span class=\\\"hljs-number\\\">0</span>) {\\n            tmpFirst = Arrays.binarySearch(nums, <span class=\\\"hljs-number\\\">0</span>, tmpFirst, target);\\n            <span class=\\\"hljs-keyword\\\">if</span> (tmpFirst &gt;= <span class=\\\"hljs-number\\\">0</span>) {\\n                first = tmpFirst;\\n            }\\n        }\\n        <span class=\\\"hljs-type\\\">int</span> <span class=\\\"hljs-variable\\\">last</span> <span class=\\\"hljs-operator\\\">=</span> search, tmpLast = search;\\n        <span class=\\\"hljs-keyword\\\">while</span> (tmpLast &gt;= <span class=\\\"hljs-number\\\">0</span> && tmpLast &lt; nums.length) {\\n            tmpLast = Arrays.binarySearch(nums, tmpLast + <span class=\\\"hljs-number\\\">1</span>, nums.length, target);\\n            <span class=\\\"hljs-keyword\\\">if</span> (tmpLast &gt;= <span class=\\\"hljs-number\\\">0</span>) {\\n                last = tmpLast;\\n            }\\n        }\\n        <span class=\\\"hljs-keyword\\\">return</span> <span class=\\\"hljs-keyword\\\">new</span> <span class=\\\"hljs-title class_\\\">int</span>[]{first, last};\\n    }\\n}\\n</code></pre>\\n<p>不多说</p>\\n<h3 id=\\\"35-search-insert-positioneasy\\\">35. Search Insert Position(Easy)</h3>\\n<p>Given a sorted array and a target value, return the index if the target is found. If not, return the index where it would be if it were inserted in order.</p>\\n<p>You may assume no duplicates in the array.</p>\\n<p><strong>Example 1:</strong></p>\\n<pre><code>Input: [1,3,5,6], 5\\nOutput: 2\\n</code></pre>\\n<p><strong>Example 2:</strong></p>\\n<pre><code>Input: [1,3,5,6], 2\\nOutput: 1\\n</code></pre>\\n<pre><code class=\\\"hljs language-java\\\"><span class=\\\"hljs-keyword\\\">public</span> <span class=\\\"hljs-type\\\">int</span> <span class=\\\"hljs-title function_\\\">searchInsert</span><span class=\\\"hljs-params\\\">(<span class=\\\"hljs-type\\\">int</span>[] nums, <span class=\\\"hljs-type\\\">int</span> target)</span> {\\n    <span class=\\\"hljs-type\\\">int</span> <span class=\\\"hljs-variable\\\">low</span> <span class=\\\"hljs-operator\\\">=</span> <span class=\\\"hljs-number\\\">0</span>, high = nums.length - <span class=\\\"hljs-number\\\">1</span>, mid = <span class=\\\"hljs-number\\\">0</span>;\\n    <span class=\\\"hljs-keyword\\\">while</span> (low &lt;= high) {\\n        mid = (high + low) / <span class=\\\"hljs-number\\\">2</span>;\\n        <span class=\\\"hljs-keyword\\\">if</span> (nums[mid] == target) {\\n            <span class=\\\"hljs-keyword\\\">return</span> mid;\\n        } <span class=\\\"hljs-keyword\\\">else</span> <span class=\\\"hljs-keyword\\\">if</span> (nums[mid] &gt; target) {\\n            high = mid - <span class=\\\"hljs-number\\\">1</span>;\\n        } <span class=\\\"hljs-keyword\\\">else</span> {\\n            low = mid + <span class=\\\"hljs-number\\\">1</span>;\\n        }\\n    }\\n    <span class=\\\"hljs-keyword\\\">return</span> low;\\n}\\n</code></pre>\\n<p>关键：</p>\\n<ul>\\n<li>low &lt;= high</li>\\n<li>返回low</li>\\n</ul>\\n\";","export default \"<h3 id=\\\"概述\\\">概述</h3>\\n<p>本篇主要介绍InnoDB中的锁，以及它与隔离级别之间的关系。从锁的算法、锁的等级、锁解决的问题来为MySQL的InnoDB锁做一个概述</p>\\n<p>我们能够轻易地想到，对数据库的数据进行操作的时候，为了保证数据一致性和持久性，我们会对这些操作上锁，但数据库中并不只有这些情况会上锁，其他地方也会有锁，比如缓冲池中页的增删改查的时候</p>\\n<p>而不同引擎、不同数据库对锁的实现和支持都是不一样的，比如MyISAM只支持表锁，在并发情况下的随机写操作性能就会差点，除非是插入到数据页的底部，那稍微并发性能高点</p>\\n<p>而InnoDB的并发效率会好很多，它提供了非锁定读，行锁等锁粒度细的支持</p>\\n<h3 id=\\\"innodb中的锁\\\">InnoDB中的锁</h3>\\n<h4 id=\\\"表锁与行锁\\\">表锁与行锁</h4>\\n<p>InnoDB支持行级的读写锁：</p>\\n<ul>\\n<li>共享锁（S Lock）：允许事务读取一行数据；</li>\\n<li>排他锁（X Lock）：允许事务删除或更新一行数据；</li>\\n</ul>\\n<p>而InnoDB是支持<strong>多粒度锁定</strong>的，即这种机制允许事务同时持有行锁和表锁，为了实现这个机制，引擎提供了一种叫意向锁的锁，我们把库、表、页、行想象成一棵自顶向下的树，我们若要对某行上<strong>写锁X Lock</strong>，那我们就得先对其所属的库、表、页处也上<strong>写意向锁 IX Lock</strong>，最后再对该行上<strong>X Lock</strong></p>\\n<p>在有意向锁的行为下，加入一个事务要对行上<strong>写锁X Lock</strong>，但这时候该行所属的表上有<strong>读意向锁IS Lock</strong>，那么事务需要等待表上的读意向锁释放之后，才能再加上读意向锁</p>\\n<p>于是我们发现，意向锁就是InnoDB的<strong>表级锁</strong>，也是读写锁的形式：</p>\\n<ul>\\n<li>意向共享锁（IS Lock）：事务要获取一张表中某几行的共享锁；</li>\\n<li>意向排他锁（IX Lock）：事务要获取一张表中某几行的排他锁；</li>\\n</ul>\\n<p>行锁表锁之间的兼容性：</p>\\n<table>\\n<thead>\\n<tr>\\n<th align=\\\"center\\\"></th>\\n<th align=\\\"center\\\">IS</th>\\n<th align=\\\"center\\\">IX</th>\\n<th align=\\\"center\\\">S</th>\\n<th align=\\\"center\\\">X</th>\\n</tr>\\n</thead>\\n<tbody><tr>\\n<td align=\\\"center\\\">IS</td>\\n<td align=\\\"center\\\">✔️</td>\\n<td align=\\\"center\\\">✔️</td>\\n<td align=\\\"center\\\">✔️</td>\\n<td align=\\\"center\\\">✖️</td>\\n</tr>\\n<tr>\\n<td align=\\\"center\\\">IX</td>\\n<td align=\\\"center\\\">✔️</td>\\n<td align=\\\"center\\\">✔️</td>\\n<td align=\\\"center\\\">​✖️​</td>\\n<td align=\\\"center\\\">​✖️​</td>\\n</tr>\\n<tr>\\n<td align=\\\"center\\\">S</td>\\n<td align=\\\"center\\\">✔️</td>\\n<td align=\\\"center\\\">​✖️​</td>\\n<td align=\\\"center\\\">✔️</td>\\n<td align=\\\"center\\\">​✖️​</td>\\n</tr>\\n<tr>\\n<td align=\\\"center\\\">X</td>\\n<td align=\\\"center\\\">​✖️​</td>\\n<td align=\\\"center\\\">​✖️​</td>\\n<td align=\\\"center\\\">​✖️​</td>\\n<td align=\\\"center\\\">​✖️​</td>\\n</tr>\\n</tbody></table>\\n<h4 id=\\\"一致性非锁定读\\\">一致性非锁定读</h4>\\n<p>在理论模型中，读锁会在写锁被持有的时候阻塞而写锁会在读锁被持有的时候阻塞，但是为了提高并发效率，InnoDB还是实现了<strong>MVCC</strong>的机制来规避读写互斥带来的的并发性能下将：<strong>通过恒读取数据之前的版本来避免阻塞</strong></p>\\n<p>在上篇<a href=\\\"./tx6g0p.html\\\">《MySQL InnoDB事务概述》</a>里说到，事务过程中的undo会提供<em><strong>MVCC</strong></em>支持，而且在默认的隔离级别下也会有这个特性，在读取数据的时候会读取快照而不会因为写锁被占用而阻塞</p>\\n<h4 id=\\\"一致性锁定读\\\">一致性锁定读</h4>\\n<p>虽然有了MVCC让我们在读取上不会阻塞，但我们有时候还是想强制使用理论模型的标准来强制读写互斥，这时候可以<strong>显式地（强制地）</strong>对读取操作加锁而保证逻辑一致性</p>\\n<p>InnoDB支持以下两种加锁：</p>\\n<ul>\\n<li><p><code>select ... for update</code></p>\\n<p>对读取的行记录加一个X锁，其他事务不能对该行上任何锁；</p>\\n</li>\\n<li><p><code>select ... lock in share mode</code></p>\\n<p>对读取的行记录加一个S锁，而其他读事务可以执行，其他写事务阻塞；</p>\\n</li>\\n</ul>\\n<h3 id=\\\"innodb行锁算法\\\">InnoDB行锁算法</h3>\\n<p>InnoDB有3种行锁算法：</p>\\n<ul>\\n<li><strong>Record Lock</strong>：锁单行；</li>\\n<li><strong>Gap Lock</strong>：间隙锁，锁一个范围，但是不包括记录本身；</li>\\n<li><strong>Next-Key Lock</strong>：Gap Lock + Record Lock，锁记录本身的同时还锁一个范围；而且这个锁是根据索引记录来执行的，如果表没有设置任何的索引，那么引擎会使用隐式的主键来进行锁定；</li>\\n</ul>\\n<p>在隔离级别为<strong>READ COMMITTED</strong>下，仅采用<em><strong>Record Lock</strong></em>算法；</p>\\n<p>而在隔离级别为<strong>REPEATABLE READ</strong>下，InnoDB对于行的查询都使用的是<em><strong>Next-Key Lock</strong></em>算法，假如一个索引有10，11，13，20四个值，那么Next-Key Lock可能会锁住：<code>(-∞, 10]</code>，<code>(10, 11]</code>，<code>(11, 13]</code>，<code>(13, 20]</code>，<code>(20, +∞)</code>等区间；这种技术被称为<strong>Next-Key Locking</strong>，</p>\\n<p>对应的，还会有<strong>Previous-Key Locking</strong>，其对应会锁住的区间为<code>(-∞, 10)</code>，<code>[10, 11)</code>，<code>[11, 13)</code>，<code>[13, 20)</code>，<code>[20, +∞)</code></p>\\n<h4 id=\\\"锁降级\\\">锁降级</h4>\\n<p>虽然对于所有查询，使用的都是范围锁，但当查询索引含有<strong>唯一索引</strong>的时候，范围锁会<strong>降级</strong>为Record Lock，只锁住单行，比如有数据：</p>\\n<pre><code class=\\\"hljs language-sql\\\"><span class=\\\"hljs-keyword\\\">create</span> <span class=\\\"hljs-keyword\\\">table</span> t ( a <span class=\\\"hljs-type\\\">int</span> <span class=\\\"hljs-keyword\\\">primary</span> key );\\n<span class=\\\"hljs-keyword\\\">insert</span> <span class=\\\"hljs-keyword\\\">into</span> t <span class=\\\"hljs-keyword\\\">select</span> <span class=\\\"hljs-number\\\">1</span>;\\n<span class=\\\"hljs-keyword\\\">insert</span> <span class=\\\"hljs-keyword\\\">into</span> t <span class=\\\"hljs-keyword\\\">select</span> <span class=\\\"hljs-number\\\">2</span>;\\n<span class=\\\"hljs-keyword\\\">insert</span> <span class=\\\"hljs-keyword\\\">into</span> t <span class=\\\"hljs-keyword\\\">select</span> <span class=\\\"hljs-number\\\">5</span>;\\n</code></pre>\\n<p>再执行：</p>\\n<table>\\n<thead>\\n<tr>\\n<th align=\\\"center\\\">时间</th>\\n<th align=\\\"center\\\">会话A</th>\\n<th align=\\\"center\\\">会话B</th>\\n</tr>\\n</thead>\\n<tbody><tr>\\n<td align=\\\"center\\\">1</td>\\n<td align=\\\"center\\\">begin;</td>\\n<td align=\\\"center\\\"></td>\\n</tr>\\n<tr>\\n<td align=\\\"center\\\">2</td>\\n<td align=\\\"center\\\">select * from t where a = 5 for update;</td>\\n<td align=\\\"center\\\"></td>\\n</tr>\\n<tr>\\n<td align=\\\"center\\\">3</td>\\n<td align=\\\"center\\\"></td>\\n<td align=\\\"center\\\">begin;</td>\\n</tr>\\n<tr>\\n<td align=\\\"center\\\">4</td>\\n<td align=\\\"center\\\"></td>\\n<td align=\\\"center\\\">insert into t select 4;</td>\\n</tr>\\n<tr>\\n<td align=\\\"center\\\">5</td>\\n<td align=\\\"center\\\"></td>\\n<td align=\\\"center\\\">commit; #直接成功而不需要等待</td>\\n</tr>\\n<tr>\\n<td align=\\\"center\\\">6</td>\\n<td align=\\\"center\\\">commit;</td>\\n<td align=\\\"center\\\"></td>\\n</tr>\\n</tbody></table>\\n<p>我们看到，虽然再会话A我们请求了一个X锁，但是索引是等等值的5，于是它锁<strong>降级</strong>，它只会锁住这一行记录，所以会话B的插入等值4这一操作不会被阻塞；</p>\\n<p>但是，如果是非唯一索引，比如辅助索引，那么就不会发生降级，比如有</p>\\n<pre><code class=\\\"hljs language-sql\\\"><span class=\\\"hljs-keyword\\\">create</span> <span class=\\\"hljs-keyword\\\">table</span> t ( a <span class=\\\"hljs-type\\\">int</span> , b <span class=\\\"hljs-type\\\">int</span>, <span class=\\\"hljs-keyword\\\">primary</span> key(a), key(b) );\\n<span class=\\\"hljs-keyword\\\">insert</span> <span class=\\\"hljs-keyword\\\">into</span> t <span class=\\\"hljs-keyword\\\">select</span> <span class=\\\"hljs-number\\\">1</span>,<span class=\\\"hljs-number\\\">1</span>;\\n<span class=\\\"hljs-keyword\\\">insert</span> <span class=\\\"hljs-keyword\\\">into</span> t <span class=\\\"hljs-keyword\\\">select</span> <span class=\\\"hljs-number\\\">3</span>,<span class=\\\"hljs-number\\\">1</span>;\\n<span class=\\\"hljs-keyword\\\">insert</span> <span class=\\\"hljs-keyword\\\">into</span> t <span class=\\\"hljs-keyword\\\">select</span> <span class=\\\"hljs-number\\\">5</span>,<span class=\\\"hljs-number\\\">3</span>;\\n<span class=\\\"hljs-keyword\\\">insert</span> <span class=\\\"hljs-keyword\\\">into</span> t <span class=\\\"hljs-keyword\\\">select</span> <span class=\\\"hljs-number\\\">7</span>,<span class=\\\"hljs-number\\\">6</span>;\\n<span class=\\\"hljs-keyword\\\">insert</span> <span class=\\\"hljs-keyword\\\">into</span> t <span class=\\\"hljs-keyword\\\">select</span> <span class=\\\"hljs-number\\\">10</span>,<span class=\\\"hljs-number\\\">8</span>;\\n</code></pre>\\n<p>对于查询：</p>\\n<pre><code class=\\\"hljs language-sql\\\"><span class=\\\"hljs-keyword\\\">select</span> <span class=\\\"hljs-operator\\\">*</span> <span class=\\\"hljs-keyword\\\">from</span> t <span class=\\\"hljs-keyword\\\">where</span> b <span class=\\\"hljs-operator\\\">=</span> <span class=\\\"hljs-number\\\">3</span> <span class=\\\"hljs-keyword\\\">for</span> <span class=\\\"hljs-keyword\\\">update</span>;\\n</code></pre>\\n<p>上述要使用列b进行索引，但因为有两个索引，索引需要分别进行锁定；</p>\\n<ul>\\n<li>对于聚集索引，仅对于列<code>a=5</code>的索引加上Record Lock，锁降级；</li>\\n<li>对于辅助索引，应用的是Next-Key Lock，锁住键值区间<code>(1, 3)</code>和<code>(3, 6)</code>；</li>\\n</ul>\\n<h4 id=\\\"锁升级\\\">锁升级</h4>\\n<p>锁升级是指将<strong>当前锁的粒度降低</strong>，比如可以把一个表的1000个行锁升级为一个页锁，或者页锁升级为表锁，这在各个数据库或者引擎里都有实现</p>\\n<p>但是<strong>InnoDB并不实现这一特性</strong>，因为它不是通过记录本身去产生行锁的，而是采用<strong>位图</strong>的方式，对<strong>每个事务</strong>访问的<strong>每个页</strong>进行锁管理，因此：一个事务不管是锁住页中的<strong>一个记录</strong>还是<strong>多个记录</strong>，其开销通常都是<strong>一样的</strong>；</p>\\n<h4 id=\\\"行锁的细节\\\">行锁的细节</h4>\\n<p>留心以下就能发现，其实InnoDB的行锁是完全依赖域索引的，所以InnoDB的这一行锁特点意味着：<strong>只有通过&quot;索引条件&quot;去检索数据，InnoDB才使用行级锁，否则引擎会使用表锁！</strong></p>\\n<p>这一特点可以回答<em>“InnoDB什么时候用表锁什么时候用行锁呢？”</em>这个问题</p>\\n<h3 id=\\\"锁相关问题与解决\\\">锁相关问题与解决</h3>\\n<h4 id=\\\"phantom-problem（幻读问题）\\\">Phantom Problem（幻读问题）</h4>\\n<p>在默认隔离级别下，InnoDB使用Next-Key Locking机制来避免幻读，之前提到过很多幻读这一词，幻读的真正定义如下：</p>\\n<blockquote>\\n<p><strong>Phantom Problem是指在同一事务下，连续执行两次同样的SQL可能会导致不同的结果，第二次的SQL可能会返回之前不存在的行。</strong></p>\\n</blockquote>\\n<h4 id=\\\"dirty-read（脏读问题）\\\">Dirty Read（脏读问题）</h4>\\n<p>脏数据是指事物对缓冲页的数据进行修改，但是还没有被提交，所以我们并不希望脏数据能够被读取到</p>\\n<p>脏读一般已经很少发生了，除非你非要把隔离级别设置为<strong>READ UNCOMMITTED</strong></p>\\n<h4 id=\\\"nonrepeatable-read（不可重复读）\\\">Nonrepeatable Read（不可重复读）</h4>\\n<p>指一个事务内多次读取同一数据集合，在事务还没有结束的时候，另一个事务对该数据集合进行了更新，因此在第一个事务执行过程中的两次读取之间造成数据差异</p>\\n<p>该问题和脏读的区别是，脏读是读到了未提交的数据，不可重复度是读到了已提交的数据，都违反了数据库事务的<strong>一致性</strong>要求</p>\\n<p>某种程度上说，<strong>不可重复读也是幻读问题</strong>，这在MySQL官方文档中明确了这一点，它也能够通过<em><strong>Next-Key Lock</strong></em>算法来避免这一问题</p>\\n<blockquote>\\n<p>上篇里有提到过，MVCC也是用来解决不可重复读和幻读问题，而这里的<em><strong>Next-Key Lock</strong></em>算法也是用来解决这个的，到底是谁来解决问题的呢？答案其实很简单，就是看你语句本身请不请求锁的问题：</p>\\n<ul>\\n<li>在查询<strong>加</strong><code>for update</code>时，会用<em><strong>Next-Key Lock</strong></em>解决幻读问题，新的insert和update会阻塞；</li>\\n<li>在查询<strong>不加</strong><code>for update</code>时，会用<em><strong>MVCC</strong></em>解决幻读问题，新的insert和update不会阻塞；</li>\\n</ul>\\n</blockquote>\\n<h4 id=\\\"dead-lock（死锁）\\\">Dead Lock（死锁）</h4>\\n<p>事务在等待锁的时候会造成阻塞，如果出现了循环阻塞，那么就会造成死锁，而死锁有两种解决方式</p>\\n<p>一般的做法是超时，但是对于长事务的作业如果应用超时后再回滚，那么会浪费掉很多性能以及时间，甚至是undo log；</p>\\n<p>所以当前数据库包括InnoDB引擎采用的普遍的做法是<em><strong>wait-for graph</strong></em>，这是一种主动的死锁检测机制：<strong>通过将事务构造成节点，然后多个事务根据等待关系链成链表，然后检测是否有回路的这么一种方式来检测是否出现死锁；</strong></p>\\n<p>如果出现回路，<strong>通常来说</strong>引擎会回滚undo量小的事务，也会有回滚undo量大的事务的情况；</p>\\n<h3 id=\\\"锁的设计：乐观锁与悲观锁\\\">锁的设计：乐观锁与悲观锁</h3>\\n<p>摘自：<a href=\\\"https://www.hollischuang.com/archives/934\\\">https://www.hollischuang.com/archives/934</a></p>\\n<h4 id=\\\"悲观地想\\\">悲观地想</h4>\\n<p>在对任意记录进行修改前，先尝试为该记录加上排他锁</p>\\n<p>如果加锁失败，说明该记录正在被修改，那么当前查询可能要等待或者抛出异常。 具体响应方式由开发者根据实际需要决定</p>\\n<p>如果成功加锁，那么就可以对记录做修改，事务完成后就会解锁了</p>\\n<p>其间如果有其他对该记录做修改或加排他锁的操作，都会等待我们解锁或直接抛出异常</p>\\n<p>在MySQL的InnoDB引擎中我们需要：</p>\\n<ol>\\n<li>开启手动提交；</li>\\n<li>用<code>select ... for update</code>加排他锁；</li>\\n<li>修改记录；</li>\\n<li>提交；</li>\\n</ol>\\n<h4 id=\\\"乐观地想\\\">乐观地想</h4>\\n<p>乐观锁（ Optimistic Locking ） 相对悲观锁而言，乐观锁假设认为数据一般情况下不会造成冲突，所以在数据进行提交更新的时候，才会正式对数据的冲突与否进行检测，如果发现冲突了，则让返回用户错误的信息，让用户决定如何去做。</p>\\n<p>相对于悲观锁，在对数据库进行处理的时候，乐观锁并不会使用数据库提供的锁机制。一般的实现乐观锁的方式就是记录数据版本。</p>\\n<blockquote>\\n<p>数据版本,为数据增加的一个版本标识。当读取数据时，将版本标识的值一同读出，数据每更新一次，同时对版本标识进行更新。当我们提交更新的时候，判断数据库表对应记录的当前版本信息与第一次取出来的版本标识进行比对，如果数据库表当前版本号与第一次取出来的版本标识值相等，则予以更新，否则认为是过期数据。</p>\\n</blockquote>\\n<p>实现数据版本有两种方式，第一种是使用版本号，第二种是使用时间戳。</p>\\n\";","export default \"<h3 id=\\\"introduction\\\">Introduction</h3>\\n<p>就A了签到题，我觉得这次笔试很简单了，可是后面3题没过一个case，题目不难，各种各样的失误8，说到底菜才是原罪，还是得多刷题</p>\\n<p>和leecode不一样的是：</p>\\n<ul>\\n<li><strong>阅读理解</strong>很重要，这次读题特别耽误；</li>\\n<li>多条件真的不要怕，一步一步地<strong>组合条件</strong>；</li>\\n</ul>\\n<h3 id=\\\"q1-z国硬币找零\\\">Q1 Z国硬币找零</h3>\\n<blockquote>\\n<p> z国4种硬币，面值1、16、64、1024，小明用1024买东西，求找出的最小硬币数。</p>\\n<p> 如买200，找824，可找12枚64、3枚16、2枚4\\n 输入200，输出17</p>\\n</blockquote>\\n<pre><code class=\\\"hljs language-java\\\"><span class=\\\"hljs-keyword\\\">public</span> <span class=\\\"hljs-keyword\\\">static</span> <span class=\\\"hljs-keyword\\\">void</span> <span class=\\\"hljs-title function_\\\">main</span><span class=\\\"hljs-params\\\">(String[] args)</span> {\\n    <span class=\\\"hljs-type\\\">Scanner</span> <span class=\\\"hljs-variable\\\">in</span> <span class=\\\"hljs-operator\\\">=</span> <span class=\\\"hljs-keyword\\\">new</span> <span class=\\\"hljs-title class_\\\">Scanner</span>(System.in);\\n    <span class=\\\"hljs-type\\\">int</span> <span class=\\\"hljs-variable\\\">n</span> <span class=\\\"hljs-operator\\\">=</span> in.nextInt();\\n    <span class=\\\"hljs-type\\\">int</span> <span class=\\\"hljs-variable\\\">need</span> <span class=\\\"hljs-operator\\\">=</span> <span class=\\\"hljs-number\\\">1024</span> - n;\\n    <span class=\\\"hljs-type\\\">int</span> <span class=\\\"hljs-variable\\\">count</span> <span class=\\\"hljs-operator\\\">=</span> <span class=\\\"hljs-number\\\">0</span>;\\n    <span class=\\\"hljs-keyword\\\">while</span> (need != <span class=\\\"hljs-number\\\">0</span>) {\\n        <span class=\\\"hljs-keyword\\\">if</span> (need &gt;= <span class=\\\"hljs-number\\\">64</span>) {\\n            count += (need / <span class=\\\"hljs-number\\\">64</span>);\\n            need %= <span class=\\\"hljs-number\\\">64</span>;\\n        } <span class=\\\"hljs-keyword\\\">else</span> <span class=\\\"hljs-keyword\\\">if</span> (need &gt;= <span class=\\\"hljs-number\\\">16</span>) {\\n            count += (need / <span class=\\\"hljs-number\\\">16</span>);\\n            need %= <span class=\\\"hljs-number\\\">16</span>;\\n        } <span class=\\\"hljs-keyword\\\">else</span> <span class=\\\"hljs-keyword\\\">if</span> (need &gt;= <span class=\\\"hljs-number\\\">4</span>) {\\n            count += (need / <span class=\\\"hljs-number\\\">4</span>);\\n            need %= <span class=\\\"hljs-number\\\">4</span>;\\n        } <span class=\\\"hljs-keyword\\\">else</span> {\\n            count += (need);\\n            need %= <span class=\\\"hljs-number\\\">1</span>;\\n        }\\n    }\\n    System.out.println(count);\\n}\\n</code></pre>\\n<h3 id=\\\"q2-字符串去重\\\">Q2 字符串去重</h3>\\n<blockquote>\\n<p> 字符串去重\\n 条件：\\n 1）如果三个一样的字符，去掉一个：helllo -&gt;hello\\n 2）AABB型，去掉最后一个：AABB -&gt; AAB\\n 3）从左到右优先考虑上面两个条件，比如AABBCC，虽然AABB、BBCC都需要考虑，但是AABB删除完之后变成AABCC了，CC可以不用处理了：AABBCC -&gt; AABCC</p>\\n<p> 输入\\n 2\\n helllo\\n wooooooow</p>\\n<p> 输出\\n hello\\n woow</p>\\n</blockquote>\\n<p>这题关键：</p>\\n<ul>\\n<li>用一个新的地方去存储<strong>已记录的合法字符串</strong>，记为<code>newS</code>，然后在这个已记录的字符串上继续考虑去重；</li>\\n<li>设两个flag，一个记录前两位是否是AA，记为<code>aa</code>，一个记录前三位是否是AAB，记为<code>aab</code>；这两个flag都在<strong>已记录的合法字符串</strong>中打；每次通过这两个flag去删选字符；</li>\\n</ul>\\n<p>步骤：</p>\\n<ol>\\n<li>遍历源串：<ol>\\n<li>如果<code>aa</code>满足，且当前字符，和<code>newS</code>的末尾字符一样，说明三个一样，于是这个字符跳过；</li>\\n<li>如果<code>aab</code>满足，且当前字符，和<code>newS</code>的末尾字符一样，说明是AABB，于是这个字符跳过；</li>\\n<li>否则：重新打<code>aa</code>和<code>aab</code>flag；当前字符记到<code>newS</code></li>\\n</ol>\\n</li>\\n<li>打印<code>newS</code></li>\\n</ol>\\n<pre><code class=\\\"hljs language-java\\\"><span class=\\\"hljs-keyword\\\">public</span> <span class=\\\"hljs-keyword\\\">static</span> <span class=\\\"hljs-keyword\\\">void</span> <span class=\\\"hljs-title function_\\\">main</span><span class=\\\"hljs-params\\\">(String[] args)</span> {\\n    <span class=\\\"hljs-type\\\">Scanner</span> <span class=\\\"hljs-variable\\\">in</span> <span class=\\\"hljs-operator\\\">=</span> <span class=\\\"hljs-keyword\\\">new</span> <span class=\\\"hljs-title class_\\\">Scanner</span>(System.in);\\n    <span class=\\\"hljs-type\\\">int</span> <span class=\\\"hljs-variable\\\">n</span> <span class=\\\"hljs-operator\\\">=</span> in.nextInt();\\n    String[] s = <span class=\\\"hljs-keyword\\\">new</span> <span class=\\\"hljs-title class_\\\">String</span>[n];\\n    <span class=\\\"hljs-keyword\\\">for</span> (<span class=\\\"hljs-type\\\">int</span> <span class=\\\"hljs-variable\\\">i</span> <span class=\\\"hljs-operator\\\">=</span> <span class=\\\"hljs-number\\\">0</span>; i &lt; n; i++) {\\n        s[i] = in.next();\\n    }\\n    <span class=\\\"hljs-keyword\\\">for</span> (String s1 : s) {\\n        System.out.println(remove(s1));\\n    }\\n}\\n\\n<span class=\\\"hljs-keyword\\\">private</span> <span class=\\\"hljs-keyword\\\">static</span> String <span class=\\\"hljs-title function_\\\">remove</span><span class=\\\"hljs-params\\\">(String origin)</span> {\\n    <span class=\\\"hljs-type\\\">StringBuilder</span> <span class=\\\"hljs-variable\\\">sb</span> <span class=\\\"hljs-operator\\\">=</span> <span class=\\\"hljs-keyword\\\">new</span> <span class=\\\"hljs-title class_\\\">StringBuilder</span>(origin.charAt(<span class=\\\"hljs-number\\\">0</span>) + <span class=\\\"hljs-string\\\">&quot;&quot;</span>);\\n    <span class=\\\"hljs-type\\\">char</span>[] chars = origin.toCharArray();\\n    <span class=\\\"hljs-type\\\">boolean</span> <span class=\\\"hljs-variable\\\">aa</span> <span class=\\\"hljs-operator\\\">=</span> <span class=\\\"hljs-literal\\\">false</span>;\\n    <span class=\\\"hljs-type\\\">boolean</span> <span class=\\\"hljs-variable\\\">aab</span> <span class=\\\"hljs-operator\\\">=</span> <span class=\\\"hljs-literal\\\">false</span>;\\n    <span class=\\\"hljs-type\\\">int</span> <span class=\\\"hljs-variable\\\">last</span> <span class=\\\"hljs-operator\\\">=</span> <span class=\\\"hljs-number\\\">0</span>;\\n    <span class=\\\"hljs-keyword\\\">for</span> (<span class=\\\"hljs-type\\\">int</span> <span class=\\\"hljs-variable\\\">i</span> <span class=\\\"hljs-operator\\\">=</span> <span class=\\\"hljs-number\\\">1</span>; i &lt; chars.length; i++) {\\n        <span class=\\\"hljs-type\\\">boolean</span> <span class=\\\"hljs-variable\\\">triple</span> <span class=\\\"hljs-operator\\\">=</span> aa && sb.charAt(last) == chars[i];\\n        <span class=\\\"hljs-type\\\">boolean</span> <span class=\\\"hljs-variable\\\">aabb</span> <span class=\\\"hljs-operator\\\">=</span> aab && sb.charAt(last) == chars[i];\\n        <span class=\\\"hljs-keyword\\\">if</span> (!triple && !aabb) {\\n            aa = chars[i] == sb.charAt(last);\\n            <span class=\\\"hljs-keyword\\\">if</span> (i &gt; <span class=\\\"hljs-number\\\">1</span>) {\\n                aab = sb.charAt(last - <span class=\\\"hljs-number\\\">1</span>) == sb.charAt(last) && sb.charAt(last) != chars[i];\\n            }\\n            sb.append(chars[i]);\\n            last++;\\n        }\\n    }\\n    <span class=\\\"hljs-keyword\\\">return</span> sb.toString();\\n}\\n</code></pre>\\n<h3 id=\\\"q3-发礼品\\\">Q3 发礼品</h3>\\n<blockquote>\\n<p> n个人比赛得分，围成圈领奖品，条件如下\\n 1）如果分数比左右两边的人高，那么奖品也比左右两边的人多\\n 2）每人至少一份\\n 求最少奖品数</p>\\n<p> 输入：第一行为比赛轮次，接下来每2行分别代表比赛人数和每个人的分数\\n 2\\n 2\\n 1 2\\n 4\\n 1 2 3 3</p>\\n<p> 输出\\n 3\\n 8</p>\\n<p> 解释：</p>\\n<ul>\\n<li>第一轮2个人比赛，第一个人1分，最少一个奖品，第二个人2分，比左边的人高，所以奖品也要多，最少可以拿2个；\\n  所以礼物序列为：1 2 所以总最少3份</li>\\n<li>第二轮4个人比赛，第一个人1分，最少一个奖品，第二个人2分，比左边的人高，所以奖品也要多，最少可以拿2个，第三个人比第二个人高分，也多一份，第四个人和三个一样，但是比第一个人高，所以最少要比第一个人多拿一份礼物；\\n  所以礼物序列为：1 2 3 2 总最少8份</li>\\n</ul>\\n</blockquote>\\n<p>这题特别耽误，因为开始的时候，并没有解释的，做到一半的时候，系统发了公告解释为什么得8，估计是问考官要解释的人太多了- -，我也是看了评论区才知道，考试的时候居然可以问考官的操</p>\\n<p>这题吧，关键就是条件比较tricky：</p>\\n<ol>\\n<li>人是围成圈站的，所以数组最后一个人和第一个人是相邻的，而且奖品数量的计算也不是从第一个人开始计算；</li>\\n<li>如果比左右两边高礼品才高，三者比较这只是其中一种case，剩下还有相等的，左高右低左低右高的几种case；</li>\\n<li>最少一个礼物，求最少的礼物；这两句话的意思是，能少尽量少；</li>\\n</ol>\\n<p>思路：</p>\\n<ol>\\n<li>对于每一个人，我们可以标出左右两边人得分<code>leftScore</code>和<code>rightScore</code>，以及左右两边礼品数量<code>leftP</code>和<code>rightP</code></li>\\n<li>顺序记录得分，同时记录它们分布的下标，可以用一个<code>TreeMap&lt;Integer, LinkedList&lt;Integer&gt;&gt;</code>来记录；</li>\\n<li>按照得分升序，依次进行如下逻辑：<ol>\\n<li>如果当前人的分数比左右两边都高，那么当前人获得比更多那一边的人的礼品数多一；</li>\\n<li>如果仅比一遍高，那么当前人至少也要比这一边多一个礼品；</li>\\n<li>其他情况就都是分配最小礼物1个；</li>\\n</ol>\\n</li>\\n<li>记录每次当前人的礼品数，加到sum中，得解；</li>\\n</ol>\\n<pre><code class=\\\"hljs language-java\\\"><span class=\\\"hljs-keyword\\\">public</span> <span class=\\\"hljs-keyword\\\">static</span> <span class=\\\"hljs-keyword\\\">void</span> <span class=\\\"hljs-title function_\\\">main</span><span class=\\\"hljs-params\\\">(String[] args)</span> {\\n    <span class=\\\"hljs-type\\\">Scanner</span> <span class=\\\"hljs-variable\\\">in</span> <span class=\\\"hljs-operator\\\">=</span> <span class=\\\"hljs-keyword\\\">new</span> <span class=\\\"hljs-title class_\\\">Scanner</span>(System.in);\\n    <span class=\\\"hljs-type\\\">int</span> <span class=\\\"hljs-variable\\\">n</span> <span class=\\\"hljs-operator\\\">=</span> in.nextInt();\\n    <span class=\\\"hljs-type\\\">int</span>[] rs = <span class=\\\"hljs-keyword\\\">new</span> <span class=\\\"hljs-title class_\\\">int</span>[n];\\n    <span class=\\\"hljs-keyword\\\">for</span> (<span class=\\\"hljs-type\\\">int</span> <span class=\\\"hljs-variable\\\">i</span> <span class=\\\"hljs-operator\\\">=</span> <span class=\\\"hljs-number\\\">0</span>; i &lt; n; i++) {\\n        <span class=\\\"hljs-type\\\">int</span> <span class=\\\"hljs-variable\\\">number</span> <span class=\\\"hljs-operator\\\">=</span> in.nextInt();\\n        <span class=\\\"hljs-type\\\">int</span>[] scores = <span class=\\\"hljs-keyword\\\">new</span> <span class=\\\"hljs-title class_\\\">int</span>[number];\\n        TreeMap&lt;Integer, LinkedList&lt;Integer&gt;&gt; indexMap = <span class=\\\"hljs-keyword\\\">new</span> <span class=\\\"hljs-title class_\\\">TreeMap</span>&lt;&gt;();\\n        <span class=\\\"hljs-keyword\\\">for</span> (<span class=\\\"hljs-type\\\">int</span> <span class=\\\"hljs-variable\\\">j</span> <span class=\\\"hljs-operator\\\">=</span> <span class=\\\"hljs-number\\\">0</span>; j &lt; number; j++) {\\n            scores[j] = in.nextInt();\\n            indexMap.computeIfAbsent(scores[j], k -&gt; <span class=\\\"hljs-keyword\\\">new</span> <span class=\\\"hljs-title class_\\\">LinkedList</span>&lt;&gt;());\\n            indexMap.get(scores[j]).add(j);\\n        }\\n        <span class=\\\"hljs-type\\\">int</span>[] p = <span class=\\\"hljs-keyword\\\">new</span> <span class=\\\"hljs-title class_\\\">int</span>[number];\\n        <span class=\\\"hljs-type\\\">int</span> <span class=\\\"hljs-variable\\\">sum</span> <span class=\\\"hljs-operator\\\">=</span> <span class=\\\"hljs-number\\\">0</span>;\\n        <span class=\\\"hljs-keyword\\\">for</span> (Map.Entry&lt;Integer, LinkedList&lt;Integer&gt;&gt; entry : indexMap.entrySet()) {\\n            <span class=\\\"hljs-type\\\">Integer</span> <span class=\\\"hljs-variable\\\">nowS</span> <span class=\\\"hljs-operator\\\">=</span> entry.getKey();\\n            LinkedList&lt;Integer&gt; scoreIndex = entry.getValue();\\n            <span class=\\\"hljs-keyword\\\">for</span> (Integer index : scoreIndex) {\\n                <span class=\\\"hljs-type\\\">int</span> <span class=\\\"hljs-variable\\\">leftS</span> <span class=\\\"hljs-operator\\\">=</span> getLeft(scores, index);\\n                <span class=\\\"hljs-type\\\">int</span> <span class=\\\"hljs-variable\\\">rightS</span> <span class=\\\"hljs-operator\\\">=</span> getRight(scores, index);\\n                <span class=\\\"hljs-type\\\">int</span> <span class=\\\"hljs-variable\\\">leftP</span> <span class=\\\"hljs-operator\\\">=</span> getLeft(p, index);\\n                <span class=\\\"hljs-type\\\">int</span> <span class=\\\"hljs-variable\\\">rightP</span> <span class=\\\"hljs-operator\\\">=</span> getRight(p, index);\\n\\n                <span class=\\\"hljs-keyword\\\">if</span> (nowS &gt; leftS && nowS &gt; rightS) {\\n                    p[index] = Math.max(leftP, rightP) + <span class=\\\"hljs-number\\\">1</span>;\\n                } <span class=\\\"hljs-keyword\\\">else</span> <span class=\\\"hljs-keyword\\\">if</span> (nowS &gt; leftS) {\\n                    p[index] = leftP + <span class=\\\"hljs-number\\\">1</span>;\\n                } <span class=\\\"hljs-keyword\\\">else</span> <span class=\\\"hljs-keyword\\\">if</span> (nowS &gt; rightS) {\\n                    p[index] = rightP + <span class=\\\"hljs-number\\\">1</span>;\\n                } <span class=\\\"hljs-keyword\\\">else</span> {\\n                    p[index] = <span class=\\\"hljs-number\\\">1</span>;\\n                }\\n                sum += p[index];\\n            }\\n        }\\n        System.out.println(Arrays.toString(p));\\n        rs[i] = sum;\\n    }\\n    <span class=\\\"hljs-keyword\\\">for</span> (<span class=\\\"hljs-type\\\">int</span> r : rs) {\\n        System.out.println(r);\\n    }\\n}\\n\\n<span class=\\\"hljs-keyword\\\">private</span> <span class=\\\"hljs-keyword\\\">static</span> <span class=\\\"hljs-type\\\">int</span> <span class=\\\"hljs-title function_\\\">getLeft</span><span class=\\\"hljs-params\\\">(<span class=\\\"hljs-type\\\">int</span>[] scores, <span class=\\\"hljs-type\\\">int</span> nowIndex)</span> {\\n    <span class=\\\"hljs-keyword\\\">if</span> (nowIndex == <span class=\\\"hljs-number\\\">0</span>) {\\n        <span class=\\\"hljs-keyword\\\">return</span> scores[scores.length - <span class=\\\"hljs-number\\\">1</span>];\\n    } <span class=\\\"hljs-keyword\\\">else</span> {\\n        <span class=\\\"hljs-keyword\\\">return</span> scores[nowIndex - <span class=\\\"hljs-number\\\">1</span>];\\n    }\\n}\\n\\n<span class=\\\"hljs-keyword\\\">private</span> <span class=\\\"hljs-keyword\\\">static</span> <span class=\\\"hljs-type\\\">int</span> <span class=\\\"hljs-title function_\\\">getRight</span><span class=\\\"hljs-params\\\">(<span class=\\\"hljs-type\\\">int</span>[] scores, <span class=\\\"hljs-type\\\">int</span> nowIndex)</span> {\\n    <span class=\\\"hljs-keyword\\\">if</span> (nowIndex == scores.length - <span class=\\\"hljs-number\\\">1</span>) {\\n        <span class=\\\"hljs-keyword\\\">return</span> scores[<span class=\\\"hljs-number\\\">0</span>];\\n    } <span class=\\\"hljs-keyword\\\">else</span> {\\n        <span class=\\\"hljs-keyword\\\">return</span> scores[nowIndex + <span class=\\\"hljs-number\\\">1</span>];\\n    }\\n}\\n</code></pre>\\n<h3 id=\\\"q4-n绳子剪m等长\\\">Q4 N绳子剪M等长</h3>\\n<blockquote>\\n<p> n根绳子，剪成m段等长绳子，不可拼接，求等多长，结果保留2位小数</p>\\n<p> 输入\\n 第一行2个数，n和m\\n 第二行n个数，原始的绳子长度</p>\\n<p> 3 4\\n 3 4 5</p>\\n<p> 输出\\n 2.50\\n 5可剪成两条2.5和2.5，3和4分别可以剪出一个2.5，总共4个2.5</p>\\n</blockquote>\\n<p>这题说实话，经验提，我看几篇题解都是这样的做法- -</p>\\n<p>二分法在<strong>0-最长绳子里进行中位选择</strong>，每次选择的中位如果用每条绳子去剪，直到能剪出符合要求的</p>\\n<pre><code class=\\\"hljs language-java\\\"><span class=\\\"hljs-keyword\\\">public</span> <span class=\\\"hljs-keyword\\\">static</span> <span class=\\\"hljs-keyword\\\">void</span> <span class=\\\"hljs-title function_\\\">main</span><span class=\\\"hljs-params\\\">(String[] args)</span> {\\n    <span class=\\\"hljs-type\\\">Scanner</span> <span class=\\\"hljs-variable\\\">in</span> <span class=\\\"hljs-operator\\\">=</span> <span class=\\\"hljs-keyword\\\">new</span> <span class=\\\"hljs-title class_\\\">Scanner</span>(System.in);\\n    <span class=\\\"hljs-type\\\">int</span> <span class=\\\"hljs-variable\\\">n</span> <span class=\\\"hljs-operator\\\">=</span> in.nextInt();\\n    <span class=\\\"hljs-type\\\">int</span> <span class=\\\"hljs-variable\\\">m</span> <span class=\\\"hljs-operator\\\">=</span> in.nextInt();\\n    <span class=\\\"hljs-type\\\">double</span>[] ns = <span class=\\\"hljs-keyword\\\">new</span> <span class=\\\"hljs-title class_\\\">double</span>[n];\\n    <span class=\\\"hljs-type\\\">double</span> <span class=\\\"hljs-variable\\\">low</span> <span class=\\\"hljs-operator\\\">=</span> <span class=\\\"hljs-number\\\">0</span>, high = Double.MIN_VALUE;\\n    <span class=\\\"hljs-keyword\\\">for</span> (<span class=\\\"hljs-type\\\">int</span> <span class=\\\"hljs-variable\\\">i</span> <span class=\\\"hljs-operator\\\">=</span> <span class=\\\"hljs-number\\\">0</span>; i &lt; n; i++) {\\n        ns[i] = in.nextDouble();\\n        high = Math.max(ns[i], high);\\n    }\\n\\n    <span class=\\\"hljs-type\\\">double</span> <span class=\\\"hljs-variable\\\">exp</span> <span class=\\\"hljs-operator\\\">=</span> <span class=\\\"hljs-number\\\">0.001</span>;\\n    <span class=\\\"hljs-type\\\">double</span> <span class=\\\"hljs-variable\\\">mid</span> <span class=\\\"hljs-operator\\\">=</span> low;\\n    <span class=\\\"hljs-keyword\\\">while</span> (high - low &gt;= exp) {\\n        mid = (low + high) / <span class=\\\"hljs-number\\\">2</span>;\\n        <span class=\\\"hljs-type\\\">int</span> <span class=\\\"hljs-variable\\\">count</span> <span class=\\\"hljs-operator\\\">=</span> <span class=\\\"hljs-number\\\">0</span>;\\n        <span class=\\\"hljs-keyword\\\">for</span> (<span class=\\\"hljs-type\\\">double</span> v : ns) {\\n            count += ((<span class=\\\"hljs-type\\\">int</span>) (v) / mid);\\n        }\\n        <span class=\\\"hljs-keyword\\\">if</span> (m &gt; count) {\\n            high = mid;\\n        } <span class=\\\"hljs-keyword\\\">else</span> {\\n            low = mid;\\n        }\\n    }\\n\\n    System.out.println(String.format(<span class=\\\"hljs-string\\\">&quot;%.2f&quot;</span>, mid));\\n}\\n</code></pre>\\n\";","export default \"<p><div class=\\\"saying mb-4\\\"><div class=\\\"saying-quote saying-left-quote\\\">“</div><div class=\\\"saying-quote saying-right-quote\\\">”</div></p>\\n<p>Lo4j2是啥就不解释了，之前无论是使用log4j还是log4j2，同样只是简单的各种百度然后复制粘贴没有系统的总结一下，今天把一个小小的Ajax的测试程序放服务器上面都不知道怎么查错，然后想写一下log来看看哪错了吧，发现还是不会独立配置log4j，于是想总结一波。基本的思路是总结官方文档和官方推荐的中文文档，尽量简洁表达出原理以及应用。</p>\\n<p></div></p>\\n<!-- more -->\\n\\n<hr>\\n<h3 id=\\\"准备工作\\\">准备工作</h3>\\n<h4 id=\\\"maven依赖\\\">Maven依赖</h4>\\n<pre><code class=\\\"hljs language-xml\\\"><span class=\\\"hljs-tag\\\">&lt;<span class=\\\"hljs-name\\\">dependencies</span>&gt;</span>\\n  <span class=\\\"hljs-tag\\\">&lt;<span class=\\\"hljs-name\\\">dependency</span>&gt;</span>\\n    <span class=\\\"hljs-tag\\\">&lt;<span class=\\\"hljs-name\\\">groupId</span>&gt;</span>org.apache.logging.log4j<span class=\\\"hljs-tag\\\">&lt;/<span class=\\\"hljs-name\\\">groupId</span>&gt;</span>\\n    <span class=\\\"hljs-tag\\\">&lt;<span class=\\\"hljs-name\\\">artifactId</span>&gt;</span>log4j-api<span class=\\\"hljs-tag\\\">&lt;/<span class=\\\"hljs-name\\\">artifactId</span>&gt;</span>\\n    <span class=\\\"hljs-tag\\\">&lt;<span class=\\\"hljs-name\\\">version</span>&gt;</span>2.9.1<span class=\\\"hljs-tag\\\">&lt;/<span class=\\\"hljs-name\\\">version</span>&gt;</span>\\n  <span class=\\\"hljs-tag\\\">&lt;/<span class=\\\"hljs-name\\\">dependency</span>&gt;</span>\\n  <span class=\\\"hljs-tag\\\">&lt;<span class=\\\"hljs-name\\\">dependency</span>&gt;</span>\\n    <span class=\\\"hljs-tag\\\">&lt;<span class=\\\"hljs-name\\\">groupId</span>&gt;</span>org.apache.logging.log4j<span class=\\\"hljs-tag\\\">&lt;/<span class=\\\"hljs-name\\\">groupId</span>&gt;</span>\\n    <span class=\\\"hljs-tag\\\">&lt;<span class=\\\"hljs-name\\\">artifactId</span>&gt;</span>log4j-core<span class=\\\"hljs-tag\\\">&lt;/<span class=\\\"hljs-name\\\">artifactId</span>&gt;</span>\\n    <span class=\\\"hljs-tag\\\">&lt;<span class=\\\"hljs-name\\\">version</span>&gt;</span>2.9.1<span class=\\\"hljs-tag\\\">&lt;/<span class=\\\"hljs-name\\\">version</span>&gt;</span>\\n  <span class=\\\"hljs-tag\\\">&lt;/<span class=\\\"hljs-name\\\">dependency</span>&gt;</span>\\n<span class=\\\"hljs-tag\\\">&lt;/<span class=\\\"hljs-name\\\">dependencies</span>&gt;</span>\\n</code></pre>\\n<p>认准这俩依赖</p>\\n<h4 id=\\\"默认配置文件如果配置文件缺省的情况下，也会是这样的配置\\\">默认配置文件(如果配置文件缺省的情况下，也会是这样的配置)</h4>\\n<p>配置文件需要放在classpath的根目录下（一般的项目是src，maven web项目则是推荐在resource下），以log4j2.xml命名，配置文件还有其他的配置形式如json和yaml，我习惯使用xml。</p>\\n<pre><code class=\\\"hljs language-xml\\\"><span class=\\\"hljs-meta\\\">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span>\\n<span class=\\\"hljs-tag\\\">&lt;<span class=\\\"hljs-name\\\">configuration</span> <span class=\\\"hljs-attr\\\">status</span>=<span class=\\\"hljs-string\\\">&quot;OFF&quot;</span>&gt;</span>\\n    <span class=\\\"hljs-tag\\\">&lt;<span class=\\\"hljs-name\\\">appenders</span>&gt;</span>\\n        <span class=\\\"hljs-tag\\\">&lt;<span class=\\\"hljs-name\\\">Console</span> <span class=\\\"hljs-attr\\\">name</span>=<span class=\\\"hljs-string\\\">&quot;Console&quot;</span> <span class=\\\"hljs-attr\\\">target</span>=<span class=\\\"hljs-string\\\">&quot;SYSTEM_OUT&quot;</span>&gt;</span>\\n            <span class=\\\"hljs-tag\\\">&lt;<span class=\\\"hljs-name\\\">PatternLayout</span> <span class=\\\"hljs-attr\\\">pattern</span>=<span class=\\\"hljs-string\\\">&quot;%d{HH:mm:ss.SSS} [%t] %-5level %logger{36} - %msg%n&quot;</span>/&gt;</span>\\n        <span class=\\\"hljs-tag\\\">&lt;/<span class=\\\"hljs-name\\\">Console</span>&gt;</span>\\n    <span class=\\\"hljs-tag\\\">&lt;/<span class=\\\"hljs-name\\\">appenders</span>&gt;</span>\\n    <span class=\\\"hljs-tag\\\">&lt;<span class=\\\"hljs-name\\\">loggers</span>&gt;</span>\\n        <span class=\\\"hljs-tag\\\">&lt;<span class=\\\"hljs-name\\\">root</span> <span class=\\\"hljs-attr\\\">level</span>=<span class=\\\"hljs-string\\\">&quot;error&quot;</span>&gt;</span>\\n            <span class=\\\"hljs-tag\\\">&lt;<span class=\\\"hljs-name\\\">appender-ref</span> <span class=\\\"hljs-attr\\\">ref</span>=<span class=\\\"hljs-string\\\">&quot;Console&quot;</span>/&gt;</span>\\n        <span class=\\\"hljs-tag\\\">&lt;/<span class=\\\"hljs-name\\\">root</span>&gt;</span>\\n    <span class=\\\"hljs-tag\\\">&lt;/<span class=\\\"hljs-name\\\">loggers</span>&gt;</span>\\n<span class=\\\"hljs-tag\\\">&lt;/<span class=\\\"hljs-name\\\">configuration</span>&gt;</span>\\n</code></pre>\\n<h4 id=\\\"helloword\\\">HelloWord</h4>\\n<pre><code class=\\\"hljs language-java\\\"><span class=\\\"hljs-keyword\\\">public</span> <span class=\\\"hljs-keyword\\\">class</span> <span class=\\\"hljs-title class_\\\">Main</span> {\\n    <span class=\\\"hljs-keyword\\\">public</span> <span class=\\\"hljs-keyword\\\">static</span> <span class=\\\"hljs-keyword\\\">void</span> <span class=\\\"hljs-title function_\\\">main</span><span class=\\\"hljs-params\\\">(String[] args)</span> {\\n        <span class=\\\"hljs-type\\\">Logger</span> <span class=\\\"hljs-variable\\\">logger</span> <span class=\\\"hljs-operator\\\">=</span> LogManager.getLogger(LogManager.ROOT_LOGGER_NAME);\\n        logger.trace(<span class=\\\"hljs-string\\\">&quot;trace level&quot;</span>);\\n        logger.debug(<span class=\\\"hljs-string\\\">&quot;debug level&quot;</span>);\\n        logger.info(<span class=\\\"hljs-string\\\">&quot;info level&quot;</span>);\\n        logger.warn(<span class=\\\"hljs-string\\\">&quot;warn level&quot;</span>);\\n        logger.error(<span class=\\\"hljs-string\\\">&quot;error level&quot;</span>);\\n        logger.fatal(<span class=\\\"hljs-string\\\">&quot;fatal level&quot;</span>);\\n    }\\n}\\n</code></pre>\\n<hr>\\n<h3 id=\\\"运行helloworld\\\">运行HelloWorld</h3>\\n<p>运行上面的代码之后会出现如下的log</p>\\n<pre><code class=\\\"hljs language-cmd\\\"><span class=\\\"hljs-number\\\">13</span>:<span class=\\\"hljs-number\\\">34</span>:<span class=\\\"hljs-number\\\">41</span>.<span class=\\\"hljs-number\\\">070</span> [main] ERROR mylog - error level\\n<span class=\\\"hljs-number\\\">13</span>:<span class=\\\"hljs-number\\\">34</span>:<span class=\\\"hljs-number\\\">41</span>.<span class=\\\"hljs-number\\\">072</span> [main] FATAL mylog - fatal level\\n</code></pre>\\n<p>你会很奇怪，为什么我们写了这么多log，却只出现两行log信息，我们去看看我们的配置文件：</p>\\n<pre><code class=\\\"hljs language-xml\\\"><span class=\\\"hljs-meta\\\">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span>\\n<span class=\\\"hljs-tag\\\">&lt;<span class=\\\"hljs-name\\\">configuration</span> <span class=\\\"hljs-attr\\\">status</span>=<span class=\\\"hljs-string\\\">&quot;OFF&quot;</span>&gt;</span>\\n  <span class=\\\"hljs-comment\\\">&lt;!-- 这里定义了一个appenders --&gt;</span>\\n    <span class=\\\"hljs-tag\\\">&lt;<span class=\\\"hljs-name\\\">appenders</span>&gt;</span>\\n      <span class=\\\"hljs-comment\\\">&lt;!-- appenders里面配置了一个Console --&gt;</span>\\n        <span class=\\\"hljs-tag\\\">&lt;<span class=\\\"hljs-name\\\">Console</span> <span class=\\\"hljs-attr\\\">name</span>=<span class=\\\"hljs-string\\\">&quot;Console&quot;</span> <span class=\\\"hljs-attr\\\">target</span>=<span class=\\\"hljs-string\\\">&quot;SYSTEM_OUT&quot;</span>&gt;</span>\\n          <span class=\\\"hljs-comment\\\">&lt;!-- 这是输出格式 --&gt;</span>\\n            <span class=\\\"hljs-tag\\\">&lt;<span class=\\\"hljs-name\\\">PatternLayout</span> <span class=\\\"hljs-attr\\\">pattern</span>=<span class=\\\"hljs-string\\\">&quot;%d{HH:mm:ss.SSS} [%t] %-5level %logger{36} - %msg%n&quot;</span>/&gt;</span>\\n        <span class=\\\"hljs-tag\\\">&lt;/<span class=\\\"hljs-name\\\">Console</span>&gt;</span>\\n    <span class=\\\"hljs-tag\\\">&lt;/<span class=\\\"hljs-name\\\">appenders</span>&gt;</span>\\n\\n    <span class=\\\"hljs-comment\\\">&lt;!-- 然后就是定义loggers --&gt;</span>\\n    <span class=\\\"hljs-tag\\\">&lt;<span class=\\\"hljs-name\\\">loggers</span>&gt;</span>\\n      <span class=\\\"hljs-comment\\\">&lt;!-- 这是根logger 是所有自定义logger的父logger --&gt;</span>\\n        <span class=\\\"hljs-tag\\\">&lt;<span class=\\\"hljs-name\\\">root</span> <span class=\\\"hljs-attr\\\">level</span>=<span class=\\\"hljs-string\\\">&quot;error&quot;</span>&gt;</span>\\n            <span class=\\\"hljs-tag\\\">&lt;<span class=\\\"hljs-name\\\">appender-ref</span> <span class=\\\"hljs-attr\\\">ref</span>=<span class=\\\"hljs-string\\\">&quot;Console&quot;</span>/&gt;</span>\\n        <span class=\\\"hljs-tag\\\">&lt;/<span class=\\\"hljs-name\\\">root</span>&gt;</span>\\n    <span class=\\\"hljs-tag\\\">&lt;/<span class=\\\"hljs-name\\\">loggers</span>&gt;</span>\\n<span class=\\\"hljs-tag\\\">&lt;/<span class=\\\"hljs-name\\\">configuration</span>&gt;</span>\\n</code></pre>\\n<p>首先看我们的Java代码：</p>\\n<pre><code class=\\\"hljs language-java\\\"><span class=\\\"hljs-type\\\">Logger</span> <span class=\\\"hljs-variable\\\">logger</span> <span class=\\\"hljs-operator\\\">=</span> LogManager.getLogger(LogManager.ROOT_LOGGER_NAME);\\n</code></pre>\\n<p>这一行是获取我们在配置文件中配置好的root logger，然后使用这个logger去打印了6条日志。</p>\\n<p>然后解释一下单词含义（my style~）：</p>\\n<blockquote>\\n<p>Appender：\\n<em>n.</em> 附着器,输出目的地,输出源；</p>\\n</blockquote>\\n<p>它的子元素Console，代表的是控制台，所以很明显就是，我们配置了一个以控制台作为输出源的输出源；并将这个输出源命名为<code>Console</code>，然后配置了这个控制台输出源的输出Pattern。</p>\\n<p>然后我们在<code>loggers</code>里面配置了一个logger：<code>root</code>，这个节点代表所有logger的根logger，然后log级别定为<code>error</code>，意思是<strong>只输出error级别以下包括error的日志信息</strong>，之后这个根log的输出源引用的是<code>name</code>值为<code>Console</code>的Appender，也即我们配置的唯一一个Appender。</p>\\n<p>那么error以下是哪些信息？</p>\\n<blockquote>\\n<hr>\\n<p>log4j规定了默认的几个级别：<code>trace &lt; debug &lt; info &lt; warn &lt; error &lt; fatal</code>等。这里要说明一下：</p>\\n<ol>\\n<li><p>级别之间是包含的关系，意思是如果你设置日志级别是trace，则大于等于这个级别的日志都会输出。</p>\\n</li>\\n<li><p>基本上默认的级别没多大区别，就是一个默认的设定。你可以通过它的API自己定义级别。你也可以随意调用这些方法，不过你要在配置文件里面好好处理了，否则就起不到日志的作用了，而且也不易读，相当于一个规范，你要完全定义一套也可以，不用没多大必要。</p>\\n</li>\\n</ol>\\n<hr>\\n<ul>\\n<li><p>trace： 是追踪，就是程序推进以下，你就可以写个trace输出，所以trace应该会特别多，不过没关系，我们可以设置最低日志级别不让他输出。</p>\\n</li>\\n<li><p>debug： 调试么，我一般就只用这个作为最低级别，trace压根不用。是在没办法就用eclipse或者idea的debug功能就好了么。</p>\\n</li>\\n<li><p>info： 输出一下你感兴趣的或者重要的信息，这个用的最多了。</p>\\n</li>\\n<li><p>warn： 有些信息不是错误信息，但是也要给程序员的一些提示，类似于eclipse中代码的验证不是有error 和warn。</p>\\n</li>\\n<li><p>error： 错误信息。用的也比较多。</p>\\n</li>\\n<li><p>fatal： 级别比较高了。重大错误，这种级别你可以直接停止程序了，是不应该出现的错误么！不用那么紧张，其实就是一个程度的问题。</p>\\n</li>\\n</ul>\\n<hr>\\n</blockquote>\\n<p>到这里我们就知道，为什么会只打印两条log了，打印的两条log分别是：error级别以及fatal级别的log。</p>\\n<hr>\\n<p><em>参考：<a href=\\\"http://www.cnblogs.com/leo-lsw/p/log4j2tutorial.html\\\">http://www.cnblogs.com/leo-lsw/p/log4j2tutorial.html</a></em></p>\\n<p><em>参考：<a href=\\\"https://my.oschina.net/xianggao/blog/523401\\\">https://my.oschina.net/xianggao/blog/523401</a></em></p>\\n\";","export default \"<p>前几天碰到一套经典的题，《买卖股票》系列，其中最简单那道题我之前还在字节碰到过，然而当时我菜得连最简单的题都没做出来</p>\\n<p>这个系列从简到难思路变化还挺大，但有趣的是中等难度之后的题开始涉及到状态机的思路，我觉得可以整理一下</p>\\n<p>本篇所有的思路都是整理自<strong>官方题解</strong>以及<a href=\\\"https://leetcode-cn.com/problems/best-time-to-buy-and-sell-stock-iii/solution/dong-tai-gui-hua-by-liweiwei1419-7/\\\">liweiwei1419</a>同学的思路</p>\\n<h3 id=\\\"ⅰ\\\">Ⅰ</h3>\\n<p>给定一个数组，它的第 <code>i </code>个元素是一支给定股票第 i 天的价格。</p>\\n<p>如果你最多只允许完成一笔交易（即买入和卖出一支股票一次），设计一个算法来计算你所能获取的最大利润。</p>\\n<p><strong>注意：</strong>你不能在买入股票前卖出股票。</p>\\n<p>示例 1:</p>\\n<blockquote>\\n<p>输入: [7,1,5,3,6,4]\\n输出: 5\\n解释: 在第 2 天（股票价格 = 1）的时候买入，在第 5 天（股票价格 = 6）的时候卖出，最大利润 = 6-1 = 5 。\\n注意利润不能是 7-1 = 6, 因为卖出价格需要大于买入价格；同时，你不能在买入前卖出股票。</p>\\n</blockquote>\\n<p>示例 2:</p>\\n<blockquote>\\n<p>输入: [7,6,4,3,1]\\n输出: 0\\n解释: 在这种情况下, 没有交易完成, 所以最大利润为 0。</p>\\n</blockquote>\\n<h4 id=\\\"on\\\">O(n)</h4>\\n<p>因为只能做一次交易，所以每天都把<strong>之前天</strong>的最小值当作<strong>入股天</strong>，然后把当天当中<strong>出股天</strong>，求得最大利益：</p>\\n<pre><code class=\\\"hljs language-java\\\"><span class=\\\"hljs-keyword\\\">public</span> <span class=\\\"hljs-type\\\">int</span> <span class=\\\"hljs-title function_\\\">maxProfit</span><span class=\\\"hljs-params\\\">(<span class=\\\"hljs-type\\\">int</span>[] prices)</span> {\\n    <span class=\\\"hljs-keyword\\\">if</span> (prices.length == <span class=\\\"hljs-number\\\">0</span>) <span class=\\\"hljs-keyword\\\">return</span> <span class=\\\"hljs-number\\\">0</span>;\\n    <span class=\\\"hljs-type\\\">int</span> <span class=\\\"hljs-variable\\\">max</span> <span class=\\\"hljs-operator\\\">=</span> <span class=\\\"hljs-number\\\">0</span>, min = prices[<span class=\\\"hljs-number\\\">0</span>];\\n    <span class=\\\"hljs-keyword\\\">for</span> (<span class=\\\"hljs-type\\\">int</span> <span class=\\\"hljs-variable\\\">i</span> <span class=\\\"hljs-operator\\\">=</span> <span class=\\\"hljs-number\\\">1</span>; i &lt; prices.length; i++) {\\n        max = Math.max(max, prices[i] - min);\\n        min = Math.min(min, prices[i]);\\n    }\\n    <span class=\\\"hljs-keyword\\\">return</span> max;\\n}\\n</code></pre>\\n<h3 id=\\\"ⅱ\\\">Ⅱ</h3>\\n<p>给定一个数组，它的第 <code>i</code> 个元素是一支给定股票第 i 天的价格。</p>\\n<p>设计一个算法来计算你所能获取的最大利润。你可以尽可能地完成更多的交易（多次买卖一支股票）。</p>\\n<p><strong>注意：</strong>你不能同时参与多笔交易（你必须在再次购买前出售掉之前的股票）。</p>\\n<p>示例 1:</p>\\n<blockquote>\\n<p>输入: [7,1,5,3,6,4]\\n输出: 7\\n解释: 在第 2 天（股票价格 = 1）的时候买入，在第 3 天（股票价格 = 5）的时候卖出, 这笔交易所能获得利润 = 5-1 = 4 。\\n随后，在第 4 天（股票价格 = 3）的时候买入，在第 5 天（股票价格 = 6）的时候卖出, 这笔交易所能获得利润 = 6-3 = 3 。</p>\\n</blockquote>\\n<p>示例 2:</p>\\n<blockquote>\\n<p>输入: [1,2,3,4,5]\\n输出: 4\\n解释: 在第 1 天（股票价格 = 1）的时候买入，在第 5 天 （股票价格 = 5）的时候卖出, 这笔交易所能获得利润 = 5-1 = 4 。\\n注意你不能在第 1 天和第 2 天接连购买股票，之后再将它们卖出。\\n因为这样属于同时参与了多笔交易，你必须在再次购买前出售掉之前的股票。</p>\\n</blockquote>\\n<p>示例 3:</p>\\n<blockquote>\\n<p>输入: [7,6,4,3,1]\\n输出: 0\\n解释: 在这种情况下, 没有交易完成, 所以最大利润为 0。</p>\\n</blockquote>\\n<h4 id=\\\"on---线性贪婪\\\">O(n) - 线性贪婪</h4>\\n<p>因为可以进行<strong>无数次</strong>交易，所以我们以贪婪的思路来看：当每天交易价比前一天交易价大的时候，我们就进行：<strong>昨天入股今天出股</strong>的交易，争取到每一次的正收益：</p>\\n<p><img src=\\\"../../../public/img/20200710161343.png\\\" alt=\\\"\\\"></p>\\n<p>如图以谷峰法的思路来延伸到贪心思路，其中 A + B 肯定大于 C</p>\\n<p><img src=\\\"../../../public/img/20200710161356.png\\\" alt=\\\"\\\"></p>\\n<p>而连续上升也等于该上升区间最高处减去最低处，这时候有正收益：</p>\\n<p><code>price[6]-price[5] + price[5]-price[4]+price[4]-price[3]</code></p>\\n<p>虽然从实际上来说我们只进行了<code>price[6]-price[3]</code>的这一次交易，即第三天买入第六天卖出</p>\\n<p>于是</p>\\n<pre><code class=\\\"hljs language-java\\\"><span class=\\\"hljs-keyword\\\">public</span> <span class=\\\"hljs-type\\\">int</span> <span class=\\\"hljs-title function_\\\">maxProfit</span><span class=\\\"hljs-params\\\">(<span class=\\\"hljs-type\\\">int</span>[] prices)</span> {\\n    <span class=\\\"hljs-type\\\">int</span> <span class=\\\"hljs-variable\\\">count</span> <span class=\\\"hljs-operator\\\">=</span> <span class=\\\"hljs-number\\\">0</span>;\\n    <span class=\\\"hljs-keyword\\\">for</span> (<span class=\\\"hljs-type\\\">int</span> <span class=\\\"hljs-variable\\\">i</span> <span class=\\\"hljs-operator\\\">=</span> <span class=\\\"hljs-number\\\">1</span>; i &lt; prices.length; i++) {\\n        <span class=\\\"hljs-keyword\\\">if</span> (prices[i] &gt; prices[i - <span class=\\\"hljs-number\\\">1</span>])\\n            count += prices[i] - prices[i - <span class=\\\"hljs-number\\\">1</span>];\\n    }\\n    <span class=\\\"hljs-keyword\\\">return</span> count;\\n}\\n</code></pre>\\n<h4 id=\\\"on---动态规划状态-1\\\">O(n) - 动态规划+状态 1</h4>\\n<p>我们将<strong>第 i 天结束后的持股状态</strong>分为：0、不持股；1、持股之后，我们某一天的收益可以分为：</p>\\n<ol start=\\\"0\\\">\\n<li><strong>不持股</strong>：代表前一天持股但是<strong>今天卖了</strong>，或者干脆前一天开始就不再持股了；</li>\\n<li><strong>持股</strong>：代表前一天不持股但是<strong>今天买了</strong>，或者干脆前一天开始就已经持股了；</li>\\n</ol>\\n<p>于是状态转移方程为：</p>\\n<p><span class=\\\"katex-display katexp\\\"><span class=\\\"katex-display\\\"><span class=\\\"katex\\\"><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:1em;vertical-align:-0.25em;\\\"></span><span class=\\\"mord mathnormal\\\">d</span><span class=\\\"mord mathnormal\\\">p</span><span class=\\\"mopen\\\">[</span><span class=\\\"mord mathnormal\\\">i</span><span class=\\\"mclose\\\">]</span><span class=\\\"mopen\\\">[</span><span class=\\\"mord\\\">0</span><span class=\\\"mclose\\\">]</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2778em;\\\"></span><span class=\\\"mrel\\\">=</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2778em;\\\"></span></span><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:1em;vertical-align:-0.25em;\\\"></span><span class=\\\"mord mathnormal\\\">ma</span><span class=\\\"mord mathnormal\\\">x</span><span class=\\\"mopen\\\">(</span><span class=\\\"mord mathnormal\\\">d</span><span class=\\\"mord mathnormal\\\">p</span><span class=\\\"mopen\\\">[</span><span class=\\\"mord mathnormal\\\">i</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2222em;\\\"></span><span class=\\\"mbin\\\">−</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2222em;\\\"></span></span><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:1em;vertical-align:-0.25em;\\\"></span><span class=\\\"mord\\\">1</span><span class=\\\"mclose\\\">]</span><span class=\\\"mopen\\\">[</span><span class=\\\"mord\\\">0</span><span class=\\\"mclose\\\">]</span><span class=\\\"mpunct\\\">,</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.5em;\\\"></span><span class=\\\"mspace\\\" style=\\\"margin-right:0.1667em;\\\"></span><span class=\\\"mord mathnormal\\\">d</span><span class=\\\"mord mathnormal\\\">p</span><span class=\\\"mopen\\\">[</span><span class=\\\"mord mathnormal\\\">i</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2222em;\\\"></span><span class=\\\"mbin\\\">−</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2222em;\\\"></span></span><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:1em;vertical-align:-0.25em;\\\"></span><span class=\\\"mord\\\">1</span><span class=\\\"mclose\\\">]</span><span class=\\\"mopen\\\">[</span><span class=\\\"mord\\\">1</span><span class=\\\"mclose\\\">]</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2222em;\\\"></span><span class=\\\"mbin\\\">+</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2222em;\\\"></span></span><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:1em;vertical-align:-0.25em;\\\"></span><span class=\\\"mord mathnormal\\\">p</span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.02778em;\\\">r</span><span class=\\\"mord mathnormal\\\">i</span><span class=\\\"mord mathnormal\\\">ces</span><span class=\\\"mopen\\\">[</span><span class=\\\"mord mathnormal\\\">i</span><span class=\\\"mclose\\\">])</span></span><span class=\\\"mspace newline\\\"></span><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:1em;vertical-align:-0.25em;\\\"></span><span class=\\\"mord mathnormal\\\">d</span><span class=\\\"mord mathnormal\\\">p</span><span class=\\\"mopen\\\">[</span><span class=\\\"mord mathnormal\\\">i</span><span class=\\\"mclose\\\">]</span><span class=\\\"mopen\\\">[</span><span class=\\\"mord\\\">1</span><span class=\\\"mclose\\\">]</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2778em;\\\"></span><span class=\\\"mrel\\\">=</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2778em;\\\"></span></span><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:1em;vertical-align:-0.25em;\\\"></span><span class=\\\"mord mathnormal\\\">ma</span><span class=\\\"mord mathnormal\\\">x</span><span class=\\\"mopen\\\">(</span><span class=\\\"mord mathnormal\\\">d</span><span class=\\\"mord mathnormal\\\">p</span><span class=\\\"mopen\\\">[</span><span class=\\\"mord mathnormal\\\">i</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2222em;\\\"></span><span class=\\\"mbin\\\">−</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2222em;\\\"></span></span><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:1em;vertical-align:-0.25em;\\\"></span><span class=\\\"mord\\\">1</span><span class=\\\"mclose\\\">]</span><span class=\\\"mopen\\\">[</span><span class=\\\"mord\\\">1</span><span class=\\\"mclose\\\">]</span><span class=\\\"mpunct\\\">,</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.5em;\\\"></span><span class=\\\"mspace\\\" style=\\\"margin-right:0.1667em;\\\"></span><span class=\\\"mord mathnormal\\\">d</span><span class=\\\"mord mathnormal\\\">p</span><span class=\\\"mopen\\\">[</span><span class=\\\"mord mathnormal\\\">i</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2222em;\\\"></span><span class=\\\"mbin\\\">−</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2222em;\\\"></span></span><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:1em;vertical-align:-0.25em;\\\"></span><span class=\\\"mord\\\">1</span><span class=\\\"mclose\\\">]</span><span class=\\\"mopen\\\">[</span><span class=\\\"mord\\\">0</span><span class=\\\"mclose\\\">]</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2222em;\\\"></span><span class=\\\"mbin\\\">−</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2222em;\\\"></span></span><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:1em;vertical-align:-0.25em;\\\"></span><span class=\\\"mord mathnormal\\\">p</span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.02778em;\\\">r</span><span class=\\\"mord mathnormal\\\">i</span><span class=\\\"mord mathnormal\\\">ces</span><span class=\\\"mopen\\\">[</span><span class=\\\"mord mathnormal\\\">i</span><span class=\\\"mclose\\\">])</span></span></span></span></span></span></p>\\n<p>其中初始状态：</p>\\n<p><span class=\\\"katex-display katexp\\\"><span class=\\\"katex-display\\\"><span class=\\\"katex\\\"><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:3em;vertical-align:-1.25em;\\\"></span><span class=\\\"mord\\\"><span class=\\\"mtable\\\"><span class=\\\"col-align-r\\\"><span class=\\\"vlist-t vlist-t2\\\"><span class=\\\"vlist-r\\\"><span class=\\\"vlist\\\" style=\\\"height:1.75em;\\\"><span style=\\\"top:-3.91em;\\\"><span class=\\\"pstrut\\\" style=\\\"height:3em;\\\"></span><span class=\\\"mord\\\"><span class=\\\"mord mathnormal\\\">d</span><span class=\\\"mord mathnormal\\\">p</span><span class=\\\"mopen\\\">[</span><span class=\\\"mord\\\">0</span><span class=\\\"mclose\\\">]</span><span class=\\\"mopen\\\">[</span><span class=\\\"mord\\\">0</span><span class=\\\"mclose\\\">]</span></span></span><span style=\\\"top:-2.41em;\\\"><span class=\\\"pstrut\\\" style=\\\"height:3em;\\\"></span><span class=\\\"mord\\\"><span class=\\\"mord mathnormal\\\">d</span><span class=\\\"mord mathnormal\\\">p</span><span class=\\\"mopen\\\">[</span><span class=\\\"mord\\\">0</span><span class=\\\"mclose\\\">]</span><span class=\\\"mopen\\\">[</span><span class=\\\"mord\\\">1</span><span class=\\\"mclose\\\">]</span></span></span></span><span class=\\\"vlist-s\\\">​</span></span><span class=\\\"vlist-r\\\"><span class=\\\"vlist\\\" style=\\\"height:1.25em;\\\"><span></span></span></span></span></span><span class=\\\"col-align-l\\\"><span class=\\\"vlist-t vlist-t2\\\"><span class=\\\"vlist-r\\\"><span class=\\\"vlist\\\" style=\\\"height:1.75em;\\\"><span style=\\\"top:-3.91em;\\\"><span class=\\\"pstrut\\\" style=\\\"height:3em;\\\"></span><span class=\\\"mord\\\"><span class=\\\"mord\\\"></span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2778em;\\\"></span><span class=\\\"mrel\\\">=</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2778em;\\\"></span><span class=\\\"mord\\\">0</span></span></span><span style=\\\"top:-2.41em;\\\"><span class=\\\"pstrut\\\" style=\\\"height:3em;\\\"></span><span class=\\\"mord\\\"><span class=\\\"mord\\\"></span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2778em;\\\"></span><span class=\\\"mrel\\\">=</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2778em;\\\"></span><span class=\\\"mord\\\">−</span><span class=\\\"mord mathnormal\\\">p</span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.02778em;\\\">r</span><span class=\\\"mord mathnormal\\\">i</span><span class=\\\"mord mathnormal\\\">ces</span><span class=\\\"mopen\\\">[</span><span class=\\\"mord\\\">0</span><span class=\\\"mclose\\\">]</span></span></span></span><span class=\\\"vlist-s\\\">​</span></span><span class=\\\"vlist-r\\\"><span class=\\\"vlist\\\" style=\\\"height:1.25em;\\\"><span></span></span></span></span></span></span></span></span></span></span></span></span></p>\\n<p>实际上我们的状态转移方程只依赖前一项，所以不必使用二维 dp，压缩至一维然后对前一项做缓存就行了，于是代码：</p>\\n<pre><code class=\\\"hljs language-java\\\"><span class=\\\"hljs-keyword\\\">public</span> <span class=\\\"hljs-type\\\">int</span> <span class=\\\"hljs-title function_\\\">maxProfit</span><span class=\\\"hljs-params\\\">(<span class=\\\"hljs-type\\\">int</span>[] prices)</span> {\\n    <span class=\\\"hljs-type\\\">int</span> <span class=\\\"hljs-variable\\\">n</span> <span class=\\\"hljs-operator\\\">=</span> prices.length;\\n    <span class=\\\"hljs-type\\\">int</span>[] dp = <span class=\\\"hljs-keyword\\\">new</span> <span class=\\\"hljs-title class_\\\">int</span>[<span class=\\\"hljs-number\\\">2</span>];\\n    dp[<span class=\\\"hljs-number\\\">0</span>] = <span class=\\\"hljs-number\\\">0</span>;\\n    dp[<span class=\\\"hljs-number\\\">1</span>] = -prices[<span class=\\\"hljs-number\\\">0</span>];\\n    <span class=\\\"hljs-keyword\\\">for</span> (<span class=\\\"hljs-type\\\">int</span> <span class=\\\"hljs-variable\\\">i</span> <span class=\\\"hljs-operator\\\">=</span> <span class=\\\"hljs-number\\\">1</span>; i &lt; n; i++) {\\n        <span class=\\\"hljs-type\\\">int</span> <span class=\\\"hljs-variable\\\">dp0</span> <span class=\\\"hljs-operator\\\">=</span> Math.max(dp[<span class=\\\"hljs-number\\\">0</span>], dp[<span class=\\\"hljs-number\\\">1</span>] + prices[i]);\\n        <span class=\\\"hljs-type\\\">int</span> <span class=\\\"hljs-variable\\\">dp1</span> <span class=\\\"hljs-operator\\\">=</span> Math.max(dp[<span class=\\\"hljs-number\\\">1</span>], dp[<span class=\\\"hljs-number\\\">0</span>] - prices[i]);\\n        dp[<span class=\\\"hljs-number\\\">0</span>] = dp0;\\n        dp[<span class=\\\"hljs-number\\\">1</span>] = dp1;\\n    }\\n    <span class=\\\"hljs-keyword\\\">return</span> Math.max(<span class=\\\"hljs-number\\\">0</span>, Math.max(dp[<span class=\\\"hljs-number\\\">0</span>], dp[<span class=\\\"hljs-number\\\">1</span>]));\\n}\\n</code></pre>\\n<h3 id=\\\"ⅱ手续费\\\">Ⅱ+手续费</h3>\\n<p>给定一个整数数组 <code>prices</code>，其中第 <code>i </code>个元素代表了第 <code>i </code>天的股票价格 ；非负整数 <code>fee</code> 代表了交易股票的手续费用。</p>\\n<p>你可以无限次地完成交易，但是你每笔交易都需要付手续费。如果你已经购买了一个股票，在卖出它之前你就不能再继续购买股票了。</p>\\n<p>返回获得利润的最大值。</p>\\n<p><strong>注意：</strong>这里的一笔交易指买入持有并卖出股票的整个过程，每笔交易你只需要为支付一次手续费。</p>\\n<p>示例 1:</p>\\n<blockquote>\\n<p>输入: prices = [1, 3, 2, 8, 4, 9], fee = 2\\n输出: 8\\n解释: 能够达到的最大利润:<br>在此处买入 prices[0] = 1\\n在此处卖出 prices[3] = 8\\n在此处买入 prices[4] = 4\\n在此处卖出 prices[5] = 9\\n总利润: ((8 - 1) - 2) + ((9 - 4) - 2) = 8.</p>\\n</blockquote>\\n<h4 id=\\\"on---动态规划状态-2\\\">O(n) - 动态规划+状态 2</h4>\\n<p>因为有了手续费，我们不能从贪婪的角度去解题了，但是我们还是能以 dp 加状态去打，只是状态转移方程要稍微修改一下，我们在不持股的时候，如果<strong>前一天持股今天卖了</strong>，那么就要手续费：</p>\\n<p><span class=\\\"katex-display katexp\\\"><span class=\\\"katex-display\\\"><span class=\\\"katex\\\"><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:3em;vertical-align:-1.25em;\\\"></span><span class=\\\"mord\\\"><span class=\\\"mtable\\\"><span class=\\\"col-align-r\\\"><span class=\\\"vlist-t vlist-t2\\\"><span class=\\\"vlist-r\\\"><span class=\\\"vlist\\\" style=\\\"height:1.75em;\\\"><span style=\\\"top:-3.91em;\\\"><span class=\\\"pstrut\\\" style=\\\"height:3em;\\\"></span><span class=\\\"mord\\\"><span class=\\\"mord mathnormal\\\">d</span><span class=\\\"mord mathnormal\\\">p</span><span class=\\\"mopen\\\">[</span><span class=\\\"mord mathnormal\\\">i</span><span class=\\\"mclose\\\">]</span><span class=\\\"mopen\\\">[</span><span class=\\\"mord\\\">0</span><span class=\\\"mclose\\\">]</span></span></span><span style=\\\"top:-2.41em;\\\"><span class=\\\"pstrut\\\" style=\\\"height:3em;\\\"></span><span class=\\\"mord\\\"><span class=\\\"mord mathnormal\\\">d</span><span class=\\\"mord mathnormal\\\">p</span><span class=\\\"mopen\\\">[</span><span class=\\\"mord mathnormal\\\">i</span><span class=\\\"mclose\\\">]</span><span class=\\\"mopen\\\">[</span><span class=\\\"mord\\\">1</span><span class=\\\"mclose\\\">]</span></span></span></span><span class=\\\"vlist-s\\\">​</span></span><span class=\\\"vlist-r\\\"><span class=\\\"vlist\\\" style=\\\"height:1.25em;\\\"><span></span></span></span></span></span><span class=\\\"col-align-l\\\"><span class=\\\"vlist-t vlist-t2\\\"><span class=\\\"vlist-r\\\"><span class=\\\"vlist\\\" style=\\\"height:1.75em;\\\"><span style=\\\"top:-3.91em;\\\"><span class=\\\"pstrut\\\" style=\\\"height:3em;\\\"></span><span class=\\\"mord\\\"><span class=\\\"mord\\\"></span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2778em;\\\"></span><span class=\\\"mrel\\\">=</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2778em;\\\"></span><span class=\\\"mord mathnormal\\\">ma</span><span class=\\\"mord mathnormal\\\">x</span><span class=\\\"mopen\\\">(</span><span class=\\\"mord mathnormal\\\">d</span><span class=\\\"mord mathnormal\\\">p</span><span class=\\\"mopen\\\">[</span><span class=\\\"mord mathnormal\\\">i</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2222em;\\\"></span><span class=\\\"mbin\\\">−</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2222em;\\\"></span><span class=\\\"mord\\\">1</span><span class=\\\"mclose\\\">]</span><span class=\\\"mopen\\\">[</span><span class=\\\"mord\\\">0</span><span class=\\\"mclose\\\">]</span><span class=\\\"mpunct\\\">,</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.5em;\\\"></span><span class=\\\"mspace\\\" style=\\\"margin-right:0.1667em;\\\"></span><span class=\\\"mord mathnormal\\\">d</span><span class=\\\"mord mathnormal\\\">p</span><span class=\\\"mopen\\\">[</span><span class=\\\"mord mathnormal\\\">i</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2222em;\\\"></span><span class=\\\"mbin\\\">−</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2222em;\\\"></span><span class=\\\"mord\\\">1</span><span class=\\\"mclose\\\">]</span><span class=\\\"mopen\\\">[</span><span class=\\\"mord\\\">1</span><span class=\\\"mclose\\\">]</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2222em;\\\"></span><span class=\\\"mbin\\\">+</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2222em;\\\"></span><span class=\\\"mord mathnormal\\\">p</span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.02778em;\\\">r</span><span class=\\\"mord mathnormal\\\">i</span><span class=\\\"mord mathnormal\\\">ces</span><span class=\\\"mopen\\\">[</span><span class=\\\"mord mathnormal\\\">i</span><span class=\\\"mclose\\\">]</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2222em;\\\"></span><span class=\\\"mbin\\\">−</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2222em;\\\"></span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.10764em;\\\">f</span><span class=\\\"mord mathnormal\\\">ee</span><span class=\\\"mclose\\\">)</span></span></span><span style=\\\"top:-2.41em;\\\"><span class=\\\"pstrut\\\" style=\\\"height:3em;\\\"></span><span class=\\\"mord\\\"><span class=\\\"mord\\\"></span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2778em;\\\"></span><span class=\\\"mrel\\\">=</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2778em;\\\"></span><span class=\\\"mord mathnormal\\\">ma</span><span class=\\\"mord mathnormal\\\">x</span><span class=\\\"mopen\\\">(</span><span class=\\\"mord mathnormal\\\">d</span><span class=\\\"mord mathnormal\\\">p</span><span class=\\\"mopen\\\">[</span><span class=\\\"mord mathnormal\\\">i</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2222em;\\\"></span><span class=\\\"mbin\\\">−</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2222em;\\\"></span><span class=\\\"mord\\\">1</span><span class=\\\"mclose\\\">]</span><span class=\\\"mopen\\\">[</span><span class=\\\"mord\\\">1</span><span class=\\\"mclose\\\">]</span><span class=\\\"mpunct\\\">,</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.5em;\\\"></span><span class=\\\"mspace\\\" style=\\\"margin-right:0.1667em;\\\"></span><span class=\\\"mord mathnormal\\\">d</span><span class=\\\"mord mathnormal\\\">p</span><span class=\\\"mopen\\\">[</span><span class=\\\"mord mathnormal\\\">i</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2222em;\\\"></span><span class=\\\"mbin\\\">−</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2222em;\\\"></span><span class=\\\"mord\\\">1</span><span class=\\\"mclose\\\">]</span><span class=\\\"mopen\\\">[</span><span class=\\\"mord\\\">0</span><span class=\\\"mclose\\\">]</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2222em;\\\"></span><span class=\\\"mbin\\\">−</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2222em;\\\"></span><span class=\\\"mord mathnormal\\\">p</span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.02778em;\\\">r</span><span class=\\\"mord mathnormal\\\">i</span><span class=\\\"mord mathnormal\\\">ces</span><span class=\\\"mopen\\\">[</span><span class=\\\"mord mathnormal\\\">i</span><span class=\\\"mclose\\\">])</span></span></span></span><span class=\\\"vlist-s\\\">​</span></span><span class=\\\"vlist-r\\\"><span class=\\\"vlist\\\" style=\\\"height:1.25em;\\\"><span></span></span></span></span></span></span></span></span></span></span></span></span></p>\\n<pre><code class=\\\"hljs language-java\\\"><span class=\\\"hljs-keyword\\\">public</span> <span class=\\\"hljs-type\\\">int</span> <span class=\\\"hljs-title function_\\\">maxProfit</span><span class=\\\"hljs-params\\\">(<span class=\\\"hljs-type\\\">int</span>[] prices, <span class=\\\"hljs-type\\\">int</span> fee)</span> {\\n    <span class=\\\"hljs-type\\\">int</span> <span class=\\\"hljs-variable\\\">n</span> <span class=\\\"hljs-operator\\\">=</span> prices.length;\\n    <span class=\\\"hljs-type\\\">int</span>[] dp = <span class=\\\"hljs-keyword\\\">new</span> <span class=\\\"hljs-title class_\\\">int</span>[<span class=\\\"hljs-number\\\">2</span>];\\n    dp[<span class=\\\"hljs-number\\\">0</span>] = <span class=\\\"hljs-number\\\">0</span>;\\n    dp[<span class=\\\"hljs-number\\\">1</span>] = -prices[<span class=\\\"hljs-number\\\">0</span>];\\n    <span class=\\\"hljs-keyword\\\">for</span> (<span class=\\\"hljs-type\\\">int</span> <span class=\\\"hljs-variable\\\">i</span> <span class=\\\"hljs-operator\\\">=</span> <span class=\\\"hljs-number\\\">1</span>; i &lt; n; i++) {\\n        <span class=\\\"hljs-type\\\">int</span> <span class=\\\"hljs-variable\\\">dp0</span> <span class=\\\"hljs-operator\\\">=</span> Math.max(dp[<span class=\\\"hljs-number\\\">0</span>], dp[<span class=\\\"hljs-number\\\">1</span>] + prices[i] - fee);\\n        <span class=\\\"hljs-type\\\">int</span> <span class=\\\"hljs-variable\\\">dp1</span> <span class=\\\"hljs-operator\\\">=</span> Math.max(dp[<span class=\\\"hljs-number\\\">1</span>], dp[<span class=\\\"hljs-number\\\">0</span>] - prices[i]);\\n\\n        dp[<span class=\\\"hljs-number\\\">0</span>] = dp0;\\n        dp[<span class=\\\"hljs-number\\\">1</span>] = dp1;\\n    }\\n    <span class=\\\"hljs-keyword\\\">return</span> Math.max(<span class=\\\"hljs-number\\\">0</span>, Math.max(dp[<span class=\\\"hljs-number\\\">0</span>], dp[<span class=\\\"hljs-number\\\">1</span>]));\\n}\\n</code></pre>\\n<h3 id=\\\"ⅱ冷冻期\\\">Ⅱ+冷冻期</h3>\\n<p>给定一个整数数组，其中第 <code>i </code>个元素代表了第 i 天的股票价格 。</p>\\n<p>设计一个算法计算出最大利润。在满足以下约束条件下，你可以尽可能地完成更多的交易（多次买卖一支股票）:</p>\\n<p>你不能同时参与多笔交易（你必须在再次购买前出售掉之前的股票）。\\n卖出股票后，你无法在第二天买入股票 (即冷冻期为 1 天)。\\n示例:</p>\\n<blockquote>\\n<p>输入: [1,2,3,0,2]\\n输出: 3\\n解释: 对应的交易状态为: [买入, 卖出, 冷冻期, 买入, 卖出]</p>\\n</blockquote>\\n<h4 id=\\\"on---动态规划状态-3\\\">O(n) - 动态规划+状态 3</h4>\\n<p>因为有个冻结的状态，所以我们的状态机里加一种状态：0、持股 + 不冷冻；1、不持股 + 冷冻；2、不持股 + 不冷冻，于是我们某一天的收益可以分为：</p>\\n<ol start=\\\"0\\\">\\n<li><strong>持股+不冷冻</strong>：前一天不持股且不冷冻的时候入今天的股，或者前一天就已经持股了；</li>\\n<li><strong>不持股+冷冻</strong>：前一天持股并今天进行了交易；</li>\\n<li><strong>不持股+不冷冻</strong>：前一天是不持股冷冻期今天解冻了，或者前一天就已经是不持股不冷冻的状态；</li>\\n</ol>\\n<p>于是状态转移方程为：</p>\\n<p><span class=\\\"katex-display katexp\\\"><span class=\\\"katex-display\\\"><span class=\\\"katex\\\"><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:4.5em;vertical-align:-2em;\\\"></span><span class=\\\"mord\\\"><span class=\\\"mtable\\\"><span class=\\\"col-align-r\\\"><span class=\\\"vlist-t vlist-t2\\\"><span class=\\\"vlist-r\\\"><span class=\\\"vlist\\\" style=\\\"height:2.5em;\\\"><span style=\\\"top:-4.66em;\\\"><span class=\\\"pstrut\\\" style=\\\"height:3em;\\\"></span><span class=\\\"mord\\\"><span class=\\\"mord mathnormal\\\">d</span><span class=\\\"mord mathnormal\\\">p</span><span class=\\\"mopen\\\">[</span><span class=\\\"mord mathnormal\\\">i</span><span class=\\\"mclose\\\">]</span><span class=\\\"mopen\\\">[</span><span class=\\\"mord\\\">0</span><span class=\\\"mclose\\\">]</span></span></span><span style=\\\"top:-3.16em;\\\"><span class=\\\"pstrut\\\" style=\\\"height:3em;\\\"></span><span class=\\\"mord\\\"><span class=\\\"mord mathnormal\\\">d</span><span class=\\\"mord mathnormal\\\">p</span><span class=\\\"mopen\\\">[</span><span class=\\\"mord mathnormal\\\">i</span><span class=\\\"mclose\\\">]</span><span class=\\\"mopen\\\">[</span><span class=\\\"mord\\\">1</span><span class=\\\"mclose\\\">]</span></span></span><span style=\\\"top:-1.66em;\\\"><span class=\\\"pstrut\\\" style=\\\"height:3em;\\\"></span><span class=\\\"mord\\\"><span class=\\\"mord mathnormal\\\">d</span><span class=\\\"mord mathnormal\\\">p</span><span class=\\\"mopen\\\">[</span><span class=\\\"mord mathnormal\\\">i</span><span class=\\\"mclose\\\">]</span><span class=\\\"mopen\\\">[</span><span class=\\\"mord\\\">2</span><span class=\\\"mclose\\\">]</span></span></span></span><span class=\\\"vlist-s\\\">​</span></span><span class=\\\"vlist-r\\\"><span class=\\\"vlist\\\" style=\\\"height:2em;\\\"><span></span></span></span></span></span><span class=\\\"col-align-l\\\"><span class=\\\"vlist-t vlist-t2\\\"><span class=\\\"vlist-r\\\"><span class=\\\"vlist\\\" style=\\\"height:2.5em;\\\"><span style=\\\"top:-4.66em;\\\"><span class=\\\"pstrut\\\" style=\\\"height:3em;\\\"></span><span class=\\\"mord\\\"><span class=\\\"mord\\\"></span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2778em;\\\"></span><span class=\\\"mrel\\\">=</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2778em;\\\"></span><span class=\\\"mord mathnormal\\\">ma</span><span class=\\\"mord mathnormal\\\">x</span><span class=\\\"mopen\\\">(</span><span class=\\\"mord mathnormal\\\">d</span><span class=\\\"mord mathnormal\\\">p</span><span class=\\\"mopen\\\">[</span><span class=\\\"mord mathnormal\\\">i</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2222em;\\\"></span><span class=\\\"mbin\\\">−</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2222em;\\\"></span><span class=\\\"mord\\\">1</span><span class=\\\"mclose\\\">]</span><span class=\\\"mopen\\\">[</span><span class=\\\"mord\\\">0</span><span class=\\\"mclose\\\">]</span><span class=\\\"mpunct\\\">,</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.5em;\\\"></span><span class=\\\"mspace\\\" style=\\\"margin-right:0.1667em;\\\"></span><span class=\\\"mord mathnormal\\\">d</span><span class=\\\"mord mathnormal\\\">p</span><span class=\\\"mopen\\\">[</span><span class=\\\"mord mathnormal\\\">i</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2222em;\\\"></span><span class=\\\"mbin\\\">−</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2222em;\\\"></span><span class=\\\"mord\\\">1</span><span class=\\\"mclose\\\">]</span><span class=\\\"mopen\\\">[</span><span class=\\\"mord\\\">2</span><span class=\\\"mclose\\\">]</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2222em;\\\"></span><span class=\\\"mbin\\\">−</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2222em;\\\"></span><span class=\\\"mord mathnormal\\\">p</span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.02778em;\\\">r</span><span class=\\\"mord mathnormal\\\">i</span><span class=\\\"mord mathnormal\\\">ces</span><span class=\\\"mopen\\\">[</span><span class=\\\"mord mathnormal\\\">i</span><span class=\\\"mclose\\\">])</span></span></span><span style=\\\"top:-3.16em;\\\"><span class=\\\"pstrut\\\" style=\\\"height:3em;\\\"></span><span class=\\\"mord\\\"><span class=\\\"mord\\\"></span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2778em;\\\"></span><span class=\\\"mrel\\\">=</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2778em;\\\"></span><span class=\\\"mord mathnormal\\\">d</span><span class=\\\"mord mathnormal\\\">p</span><span class=\\\"mopen\\\">[</span><span class=\\\"mord mathnormal\\\">i</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2222em;\\\"></span><span class=\\\"mbin\\\">−</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2222em;\\\"></span><span class=\\\"mord\\\">1</span><span class=\\\"mclose\\\">]</span><span class=\\\"mopen\\\">[</span><span class=\\\"mord\\\">0</span><span class=\\\"mclose\\\">]</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2222em;\\\"></span><span class=\\\"mbin\\\">+</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2222em;\\\"></span><span class=\\\"mord mathnormal\\\">p</span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.02778em;\\\">r</span><span class=\\\"mord mathnormal\\\">i</span><span class=\\\"mord mathnormal\\\">ces</span><span class=\\\"mopen\\\">[</span><span class=\\\"mord mathnormal\\\">i</span><span class=\\\"mclose\\\">]</span></span></span><span style=\\\"top:-1.66em;\\\"><span class=\\\"pstrut\\\" style=\\\"height:3em;\\\"></span><span class=\\\"mord\\\"><span class=\\\"mord\\\"></span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2778em;\\\"></span><span class=\\\"mrel\\\">=</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2778em;\\\"></span><span class=\\\"mord mathnormal\\\">ma</span><span class=\\\"mord mathnormal\\\">x</span><span class=\\\"mopen\\\">(</span><span class=\\\"mord mathnormal\\\">d</span><span class=\\\"mord mathnormal\\\">p</span><span class=\\\"mopen\\\">[</span><span class=\\\"mord mathnormal\\\">i</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2222em;\\\"></span><span class=\\\"mbin\\\">−</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2222em;\\\"></span><span class=\\\"mord\\\">1</span><span class=\\\"mclose\\\">]</span><span class=\\\"mopen\\\">[</span><span class=\\\"mord\\\">1</span><span class=\\\"mclose\\\">]</span><span class=\\\"mpunct\\\">,</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.5em;\\\"></span><span class=\\\"mspace\\\" style=\\\"margin-right:0.1667em;\\\"></span><span class=\\\"mord mathnormal\\\">d</span><span class=\\\"mord mathnormal\\\">p</span><span class=\\\"mopen\\\">[</span><span class=\\\"mord mathnormal\\\">i</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2222em;\\\"></span><span class=\\\"mbin\\\">−</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2222em;\\\"></span><span class=\\\"mord\\\">1</span><span class=\\\"mclose\\\">]</span><span class=\\\"mopen\\\">[</span><span class=\\\"mord\\\">2</span><span class=\\\"mclose\\\">])</span></span></span></span><span class=\\\"vlist-s\\\">​</span></span><span class=\\\"vlist-r\\\"><span class=\\\"vlist\\\" style=\\\"height:2em;\\\"><span></span></span></span></span></span></span></span></span></span></span></span></span></p>\\n<p>压缩后的代码：</p>\\n<pre><code class=\\\"hljs language-java\\\"><span class=\\\"hljs-keyword\\\">public</span> <span class=\\\"hljs-type\\\">int</span> <span class=\\\"hljs-title function_\\\">maxProfit</span><span class=\\\"hljs-params\\\">(<span class=\\\"hljs-type\\\">int</span>[] prices)</span> {\\n    <span class=\\\"hljs-type\\\">int</span> <span class=\\\"hljs-variable\\\">l</span> <span class=\\\"hljs-operator\\\">=</span> prices.length;\\n    <span class=\\\"hljs-keyword\\\">if</span> (l == <span class=\\\"hljs-number\\\">0</span>) <span class=\\\"hljs-keyword\\\">return</span> <span class=\\\"hljs-number\\\">0</span>;\\n    <span class=\\\"hljs-type\\\">int</span>[] dp = <span class=\\\"hljs-keyword\\\">new</span> <span class=\\\"hljs-title class_\\\">int</span>[<span class=\\\"hljs-number\\\">3</span>];\\n    dp[<span class=\\\"hljs-number\\\">0</span>] = -prices[<span class=\\\"hljs-number\\\">0</span>];\\n    <span class=\\\"hljs-keyword\\\">for</span> (<span class=\\\"hljs-type\\\">int</span> <span class=\\\"hljs-variable\\\">i</span> <span class=\\\"hljs-operator\\\">=</span> <span class=\\\"hljs-number\\\">1</span>; i &lt; l; i++) {\\n        <span class=\\\"hljs-type\\\">int</span> <span class=\\\"hljs-variable\\\">dp0</span> <span class=\\\"hljs-operator\\\">=</span> Math.max(dp[<span class=\\\"hljs-number\\\">0</span>], dp[<span class=\\\"hljs-number\\\">2</span>] - prices[i]);\\n        <span class=\\\"hljs-type\\\">int</span> <span class=\\\"hljs-variable\\\">dp1</span> <span class=\\\"hljs-operator\\\">=</span> dp[<span class=\\\"hljs-number\\\">0</span>] + prices[i];\\n        <span class=\\\"hljs-type\\\">int</span> <span class=\\\"hljs-variable\\\">dp2</span> <span class=\\\"hljs-operator\\\">=</span> Math.max(dp[<span class=\\\"hljs-number\\\">1</span>], dp[<span class=\\\"hljs-number\\\">2</span>]);\\n        dp[<span class=\\\"hljs-number\\\">0</span>] = dp0;\\n        dp[<span class=\\\"hljs-number\\\">1</span>] = dp1;\\n        dp[<span class=\\\"hljs-number\\\">2</span>] = dp2;\\n    }\\n    <span class=\\\"hljs-keyword\\\">return</span> Math.max(dp[<span class=\\\"hljs-number\\\">1</span>], dp[<span class=\\\"hljs-number\\\">2</span>]);\\n}\\n</code></pre>\\n<h3 id=\\\"ⅲ-2-次交易\\\">Ⅲ 2 次交易</h3>\\n<p>给定一个数组，它的第<code>i</code>个元素是一支给定的股票在第 <code>i </code>天的价格。</p>\\n<p>设计一个算法来计算你所能获取的最大利润。你最多可以完成 <code>两笔</code> 交易。</p>\\n<p>注意: 你不能同时参与多笔交易（你必须在再次购买前出售掉之前的股票）。</p>\\n<p>示例 1:</p>\\n<blockquote>\\n<p>输入: [3,3,5,0,0,3,1,4]\\n输出: 6\\n解释: 在第 4 天（股票价格 = 0）的时候买入，在第 6 天（股票价格 = 3）的时候卖出，这笔交易所能获得利润 = 3-0 = 3 。\\n随后，在第 7 天（股票价格 = 1）的时候买入，在第 8 天 （股票价格 = 4）的时候卖出，这笔交易所能获得利润 = 4-1 = 3 。</p>\\n</blockquote>\\n<p>示例 2:</p>\\n<blockquote>\\n<p>输入: [1,2,3,4,5]\\n输出: 4\\n解释: 在第 1 天（股票价格 = 1）的时候买入，在第 5 天 （股票价格 = 5）的时候卖出, 这笔交易所能获得利润 = 5-1 = 4 。</p>\\n<p>注意你不能在第 1 天和第 2 天接连购买股票，之后再将它们卖出。 因为这样属于同时参与了多笔交易，你必须在再次购买前出售掉之前的股票。</p>\\n</blockquote>\\n<p>示例 3:</p>\\n<blockquote>\\n<p>输入: [7,6,4,3,1]\\n输出: 0\\n解释: 在这个情况下, 没有交易完成, 所以最大利润为 0。</p>\\n</blockquote>\\n<h4 id=\\\"on---动态规划状态-4\\\">O(n) - 动态规划+状态 4</h4>\\n<p>这里的状态机又要多考虑一下，考虑第一次交易和第二次交易的入股的出股，以及不做任何交易的状态：</p>\\n<ol start=\\\"0\\\">\\n<li>第一次入股：之前都没入股，所以从当天开始入股；</li>\\n<li>第一次出股：之前只有第一次入股，所以当天出股，或者之前就已经出过一次股了；</li>\\n<li>第二次入股：在第一次出股的基础上，再入一股，或者之前就已经入了第二股了；</li>\\n<li>第二次出股：之前是第二次入股，所以当天出股，或者之前就已经出了第二次股了；</li>\\n</ol>\\n<p>方程：</p>\\n<p><span class=\\\"katex-display katexp\\\"><span class=\\\"katex-display\\\"><span class=\\\"katex\\\"><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:6em;vertical-align:-2.75em;\\\"></span><span class=\\\"mord\\\"><span class=\\\"mtable\\\"><span class=\\\"col-align-r\\\"><span class=\\\"vlist-t vlist-t2\\\"><span class=\\\"vlist-r\\\"><span class=\\\"vlist\\\" style=\\\"height:3.25em;\\\"><span style=\\\"top:-5.41em;\\\"><span class=\\\"pstrut\\\" style=\\\"height:3em;\\\"></span><span class=\\\"mord\\\"><span class=\\\"mord mathnormal\\\">d</span><span class=\\\"mord mathnormal\\\">p</span><span class=\\\"mopen\\\">[</span><span class=\\\"mord mathnormal\\\">i</span><span class=\\\"mclose\\\">]</span><span class=\\\"mopen\\\">[</span><span class=\\\"mord\\\">0</span><span class=\\\"mclose\\\">]</span></span></span><span style=\\\"top:-3.91em;\\\"><span class=\\\"pstrut\\\" style=\\\"height:3em;\\\"></span><span class=\\\"mord\\\"><span class=\\\"mord mathnormal\\\">d</span><span class=\\\"mord mathnormal\\\">p</span><span class=\\\"mopen\\\">[</span><span class=\\\"mord mathnormal\\\">i</span><span class=\\\"mclose\\\">]</span><span class=\\\"mopen\\\">[</span><span class=\\\"mord\\\">1</span><span class=\\\"mclose\\\">]</span></span></span><span style=\\\"top:-2.41em;\\\"><span class=\\\"pstrut\\\" style=\\\"height:3em;\\\"></span><span class=\\\"mord\\\"><span class=\\\"mord mathnormal\\\">d</span><span class=\\\"mord mathnormal\\\">p</span><span class=\\\"mopen\\\">[</span><span class=\\\"mord mathnormal\\\">i</span><span class=\\\"mclose\\\">]</span><span class=\\\"mopen\\\">[</span><span class=\\\"mord\\\">2</span><span class=\\\"mclose\\\">]</span></span></span><span style=\\\"top:-0.91em;\\\"><span class=\\\"pstrut\\\" style=\\\"height:3em;\\\"></span><span class=\\\"mord\\\"><span class=\\\"mord mathnormal\\\">d</span><span class=\\\"mord mathnormal\\\">p</span><span class=\\\"mopen\\\">[</span><span class=\\\"mord mathnormal\\\">i</span><span class=\\\"mclose\\\">]</span><span class=\\\"mopen\\\">[</span><span class=\\\"mord\\\">3</span><span class=\\\"mclose\\\">]</span></span></span></span><span class=\\\"vlist-s\\\">​</span></span><span class=\\\"vlist-r\\\"><span class=\\\"vlist\\\" style=\\\"height:2.75em;\\\"><span></span></span></span></span></span><span class=\\\"col-align-l\\\"><span class=\\\"vlist-t vlist-t2\\\"><span class=\\\"vlist-r\\\"><span class=\\\"vlist\\\" style=\\\"height:3.25em;\\\"><span style=\\\"top:-5.41em;\\\"><span class=\\\"pstrut\\\" style=\\\"height:3em;\\\"></span><span class=\\\"mord\\\"><span class=\\\"mord\\\"></span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2778em;\\\"></span><span class=\\\"mrel\\\">=</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2778em;\\\"></span><span class=\\\"mord mathnormal\\\">ma</span><span class=\\\"mord mathnormal\\\">x</span><span class=\\\"mopen\\\">(</span><span class=\\\"mord mathnormal\\\">d</span><span class=\\\"mord mathnormal\\\">p</span><span class=\\\"mopen\\\">[</span><span class=\\\"mord mathnormal\\\">i</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2222em;\\\"></span><span class=\\\"mbin\\\">−</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2222em;\\\"></span><span class=\\\"mord\\\">1</span><span class=\\\"mclose\\\">]</span><span class=\\\"mopen\\\">[</span><span class=\\\"mord\\\">0</span><span class=\\\"mclose\\\">]</span><span class=\\\"mpunct\\\">,</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.5em;\\\"></span><span class=\\\"mspace\\\" style=\\\"margin-right:0.1667em;\\\"></span><span class=\\\"mord\\\">0</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2222em;\\\"></span><span class=\\\"mbin\\\">−</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2222em;\\\"></span><span class=\\\"mord mathnormal\\\">p</span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.02778em;\\\">r</span><span class=\\\"mord mathnormal\\\">i</span><span class=\\\"mord mathnormal\\\">ces</span><span class=\\\"mopen\\\">[</span><span class=\\\"mord mathnormal\\\">i</span><span class=\\\"mclose\\\">])</span></span></span><span style=\\\"top:-3.91em;\\\"><span class=\\\"pstrut\\\" style=\\\"height:3em;\\\"></span><span class=\\\"mord\\\"><span class=\\\"mord\\\"></span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2778em;\\\"></span><span class=\\\"mrel\\\">=</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2778em;\\\"></span><span class=\\\"mord mathnormal\\\">ma</span><span class=\\\"mord mathnormal\\\">x</span><span class=\\\"mopen\\\">(</span><span class=\\\"mord mathnormal\\\">d</span><span class=\\\"mord mathnormal\\\">p</span><span class=\\\"mopen\\\">[</span><span class=\\\"mord mathnormal\\\">i</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2222em;\\\"></span><span class=\\\"mbin\\\">−</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2222em;\\\"></span><span class=\\\"mord\\\">1</span><span class=\\\"mclose\\\">]</span><span class=\\\"mopen\\\">[</span><span class=\\\"mord\\\">1</span><span class=\\\"mclose\\\">]</span><span class=\\\"mpunct\\\">,</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.5em;\\\"></span><span class=\\\"mspace\\\" style=\\\"margin-right:0.1667em;\\\"></span><span class=\\\"mord mathnormal\\\">d</span><span class=\\\"mord mathnormal\\\">p</span><span class=\\\"mopen\\\">[</span><span class=\\\"mord mathnormal\\\">i</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2222em;\\\"></span><span class=\\\"mbin\\\">−</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2222em;\\\"></span><span class=\\\"mord\\\">1</span><span class=\\\"mclose\\\">]</span><span class=\\\"mopen\\\">[</span><span class=\\\"mord\\\">0</span><span class=\\\"mclose\\\">]</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2222em;\\\"></span><span class=\\\"mbin\\\">+</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2222em;\\\"></span><span class=\\\"mord mathnormal\\\">p</span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.02778em;\\\">r</span><span class=\\\"mord mathnormal\\\">i</span><span class=\\\"mord mathnormal\\\">ces</span><span class=\\\"mopen\\\">[</span><span class=\\\"mord mathnormal\\\">i</span><span class=\\\"mclose\\\">])</span></span></span><span style=\\\"top:-2.41em;\\\"><span class=\\\"pstrut\\\" style=\\\"height:3em;\\\"></span><span class=\\\"mord\\\"><span class=\\\"mord\\\"></span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2778em;\\\"></span><span class=\\\"mrel\\\">=</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2778em;\\\"></span><span class=\\\"mord mathnormal\\\">ma</span><span class=\\\"mord mathnormal\\\">x</span><span class=\\\"mopen\\\">(</span><span class=\\\"mord mathnormal\\\">d</span><span class=\\\"mord mathnormal\\\">p</span><span class=\\\"mopen\\\">[</span><span class=\\\"mord mathnormal\\\">i</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2222em;\\\"></span><span class=\\\"mbin\\\">−</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2222em;\\\"></span><span class=\\\"mord\\\">1</span><span class=\\\"mclose\\\">]</span><span class=\\\"mopen\\\">[</span><span class=\\\"mord\\\">2</span><span class=\\\"mclose\\\">]</span><span class=\\\"mpunct\\\">,</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.5em;\\\"></span><span class=\\\"mspace\\\" style=\\\"margin-right:0.1667em;\\\"></span><span class=\\\"mord mathnormal\\\">d</span><span class=\\\"mord mathnormal\\\">p</span><span class=\\\"mopen\\\">[</span><span class=\\\"mord mathnormal\\\">i</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2222em;\\\"></span><span class=\\\"mbin\\\">−</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2222em;\\\"></span><span class=\\\"mord\\\">1</span><span class=\\\"mclose\\\">]</span><span class=\\\"mopen\\\">[</span><span class=\\\"mord\\\">1</span><span class=\\\"mclose\\\">]</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2222em;\\\"></span><span class=\\\"mbin\\\">−</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2222em;\\\"></span><span class=\\\"mord mathnormal\\\">p</span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.02778em;\\\">r</span><span class=\\\"mord mathnormal\\\">i</span><span class=\\\"mord mathnormal\\\">ces</span><span class=\\\"mopen\\\">[</span><span class=\\\"mord mathnormal\\\">i</span><span class=\\\"mclose\\\">])</span></span></span><span style=\\\"top:-0.91em;\\\"><span class=\\\"pstrut\\\" style=\\\"height:3em;\\\"></span><span class=\\\"mord\\\"><span class=\\\"mord\\\"></span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2778em;\\\"></span><span class=\\\"mrel\\\">=</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2778em;\\\"></span><span class=\\\"mord mathnormal\\\">ma</span><span class=\\\"mord mathnormal\\\">x</span><span class=\\\"mopen\\\">(</span><span class=\\\"mord mathnormal\\\">d</span><span class=\\\"mord mathnormal\\\">p</span><span class=\\\"mopen\\\">[</span><span class=\\\"mord mathnormal\\\">i</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2222em;\\\"></span><span class=\\\"mbin\\\">−</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2222em;\\\"></span><span class=\\\"mord\\\">1</span><span class=\\\"mclose\\\">]</span><span class=\\\"mopen\\\">[</span><span class=\\\"mord\\\">3</span><span class=\\\"mclose\\\">]</span><span class=\\\"mpunct\\\">,</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.5em;\\\"></span><span class=\\\"mspace\\\" style=\\\"margin-right:0.1667em;\\\"></span><span class=\\\"mord mathnormal\\\">d</span><span class=\\\"mord mathnormal\\\">p</span><span class=\\\"mopen\\\">[</span><span class=\\\"mord mathnormal\\\">i</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2222em;\\\"></span><span class=\\\"mbin\\\">−</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2222em;\\\"></span><span class=\\\"mord\\\">1</span><span class=\\\"mclose\\\">]</span><span class=\\\"mopen\\\">[</span><span class=\\\"mord\\\">2</span><span class=\\\"mclose\\\">]</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2222em;\\\"></span><span class=\\\"mbin\\\">+</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2222em;\\\"></span><span class=\\\"mord mathnormal\\\">p</span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.02778em;\\\">r</span><span class=\\\"mord mathnormal\\\">i</span><span class=\\\"mord mathnormal\\\">ces</span><span class=\\\"mopen\\\">[</span><span class=\\\"mord mathnormal\\\">i</span><span class=\\\"mclose\\\">])</span></span></span></span><span class=\\\"vlist-s\\\">​</span></span><span class=\\\"vlist-r\\\"><span class=\\\"vlist\\\" style=\\\"height:2.75em;\\\"><span></span></span></span></span></span></span></span></span></span></span></span></span></p>\\n<p>而且我们的初始状态要注意：</p>\\n<p><span class=\\\"katex-display katexp\\\"><span class=\\\"katex-display\\\"><span class=\\\"katex\\\"><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:4.5em;vertical-align:-2em;\\\"></span><span class=\\\"mord\\\"><span class=\\\"mtable\\\"><span class=\\\"col-align-r\\\"><span class=\\\"vlist-t vlist-t2\\\"><span class=\\\"vlist-r\\\"><span class=\\\"vlist\\\" style=\\\"height:2.5em;\\\"><span style=\\\"top:-4.66em;\\\"><span class=\\\"pstrut\\\" style=\\\"height:3em;\\\"></span><span class=\\\"mord\\\"><span class=\\\"mord mathnormal\\\">d</span><span class=\\\"mord mathnormal\\\">p</span><span class=\\\"mopen\\\">[</span><span class=\\\"mord\\\">0</span><span class=\\\"mclose\\\">]</span><span class=\\\"mopen\\\">[</span><span class=\\\"mord\\\">0</span><span class=\\\"mclose\\\">]</span></span></span><span style=\\\"top:-3.16em;\\\"><span class=\\\"pstrut\\\" style=\\\"height:3em;\\\"></span><span class=\\\"mord\\\"><span class=\\\"mord mathnormal\\\">d</span><span class=\\\"mord mathnormal\\\">p</span><span class=\\\"mopen\\\">[</span><span class=\\\"mord\\\">0</span><span class=\\\"mclose\\\">]</span><span class=\\\"mopen\\\">[</span><span class=\\\"mord\\\">2</span><span class=\\\"mclose\\\">]</span></span></span><span style=\\\"top:-1.66em;\\\"><span class=\\\"pstrut\\\" style=\\\"height:3em;\\\"></span><span class=\\\"mord\\\"><span class=\\\"mord mathnormal\\\">d</span><span class=\\\"mord mathnormal\\\">p</span><span class=\\\"mopen\\\">[</span><span class=\\\"mord\\\">0</span><span class=\\\"mclose\\\">]</span><span class=\\\"mopen\\\">[</span><span class=\\\"mord\\\">3</span><span class=\\\"mclose\\\">]</span></span></span></span><span class=\\\"vlist-s\\\">​</span></span><span class=\\\"vlist-r\\\"><span class=\\\"vlist\\\" style=\\\"height:2em;\\\"><span></span></span></span></span></span><span class=\\\"col-align-l\\\"><span class=\\\"vlist-t vlist-t2\\\"><span class=\\\"vlist-r\\\"><span class=\\\"vlist\\\" style=\\\"height:2.5em;\\\"><span style=\\\"top:-4.66em;\\\"><span class=\\\"pstrut\\\" style=\\\"height:3em;\\\"></span><span class=\\\"mord\\\"><span class=\\\"mord\\\"></span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2778em;\\\"></span><span class=\\\"mrel\\\">=</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2778em;\\\"></span><span class=\\\"mord\\\">−</span><span class=\\\"mord mathnormal\\\">p</span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.02778em;\\\">r</span><span class=\\\"mord mathnormal\\\">i</span><span class=\\\"mord mathnormal\\\">ce</span><span class=\\\"mopen\\\">[</span><span class=\\\"mord\\\">0</span><span class=\\\"mclose\\\">]</span></span></span><span style=\\\"top:-3.16em;\\\"><span class=\\\"pstrut\\\" style=\\\"height:3em;\\\"></span><span class=\\\"mord\\\"><span class=\\\"mord\\\"></span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2778em;\\\"></span><span class=\\\"mrel\\\">=</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2778em;\\\"></span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.07847em;\\\">I</span><span class=\\\"mord mathnormal\\\">n</span><span class=\\\"mord mathnormal\\\">t</span><span class=\\\"mord mathnormal\\\">e</span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.03588em;\\\">g</span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.02778em;\\\">er</span><span class=\\\"mord\\\">.</span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.10903em;\\\">M</span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.07847em;\\\">I</span><span class=\\\"mord\\\"><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.10903em;\\\">N</span><span class=\\\"msupsub\\\"><span class=\\\"vlist-t vlist-t2\\\"><span class=\\\"vlist-r\\\"><span class=\\\"vlist\\\" style=\\\"height:0.3283em;\\\"><span style=\\\"top:-2.55em;margin-left:-0.109em;margin-right:0.05em;\\\"><span class=\\\"pstrut\\\" style=\\\"height:2.7em;\\\"></span><span class=\\\"sizing reset-size6 size3 mtight\\\"><span class=\\\"mord mathnormal mtight\\\" style=\\\"margin-right:0.22222em;\\\">V</span></span></span></span><span class=\\\"vlist-s\\\">​</span></span><span class=\\\"vlist-r\\\"><span class=\\\"vlist\\\" style=\\\"height:0.15em;\\\"><span></span></span></span></span></span></span><span class=\\\"mord mathnormal\\\">A</span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.10903em;\\\">LU</span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.05764em;\\\">E</span></span></span><span style=\\\"top:-1.66em;\\\"><span class=\\\"pstrut\\\" style=\\\"height:3em;\\\"></span><span class=\\\"mord\\\"><span class=\\\"mord\\\"></span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2778em;\\\"></span><span class=\\\"mrel\\\">=</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2778em;\\\"></span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.07847em;\\\">I</span><span class=\\\"mord mathnormal\\\">n</span><span class=\\\"mord mathnormal\\\">t</span><span class=\\\"mord mathnormal\\\">e</span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.03588em;\\\">g</span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.02778em;\\\">er</span><span class=\\\"mord\\\">.</span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.10903em;\\\">M</span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.07847em;\\\">I</span><span class=\\\"mord\\\"><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.10903em;\\\">N</span><span class=\\\"msupsub\\\"><span class=\\\"vlist-t vlist-t2\\\"><span class=\\\"vlist-r\\\"><span class=\\\"vlist\\\" style=\\\"height:0.3283em;\\\"><span style=\\\"top:-2.55em;margin-left:-0.109em;margin-right:0.05em;\\\"><span class=\\\"pstrut\\\" style=\\\"height:2.7em;\\\"></span><span class=\\\"sizing reset-size6 size3 mtight\\\"><span class=\\\"mord mathnormal mtight\\\" style=\\\"margin-right:0.22222em;\\\">V</span></span></span></span><span class=\\\"vlist-s\\\">​</span></span><span class=\\\"vlist-r\\\"><span class=\\\"vlist\\\" style=\\\"height:0.15em;\\\"><span></span></span></span></span></span></span><span class=\\\"mord mathnormal\\\">A</span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.10903em;\\\">LU</span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.05764em;\\\">E</span></span></span></span><span class=\\\"vlist-s\\\">​</span></span><span class=\\\"vlist-r\\\"><span class=\\\"vlist\\\" style=\\\"height:2em;\\\"><span></span></span></span></span></span></span></span></span></span></span></span></span></p>\\n<p>后面两个状态要取无效值，因为第一天结束之后是不可能完成第二次交易的</p>\\n<p>压缩后的代码：</p>\\n<pre><code class=\\\"hljs language-java\\\"><span class=\\\"hljs-keyword\\\">public</span> <span class=\\\"hljs-type\\\">int</span> <span class=\\\"hljs-title function_\\\">maxProfit</span><span class=\\\"hljs-params\\\">(<span class=\\\"hljs-type\\\">int</span>[] prices)</span> {\\n    <span class=\\\"hljs-type\\\">int</span> <span class=\\\"hljs-variable\\\">n</span> <span class=\\\"hljs-operator\\\">=</span> prices.length;\\n    <span class=\\\"hljs-keyword\\\">if</span> (n == <span class=\\\"hljs-number\\\">0</span>) <span class=\\\"hljs-keyword\\\">return</span> <span class=\\\"hljs-number\\\">0</span>;\\n    <span class=\\\"hljs-type\\\">int</span>[] dp = <span class=\\\"hljs-keyword\\\">new</span> <span class=\\\"hljs-title class_\\\">int</span>[<span class=\\\"hljs-number\\\">4</span>];\\n\\n    dp[<span class=\\\"hljs-number\\\">0</span>] = -prices[<span class=\\\"hljs-number\\\">0</span>];\\n    dp[<span class=\\\"hljs-number\\\">2</span>] = Integer.MIN_VALUE;\\n    dp[<span class=\\\"hljs-number\\\">3</span>] = Integer.MIN_VALUE;\\n\\n    <span class=\\\"hljs-keyword\\\">for</span> (<span class=\\\"hljs-type\\\">int</span> <span class=\\\"hljs-variable\\\">i</span> <span class=\\\"hljs-operator\\\">=</span> <span class=\\\"hljs-number\\\">1</span>; i &lt; n; i++) {\\n        <span class=\\\"hljs-type\\\">int</span> <span class=\\\"hljs-variable\\\">newdp0</span> <span class=\\\"hljs-operator\\\">=</span> Math.max(dp[<span class=\\\"hljs-number\\\">0</span>],    <span class=\\\"hljs-number\\\">0</span>  - prices[i]);\\n        <span class=\\\"hljs-type\\\">int</span> <span class=\\\"hljs-variable\\\">newdp1</span> <span class=\\\"hljs-operator\\\">=</span> Math.max(dp[<span class=\\\"hljs-number\\\">1</span>], dp[<span class=\\\"hljs-number\\\">0</span>] + prices[i]);\\n        <span class=\\\"hljs-type\\\">int</span> <span class=\\\"hljs-variable\\\">newdp2</span> <span class=\\\"hljs-operator\\\">=</span> Math.max(dp[<span class=\\\"hljs-number\\\">2</span>], dp[<span class=\\\"hljs-number\\\">1</span>] - prices[i]);\\n        <span class=\\\"hljs-type\\\">int</span> <span class=\\\"hljs-variable\\\">newdp3</span> <span class=\\\"hljs-operator\\\">=</span> Math.max(dp[<span class=\\\"hljs-number\\\">3</span>], dp[<span class=\\\"hljs-number\\\">2</span>] + prices[i]);\\n        dp[<span class=\\\"hljs-number\\\">0</span>] = newdp0;\\n        dp[<span class=\\\"hljs-number\\\">1</span>] = newdp1;\\n        dp[<span class=\\\"hljs-number\\\">2</span>] = newdp2;\\n        dp[<span class=\\\"hljs-number\\\">3</span>] = newdp3;\\n    }\\n    <span class=\\\"hljs-keyword\\\">return</span> Math.max(<span class=\\\"hljs-number\\\">0</span>, Math.max(dp[<span class=\\\"hljs-number\\\">1</span>], dp[<span class=\\\"hljs-number\\\">3</span>]));\\n}\\n</code></pre>\\n<h3 id=\\\"ⅳ-k-次交易\\\">Ⅳ k 次交易</h3>\\n<p>给定一个数组，它的第 <code>i</code> 个元素是一支给定的股票在第 <code>i </code>天的价格。</p>\\n<p>设计一个算法来计算你所能获取的最大利润。你最多可以完成 <code>k</code> 笔交易。</p>\\n<p>注意: 你不能同时参与多笔交易（你必须在再次购买前出售掉之前的股票）。</p>\\n<p>示例 1:</p>\\n<blockquote>\\n<p>输入: [2,4,1], k = 2\\n输出: 2\\n解释: 在第 1 天 (股票价格 = 2) 的时候买入，在第 2 天 (股票价格 = 4) 的时候卖出，这笔交易所能获得利润 = 4-2 = 2 。</p>\\n</blockquote>\\n<p>示例 2:</p>\\n<blockquote>\\n<p>输入: [3,2,6,5,0,3], k = 2\\n输出: 7\\n解释: 在第 2 天 (股票价格 = 2) 的时候买入，在第 3 天 (股票价格 = 6) 的时候卖出, 这笔交易所能获得利润 = 6-2 = 4 。\\n随后，在第 5 天 (股票价格 = 0) 的时候买入，在第 6 天 (股票价格 = 3) 的时候卖出, 这笔交易所能获得利润 = 3-0 = 3 。</p>\\n</blockquote>\\n<h4 id=\\\"on---动态规划状态-5\\\">O(n) - 动态规划+状态 5</h4>\\n<p>其实和考虑 2 次交易是一样的，只不过这里是<code>k</code>次，于是就有<code>k * 2</code>种状态，分析 2 次交易的状态，我们可以这样设计：</p>\\n<ul>\\n<li>当状态<code>j</code>为奇数的时候，代表：<ul>\\n<li>已经进行了第<code>j</code>次入股，今天出股；</li>\\n<li>之前就已经完成了，<code>j</code>次出股；</li>\\n</ul>\\n</li>\\n<li>当状态<code>j</code>为偶数的时候，代表：<ul>\\n<li>已经进行了第<code>j-1</code>次出股，今天入股；</li>\\n<li>之前就已经做了第<code>j</code>次的入股；</li>\\n</ul>\\n</li>\\n</ul>\\n<p>方程：</p>\\n<p><span class=\\\"katex-display katexp\\\"><span class=\\\"katex-display\\\"><span class=\\\"katex\\\"><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:1em;vertical-align:-0.25em;\\\"></span><span class=\\\"mord mathnormal\\\">d</span><span class=\\\"mord mathnormal\\\">p</span><span class=\\\"mopen\\\">[</span><span class=\\\"mord mathnormal\\\">i</span><span class=\\\"mclose\\\">]</span><span class=\\\"mopen\\\">[</span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.05724em;\\\">j</span><span class=\\\"mclose\\\">]</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2778em;\\\"></span><span class=\\\"mrel\\\">=</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2778em;\\\"></span></span><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:4.5em;vertical-align:-2em;\\\"></span><span class=\\\"minner\\\"><span class=\\\"mopen\\\"><span class=\\\"delimsizing mult\\\"><span class=\\\"vlist-t vlist-t2\\\"><span class=\\\"vlist-r\\\"><span class=\\\"vlist\\\" style=\\\"height:2.35em;\\\"><span style=\\\"top:-2.2em;\\\"><span class=\\\"pstrut\\\" style=\\\"height:3.15em;\\\"></span><span class=\\\"delimsizinginner delim-size4\\\"><span>⎩</span></span></span><span style=\\\"top:-2.192em;\\\"><span class=\\\"pstrut\\\" style=\\\"height:3.15em;\\\"></span><span style=\\\"height:0.316em;width:0.8889em;\\\"><svg xmlns=\\\"http://www.w3.org/2000/svg\\\" width='0.8889em' height='0.316em' style='width:0.8889em' viewBox='0 0 888.89 316' preserveAspectRatio='xMinYMin'><path d='M384 0 H504 V316 H384z M384 0 H504 V316 H384z'/></svg></span></span><span style=\\\"top:-3.15em;\\\"><span class=\\\"pstrut\\\" style=\\\"height:3.15em;\\\"></span><span class=\\\"delimsizinginner delim-size4\\\"><span>⎨</span></span></span><span style=\\\"top:-4.292em;\\\"><span class=\\\"pstrut\\\" style=\\\"height:3.15em;\\\"></span><span style=\\\"height:0.316em;width:0.8889em;\\\"><svg xmlns=\\\"http://www.w3.org/2000/svg\\\" width='0.8889em' height='0.316em' style='width:0.8889em' viewBox='0 0 888.89 316' preserveAspectRatio='xMinYMin'><path d='M384 0 H504 V316 H384z M384 0 H504 V316 H384z'/></svg></span></span><span style=\\\"top:-4.6em;\\\"><span class=\\\"pstrut\\\" style=\\\"height:3.15em;\\\"></span><span class=\\\"delimsizinginner delim-size4\\\"><span>⎧</span></span></span></span><span class=\\\"vlist-s\\\">​</span></span><span class=\\\"vlist-r\\\"><span class=\\\"vlist\\\" style=\\\"height:1.85em;\\\"><span></span></span></span></span></span></span><span class=\\\"mord\\\"><span class=\\\"mtable\\\"><span class=\\\"col-align-l\\\"><span class=\\\"vlist-t vlist-t2\\\"><span class=\\\"vlist-r\\\"><span class=\\\"vlist\\\" style=\\\"height:2.5em;\\\"><span style=\\\"top:-4.5em;\\\"><span class=\\\"pstrut\\\" style=\\\"height:4.5em;\\\"></span><span class=\\\"mord\\\"><span class=\\\"mord\\\"><span class=\\\"mtable\\\"><span class=\\\"col-align-r\\\"><span class=\\\"vlist-t vlist-t2\\\"><span class=\\\"vlist-r\\\"><span class=\\\"vlist\\\" style=\\\"height:2.5em;\\\"><span style=\\\"top:-4.5em;\\\"><span class=\\\"pstrut\\\" style=\\\"height:2.84em;\\\"></span><span class=\\\"mord\\\"></span></span><span style=\\\"top:-3em;\\\"><span class=\\\"pstrut\\\" style=\\\"height:2.84em;\\\"></span><span class=\\\"mord\\\"></span></span><span style=\\\"top:-1.5em;\\\"><span class=\\\"pstrut\\\" style=\\\"height:2.84em;\\\"></span><span class=\\\"mord\\\"></span></span></span><span class=\\\"vlist-s\\\">​</span></span><span class=\\\"vlist-r\\\"><span class=\\\"vlist\\\" style=\\\"height:2em;\\\"><span></span></span></span></span></span><span class=\\\"col-align-l\\\"><span class=\\\"vlist-t vlist-t2\\\"><span class=\\\"vlist-r\\\"><span class=\\\"vlist\\\" style=\\\"height:2.5em;\\\"><span style=\\\"top:-4.66em;\\\"><span class=\\\"pstrut\\\" style=\\\"height:3em;\\\"></span><span class=\\\"mord\\\"><span class=\\\"mord\\\"></span><span class=\\\"mord mathnormal\\\">ma</span><span class=\\\"mord mathnormal\\\">x</span><span class=\\\"mopen\\\">(</span><span class=\\\"mord mathnormal\\\">d</span><span class=\\\"mord mathnormal\\\">p</span><span class=\\\"mopen\\\">[</span><span class=\\\"mord mathnormal\\\">i</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2222em;\\\"></span><span class=\\\"mbin\\\">−</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2222em;\\\"></span><span class=\\\"mord\\\">1</span><span class=\\\"mclose\\\">]</span><span class=\\\"mopen\\\">[</span><span class=\\\"mord\\\">0</span><span class=\\\"mclose\\\">]</span><span class=\\\"mpunct\\\">,</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.5em;\\\"></span><span class=\\\"mspace\\\" style=\\\"margin-right:0.1667em;\\\"></span><span class=\\\"mord\\\">0</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2222em;\\\"></span><span class=\\\"mbin\\\">−</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2222em;\\\"></span><span class=\\\"mord mathnormal\\\">p</span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.02778em;\\\">r</span><span class=\\\"mord mathnormal\\\">i</span><span class=\\\"mord mathnormal\\\">ces</span><span class=\\\"mopen\\\">[</span><span class=\\\"mord mathnormal\\\">i</span><span class=\\\"mclose\\\">])</span><span class=\\\"mspace\\\" style=\\\"margin-right:2em;\\\"></span></span></span><span style=\\\"top:-3.16em;\\\"><span class=\\\"pstrut\\\" style=\\\"height:3em;\\\"></span><span class=\\\"mord\\\"><span class=\\\"mord\\\"></span><span class=\\\"mord mathnormal\\\">ma</span><span class=\\\"mord mathnormal\\\">x</span><span class=\\\"mopen\\\">(</span><span class=\\\"mord mathnormal\\\">d</span><span class=\\\"mord mathnormal\\\">p</span><span class=\\\"mopen\\\">[</span><span class=\\\"mord mathnormal\\\">i</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2222em;\\\"></span><span class=\\\"mbin\\\">−</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2222em;\\\"></span><span class=\\\"mord\\\">1</span><span class=\\\"mclose\\\">]</span><span class=\\\"mopen\\\">[</span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.05724em;\\\">j</span><span class=\\\"mclose\\\">]</span><span class=\\\"mpunct\\\">,</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.5em;\\\"></span><span class=\\\"mspace\\\" style=\\\"margin-right:0.1667em;\\\"></span><span class=\\\"mord mathnormal\\\">d</span><span class=\\\"mord mathnormal\\\">p</span><span class=\\\"mopen\\\">[</span><span class=\\\"mord mathnormal\\\">i</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2222em;\\\"></span><span class=\\\"mbin\\\">−</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2222em;\\\"></span><span class=\\\"mord\\\">1</span><span class=\\\"mclose\\\">]</span><span class=\\\"mopen\\\">[</span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.05724em;\\\">j</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2222em;\\\"></span><span class=\\\"mbin\\\">−</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2222em;\\\"></span><span class=\\\"mord\\\">1</span><span class=\\\"mclose\\\">]</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2222em;\\\"></span><span class=\\\"mbin\\\">+</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2222em;\\\"></span><span class=\\\"mord mathnormal\\\">p</span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.02778em;\\\">r</span><span class=\\\"mord mathnormal\\\">i</span><span class=\\\"mord mathnormal\\\">ces</span><span class=\\\"mopen\\\">[</span><span class=\\\"mord mathnormal\\\">i</span><span class=\\\"mclose\\\">])</span><span class=\\\"mspace\\\" style=\\\"margin-right:2em;\\\"></span></span></span><span style=\\\"top:-1.66em;\\\"><span class=\\\"pstrut\\\" style=\\\"height:3em;\\\"></span><span class=\\\"mord\\\"><span class=\\\"mord\\\"></span><span class=\\\"mord mathnormal\\\">ma</span><span class=\\\"mord mathnormal\\\">x</span><span class=\\\"mopen\\\">(</span><span class=\\\"mord mathnormal\\\">d</span><span class=\\\"mord mathnormal\\\">p</span><span class=\\\"mopen\\\">[</span><span class=\\\"mord mathnormal\\\">i</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2222em;\\\"></span><span class=\\\"mbin\\\">−</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2222em;\\\"></span><span class=\\\"mord\\\">1</span><span class=\\\"mclose\\\">]</span><span class=\\\"mopen\\\">[</span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.05724em;\\\">j</span><span class=\\\"mclose\\\">]</span><span class=\\\"mpunct\\\">,</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.5em;\\\"></span><span class=\\\"mspace\\\" style=\\\"margin-right:0.1667em;\\\"></span><span class=\\\"mord mathnormal\\\">d</span><span class=\\\"mord mathnormal\\\">p</span><span class=\\\"mopen\\\">[</span><span class=\\\"mord mathnormal\\\">i</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2222em;\\\"></span><span class=\\\"mbin\\\">−</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2222em;\\\"></span><span class=\\\"mord\\\">1</span><span class=\\\"mclose\\\">]</span><span class=\\\"mopen\\\">[</span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.05724em;\\\">j</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2222em;\\\"></span><span class=\\\"mbin\\\">−</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2222em;\\\"></span><span class=\\\"mord\\\">1</span><span class=\\\"mclose\\\">]</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2222em;\\\"></span><span class=\\\"mbin\\\">−</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2222em;\\\"></span><span class=\\\"mord mathnormal\\\">p</span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.02778em;\\\">r</span><span class=\\\"mord mathnormal\\\">i</span><span class=\\\"mord mathnormal\\\">ces</span><span class=\\\"mopen\\\">[</span><span class=\\\"mord mathnormal\\\">i</span><span class=\\\"mclose\\\">])</span><span class=\\\"mspace\\\" style=\\\"margin-right:2em;\\\"></span></span></span></span><span class=\\\"vlist-s\\\">​</span></span><span class=\\\"vlist-r\\\"><span class=\\\"vlist\\\" style=\\\"height:2em;\\\"><span></span></span></span></span></span><span class=\\\"arraycolsep\\\" style=\\\"width:1em;\\\"></span><span class=\\\"col-align-r\\\"><span class=\\\"vlist-t vlist-t2\\\"><span class=\\\"vlist-r\\\"><span class=\\\"vlist\\\" style=\\\"height:2.5em;\\\"><span style=\\\"top:-4.66em;\\\"><span class=\\\"pstrut\\\" style=\\\"height:3em;\\\"></span><span class=\\\"mord\\\"><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.05724em;\\\">j</span></span></span><span style=\\\"top:-3.16em;\\\"><span class=\\\"pstrut\\\" style=\\\"height:3em;\\\"></span><span class=\\\"mord\\\"><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.05724em;\\\">j</span></span></span><span style=\\\"top:-1.66em;\\\"><span class=\\\"pstrut\\\" style=\\\"height:3em;\\\"></span><span class=\\\"mord\\\"><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.05724em;\\\">j</span></span></span></span><span class=\\\"vlist-s\\\">​</span></span><span class=\\\"vlist-r\\\"><span class=\\\"vlist\\\" style=\\\"height:2em;\\\"><span></span></span></span></span></span><span class=\\\"col-align-l\\\"><span class=\\\"vlist-t vlist-t2\\\"><span class=\\\"vlist-r\\\"><span class=\\\"vlist\\\" style=\\\"height:2.5em;\\\"><span style=\\\"top:-4.66em;\\\"><span class=\\\"pstrut\\\" style=\\\"height:3em;\\\"></span><span class=\\\"mord\\\"><span class=\\\"mord\\\"></span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2778em;\\\"></span><span class=\\\"mrel\\\">=</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2778em;\\\"></span><span class=\\\"mord\\\">0</span></span></span><span style=\\\"top:-3.16em;\\\"><span class=\\\"pstrut\\\" style=\\\"height:3em;\\\"></span><span class=\\\"mord\\\"><span class=\\\"mord\\\"></span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2778em;\\\"></span><span class=\\\"mrel\\\">=</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2778em;\\\"></span><span class=\\\"mord mathnormal\\\">o</span><span class=\\\"mord mathnormal\\\">dd</span></span></span><span style=\\\"top:-1.66em;\\\"><span class=\\\"pstrut\\\" style=\\\"height:3em;\\\"></span><span class=\\\"mord\\\"><span class=\\\"mord\\\"></span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2778em;\\\"></span><span class=\\\"mrel\\\">=</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2778em;\\\"></span><span class=\\\"mord mathnormal\\\">e</span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.03588em;\\\">v</span><span class=\\\"mord mathnormal\\\">e</span><span class=\\\"mord mathnormal\\\">n</span></span></span></span><span class=\\\"vlist-s\\\">​</span></span><span class=\\\"vlist-r\\\"><span class=\\\"vlist\\\" style=\\\"height:2em;\\\"><span></span></span></span></span></span></span></span></span></span></span><span class=\\\"vlist-s\\\">​</span></span><span class=\\\"vlist-r\\\"><span class=\\\"vlist\\\" style=\\\"height:2em;\\\"><span></span></span></span></span></span></span></span><span class=\\\"mclose nulldelimiter\\\"></span></span></span></span></span></span></span></p>\\n<p>而初始状态，在第一天结束的时候 所有入股状态都设为无效值：</p>\\n<p><span class=\\\"katex-display katexp\\\"><span class=\\\"katex-display\\\"><span class=\\\"katex\\\"><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:8.16em;vertical-align:-3.83em;\\\"></span><span class=\\\"mord\\\"><span class=\\\"mtable\\\"><span class=\\\"col-align-r\\\"><span class=\\\"vlist-t vlist-t2\\\"><span class=\\\"vlist-r\\\"><span class=\\\"vlist\\\" style=\\\"height:4.33em;\\\"><span style=\\\"top:-7.1775em;\\\"><span class=\\\"pstrut\\\" style=\\\"height:3.6875em;\\\"></span><span class=\\\"mord\\\"><span class=\\\"mord mathnormal\\\">d</span><span class=\\\"mord mathnormal\\\">p</span><span class=\\\"mopen\\\">[</span><span class=\\\"mord\\\">0</span><span class=\\\"mclose\\\">]</span><span class=\\\"mopen\\\">[</span><span class=\\\"mord\\\">0</span><span class=\\\"mclose\\\">]</span></span></span><span style=\\\"top:-5.6775em;\\\"><span class=\\\"pstrut\\\" style=\\\"height:3.6875em;\\\"></span><span class=\\\"mord\\\"><span class=\\\"mord mathnormal\\\">d</span><span class=\\\"mord mathnormal\\\">p</span><span class=\\\"mopen\\\">[</span><span class=\\\"mord\\\">0</span><span class=\\\"mclose\\\">]</span><span class=\\\"mopen\\\">[</span><span class=\\\"mord\\\">2</span><span class=\\\"mclose\\\">]</span></span></span><span style=\\\"top:-4.1775em;\\\"><span class=\\\"pstrut\\\" style=\\\"height:3.6875em;\\\"></span><span class=\\\"mord\\\"><span class=\\\"mord mathnormal\\\">d</span><span class=\\\"mord mathnormal\\\">p</span><span class=\\\"mopen\\\">[</span><span class=\\\"mord\\\">0</span><span class=\\\"mclose\\\">]</span><span class=\\\"mopen\\\">[</span><span class=\\\"mord\\\">4</span><span class=\\\"mclose\\\">]</span></span></span><span style=\\\"top:-2.0175em;\\\"><span class=\\\"pstrut\\\" style=\\\"height:3.6875em;\\\"></span><span class=\\\"mord\\\"><span class=\\\"mord\\\"><span class=\\\"mord\\\">⋮</span><span class=\\\"mord rule\\\" style=\\\"border-right-width:0em;border-top-width:1.5em;bottom:0em;\\\"></span></span></span></span><span style=\\\"top:-0.5175em;\\\"><span class=\\\"pstrut\\\" style=\\\"height:3.6875em;\\\"></span><span class=\\\"mord\\\"><span class=\\\"mord mathnormal\\\">d</span><span class=\\\"mord mathnormal\\\">p</span><span class=\\\"mopen\\\">[</span><span class=\\\"mord\\\">0</span><span class=\\\"mclose\\\">]</span><span class=\\\"mopen\\\">[</span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.05724em;\\\">j</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2222em;\\\"></span><span class=\\\"mbin\\\">+</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2222em;\\\"></span><span class=\\\"mord\\\">2</span><span class=\\\"mclose\\\">]</span></span></span></span><span class=\\\"vlist-s\\\">​</span></span><span class=\\\"vlist-r\\\"><span class=\\\"vlist\\\" style=\\\"height:3.83em;\\\"><span></span></span></span></span></span><span class=\\\"col-align-l\\\"><span class=\\\"vlist-t vlist-t2\\\"><span class=\\\"vlist-r\\\"><span class=\\\"vlist\\\" style=\\\"height:4.33em;\\\"><span style=\\\"top:-6.49em;\\\"><span class=\\\"pstrut\\\" style=\\\"height:3em;\\\"></span><span class=\\\"mord\\\"><span class=\\\"mord\\\"></span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2778em;\\\"></span><span class=\\\"mrel\\\">=</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2778em;\\\"></span><span class=\\\"mord\\\">−</span><span class=\\\"mord mathnormal\\\">p</span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.02778em;\\\">r</span><span class=\\\"mord mathnormal\\\">i</span><span class=\\\"mord mathnormal\\\">ce</span><span class=\\\"mopen\\\">[</span><span class=\\\"mord\\\">0</span><span class=\\\"mclose\\\">]</span></span></span><span style=\\\"top:-4.99em;\\\"><span class=\\\"pstrut\\\" style=\\\"height:3em;\\\"></span><span class=\\\"mord\\\"><span class=\\\"mord\\\"></span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2778em;\\\"></span><span class=\\\"mrel\\\">=</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2778em;\\\"></span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.07847em;\\\">I</span><span class=\\\"mord mathnormal\\\">n</span><span class=\\\"mord mathnormal\\\">t</span><span class=\\\"mord mathnormal\\\">e</span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.03588em;\\\">g</span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.02778em;\\\">er</span><span class=\\\"mord\\\">.</span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.10903em;\\\">M</span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.07847em;\\\">I</span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.10903em;\\\">N</span><span class=\\\"mord\\\" style=\\\"margin-right:0.02778em;\\\">_</span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.22222em;\\\">V</span><span class=\\\"mord mathnormal\\\">A</span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.10903em;\\\">LU</span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.05764em;\\\">E</span></span></span><span style=\\\"top:-3.49em;\\\"><span class=\\\"pstrut\\\" style=\\\"height:3em;\\\"></span><span class=\\\"mord\\\"><span class=\\\"mord\\\"></span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2778em;\\\"></span><span class=\\\"mrel\\\">=</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2778em;\\\"></span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.07847em;\\\">I</span><span class=\\\"mord mathnormal\\\">n</span><span class=\\\"mord mathnormal\\\">t</span><span class=\\\"mord mathnormal\\\">e</span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.03588em;\\\">g</span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.02778em;\\\">er</span><span class=\\\"mord\\\">.</span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.10903em;\\\">M</span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.07847em;\\\">I</span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.10903em;\\\">N</span><span class=\\\"mord\\\" style=\\\"margin-right:0.02778em;\\\">_</span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.22222em;\\\">V</span><span class=\\\"mord mathnormal\\\">A</span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.10903em;\\\">LU</span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.05764em;\\\">E</span></span></span><span style=\\\"top:0.17em;\\\"><span class=\\\"pstrut\\\" style=\\\"height:3em;\\\"></span><span class=\\\"mord\\\"><span class=\\\"mord\\\"></span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2778em;\\\"></span><span class=\\\"mrel\\\">=</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2778em;\\\"></span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.07847em;\\\">I</span><span class=\\\"mord mathnormal\\\">n</span><span class=\\\"mord mathnormal\\\">t</span><span class=\\\"mord mathnormal\\\">e</span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.03588em;\\\">g</span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.02778em;\\\">er</span><span class=\\\"mord\\\">.</span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.10903em;\\\">M</span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.07847em;\\\">I</span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.10903em;\\\">N</span><span class=\\\"mord\\\" style=\\\"margin-right:0.02778em;\\\">_</span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.22222em;\\\">V</span><span class=\\\"mord mathnormal\\\">A</span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.10903em;\\\">LU</span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.05764em;\\\">E</span></span></span></span><span class=\\\"vlist-s\\\">​</span></span><span class=\\\"vlist-r\\\"><span class=\\\"vlist\\\" style=\\\"height:3.83em;\\\"><span></span></span></span></span></span></span></span></span></span></span></span></span></p>\\n<p>压缩后的代码：</p>\\n<pre><code class=\\\"hljs language-java\\\"><span class=\\\"hljs-keyword\\\">public</span> <span class=\\\"hljs-type\\\">int</span> <span class=\\\"hljs-title function_\\\">maxProfit</span><span class=\\\"hljs-params\\\">(<span class=\\\"hljs-type\\\">int</span> k, <span class=\\\"hljs-type\\\">int</span>[] prices)</span> {\\n    <span class=\\\"hljs-type\\\">int</span> <span class=\\\"hljs-variable\\\">n</span> <span class=\\\"hljs-operator\\\">=</span> prices.length;\\n    <span class=\\\"hljs-keyword\\\">if</span> (n == <span class=\\\"hljs-number\\\">0</span>) <span class=\\\"hljs-keyword\\\">return</span> <span class=\\\"hljs-number\\\">0</span>;\\n    <span class=\\\"hljs-keyword\\\">if</span> (k == <span class=\\\"hljs-number\\\">0</span>) <span class=\\\"hljs-keyword\\\">return</span> <span class=\\\"hljs-number\\\">0</span>;\\n    <span class=\\\"hljs-comment\\\">// 按照两次交易的套路 设定k * 2个状态</span>\\n    <span class=\\\"hljs-type\\\">int</span>[] dp  = <span class=\\\"hljs-keyword\\\">new</span> <span class=\\\"hljs-title class_\\\">int</span>[k * <span class=\\\"hljs-number\\\">2</span>];\\n    <span class=\\\"hljs-comment\\\">// 前一行状态的缓存</span>\\n    <span class=\\\"hljs-type\\\">int</span>[] tmp = <span class=\\\"hljs-keyword\\\">new</span> <span class=\\\"hljs-title class_\\\">int</span>[k * <span class=\\\"hljs-number\\\">2</span>];\\n    dp[<span class=\\\"hljs-number\\\">0</span>] = -prices[<span class=\\\"hljs-number\\\">0</span>];\\n    <span class=\\\"hljs-comment\\\">// 在第一天结束的时候 所有入股状态都设为无效值</span>\\n    <span class=\\\"hljs-keyword\\\">for</span> (<span class=\\\"hljs-type\\\">int</span> <span class=\\\"hljs-variable\\\">i</span> <span class=\\\"hljs-operator\\\">=</span> <span class=\\\"hljs-number\\\">2</span>; i &lt; k * <span class=\\\"hljs-number\\\">2</span>; i += <span class=\\\"hljs-number\\\">2</span>) {\\n        dp[i] = Integer.MIN_VALUE;\\n    }\\n\\n    <span class=\\\"hljs-keyword\\\">for</span> (<span class=\\\"hljs-type\\\">int</span> <span class=\\\"hljs-variable\\\">i</span> <span class=\\\"hljs-operator\\\">=</span> <span class=\\\"hljs-number\\\">1</span>; i &lt; n; i++) {\\n        <span class=\\\"hljs-comment\\\">// 遍历状态</span>\\n        <span class=\\\"hljs-keyword\\\">for</span> (<span class=\\\"hljs-type\\\">int</span> <span class=\\\"hljs-variable\\\">j</span> <span class=\\\"hljs-operator\\\">=</span> <span class=\\\"hljs-number\\\">0</span>; j &lt; k * <span class=\\\"hljs-number\\\">2</span>; j++) {\\n            <span class=\\\"hljs-keyword\\\">if</span> (j == <span class=\\\"hljs-number\\\">0</span>) {\\n                tmp[<span class=\\\"hljs-number\\\">0</span>] = Math.max(dp[<span class=\\\"hljs-number\\\">0</span>], <span class=\\\"hljs-number\\\">0</span> - prices[i]);\\n            } <span class=\\\"hljs-keyword\\\">else</span> <span class=\\\"hljs-keyword\\\">if</span> (j % <span class=\\\"hljs-number\\\">2</span> == <span class=\\\"hljs-number\\\">0</span>) {\\n                <span class=\\\"hljs-comment\\\">// 偶数状态为入股状态</span>\\n                tmp[j] = Math.max(dp[j], dp[j - <span class=\\\"hljs-number\\\">1</span>] - prices[i]);\\n            } <span class=\\\"hljs-keyword\\\">else</span> {\\n                <span class=\\\"hljs-comment\\\">// 奇数状态为出股状态</span>\\n                tmp[j] = Math.max(dp[j], dp[j - <span class=\\\"hljs-number\\\">1</span>] + prices[i]);\\n            }\\n        }\\n        <span class=\\\"hljs-comment\\\">// 缓存</span>\\n        <span class=\\\"hljs-type\\\">int</span>[] tt = tmp;\\n        tmp = dp;\\n        dp  = tt;\\n    }\\n\\n    <span class=\\\"hljs-type\\\">int</span> <span class=\\\"hljs-variable\\\">max</span> <span class=\\\"hljs-operator\\\">=</span> <span class=\\\"hljs-number\\\">0</span>;\\n    <span class=\\\"hljs-comment\\\">// 最大值为每次的出股状态和一股都不买的最大值</span>\\n    <span class=\\\"hljs-keyword\\\">for</span> (<span class=\\\"hljs-type\\\">int</span> <span class=\\\"hljs-variable\\\">i</span> <span class=\\\"hljs-operator\\\">=</span> <span class=\\\"hljs-number\\\">1</span>; i &lt; k * <span class=\\\"hljs-number\\\">2</span>; i += <span class=\\\"hljs-number\\\">2</span>) {\\n        max = Math.max(max, dp[i]);\\n    }\\n    <span class=\\\"hljs-keyword\\\">return</span> max;\\n}\\n</code></pre>\\n<p>然而这样会出现一个问题，我们要考虑到一个情况：如果<code>k &lt; prices.length / 2</code>，也就是说这里的问题已经转换为了无限次交易的问题，如果走原方法，题解会超时，所以我们可以不走动态规划和状态，直接使用<strong>线性贪婪</strong>的解法</p>\\n<p>最终代码为：</p>\\n<pre><code class=\\\"hljs language-java\\\"><span class=\\\"hljs-keyword\\\">public</span> <span class=\\\"hljs-type\\\">int</span> <span class=\\\"hljs-title function_\\\">maxProfit</span><span class=\\\"hljs-params\\\">(<span class=\\\"hljs-type\\\">int</span> k, <span class=\\\"hljs-type\\\">int</span>[] prices)</span> {\\n    <span class=\\\"hljs-type\\\">int</span> <span class=\\\"hljs-variable\\\">n</span> <span class=\\\"hljs-operator\\\">=</span> prices.length;\\n    <span class=\\\"hljs-keyword\\\">if</span> (n == <span class=\\\"hljs-number\\\">0</span>) <span class=\\\"hljs-keyword\\\">return</span> <span class=\\\"hljs-number\\\">0</span>;\\n    <span class=\\\"hljs-keyword\\\">if</span> (k == <span class=\\\"hljs-number\\\">0</span>) <span class=\\\"hljs-keyword\\\">return</span> <span class=\\\"hljs-number\\\">0</span>;\\n    <span class=\\\"hljs-comment\\\">// k如果大于交易天的一半 那么问题就直接转化为无限次交易</span>\\n    <span class=\\\"hljs-keyword\\\">if</span> (k &gt; n / <span class=\\\"hljs-number\\\">2</span>) {\\n        <span class=\\\"hljs-keyword\\\">return</span> maxProfitOfII(prices);\\n    }\\n\\n    <span class=\\\"hljs-comment\\\">// 和上面的一样</span>\\n    <span class=\\\"hljs-keyword\\\">return</span> max;\\n}\\n\\n<span class=\\\"hljs-comment\\\">/** 解决无限次交易的方法 也即问题 买卖股票的最佳时机 II\\n *  https://leetcode-cn.com/problems/best-time-to-buy-and-sell-stock-ii/\\n */</span>\\n<span class=\\\"hljs-keyword\\\">public</span> <span class=\\\"hljs-type\\\">int</span> <span class=\\\"hljs-title function_\\\">maxProfitOfII</span><span class=\\\"hljs-params\\\">(<span class=\\\"hljs-type\\\">int</span>[] prices)</span> {\\n    <span class=\\\"hljs-type\\\">int</span> <span class=\\\"hljs-variable\\\">res</span> <span class=\\\"hljs-operator\\\">=</span> <span class=\\\"hljs-number\\\">0</span>;\\n    <span class=\\\"hljs-keyword\\\">for</span> (<span class=\\\"hljs-type\\\">int</span> <span class=\\\"hljs-variable\\\">i</span> <span class=\\\"hljs-operator\\\">=</span> <span class=\\\"hljs-number\\\">1</span>; i &lt; prices.length; i++) {\\n        <span class=\\\"hljs-keyword\\\">if</span> (prices[i] &gt; prices[i - <span class=\\\"hljs-number\\\">1</span>]) {\\n            res += prices[i] - prices[i - <span class=\\\"hljs-number\\\">1</span>];\\n        }\\n    }\\n    <span class=\\\"hljs-keyword\\\">return</span> res;\\n}\\n</code></pre>\\n\";","export default \"<h3 id=\\\"collection接口\\\">Collection接口</h3>\\n<h3 id=\\\"源代码解读\\\">源代码解读</h3>\\n<h4 id=\\\"头部\\\">头部</h4>\\n<pre><code class=\\\"hljs language-java\\\"><span class=\\\"hljs-keyword\\\">public</span> <span class=\\\"hljs-keyword\\\">interface</span> <span class=\\\"hljs-title class_\\\">Collection</span>&lt;E&gt; <span class=\\\"hljs-keyword\\\">extends</span> <span class=\\\"hljs-title class_\\\">Iterable</span>&lt;E&gt; {\\n  <span class=\\\"hljs-comment\\\">//...</span>\\n}\\n</code></pre>\\n<p>头部继承了<code>Iterable&lt;E&gt;</code>接口, 对, 这里要注意是extends一个接口, 为什么是extends, 我们去看<code>Iterable&lt;E&gt;</code>接口里到底有啥, <a href=\\\"./1kakozs.html\\\">跳转文章</a>.</p>\\n<p>所以我们知道, Collection继承了这个<code>接口</code>就代表着它拥有了容器内元素可迭代访问的功能.</p>\\n<h4 id=\\\"方法\\\">方法</h4>\\n<h5 id=\\\"查询操作-query-operations\\\">查询操作 Query Operations</h5>\\n<h6 id=\\\"size方法\\\">size()方法</h6>\\n<pre><code class=\\\"hljs language-java\\\">    <span class=\\\"hljs-comment\\\">/**\\n     * (1) 返回容器中存储元素的个数,\\n     * (2) 注意如果容器存储元素的数量超过了Integer.MAX_VALUE, 则该方法会仅返回Integer.MAX_VALUE.\\n     *\\n     * Q1: 所以容器到底能不能存超过Integer.MAX_VALUE数量的元素?\\n     */</span>\\n    <span class=\\\"hljs-type\\\">int</span> <span class=\\\"hljs-title function_\\\">size</span><span class=\\\"hljs-params\\\">()</span>;\\n</code></pre>\\n<blockquote>\\n<p>注意返回值是int</p>\\n</blockquote>\\n<h6 id=\\\"isempty方法\\\">isEmpty()方法</h6>\\n<pre><code class=\\\"hljs language-java\\\">    <span class=\\\"hljs-type\\\">boolean</span> <span class=\\\"hljs-title function_\\\">isEmpty</span><span class=\\\"hljs-params\\\">()</span>;\\n</code></pre>\\n<blockquote>\\n<p>略</p>\\n</blockquote>\\n<h6 id=\\\"containsobject-o方法\\\">contains(Object o)方法</h6>\\n<pre><code class=\\\"hljs language-java\\\">    <span class=\\\"hljs-type\\\">boolean</span> <span class=\\\"hljs-title function_\\\">contains</span><span class=\\\"hljs-params\\\">(Object o)</span>;\\n</code></pre>\\n<blockquote>\\n<p>略</p>\\n</blockquote>\\n<h6 id=\\\"iterator方法\\\">iterator()方法</h6>\\n<pre><code class=\\\"hljs language-java\\\">    Iterator&lt;E&gt; <span class=\\\"hljs-title function_\\\">iterator</span><span class=\\\"hljs-params\\\">()</span>;\\n</code></pre>\\n<blockquote>\\n<p>略</p>\\n</blockquote>\\n<h6 id=\\\"toarray方法\\\">toArray()方法</h6>\\n<pre><code class=\\\"hljs language-java\\\">    <span class=\\\"hljs-comment\\\">/**\\n     * (1)返回一个包含集合所有元素的Object[]数组, 这个数组的元素顺序和迭代器迭代访问的顺序一致.\\n     * (2)这个方法返回的数组是安全的, 也就是一个new出来的数组, 里面的元素和源集合里的元素没有任何引用关系, 换句话说, 修改数组或者集合任何一方都不会影响彼此. \\n     * (3)这个方法被视为数组和集合的转换方法之一.\\n     */</span>\\n    Object[] toArray();\\n</code></pre>\\n<h6 id=\\\"toarrayt-a方法\\\">toArray(T[] a)方法</h6>\\n<pre><code class=\\\"hljs language-java\\\">    <span class=\\\"hljs-comment\\\">/**\\n     * (1)返回一个包含集合所有元素的指定运行时T类型的数组.\\n     * (2)如果数组的类型和容量适合改容器元素, 则将容器元素从数组0号位依次放置(覆盖数组该位置原值).\\n     * (3)如果类型不匹配, 则抛出<span class=\\\"hljs-doctag\\\">@throws</span> ArrayStoreException.\\n     * (4)如果容量过小, 则并不操作传入的数组, 集合元素转换的新数组可以通过返回值得到.\\n     * (5)数组安全.\\n     * (6)转换方法之一.\\n     * (7)toArray(new Object[0])这样调用等价于toArray().\\n     */</span>\\n    &lt;T&gt; T[] toArray(T[] a);\\n</code></pre>\\n<h5 id=\\\"修改操作-modification-operations\\\">修改操作 Modification Operations</h5>\\n<h6 id=\\\"adde-e方法\\\">add(E e)方法</h6>\\n<pre><code class=\\\"hljs language-java\\\">    <span class=\\\"hljs-comment\\\">/**\\n     * (1)这个方法不是必须要实现的.\\n     * (2)保证集合包含了特定的元素, 那么当集合的内容发生改变的时候, 方法返回true; 当集合不允许包含重复元素的时候, 这个方法返回false.\\n     * (3)支持这个方法的集合类需要明确地在文档中指出添加元素的条件限制, 比如在特定的情况下, 集合不允许添加null元素, 甚至还会强行限制添加元素的类型.\\n     * (4)如果不是在元素重复的情况下拒绝元素添加到容器中, 你最好抛出一个可清晰说明原由的异常, 而不是返回false.\\n     * \\n     * <span class=\\\"hljs-doctag\\\">@throws</span> IllegalStateException 如果你对元素的添加做出了限制, 规定某些元素不能被添加进来, 那么你可以抛出这个异常.\\n     * 常见异常 略.\\n     */</span>\\n    <span class=\\\"hljs-type\\\">boolean</span> <span class=\\\"hljs-title function_\\\">add</span><span class=\\\"hljs-params\\\">(E e)</span>;\\n</code></pre>\\n<blockquote>\\n<p>接口毕竟是接口, 注释中明确了实现这个方法的很多限制.</p>\\n</blockquote>\\n<h6 id=\\\"removeobject-o\\\">remove(Object o)</h6>\\n<pre><code class=\\\"hljs language-java\\\">    <span class=\\\"hljs-comment\\\">/**\\n     * (1)这个方法不是必须实现的.\\n     * (2)从集合中移除特定的一个元素, 移除规则需符合(o==null ? e==null : o.equals(e)), 如果有元素被移除, 则方法返回true.\\n     * \\n     * 常见异常 略.\\n     */</span>\\n    <span class=\\\"hljs-type\\\">boolean</span> <span class=\\\"hljs-title function_\\\">remove</span><span class=\\\"hljs-params\\\">(Object o)</span>;\\n</code></pre>\\n<h5 id=\\\"数量级操作-bulk-operations\\\">数量级操作 Bulk Operations</h5>\\n<h6 id=\\\"containsallcollection-c方法\\\">containsAll(Collection&lt;?&gt; c)方法</h6>\\n<pre><code class=\\\"hljs language-java\\\">    <span class=\\\"hljs-comment\\\">/**\\n     * (1)如果源集合里包含指定集合里的所有元素, 则返回true.\\n     */</span>\\n    <span class=\\\"hljs-type\\\">boolean</span> <span class=\\\"hljs-title function_\\\">containsAll</span><span class=\\\"hljs-params\\\">(Collection&lt;?&gt; c)</span>;\\n</code></pre>\\n<h6 id=\\\"addallcollection-extends-e-c方法\\\">addAll(Collection&lt;? extends E&gt; c)方法</h6>\\n<pre><code class=\\\"hljs language-java\\\">    <span class=\\\"hljs-comment\\\">/**\\n     * (1)这个方法不是必须实现的\\n     * (2)文档原句: \\n     *  The behavior of this operation is undefined if the \\n     *  specified collection is modified while the operation is in progress.\\n     *  (This implies that the behavior of this call is undefined if the\\n     *  specified collection is this collection, and this collection is\\n     *  nonempty.)\\n     *  大致意思是, 调用方法的时候, 在方法内部不可以回调这个方法, 甚至是调用this.addAll(c)\\n     *  因为在这个方法执行的时候, 该方法其实是未定义的. 实现该方法的时候需要注意一下.\\n     *\\n     * 常见异常 略.\\n     */</span>\\n    <span class=\\\"hljs-type\\\">boolean</span> <span class=\\\"hljs-title function_\\\">addAll</span><span class=\\\"hljs-params\\\">(Collection&lt;? extends E&gt; c)</span>;\\n</code></pre>\\n<h6 id=\\\"removeallcollection-c方法\\\">removeAll(Collection&lt;?&gt; c)方法</h6>\\n<pre><code class=\\\"hljs language-java\\\">    <span class=\\\"hljs-comment\\\">/**\\n     * (1)这个方法不是必须实现的.\\n     * (2)移除源集合中所有和c集合共有的元素.\\n     */</span>\\n    <span class=\\\"hljs-type\\\">boolean</span> <span class=\\\"hljs-title function_\\\">removeAll</span><span class=\\\"hljs-params\\\">(Collection&lt;?&gt; c)</span>;\\n</code></pre>\\n<h6 id=\\\"removeifpredicate-super-e-filter方法\\\">removeIf(Predicate&lt;? super E&gt; filter)方法</h6>\\n<pre><code class=\\\"hljs language-java\\\">    <span class=\\\"hljs-comment\\\">/**\\n     * (1)自1.8.\\n     * (2)移除集合中满足特定陈述(predicate)的元素.\\n     * \\n     * 实现要求:\\n     *  默认的实现是, 使用自己的迭代器去遍历元素. 每个匹配到的元素都使用Iterator.remove()方法.\\n        如果迭代器不支持移除方法, 则会在匹配到第一个元素的时候抛出相关异常.\\n     */</span>\\n    <span class=\\\"hljs-keyword\\\">default</span> <span class=\\\"hljs-type\\\">boolean</span> <span class=\\\"hljs-title function_\\\">removeIf</span><span class=\\\"hljs-params\\\">(Predicate&lt;? <span class=\\\"hljs-built_in\\\">super</span> E&gt; filter)</span> {\\n        Objects.requireNonNull(filter);\\n        <span class=\\\"hljs-type\\\">boolean</span> <span class=\\\"hljs-variable\\\">removed</span> <span class=\\\"hljs-operator\\\">=</span> <span class=\\\"hljs-literal\\\">false</span>;\\n        <span class=\\\"hljs-keyword\\\">final</span> Iterator&lt;E&gt; each = iterator();\\n        <span class=\\\"hljs-keyword\\\">while</span> (each.hasNext()) {\\n            <span class=\\\"hljs-keyword\\\">if</span> (filter.test(each.next())) {\\n                each.remove();\\n                removed = <span class=\\\"hljs-literal\\\">true</span>;\\n            }\\n        }\\n        <span class=\\\"hljs-keyword\\\">return</span> removed;\\n    }\\n</code></pre>\\n<h6 id=\\\"retainallcollection-c方法\\\">retainAll(Collection&lt;?&gt; c)方法</h6>\\n<pre><code class=\\\"hljs language-java\\\">    <span class=\\\"hljs-comment\\\">/**\\n     * (1)这个方法不是必须实现的.\\n     * (2)保留源集合中和c集合共有的元素.\\n     */</span>\\n    <span class=\\\"hljs-type\\\">boolean</span> <span class=\\\"hljs-title function_\\\">retainAll</span><span class=\\\"hljs-params\\\">(Collection&lt;?&gt; c)</span>;\\n</code></pre>\\n<h6 id=\\\"clear方法\\\">clear()方法</h6>\\n<pre><code class=\\\"hljs language-java\\\">    <span class=\\\"hljs-keyword\\\">void</span> <span class=\\\"hljs-title function_\\\">clear</span><span class=\\\"hljs-params\\\">()</span>;\\n</code></pre>\\n<blockquote>\\n<p>略</p>\\n</blockquote>\\n<h5 id=\\\"比较和散列-comparison-and-hashing\\\">比较和散列 Comparison and hashing</h5>\\n<h6 id=\\\"equalsobject-o方法\\\">equals(Object o)方法</h6>\\n<pre><code class=\\\"hljs language-java\\\">    <span class=\\\"hljs-type\\\">boolean</span> <span class=\\\"hljs-title function_\\\">equals</span><span class=\\\"hljs-params\\\">(Object o)</span>;\\n</code></pre>\\n<blockquote>\\n<p>略</p>\\n</blockquote>\\n<h6 id=\\\"hashcode方法\\\">hashCode()方法</h6>\\n<pre><code class=\\\"hljs language-java\\\">    <span class=\\\"hljs-type\\\">boolean</span> <span class=\\\"hljs-title function_\\\">hashCode</span><span class=\\\"hljs-params\\\">()</span>;\\n</code></pre>\\n<blockquote>\\n<p>略</p>\\n</blockquote>\\n<h6 id=\\\"spliterator方法\\\">spliterator()方法</h6>\\n<pre><code class=\\\"hljs language-java\\\">    <span class=\\\"hljs-comment\\\">/**\\n     * (1)自1.8.\\n     * (2)返回一个Spliterators对象\\n     * (3)若要实现该方法, 需要记录好子迭代器的特征值. 如果子迭代器记录的是Spliterator.SIZED \\n     * 而且集合没有元素, 那么就没有必要再记录特征值了.\\n     * (4)默认的实现最好被子类重载, 以得到更有效的子迭代器. 为了更好地保存stream()方法和parallelStream()方法的懒加载, \\n     *  子迭代器必须持有 IMMUTABLE 或者 CONCURRENT, 或者是`延迟绑定`的.\\n     *  如果没有持有这些特征值, 重载的类必须在子迭代器中记录好绑定的策略以及结构化的接口, 并且需要重载stream()方法和parallelStream()方法\\n     */</span>\\n    <span class=\\\"hljs-meta\\\">@Override</span>\\n    <span class=\\\"hljs-keyword\\\">default</span> Spliterator&lt;E&gt; <span class=\\\"hljs-title function_\\\">spliterator</span><span class=\\\"hljs-params\\\">()</span> {\\n        <span class=\\\"hljs-keyword\\\">return</span> Spliterators.spliterator(<span class=\\\"hljs-built_in\\\">this</span>, <span class=\\\"hljs-number\\\">0</span>);\\n    }\\n</code></pre>\\n<h4 id=\\\"疑问\\\">疑问</h4>\\n<h5 id=\\\"q1-容器到底能不能存超过integermax_value数量的元素\\\">Q1: 容器到底能不能存超过Integer.MAX_VALUE数量的元素?</h5>\\n<h5 id=\\\"q2-spliterator方法的作用是什么\\\">Q2: spliterator()方法的作用是什么?</h5>\\n\";","export default \"<p><div class=\\\"saying mb-4\\\"><div class=\\\"saying-quote saying-left-quote\\\">“</div><div class=\\\"saying-quote saying-right-quote\\\">”</div></p>\\n<p>Metacharacters：元字符</p>\\n<p></div></p>\\n<!-- more -->\\n\\n<h3 id=\\\"元字符的解释\\\">元字符的解释</h3>\\n<p>完整的正则表达式由两种字符组成：</p>\\n<ul>\\n<li>特殊字符，即<code>元字符</code>，它们一般具有特殊的含义，并不匹配字面字符。</li>\\n<li>文字，即普通<code>文本字符</code>，匹配的就是字面字符。</li>\\n</ul>\\n<hr>\\n<h4 id=\\\"行的起始和结束\\\">行的起始和结束</h4>\\n<blockquote>\\n<p><code>^</code> 脱字符号，在检查一行文本的时候，<code>^</code>代表一行的开始。</p>\\n</blockquote>\\n<blockquote>\\n<p><code>$</code> 美元符号，在检查一行文本的时候，<code>$</code>代表一行的结束。</p>\\n</blockquote>\\n<ul>\\n<li><code>^cat</code> ：表示匹配以cat开头的行，如categories</li>\\n<li><code>cat$</code> ：表示匹配以$结尾的行，如aaaacat</li>\\n</ul>\\n<p>我们以更机械的方式去解读第一个例子：<code>^cat</code> 匹配的是以c作为一行的第一个字符，紧接着c后面是a，a后面紧接着t的文本。</p>\\n<p>这两个符号的特殊之处就在于，它们匹配的只是位置，而不是特定的文本。</p>\\n<hr>\\n<h4 id=\\\"字符组\\\">字符组</h4>\\n<h5 id=\\\"匹配若干字符之一\\\">匹配若干字符之一</h5>\\n<p>这里需要引入一个概念：正则表达式结构体（construct）<code>[...]</code>。它允许使用者列出在某处期望匹配的字符的候选值，通常也被称为字符组。</p>\\n<p>比如当我们不确定是要匹配grey还是gray的时候，我们可以这样写<code>gr[ae]y</code>，它想表达的意思是：匹配一段文本，它是先有一个g，g后是一个r，r后可以是a或者e其中之一，然后就是一个y。</p>\\n<p>在<code>gr[ae]y</code>中，<code>g</code>或者<code>r</code>、<code>y</code>这样的表达式，它们被解释为：g后面紧跟着、r后面紧跟着这样的“接下来（and then）”的含义，而在<code>[ae]</code>中，里面的字符被解释为：这个结构体的位置被替换为a或者是e。</p>\\n<p>我们还有可能遇到的场景是，<code>[123456789]</code>甚至是26个字母全用上的情况，这个时候我们可以使用<strong>字符组元字符</strong><code>-</code>（连接符）来表示一个范围，比如<code>[1-9]</code>和<code>[123456789]</code>是完全相等的。同时还支持多重范围比如<code>[a-h1-6F-I]</code>和<code>[abcdefg123456FGHI]</code>等效。</p>\\n<p>还可以在字符组里面使用普通文本[_.!?]可以匹配下划线或者点或者感叹号或者问号。</p>\\n<p><strong>需要注意的是：只有在字符组内部，并且能够表示特定范围含义，比如1到9，a到z这样的范围，连字符才是元字符，在其他情况下它只能匹配普通的连字符号。而在字符组内的问号和点号则是匹配一般的符号，它们在组内不是元字符，在组外是元字符。这有点像正常语言中，某个单词在不同的语境中有不同的解释一样，我私称这样的情况为<code>语境分意</code></strong></p>\\n<h5 id=\\\"排除型字符组\\\">排除型字符组</h5>\\n<p>还有一种字符组形如：<code>[^...]</code>，这个字符组会匹配任何<strong>未</strong>列出的字符。例如<code>[^1-6]</code>匹配除了1到6以外的任何字符。</p>\\n<p>你可能已经注意到了，<code>^</code>脱字符在组内和组外的含义的不一样的，由此我们了解到，<strong>元字符会根据环境的不同而改变它所要表达的含义。</strong></p>\\n<blockquote>\\n<p>书例：<code>q[^u]</code>是否能匹配<code>Iraq</code>？</p>\\n<p>我们机械地解读表达式：q后面紧跟一个除了u以外的字符。注意是“后面紧跟”，所以这就意味着，q字符绝对不是最后一个字母。</p>\\n<p>因此我们知道：一个字符组，即使是排除型的字符组，也必须匹配一个字符。</p>\\n</blockquote>\\n<h5 id=\\\"点号匹配任意字符\\\">点号匹配任意字符</h5>\\n<p>元字符<code>.</code>是用来匹配任意字符的字符组的简便写法，注意是<strong>字符组</strong>的便捷写法。如果我们要搜索03/19/76、03-19-76、03.19.76，一般的的做法是写<code>03[-/.]19[-/.]76</code>来让字符组匹配一个减号或者斜杠或者英文句号，我们也可以这样写<code>03.19.76</code>。这里又出现<strong>语境分意</strong>的情况了，<code>.</code>在字符组内外的含义不同，而<code>-</code>在字符组内的位置不同语义也不同，如果写成<code>[.-/]</code>，则是用来表示范围的，这里需要特别留心。</p>\\n<hr>\\n<h4 id=\\\"多选结构\\\">多选结构</h4>\\n<h5 id=\\\"匹配任意子表达式\\\">匹配任意子表达式</h5>\\n<p><code>|</code>是一个非常简洁的元字符，它等于布尔运算里面的“或（or）”。比如<code>Bob</code>和<code>Robert</code>是两个表达式，但<code>Bob|Robert</code>就是一个表达式，但是可以匹配里面两种情况。这样的组合称之为“多选分支（alternative）”。</p>\\n<p>我们之前的<code>gr[ea]y</code>可以写成<code>grey|gray</code>，或者是<code>gr(a|e)y</code>，最后这种情况用括号来划定多选结构的范围（一般情况下，括号也是元字符）。同样值得注意的是，如果我们写成<code>gr[e|a]y</code>，那么这里面的<code>|</code>就并不代表或而是代表“|”符号本身。</p>\\n<p>在表达式<code>gr(a|e)y</code>中，括号是必须的，如果没有括号，<code>gre|ay</code>就变成了匹配<code>gre</code>或者<code>ay</code>了。<strong>多选结构可以包含很多字符，但是不能超过括号的界限。</strong> 再举一个例子：<code>(Fir|1)st [Ss]treet</code>可以匹配<code>First Street</code>、<code>First street</code>、<code>1st Street</code>、<code>1st street</code>等。</p>\\n<p>再一次强调，多选结构和字符组的区别是：<strong>字符组只能匹配一个字符，但是多选结构可以匹配多个字符！</strong></p>\\n<h4 id=\\\"可选项元素\\\">可选项元素</h4>\\n<p>比如color和colour，其中只有一个u的区别，我们可以用<code>colou?r</code>这样的表达式来解决，<code>?</code>元字符代表可选，它代表前面一个字母是可选的匹配项。</p>\\n<p><code>?</code>只作用与之前紧邻的元素，所以我们让机械来读这个表达式则是：<code>c</code>，然后<code>o</code>然后<code>l</code>然后<code>o</code>然后<code>u?</code>最后<code>r</code>。</p>\\n<p>比较特别的是，<code>u?</code>这样的表达式是永远都能匹配成功的，它可以匹配以个u，也可以什么都不匹配。</p>\\n\";","export default \"<h3 id=\\\"71-simplifypathmedium\\\">71. SimplifyPath(Medium)</h3>\\n<p>Given an <strong>absolute path</strong> for a file (Unix-style), simplify it. Or in other words, convert it to the <strong>canonical path</strong>.</p>\\n<p>In a UNIX-style file system, a period <code>.</code> refers to the current directory. Furthermore, a double period <code>..</code> moves the directory up a level. For more information, see: <a href=\\\"https://www.linuxnix.com/abslute-path-vs-relative-path-in-linuxunix/\\\">Absolute path vs relative path in Linux/Unix</a></p>\\n<p>Note that the returned canonical path must always begin with a slash <code>/</code>, and there must be only a single slash <code>/</code> between two directory names. The last directory name (if it exists) <strong>must not</strong> end with a trailing <code>/</code>. Also, the canonical path must be the <strong>shortest</strong> string representing the absolute path.</p>\\n<p><strong>Example 1:</strong></p>\\n<pre><code>Input: &quot;/home/&quot;\\nOutput: &quot;/home&quot;\\nExplanation: Note that there is no trailing slash after the last directory name.\\n</code></pre>\\n<p><strong>Example 2:</strong></p>\\n<pre><code>Input: &quot;/../&quot;\\nOutput: &quot;/&quot;\\nExplanation: Going one level up from the root directory is a no-op, as the root level is the highest level you can go.\\n</code></pre>\\n<p><strong>Example 3:</strong></p>\\n<pre><code>Input: &quot;/home//foo/&quot;\\nOutput: &quot;/home/foo&quot;\\nExplanation: In the canonical path, multiple consecutive slashes are replaced by a single one.\\n</code></pre>\\n<p><strong>Example 4:</strong></p>\\n<pre><code>Input: &quot;/a/./b/../../c/&quot;\\nOutput: &quot;/c&quot;\\n</code></pre>\\n<p><strong>Example 5:</strong></p>\\n<pre><code>Input: &quot;/a/../../b/../c//.//&quot;\\nOutput: &quot;/c&quot;\\n</code></pre>\\n<p><strong>Example 6:</strong></p>\\n<pre><code>Input: &quot;/a//b////c/d//././/..&quot;\\nOutput: &quot;/a/b/c&quot;\\n</code></pre>\\n<h4 id=\\\"iterate\\\">Iterate</h4>\\n<p>以<code>/</code>为单位截出name，然后如果碰到不是<code>..</code>也不是<code>.</code>也非空的name，就加入到队列中，如果碰到<code>..</code>，就退出中尾部的name，最后依次遍历队列，组成path</p>\\n<pre><code class=\\\"hljs language-java\\\"><span class=\\\"hljs-keyword\\\">public</span> String <span class=\\\"hljs-title function_\\\">simplifyPath</span><span class=\\\"hljs-params\\\">(String path)</span> {\\n    <span class=\\\"hljs-type\\\">StringBuilder</span> <span class=\\\"hljs-variable\\\">sb</span> <span class=\\\"hljs-operator\\\">=</span> <span class=\\\"hljs-keyword\\\">new</span> <span class=\\\"hljs-title class_\\\">StringBuilder</span>(<span class=\\\"hljs-string\\\">&quot;/&quot;</span>);\\n    LinkedList&lt;String&gt; list = <span class=\\\"hljs-keyword\\\">new</span> <span class=\\\"hljs-title class_\\\">LinkedList</span>&lt;&gt;();\\n    <span class=\\\"hljs-type\\\">int</span> <span class=\\\"hljs-variable\\\">nowI</span> <span class=\\\"hljs-operator\\\">=</span> <span class=\\\"hljs-number\\\">0</span>;\\n    <span class=\\\"hljs-keyword\\\">while</span> (nowI &lt; path.length()) {\\n        <span class=\\\"hljs-type\\\">int</span> <span class=\\\"hljs-variable\\\">nextI</span> <span class=\\\"hljs-operator\\\">=</span> path.indexOf(<span class=\\\"hljs-string\\\">&#x27;/&#x27;</span>, nowI + <span class=\\\"hljs-number\\\">1</span>);\\n        String name;\\n        <span class=\\\"hljs-keyword\\\">if</span> (nextI &gt; nowI) {\\n            name = path.substring(nowI + <span class=\\\"hljs-number\\\">1</span>, nextI);\\n            nowI = nextI;\\n        } <span class=\\\"hljs-keyword\\\">else</span> {\\n            name = path.substring(nowI + <span class=\\\"hljs-number\\\">1</span>);\\n            nowI = path.length();\\n        }\\n\\n        <span class=\\\"hljs-keyword\\\">if</span> (name.equals(<span class=\\\"hljs-string\\\">&quot;..&quot;</span>) && !list.isEmpty()) {\\n            list.removeLast();\\n        } <span class=\\\"hljs-keyword\\\">else</span> <span class=\\\"hljs-keyword\\\">if</span> (!name.equals(<span class=\\\"hljs-string\\\">&quot;.&quot;</span>) && !name.equals(<span class=\\\"hljs-string\\\">&quot;..&quot;</span>) && !name.isEmpty()) {\\n            list.add(name);\\n        }\\n    }\\n    <span class=\\\"hljs-keyword\\\">for</span> (String name : list) {\\n        sb.append(name).append(<span class=\\\"hljs-string\\\">&#x27;/&#x27;</span>);\\n    }\\n    <span class=\\\"hljs-keyword\\\">if</span> (sb.length() &gt; <span class=\\\"hljs-number\\\">1</span>) {\\n        sb.deleteCharAt(sb.lastIndexOf(<span class=\\\"hljs-string\\\">&quot;/&quot;</span>));\\n    }\\n    <span class=\\\"hljs-keyword\\\">return</span> sb.toString();\\n}\\n</code></pre>\\n<h3 id=\\\"72-edit-distancehard\\\">72. Edit Distance(Hard)</h3>\\n<p>Given two words <em>word1</em> and <em>word2</em>, find the minimum number of operations required to convert <em>word1</em> to <em>word2</em>.</p>\\n<p>You have the following 3 operations permitted on a word:</p>\\n<ol>\\n<li>Insert a character</li>\\n<li>Delete a character</li>\\n<li>Replace a character</li>\\n</ol>\\n<p><strong>Example 1:</strong></p>\\n<pre><code>Input: word1 = &quot;horse&quot;, word2 = &quot;ros&quot;\\nOutput: 3\\nExplanation: \\nhorse -&gt; rorse (replace &#x27;h&#x27; with &#x27;r&#x27;)\\nrorse -&gt; rose (remove &#x27;r&#x27;)\\nrose -&gt; ros (remove &#x27;e&#x27;)\\n</code></pre>\\n<p><strong>Example 2:</strong></p>\\n<pre><code>Input: word1 = &quot;intention&quot;, word2 = &quot;execution&quot;\\nOutput: 5\\nExplanation: \\nintention -&gt; inention (remove &#x27;t&#x27;)\\ninention -&gt; enention (replace &#x27;i&#x27; with &#x27;e&#x27;)\\nenention -&gt; exention (replace &#x27;n&#x27; with &#x27;x&#x27;)\\nexention -&gt; exection (replace &#x27;n&#x27; with &#x27;c&#x27;)\\nexection -&gt; execution (insert &#x27;u&#x27;)\\n</code></pre>\\n<h4 id=\\\"dp\\\">DP</h4>\\n<p>针对这题的分析在<a href=\\\"./1flo1c0.html?hash=fd3f1d11\\\">DP Again</a>中</p>\\n<pre><code class=\\\"hljs language-java\\\"><span class=\\\"hljs-keyword\\\">public</span> <span class=\\\"hljs-type\\\">int</span> <span class=\\\"hljs-title function_\\\">minDistance</span><span class=\\\"hljs-params\\\">(String word1, String word2)</span> {\\n    <span class=\\\"hljs-type\\\">int</span>[][] dp = <span class=\\\"hljs-keyword\\\">new</span> <span class=\\\"hljs-title class_\\\">int</span>[word1.length() + <span class=\\\"hljs-number\\\">1</span>][word2.length() + <span class=\\\"hljs-number\\\">1</span>];\\n    <span class=\\\"hljs-keyword\\\">for</span> (<span class=\\\"hljs-type\\\">int</span> <span class=\\\"hljs-variable\\\">i</span> <span class=\\\"hljs-operator\\\">=</span> <span class=\\\"hljs-number\\\">0</span>; i &lt;= word1.length(); i++) {\\n        dp[i][<span class=\\\"hljs-number\\\">0</span>] = i;\\n    }\\n    <span class=\\\"hljs-keyword\\\">for</span> (<span class=\\\"hljs-type\\\">int</span> <span class=\\\"hljs-variable\\\">j</span> <span class=\\\"hljs-operator\\\">=</span> <span class=\\\"hljs-number\\\">0</span>; j &lt;= word2.length(); j++) {\\n        dp[<span class=\\\"hljs-number\\\">0</span>][j] = j;\\n    }\\n    <span class=\\\"hljs-keyword\\\">for</span> (<span class=\\\"hljs-type\\\">int</span> <span class=\\\"hljs-variable\\\">i</span> <span class=\\\"hljs-operator\\\">=</span> <span class=\\\"hljs-number\\\">1</span>; i &lt;= word1.length(); i++) {\\n        <span class=\\\"hljs-keyword\\\">for</span> (<span class=\\\"hljs-type\\\">int</span> <span class=\\\"hljs-variable\\\">j</span> <span class=\\\"hljs-operator\\\">=</span> <span class=\\\"hljs-number\\\">1</span>; j &lt;= word2.length(); j++) {\\n            <span class=\\\"hljs-keyword\\\">if</span> (word1.charAt(i - <span class=\\\"hljs-number\\\">1</span>) == word2.charAt(j - <span class=\\\"hljs-number\\\">1</span>)) {\\n                <span class=\\\"hljs-comment\\\">// same as before</span>\\n                dp[i][j] = dp[i - <span class=\\\"hljs-number\\\">1</span>][j - <span class=\\\"hljs-number\\\">1</span>];\\n            } <span class=\\\"hljs-keyword\\\">else</span> {\\n                dp[i][j] = <span class=\\\"hljs-number\\\">1</span>\\n                        + Math.min(\\n                                <span class=\\\"hljs-comment\\\">// replace</span>\\n                                dp[i - <span class=\\\"hljs-number\\\">1</span>][j - <span class=\\\"hljs-number\\\">1</span>],\\n                        Math.min(\\n                                <span class=\\\"hljs-comment\\\">// delete</span>\\n                                dp[i - <span class=\\\"hljs-number\\\">1</span>][j],\\n                                <span class=\\\"hljs-comment\\\">// insert</span>\\n                                dp[i][j - <span class=\\\"hljs-number\\\">1</span>]));\\n            }\\n        }\\n    }\\n    <span class=\\\"hljs-keyword\\\">return</span> dp[word1.length()][word2.length()];\\n}\\n</code></pre>\\n<h4 id=\\\"dfs\\\">DFS</h4>\\n<pre><code class=\\\"hljs language-java\\\"><span class=\\\"hljs-keyword\\\">public</span> <span class=\\\"hljs-type\\\">int</span> <span class=\\\"hljs-title function_\\\">minDistance2</span><span class=\\\"hljs-params\\\">(String a, String b)</span> {\\n    <span class=\\\"hljs-type\\\">int</span>[][] dp = <span class=\\\"hljs-keyword\\\">new</span> <span class=\\\"hljs-title class_\\\">int</span>[a.length() + <span class=\\\"hljs-number\\\">1</span>][b.length() + <span class=\\\"hljs-number\\\">1</span>];\\n    <span class=\\\"hljs-keyword\\\">return</span> dfs(a, b, a.length() - <span class=\\\"hljs-number\\\">1</span>, b.length() - <span class=\\\"hljs-number\\\">1</span>, dp);\\n}\\n\\n<span class=\\\"hljs-keyword\\\">private</span> <span class=\\\"hljs-type\\\">int</span> <span class=\\\"hljs-title function_\\\">dfs</span><span class=\\\"hljs-params\\\">(String a, String b, <span class=\\\"hljs-type\\\">int</span> i, <span class=\\\"hljs-type\\\">int</span> j, <span class=\\\"hljs-type\\\">int</span>[][] dp)</span> {\\n    <span class=\\\"hljs-keyword\\\">if</span> (i == -<span class=\\\"hljs-number\\\">1</span>) {\\n        <span class=\\\"hljs-keyword\\\">return</span> j + <span class=\\\"hljs-number\\\">1</span>;\\n    }\\n    <span class=\\\"hljs-keyword\\\">if</span> (j == -<span class=\\\"hljs-number\\\">1</span>) {\\n        <span class=\\\"hljs-keyword\\\">return</span> i + <span class=\\\"hljs-number\\\">1</span>;\\n    }\\n    <span class=\\\"hljs-keyword\\\">if</span> (dp[i][j] == <span class=\\\"hljs-number\\\">0</span>) {\\n        <span class=\\\"hljs-keyword\\\">if</span> (a.charAt(i) == b.charAt(j)) {\\n            dp[i][j] = dfs(a, b, i - <span class=\\\"hljs-number\\\">1</span>, j - <span class=\\\"hljs-number\\\">1</span>, dp);\\n        } <span class=\\\"hljs-keyword\\\">else</span> {\\n            dp[i][j] = <span class=\\\"hljs-number\\\">1</span>\\n                    + Math.min(\\n                            dfs(a, b, i - <span class=\\\"hljs-number\\\">1</span>, j - <span class=\\\"hljs-number\\\">1</span>, dp),\\n                    Math.min(\\n                            dfs(a, b, i - <span class=\\\"hljs-number\\\">1</span>, j, dp),\\n                            dfs(a, b, i, j - <span class=\\\"hljs-number\\\">1</span>, dp)));\\n        }\\n    }\\n    <span class=\\\"hljs-keyword\\\">return</span> dp[i][j];\\n}\\n</code></pre>\\n<h3 id=\\\"73-set-matrix-zerosmedium\\\">73. Set Matrix Zeros(Medium)</h3>\\n<p>Given a <em>m</em> x <em>n</em> matrix, if an element is 0, set its entire row and column to 0. Do it <a href=\\\"https://en.wikipedia.org/wiki/In-place_algorithm\\\"><strong>in-place</strong></a>.</p>\\n<p><strong>Example 1:</strong></p>\\n<pre><code>Input: \\n[\\n  [1,1,1],\\n  [1,0,1],\\n  [1,1,1]\\n]\\nOutput: \\n[\\n  [1,0,1],\\n  [0,0,0],\\n  [1,0,1]\\n]\\n</code></pre>\\n<p><strong>Example 2:</strong></p>\\n<pre><code>Input: \\n[\\n  [0,1,2,0],\\n  [3,4,5,2],\\n  [1,3,1,5]\\n]\\nOutput: \\n[\\n  [0,0,0,0],\\n  [0,4,5,0],\\n  [0,3,1,0]\\n]\\n</code></pre>\\n<p><strong>Follow up:</strong></p>\\n<ul>\\n<li>A straight forward solution using O(<em>m**n</em>) space is probably a bad idea.</li>\\n<li>A simple improvement uses O(<em>m</em> + <em>n</em>) space, but still not the best solution.</li>\\n<li>Could you devise a constant space solution?</li>\\n</ul>\\n<h4 id=\\\"brute-force\\\">Brute Force</h4>\\n<p>这题我觉得没必要想太多，暴力解复杂度也就O(mn)，然后这边空间复杂度就O(m + n)，虽然题目要求说要用常数空间去做</p>\\n<pre><code class=\\\"hljs language-java\\\"><span class=\\\"hljs-keyword\\\">public</span> <span class=\\\"hljs-keyword\\\">void</span> <span class=\\\"hljs-title function_\\\">setZeroes</span><span class=\\\"hljs-params\\\">(<span class=\\\"hljs-type\\\">int</span>[][] matrix)</span> {\\n    <span class=\\\"hljs-type\\\">boolean</span>[] rowZ = <span class=\\\"hljs-keyword\\\">new</span> <span class=\\\"hljs-title class_\\\">boolean</span>[matrix.length];\\n    <span class=\\\"hljs-type\\\">boolean</span>[] colZ = <span class=\\\"hljs-keyword\\\">new</span> <span class=\\\"hljs-title class_\\\">boolean</span>[matrix[<span class=\\\"hljs-number\\\">0</span>].length];\\n    <span class=\\\"hljs-keyword\\\">for</span> (<span class=\\\"hljs-type\\\">int</span> <span class=\\\"hljs-variable\\\">i</span> <span class=\\\"hljs-operator\\\">=</span> <span class=\\\"hljs-number\\\">0</span>; i &lt; matrix.length; i++) {\\n        <span class=\\\"hljs-keyword\\\">for</span> (<span class=\\\"hljs-type\\\">int</span> <span class=\\\"hljs-variable\\\">j</span> <span class=\\\"hljs-operator\\\">=</span> <span class=\\\"hljs-number\\\">0</span>; j &lt; matrix[i].length; j++) {\\n            <span class=\\\"hljs-keyword\\\">if</span> (matrix[i][j] == <span class=\\\"hljs-number\\\">0</span>) {\\n                rowZ[i] = colZ[j] = <span class=\\\"hljs-literal\\\">true</span>;\\n            }\\n        }\\n    }\\n    <span class=\\\"hljs-keyword\\\">for</span> (<span class=\\\"hljs-type\\\">int</span> <span class=\\\"hljs-variable\\\">i</span> <span class=\\\"hljs-operator\\\">=</span> <span class=\\\"hljs-number\\\">0</span>; i &lt; matrix.length; i++) {\\n        <span class=\\\"hljs-keyword\\\">if</span> (rowZ[i]) {\\n            Arrays.fill(matrix[i], <span class=\\\"hljs-number\\\">0</span>);\\n        } <span class=\\\"hljs-keyword\\\">else</span> {\\n            <span class=\\\"hljs-keyword\\\">for</span> (<span class=\\\"hljs-type\\\">int</span> <span class=\\\"hljs-variable\\\">j</span> <span class=\\\"hljs-operator\\\">=</span> <span class=\\\"hljs-number\\\">0</span>; j &lt; matrix[i].length; j++) {\\n                <span class=\\\"hljs-keyword\\\">if</span> (colZ[j]) {\\n                    matrix[i][j] = <span class=\\\"hljs-number\\\">0</span>;\\n                }\\n            }\\n        }\\n    }\\n}\\n</code></pre>\\n<h3 id=\\\"74-search-a-2d-matrixmedium\\\">74. Search a 2D Matrix(Medium)</h3>\\n<p>Write an efficient algorithm that searches for a value in an <em>m</em> x <em>n</em> matrix. This matrix has the following properties:</p>\\n<ul>\\n<li>Integers in each row are sorted from left to right.</li>\\n<li>The first integer of each row is greater than the last integer of the previous row.</li>\\n</ul>\\n<p><strong>Example 1:</strong></p>\\n<pre><code>Input:\\nmatrix = [\\n  [1,   3,  5,  7],\\n  [10, 11, 16, 20],\\n  [23, 30, 34, 50]\\n]\\ntarget = 3\\nOutput: true\\n</code></pre>\\n<p><strong>Example 2:</strong></p>\\n<pre><code>Input:\\nmatrix = [\\n  [1,   3,  5,  7],\\n  [10, 11, 16, 20],\\n  [23, 30, 34, 50]\\n]\\ntarget = 13\\nOutput: false\\n</code></pre>\\n<h4 id=\\\"binary\\\">Binary</h4>\\n<p>没什么好说的</p>\\n<pre><code class=\\\"hljs language-java\\\"><span class=\\\"hljs-keyword\\\">public</span> <span class=\\\"hljs-type\\\">boolean</span> <span class=\\\"hljs-title function_\\\">searchMatrix</span><span class=\\\"hljs-params\\\">(<span class=\\\"hljs-type\\\">int</span>[][] matrix, <span class=\\\"hljs-type\\\">int</span> target)</span> {\\n    <span class=\\\"hljs-keyword\\\">if</span> (matrix.length == <span class=\\\"hljs-number\\\">0</span> || matrix[<span class=\\\"hljs-number\\\">0</span>].length == <span class=\\\"hljs-number\\\">0</span>) {\\n        <span class=\\\"hljs-keyword\\\">return</span> <span class=\\\"hljs-literal\\\">false</span>;\\n    }\\n    <span class=\\\"hljs-type\\\">int</span> <span class=\\\"hljs-variable\\\">m</span> <span class=\\\"hljs-operator\\\">=</span> matrix.length, n = matrix[<span class=\\\"hljs-number\\\">0</span>].length;\\n    <span class=\\\"hljs-type\\\">int</span> <span class=\\\"hljs-variable\\\">low</span> <span class=\\\"hljs-operator\\\">=</span> <span class=\\\"hljs-number\\\">0</span>, high = m - <span class=\\\"hljs-number\\\">1</span>, mid;\\n    <span class=\\\"hljs-keyword\\\">while</span> (low &lt;= high) {\\n        mid = (high + low) &gt;&gt;&gt; <span class=\\\"hljs-number\\\">1</span>;\\n        <span class=\\\"hljs-type\\\">int</span> <span class=\\\"hljs-variable\\\">rowHead</span> <span class=\\\"hljs-operator\\\">=</span> matrix[mid][<span class=\\\"hljs-number\\\">0</span>];\\n        <span class=\\\"hljs-type\\\">int</span> <span class=\\\"hljs-variable\\\">rowTail</span> <span class=\\\"hljs-operator\\\">=</span> matrix[mid][n - <span class=\\\"hljs-number\\\">1</span>];\\n        <span class=\\\"hljs-keyword\\\">if</span> (rowHead &lt;= target && rowTail &gt;= target) {\\n            <span class=\\\"hljs-keyword\\\">return</span> Arrays.binarySearch(matrix[mid], target) &gt;= <span class=\\\"hljs-number\\\">0</span>;\\n        }\\n        <span class=\\\"hljs-keyword\\\">if</span> (rowHead &gt; target) {\\n            high = mid - <span class=\\\"hljs-number\\\">1</span>;\\n        } <span class=\\\"hljs-keyword\\\">else</span> {\\n            low = mid + <span class=\\\"hljs-number\\\">1</span>;\\n        }\\n    }\\n    <span class=\\\"hljs-keyword\\\">return</span> <span class=\\\"hljs-literal\\\">false</span>;\\n}\\n</code></pre>\\n<h3 id=\\\"75-sort-colorsmedium\\\">75. Sort Colors(Medium)</h3>\\n<p>Given an array with <em>n</em> objects colored red, white or blue, sort them <strong>in-place</strong> so that objects of the same color are adjacent, with the colors in the order red, white and blue.</p>\\n<p>Here, we will use the integers 0, 1, and 2 to represent the color red, white, and blue respectively.</p>\\n<p><strong>Note:</strong> You are not suppose to use the library&#39;s sort function for this problem.</p>\\n<p><strong>Example:</strong></p>\\n<pre><code>Input: [2,0,2,1,1,0]\\nOutput: [0,0,1,1,2,2]\\n</code></pre>\\n<p><strong>Follow up:</strong></p>\\n<ul>\\n<li>A rather straight forward solution is a two-pass algorithm using counting sort.\\n  First, iterate the array counting number of 0&#39;s, 1&#39;s, and 2&#39;s, then overwrite array with total number of 0&#39;s, then 1&#39;s and followed by 2&#39;s.</li>\\n<li>Could you come up with a one-pass algorithm using only constant space?</li>\\n</ul>\\n<h4 id=\\\"two-pass-counting-sort\\\">Two-pass Counting Sort</h4>\\n<p>关于计数排序，<a href=\\\"./1b0rp9e.html?hash=63d906b\\\">排序大礼包</a>的时候讲过的，但这是2n时间，题目要求1n时间，暂时就不先做了，因为我觉得盲目追求1n时间属于投机</p>\\n<pre><code class=\\\"hljs language-java\\\"><span class=\\\"hljs-keyword\\\">public</span> <span class=\\\"hljs-keyword\\\">void</span> <span class=\\\"hljs-title function_\\\">sortColors</span><span class=\\\"hljs-params\\\">(<span class=\\\"hljs-type\\\">int</span>[] nums)</span> {\\n    <span class=\\\"hljs-type\\\">int</span>[] count = <span class=\\\"hljs-keyword\\\">new</span> <span class=\\\"hljs-title class_\\\">int</span>[<span class=\\\"hljs-number\\\">3</span>];\\n    <span class=\\\"hljs-keyword\\\">for</span> (<span class=\\\"hljs-type\\\">int</span> color : nums) {\\n        count[color]++;\\n    }\\n    <span class=\\\"hljs-type\\\">int</span> <span class=\\\"hljs-variable\\\">cur</span> <span class=\\\"hljs-operator\\\">=</span> <span class=\\\"hljs-number\\\">0</span>;\\n    <span class=\\\"hljs-keyword\\\">for</span>(<span class=\\\"hljs-type\\\">int</span> <span class=\\\"hljs-variable\\\">i</span> <span class=\\\"hljs-operator\\\">=</span> <span class=\\\"hljs-number\\\">0</span>; i &lt; nums.length;) {\\n        <span class=\\\"hljs-keyword\\\">if</span> (count[cur] != <span class=\\\"hljs-number\\\">0</span>) {\\n            nums[i] = cur;\\n            count[cur]--;\\n            i++;\\n        } <span class=\\\"hljs-keyword\\\">else</span> {\\n            cur++;\\n        }\\n    }\\n}\\n</code></pre>\\n\";","export default \"<h3 id=\\\"对象分代和朝生夕灭\\\">对象分代和朝生夕灭</h3>\\n<p>对象所在的内存区按照对象存活的时间长久会简单分为：新生代、老年代</p>\\n<p><strong>Garbage Collector</strong>的行为和对象内存所在的区域有很大关系，所以在分析<strong>Collector</strong>之前，我们得先了解一下对象内存的分区</p>\\n<p>我们需要清楚的是，Java 中<strong>98%<strong>的对象都是</strong>朝生夕灭</strong>的，所以新生代区往往是 GC 要重点照顾的区域</p>\\n<p>这是书上提到的，也是我们容易想象得到的，书上 P92 页还提到<strong>两种</strong>GC 事件（实际上是三种）</p>\\n<p>按照 GC 位置的不同，我们先讲 GC 的事件分为：</p>\\n<ul>\\n<li><strong>Minor GC：</strong>即发生在新生代的 GC，这部分的 GC 速度很快，但是在 GC 之前，会检查一下<strong>空间分配担保</strong></li>\\n<li><strong>Major GC/Full GC：</strong>发生在老年代的 GC，一般至少伴随着一次 Minor GC，因为回收的是老年代，回收策略比较严谨，所以 Major GC 的速度会非常慢</li>\\n</ul>\\n<blockquote>\\n<p><strong>空间分配担保</strong>：</p>\\n<p>在<strong>Minor GC</strong>之前，虚拟机会检查老年代<strong>最大可用连续空间</strong>，是否能够容纳下新生代区的所有对象：</p>\\n<ul>\\n<li>若可以：则代表这次 GC 是安全的</li>\\n<li>若不可：则需要检查是否设置了允许<strong>担保失败</strong>：<ul>\\n<li>若允许：那么继续检查老年代<strong>最大可用连续空间是否大于历次晋升到老年代对象的平均大小</strong><ul>\\n<li>如果大于：则可以尝试进行一次<strong>本次 Minor GC</strong>，该次 GC 有<strong>“风险”</strong></li>\\n<li>如果小于：则需要将本次 GC 改为<strong>Major GC</strong></li>\\n</ul>\\n</li>\\n<li>若不许：则需要将本次 GC 改为<strong>Major GC</strong></li>\\n</ul>\\n</li>\\n</ul>\\n<p>为什么会有风险？因为这里统计<strong>历次|平均</strong>，如果某次<strong>Minor GC</strong>需要担保的空间远超过平均值，则会发生<strong>担保失败</strong>，如果担保失败，那么之后会进行一次<strong>Major GC</strong></p>\\n</blockquote>\\n<p>实际上，选择不同的<strong>Collector</strong>对内存的分配是有关联的，甚至可能根据情况的不同而变化，<strong>Collector</strong>相关的概念，后面有时间再说</p>\\n<p>本篇主要总结一下算法回收的基本思想，以及在《深入理解 Java 虚拟机中》提到了几条最普遍的内存分配规则</p>\\n<h3 id=\\\"垃圾回收的基本算法思想\\\">垃圾回收的基本算法思想</h3>\\n<h4 id=\\\"1-mark-sweep\\\">1. Mark-Sweep</h4>\\n<ol>\\n<li>Mark：标记出所有要回收的对象</li>\\n<li>Sweep：回收标记过的对象</li>\\n</ol>\\n<p>缺点：</p>\\n<ul>\\n<li>Mark 和 Sweep 的效率都不高</li>\\n<li>Sweep 过后剩下的空间不连续，容易形成碎片空间，对大对象的内存分配不友好，有时候大对象可能因为找不到空间，再来一次 GC</li>\\n</ul>\\n<p><img src=\\\"https://plumbr.io/app/uploads/2015/06/GC-sweep.png\\\" alt=\\\"Java GC sweep\\\"></p>\\n<h4 id=\\\"2-mark-copy\\\">2. Mark-Copy</h4>\\n<p>为了提高效率，可以将空间切成两块：</p>\\n<ul>\\n<li><strong>Eden 区：</strong>一块正常分配对象内存</li>\\n<li><strong>Survivor 区：</strong>当<strong>Eden 区</strong>内存满了的时候，就将还存活的对象复制到这里，然后再把<strong>Eden 区</strong>一次性清理掉，两块内存区身份互换，这样每次都是清理另一块的内存，然后按序分配到自己这里，不用考虑碎片</li>\\n</ul>\\n<p><img src=\\\"https://plumbr.io/app/uploads/2015/06/GC-mark-and-copy-in-Java.png\\\" alt=\\\"Java GC Mark and Copy Collector\\\"></p>\\n<p>这样的方法有牺牲一块空间的代价，最初的做法是对半分，但是因为对象的朝生夕死，所以存活的对象其实并不多，HotSpot 虚拟机的做法是：<strong>将内存区分成 8：1：1 的 Eden：Survivor：Survivor 区，每次只使用 Eden 和其中一块 Survivor，当 GC 发生的时候，将 Eden 和使用的 Survivor 中存活的对象分配到另一个 Survivor 中，然后清理掉前面两个区域</strong></p>\\n<p>也就是说，实际上 HotSpot 可用的内存是分配内存的<strong>90%</strong></p>\\n<h4 id=\\\"3-mark-compact\\\">3. Mark-Compact</h4>\\n<p>复制算法会牺牲一部分空间，并且<strong>如果系统存在许多存活时间长的对象的时候，算法的效率会降低</strong>，而且很明显的是老年代使用这种算法的效率很低</p>\\n<p>标记整理算法就是针对老年代的收集算法，它先将存活对象标记起来，然后将存活对象<strong>向一边移动</strong>，移动完后<strong>从最后一个存活对象往后开始清理空间</strong></p>\\n<p><img src=\\\"https://plumbr.io/app/uploads/2015/06/GC-mark-sweep-compact.png\\\" alt=\\\"Java GC mark sweep compacting\\\"></p>\\n<h3 id=\\\"存活判断\\\">存活判断</h3>\\n<p>GC 要工作的时候，它要如何判断对象是否已经死亡呢？通过什么来界定对象死亡呢？从技术层面来说，系统中没有任何一个地方要引用到这个对象，那么可以判定这个对象已经废弃了，这时候就具备了回收的条件了</p>\\n<p>问题是怎么判断对象是否废弃呢？常见有两种方法：引用计数、可达性分析</p>\\n<h4 id=\\\"reference-count\\\">Reference Count</h4>\\n<p>比较简单，对象自己管理一个 counter，当有地方引用对象的时候，counter+1，断开引用了就-1，当进行 GC 的时候，只要对象的 counter 不为 0，就不回收这个对象。</p>\\n<p>实际上，这个方法确实简单高效，很多主流应用都使用它去做引用计数，但是 Java 里面却不这么做，因为它只是半个解决方案，比如说，当 A 和 B 两个对象互相引用的时候，除此之外没有其他地方用到这两个对象，这就形成了一个引用闭环，counter 都是 1，是垃圾却无法回收。</p>\\n<h4 id=\\\"reachability-analysis\\\">Reachability Analysis</h4>\\n<p>主流的语言都是使用 RA 来判断对象存活的，甚至古老的 Lisp 也是。算法的基本思想是预置固定的<strong>“GC Root”对象</strong>作为起点，以树状逻辑开始从 root 向下索引，结点关系就是引用关系，索引到的对象就说明该对象至少还有一条 Reference Chain 可以达到 GC Root，则说明这个对象仍被系统使用</p>\\n<p>没有 Reference Chain 可达的对象，则基本可以宣告作废了</p>\\n<p><img src=\\\"../../../public/img/20181114235352.png\\\" alt=\\\"\\\"></p>\\n<p>如图，灰色 chain 已经没有 GC Root 可达了，所以这些对象会在下次 GC 的时候被考虑回收</p>\\n<p>常见的 GC Root 有：</p>\\n<ul>\\n<li><p>System class</p>\\n<p>A class that was loaded by the bootstrap loader, or the system class loader. For example, this category includes all classes in the rt.jar file (part of the Java™ runtime environment), such as those in the java.util.* package.</p>\\n</li>\\n<li><p>JNI local</p>\\n<p>A local variable in native code, for example user-defined JNI code or JVM internal code.</p>\\n</li>\\n<li><p>JNI global</p>\\n<p>A global variable in native code, for example user-defined JNI code or JVM internal code.</p>\\n</li>\\n<li><p>Thread block</p>\\n<p>An object that was referenced from an active thread block.</p>\\n</li>\\n<li><p>Thread</p>\\n<p>A running thread.</p>\\n</li>\\n<li><p>Busy monitor</p>\\n<p>Everything that called the wait() or notify() methods, or that is synchronized, for example by calling the synchronized(Object)method or by entering a synchronized method. If the method was static, the root is a class, otherwise it is an object.</p>\\n</li>\\n<li><p>Java local</p>\\n<p>A local variable. For example, input parameters, or locally created objects of methods that are still in the stack of a thread.</p>\\n</li>\\n<li><p>Native stack</p>\\n<p>Input or output parameters in native code, for example user-defined JNI code or JVM internal code. Many methods have native parts, and the objects that are handled as method parameters become garbage collection roots. For example, parameters used for file, network, I/O, or reflection operations.</p>\\n</li>\\n<li><p>etc...</p>\\n</li>\\n</ul>\\n<p><a href=\\\"https://www.ibm.com/support/knowledgecenter/en/SS3KLZ/com.ibm.java.diagnostics.memory.analyzer.doc/gcroots.html\\\">reference</a></p>\\n<h3 id=\\\"hotspot-算法实现\\\">HotSpot 算法实现</h3>\\n<h4 id=\\\"枚举根节点\\\">枚举根节点</h4>\\n<p>枚举<strong>GC Roots</strong>的时候，作为<strong>GC Roots</strong>的对象会有很多，连同这些<strong>Roots</strong>的引用链全部扫描一遍的话，会耗费大量的时间</p>\\n<p>而且 GC Roots 的扫描意味着你需要<strong>“停顿”</strong>你的系统，这里的停顿是真的停顿（Sun 将这件事情称之为“Stop the world”），为了保持引用的一致性，你不能在进行引用链检查的时候还不停的有引用关系在变更，这样做会让为你工作的 GCor 们很尴尬</p>\\n<p>虽然说无论如何都需要进行<strong>“停顿”</strong>，但是我们并不需要对每一个引用位置都进行检查，因为目前主流虚拟机都有<strong>“准确式 GC”</strong>的机制，所以虚拟机是有办法直接知道哪些地方存放着对象引用的</p>\\n<blockquote>\\n<p><strong>准确式 GC：</strong></p>\\n<p>Exact VM 时代出现了 Exact Memory Management，它可以知道内存中某个位置的数据<strong>具体是什么类型</strong></p>\\n</blockquote>\\n<p>在 HotSpot 的实现中，有一个<code>OopMaps</code>的数据结构在完成这个工作，在类加载完成的时候，HotSpot 就把对象内<strong>什么偏移量上是什么数据类型</strong>计算出来，在 JIT 的过程中，HotSpot 也会在<strong>特定的</strong>位置记录下栈和寄存器中哪些位置是引用</p>\\n<blockquote>\\n<p><strong>JIT：Just In Time Compiler</strong>，一般翻译为即时编译器，这是是针对解释型语言而言的，而且并非虚拟机必须，是一种优化手段，Java 的商用虚拟机 HotSpot 就有这种技术手段，Java 虚拟机标准对<strong>JIT</strong>的存在没有作出任何规范，所以这是虚拟机实现的自定义优化技术。</p>\\n<p>HotSpot 虚拟机的执行引擎在执行 Java 代码是可以采用【解释执行】和【编译执行】两种方式的，如果采用的是编译执行方式，那么就会使用到<strong>JIT</strong>，而解释执行就不会使用到<strong>JIT</strong>，所以，早期说 Java 是解释型语言，是没有任何问题的，而在拥有<strong>JIT</strong>的 Java 虚拟机环境下，说 Java 是解释型语言严格意义上已经不正确了。</p>\\n<p>HotSpot 中的编译器是<strong>javac</strong>，他的工作是将源代码编译成字节码，这部分工作是完全独立的，完全不需要运行时参与，所以 Java 程序的编译是半独立的实现。有了字节码，就有解释器来进行解释执行，这是早期虚拟机的工作流程，后来，虚拟机会将执行频率高的方法或语句块通过<strong>JIT</strong>编译成本地机器码，提高了代码执行的效率，至此你已经了解了<strong>JIT</strong>在 Java 虚拟机中所处的地位和工作的主要内容。</p>\\n<hr>\\n<p><a href=\\\"https://blog.csdn.net/tales522/article/details/80874325\\\">https://blog.csdn.net/tales522/article/details/80874325</a></p>\\n</blockquote>\\n<h4 id=\\\"安全点\\\">安全点</h4>\\n<p>因为<code>OopMaps</code>，HotSpot 可以快速且准确地完成 GC Roots 枚举，但是如果每一条指令都记录为<code>OopMaps</code>的话，这样会需要大量的额外空间</p>\\n<p>前面提到过，是在<strong>特定的位置</strong>记录信息，这个位置称之为安全点（Safepoint），因为程序并不是说停就停的，只有达到安全的地方才能够暂停，Safepoint 不能太少，以至于让 GC 等待太久，也不能太多，然程序停的次数太多而增大运行时负荷</p>\\n<p>所以 Safepoint 一般选在<strong>“能够长时间运行的指令”</strong>，一般的执行指令都非常快，所以具备这个特点指令大多数都为方法调用、循环跳转、异常跳转等等</p>\\n<p>我们还要再提一个事情就是——各线程到达最近安全点这件事如何实现，有两种做法：</p>\\n<ul>\\n<li>停止所有线程，没有到达安全点的线程就恢复它，让它跑到安全点再停下来</li>\\n<li>为安全点加一个标志（中断），线程执行的时候会轮询当前指令是否有标志，如果有就停下来</li>\\n</ul>\\n<h4 id=\\\"安全区\\\">安全区</h4>\\n<p>虽然有了安全点，可以保证大部分线程能够安全停下来等待 GC 了，但是有的线程可不是说停就停的，如果线程没有分配到 CPU，比如在 Sleep 或者 Blocked 状态的话，线程是无法响应中断然后“走”到安全的地方的，JVM 在做 GC 的时候也不太可能会等待你重新被分配到 CPU 的</p>\\n<p>针对这样的情况，会设置一个安全区（Safe Region）：在安全区内，引用关系不会发生变化，在安全区内任意地方开始 GC 都是安全的</p>\\n<p>当线程进入安全区的时候，会标识自己<strong>已经进入安全区</strong>，在 GC 过程中，虚拟机先不处理这些自我标识的线程，等到其他线程处理完之后，再来处理这些进入安全区的线程</p>\\n<p>处理过程：让线程要离开安全区的时候，会检查<strong>系统是否完成了 GC Roots 的枚举或者已经完成了 GC</strong>，如果没有，则需要等待前面的操作完成了，线程才能安全离开</p>\\n<h3 id=\\\"基本内存分配规则\\\">基本内存分配规则</h3>\\n<ol>\\n<li><strong>对象优先分配在新生代</strong>：大多数情况下，对象都会在新生代 Eden 区分配，<strong>当虚拟机没有足够的内存分配 Eden 空间的时候，虚拟机将发起一次 Minor GC</strong></li>\\n<li><strong>大对象直接进入老年代</strong>：比如长字符串和长数组</li>\\n<li><strong>长期存活的对象进入老年代</strong>：虚拟机会给对象定义一个 Age 计数器，对象在 Eden 区熬过一次<strong>Minor GC</strong>的话，age+1，并且进入 Survivor 区，每在 Survivor 熬过一次<strong>Minor GC</strong>，age 就+1 直到达到一定程度（默认 15），就会进入老年代</li>\\n<li><strong>同年龄对象若占空间超过一半直接进入老年代</strong>：不用等到阈值年龄</li>\\n</ol>\\n<p>更详细的补充见<a href=\\\"./wlvrl9.html?hash=93aa08bf\\\">再谈对象分代和 GC 事件</a></p>\\n\";","export default \"<h3 id=\\\"46-permutationmedium\\\">46. Permutation(Medium)</h3>\\n<p>Given a collection of <strong>distinct</strong> integers, return all possible permutations.</p>\\n<p><strong>Example:</strong></p>\\n<pre><code>Input: [1,2,3]\\nOutput:\\n[\\n  [1,2,3],\\n  [1,3,2],\\n  [2,1,3],\\n  [2,3,1],\\n  [3,1,2],\\n  [3,2,1]\\n]\\n</code></pre>\\n<h4 id=\\\"backtracking\\\">Backtracking</h4>\\n<p>回溯之前已经分析过了，关键是用contains或者一个flag数组去避免重复</p>\\n<pre><code class=\\\"hljs language-java\\\"><span class=\\\"hljs-keyword\\\">public</span> List&lt;List&lt;Integer&gt;&gt; <span class=\\\"hljs-title function_\\\">permute</span><span class=\\\"hljs-params\\\">(<span class=\\\"hljs-type\\\">int</span>[] nums)</span> {\\n    List&lt;List&lt;Integer&gt;&gt; ans = <span class=\\\"hljs-keyword\\\">new</span> <span class=\\\"hljs-title class_\\\">ArrayList</span>&lt;&gt;();\\n    backtracking(ans, <span class=\\\"hljs-keyword\\\">new</span> <span class=\\\"hljs-title class_\\\">ArrayList</span>&lt;&gt;(), nums);\\n    <span class=\\\"hljs-keyword\\\">return</span> ans;\\n}\\n\\n<span class=\\\"hljs-keyword\\\">private</span> <span class=\\\"hljs-keyword\\\">void</span> <span class=\\\"hljs-title function_\\\">backtracking</span><span class=\\\"hljs-params\\\">(List&lt;List&lt;Integer&gt;&gt; ans, List&lt;Integer&gt; tmp, <span class=\\\"hljs-type\\\">int</span>[] nums)</span> {\\n    <span class=\\\"hljs-keyword\\\">if</span> (tmp.size() == nums.length) {\\n        ans.add(<span class=\\\"hljs-keyword\\\">new</span> <span class=\\\"hljs-title class_\\\">ArrayList</span>&lt;&gt;(tmp));\\n    } <span class=\\\"hljs-keyword\\\">else</span> {\\n        <span class=\\\"hljs-keyword\\\">for</span> (<span class=\\\"hljs-type\\\">int</span> <span class=\\\"hljs-variable\\\">i</span> <span class=\\\"hljs-operator\\\">=</span> <span class=\\\"hljs-number\\\">0</span>; i &lt; nums.length; i++) {\\n            <span class=\\\"hljs-keyword\\\">if</span> (!tmp.contains(nums[i])) {\\n                tmp.add(nums[i]);\\n                backtracking(ans, tmp, nums);\\n                tmp.remove(tmp.size() - <span class=\\\"hljs-number\\\">1</span>);\\n            }\\n        }\\n    }\\n}\\n</code></pre>\\n<h3 id=\\\"47-permutation-iimedium\\\">47. Permutation II(Medium)</h3>\\n<p>Given a collection of numbers that might contain duplicates, return all possible unique permutations.</p>\\n<p><strong>Example:</strong></p>\\n<pre><code>Input: [1,1,2]\\nOutput:\\n[\\n  [1,1,2],\\n  [1,2,1],\\n  [2,1,1]\\n]\\n</code></pre>\\n<h4 id=\\\"backtracking-1\\\">Backtracking</h4>\\n<p>关键是用一个flags数组和预先排序操作去避免重复</p>\\n<pre><code class=\\\"hljs language-java\\\"><span class=\\\"hljs-keyword\\\">public</span> List&lt;List&lt;Integer&gt;&gt; <span class=\\\"hljs-title function_\\\">permuteUnique</span><span class=\\\"hljs-params\\\">(<span class=\\\"hljs-type\\\">int</span>[] nums)</span> {\\n    List&lt;List&lt;Integer&gt;&gt; ans = <span class=\\\"hljs-keyword\\\">new</span> <span class=\\\"hljs-title class_\\\">ArrayList</span>&lt;&gt;();\\n    <span class=\\\"hljs-type\\\">int</span>[] flags = <span class=\\\"hljs-keyword\\\">new</span> <span class=\\\"hljs-title class_\\\">int</span>[nums.length];\\n    Arrays.sort(nums);\\n    backtracking(ans, <span class=\\\"hljs-keyword\\\">new</span> <span class=\\\"hljs-title class_\\\">ArrayList</span>&lt;&gt;(), nums, flags);\\n    <span class=\\\"hljs-keyword\\\">return</span> ans;\\n}\\n\\n<span class=\\\"hljs-keyword\\\">private</span> <span class=\\\"hljs-keyword\\\">void</span> <span class=\\\"hljs-title function_\\\">backtracking</span><span class=\\\"hljs-params\\\">(List&lt;List&lt;Integer&gt;&gt; ans, List&lt;Integer&gt; tmp, <span class=\\\"hljs-type\\\">int</span>[] nums, <span class=\\\"hljs-type\\\">int</span>[] flags)</span> {\\n    <span class=\\\"hljs-keyword\\\">if</span> (tmp.size() == nums.length) {\\n        ans.add(<span class=\\\"hljs-keyword\\\">new</span> <span class=\\\"hljs-title class_\\\">ArrayList</span>&lt;&gt;(tmp));\\n    } <span class=\\\"hljs-keyword\\\">else</span> {\\n        <span class=\\\"hljs-keyword\\\">for</span> (<span class=\\\"hljs-type\\\">int</span> <span class=\\\"hljs-variable\\\">i</span> <span class=\\\"hljs-operator\\\">=</span> <span class=\\\"hljs-number\\\">0</span>; i &lt; nums.length; i++) {\\n            <span class=\\\"hljs-keyword\\\">if</span> (flags[i] == <span class=\\\"hljs-number\\\">0</span>) {\\n                <span class=\\\"hljs-keyword\\\">if</span> (i &gt; <span class=\\\"hljs-number\\\">0</span> && nums[i] == nums[i - <span class=\\\"hljs-number\\\">1</span>] && flags[i - <span class=\\\"hljs-number\\\">1</span>] == <span class=\\\"hljs-number\\\">0</span>) {\\n                    <span class=\\\"hljs-keyword\\\">continue</span>;\\n                }\\n                tmp.add(nums[i]);\\n                flags[i] = <span class=\\\"hljs-number\\\">1</span>;\\n                backtracking(ans, tmp, nums, flags);\\n                flags[i] = <span class=\\\"hljs-number\\\">0</span>;\\n                tmp.remove(tmp.size() - <span class=\\\"hljs-number\\\">1</span>);\\n            }\\n        }\\n    }\\n}\\n</code></pre>\\n<h3 id=\\\"48-rotate-imagemedium\\\">48. Rotate Image(Medium)</h3>\\n<p>You are given an <em>n</em> x <em>n</em> 2D matrix representing an image.</p>\\n<p>Rotate the image by 90 degrees (clockwise).</p>\\n<p><strong>Note:</strong></p>\\n<p>You have to rotate the image <a href=\\\"https://en.wikipedia.org/wiki/In-place_algorithm\\\"><strong>in-place</strong></a>, which means you have to modify the input 2D matrix directly. <strong>DO NOT</strong> allocate another 2D matrix and do the rotation.</p>\\n<p><strong>Example 1:</strong></p>\\n<pre><code>Given input matrix = \\n[\\n  [1,2,3],\\n  [4,5,6],\\n  [7,8,9]\\n],\\n\\nrotate the input matrix in-place such that it becomes:\\n[\\n  [7,4,1],\\n  [8,5,2],\\n  [9,6,3]\\n]\\n</code></pre>\\n<p><strong>Example 2:</strong></p>\\n<pre><code>Given input matrix =\\n[\\n  [ 5, 1, 9,11],\\n  [ 2, 4, 8,10],\\n  [13, 3, 6, 7],\\n  [15,14,12,16]\\n], \\n\\nrotate the input matrix in-place such that it becomes:\\n[\\n  [15,13, 2, 5],\\n  [14, 3, 4, 1],\\n  [12, 6, 8, 9],\\n  [16, 7,10,11]\\n]\\n</code></pre>\\n<h4 id=\\\"think-in-the-smart-way\\\">Think In The Smart Way</h4>\\n<p>挺简单的，就看你想不想地到而已- -，刚开始我真的一个数字一个数字地去转，从最外面一圈转到最里面，结果就傻逼了，需要处理很多拐弯的case</p>\\n<p>如果我们将右旋90°这个事情简单地看成：</p>\\n<pre><code>0. original matrix:\\n                    [1,2,3]\\n                    [4,5,6]\\n                    [7,8,9]\\n                    \\n1. swap side base on diagonal:\\n\\n                    [@,2,3]            [@,4,7]           [1,4,7]\\n                    [4,@,6]     --&gt;    [2,@,8]    --&gt;    [2,5,8]\\n                    [7,8,@]            [3,6,@]           [3,6,9]\\n\\n2. swap side base on row&#x27;s half:\\n\\n                    [1,@,7]            [7,@,1]           [7,4,1]\\n                    [2,@,8]     --&gt;    [8,@,2]    --&gt;    [8,5,2]\\n                    [3,@,9]            [9,@,3]           [9,6,3]\\n</code></pre>\\n<p>其他旋也是一样的</p>\\n<pre><code class=\\\"hljs language-java\\\"><span class=\\\"hljs-keyword\\\">public</span> <span class=\\\"hljs-keyword\\\">void</span> <span class=\\\"hljs-title function_\\\">rotate</span><span class=\\\"hljs-params\\\">(<span class=\\\"hljs-type\\\">int</span>[][] matrix)</span> {\\n    <span class=\\\"hljs-keyword\\\">for</span> (<span class=\\\"hljs-type\\\">int</span> <span class=\\\"hljs-variable\\\">i</span> <span class=\\\"hljs-operator\\\">=</span> <span class=\\\"hljs-number\\\">0</span>; i &lt; matrix.length; i++) {\\n        <span class=\\\"hljs-keyword\\\">for</span> (<span class=\\\"hljs-type\\\">int</span> <span class=\\\"hljs-variable\\\">j</span> <span class=\\\"hljs-operator\\\">=</span> i + <span class=\\\"hljs-number\\\">1</span>; j &lt; matrix.length; j++) {\\n            <span class=\\\"hljs-type\\\">int</span> <span class=\\\"hljs-variable\\\">tmp</span> <span class=\\\"hljs-operator\\\">=</span> matrix[j][i];\\n            matrix[j][i] = matrix[i][j];\\n            matrix[i][j] = tmp;\\n        }\\n    }\\n\\n    <span class=\\\"hljs-keyword\\\">for</span> (<span class=\\\"hljs-type\\\">int</span>[] rows : matrix) {\\n        <span class=\\\"hljs-type\\\">int</span> <span class=\\\"hljs-variable\\\">l</span> <span class=\\\"hljs-operator\\\">=</span> <span class=\\\"hljs-number\\\">0</span>, r = rows.length - <span class=\\\"hljs-number\\\">1</span>;\\n        <span class=\\\"hljs-type\\\">int</span> tmp;\\n        <span class=\\\"hljs-keyword\\\">while</span> (l &lt; r) {\\n            tmp = rows[r];\\n            rows[r] = rows[l];\\n            rows[l] = tmp;\\n            l++;\\n            r--;\\n        }\\n    }\\n}\\n</code></pre>\\n<h3 id=\\\"49-group-anagramsmedium\\\">49. Group Anagrams(Medium)</h3>\\n<p>Given an array of strings, group anagrams together.</p>\\n<p><strong>Example:</strong></p>\\n<pre><code>Input: [&quot;eat&quot;, &quot;tea&quot;, &quot;tan&quot;, &quot;ate&quot;, &quot;nat&quot;, &quot;bat&quot;],\\nOutput:\\n[\\n  [&quot;ate&quot;,&quot;eat&quot;,&quot;tea&quot;],\\n  [&quot;nat&quot;,&quot;tan&quot;],\\n  [&quot;bat&quot;]\\n]\\n</code></pre>\\n<h4 id=\\\"hashing\\\">Hashing</h4>\\n<p>先每个字符串用排序得出对应的字谜的解，然后这个解作为key放在HashMap中，后续相同字谜解的，一起加在同一个key下</p>\\n<pre><code class=\\\"hljs language-java\\\"><span class=\\\"hljs-keyword\\\">public</span> List&lt;List&lt;String&gt;&gt; <span class=\\\"hljs-title function_\\\">groupAnagrams</span><span class=\\\"hljs-params\\\">(String[] strs)</span> {\\n    HashMap&lt;String, List&lt;String&gt;&gt; ansMap = <span class=\\\"hljs-keyword\\\">new</span> <span class=\\\"hljs-title class_\\\">HashMap</span>&lt;&gt;();\\n    <span class=\\\"hljs-keyword\\\">for</span> (String str : strs) {\\n        <span class=\\\"hljs-type\\\">char</span>[] chars = str.toCharArray();\\n        Arrays.sort(chars);\\n        <span class=\\\"hljs-type\\\">String</span> <span class=\\\"hljs-variable\\\">key</span> <span class=\\\"hljs-operator\\\">=</span> String.valueOf(chars);\\n        <span class=\\\"hljs-keyword\\\">if</span> (!ansMap.containsKey(key)) {\\n            ansMap.put(key, <span class=\\\"hljs-keyword\\\">new</span> <span class=\\\"hljs-title class_\\\">LinkedList</span>&lt;&gt;());\\n        }\\n        ansMap.get(key).add(str);\\n    }\\n    <span class=\\\"hljs-keyword\\\">return</span> <span class=\\\"hljs-keyword\\\">new</span> <span class=\\\"hljs-title class_\\\">LinkedList</span>&lt;&gt;(ansMap.values());\\n}\\n</code></pre>\\n<p>这里有2个优化的地方：</p>\\n<ul>\\n<li>因为都是在屁股加解，所以用<code>LinkedList</code>会好点；</li>\\n<li><code>String.valueOf(chars)</code>会比<code>Arrays.toString(chars)</code>要来得干脆；</li>\\n</ul>\\n<h3 id=\\\"50-powx-n-medium\\\">50. Pow(x, n) (Medium)</h3>\\n<p>Implement <a href=\\\"http://www.cplusplus.com/reference/valarray/pow/\\\">pow(<em>x</em>, <em>n</em>)</a>, which calculates <em>x</em> raised to the power <em>n</em> (xn).</p>\\n<p><strong>Example 1:</strong></p>\\n<pre><code>Input: 2.00000, 10\\nOutput: 1024.00000\\n</code></pre>\\n<p><strong>Example 2:</strong></p>\\n<pre><code>Input: 2.10000, 3\\nOutput: 9.26100\\n</code></pre>\\n<p><strong>Example 3:</strong></p>\\n<pre><code>Input: 2.00000, -2\\nOutput: 0.25000\\nExplanation: 2-2 = 1/22 = 1/4 = 0.25\\n</code></pre>\\n<p><strong>Note:</strong></p>\\n<ul>\\n<li>-100.0 &lt; <em>x</em> &lt; 100.0</li>\\n<li><em>n</em> is a 32-bit signed integer, within the range [−231, 231 − 1]</li>\\n</ul>\\n<h4 id=\\\"recursion\\\">Recursion</h4>\\n<p>这题首先暴力解可以，但是时间会爆，比较如果n为<code>Integer.MAX_VALUE</code>的话，那就得有20亿次的循环计算，但是呢，这20亿次计算，有一半可以砍掉的，我们拿<code>pow(2, 20)</code>来举例，2的20次方，等于2的10次方的平方，于是我们只需要算出2的10次方，那么就可以得出2的20次方了：<code>pow(2, 20) = pow(2, 10) * pow(2, 10)</code>，而<code>pow(2, 10) = pow(2, 5) * pow(2, 5)</code>，而<code>pow(2, 5) = pow(2, 4) * 2</code>，而<code>pow(2, 4) = pow(2, 2) * pow(2, 2)</code>，而<code>pow(2, 2) = 2 * 2</code>；</p>\\n<p>于是我们把20次计算减少为5次计算，同理我们如果20亿次计算可以减少为31次计算，不要问为什么</p>\\n<p>然后我们再覆盖一些边角case~</p>\\n<pre><code class=\\\"hljs language-java\\\"><span class=\\\"hljs-keyword\\\">public</span> <span class=\\\"hljs-type\\\">double</span> <span class=\\\"hljs-title function_\\\">myPow</span><span class=\\\"hljs-params\\\">(<span class=\\\"hljs-type\\\">double</span> x, <span class=\\\"hljs-type\\\">int</span> n)</span> {\\n    <span class=\\\"hljs-keyword\\\">if</span> (n == <span class=\\\"hljs-number\\\">0</span> || x == <span class=\\\"hljs-number\\\">1</span>) {\\n        <span class=\\\"hljs-keyword\\\">return</span> <span class=\\\"hljs-number\\\">1</span>;\\n    }\\n    <span class=\\\"hljs-keyword\\\">if</span> (n == Integer.MIN_VALUE) {\\n        <span class=\\\"hljs-type\\\">double</span> <span class=\\\"hljs-variable\\\">sub</span> <span class=\\\"hljs-operator\\\">=</span> <span class=\\\"hljs-number\\\">1</span> / x;\\n        <span class=\\\"hljs-keyword\\\">return</span> myPow(sub, Integer.MAX_VALUE) * sub;\\n    }\\n    <span class=\\\"hljs-keyword\\\">if</span> (n &lt; <span class=\\\"hljs-number\\\">0</span>) {\\n        <span class=\\\"hljs-keyword\\\">return</span> myPow(<span class=\\\"hljs-number\\\">1</span> / x, -n);\\n    }\\n    <span class=\\\"hljs-keyword\\\">if</span> (n == <span class=\\\"hljs-number\\\">2</span>) {\\n        <span class=\\\"hljs-keyword\\\">return</span> x * x;\\n    } <span class=\\\"hljs-keyword\\\">else</span> {\\n        <span class=\\\"hljs-keyword\\\">if</span> (n % <span class=\\\"hljs-number\\\">2</span> == <span class=\\\"hljs-number\\\">0</span>) {\\n            <span class=\\\"hljs-type\\\">int</span> <span class=\\\"hljs-variable\\\">sub</span> <span class=\\\"hljs-operator\\\">=</span> n / <span class=\\\"hljs-number\\\">2</span>;\\n            <span class=\\\"hljs-type\\\">double</span> <span class=\\\"hljs-variable\\\">subPow</span> <span class=\\\"hljs-operator\\\">=</span> myPow(x, sub);\\n            <span class=\\\"hljs-keyword\\\">if</span> (subPow == <span class=\\\"hljs-number\\\">0.0</span>) {\\n                <span class=\\\"hljs-keyword\\\">return</span> <span class=\\\"hljs-number\\\">0</span>;\\n            } <span class=\\\"hljs-keyword\\\">else</span> {\\n                <span class=\\\"hljs-keyword\\\">return</span> subPow * subPow;\\n            }\\n        } <span class=\\\"hljs-keyword\\\">else</span> {\\n            <span class=\\\"hljs-keyword\\\">return</span> myPow(x, n - <span class=\\\"hljs-number\\\">1</span>) * x;\\n        }\\n    }\\n}\\n</code></pre>\\n\";","export default \"<h3 id=\\\"对话框\\\">对话框</h3>\\n<blockquote>\\n<p>显示用于打开和保存文件、警报等的本机系统对话框。</p>\\n</blockquote>\\n<p>线程：<a href=\\\"https://electronjs.org/docs/glossary#main-process\\\">主线程</a></p>\\n<p>显示用于选择多个文件和目录的对话框的示例:</p>\\n<pre><code class=\\\"hljs language-javascript\\\"><span class=\\\"hljs-keyword\\\">const</span> { dialog } = <span class=\\\"hljs-built_in\\\">require</span>(<span class=\\\"hljs-string\\\">&quot;electron&quot;</span>);\\n<span class=\\\"hljs-variable language_\\\">console</span>.<span class=\\\"hljs-title function_\\\">log</span>(\\n  dialog.<span class=\\\"hljs-title function_\\\">showOpenDialog</span>({\\n    <span class=\\\"hljs-attr\\\">properties</span>: [<span class=\\\"hljs-string\\\">&quot;openFile&quot;</span>, <span class=\\\"hljs-string\\\">&quot;openDirectory&quot;</span>, <span class=\\\"hljs-string\\\">&quot;multiSelections&quot;</span>],\\n  })\\n);\\n</code></pre>\\n<p>这个对话框是从 Electron 的主线程上打开的。如果要使用渲染器进程中的对话框对象, 可以使用 remote 来获得:</p>\\n<pre><code class=\\\"hljs language-javascript\\\"><span class=\\\"hljs-keyword\\\">const</span> { dialog } = <span class=\\\"hljs-built_in\\\">require</span>(<span class=\\\"hljs-string\\\">&quot;electron&quot;</span>).<span class=\\\"hljs-property\\\">remote</span>;\\n<span class=\\\"hljs-variable language_\\\">console</span>.<span class=\\\"hljs-title function_\\\">log</span>(dialog);\\n</code></pre>\\n<p>对话框的 API 大致分为：</p>\\n<ul>\\n<li>获取文件路径的对话框</li>\\n<li>保存对话框</li>\\n<li>消息对话框</li>\\n<li>错误对话框</li>\\n</ul>\\n<h4 id=\\\"例子\\\">例子</h4>\\n<pre><code class=\\\"hljs language-javascript\\\"><span class=\\\"hljs-comment\\\">// 同步的获取文件路径的对话框</span>\\n$(<span class=\\\"hljs-string\\\">&quot;#sopendialog&quot;</span>).<span class=\\\"hljs-title function_\\\">click</span>(<span class=\\\"hljs-function\\\">() =&gt;</span> {\\n  <span class=\\\"hljs-keyword\\\">let</span> p = dialog.<span class=\\\"hljs-title function_\\\">showOpenDialogSync</span>(win, {});\\n  <span class=\\\"hljs-variable language_\\\">console</span>.<span class=\\\"hljs-title function_\\\">log</span>(p);\\n});\\n\\n<span class=\\\"hljs-comment\\\">// 异步的</span>\\n$(<span class=\\\"hljs-string\\\">&quot;#asopendialog&quot;</span>).<span class=\\\"hljs-title function_\\\">click</span>(<span class=\\\"hljs-function\\\">() =&gt;</span> {\\n  <span class=\\\"hljs-keyword\\\">let</span> p = dialog.<span class=\\\"hljs-title function_\\\">showOpenDialog</span>(win, {});\\n  p.<span class=\\\"hljs-title function_\\\">then</span>(<span class=\\\"hljs-function\\\">(<span class=\\\"hljs-params\\\">data</span>) =&gt;</span> {\\n    <span class=\\\"hljs-variable language_\\\">console</span>.<span class=\\\"hljs-title function_\\\">log</span>(data);\\n    <span class=\\\"hljs-variable language_\\\">console</span>.<span class=\\\"hljs-title function_\\\">log</span>(data.<span class=\\\"hljs-property\\\">filePaths</span>);\\n  });\\n});\\n\\n$(<span class=\\\"hljs-string\\\">&quot;#smsgboxdialog&quot;</span>).<span class=\\\"hljs-title function_\\\">click</span>(<span class=\\\"hljs-function\\\">() =&gt;</span> {\\n  <span class=\\\"hljs-keyword\\\">let</span> rs = dialog.<span class=\\\"hljs-title function_\\\">showMessageBoxSync</span>(win, {\\n    <span class=\\\"hljs-comment\\\">// type: &#x27;info&#x27;,</span>\\n    <span class=\\\"hljs-comment\\\">// type: &#x27;error&#x27;,</span>\\n    <span class=\\\"hljs-attr\\\">type</span>: <span class=\\\"hljs-string\\\">&quot;question&quot;</span>,\\n    <span class=\\\"hljs-attr\\\">title</span>: <span class=\\\"hljs-string\\\">&quot;Message&quot;</span>,\\n    <span class=\\\"hljs-attr\\\">buttons</span>: [<span class=\\\"hljs-string\\\">&quot;Option one&quot;</span>, <span class=\\\"hljs-string\\\">&quot;Option two&quot;</span>],\\n    <span class=\\\"hljs-attr\\\">message</span>: <span class=\\\"hljs-string\\\">&quot;This is a stupid box.&quot;</span>,\\n    <span class=\\\"hljs-attr\\\">detail</span>: <span class=\\\"hljs-string\\\">&quot;Extra message.&quot;</span>,\\n  });\\n  <span class=\\\"hljs-variable language_\\\">console</span>.<span class=\\\"hljs-title function_\\\">log</span>(rs);\\n});\\n</code></pre>\\n<h3 id=\\\"菜单\\\">菜单</h3>\\n<blockquote>\\n<p>创建原生应用菜单和上下文菜单。</p>\\n</blockquote>\\n<p>进程：<a href=\\\"https://electronjs.org/docs/glossary#main-process\\\">主进程</a></p>\\n<p>创建新菜单。</p>\\n<h4 id=\\\"静态方法\\\"><a href=\\\"https://electronjs.org/docs/api/menu#%E9%9D%99%E6%80%81%E6%96%B9%E6%B3%95\\\">静态方法</a></h4>\\n<p><a href=\\\"https://electronjs.org/docs/api/menu#menusetapplicationmenumenu\\\"><code>Menu.setApplicationMenu(menu)</code></a></p>\\n<ul>\\n<li><code>menu</code> Menu | null</li>\\n</ul>\\n<p>当在 MacOS、Windows、Linux 中使用<code>menu</code>设置程序菜单时，会设置在各个程序窗体的顶层。</p>\\n<p>在 Windows 和 Linux 中，可以在菜单的顶层标签的某个字母前添加<code>&</code>以绑定快捷键。 例如，使用<code>&File</code>后可以使用<code>Alt-F</code>呼出 File 的子选项。 被绑定快捷键的字母将会以下划线标出。 <code>&</code>并不会在运行时显示</p>\\n<p>使用<code>null</code> 作为参数时将会隐藏默认菜单。在 Windows 和 Linux 上还有删除菜单的额外效果。</p>\\n<p><strong>Note:</strong> 如果没有在 app 中设置一个菜单，系统会自动生成一个默认菜单， 默认生成的菜单中包含了一些初始选项，例如 <code>文件</code>,<code>编辑</code>, <code>视图</code>,<code>窗口</code>,<code>帮助</code>。</p>\\n<p><a href=\\\"https://electronjs.org/docs/api/menu#menugetapplicationmenu\\\"><code>Menu.getApplicationMenu()</code></a></p>\\n<p>返回 <code>Menu | null</code> - 如果有设置, 则返回应用程序菜单， 如果没设置，则返回 <code>null</code>。</p>\\n<p><strong>注意:</strong> 返回的 <code>menu</code> 实例不支持动态添加或删除菜单项。 但仍然可以动态修改 <a href=\\\"https://electronjs.org/docs/api/menu#instance-properties\\\">实例属性 </a>。</p>\\n<p><a href=\\\"https://electronjs.org/docs/api/menu#menubuildfromtemplatetemplate\\\"><code>Menu.buildFromTemplate(template)</code></a></p>\\n<ul>\\n<li><code>template</code> (MenuItemConstructorOptions | MenuItem)[]</li>\\n</ul>\\n<p>返回 <code>Menu</code></p>\\n<p>一般来说 <code>template</code>是一个<code>options</code>类型的数组，用于构建一个 <a href=\\\"https://electronjs.org/docs/api/menu-item\\\">MenuItem</a>。使用情况可以在上文提及。</p>\\n<p>You can also attach other fields to the element of the <code>template</code> and they will become properties of the constructed menu items.</p>\\n<h4 id=\\\"例子-1\\\">例子</h4>\\n<p>应用菜单</p>\\n<pre><code class=\\\"hljs language-javascript\\\"><span class=\\\"hljs-keyword\\\">const</span> template = [\\n  {\\n    <span class=\\\"hljs-attr\\\">label</span>: <span class=\\\"hljs-string\\\">&quot;Menu1&quot;</span>,\\n    <span class=\\\"hljs-attr\\\">submenu</span>: [\\n      <span class=\\\"hljs-keyword\\\">new</span> <span class=\\\"hljs-title class_\\\">MenuItem</span>({\\n        <span class=\\\"hljs-attr\\\">label</span>: <span class=\\\"hljs-string\\\">&quot;about&quot;</span>,\\n        <span class=\\\"hljs-title function_\\\">click</span>(<span class=\\\"hljs-params\\\"></span>) {\\n          <span class=\\\"hljs-comment\\\">// 这行不会打在chrome调试控制台上 因为这里的console是nodejs后台</span>\\n          <span class=\\\"hljs-variable language_\\\">console</span>.<span class=\\\"hljs-title function_\\\">log</span>(<span class=\\\"hljs-string\\\">&quot;about&quot;</span>);\\n        },\\n      }),\\n      { <span class=\\\"hljs-attr\\\">type</span>: <span class=\\\"hljs-string\\\">&quot;separator&quot;</span> },\\n      { <span class=\\\"hljs-attr\\\">role</span>: <span class=\\\"hljs-string\\\">&quot;about&quot;</span> },\\n      <span class=\\\"hljs-keyword\\\">new</span> <span class=\\\"hljs-title class_\\\">MenuItem</span>({\\n        <span class=\\\"hljs-attr\\\">label</span>: <span class=\\\"hljs-string\\\">&quot;xixi&quot;</span>,\\n        <span class=\\\"hljs-attr\\\">type</span>: <span class=\\\"hljs-string\\\">&quot;checkbox&quot;</span>,\\n        <span class=\\\"hljs-title function_\\\">click</span>(<span class=\\\"hljs-params\\\"></span>) {\\n          <span class=\\\"hljs-variable language_\\\">console</span>.<span class=\\\"hljs-title function_\\\">log</span>(<span class=\\\"hljs-string\\\">&quot;check&quot;</span>);\\n        },\\n      }),\\n      <span class=\\\"hljs-keyword\\\">new</span> <span class=\\\"hljs-title class_\\\">MenuItem</span>({\\n        <span class=\\\"hljs-attr\\\">label</span>: <span class=\\\"hljs-string\\\">&quot;haha&quot;</span>,\\n        <span class=\\\"hljs-attr\\\">type</span>: <span class=\\\"hljs-string\\\">&quot;radio&quot;</span>,\\n        <span class=\\\"hljs-title function_\\\">click</span>(<span class=\\\"hljs-params\\\"></span>) {\\n          <span class=\\\"hljs-variable language_\\\">console</span>.<span class=\\\"hljs-title function_\\\">log</span>(<span class=\\\"hljs-string\\\">&quot;radio&quot;</span>);\\n        },\\n      }),\\n    ],\\n  },\\n];\\n\\n<span class=\\\"hljs-keyword\\\">const</span> menu = <span class=\\\"hljs-title class_\\\">Menu</span>.<span class=\\\"hljs-title function_\\\">buildFromTemplate</span>(template);\\n<span class=\\\"hljs-title class_\\\">Menu</span>.<span class=\\\"hljs-title function_\\\">setApplicationMenu</span>(menu);\\n</code></pre>\\n<p>右键菜单</p>\\n<pre><code class=\\\"hljs language-javascript\\\"><span class=\\\"hljs-comment\\\">// 自定义右键菜单</span>\\n<span class=\\\"hljs-keyword\\\">const</span> menu = <span class=\\\"hljs-keyword\\\">new</span> <span class=\\\"hljs-title class_\\\">Menu</span>();\\nmenu.<span class=\\\"hljs-title function_\\\">append</span>(\\n  <span class=\\\"hljs-keyword\\\">new</span> <span class=\\\"hljs-title class_\\\">MenuItem</span>({\\n    <span class=\\\"hljs-attr\\\">label</span>: <span class=\\\"hljs-string\\\">&quot;MenuItem1&quot;</span>,\\n    <span class=\\\"hljs-title function_\\\">click</span>(<span class=\\\"hljs-params\\\"></span>) {\\n      <span class=\\\"hljs-variable language_\\\">console</span>.<span class=\\\"hljs-title function_\\\">log</span>(<span class=\\\"hljs-string\\\">&quot;item 1 clicked&quot;</span>);\\n    },\\n  })\\n);\\nmenu.<span class=\\\"hljs-title function_\\\">append</span>(\\n  <span class=\\\"hljs-keyword\\\">new</span> <span class=\\\"hljs-title class_\\\">MenuItem</span>({\\n    <span class=\\\"hljs-attr\\\">type</span>: <span class=\\\"hljs-string\\\">&quot;separator&quot;</span>,\\n  })\\n);\\nmenu.<span class=\\\"hljs-title function_\\\">append</span>(\\n  <span class=\\\"hljs-keyword\\\">new</span> <span class=\\\"hljs-title class_\\\">MenuItem</span>({\\n    <span class=\\\"hljs-attr\\\">label</span>: <span class=\\\"hljs-string\\\">&quot;MenuItem2&quot;</span>,\\n    <span class=\\\"hljs-attr\\\">type</span>: <span class=\\\"hljs-string\\\">&quot;checkbox&quot;</span>,\\n    <span class=\\\"hljs-attr\\\">checked</span>: <span class=\\\"hljs-literal\\\">true</span>,\\n  })\\n);\\n<span class=\\\"hljs-comment\\\">// 有下标</span>\\nmenu.<span class=\\\"hljs-title function_\\\">append</span>(\\n  <span class=\\\"hljs-keyword\\\">new</span> <span class=\\\"hljs-title class_\\\">MenuItem</span>({\\n    <span class=\\\"hljs-attr\\\">label</span>: <span class=\\\"hljs-string\\\">&quot;MenuItem3&quot;</span>,\\n    <span class=\\\"hljs-attr\\\">type</span>: <span class=\\\"hljs-string\\\">&quot;radio&quot;</span>,\\n    <span class=\\\"hljs-title function_\\\">click</span>(<span class=\\\"hljs-params\\\">mi, bwin, event</span>) {\\n      <span class=\\\"hljs-variable language_\\\">console</span>.<span class=\\\"hljs-title function_\\\">log</span>(mi.<span class=\\\"hljs-property\\\">overrideProperty</span>);\\n    },\\n    <span class=\\\"hljs-attr\\\">sublabel</span>: <span class=\\\"hljs-string\\\">&quot;xixi&quot;</span>,\\n  })\\n);\\n<span class=\\\"hljs-comment\\\">// 子菜单</span>\\nmenu.<span class=\\\"hljs-title function_\\\">append</span>(\\n  <span class=\\\"hljs-keyword\\\">new</span> <span class=\\\"hljs-title class_\\\">MenuItem</span>({\\n    <span class=\\\"hljs-attr\\\">label</span>: <span class=\\\"hljs-string\\\">&quot;MenuItem4&quot;</span>,\\n    <span class=\\\"hljs-attr\\\">type</span>: <span class=\\\"hljs-string\\\">&quot;submenu&quot;</span>,\\n    <span class=\\\"hljs-attr\\\">sublabel</span>: <span class=\\\"hljs-string\\\">&quot;xixi&quot;</span>,\\n    <span class=\\\"hljs-attr\\\">submenu</span>: [\\n      <span class=\\\"hljs-keyword\\\">new</span> <span class=\\\"hljs-title class_\\\">MenuItem</span>({\\n        <span class=\\\"hljs-attr\\\">label</span>: <span class=\\\"hljs-string\\\">&quot;lolo&quot;</span>,\\n      }),\\n    ],\\n  })\\n);\\n</code></pre>\\n<h3 id=\\\"任务栏\\\">任务栏</h3>\\n<h4 id=\\\"任务菜单\\\">任务菜单</h4>\\n<p>Windows 允许应用程序定义一个自定义上下文菜单，用户可以看到该菜单 右键单击任务栏中的应用图标。 该上下文菜单被成为 <code>弹出列表</code>. 您可以在弹出列表的 <code>Tasks</code> 类别中指定自定义操作， 来自 MSDN 的引用：</p>\\n<blockquote>\\n<p>应用程序的 tasks 应该是基于程序的功能和用户能用它做一些的关键性事情来制定的。 任务应当是上下文无关的，因为它不需要程序运行就可以工作 而且他们应该是统计上用户在这个应用上最多的行为例如: 撰写一封邮件或者在邮件程序里打开日历，word 处理程序新建一个文档，以某一种模式启动应用程序，或者是启动应用程序的某些子命令。 一个应用程序不应当把菜单用一些用户不需要的高级功能的或者只会使用一次的动作例如注册给弄得杂乱无章。 不要将 tasks 功能用于广告项目例如升级或者特价产品之类。</p>\\n<p>强烈推荐 task 列表内容是静态的。 不管应用程序是什么状态或情形，它都应该是保持不变的。 尽管这个列表是动态可变的，你应该考虑到没想过这个列表会变的用户会被这个行为搞糊涂。</p>\\n</blockquote>\\n<p><strong>Internet Explorer 的 任务:</strong></p>\\n<p><img src=\\\"../../../public/img/20191014094639.png\\\" alt=\\\"\\\"></p>\\n<p>不同于 macOS 的 dock 菜单，Windows 上的用户任务表现得更像一个快捷方式，比如当用户点击一个任务，一个程序将会被传入特定的参数并且运行。</p>\\n<p>你可以使用 <a href=\\\"https://electronjs.org/docs/api/app#appsetusertaskstasks-windows\\\">app.setUserTasks</a> API 来设置你的应用中的用户任务：</p>\\n<pre><code class=\\\"hljs language-javascript\\\"><span class=\\\"hljs-keyword\\\">const</span> { app } = <span class=\\\"hljs-built_in\\\">require</span>(<span class=\\\"hljs-string\\\">&quot;electron&quot;</span>);\\napp.<span class=\\\"hljs-title function_\\\">setUserTasks</span>([\\n  {\\n    <span class=\\\"hljs-attr\\\">program</span>: process.<span class=\\\"hljs-property\\\">execPath</span>,\\n    <span class=\\\"hljs-attr\\\">arguments</span>: <span class=\\\"hljs-string\\\">&quot;--new-window&quot;</span>,\\n    <span class=\\\"hljs-attr\\\">iconPath</span>: process.<span class=\\\"hljs-property\\\">execPath</span>,\\n    <span class=\\\"hljs-attr\\\">iconIndex</span>: <span class=\\\"hljs-number\\\">0</span>,\\n    <span class=\\\"hljs-attr\\\">title</span>: <span class=\\\"hljs-string\\\">&quot;New Window&quot;</span>,\\n    <span class=\\\"hljs-attr\\\">description</span>: <span class=\\\"hljs-string\\\">&quot;Create a new window&quot;</span>,\\n  },\\n]);\\n</code></pre>\\n<p>调用 <code>app.setUserTasks</code> 并传入空数组就可以清除你的任务列表：</p>\\n<pre><code class=\\\"hljs language-javascript\\\"><span class=\\\"hljs-keyword\\\">const</span> { app } = <span class=\\\"hljs-built_in\\\">require</span>(<span class=\\\"hljs-string\\\">&quot;electron&quot;</span>);\\napp.<span class=\\\"hljs-title function_\\\">setUserTasks</span>([]);\\n</code></pre>\\n<p>当你的应用关闭时，用户任务仍然会被显示，因此在你的应用被卸载之前，任务的图标和程序的路径必须是存在的。</p>\\n<h3 id=\\\"托盘\\\">托盘</h3>\\n<blockquote>\\n<p>添加图标和上下文菜单到系统通知区</p>\\n</blockquote>\\n<p>进程：<a href=\\\"https://electronjs.org/docs/glossary#main-process\\\">主进程</a></p>\\n<p><code>Tray</code> 是一个 <a href=\\\"https://nodejs.org/api/events.html#events_class_eventemitter\\\">EventEmitter</a>.</p>\\n<pre><code class=\\\"hljs language-javascript\\\"><span class=\\\"hljs-keyword\\\">const</span> { app, <span class=\\\"hljs-title class_\\\">Menu</span>, <span class=\\\"hljs-title class_\\\">Tray</span> } = <span class=\\\"hljs-built_in\\\">require</span>(<span class=\\\"hljs-string\\\">&#x27;electron&#x27;</span>)\\n\\n<span class=\\\"hljs-keyword\\\">let</span> tray = <span class=\\\"hljs-literal\\\">null</span>\\napp.<span class=\\\"hljs-title function_\\\">on</span>(<span class=\\\"hljs-string\\\">&#x27;ready&#x27;</span>, <span class=\\\"hljs-function\\\">() =&gt;</span> {\\n  tray = <span class=\\\"hljs-keyword\\\">new</span> <span class=\\\"hljs-title class_\\\">Tray</span>(<span class=\\\"hljs-string\\\">&#x27;/path/to/my/icon&#x27;</span>)\\n  <span class=\\\"hljs-keyword\\\">const</span> contextMenu = <span class=\\\"hljs-title class_\\\">Menu</span>.<span class=\\\"hljs-title function_\\\">buildFromTemplate</span>([\\n    { <span class=\\\"hljs-attr\\\">label</span>: <span class=\\\"hljs-string\\\">&#x27;Item1&#x27;</span>, <span class=\\\"hljs-attr\\\">type</span>: <span class=\\\"hljs-string\\\">&#x27;radio&#x27;</span> },\\n    { <span class=\\\"hljs-attr\\\">label</span>: <span class=\\\"hljs-string\\\">&#x27;Item2&#x27;</span>, <span class=\\\"hljs-attr\\\">type</span>: <span class=\\\"hljs-string\\\">&#x27;radio&#x27;</span> },\\n    { <span class=\\\"hljs-attr\\\">label</span>: <span class=\\\"hljs-string\\\">&#x27;Item3&#x27;</span>, <span class=\\\"hljs-attr\\\">type</span>: <span class=\\\"hljs-string\\\">&#x27;radio&#x27;</span>, <span class=\\\"hljs-attr\\\">checked</span>: <span class=\\\"hljs-literal\\\">true</span> },\\n    { <span class=\\\"hljs-attr\\\">label</span>: <span class=\\\"hljs-string\\\">&#x27;Item4&#x27;</span>, <span class=\\\"hljs-attr\\\">type</span>: <span class=\\\"hljs-string\\\">&#x27;radio&#x27;</span> }\\n  ])\\n  tray.<span class=\\\"hljs-title function_\\\">setToolTip</span>(<span class=\\\"hljs-string\\\">&#x27;This is my application.&#x27;</span>)\\n  tray.<span class=\\\"hljs-title function_\\\">setContextMenu</span>(contextMenu)\\n})<span class=\\\"hljs-title class_\\\">Copy</span>\\n</code></pre>\\n<p><strong>平台限制：</strong></p>\\n<ul>\\n<li>在 Linux 上，如果支持，就使用应用程序指示器，否则将使用<code>GtkStatusIcon</code>。</li>\\n<li>在仅支持应用程序指标的 Linux 发行版中，必须安装<code>libappindicator1</code>才能使任务栏图标正常工作。</li>\\n<li>应用程序指标只有当它有一个上下文菜单时才会显示。</li>\\n<li>当在 Linux 上使用应用程序指标时，它的 <code>click</code>事件将被忽略</li>\\n<li>在 Linux 上，为了改变单独的<code>MenuItem</code>，你必须再次调用<code>setContextMenu</code>。 例如：</li>\\n</ul>\\n<pre><code class=\\\"hljs language-javascript\\\"><span class=\\\"hljs-keyword\\\">const</span> { app, <span class=\\\"hljs-title class_\\\">Menu</span>, <span class=\\\"hljs-title class_\\\">Tray</span> } = <span class=\\\"hljs-built_in\\\">require</span>(<span class=\\\"hljs-string\\\">&#x27;electron&#x27;</span>)\\n\\n<span class=\\\"hljs-keyword\\\">let</span> appIcon = <span class=\\\"hljs-literal\\\">null</span>\\napp.<span class=\\\"hljs-title function_\\\">on</span>(<span class=\\\"hljs-string\\\">&#x27;ready&#x27;</span>, <span class=\\\"hljs-function\\\">() =&gt;</span> {\\n  appIcon = <span class=\\\"hljs-keyword\\\">new</span> <span class=\\\"hljs-title class_\\\">Tray</span>(<span class=\\\"hljs-string\\\">&#x27;/path/to/my/icon&#x27;</span>)\\n  <span class=\\\"hljs-keyword\\\">const</span> contextMenu = <span class=\\\"hljs-title class_\\\">Menu</span>.<span class=\\\"hljs-title function_\\\">buildFromTemplate</span>([\\n    { <span class=\\\"hljs-attr\\\">label</span>: <span class=\\\"hljs-string\\\">&#x27;Item1&#x27;</span>, <span class=\\\"hljs-attr\\\">type</span>: <span class=\\\"hljs-string\\\">&#x27;radio&#x27;</span> },\\n    { <span class=\\\"hljs-attr\\\">label</span>: <span class=\\\"hljs-string\\\">&#x27;Item2&#x27;</span>, <span class=\\\"hljs-attr\\\">type</span>: <span class=\\\"hljs-string\\\">&#x27;radio&#x27;</span> }\\n  ])\\n\\n  <span class=\\\"hljs-comment\\\">// Make a change to the context menu</span>\\n  contextMenu.<span class=\\\"hljs-property\\\">items</span>[<span class=\\\"hljs-number\\\">1</span>].<span class=\\\"hljs-property\\\">checked</span> = <span class=\\\"hljs-literal\\\">false</span>\\n\\n  <span class=\\\"hljs-comment\\\">// Call this again for Linux because we modified the context menu</span>\\n  appIcon.<span class=\\\"hljs-title function_\\\">setContextMenu</span>(contextMenu)\\n})<span class=\\\"hljs-title class_\\\">Copy</span>\\n</code></pre>\\n<ul>\\n<li>在 Windows 上, 建议使用 <code>ICO</code> 图标来获得最佳视觉效果。</li>\\n</ul>\\n<p>如果要在所有平台上保持完全相同的行为, 则不应依赖 <code>click</code> 事件, 并且始终将上下文菜单附加到任务栏图标。</p>\\n<h4 id=\\\"事件\\\">事件</h4>\\n<p>windows 下托盘的事件有点击、左右键单击、双击等事件</p>\\n\";","export default \"<h3 id=\\\"introduction\\\">Introduction</h3>\\n<p>By default all files created inside a container are stored on a writable container layer.</p>\\n<p>That means that the data doesn&#39;t persist when that container no longer exists, and it can be difficult to get the data out of the container if another process needs it.</p>\\n<p>And here&#39;s you should know: a container&#39;s writable layer is tightly coupled to the host machine where the container is running. So <strong>you can&#39;t easily move the data somewhere else</strong>.</p>\\n<p>Docker has two options for containers to store files in the host machine, so that the files are persisted even after the container stops: </p>\\n<ul>\\n<li><em>volumes</em></li>\\n<li><em>bind mounts</em></li>\\n</ul>\\n<p>If you’re running Docker on Linux you can also use a <em>tmpfs mount</em>.</p>\\n<h3 id=\\\"choose-the-right-type-of-mount\\\">Choose the right type of mount</h3>\\n<p>No matter which type of mount you choose to use, the data looks the same from within the container. It is exposed as either a directory or an individual file in the container’s filesystem.</p>\\n<p>An easy way to visualize the difference among volumes, bind mounts, and <code>tmpfs</code> mounts is to think about where the data lives on the Docker host.</p>\\n<p><img src=\\\"https://docs.docker.com/storage/images/types-of-mounts.png\\\" alt=\\\"types of mounts and where they live on the Docker host\\\"></p>\\n<ul>\\n<li><p><strong>Volumes</strong> are stored in a part of the host filesystem which is <em>managed by Docker</em> (<code>/var/lib/docker/volumes/</code> on Linux). Non-Docker processes should not modify this part of the filesystem. Volumes are the best way to persist data in Docker.</p>\\n<blockquote>\\n<p>Created and managed by Docker. You can create a volume explicitly using the <code>docker volume create</code> command, or Docker can create a volume during container or service creation.</p>\\n<p>When you create a volume, it is stored within a directory on the Docker host. When you mount the volume into a container, this directory is what is mounted into the container. This is similar to the way that bind mounts work, except that volumes are managed by Docker and are isolated from the core functionality of the host machine.</p>\\n<p>A given volume can be mounted into multiple containers simultaneously. <strong>When no running container is using a volume, the volume is still available to Docker and is not removed automatically.</strong> You can remove unused volumes using <code>docker volume prune</code>.</p>\\n<p>When you mount a volume, it may be <strong>named</strong> or <strong>anonymous</strong>. Anonymous volumes are not given an explicit name when they are first mounted into a container, so Docker gives them a random name that is guaranteed to be unique within a given Docker host. Besides the name, named and anonymous volumes behave in the same ways.</p>\\n<p>Volumes also support the use of <em>volume drivers</em>, which allow you to <strong>store your data on remote hosts or cloud providers, among other possibilities</strong>.</p>\\n</blockquote>\\n</li>\\n<li><p><strong>Bind mounts</strong> may be stored <em>anywhere</em> on the host system. They may even be important system files or directories. <strong>Non-Docker processes on the Docker host or a Docker container can modify them at any time</strong>.</p>\\n<blockquote>\\n<p>Available since the early days of Docker. Bind mounts have limited functionality compared to volumes. </p>\\n<p>When you use a bind mount, a file or directory on the <em>host machine</em> is mounted into a container. The file or directory is referenced by its full path on the host machine. The file or directory does not need to exist on the Docker host already. It is created on demand if it does not yet exist. Bind mounts are very performant, but they rely on the host machine’s filesystem having a specific directory structure available. If you are developing new Docker applications, consider using named volumes instead. You can’t use Docker CLI commands to directly manage bind mounts.</p>\\n</blockquote>\\n</li>\\n<li><p><strong>tmpfs mounts</strong> are stored in the host system’s memory only, and are never written to the host system’s filesystem.</p>\\n<blockquote>\\n<p>A <code>tmpfs</code> mount is not persisted on disk, either on the Docker host or within a container. It can be used by a container during the lifetime of the container, to store non-persistent state or sensitive information. For instance, internally, swarm services use <code>tmpfs</code> mounts to mount <a href=\\\"https://docs.docker.com/engine/swarm/secrets/\\\">secrets</a> into a service’s containers.</p>\\n</blockquote>\\n</li>\\n</ul>\\n<h3 id=\\\"use-case\\\">Use case</h3>\\n<h4 id=\\\"for-volumes\\\">For volumes</h4>\\n<ul>\\n<li><strong>Sharing data among multiple running containers.</strong> If you don’t explicitly create it, a volume is created the first time it is mounted into a container. When that container stops or is removed, the volume still exists. Multiple containers can mount the same volume simultaneously, either read-write or read-only. Volumes are only removed when you explicitly remove them.</li>\\n<li>Volumes help you <strong>decouple the configuration</strong> of the Docker host from the container runtime.</li>\\n<li>When you want to <strong>store your container’s data on a remote host or a cloud provider</strong>, rather than locally.</li>\\n<li>When you <strong>need to back up, restore, or migrate data</strong> from one Docker host to another, volumes are a better choice. You can stop containers using the volume, then back up the volume’s directory (such as <code>/var/lib/docker/volumes/&lt;volume-name&gt;</code>).</li>\\n</ul>\\n<h4 id=\\\"for-bind-mounts\\\">For bind mounts</h4>\\n<ul>\\n<li><p><strong>Sharing configuration files from the host machine to containers.</strong> </p>\\n<p>This is how Docker provides DNS resolution to containers by default, by mounting <code>/etc/resolv.conf</code> from the host machine into each container.</p>\\n</li>\\n<li><p><strong>Sharing source code or build artifacts between a development environment on the Docker host and a container.</strong> </p>\\n<p><strong>For image user:</strong> you may mount a Maven <code>target/</code> directory into a container, and each time you build the Maven project on the Docker host, the container gets access to the rebuilt artifacts.</p>\\n<p><strong>For image developer:</strong> your production Dockerfile would copy the production-ready artifacts directly into the image, rather than relying on a bind mount.</p>\\n</li>\\n<li><p>When the file or directory structure of the Docker host is guaranteed to be consistent with the bind mounts the containers require.</p>\\n</li>\\n</ul>\\n<h4 id=\\\"for-tmpfs-mounts\\\">For tmpfs mounts</h4>\\n<p><code>tmpfs</code> mounts are best used for cases when you do not want the data to persist either on the host machine or within the container. This may be for security reasons or to protect the performance of the container when your application needs to write a large volume of non-persistent state data.</p>\\n<h3 id=\\\"gemtips-for-using-bind-mounts-or-volumes\\\">💎Tips for using bind mounts or volumes</h3>\\n<p>If you use either bind mounts or volumes, keep the following in mind:</p>\\n<ul>\\n<li>If you mount an <strong>empty volume</strong> into a directory in the container in which files or directories exist, these files or directories are propagated (copied) into the volume. Similarly, if you start a container and specify a volume which does not already exist, an empty volume is created for you. This is a good way to pre-populate data that another container needs.</li>\\n<li>If you mount a <strong>bind mount or non-empty volume</strong> into a directory in the container in which some files or directories exist, these files or directories are obscured by the mount.</li>\\n</ul>\\n<h3 id=\\\"conclusion\\\">Conclusion</h3>\\n<p>We have three ways to manage data on a running container:</p>\\n<ol>\\n<li>volume: <ul>\\n<li>docker managed</li>\\n<li>the most powerful way to manage data between host machine and container</li>\\n<li>data persist on <code>/var/lib/docker/volumes/&lt;volume-name&gt;</code></li>\\n</ul>\\n</li>\\n<li>bind mount:<ul>\\n<li>non-docker managed</li>\\n<li>able to access the every where on host machine</li>\\n<li>quite unsafe but easily to work</li>\\n</ul>\\n</li>\\n<li>tmpfs mount:<ul>\\n<li>persist data on memory</li>\\n<li>for security and protection reason</li>\\n</ul>\\n</li>\\n</ol>\\n\";","export default \"<h4 id=\\\"目录\\\">目录</h4>\\n<ul>\\n<li>eclipse 快捷键</li>\\n<li>数组的使用</li>\\n<li>初始化</li>\\n<li>for-each 遍历</li>\\n<li>使用底层 API 快速复制</li>\\n<li>搭配 Arrays 类进行二分查找和排序</li>\\n<li>String 类</li>\\n<li>截取/替换/匹配</li>\\n<li>转其他类型</li>\\n<li>分割/简单的单词提取/大小写字母转换</li>\\n<li>StringBuffer 和 StringBuilder 类</li>\\n<li>Math 类/Random 类</li>\\n<li>两个大数类</li>\\n<li>集合框架的基本使用/及自定义排序的比较器实现:</li>\\n<li>ArrayList:放置/索引/移除/遍历</li>\\n<li>HashSet/TreeSet:放置/索引/移除/遍历</li>\\n<li>HashMap:放置/索引/移除/遍历</li>\\n<li>Stack/Vector:结构特性使用到算法当中去</li>\\n<li>搭配 Collections 类进行:</li>\\n<li>二分查找(针对 List 且需要实现比较器)</li>\\n<li>最大最小值(针对 List 和 Set 且需要实现比较器)</li>\\n<li>快速替换(replaceAll,针对 List)</li>\\n<li>逆转顺序(reverse,针对 List)</li>\\n<li>距离轮换(rotate,针对 List)</li>\\n<li>排序(针对 List)</li>\\n<li>交换位置(针对 List)</li>\\n<li>数组和集合框架之间的转换</li>\\n<li>输入输出挂</li>\\n<li>快速进制转换</li>\\n<li>小数点精度处理</li>\\n</ul>\\n<hr>\\n<h4 id=\\\"1-eclipse-快捷使用暴富\\\">1. Eclipse 快捷使用暴富</h4>\\n<h5 id=\\\"11-开启自动代码提示\\\">1.1 开启自动代码提示</h5>\\n<p>默认是只有.符号触发, 我们把所有字母的大小写和.一起加入代码提示的触发:</p>\\n<ul>\\n<li>开启路径:Window-&gt;Perferences-&gt;Java-&gt;Editor-&gt;Content Assist 栏目, 在这个框里把字母大小写敲个遍, <strong>不要忘记把点符号&quot;.&quot;也加上</strong>:\\n<img src=\\\"../../../public/img/cf472e6b33efa166407c366d667ded0c.png\\\" alt=\\\"1\\\"></li>\\n</ul>\\n<h5 id=\\\"12-快捷键优化\\\">1.2 快捷键优化</h5>\\n<h6 id=\\\"121-run-快捷键修改\\\">1.2.1 Run 快捷键修改</h6>\\n<ul>\\n<li>开启路径:Window-&gt;Perferences-&gt;Keys</li>\\n<li>在 Keys 的搜索框里搜:run, 看到有图标的这个就是了, 默认是 Ctrl+F11, 但是这个键位跨度有点大, 我习惯改为 Alt+3\\n<img src=\\\"../../../public/img/c1a3c5f51a5e9863949608354f979d95.png\\\" alt=\\\"2\\\"></li>\\n</ul>\\n<h6 id=\\\"122-debug-快捷键修改\\\">1.2.2 Debug 快捷键修改</h6>\\n<ul>\\n<li>虽然说没啥事也用不上 Debug, 但是我还是习惯改为 Alt+4</li>\\n</ul>\\n<h6 id=\\\"123-重复当前行\\\">1.2.3 重复当前行</h6>\\n<ul>\\n<li>在 Keys 的搜索框里搜:duplicate, 同一个方法调用多次的时候, 需要快捷重复当前行, 我习惯改为 Ctrl+D</li>\\n</ul>\\n<h6 id=\\\"124-上下移动某行代码\\\">1.2.4 上下移动某行代码</h6>\\n<ul>\\n<li>原来的快捷键就挺科学的了, alt+方向键上下</li>\\n</ul>\\n<h5 id=\\\"13-代码模板快捷使用\\\">1.3 代码模板快捷使用</h5>\\n<h6 id=\\\"131-systemoutprintln\\\">1.3.1 System.out.println();</h6>\\n<ul>\\n<li><p>默认是 sysout 呼出, 可以改为 sys, 看个人习惯- -\\n<img src=\\\"../../../public/img/1ff57526c65c8fea970940226be8e74f.png\\\" alt=\\\"3\\\"></p>\\n</li>\\n<li><p>修改配置路径:Window-&gt;搜索框搜索:Templates, 找到 Java-&gt;Editor-&gt;Templates\\n<img src=\\\"../../../public/img/61305b96fed7d551bff912f41a30ae3e.png\\\" alt=\\\"4\\\"></p>\\n</li>\\n<li><p>双击之后就可以改, 它只是增加了一个 而不是把原来的改了\\n<img src=\\\"../../../public/img/6d8d94bba53204980044b88d8a8db804.png\\\" alt=\\\"5\\\"></p>\\n</li>\\n</ul>\\n<h6 id=\\\"132-for-循环while-循环等\\\">1.3.2 for 循环/while 循环等</h6>\\n<p>从上面的 Templates 中可以找到许多代码段, 自己试着呼出就好;\\n<img src=\\\"../../../public/img/50a894e8516a818c2bba882008417f78.png\\\" alt=\\\"6\\\"></p>\\n<hr>\\n<h4 id=\\\"2-数组的使用\\\">2. 数组的使用</h4>\\n<h5 id=\\\"21-初始化\\\">2.1 初始化</h5>\\n<pre><code class=\\\"hljs language-java\\\">        <span class=\\\"hljs-type\\\">int</span>[] a = <span class=\\\"hljs-keyword\\\">new</span> <span class=\\\"hljs-title class_\\\">int</span>[]{<span class=\\\"hljs-number\\\">1</span>, <span class=\\\"hljs-number\\\">2</span>, <span class=\\\"hljs-number\\\">3</span>};\\n        <span class=\\\"hljs-type\\\">double</span>[] b = {<span class=\\\"hljs-number\\\">1.1</span>, <span class=\\\"hljs-number\\\">1.2</span>};\\n        <span class=\\\"hljs-type\\\">float</span>[] c = <span class=\\\"hljs-keyword\\\">new</span> <span class=\\\"hljs-title class_\\\">float</span>[<span class=\\\"hljs-number\\\">3</span>];\\n</code></pre>\\n<h5 id=\\\"22-for-each-循环快速遍历\\\">2.2 for-each 循环快速遍历</h5>\\n<pre><code class=\\\"hljs language-java\\\">        <span class=\\\"hljs-type\\\">int</span>[] a = <span class=\\\"hljs-keyword\\\">new</span> <span class=\\\"hljs-title class_\\\">int</span>[]{<span class=\\\"hljs-number\\\">1</span>, <span class=\\\"hljs-number\\\">2</span>, <span class=\\\"hljs-number\\\">3</span>};\\n        <span class=\\\"hljs-keyword\\\">for</span> (<span class=\\\"hljs-type\\\">int</span> i : a) {\\n            System.out.println(i);\\n        }\\n</code></pre>\\n<blockquote>\\n<p>后面对于 List 和 Set 等容器类, 也可以用 for-each 循环来遍历, 需要特别注意的是, 这个语法只能用来遍历, 并不能用来访问修改, 如果在遍历的过程中你修改了要遍历的数组或者容器, 则会报错;</p>\\n</blockquote>\\n<h5 id=\\\"23-底层-api-快速复制数组\\\">2.3 底层 API 快速复制数组</h5>\\n<pre><code class=\\\"hljs language-java\\\">        <span class=\\\"hljs-type\\\">int</span>[] a = <span class=\\\"hljs-keyword\\\">new</span> <span class=\\\"hljs-title class_\\\">int</span>[]{<span class=\\\"hljs-number\\\">1</span>, <span class=\\\"hljs-number\\\">2</span>, <span class=\\\"hljs-number\\\">3</span>};\\n        <span class=\\\"hljs-type\\\">int</span>[] d = <span class=\\\"hljs-keyword\\\">new</span> <span class=\\\"hljs-title class_\\\">int</span>[<span class=\\\"hljs-number\\\">3</span>];\\n        System.arraycopy(a, <span class=\\\"hljs-number\\\">0</span>, d, <span class=\\\"hljs-number\\\">0</span>, a.length);\\n</code></pre>\\n<h6 id=\\\"数组复制-api\\\">数组复制 API</h6>\\n<p><code>public static void arraycopy(Object src,int srcPos,Object dest,int destPos,int length)</code></p>\\n<p>参数：</p>\\n<ul>\\n<li>src - 源数组。</li>\\n<li>srcPos - 源数组中的起始位置。</li>\\n<li>dest - 目标数组。</li>\\n<li>destPos - 目标数据中的起始位置。</li>\\n<li>length - 要复制的数组元素的数量。</li>\\n</ul>\\n<h5 id=\\\"24-搭配-arrays-类\\\">2.4 搭配 Arrays 类</h5>\\n<h6 id=\\\"241-二分查找\\\">2.4.1 二分查找</h6>\\n<pre><code class=\\\"hljs language-java\\\">        <span class=\\\"hljs-type\\\">double</span>[] b = {<span class=\\\"hljs-number\\\">1.1</span>, <span class=\\\"hljs-number\\\">1.2</span>};\\n        System.out.println(Arrays.binarySearch(b, <span class=\\\"hljs-number\\\">1.0</span>));\\n</code></pre>\\n<p>该 API 最好仅用于基本数据类型数组的二分查找, 虽然自定义类型也可以, 但是你还不如把自定义类存 List 里, 用 Collections 配套的二分查找;</p>\\n<h6 id=\\\"242-升序排序\\\">2.4.2 升序排序</h6>\\n<pre><code class=\\\"hljs language-java\\\">        <span class=\\\"hljs-type\\\">int</span>[] e = {<span class=\\\"hljs-number\\\">4</span>,<span class=\\\"hljs-number\\\">66</span>,<span class=\\\"hljs-number\\\">234</span>,<span class=\\\"hljs-number\\\">32</span>,<span class=\\\"hljs-number\\\">4</span>,<span class=\\\"hljs-number\\\">1</span>,<span class=\\\"hljs-number\\\">23</span>,<span class=\\\"hljs-number\\\">3</span>,<span class=\\\"hljs-number\\\">0</span>};\\n        Arrays.sort(e);\\n        System.out.println(Arrays.toString(e));\\n</code></pre>\\n<p>该 API 是对源数组进行排序, 所以调用之后 e 里面的元素顺序变为自然升序;</p>\\n<hr>\\n<h4 id=\\\"3-string-类的使用\\\">3. String 类的使用</h4>\\n<h5 id=\\\"31-截取替换匹配\\\">3.1 截取/替换/匹配</h5>\\n<pre><code class=\\\"hljs language-java\\\">        <span class=\\\"hljs-type\\\">String</span> <span class=\\\"hljs-variable\\\">a</span> <span class=\\\"hljs-operator\\\">=</span> <span class=\\\"hljs-string\\\">&quot;Hello LanQiaoBei&quot;</span>;\\n        System.out.println(a.substring(<span class=\\\"hljs-number\\\">0</span>, <span class=\\\"hljs-number\\\">5</span>));\\n        System.out.println(a.replace(<span class=\\\"hljs-string\\\">&#x27;H&#x27;</span>, <span class=\\\"hljs-string\\\">&#x27;E&#x27;</span>));\\n        System.out.println(a.replaceAll(<span class=\\\"hljs-string\\\">&quot;[a-z]&quot;</span>, <span class=\\\"hljs-string\\\">&quot;+&quot;</span>));\\n        System.out.println(a.replace(<span class=\\\"hljs-string\\\">&quot;e&quot;</span>, <span class=\\\"hljs-string\\\">&quot;*&quot;</span>));\\n        System.out.println(a.replaceFirst(<span class=\\\"hljs-string\\\">&quot;e&quot;</span>, <span class=\\\"hljs-string\\\">&quot;+&quot;</span>));\\n        System.out.println(a.contains(<span class=\\\"hljs-string\\\">&quot;Lan&quot;</span>));\\n        System.out.println(a.indexOf(<span class=\\\"hljs-string\\\">&quot;Lan&quot;</span>));\\n        System.out.println(a.lastIndexOf(<span class=\\\"hljs-string\\\">&#x27;e&#x27;</span>));\\n</code></pre>\\n<p>结果</p>\\n<pre><code class=\\\"hljs language-console\\\">Hello\\nEello LanQiaoBei\\nH++++ L++Q+++B++\\nH*llo LanQiaoB*i\\nH+llo LanQiaoBei\\ntrue\\n6\\n14\\n</code></pre>\\n<h6 id=\\\"截取字串-api\\\">截取字串 API</h6>\\n<p><code>public String substring(int beginIndex,int endIndex)</code></p>\\n<p>参数：</p>\\n<ul>\\n<li>beginIndex - 起始索引（包括）。</li>\\n<li>endIndex - 结束索引（不包括）。</li>\\n</ul>\\n<p>剩下的的 API 很简单, 需要注意: 1.是 replaceAll 的第一个参数传的是一个正则表达式; 2.有的是替换所有,有的是只替换第一次匹配到的;\\n3.indexOf 和 lastIndexOf 的 API 还有许多重写方法;</p>\\n<h5 id=\\\"32-string-及其他基本类型之间的互转\\\">3.2 String 及其他基本类型之间的互转</h5>\\n<pre><code class=\\\"hljs language-java\\\">        <span class=\\\"hljs-type\\\">String</span> <span class=\\\"hljs-variable\\\">b</span> <span class=\\\"hljs-operator\\\">=</span> <span class=\\\"hljs-string\\\">&quot;123456&quot;</span>;\\n        <span class=\\\"hljs-type\\\">int</span> <span class=\\\"hljs-variable\\\">i</span> <span class=\\\"hljs-operator\\\">=</span> Integer.parseInt(b);\\n        <span class=\\\"hljs-type\\\">String</span> <span class=\\\"hljs-variable\\\">s</span> <span class=\\\"hljs-operator\\\">=</span> String.valueOf(i);\\n</code></pre>\\n<p>其他类型转换同理, 关键是使用基本数据类型的包装类提供的静态方法和 String 提供的静态方法;</p>\\n<h5 id=\\\"33-分割简单的单词提取大小写字母转换\\\">3.3 分割/简单的单词提取/大小写字母转换</h5>\\n<pre><code class=\\\"hljs language-java\\\">        <span class=\\\"hljs-type\\\">String</span> <span class=\\\"hljs-variable\\\">text</span> <span class=\\\"hljs-operator\\\">=</span> <span class=\\\"hljs-string\\\">&quot;Hello my name is LanQiaoBei!&quot;</span>;\\n        String[] splitText = text.split(<span class=\\\"hljs-string\\\">&quot; &quot;</span>);\\n        System.out.println(Arrays.toString(splitText));\\n        <span class=\\\"hljs-keyword\\\">for</span> (String word : splitText) {\\n            System.out.println(word.toLowerCase());\\n        }\\n</code></pre>\\n<p>结果:</p>\\n<pre><code class=\\\"hljs language-console\\\">[Hello, my, name, is, LanQiaoBei!]\\nhello\\nmy\\nname\\nis\\nlanqiaobei!\\n</code></pre>\\n<h6 id=\\\"分割-api\\\">分割 API</h6>\\n<p><code>public String[] split(String regex)</code></p>\\n<p>参数：</p>\\n<ul>\\n<li>regex - 定界正则表达式</li>\\n</ul>\\n<p>上面的单词分割, 以一个空格为正则表达式去匹配分割,分割出的部分按照顺序放置在数组中;</p>\\n<hr>\\n<h4 id=\\\"4-stringbuffer-和-stringbuilder\\\">4. StringBuffer 和 StringBuilder</h4>\\n<h5 id=\\\"41-介绍\\\">4.1 介绍</h5>\\n<p>这两个类主要是在处理字符和字符串的时候给一个缓冲区, 针对这个缓冲区我们可以在对整个源串进行很顺利的插入删除替换, 两个类的用法一直, 只是线程安全上的区别, 在算法比赛中可以随意选;</p>\\n<pre><code class=\\\"hljs language-java\\\">        <span class=\\\"hljs-type\\\">StringBuffer</span> <span class=\\\"hljs-variable\\\">sb</span> <span class=\\\"hljs-operator\\\">=</span> <span class=\\\"hljs-keyword\\\">new</span> <span class=\\\"hljs-title class_\\\">StringBuffer</span>(<span class=\\\"hljs-string\\\">&quot;&quot;</span>);\\n        sb.append(<span class=\\\"hljs-string\\\">&quot;Hello&quot;</span>).append(<span class=\\\"hljs-string\\\">&quot;my&quot;</span>).append(<span class=\\\"hljs-string\\\">&quot;name&quot;</span>).append(<span class=\\\"hljs-string\\\">&quot;is&quot;</span>).append(<span class=\\\"hljs-string\\\">&quot;youyinnn&quot;</span>);\\n        System.out.println(sb);\\n        sb.insert(<span class=\\\"hljs-number\\\">5</span>, <span class=\\\"hljs-string\\\">&quot; &quot;</span>)\\n                .insert(<span class=\\\"hljs-number\\\">8</span>, <span class=\\\"hljs-string\\\">&quot; &quot;</span>)\\n                .insert(<span class=\\\"hljs-number\\\">13</span>,<span class=\\\"hljs-string\\\">&quot; &quot;</span>)\\n                .insert(<span class=\\\"hljs-number\\\">16</span>, <span class=\\\"hljs-string\\\">&quot; &quot;</span>)\\n                .insert(sb.length() , <span class=\\\"hljs-string\\\">&quot;!&quot;</span>);\\n        System.out.println(sb);\\n        System.out.println(sb.delete(sb.length() - <span class=\\\"hljs-number\\\">1</span>, sb.length()));\\n        System.out.println(sb.reverse());\\n</code></pre>\\n<p>特别要注意,这两个类的对象方法是设计成链式调用的, 比如上面的 append 可以链式调用;\\n主要的方法也就 insert/append/delete, 其他方法都和 String 差不多;</p>\\n<hr>\\n<h4 id=\\\"5-math-和-random\\\">5. Math 和 Random</h4>\\n<h5 id=\\\"51-math-的基本使用\\\">5.1 Math 的基本使用</h5>\\n<pre><code class=\\\"hljs language-java\\\">        <span class=\\\"hljs-type\\\">int</span> <span class=\\\"hljs-variable\\\">a</span> <span class=\\\"hljs-operator\\\">=</span> -<span class=\\\"hljs-number\\\">5</span>;\\n        <span class=\\\"hljs-type\\\">int</span> <span class=\\\"hljs-variable\\\">abs</span> <span class=\\\"hljs-operator\\\">=</span> Math.abs(a);\\n        System.out.println(abs);\\n        <span class=\\\"hljs-type\\\">double</span> <span class=\\\"hljs-variable\\\">b</span> <span class=\\\"hljs-operator\\\">=</span> <span class=\\\"hljs-number\\\">2.0</span>;\\n        <span class=\\\"hljs-type\\\">int</span> <span class=\\\"hljs-variable\\\">c</span> <span class=\\\"hljs-operator\\\">=</span> <span class=\\\"hljs-number\\\">3</span>;\\n        <span class=\\\"hljs-type\\\">double</span> <span class=\\\"hljs-variable\\\">pow</span> <span class=\\\"hljs-operator\\\">=</span> Math.pow(c, b);\\n        System.out.println(pow);\\n        System.out.println(Math.random());\\n</code></pre>\\n<p>知道绝对值/次方/获取 0-1.0 之间的随机数即可;</p>\\n<h5 id=\\\"52-random-类\\\">5.2 Random 类</h5>\\n<p>看一下 API 即可, 各种 next 方法都跟简单;</p>\\n<h4 id=\\\"6-biginteger-和-bigdecimal\\\">6. BigInteger 和 BigDecimal</h4>\\n<h5 id=\\\"61-了解-java-基本数据类型的精度表示范围\\\">6.1 了解 Java 基本数据类型的精度表示范围</h5>\\n<table>\\n<thead>\\n<tr>\\n<th align=\\\"center\\\">类型</th>\\n<th align=\\\"center\\\">位数</th>\\n<th align=\\\"center\\\">最大值</th>\\n<th align=\\\"center\\\">最小值</th>\\n<th align=\\\"center\\\">默认值</th>\\n<th align=\\\"center\\\">补充说明</th>\\n</tr>\\n</thead>\\n<tbody><tr>\\n<td align=\\\"center\\\">byte</td>\\n<td align=\\\"center\\\">8 位</td>\\n<td align=\\\"center\\\">127(2^7-1)</td>\\n<td align=\\\"center\\\">-128(-2^7)</td>\\n<td align=\\\"center\\\">0</td>\\n<td align=\\\"center\\\">有符号/二进制补码表示</td>\\n</tr>\\n<tr>\\n<td align=\\\"center\\\">short</td>\\n<td align=\\\"center\\\">16 位</td>\\n<td align=\\\"center\\\">32767(2^15-1)</td>\\n<td align=\\\"center\\\">-32768(-2^15)</td>\\n<td align=\\\"center\\\">0</td>\\n<td align=\\\"center\\\">有符号/二进制补码表示</td>\\n</tr>\\n<tr>\\n<td align=\\\"center\\\">int</td>\\n<td align=\\\"center\\\">32 位</td>\\n<td align=\\\"center\\\">2,147,483,647（2^31 - 1）</td>\\n<td align=\\\"center\\\">-2,147,483,648（-2^31）</td>\\n<td align=\\\"center\\\">0</td>\\n<td align=\\\"center\\\">有符号/二进制补码表示</td>\\n</tr>\\n<tr>\\n<td align=\\\"center\\\">long</td>\\n<td align=\\\"center\\\">64 位</td>\\n<td align=\\\"center\\\">9,223,372,036,854,775,807（2^63 -1）</td>\\n<td align=\\\"center\\\">-9,223,372,036,854,775,808（-2^63）</td>\\n<td align=\\\"center\\\">0L</td>\\n<td align=\\\"center\\\">有符号/二进制补码表示</td>\\n</tr>\\n<tr>\\n<td align=\\\"center\\\">float</td>\\n<td align=\\\"center\\\">32 位</td>\\n<td align=\\\"center\\\">-</td>\\n<td align=\\\"center\\\">-</td>\\n<td align=\\\"center\\\">0.0f</td>\\n<td align=\\\"center\\\">单精度、32 位、符合 IEEE 754 标准的浮点数</td>\\n</tr>\\n<tr>\\n<td align=\\\"center\\\">double</td>\\n<td align=\\\"center\\\">64 位</td>\\n<td align=\\\"center\\\">-</td>\\n<td align=\\\"center\\\">-</td>\\n<td align=\\\"center\\\">0.0d</td>\\n<td align=\\\"center\\\">双精度、64 位、符合 IEEE 754 标准的浮点数</td>\\n</tr>\\n<tr>\\n<td align=\\\"center\\\">boolean</td>\\n<td align=\\\"center\\\">1 位</td>\\n<td align=\\\"center\\\">-</td>\\n<td align=\\\"center\\\">-</td>\\n<td align=\\\"center\\\">false</td>\\n<td align=\\\"center\\\">只有两个取值 true/fasle</td>\\n</tr>\\n<tr>\\n<td align=\\\"center\\\">char</td>\\n<td align=\\\"center\\\">16 位</td>\\n<td align=\\\"center\\\">\\\\uffff</td>\\n<td align=\\\"center\\\">\\\\u0000</td>\\n<td align=\\\"center\\\">-</td>\\n<td align=\\\"center\\\">16 位 Unicode 字符</td>\\n</tr>\\n</tbody></table>\\n<p>可以看到, 基本数据类型要表示的数的范围还有限, 整数太短, 浮点数无法实现精度控制,因此需要大整数和大浮点数来充足表示大数据和精确的大浮点数;</p>\\n<h5 id=\\\"61-biginteger-大整数\\\">6.1 BigInteger 大整数</h5>\\n<pre><code class=\\\"hljs language-java\\\">        <span class=\\\"hljs-type\\\">BigInteger</span> <span class=\\\"hljs-variable\\\">i</span> <span class=\\\"hljs-operator\\\">=</span>\\n                <span class=\\\"hljs-keyword\\\">new</span> <span class=\\\"hljs-title class_\\\">BigInteger</span>(<span class=\\\"hljs-string\\\">&quot;1000000000000000000000000000&quot;</span> +\\n                <span class=\\\"hljs-string\\\">&quot;000000000000000000000000000000000000000&quot;</span> +\\n                <span class=\\\"hljs-string\\\">&quot;000000000000000000000000000000000000000&quot;</span> +\\n                <span class=\\\"hljs-string\\\">&quot;000000000000000000000000000000000000000&quot;</span> +\\n                <span class=\\\"hljs-string\\\">&quot;000000000000000000000000000000000000000&quot;</span> +\\n                <span class=\\\"hljs-string\\\">&quot;000000000000000000000000000000000000000&quot;</span> +\\n                <span class=\\\"hljs-string\\\">&quot;00000000000000000000000000000000&quot;</span>);\\n        <span class=\\\"hljs-type\\\">BigInteger</span> <span class=\\\"hljs-variable\\\">add</span> <span class=\\\"hljs-operator\\\">=</span> i.add(BigInteger.ONE);\\n        System.out.println(add);\\n</code></pre>\\n<p>注意: 1.大数类的构造就传一个纯数字字符串就好了; 2.因为大数类不是基本数据类型, 所以不能用符号去进行算数运算, 所以大数类的方法提供了加减乘除绝对值模运算和各种逻辑运算,; 3.大整数还有四个静态常量可以引用, 0 和 10 和正负 1;</p>\\n<h5 id=\\\"62-bigdecimal-大浮点数\\\">6.2 BigDecimal 大浮点数</h5>\\n<p>同理大整数, 略;</p>\\n<h4 id=\\\"7-集合框架\\\">7. 集合框架</h4>\\n<h5 id=\\\"70-概念规定\\\">7.0 概念规定</h5>\\n<ul>\\n<li>有序: 放入元素的顺序和元素在容器里存放的顺序一致, 如连续 add 3,1,2, 其底层三个元素的存放顺序也是 3,1,2;</li>\\n<li>无序: 放入元素的顺序和元素在容器里存放的顺序不一致, 即元素在容器中的放置顺序是和容器规定的排序规则所决定的, 如连续 add 3,1,2, 若是存放在 TreeSet 中, 则存放顺序会根据元素的&quot;自然属性&quot;排序, 可以是 1,2,3; 默认是升序, 你也可以在构造 TreeSet 的时候给一个降序的比较器, 则存放顺序可以是 3,2,1;</li>\\n</ul>\\n<h5 id=\\\"71-arraylist\\\">7.1 ArrayList</h5>\\n<p>其实 List 还有其他的实现比如 LinkedList 链表, 但是用的多的就 ArrayList, 底层对应数据结构里面的顺序表, 是用数组实现的表;</p>\\n<pre><code class=\\\"hljs language-java\\\">        ArrayList&lt;Integer&gt; integers = <span class=\\\"hljs-keyword\\\">new</span> <span class=\\\"hljs-title class_\\\">ArrayList</span>&lt;&gt;();\\n        <span class=\\\"hljs-keyword\\\">for</span> (<span class=\\\"hljs-type\\\">int</span> <span class=\\\"hljs-variable\\\">i</span> <span class=\\\"hljs-operator\\\">=</span> <span class=\\\"hljs-number\\\">0</span> ; i &lt; <span class=\\\"hljs-number\\\">10</span> ; ++i) {\\n            integers.add(i);\\n        }\\n        <span class=\\\"hljs-keyword\\\">for</span> (Integer integer : integers) {\\n            System.out.print(integer + <span class=\\\"hljs-string\\\">&quot; &quot;</span>);\\n        }\\n        System.out.println();\\n        System.out.println(integers.contains(<span class=\\\"hljs-number\\\">5</span>));\\n        System.out.println(integers.size());\\n        System.out.println(integers.indexOf(<span class=\\\"hljs-number\\\">6</span>));\\n        integers.remove(<span class=\\\"hljs-number\\\">0</span>);\\n        System.out.println(integers);\\n        System.out.println(integers.get(<span class=\\\"hljs-number\\\">8</span>));\\n</code></pre>\\n<p>结果:</p>\\n<pre><code class=\\\"hljs language-console\\\">0 1 2 3 4 5 6 7 8 9\\ntrue\\n10\\n6\\n[1, 2, 3, 4, 5, 6, 7, 8, 9]\\n9\\n</code></pre>\\n<p>具体的自己看 API, <strong>主要用到的特性就是这个容器我可以根据下表去访问元素, 或者操作某个下标的元素</strong>;</p>\\n<h5 id=\\\"72-hashsettreeset比较器\\\">7.2 HashSet/TreeSet/比较器</h5>\\n<p><strong>Set 主要就是用到其自动排序, 和集合元素唯一性的特性</strong></p>\\n<p>HashSet:HashSet 的放置顺序是按照哈希表来放置的;</p>\\n<pre><code class=\\\"hljs language-java\\\">        HashSet&lt;Double&gt; doubles = <span class=\\\"hljs-keyword\\\">new</span> <span class=\\\"hljs-title class_\\\">HashSet</span>&lt;&gt;();\\n        doubles.add(<span class=\\\"hljs-number\\\">5.68</span>);\\n        doubles.add(<span class=\\\"hljs-number\\\">3.25</span>);\\n        doubles.add(<span class=\\\"hljs-number\\\">7.41</span>);\\n        doubles.add(<span class=\\\"hljs-number\\\">5.68</span>);\\n        System.out.println(doubles);\\n</code></pre>\\n<p>结果:</p>\\n<pre><code class=\\\"hljs language-console\\\">[7.41, 5.68, 3.25]\\n</code></pre>\\n<p>这里就很自然而然地去重了, 5.68 只添加好了一次, 而且遍历出来的容器元素是无序的;</p>\\n<p>TreeSet:TreeSet 的放置顺序是按照元素的&quot;自然顺序&quot;放置的, 只有数类型的基本数据类型才有&quot;自然顺序&quot;, 即默认按照数的升序排序;</p>\\n<pre><code class=\\\"hljs language-java\\\">        TreeSet&lt;Integer&gt; t1 = <span class=\\\"hljs-keyword\\\">new</span> <span class=\\\"hljs-title class_\\\">TreeSet</span>&lt;&gt;();\\n        t1.add(<span class=\\\"hljs-number\\\">8</span>);\\n        t1.add(<span class=\\\"hljs-number\\\">4</span>);\\n        t1.add(<span class=\\\"hljs-number\\\">9</span>);\\n        t1.add(<span class=\\\"hljs-number\\\">0</span>);\\n        System.out.println(t1);\\n</code></pre>\\n<p>结果:</p>\\n<pre><code class=\\\"hljs language-console\\\">[0, 4, 8, 9]\\n</code></pre>\\n<p>若我们想自定义排序规则, 则需要实现比较器, 比较器的实现有两种:</p>\\n<ul>\\n<li>一种是内部实现, 需要实现 Comparable 接口, 即你要将比较方法写在你要排序的类中, 这种方法需要修改该类的源代码;</li>\\n<li>一种是外部实现, 需要实现 Comparator 接口, 即单独写一个类, 这个类专门用来写比较方法, 不需要改比较类的源代码;</li>\\n</ul>\\n<p>例如我们上述的 TreeSet 是按照数的升序排列, 我下面实现一个降序比较器:</p>\\n<pre><code class=\\\"hljs language-java\\\"><span class=\\\"hljs-keyword\\\">class</span> <span class=\\\"hljs-title class_\\\">IntComparator</span> <span class=\\\"hljs-keyword\\\">implements</span> <span class=\\\"hljs-title class_\\\">Comparator</span>&lt;Integer&gt;{\\n\\n    <span class=\\\"hljs-meta\\\">@Override</span>\\n    <span class=\\\"hljs-keyword\\\">public</span> <span class=\\\"hljs-type\\\">int</span> <span class=\\\"hljs-title function_\\\">compare</span><span class=\\\"hljs-params\\\">(Integer o1, Integer o2)</span> {\\n        <span class=\\\"hljs-keyword\\\">if</span> (o1 &gt; o2) {\\n            <span class=\\\"hljs-keyword\\\">return</span> -<span class=\\\"hljs-number\\\">1</span>;\\n        } <span class=\\\"hljs-keyword\\\">else</span> <span class=\\\"hljs-keyword\\\">if</span> (o1 &lt; o2) {\\n            <span class=\\\"hljs-keyword\\\">return</span> <span class=\\\"hljs-number\\\">1</span>;\\n        } <span class=\\\"hljs-keyword\\\">else</span> {\\n            <span class=\\\"hljs-keyword\\\">return</span> <span class=\\\"hljs-number\\\">0</span>;\\n        }\\n    }\\n}\\n</code></pre>\\n<p>然后我们在构造 TreeSet 的时候传入该比较器对象:</p>\\n<pre><code class=\\\"hljs language-java\\\">        TreeSet&lt;Integer&gt; t1 = <span class=\\\"hljs-keyword\\\">new</span> <span class=\\\"hljs-title class_\\\">TreeSet</span>&lt;&gt;(<span class=\\\"hljs-keyword\\\">new</span> <span class=\\\"hljs-title class_\\\">IntComparator</span>());\\n        t1.add(<span class=\\\"hljs-number\\\">8</span>);\\n        t1.add(<span class=\\\"hljs-number\\\">4</span>);\\n        t1.add(<span class=\\\"hljs-number\\\">9</span>);\\n        t1.add(<span class=\\\"hljs-number\\\">0</span>);\\n        System.out.println(t1);\\n</code></pre>\\n<p>结果:</p>\\n<pre><code class=\\\"hljs language-console\\\">[9, 8, 4, 0]\\n</code></pre>\\n<p>对于 Set, 我们可操作的方法就很少, 一般在经过了排序和去重的场景之后, 如果我们还要对某个元素进行操作的话, 可以把该 Set 对象传到 ArrayList 的构造方法里, 用 ArrayList 结构去处理元素;</p>\\n<pre><code class=\\\"hljs language-java\\\">    ArrayList&lt;Double&gt; doubles1 = <span class=\\\"hljs-keyword\\\">new</span> <span class=\\\"hljs-title class_\\\">ArrayList</span>&lt;&gt;(doubles);\\n</code></pre>\\n<h5 id=\\\"73-hashmap\\\">7.3 HashMap</h5>\\n<p>Map 就用的比较少了;</p>\\n<pre><code class=\\\"hljs language-java\\\">        HashMap&lt;Integer, String&gt; map = <span class=\\\"hljs-keyword\\\">new</span> <span class=\\\"hljs-title class_\\\">HashMap</span>&lt;&gt;();\\n        map.put(<span class=\\\"hljs-number\\\">19</span>, <span class=\\\"hljs-string\\\">&quot;a&quot;</span>);\\n        map.put(<span class=\\\"hljs-number\\\">9</span>, <span class=\\\"hljs-string\\\">&quot;b&quot;</span>);\\n        map.put(<span class=\\\"hljs-number\\\">19</span>, <span class=\\\"hljs-string\\\">&quot;c&quot;</span>);\\n        map.put(<span class=\\\"hljs-number\\\">8</span>, <span class=\\\"hljs-string\\\">&quot;e&quot;</span>);\\n        <span class=\\\"hljs-keyword\\\">for</span> (Integer key : map.keySet()) {\\n            System.out.println(key + <span class=\\\"hljs-string\\\">&quot; : &quot;</span> + map.get(key));\\n        }\\n        <span class=\\\"hljs-keyword\\\">for</span> (Map.Entry&lt;Integer, String&gt; entry : map.entrySet()) {\\n            System.out.println(entry.getKey() + <span class=\\\"hljs-string\\\">&quot; : &quot;</span> + entry.getValue());\\n        }\\n</code></pre>\\n<p>结果:</p>\\n<pre><code class=\\\"hljs language-console\\\">19 : c\\n8 : e\\n9 : b\\n19 : c\\n8 : e\\n9 : b\\n</code></pre>\\n<p>先说 map, map 其实存储的是 key-value 组成的键值对其中:</p>\\n<ul>\\n<li>key 在 map 中是用 Set 存储的, 所以不能存在多个 key, 如上面我放了两个 key19, 但是 map 中存了后面的那个 value:c</li>\\n<li>map 有多种遍历方法, 我上面举例了两个, 一个是根据 key 的集合去遍历 key 对应的 value, 另一种是使用 Map 对象中的内部类, 每一个 Map 对象都有一个 Map.Entry 对象, 这个对象可以理解将为 key 和 value 绑在一起的那根链子, 我牵起这根链子我就可以拿到链子两头的东西;</li>\\n</ul>\\n<h5 id=\\\"74-搭配-collections\\\">7.4 搭配 Collections</h5>\\n<p>自己看 API, 主要操作的就是 List, 二分查找, 自定义排序, 逆转, 替换, 复制等操作;</p>\\n<h5 id=\\\"75-数组和集合框架之间的转换\\\">7.5 数组和集合框架之间的转换</h5>\\n<pre><code class=\\\"hljs language-java\\\">        Integer[] a = {<span class=\\\"hljs-number\\\">1</span> , <span class=\\\"hljs-number\\\">2</span>, <span class=\\\"hljs-number\\\">3</span>, <span class=\\\"hljs-number\\\">4</span>};\\n        <span class=\\\"hljs-comment\\\">// 数组转ArrayList</span>\\n        ArrayList&lt;Integer&gt; list = <span class=\\\"hljs-keyword\\\">new</span> <span class=\\\"hljs-title class_\\\">ArrayList</span>&lt;&gt;(Arrays.asList(a));\\n        <span class=\\\"hljs-comment\\\">// ArrayList转数组</span>\\n        Integer[] objects = list.toArray(<span class=\\\"hljs-keyword\\\">new</span> <span class=\\\"hljs-title class_\\\">Integer</span>[list.size()]);\\n</code></pre>\\n<h5 id=\\\"76-stack-和-vector\\\">7.6 Stack 和 Vector</h5>\\n<p>这两个是比较老的容器类, 完全可以使用 ArrayList 替代;</p>\\n<h4 id=\\\"8-输入输出挂\\\">8. 输入输出挂</h4>\\n<p>一般很少会用这个, 所谓输出输出挂就是, 一般的<code>System.out</code>这个输出流, 以及<code>Scanner in = new Scanner(System.in)</code>这种输入方式, 并不是最快的输入输出方式, 如果我们写的程序比较差, 运行时间长的话, 我们就需要使用更快输入输出去减少这两方面所耗费的时间, 我们把最快的输入输出方式称之为输入输出挂;</p>\\n<p>输入挂:</p>\\n<pre><code class=\\\"hljs language-java\\\">        <span class=\\\"hljs-type\\\">Scanner</span> <span class=\\\"hljs-variable\\\">in</span> <span class=\\\"hljs-operator\\\">=</span> <span class=\\\"hljs-keyword\\\">new</span> <span class=\\\"hljs-title class_\\\">Scanner</span> (System.in);<span class=\\\"hljs-comment\\\">//基本方法</span>\\n        <span class=\\\"hljs-type\\\">Scanner</span> <span class=\\\"hljs-variable\\\">in</span> <span class=\\\"hljs-operator\\\">=</span> <span class=\\\"hljs-keyword\\\">new</span> <span class=\\\"hljs-title class_\\\">Scanner</span> (<span class=\\\"hljs-keyword\\\">new</span> <span class=\\\"hljs-title class_\\\">BufferedInputStream</span>(System.in));<span class=\\\"hljs-comment\\\">//更快</span>\\n</code></pre>\\n<p>输出挂:</p>\\n<pre><code class=\\\"hljs language-java\\\">        System.out.println(n); <span class=\\\"hljs-comment\\\">//基本的输出方法</span>\\n        <span class=\\\"hljs-type\\\">PrintWriter</span> <span class=\\\"hljs-variable\\\">out</span> <span class=\\\"hljs-operator\\\">=</span> <span class=\\\"hljs-keyword\\\">new</span> <span class=\\\"hljs-title class_\\\">PrintWriter</span>(<span class=\\\"hljs-keyword\\\">new</span> <span class=\\\"hljs-title class_\\\">BufferedOutputStream</span>(System.out));<span class=\\\"hljs-comment\\\">//使用缓存加速，比直接使用System.out快</span>\\n        out.println(n);\\n</code></pre>\\n<h4 id=\\\"9-快速进制转换\\\">9. 快速进制转换</h4>\\n<pre><code class=\\\"hljs language-java\\\">        <span class=\\\"hljs-type\\\">int</span> <span class=\\\"hljs-variable\\\">a</span> <span class=\\\"hljs-operator\\\">=</span> <span class=\\\"hljs-number\\\">6</span>;\\n        <span class=\\\"hljs-comment\\\">//a是10进制数 把a转换为3进制数的String类型</span>\\n        <span class=\\\"hljs-type\\\">String</span> <span class=\\\"hljs-variable\\\">b</span> <span class=\\\"hljs-operator\\\">=</span> Integer.toString(a,<span class=\\\"hljs-number\\\">3</span>);\\n        System.out.println(b);\\n        <span class=\\\"hljs-comment\\\">//把String类型的b当作3进制数转换为10进制数</span>\\n        <span class=\\\"hljs-type\\\">int</span> <span class=\\\"hljs-variable\\\">c</span> <span class=\\\"hljs-operator\\\">=</span> Integer.parseInt(b,<span class=\\\"hljs-number\\\">3</span>);\\n        System.out.println(c);\\n        <span class=\\\"hljs-comment\\\">//快速转换10进制为2进制字符串</span>\\n        System.out.println(Integer.toBinaryString(a));\\n        <span class=\\\"hljs-comment\\\">//快速转换10进制到16进制字符串</span>\\n        System.out.println(Integer.toHexString(<span class=\\\"hljs-number\\\">127</span>));\\n        <span class=\\\"hljs-comment\\\">//快速转换10进制到8进制字符串</span>\\n        System.out.println(Integer.toOctalString(<span class=\\\"hljs-number\\\">9</span>));\\n</code></pre>\\n<p>结果:</p>\\n<pre><code class=\\\"hljs language-console\\\">20\\n6\\n110\\n7f\\n11\\n</code></pre>\\n<h4 id=\\\"10-小数点精度处理\\\">10. 小数点精度处理</h4>\\n<p>小精度小数点</p>\\n<pre><code class=\\\"hljs language-java\\\">        <span class=\\\"hljs-type\\\">double</span> <span class=\\\"hljs-variable\\\">a</span> <span class=\\\"hljs-operator\\\">=</span> <span class=\\\"hljs-number\\\">1.258</span>;\\n        <span class=\\\"hljs-type\\\">String</span> <span class=\\\"hljs-variable\\\">format</span> <span class=\\\"hljs-operator\\\">=</span> String.format(<span class=\\\"hljs-string\\\">&quot;%.2f&quot;</span>, a);\\n        System.out.println(format);\\n</code></pre>\\n<p>结果:</p>\\n<pre><code class=\\\"hljs language-console\\\">1.26\\n</code></pre>\\n<p>使用大浮点数 API 处理:</p>\\n<pre><code class=\\\"hljs language-java\\\">        <span class=\\\"hljs-type\\\">BigDecimal</span> <span class=\\\"hljs-variable\\\">b</span> <span class=\\\"hljs-operator\\\">=</span>\\n                <span class=\\\"hljs-keyword\\\">new</span> <span class=\\\"hljs-title class_\\\">BigDecimal</span>(\\n                        <span class=\\\"hljs-string\\\">&quot;100000000000000000000000&quot;</span> +\\n                                <span class=\\\"hljs-string\\\">&quot;000000000000000000000&quot;</span> +\\n                                <span class=\\\"hljs-string\\\">&quot;000000000000000000000&quot;</span> +\\n                                <span class=\\\"hljs-string\\\">&quot;000000000000000000000&quot;</span> +\\n                                <span class=\\\"hljs-string\\\">&quot;00000000000000000000.&quot;</span> +\\n                                <span class=\\\"hljs-string\\\">&quot;66666666666666666666&quot;</span>);\\n\\n        <span class=\\\"hljs-comment\\\">//四舍五入</span>\\n        System.out.println(b.setScale(<span class=\\\"hljs-number\\\">5</span>, BigDecimal.ROUND_UP));\\n        <span class=\\\"hljs-comment\\\">//截断</span>\\n        System.out.println(b.setScale(<span class=\\\"hljs-number\\\">5</span>, BigDecimal.ROUND_DOWN));\\n</code></pre>\\n\";","export default \"<h3 id=\\\"helloworld\\\">HelloWorld</h3>\\n<p>昨天的小米笔试题: <strong>请用Lambda写一个将int数组[1,2,3]转换为String数组[&quot;1&quot;,&quot;2&quot;,&quot;3&quot;]</strong></p>\\n<p>当时没写完整，就这个为例作为开始吧, 完整代码如下:</p>\\n<pre><code class=\\\"hljs language-java\\\">  <span class=\\\"hljs-type\\\">int</span>[] si = {<span class=\\\"hljs-number\\\">1</span>, <span class=\\\"hljs-number\\\">2</span>, <span class=\\\"hljs-number\\\">3</span>};\\n  Function&lt;<span class=\\\"hljs-type\\\">int</span>[], String[]&gt; f = (<span class=\\\"hljs-type\\\">int</span>[] ar) -&gt; {\\n      String[] ss = <span class=\\\"hljs-keyword\\\">new</span> <span class=\\\"hljs-title class_\\\">String</span>[ar.length];\\n      <span class=\\\"hljs-keyword\\\">for</span> (<span class=\\\"hljs-type\\\">int</span> <span class=\\\"hljs-variable\\\">i</span> <span class=\\\"hljs-operator\\\">=</span> <span class=\\\"hljs-number\\\">0</span>; i &lt; ar.length ; i++) {\\n          ss[i] = ar[i] + <span class=\\\"hljs-string\\\">&quot;&quot;</span>;\\n      }\\n      <span class=\\\"hljs-keyword\\\">return</span> ss;\\n  };\\n  System.out.println(Arrays.toString(f.apply(si)));\\n</code></pre>\\n<p>看不懂是不是?看不懂就对了,Lambda是一个语法糖,它的语法你得看得懂,才知道上面的代码干了什么.</p>\\n<h3 id=\\\"语法\\\">语法</h3>\\n<h4 id=\\\"要点1-函数式接口的支持\\\">要点1-函数式接口的支持</h4>\\n<blockquote>\\n<p>语法必须要函数式接口的支持, 函数式接口: <strong>即接口中只有一个抽象方法</strong>.一般需要<code>@FunctionalInterface</code>注解修饰类.</p>\\n<p>我们称这个唯一的抽象方法为, <strong>函数方法</strong></p>\\n</blockquote>\\n<h4 id=\\\"要点2-箭头语法\\\">要点2-箭头语法</h4>\\n<p>函数式写法格式, 分<strong>左右两边</strong>:</p>\\n<pre><code class=\\\"hljs language-lambda\\\">  (param1, param2, ...) -&gt; {statement1;statement2;...;};\\n</code></pre>\\n<ul>\\n<li><p><strong>左边-参数列表</strong>-方法要传递的参数:</p>\\n<ul>\\n<li>根据泛型可以省略参数列表的类型</li>\\n<li>没有参数或者有两个以上参数时必须写<code>()</code>, 只有一个参数时可以省略<code>()</code></li>\\n</ul>\\n</li>\\n<li><p><strong>右边-语句块</strong>-表达式要执行的语句:</p>\\n<ul>\\n<li>如果只有一条语句, 则可以省略<code>{}</code>, 多条语句必须要<code>{}</code></li>\\n<li>如果有返回值, 且只有一条语句, 则可以<code>return</code>, 多条语句必须加</li>\\n</ul>\\n</li>\\n</ul>\\n<h4 id=\\\"要点3-参数列表类型和返回值类型\\\">要点3-参数列表类型和返回值类型</h4>\\n<p>我们的lambda表达式, 最终还是得被一个<strong>函数式接口</strong>所引用, 我们的表达式可能有<strong>参数列表</strong>, 可能有<strong>返回值</strong>, 也可能都没有. 那么我们省略类型的时候, 函数是怎么判断参数列表类型和返回值类型的呢? 我们来看看这个接口</p>\\n<pre><code class=\\\"hljs language-java\\\"><span class=\\\"hljs-meta\\\">@FunctionalInterface</span>\\n<span class=\\\"hljs-keyword\\\">interface</span> <span class=\\\"hljs-title class_\\\">MyFunction</span>&lt;T, R&gt; {\\n    <span class=\\\"hljs-comment\\\">/**\\n     * 函数方法:\\n     *  处理两个T类型的对象, 返回R类型的结果\\n     */</span>\\n    R <span class=\\\"hljs-title function_\\\">get</span><span class=\\\"hljs-params\\\">(T t1, T t2)</span>;\\n}\\n</code></pre>\\n<p>很容易就看出, 我们是根据接口上的<strong>泛型</strong>去规定<strong>参数列表类型</strong>以及<strong>返回值类型</strong>的,  当我们省略类型的时候, 因为lambda是<strong>依靠泛型填充类型</strong>, 编译的时候, 代码就已经根据上下文自动填补类型了, 比如说这里的<code>get(T t1, T t2)</code>方法, 你<strong>传递什么参数</strong>, 参数类型就是什么, <strong>方法体中实现的</strong>的返回语句是什么类型的, 函数的返回值类型就是什么</p>\\n<pre><code class=\\\"hljs language-java\\\"><span class=\\\"hljs-keyword\\\">public</span> <span class=\\\"hljs-keyword\\\">class</span> <span class=\\\"hljs-title class_\\\">Main</span>{\\n    <span class=\\\"hljs-keyword\\\">public</span> <span class=\\\"hljs-keyword\\\">static</span> &lt;T, R&gt; R <span class=\\\"hljs-title function_\\\">invokeGet</span><span class=\\\"hljs-params\\\">(T t1, T t2, MyFunction&lt;T, R&gt; mf)</span> {\\n        <span class=\\\"hljs-keyword\\\">return</span> mf.get(t1, t2);\\n    }    \\n}\\n</code></pre>\\n<p>我们可以如下省略类型的调用: </p>\\n<pre><code class=\\\"hljs language-java\\\">    <span class=\\\"hljs-type\\\">Person</span> <span class=\\\"hljs-variable\\\">p1</span> <span class=\\\"hljs-operator\\\">=</span> <span class=\\\"hljs-keyword\\\">new</span> <span class=\\\"hljs-title class_\\\">Person</span>(<span class=\\\"hljs-string\\\">&quot;abc&quot;</span>, <span class=\\\"hljs-number\\\">12</span>);\\n    <span class=\\\"hljs-type\\\">Person</span> <span class=\\\"hljs-variable\\\">p2</span> <span class=\\\"hljs-operator\\\">=</span> <span class=\\\"hljs-keyword\\\">new</span> <span class=\\\"hljs-title class_\\\">Person</span>(<span class=\\\"hljs-string\\\">&quot;efg&quot;</span>, <span class=\\\"hljs-number\\\">13</span>);\\n    <span class=\\\"hljs-type\\\">Integer</span> <span class=\\\"hljs-variable\\\">integer</span> <span class=\\\"hljs-operator\\\">=</span>\\n            Main.invokeGet(p1, p2, (ax, bx) -&gt; ax.getName().length() + bx.getName().length());\\n</code></pre>\\n<p>正常的做法是: </p>\\n<pre><code class=\\\"hljs language-java\\\">    <span class=\\\"hljs-type\\\">Integer</span> <span class=\\\"hljs-variable\\\">integer</span> <span class=\\\"hljs-operator\\\">=</span>\\n            Main.&lt;Person, Integer&gt;invokeGet(p1, p2, (ax, bx) -&gt; ax.getName().length() + bx.getName().length());\\n</code></pre>\\n<p>那么这里为什么可以省略? 因为我<code>invokeGet</code>的时候, 传进去的<strong>t1, t2</strong>是<strong>p1, p2</strong>, 所以<strong>T类型</strong>被补充为<strong>Person类型</strong>, 而对于返回值类型, 因为我们这里的方法体实现就一句话, 所以**{}**省略了, <strong>return</strong> 也省略了, 返回值类型就是语句<code>ax.getName().length() + bx.getName().length()</code>所运算出的类型.</p>\\n<h4 id=\\\"代码示例\\\">代码示例</h4>\\n<pre><code class=\\\"hljs language-java\\\"><span class=\\\"hljs-keyword\\\">public</span> <span class=\\\"hljs-keyword\\\">class</span> <span class=\\\"hljs-title class_\\\">Main</span>{\\n\\n    <span class=\\\"hljs-comment\\\">/**\\n     * 语法格式一: 无参 无返回值\\n     * 常用场景: 替代匿名内部类;\\n     *  () -&gt; System.out.println(&quot;xixi&quot;);\\n     */</span>\\n    <span class=\\\"hljs-meta\\\">@Test</span>\\n    <span class=\\\"hljs-keyword\\\">public</span> <span class=\\\"hljs-keyword\\\">void</span> <span class=\\\"hljs-title function_\\\">test1</span><span class=\\\"hljs-params\\\">()</span>{\\n        <span class=\\\"hljs-type\\\">Runnable</span> <span class=\\\"hljs-variable\\\">run</span> <span class=\\\"hljs-operator\\\">=</span> () -&gt; System.out.println(<span class=\\\"hljs-string\\\">&quot;xixi&quot;</span>);\\n        run.run();\\n    }\\n\\n    <span class=\\\"hljs-comment\\\">/**\\n     * 语法二: 一个参数 无返回值\\n     * Tips: 一个参数的话 小括号可以省略不写了 甚至可以配合方法引用(如代码中)\\n     *\\n     *         Consumer&lt;String&gt; consumer = x -&gt; System.out.println(x);\\n     *         Consumer&lt;String&gt; consumer = (x) -&gt; System.out.println(x);\\n     *\\n     * 常用场景: 和Consumer接口配合\\n     */</span>\\n    <span class=\\\"hljs-meta\\\">@Test</span>\\n    <span class=\\\"hljs-keyword\\\">public</span> <span class=\\\"hljs-keyword\\\">void</span> <span class=\\\"hljs-title function_\\\">test2</span><span class=\\\"hljs-params\\\">()</span>{\\n        Consumer&lt;String&gt; consumer = System.out::println;\\n        consumer.accept(<span class=\\\"hljs-string\\\">&quot;haha&quot;</span>);\\n    }\\n\\n    <span class=\\\"hljs-comment\\\">/**\\n     * 语法三: 两个参数, 有返回值\\n     * Tips1:\\n     *  返回值类型在接口方法上已经定义, 参数列表类型已经被泛型规定好了也可以省略,如:\\n     *          int compare(T o1, T o2);\\n     *\\n     * Tips2:\\n     *  如果实现的方法体中有一条语句, 那么return和大括号可以省略不写\\n     *\\n     * Tips3:\\n     *  如果实现的方法体中有多条语句, 那么必须要大括号和return\\n     *\\n     * Tips4:\\n     *  Comparator接口中已经写好了常用的自然顺序比较或者逆序比较的默认方法可以直接用默认方法引用\\n     */</span>\\n    <span class=\\\"hljs-meta\\\">@Test</span>\\n    <span class=\\\"hljs-keyword\\\">public</span> <span class=\\\"hljs-keyword\\\">void</span> <span class=\\\"hljs-title function_\\\">test3</span><span class=\\\"hljs-params\\\">()</span>{\\n        <span class=\\\"hljs-comment\\\">//Comparator&lt;Integer&gt; comparator = Comparator.reverseOrder();</span>\\n        Comparator&lt;Integer&gt; comparator = (x, y) -&gt; y.compareTo(x);\\n\\n        Comparator&lt;Integer&gt; comparator1 = (x, y) -&gt; {\\n            System.out.println(x + y);\\n            <span class=\\\"hljs-keyword\\\">return</span> y.compareTo(x);\\n        };\\n    }\\n\\n    <span class=\\\"hljs-comment\\\">/**\\n     * Lambda表达式的高级用法:\\n     *  (1) 连续泛型指定参数和返回值的类型\\n     *  (2) 静态方法指定泛型调用\\n     *  (3) 传递函数式接口\\n     */</span>\\n    <span class=\\\"hljs-keyword\\\">public</span> <span class=\\\"hljs-keyword\\\">static</span> &lt;T, R&gt; R <span class=\\\"hljs-title function_\\\">invokeGet</span><span class=\\\"hljs-params\\\">(T t1, T t2, MyFunction&lt;T, R&gt; mf)</span> {\\n        <span class=\\\"hljs-keyword\\\">return</span> mf.get(t1, t2);\\n    }\\n\\n    <span class=\\\"hljs-meta\\\">@Test</span>\\n    <span class=\\\"hljs-keyword\\\">public</span> <span class=\\\"hljs-keyword\\\">void</span> <span class=\\\"hljs-title function_\\\">test4</span><span class=\\\"hljs-params\\\">()</span>{\\n        <span class=\\\"hljs-type\\\">Person</span> <span class=\\\"hljs-variable\\\">p1</span> <span class=\\\"hljs-operator\\\">=</span> <span class=\\\"hljs-keyword\\\">new</span> <span class=\\\"hljs-title class_\\\">Person</span>(<span class=\\\"hljs-string\\\">&quot;abc&quot;</span>, <span class=\\\"hljs-number\\\">12</span>);\\n        <span class=\\\"hljs-type\\\">Person</span> <span class=\\\"hljs-variable\\\">p2</span> <span class=\\\"hljs-operator\\\">=</span> <span class=\\\"hljs-keyword\\\">new</span> <span class=\\\"hljs-title class_\\\">Person</span>(<span class=\\\"hljs-string\\\">&quot;uiop&quot;</span>, <span class=\\\"hljs-number\\\">13</span>);\\n        <span class=\\\"hljs-type\\\">Integer</span> <span class=\\\"hljs-variable\\\">integer</span> <span class=\\\"hljs-operator\\\">=</span> \\n                Main.invokeGet(p1, p2, (ax, bx) -&gt; ax.getName().length() + bx.getName().length());\\n        <span class=\\\"hljs-type\\\">String</span> <span class=\\\"hljs-variable\\\">s</span> <span class=\\\"hljs-operator\\\">=</span> \\n                Main.invokeGet(p1, p2, (ax, bx) -&gt; ax.getAge() + <span class=\\\"hljs-string\\\">&quot; : &quot;</span> + bx.getAge());\\n\\n        System.out.println(integer);\\n        System.out.println(s);\\n    }\\n}\\n</code></pre>\\n<h3 id=\\\"五大核心函数式接口\\\">五大核心函数式接口</h3>\\n<p>前面我们说了, lambda依赖函数式接口, Java8已经写好了很多函数式接口了, 而其中最常用的就是接下来要介绍的<strong>五大核心函数式接口</strong>, 这样的函数式接口在Java8中到处都是.</p>\\n<p>所以说了解这<strong>五大核心函数式接口</strong>到底能干什么, 这点是非常重要的.</p>\\n<p>首先看看我写的笔试题的未完整版是什么样子的:</p>\\n<pre><code class=\\\"hljs language-java\\\">  <span class=\\\"hljs-type\\\">Function</span> <span class=\\\"hljs-variable\\\">f</span> <span class=\\\"hljs-operator\\\">=</span> (<span class=\\\"hljs-type\\\">int</span>[] arr) -&gt; {\\n      String[] s = <span class=\\\"hljs-keyword\\\">new</span> <span class=\\\"hljs-title class_\\\">String</span>[arr.length];\\n      <span class=\\\"hljs-keyword\\\">for</span> (<span class=\\\"hljs-type\\\">int</span> <span class=\\\"hljs-variable\\\">i</span> <span class=\\\"hljs-operator\\\">=</span> <span class=\\\"hljs-number\\\">0</span>; i &lt; arr.length ; i++) {\\n          s[i] = arr[i] + <span class=\\\"hljs-string\\\">&quot;&quot;</span>;\\n      }\\n      <span class=\\\"hljs-keyword\\\">return</span> s;\\n  };\\n</code></pre>\\n<p>再来看看完整版:</p>\\n<pre><code class=\\\"hljs language-java\\\">  <span class=\\\"hljs-type\\\">int</span>[] si = {<span class=\\\"hljs-number\\\">1</span>, <span class=\\\"hljs-number\\\">2</span>, <span class=\\\"hljs-number\\\">3</span>};\\n  Function&lt;<span class=\\\"hljs-type\\\">int</span>[], String[]&gt; f = (<span class=\\\"hljs-type\\\">int</span>[] ar) -&gt; {\\n      String[] ss = <span class=\\\"hljs-keyword\\\">new</span> <span class=\\\"hljs-title class_\\\">String</span>[ar.length];\\n      <span class=\\\"hljs-keyword\\\">for</span> (<span class=\\\"hljs-type\\\">int</span> <span class=\\\"hljs-variable\\\">i</span> <span class=\\\"hljs-operator\\\">=</span> <span class=\\\"hljs-number\\\">0</span>; i &lt; ar.length ; i++) {\\n          ss[i] = ar[i] + <span class=\\\"hljs-string\\\">&quot;&quot;</span>;\\n      }\\n      <span class=\\\"hljs-keyword\\\">return</span> ss;\\n  };\\n  System.out.println(Arrays.toString(f.apply(si)));\\n</code></pre>\\n<p>这和完整版相比, 缺少的是<code>Function</code>类后面的泛型定义, 所以这段代码是过不了的, 了解一下<strong>五大核心函数式接口</strong>,</p>\\n<h4 id=\\\"consumer-消费型接口\\\">Consumer<T> 消费型接口</h4>\\n<h5 id=\\\"源码\\\">源码</h5>\\n<pre><code class=\\\"hljs language-java\\\"><span class=\\\"hljs-meta\\\">@FunctionalInterface</span>\\n<span class=\\\"hljs-keyword\\\">public</span> <span class=\\\"hljs-keyword\\\">interface</span> <span class=\\\"hljs-title class_\\\">Consumer</span>&lt;T&gt; {\\n\\n    <span class=\\\"hljs-keyword\\\">void</span> <span class=\\\"hljs-title function_\\\">accept</span><span class=\\\"hljs-params\\\">(T t)</span>;\\n\\n    <span class=\\\"hljs-keyword\\\">default</span> Consumer&lt;T&gt; <span class=\\\"hljs-title function_\\\">andThen</span><span class=\\\"hljs-params\\\">(Consumer&lt;? <span class=\\\"hljs-built_in\\\">super</span> T&gt; after)</span> {\\n        Objects.requireNonNull(after);\\n        <span class=\\\"hljs-keyword\\\">return</span> (T t) -&gt; { accept(t); after.accept(t); };\\n    }\\n}\\n</code></pre>\\n<h5 id=\\\"函数方法\\\">函数方法</h5>\\n<pre><code class=\\\"hljs language-java\\\">    <span class=\\\"hljs-keyword\\\">void</span> <span class=\\\"hljs-title function_\\\">accept</span><span class=\\\"hljs-params\\\">(T t)</span>;\\n</code></pre>\\n<p>消费型接口, 意思就是**&quot;只进不出&quot;<strong>的表现, 所以我们看到方法并没有</strong>返回值类型**</p>\\n<h5 id=\\\"默认方法\\\">默认方法</h5>\\n<p>这个方法相当于将两个<code>Consumer</code>函数组合在了一起, 形成一个新的<code>Consumer</code>函数, after函数在源函数之后执行, 相当于一个**&quot;后置函数&quot;**</p>\\n<h5 id=\\\"示例\\\">示例</h5>\\n<pre><code class=\\\"hljs language-java\\\">    <span class=\\\"hljs-meta\\\">@Test</span>\\n    <span class=\\\"hljs-keyword\\\">public</span> <span class=\\\"hljs-keyword\\\">void</span> <span class=\\\"hljs-title function_\\\">testConsumer</span><span class=\\\"hljs-params\\\">()</span>{\\n        <span class=\\\"hljs-type\\\">Person</span> <span class=\\\"hljs-variable\\\">p1</span> <span class=\\\"hljs-operator\\\">=</span> <span class=\\\"hljs-keyword\\\">new</span> <span class=\\\"hljs-title class_\\\">Person</span>(<span class=\\\"hljs-string\\\">&quot;abc&quot;</span>, <span class=\\\"hljs-number\\\">12</span>);\\n        <span class=\\\"hljs-type\\\">Person</span> <span class=\\\"hljs-variable\\\">p2</span> <span class=\\\"hljs-operator\\\">=</span> <span class=\\\"hljs-keyword\\\">new</span> <span class=\\\"hljs-title class_\\\">Person</span>(<span class=\\\"hljs-string\\\">&quot;uiop&quot;</span>, <span class=\\\"hljs-number\\\">13</span>);\\n\\n        Consumer&lt;Person&gt; gn = \\n            (person) -&gt; System.out.println(<span class=\\\"hljs-string\\\">&quot;Name is : &quot;</span> + person.getName());\\n        Consumer&lt;Person&gt; ga = \\n            (person) -&gt; System.out.println(<span class=\\\"hljs-string\\\">&quot;Age is : &quot;</span> + person.getAge());\\n        Consumer&lt;Person&gt; gnAndga = gn.andThen(ga);\\n\\n        gn.accept(p1);\\n        ga.accept(p2);\\n        gnAndga.accept(p1);\\n    }\\n</code></pre>\\n<pre><code class=\\\"hljs language-console\\\">Name is : abc\\nAge is : 13\\nName is : abc\\nAge is : 12\\n</code></pre>\\n<h4 id=\\\"supplier-供给型接口\\\">Supplier<T> 供给型接口</h4>\\n<h5 id=\\\"源码-1\\\">源码</h5>\\n<pre><code class=\\\"hljs language-java\\\"><span class=\\\"hljs-meta\\\">@FunctionalInterface</span>\\n<span class=\\\"hljs-keyword\\\">public</span> <span class=\\\"hljs-keyword\\\">interface</span> <span class=\\\"hljs-title class_\\\">Supplier</span>&lt;T&gt; {\\n    T <span class=\\\"hljs-title function_\\\">get</span><span class=\\\"hljs-params\\\">()</span>;\\n}\\n</code></pre>\\n<h5 id=\\\"函数方法-1\\\">函数方法</h5>\\n<pre><code class=\\\"hljs language-java\\\">    T <span class=\\\"hljs-title function_\\\">get</span><span class=\\\"hljs-params\\\">()</span>;\\n</code></pre>\\n<p><strong>&quot;有出没进&quot;</strong>, 供给型的函数接口.</p>\\n<h5 id=\\\"示例-1\\\">示例</h5>\\n<pre><code class=\\\"hljs language-java\\\"><span class=\\\"hljs-meta\\\">@Test</span>\\n<span class=\\\"hljs-keyword\\\">public</span> <span class=\\\"hljs-keyword\\\">void</span> <span class=\\\"hljs-title function_\\\">testSupplier</span><span class=\\\"hljs-params\\\">()</span>{\\n    Supplier&lt;Person&gt; supplier = () -&gt; <span class=\\\"hljs-keyword\\\">new</span> <span class=\\\"hljs-title class_\\\">Person</span>();\\n    <span class=\\\"hljs-type\\\">Person</span> <span class=\\\"hljs-variable\\\">person</span> <span class=\\\"hljs-operator\\\">=</span> supplier.get();\\n    System.out.println(person);\\n}\\n</code></pre>\\n<h4 id=\\\"functiont-r-函数型接口\\\">Function&lt;T, R&gt; 函数型接口</h4>\\n<h5 id=\\\"源码-2\\\">源码</h5>\\n<pre><code class=\\\"hljs language-java\\\"><span class=\\\"hljs-meta\\\">@FunctionalInterface</span>\\n<span class=\\\"hljs-keyword\\\">public</span> <span class=\\\"hljs-keyword\\\">interface</span> <span class=\\\"hljs-title class_\\\">Function</span>&lt;T, R&gt; {\\n\\n    R <span class=\\\"hljs-title function_\\\">apply</span><span class=\\\"hljs-params\\\">(T t)</span>;\\n\\n    <span class=\\\"hljs-keyword\\\">default</span> &lt;V&gt; Function&lt;V, R&gt; <span class=\\\"hljs-title function_\\\">compose</span><span class=\\\"hljs-params\\\">(Function&lt;? <span class=\\\"hljs-built_in\\\">super</span> V, ? extends T&gt; before)</span> {\\n        Objects.requireNonNull(before);\\n        <span class=\\\"hljs-keyword\\\">return</span> (V v) -&gt; apply(before.apply(v));\\n    }\\n\\n    <span class=\\\"hljs-keyword\\\">default</span> &lt;V&gt; Function&lt;T, V&gt; <span class=\\\"hljs-title function_\\\">andThen</span><span class=\\\"hljs-params\\\">(Function&lt;? <span class=\\\"hljs-built_in\\\">super</span> R, ? extends V&gt; after)</span> {\\n        Objects.requireNonNull(after);\\n        <span class=\\\"hljs-keyword\\\">return</span> (T t) -&gt; after.apply(apply(t));\\n    }\\n\\n    <span class=\\\"hljs-keyword\\\">static</span> &lt;T&gt; Function&lt;T, T&gt; <span class=\\\"hljs-title function_\\\">identity</span><span class=\\\"hljs-params\\\">()</span> {\\n        <span class=\\\"hljs-keyword\\\">return</span> t -&gt; t;\\n    }\\n}\\n</code></pre>\\n<h5 id=\\\"函数方法-2\\\">函数方法</h5>\\n<pre><code class=\\\"hljs language-java\\\">    R <span class=\\\"hljs-title function_\\\">apply</span><span class=\\\"hljs-params\\\">(T t)</span>;\\n</code></pre>\\n<p>就像一个函数, <strong>&quot;有进有出&quot;</strong></p>\\n<h5 id=\\\"默认方法-1\\\">默认方法</h5>\\n<p><code>andThen</code>方法我们在消费型接口的时候已经介绍过了, 然后<code>compose</code>方法和这个方法差不多, 只不过这个方法是在源函数之前执行, 相当于是一个**&quot;前置函数&quot;**</p>\\n<h5 id=\\\"静态方法\\\">静态方法</h5>\\n<p>这个方法暂时还没摸到有什么作用</p>\\n<h5 id=\\\"示例-2\\\">示例</h5>\\n<pre><code class=\\\"hljs language-java\\\"><span class=\\\"hljs-meta\\\">@Test</span>\\n<span class=\\\"hljs-keyword\\\">public</span> <span class=\\\"hljs-keyword\\\">void</span> <span class=\\\"hljs-title function_\\\">testFunction</span><span class=\\\"hljs-params\\\">()</span>{\\n    <span class=\\\"hljs-type\\\">Person</span> <span class=\\\"hljs-variable\\\">person</span> <span class=\\\"hljs-operator\\\">=</span> <span class=\\\"hljs-keyword\\\">new</span> <span class=\\\"hljs-title class_\\\">Person</span>();\\n    Function&lt;Person, Person&gt; function = (ps) -&gt; {\\n        System.out.println(<span class=\\\"hljs-string\\\">&quot;nothing change~&quot;</span>);\\n        <span class=\\\"hljs-keyword\\\">return</span> ps;\\n    };\\n    function = function.compose((ps) -&gt; {\\n        System.out.println(<span class=\\\"hljs-string\\\">&quot;before&quot;</span>);\\n        ps.setName(<span class=\\\"hljs-string\\\">&quot;xixi&quot;</span>);\\n        <span class=\\\"hljs-keyword\\\">return</span> ps;\\n    });\\n    function = function.andThen((ps) -&gt; {\\n        System.out.println(<span class=\\\"hljs-string\\\">&quot;after&quot;</span>);\\n        ps.setAge(<span class=\\\"hljs-number\\\">15</span>);\\n       <span class=\\\"hljs-keyword\\\">return</span> ps;\\n    });\\n    System.out.println(function.apply(person));\\n}\\n</code></pre>\\n<pre><code class=\\\"hljs language-console\\\">before\\nnothing change~\\nafter\\nPerson{name=&#x27;xixi&#x27;, age=15}\\n</code></pre>\\n<h4 id=\\\"predicate-条件预测型接口\\\">Predicate<T> 条件预测型接口</h4>\\n<h5 id=\\\"源码-3\\\">源码</h5>\\n<pre><code class=\\\"hljs language-java\\\"><span class=\\\"hljs-meta\\\">@FunctionalInterface</span>\\n<span class=\\\"hljs-keyword\\\">public</span> <span class=\\\"hljs-keyword\\\">interface</span> <span class=\\\"hljs-title class_\\\">Predicate</span>&lt;T&gt; {\\n\\n    <span class=\\\"hljs-type\\\">boolean</span> <span class=\\\"hljs-title function_\\\">test</span><span class=\\\"hljs-params\\\">(T t)</span>;\\n\\n    <span class=\\\"hljs-keyword\\\">default</span> Predicate&lt;T&gt; <span class=\\\"hljs-title function_\\\">and</span><span class=\\\"hljs-params\\\">(Predicate&lt;? <span class=\\\"hljs-built_in\\\">super</span> T&gt; other)</span> {\\n        Objects.requireNonNull(other);\\n        <span class=\\\"hljs-keyword\\\">return</span> (t) -&gt; test(t) && other.test(t);\\n    }\\n\\n    <span class=\\\"hljs-keyword\\\">default</span> Predicate&lt;T&gt; <span class=\\\"hljs-title function_\\\">negate</span><span class=\\\"hljs-params\\\">()</span> {\\n        <span class=\\\"hljs-keyword\\\">return</span> (t) -&gt; !test(t);\\n    }\\n\\n    <span class=\\\"hljs-keyword\\\">default</span> Predicate&lt;T&gt; <span class=\\\"hljs-title function_\\\">or</span><span class=\\\"hljs-params\\\">(Predicate&lt;? <span class=\\\"hljs-built_in\\\">super</span> T&gt; other)</span> {\\n        Objects.requireNonNull(other);\\n        <span class=\\\"hljs-keyword\\\">return</span> (t) -&gt; test(t) || other.test(t);\\n    }\\n\\n    <span class=\\\"hljs-keyword\\\">static</span> &lt;T&gt; Predicate&lt;T&gt; <span class=\\\"hljs-title function_\\\">isEqual</span><span class=\\\"hljs-params\\\">(Object targetRef)</span> {\\n        <span class=\\\"hljs-keyword\\\">return</span> (<span class=\\\"hljs-literal\\\">null</span> == targetRef)\\n                ? Objects::isNull\\n                : object -&gt; targetRef.equals(object);\\n    }\\n}\\n</code></pre>\\n<h5 id=\\\"函数方法-3\\\">函数方法</h5>\\n<pre><code class=\\\"hljs language-java\\\">    <span class=\\\"hljs-type\\\">boolean</span> <span class=\\\"hljs-title function_\\\">test</span><span class=\\\"hljs-params\\\">(T t)</span>;\\n</code></pre>\\n<p>给个T, 返回个布尔值</p>\\n<h4 id=\\\"默认方法-2\\\">默认方法</h4>\\n<p>经过前几个接口的默认方法, 我们现在应该很容易能理解默认方法的作用了, 特别是对于<strong>条件预测型接口</strong>的默认方法, <code>and</code> <code>or</code> <code>negate</code> 分别代表用<strong>和</strong>的方式连接两个条件, 用<strong>与</strong>的方式连接两个条件, 用<strong>非</strong>呈现这个条件.</p>\\n<h4 id=\\\"comparator-比较器接口\\\">Comparator<T> 比较器接口</h4>\\n<p>这个接口里的默认方法就更多, 牵扯到的使用情况就更复杂, 有待日后研究, 其实本来只是**&quot;四大核心函数式接口&quot;**的, 这个我放在第五个, 因为这个接口里的方法有很有价值. </p>\\n\";","export default \"<h1 id=\\\"jetty--servlet-engine-and-http-server\\\">Jetty : Servlet Engine and HTTP server</h1>\\n<p>创立时间：2017年8月25日16:13:49</p>\\n<p>官方文档地址：<a href=\\\"http://www.eclipse.org/jetty/documentation/9.4.6.v20170531/\\\">http://www.eclipse.org/jetty/documentation/9.4.6.v20170531/</a></p>\\n<hr>\\n<p>Maven依赖：</p>\\n<pre><code>&lt;properties&gt;\\n    &lt;jetty-version&gt;9.4.6.v20170531&lt;/jetty-version&gt;\\n&lt;/properties&gt;\\n\\n&lt;dependencies&gt;\\n\\n    &lt;!-- jetty-server部分 --&gt;\\n    &lt;dependency&gt;\\n        &lt;groupId&gt;org.eclipse.jetty&lt;/groupId&gt;\\n        &lt;artifactId&gt;jetty-server&lt;/artifactId&gt;\\n        &lt;version&gt;${jetty-version}&lt;/version&gt;\\n    &lt;/dependency&gt;\\n\\n    &lt;!-- jetty-servlet部分 --&gt;\\n    &lt;dependency&gt;\\n        &lt;groupId&gt;org.eclipse.jetty&lt;/groupId&gt;\\n        &lt;artifactId&gt;jetty-servlet&lt;/artifactId&gt;\\n        &lt;version&gt;${jetty-version}&lt;/version&gt;\\n    &lt;/dependency&gt;\\n\\n    &lt;!-- jetty-webapp部分 --&gt;\\n    &lt;dependency&gt;\\n        &lt;groupId&gt;org.eclipse.jetty&lt;/groupId&gt;\\n        &lt;artifactId&gt;jetty-webapp&lt;/artifactId&gt;\\n        &lt;version&gt;${jetty-version}&lt;/version&gt;\\n    &lt;/dependency&gt;\\n\\n    &lt;!-- jetty-util部分 --&gt;\\n    &lt;dependency&gt;\\n        &lt;groupId&gt;org.eclipse.jetty&lt;/groupId&gt;\\n        &lt;artifactId&gt;jetty-util&lt;/artifactId&gt;\\n        &lt;version&gt;${jetty-version}&lt;/version&gt;\\n    &lt;/dependency&gt;\\n\\n    &lt;!-- jetty-security部分 --&gt;\\n    &lt;dependency&gt;\\n        &lt;groupId&gt;org.eclipse.jetty&lt;/groupId&gt;\\n        &lt;artifactId&gt;jetty-security&lt;/artifactId&gt;\\n        &lt;version&gt;${jetty-version}&lt;/version&gt;\\n    &lt;/dependency&gt;\\n\\n&lt;/dependencies&gt;\\n</code></pre>\\n<p>注意：以上依赖并不是全部需要，可以按需导入</p>\\n<hr>\\n<h4 id=\\\"前言\\\">前言</h4>\\n<blockquote>\\n<p>这是一篇针对Jetty的官方英文文档翻译，对应版本号为：9.4.6.v20170531。</p>\\n<p>本着高尚的自学精神，再加上暑假有点无聊，我尝试着翻译Jetty的官方文档。</p>\\n<p>该翻译并不是来自于官方的，仅仅是自学用的翻译，如有错误，请在issue中指出。</p>\\n<p>文档并没有严格按照语法规范翻译，首先遵从本人自己的理解（如有理解错误也请在issue中指出），再尽量翻译成通俗的语句，要求的是能根据本文快速掌握Jetty。一切以实践为标准，我在学习的时候也会先实践，再结合实践翻译到文档中。</p>\\n<p>按照预期计划，我并不打算翻译全部的官方文档，仅仅满足我本身的开发需求足矣。一是本人知识水平有限，二是本身学习Jetty就是我当下的需求之一，我只是按需学习，再顺便做一些有趣的事情。</p>\\n<p>博客园平台也有一位前辈“已往之不谏”，他在16年的时候也在他的博客中发布了部分的文档翻译（当时版本：9.3.11.v20160721)，这里是<a href=\\\"http://www.cnblogs.com/yiwangzhibujian/p/5832294.html\\\">地址</a>，我在开启这个计划之前也和前辈联系过，他表示他翻译的章节已经满足他当时的开发需求，也满足了大部分Jetty开发者的需求，所以就没有继续翻译下去。他也不建议我开启翻译计划，本身翻译就是一件特别枯燥的事情，我也非常认同这一点。</p>\\n<p>在和前辈联系过之后，本来我已经取消了这个翻译计划了，但是在照着前辈的博客学习的时候，我发现博客里面有部分翻译有不足的地方，而且我也有一些更多的东西想表达出来，于是没有思考多久，我就重启了这个翻译计划。</p>\\n<p>除此之外，我还找到了一个9.2版本的翻译文档，基本翻译了一半以上，就是翻译的有点生硬。这里是<a href=\\\"http://ykgarfield.github.io/jetty-9.2.3.v20140905-zh/index.html\\\">地址</a>，可能需要翻墙。</p>\\n<p>此外CSDN还有位前辈也做了类似的翻译教程，<a href=\\\"http://blog.csdn.net/liuy_98_1001/article/category/2295505\\\">这里</a>。</p>\\n<p>浏览了以下百度的、谷歌的搜索前10的Jetty相关教程文章，有的要么太旧、已经不能运用到实际，有的要么东一块西一块，不明所以，甚至还有一篇《Jett6指南书》，可惜最后也搁浅了，国外也没有相关书籍，国内就更加没有了。这样看来Jetty的学习资料还是挺稀缺的（也可能是我搜索力度不够）。</p>\\n<p>大致看了下Jetty官方的目录，讲的太泛、太宽，入门章节就提到了它的许多feature，但是并没有好好介绍它的核心feature——“嵌入式开发”，这对新手来说太不友好了，但是回过头来想想，也许Jetty的定位就不是给新手使用的呢？</p>\\n<p>我之前也有动手翻译过一篇关于六年前的Java scheduler工具类Cron4j的官方文档，<a href=\\\"https://github.com/youyinnn/Cron4jTranslation\\\">传送门</a>。</p>\\n</blockquote>\\n<hr>\\n<h4 id=\\\"已经翻译的部分\\\">已经翻译的部分:</h4>\\n<ul>\\n<li><a href=\\\"https://youyinnn.github.io/?panel=post&number=33\\\">part1 入门篇</a></li>\\n<li><a href=\\\"https://youyinnn.github.io/?panel=post&number=34\\\">part3-13 注解和在嵌入式中使用注解</a></li>\\n<li><a href=\\\"https://youyinnn.github.io/?panel=post&number=35\\\">part4-21 嵌入式开发部分</a></li>\\n<li><a href=\\\"https://youyinnn.github.io/?panel=post&number=36\\\">part4-23 maven扩展部分</a></li>\\n</ul>\\n\";","export default \"<p><div class=\\\"saying mb-4\\\"><div class=\\\"saying-quote saying-left-quote\\\">“</div><div class=\\\"saying-quote saying-right-quote\\\">”</div></p>\\n<p>上篇介绍了使用Log4j2之前的准备工作和简单介绍了一个HelloWorld</p>\\n<p>现在我们来了解配置中的第一个关键配置：Appenders</p>\\n<p></div></p>\\n<!-- more -->\\n\\n<p>官方文档给出的可用的Appender非常多：有Async（异步输出）、Console（控制台输出）、File（文件输出）、甚至还有JDBC和HTTP等24种输出源方式，然而我日常使用的就几个：Console、RollingFile；一个作为本地host调试的时候log，一个作为远程主机调试的时候写log。其他的我就不仔细去研究了。</p>\\n<hr>\\n<h3 id=\\\"consoleappender\\\">ConsoleAppender</h3>\\n<p><code>ConsoleAppender</code>，使用的是<code>System.out</code>或者<code>System.err</code>作为输出源，把log打印在控制台上，默认的情况下使用的是<code>System.out</code>。</p>\\n<pre><code class=\\\"hljs language-xml\\\"><span class=\\\"hljs-tag\\\">&lt;<span class=\\\"hljs-name\\\">Console</span> <span class=\\\"hljs-attr\\\">name</span>=<span class=\\\"hljs-string\\\">&quot;Console&quot;</span> <span class=\\\"hljs-attr\\\">target</span>=<span class=\\\"hljs-string\\\">&quot;SYSTEM_OUT&quot;</span>&gt;</span>\\n    <span class=\\\"hljs-tag\\\">&lt;<span class=\\\"hljs-name\\\">PatternLayout</span> <span class=\\\"hljs-attr\\\">pattern</span>=<span class=\\\"hljs-string\\\">&quot;%d{HH:mm:ss.SSS} [%t] %-5level %logger{36} - %msg%n&quot;</span>/&gt;</span>\\n<span class=\\\"hljs-tag\\\">&lt;/<span class=\\\"hljs-name\\\">Console</span>&gt;</span>\\n</code></pre>\\n<h4 id=\\\"常用属性\\\">常用属性</h4>\\n<ul>\\n<li>name ：string：appender的名字</li>\\n<li>target：string：指定输出对象：可选<code>SYSTEM_OUT</code>或<code>SYSTEM_ERR</code>，默认是前者。</li>\\n</ul>\\n<hr>\\n<h3 id=\\\"fileappender\\\">FileAppender</h3>\\n<p>FileAppender是一个输出流输出源，它可以根据你指定的文件命名去创建一个文件。FileAppender使用FileManager（继承自<code>OutputStreamManager</code>）来执行文件输入输出。</p>\\n<h4 id=\\\"常用属性-1\\\">常用属性</h4>\\n<ul>\\n<li>name ：string：appender的名字</li>\\n<li>append：boolean：默认为true，此时输出记录会被添加在原有文件的文末，否则会清空之前的log重新输出。</li>\\n<li>fileName：string：输出文件的名字</li>\\n</ul>\\n<p>还有一些属性包括：缓冲流的设置、文件在linux系统下的组、用户、权限等。</p>\\n<pre><code class=\\\"hljs language-xml\\\"><span class=\\\"hljs-tag\\\">&lt;<span class=\\\"hljs-name\\\">File</span> <span class=\\\"hljs-attr\\\">name</span>=<span class=\\\"hljs-string\\\">&quot;MyFile&quot;</span> <span class=\\\"hljs-attr\\\">fileName</span>=<span class=\\\"hljs-string\\\">&quot;logs/app.log&quot;</span>&gt;</span>\\n  <span class=\\\"hljs-tag\\\">&lt;<span class=\\\"hljs-name\\\">PatternLayout</span>&gt;</span>\\n    <span class=\\\"hljs-tag\\\">&lt;<span class=\\\"hljs-name\\\">Pattern</span>&gt;</span>%d %p %c{1.} [%t] %m%n<span class=\\\"hljs-tag\\\">&lt;/<span class=\\\"hljs-name\\\">Pattern</span>&gt;</span>\\n  <span class=\\\"hljs-tag\\\">&lt;/<span class=\\\"hljs-name\\\">PatternLayout</span>&gt;</span>\\n<span class=\\\"hljs-tag\\\">&lt;/<span class=\\\"hljs-name\\\">File</span>&gt;</span>\\n</code></pre>\\n<hr>\\n<h3 id=\\\"randomaccessfileappender\\\">RandomAccessFileAppender</h3>\\n<p>RandomAccessFileAppender和标准的FileAppender很像，只不过RandomAccessFileAppender总是以缓冲的形式输出（并且不能关闭缓冲流），在其内部实现中，它使用<code>ByteBuffer + RandomAccessFile</code>去代替了<code>BufferedOutputStream</code>。它的性能比FileAppender能高出20%~200%。</p>\\n<h4 id=\\\"常用属性-2\\\">常用属性</h4>\\n<ul>\\n<li>name ：string：appender的名字</li>\\n<li>append：boolean：默认为true，此时输出记录会被添加在原有文件的文末，否则会清空之前的log重新输出。</li>\\n<li>fileName：string：输出文件的名字</li>\\n<li>bufferSize：ingeger：默认是256*1024 btyes</li>\\n</ul>\\n<pre><code class=\\\"hljs language-xml\\\"><span class=\\\"hljs-tag\\\">&lt;<span class=\\\"hljs-name\\\">RandomAccessFile</span> <span class=\\\"hljs-attr\\\">name</span>=<span class=\\\"hljs-string\\\">&quot;MyFile2&quot;</span> <span class=\\\"hljs-attr\\\">fileName</span>=<span class=\\\"hljs-string\\\">&quot;logs/app2.log&quot;</span>&gt;</span>\\n    <span class=\\\"hljs-tag\\\">&lt;<span class=\\\"hljs-name\\\">PatternLayout</span>&gt;</span>\\n        <span class=\\\"hljs-tag\\\">&lt;<span class=\\\"hljs-name\\\">Pattern</span>&gt;</span>%d %p %c{1.} [%t] %m%n<span class=\\\"hljs-tag\\\">&lt;/<span class=\\\"hljs-name\\\">Pattern</span>&gt;</span>\\n    <span class=\\\"hljs-tag\\\">&lt;/<span class=\\\"hljs-name\\\">PatternLayout</span>&gt;</span>\\n<span class=\\\"hljs-tag\\\">&lt;/<span class=\\\"hljs-name\\\">RandomAccessFile</span>&gt;</span>\\n</code></pre>\\n<hr>\\n<h3 id=\\\"rollingfileappender（重点）\\\">RollingFileAppender（重点）</h3>\\n<p>RollingFileAppender是最常用的输出流，它可以根据<code>TrggeringPolicy(触发策略)</code>和<code>RolloverPolicy(切换策略)</code>来切换不同的日志文件，以达到可定制度更高的分类日志文件输出。</p>\\n<p>RollingFileAppender要求指定<code>TriggeringPolicy</code>和<code>RolloverStrategy</code>。触发策略决定了当切换策略定义好如何切换的时候，是否执行切换。如果没有指定切换策略，那么RollingFileAppender会使用默认的切换策略。</p>\\n<h4 id=\\\"常用属性-3\\\">常用属性</h4>\\n<ul>\\n<li>name ：string：appender的名字</li>\\n<li>append：boolean：默认为true，此时输出记录会被添加在原有文件的文末，否则会清空之前的log重新输出。</li>\\n<li>fileName：string：输出文件的名字</li>\\n<li>filePattern：string：切换日志文件时使用的文件名模式，默认的切换策略会使用时间和日期以及一个int标号，其中日期pattern可以参考<a href=\\\"http://download.oracle.com/javase/7/docs/api/java/text/SimpleDateFormat.html\\\">SimpleDateFormat</a>，标号使用<code>%i</code>匹配。模式同样支持获取运行时的值，所以任何实时取值的Lookups（比如<a href=\\\"https://logging.apache.org/log4j/2.x/manual/lookups.html#DateLookup\\\">DateLookup</a>）</li>\\n<li>filePermissions：string：文件权限，POSIX格式，例如“rw-------”</li>\\n<li>fileOwner：string：文件所有者</li>\\n<li>fileGroup：string：文件所属组</li>\\n</ul>\\n<h4 id=\\\"triggering-policies-触发策略\\\">Triggering Policies 触发策略</h4>\\n<h5 id=\\\"composite-triggering-policy-复合触发策略\\\">Composite Triggering Policy 复合触发策略</h5>\\n<p>这种触发策略连接了多个触发策略，如果其中一项策略返回true，则整个复合触发策略返回true，CompositeTriggeringPolicy可以使用一个<code>Policies</code>元素来简单配置。</p>\\n<pre><code class=\\\"hljs language-xml\\\"><span class=\\\"hljs-tag\\\">&lt;<span class=\\\"hljs-name\\\">Policies</span>&gt;</span>\\n  <span class=\\\"hljs-tag\\\">&lt;<span class=\\\"hljs-name\\\">OnStartupTriggeringPolicy</span> /&gt;</span>\\n  <span class=\\\"hljs-tag\\\">&lt;<span class=\\\"hljs-name\\\">SizeBasedTriggeringPolicy</span> <span class=\\\"hljs-attr\\\">size</span>=<span class=\\\"hljs-string\\\">&quot;20 MB&quot;</span> /&gt;</span>\\n  <span class=\\\"hljs-tag\\\">&lt;<span class=\\\"hljs-name\\\">TimeBasedTriggeringPolicy</span> /&gt;</span>\\n<span class=\\\"hljs-tag\\\">&lt;/<span class=\\\"hljs-name\\\">Policies</span>&gt;</span>\\n</code></pre>\\n<h5 id=\\\"cron-triggering-policies-cron触发策略\\\">Cron Triggering Policies Cron触发策略</h5>\\n<p>使用cron表达式来进行切换触发</p>\\n<p>属性：</p>\\n<ul>\\n<li>schedule：string：cron表达式</li>\\n<li>evaluateOnStartup：boolean：在项目启动的时候，cron表达式会对日志文件最后的修改时间戳进行评估，看是否立即切换日志文件。</li>\\n</ul>\\n<h5 id=\\\"on-startup-triggering-policy-启动触发策略\\\">On Startup Triggering Policy 启动触发策略</h5>\\n<p>项目JVM启动的时候即触发策略</p>\\n<p>属性：</p>\\n<ul>\\n<li>mixSize：integer：必须切换的最小文件size，如果是0，则立即切换；默认的值是1，防止在当前日志文件为空的时候切换。</li>\\n</ul>\\n<h5 id=\\\"sizebased-triggering-policy-文件体积触发策略\\\">SizeBased Triggering Policy 文件体积触发策略</h5>\\n<p>根据文件大小切换</p>\\n<p>属性：</p>\\n<ul>\\n<li>size：integer：到了某个size之后即切换，需要使用KB、MB、GB等后缀描述，如<code>20MB</code></li>\\n</ul>\\n<h5 id=\\\"timebased-triggering-policy-时间触发策略\\\">TimeBased Triggering Policy 时间触发策略</h5>\\n<p>根据时间切换，这种切换会在 date/time 模式无法运用在当前激活的文件的时候生效。这个策略接受一个<code>interval</code>属性，这个属性回根据当前的time pattern以及<code>modulate</code>这个布尔属性来决定切换文件的频繁程度。</p>\\n<p>属性：</p>\\n<ul>\\n<li>interval：integer：根据date pattern里特定的时间单位决定多久切换一次日志文件。比如date pattren里最精确的单位是hour，然后增量是4，那么会每4小时切换一次，默认的值是1。</li>\\n<li>modulate：boolean：决定当下一次切换时间出现在时间间隔的边缘的时候，是否校正时间间隔。比如，如果是hour，当前时间是3am，然后interval是4，那么下一次切换时间是4am，再下一次就是8am，再就是午时等等。</li>\\n<li>maxRandomDelay：integer：决定延迟切换的最大延迟秒数。默认是0，没有延迟。当服务器中有多个项目配置了同一时间输出日志的时候会非常有用，这会减缓io压力，加快io速度。</li>\\n</ul>\\n<h4 id=\\\"rollover-strategies-切换策略\\\">Rollover Strategies 切换策略</h4>\\n<h5 id=\\\"default-rollover-strategy-默认的切换策略\\\">Default Rollover Strategy 默认的切换策略</h5>\\n<p>默认的切换策略可以同时接收date/time pattern以及一个从filePattern属性中指定的integer参数。如果提供了date/time pattern，则会被替换为日期和时间值。如果pattern里有integer值，那么每次切换就会增加1。pattern里还可以写gz、zip、bz2等后缀。</p>\\n<p>属性：</p>\\n<ul>\\n<li>fileIndex：string：如果设置了max属性，大的index值的文件会比小index值的文件新。如果设置了min，文件重命名以及index计数器会跟随&quot;<a href=\\\"https://logging.apache.org/log4j/2.x/manual/appenders.html#RolloverStrategies\\\">fixed window</a>&quot;策略。</li>\\n<li>min：integer：计数器的最小值，默认值是1</li>\\n<li>max：integer：计数器的最大值，如果达到了这个值，那么会删除掉最早创建的那一个日志文件，默认值是7</li>\\n<li>compressionLevel：integer：压缩等级，针对压缩文件而言，取值0-9，0则无压缩，1是最快的速度生成压缩文件，9是最好的压缩率</li>\\n<li>tempCompressedFilePattern：string：在压缩期间生成的log文件名pattern</li>\\n</ul>\\n<p><em>后面还有更多的自定义策略细节，我就不一一说了，我感觉更详细的日志定制方案比如定时删除和执行script等，没有什么必要，可能是我当前能接触到的场景规模有限。</em></p>\\n<p>和FileAppender一样，RollingFileAppender也有对应的缓冲流版本。</p>\\n<hr>\\n<h3 id=\\\"rollingrandomaccessfileappender（最常用）\\\">RollingRandomAccessFileAppender（最常用）</h3>\\n<p>这个就是RollingFileAppender的升级版，也是最常用的版本，它的属性、策略和前面的RollingFileAppender以及RandomAccessFileAppender一致，参考前面的就好了。</p>\\n<h4 id=\\\"例子\\\">例子</h4>\\n<h5 id=\\\"1\\\">1</h5>\\n<pre><code class=\\\"hljs language-xml\\\"><span class=\\\"hljs-tag\\\">&lt;<span class=\\\"hljs-name\\\">RollingRandomAccessFile</span> <span class=\\\"hljs-attr\\\">name</span>=<span class=\\\"hljs-string\\\">&quot;RollingFile&quot;</span> <span class=\\\"hljs-attr\\\">fileName</span>=<span class=\\\"hljs-string\\\">&quot;logs/a.log&quot;</span>\\n             <span class=\\\"hljs-attr\\\">filePattern</span>=<span class=\\\"hljs-string\\\">&quot;logs/<span class=\\\"katex-display katexp\\\"><span class=\\\"katex-error\\\" title=\\\"ParseError: KaTeX parse error: Expected &#x27;EOF&#x27;, got &#x27;&amp;&#x27; at position 97: …ass=&quot;hljs-tag&quot;&gt;&amp;̲lt;&lt;span class=…\\\" style=\\\"color:#cc0000\\\">{date:yyyy-MM}/a-%d{yyyy-MM-dd-HH-mm}-%i.log&amp;quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;\\n    &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;PatternLayout&lt;/span&gt;&amp;gt;&lt;/span&gt;\\n        &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;Pattern&lt;/span&gt;&amp;gt;&lt;/span&gt;%d %p %c{1.} [%t] %m%n&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;Pattern&lt;/span&gt;&amp;gt;&lt;/span&gt;\\n    &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;PatternLayout&lt;/span&gt;&amp;gt;&lt;/span&gt;\\n    &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;Policies&lt;/span&gt;&amp;gt;&lt;/span&gt;\\n        &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;TimeBasedTriggeringPolicy&lt;/span&gt; /&amp;gt;&lt;/span&gt;\\n        &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;SizeBasedTriggeringPolicy&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;size&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&amp;quot;250 MB&amp;quot;&lt;/span&gt;/&amp;gt;&lt;/span&gt;\\n    &lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;Policies&lt;/span&gt;&amp;gt;&lt;/span&gt;\\n&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;/&lt;span class=&quot;hljs-name&quot;&gt;RollingRandomAccessFile&lt;/span&gt;&amp;gt;&lt;/span&gt;\\n&lt;/code&gt;&lt;/pre&gt;\\n&lt;p&gt;触发策略：&lt;/p&gt;\\n&lt;p&gt;1、按照时间切换：由于&lt;code&gt;filePattern&lt;/code&gt;属性中配置的最精确的time pattern是&lt;code&gt;mm&lt;/code&gt;即Minute in hour，且这条触发策略没有指定interval，那么默认是1分钟切换一次。&lt;/p&gt;\\n&lt;p&gt;2、根据size切换，如果按照上一条的策略，在1分钟内产生超过250MB的日志，则切换，且&lt;code&gt;%i&lt;/code&gt;加一。&lt;/p&gt;\\n&lt;p&gt;切换策略：&lt;/p&gt;\\n&lt;pre&gt;&lt;code class=&quot;hljs language-js&quot;&gt;filePattern=&lt;span class=&quot;hljs-string&quot;&gt;&amp;quot;logs/%d{yyyy-MM}/a-%d{yyyy-MM-dd-HH-mm}-%i.log&amp;quot;&lt;/span&gt;\\n&lt;/code&gt;&lt;/pre&gt;\\n&lt;p&gt;在logs文件夹下，&lt;code&gt;%d{yyyy-MM}&lt;/code&gt;按照月份建立一级文件夹，一月一个文件夹，然后月份里按照触发策略的约束去执行切换策略进行日志文件的切换。&lt;/p&gt;\\n&lt;h5 id=&quot;2&quot;&gt;2&lt;/h5&gt;\\n&lt;pre&gt;&lt;code class=&quot;hljs language-xml&quot;&gt;&lt;span class=&quot;hljs-tag&quot;&gt;&amp;lt;&lt;span class=&quot;hljs-name&quot;&gt;RollingRandomAccessFile&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;name&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&amp;quot;RollingFile&amp;quot;&lt;/span&gt; &lt;span class=&quot;hljs-attr&quot;&gt;fileName&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&amp;quot;logs/a.log&amp;quot;&lt;/span&gt;\\n             &lt;span class=&quot;hljs-attr&quot;&gt;filePattern&lt;/span&gt;=&lt;span class=&quot;hljs-string&quot;&gt;&amp;quot;logs/</span></span>{date:yyyy-MM}/a-%d{yyyy-MM-dd-HH-mm}-%i.log&quot;</span>&gt;</span>\\n    <span class=\\\"hljs-tag\\\">&lt;<span class=\\\"hljs-name\\\">PatternLayout</span>&gt;</span>\\n        <span class=\\\"hljs-tag\\\">&lt;<span class=\\\"hljs-name\\\">Pattern</span>&gt;</span>%d %p %c{1.} [%t] %m%n<span class=\\\"hljs-tag\\\">&lt;/<span class=\\\"hljs-name\\\">Pattern</span>&gt;</span>\\n    <span class=\\\"hljs-tag\\\">&lt;/<span class=\\\"hljs-name\\\">PatternLayout</span>&gt;</span>\\n    <span class=\\\"hljs-tag\\\">&lt;<span class=\\\"hljs-name\\\">Policies</span>&gt;</span>\\n        <span class=\\\"hljs-tag\\\">&lt;<span class=\\\"hljs-name\\\">TimeBasedTriggeringPolicy</span> /&gt;</span>\\n        <span class=\\\"hljs-tag\\\">&lt;<span class=\\\"hljs-name\\\">SizeBasedTriggeringPolicy</span> <span class=\\\"hljs-attr\\\">size</span>=<span class=\\\"hljs-string\\\">&quot;250 MB&quot;</span>/&gt;</span>\\n    <span class=\\\"hljs-tag\\\">&lt;/<span class=\\\"hljs-name\\\">Policies</span>&gt;</span>\\n    <span class=\\\"hljs-tag\\\">&lt;<span class=\\\"hljs-name\\\">DefaultRolloverStrategy</span> <span class=\\\"hljs-attr\\\">max</span>=<span class=\\\"hljs-string\\\">&quot;20&quot;</span>/&gt;</span>\\n<span class=\\\"hljs-tag\\\">&lt;/<span class=\\\"hljs-name\\\">RollingRandomAccessFile</span>&gt;</span>\\n</code></pre>\\n<p>比1多指定了一个默认切换策略属性<code>max</code>：最大保留20个log文件</p>\\n<hr>\\n<h3 id=\\\"smtpappender\\\">SMTPAppender</h3>\\n<p>能给你发邮件的Appender，这个也挺有意思的，<a href=\\\"https://logging.apache.org/log4j/2.x/manual/appenders.html#SMTPAppender\\\">参考</a>。</p>\\n<hr>\\n<p>常用的Appender就介绍这么多，下一节介绍Layout pattern。</p>\\n\";","export default \"<p><div class=\\\"saying mb-4\\\"><div class=\\\"saying-quote saying-left-quote\\\">“</div><div class=\\\"saying-quote saying-right-quote\\\">”</div></p>\\n<p>本文从为知笔记迁移过来, 本文的写作时间是 : 2016/10/17 下午12:28:14, 两年前的文章, 言语难免幼稚, 思维难免浅显, 多多包含.</p>\\n<p></div></p>\\n<h3 id=\\\"引例\\\">引例</h3>\\n<pre><code class=\\\"hljs language-java\\\">    List&lt;Integer&gt; intlist = <span class=\\\"hljs-keyword\\\">new</span> <span class=\\\"hljs-title class_\\\">ArrayList</span>&lt;Integer&gt;();\\n\\n    intlist.add(<span class=\\\"hljs-number\\\">1</span>);\\n    intlist.add(<span class=\\\"hljs-number\\\">2</span>);\\n    intlist.add(<span class=\\\"hljs-number\\\">3</span>);\\n\\n    intlist.forEach((num)-&gt;System.out.println(num));\\n</code></pre>\\n<p>这里就有一个疑问：ArrayList为什么会有一个forEach()函数，而且传进去的变量是这样的形式？</p>\\n<p>于是我向上找了<code>forEach()</code>方法的源码，发现这个方法是被定义在   <code>Iterable</code>接口里面的，接口里面为什么能定义方法？</p>\\n<pre><code class=\\\"hljs language-java\\\">    <span class=\\\"hljs-comment\\\">/**\\n     * Performs the given action for each element of the {<span class=\\\"hljs-doctag\\\">@code</span> Iterable}\\n     * until all elements have been processed or the action throws an\\n     * exception.  Unless otherwise specified by the implementing class,\\n     * actions are performed in the order of iteration (if an iteration order\\n     * is specified).  Exceptions thrown by the action are relayed to the\\n     * caller.\\n     *\\n     * <span class=\\\"hljs-doctag\\\">@implSpec</span>\\n     * &lt;p&gt;The default implementation behaves as if:\\n     * &lt;pre&gt;{<span class=\\\"hljs-doctag\\\">@code</span>\\n     *     for (T t : this)\\n     *         action.accept(t);\\n     * }&lt;/pre&gt;\\n     *\\n     * <span class=\\\"hljs-doctag\\\">@param</span> action The action to be performed for each element\\n     * <span class=\\\"hljs-doctag\\\">@throws</span> NullPointerException if the specified action is null\\n     * <span class=\\\"hljs-doctag\\\">@since</span> 1.8\\n     */</span>\\n    <span class=\\\"hljs-keyword\\\">default</span> <span class=\\\"hljs-keyword\\\">void</span> <span class=\\\"hljs-title function_\\\">forEach</span><span class=\\\"hljs-params\\\">(Consumer&lt;? <span class=\\\"hljs-built_in\\\">super</span> T&gt; action)</span> {\\n        Objects.requireNonNull(action);\\n        <span class=\\\"hljs-keyword\\\">for</span> (T t : <span class=\\\"hljs-built_in\\\">this</span>) {\\n            action.accept(t);\\n        }\\n    }\\n</code></pre>\\n<p>看了这个方法的说明发现，这是java8的新特性：允许接口里面定义默认方法。再一层一层地往上找可以发现继承和实现的关系图：</p>\\n<p>我们再回到<code>forEach</code>方法，他的参数为什么是这样的，看了源码我发现，他传进去的是一个：<code>Consumer</code> 类型的参数。所以这又是个什么鬼？惯例帖源码：</p>\\n<pre><code class=\\\"hljs language-java\\\"><span class=\\\"hljs-comment\\\">/**\\n * Represents an operation that accepts a single input argument and returns no\\n * result. Unlike most other functional interfaces, {<span class=\\\"hljs-doctag\\\">@code</span> Consumer} is expected\\n * to operate via side-effects.\\n *\\n * &lt;p&gt;This is a &lt;a href=&quot;package-summary.html&quot;&gt;functional interface&lt;/a&gt;\\n * whose functional method is {<span class=\\\"hljs-doctag\\\">@link</span> #accept(Object)}.\\n *\\n * <span class=\\\"hljs-doctag\\\">@param</span> &lt;T&gt; the type of the input to the operation\\n *\\n * <span class=\\\"hljs-doctag\\\">@since</span> 1.8\\n */</span>\\n<span class=\\\"hljs-meta\\\">@FunctionalInterface</span>\\n<span class=\\\"hljs-keyword\\\">public</span> <span class=\\\"hljs-keyword\\\">interface</span> <span class=\\\"hljs-title class_\\\">Consumer</span>&lt;T&gt; {\\n​\\n    <span class=\\\"hljs-comment\\\">/**\\n     * Performs this operation on the given argument.\\n     *\\n     * <span class=\\\"hljs-doctag\\\">@param</span> t the input argument\\n     */</span>\\n    <span class=\\\"hljs-keyword\\\">void</span> <span class=\\\"hljs-title function_\\\">accept</span><span class=\\\"hljs-params\\\">(T t)</span>;\\n​\\n    <span class=\\\"hljs-comment\\\">/**\\n     * Returns a composed {<span class=\\\"hljs-doctag\\\">@code</span> Consumer} that performs, in sequence, this\\n     * operation followed by the {<span class=\\\"hljs-doctag\\\">@code</span> after} operation. If performing either\\n     * operation throws an exception, it is relayed to the caller of the\\n     * composed operation.  If performing this operation throws an exception,\\n     * the {<span class=\\\"hljs-doctag\\\">@code</span> after} operation will not be performed.\\n     *\\n     * <span class=\\\"hljs-doctag\\\">@param</span> after the operation to perform after this operation\\n     * <span class=\\\"hljs-doctag\\\">@return</span> a composed {<span class=\\\"hljs-doctag\\\">@code</span> Consumer} that performs in sequence this\\n     * operation followed by the {<span class=\\\"hljs-doctag\\\">@code</span> after} operation\\n     * <span class=\\\"hljs-doctag\\\">@throws</span> NullPointerException if {<span class=\\\"hljs-doctag\\\">@code</span> after} is null\\n     */</span>\\n    <span class=\\\"hljs-keyword\\\">default</span> Consumer&lt;T&gt; <span class=\\\"hljs-title function_\\\">andThen</span><span class=\\\"hljs-params\\\">(Consumer&lt;? <span class=\\\"hljs-built_in\\\">super</span> T&gt; after)</span> {\\n        Objects.requireNonNull(after);\\n        <span class=\\\"hljs-keyword\\\">return</span> (T t) -&gt; { accept(t); after.accept(t); };\\n    }\\n}\\n</code></pre>\\n<p>得，看到这个 @since 1.8 就知道，<code>这又是一个java8的新东西：函数式接口 @FunctionalInterface 简称FI</code>，通过一些资料，我得知虽然之前也有一些<code>FI</code>，但是并没有很明确的给这些接口定义为<code>FI</code>，而是叫做<code>SAM类型（单抽象方法类型 Single Abstract Method）</code>。现在让我来好好研究这个接口，嗯，接口里面有个需要实现的方法<code>void accept(T t);</code>既然说需要实现那这个先放着，看下面那坨玩意.... 默认定义了一个<code>anThen</code>方法，传进去的是一个<code>Consumer</code>，出来的也是一个<code>Consumer</code>...？？</p>\\n<p>没关系，我们看第一句，这玩意就是判断你传进去的东西是不是<code>null</code>，不是就抛出个空指针异常；</p>\\n<p>下面就直接<code>return</code>了 而且这个结构有点不太好看出他做了什么，下面来分析分析我们<code>return</code>的是一个<code>Consumer</code>，所以在得出最终结果之前我们还得再进一次这个函数...所以..等等...不过这好像跟我们的<code>forEach</code>没什么关系。</p>\\n<p>好我们言归正传，看看forEach：</p>\\n<pre><code class=\\\"hljs language-java\\\">    <span class=\\\"hljs-keyword\\\">default</span> <span class=\\\"hljs-keyword\\\">void</span> <span class=\\\"hljs-title function_\\\">forEach</span><span class=\\\"hljs-params\\\">(Consumer&lt;? <span class=\\\"hljs-built_in\\\">super</span> T&gt; action)</span> {\\n        Objects.requireNonNull(action);\\n        <span class=\\\"hljs-keyword\\\">for</span> (T t : <span class=\\\"hljs-built_in\\\">this</span>) {\\n            action.accept(t);\\n        }\\n    }\\n</code></pre>\\n<p>直接看for循环，这种形式的for循环是java1.5出的增强性for循环，目的是为了方便便利数组和集合，因为隐藏了index信息，所以对于单个元素的引索则显得很无力。 </p>\\n<p>因此吧，<code>this</code>就是我们的<code>intlist</code>，<code>action</code>就是我们的<code>lambda</code>表达式</p>\\n<pre><code class=\\\"hljs language-java\\\">  (num)-&gt;System.out.println(num)\\n</code></pre>\\n<p>然后。。。<code>action.accept(t)</code>。。这其实没什么，我们去看看<code>accept</code>就好了，往上翻发现：</p>\\n<pre><code class=\\\"hljs language-java\\\">    <span class=\\\"hljs-comment\\\">/**\\n     * Performs this operation on the given argument.\\n     *\\n     * <span class=\\\"hljs-doctag\\\">@param</span> t the input argument\\n     */</span>\\n    <span class=\\\"hljs-keyword\\\">void</span> <span class=\\\"hljs-title function_\\\">accept</span><span class=\\\"hljs-params\\\">(T t)</span>;\\n</code></pre>\\n<p>说啥？它说，执行输入进来的这个语句的操作。但这是接口里面的待实现的方法，没有实现我这么执行？？在哪实现的？？好，执行吧，他执行什么？ t ？ 往上看，t 是....？？？根据结果来看 t 应该是 <code>System.out.println(num)</code></p>\\n<p>因为我们accept的就是这个句子，但是，如果 t 是一个语句，那么就和之前java5的增强性for循环的格式不对应...那那那我真没办法了。。只能认为这是一个语法糖了。。。我去反编译.class也看不懂底层到底是这么实现的，所学有限。</p>\\n<p>现在回到我们的最初----lambda表达式</p>\\n<p>其语法如下：</p>\\n<p><code>(parameters)-&gt;{ statements; }</code></p>\\n<p>我们的例子</p>\\n<p><code>(num)-&gt;System.out.println(num)</code></p>\\n<p>从结果来看，应该是我给你什么，你就能拿这个为我干什么事情。</p>\\n<p>再来看Java5和Java8的对比：</p>\\n<pre><code class=\\\"hljs language-java\\\">    <span class=\\\"hljs-comment\\\">//Java5的for-Each表达式对集合的循环</span>\\n    <span class=\\\"hljs-keyword\\\">for</span>(Integer num : intlist){\\n        System.out.println(num);\\n    }\\n    \\n    <span class=\\\"hljs-comment\\\">//Java8的forEach()+lambda表达式对集合的循环</span>\\n    intlist.forEach((num)-&gt;System.out.println(num));\\n</code></pre>\\n<p>在Java5的基础上，lambda就使代码更加简洁。</p>\\n<p>那么。。。lambda能在哪里用？前面提到过一个： <code>@FunctionalInterface</code> ，研究了Java8的API文档我发现：</p>\\n<p>这是一个FI声明，FI官方给的定义就是：有且仅有一个抽象方法的接口。而且这个抽象方法被称作是函数式方法，这个函数式方法能被lambda表达式的值和返回值类型所匹配。FI能够为多种上下文提供目标类型。</p>\\n<h3 id=\\\"lambda的用法：\\\">Lambda的用法：</h3>\\n<p>可选类型声明：不需要声明参数类型，编译器可以统一识别参数值。 </p>\\n<p>可选的参数圆括号：一个参数无需定义圆括号，但多个参数需要定义圆括号。 </p>\\n<p>可选的大括号：如果主体包含了一个语句，就不需要使用大括号。 </p>\\n<p>可选的返回关键字：如果主体只有一个表达式返回值则编译器会自动返回值，大括号需要指定明表达式返回了一个数值。</p>\\n<p>关于<code>lambda</code>表达式的理解，我在runoob网上看到一个例子，我觉得挺有代表性的，我自己也试着模仿这个例子去使用<code>lambda</code>：</p>\\n<pre><code class=\\\"hljs language-java\\\"><span class=\\\"hljs-keyword\\\">public</span> <span class=\\\"hljs-keyword\\\">class</span> <span class=\\\"hljs-title class_\\\">lambdaTest</span> {\\n    \\n    <span class=\\\"hljs-comment\\\">//首先有一个标准的FI</span>\\n    <span class=\\\"hljs-meta\\\">@FunctionalInterface</span>\\n    <span class=\\\"hljs-keyword\\\">interface</span> <span class=\\\"hljs-title class_\\\">LambdaPerform</span>{\\n        <span class=\\\"hljs-keyword\\\">void</span> <span class=\\\"hljs-title function_\\\">interfacesay</span><span class=\\\"hljs-params\\\">(String name,<span class=\\\"hljs-type\\\">int</span> age)</span>;\\n    }\\n    \\n    <span class=\\\"hljs-keyword\\\">public</span> <span class=\\\"hljs-keyword\\\">static</span> <span class=\\\"hljs-keyword\\\">void</span> <span class=\\\"hljs-title function_\\\">main</span><span class=\\\"hljs-params\\\">(String[] args)</span> {\\n        \\n        <span class=\\\"hljs-comment\\\">//lambda表达式登场</span>\\n        <span class=\\\"hljs-type\\\">LambdaPerform</span> <span class=\\\"hljs-variable\\\">implementsay</span> <span class=\\\"hljs-operator\\\">=</span> (String name,<span class=\\\"hljs-type\\\">int</span> age) -&gt; { System.out.print(<span class=\\\"hljs-string\\\">&quot;lambda :&quot;</span>);System.out.println(<span class=\\\"hljs-string\\\">&quot; &quot;</span>+name+<span class=\\\"hljs-string\\\">&quot; : &quot;</span>+age);};\\n        \\n        <span class=\\\"hljs-comment\\\">//神奇的一幕发生了</span>\\n        implementsay.interfacesay(<span class=\\\"hljs-string\\\">&quot;Tom&quot;</span>, <span class=\\\"hljs-number\\\">25</span>);\\n    }\\n}\\n</code></pre>\\n<p>控制台有结果：</p>\\n<p>lambda : Tom : 25</p>\\n<p>我们可以看到，传统的接口里面的抽象方法，必须要在某个类实现了这个接口，并提供了这个方法的实现，才可以用这个方法，那现在，如果这个接口是一个<code>FI</code>，<code>lambda</code>表达式登场之后，这个抽象方法<code>interfacesay</code>就能被使用。现在我们明白了，<code>lambda</code>表达式一登场的时候，他等于就干了两件大事：</p>\\n<ul>\\n<li><p>实现了这个接口（从格式上看应该是等式左边的部分完成这个操作，有点匿名内部类的意思）</p>\\n</li>\\n<li><p>实现了这个接口里面唯一的抽象方法。（等式右边就好比写成列出成员列表，完成方法体实现抽象方法）</p>\\n</li>\\n</ul>\\n<p>至少我是这样理解他干了这俩事的，所以我们就可以使用这个<code>interfacesay</code>函数！！！</p>\\n<h3 id=\\\"总结\\\">总结</h3>\\n<p>这也就解决了上面的<code>accept</code>方法为什么没有实现却可以使用的问题！</p>\\n<p>runoob网站还提到，<code>lambda</code>表达式只能引用<code>final</code>或者<code>final</code>局部变量，也就是不能在<code>lambda</code>内修改外部定义的变量，否则编译出错。就算没有说明变量是<code>final</code>，在表达式内也改不了，意思是传进去的变量被标识为有一个隐式的<code>final</code>说明。</p>\\n<p>参考：\\n<a href=\\\"http://www.runoob.com/java/java8-lambda-expressions.html\\\">http://www.runoob.com/java/java8-lambda-expressions.html</a>\\n<a href=\\\"http://blog.csdn.net/samjustin1/article/details/52268004\\\">http://blog.csdn.net/samjustin1/article/details/52268004</a>\\nJava Platform SE 8 - API</p>\\n\";","export default \"<h3 id=\\\"前言\\\">前言</h3>\\n<p>一言难尽 直接开始吧 时间有限 就不一一解读接口了</p>\\n<p>这篇是逐行级别的<code>HashMap</code>的<strong>“基础操作”</strong>源码解读，仅仅分析一些核心的<strong>单元素基础操作（CRUD）</strong>，尽可能从大框架思路去分析实现思路，一些太细的变量和无关操作，就不分析太多了</p>\\n<p>本篇因为时间和精力有限，也跳过了一些很底层的分析如 hash 计算，比特位计算等，网上还有好多大神对于这个分析的比我好得多</p>\\n<p>**多元素操作如<code>putAll</code>**以及一些克隆和序列化的操作的话，就不分析了</p>\\n<p>开篇即是对于作者实现笔记的解读，你可能觉得就是一篇源码英文翻译，但是到后面到了方法的时候，每行都是根据自己的理解去解读的，如果您有其他的看法，可以留言讨论。</p>\\n<hr>\\n<h3 id=\\\"document-介绍\\\">Document 介绍</h3>\\n<blockquote>\\n<p>基于哈希表实现的<code>Map</code>接口。这个实现提供了所有可选的映射操作，并允许空值和空键。(HashMap 类大致相当于 Hashtable，但它是非同步的，并且允许为空。)这个类不保证映射的顺序；特别地，它不能保证顺序会随时间保持不变（也就是说顺序可能会在其他的操作中被改变）。</p>\\n<p>这个实现为基本操作（<code>get</code>和<code>put</code>）提供了恒定时间的性能，假设哈希函数将元素适当地分散在各个桶（ <strong>buckets，存储元素的结构，后文用仓位描述这个概念</strong> ）中。对集合视图的遍历迭代所花费的时间，与<code>HashMap</code>实例的 <strong>“容量（capacity）”</strong> 及其 <strong>大小（键-值映射数）</strong> 成比例。因此，如果迭代性能很重要，那么不要将初始容量设置得太高（或者负载系数太低），这是非常重要的。</p>\\n<p><code>HashMap</code>实例有两个影响其性能的参数：初始容量 <strong>（initial capacity）</strong> 和负载因子<strong>（load factor）</strong>。容量是哈希表中的桶数<strong>（箱子数）</strong>，初始容量只是创建哈希表时的容量。负载因子是在哈希表的容量自动增加之前，哈希表被允许达到的最大容量的度量<strong>（阈值）</strong>。当哈希表中的条目数量超过负载因子和当前容量的乘积时，哈希表就会被重新哈希(也就是说，重新构建内部数据结构)，这样哈希表的容量大约是原来的两倍。</p>\\n<p>一般来说，默认的负载因子**(0.75)<strong>在时间和空间成本之间提供了很好的权衡。较高的值减少了空间开销，但增加了查找成本（反映在<code>HashMap</code>类的大多数操作中，包括<code>get</code>和<code>put</code>）。在设置映射的初始容量时，应该考虑映射中的</strong>期望最大键值对数量<strong>及其</strong>负载因子<strong>，以最小化重哈希</strong>（rehash）<strong>操作的次数。如果初始容量大于</strong>期望最大键值对数量<strong>除以</strong>负载因子**，就不会发生重哈希操作。</p>\\n<p>如果要将许多映射（键值对）存储在<code>HashMap</code>实例中，那么使用足够大的容量创建映射将使映射存储的效率更高，而不是让它根据需要执行自动重哈希以增长表。注意，使用具有相同<code>hashCode()</code>的多个键确实会降低任何散列表的性能。为了改善影响，当键具有可比性时，这个类可以使用键之间的比较顺序来帮助断开连接（避免 hash 冲突）。</p>\\n</blockquote>\\n<h3 id=\\\"作者给的实现提示\\\">作者给的实现提示</h3>\\n<h4 id=\\\"1关于整体结构\\\">1.关于整体结构</h4>\\n<blockquote>\\n<p>这个 map 实现，在一般的情况下就像是一个个由哈希表（<strong>hash table</strong>）组织起来的箱子一样，但是当这些箱子的数量变得非常大（非常大如何衡量？）的时候，它会用树结点（<strong>TreeNode</strong>）结构去替换箱子的结构，每个结构和<code>java.util.TreeMap</code>很相似。</p>\\n<p>类中大部分的方法都是在一般的情况下考虑的（<strong>table method</strong>），你可以把它想象成当作一堆普通箱子一样使用，但是在合适的情况下（可能只是简单的判断结构是否<code>instanceof</code>一个 Node）会将转接到<strong>TreeNode</strong>结构下可用的方法（<strong>tree method</strong>），这时候你需要讲每个箱子当成一棵树去对待。</p>\\n<p><strong>TreeNode</strong>结构下的这些箱子可能会被遍历或者有别的用途，但是在这个<strong>TreeNode</strong>结构里的箱子数量越来越多的情况下，依旧支持以理想的速度进行快速查找操作。然而，考虑到 map 中绝大多数的箱子结构都是一般的结构，那么检查这些树结构箱子的操作就可能在表方法（<strong>table method</strong>）进行的过程中被延迟执行。</p>\\n</blockquote>\\n<h4 id=\\\"2关于-tree-bins\\\">2.关于 Tree Bins</h4>\\n<blockquote>\\n<p>树箱子（<strong>Tree bins</strong>，箱子都是<strong>TreeNode</strong>结构）的顺序首先由元素的 hashCode（哈希码）决定，但是在有关联的情况下，如果两个元素实现了同一个<code>class C implements Comparable&lt;C&gt;</code>接口的话，那么它们的顺序由实现了的比较方法决定（我们保守地通过反射去验证 this 对象来检查泛型--详情见<code>comparableClassFor</code>方法）。</p>\\n<p>树箱子的增加比较复杂但是绝对值得，最坏的情况下也有**O(logn)**效率，但是操作要求键（KEYS）必须有唯一的哈希（hashs）或者有序性保证，因此，在一些意外情况或者<code>hashCode()</code>方法实现得太烂，也就是一些键（KEYS）共享一个 hashCode 的情况下，只要它们还能互相比较，性能会慢慢退化。（如果这些办法都没有被采用，我们可能会在两倍的时间效率或者空间效率上进行比较元素，这是在没有预防措施的情况下。但是这样的情况只会在菜鸟程序员的身上才有可能发生，因为程序已经够慢了，再慢一点也没差）</p>\\n</blockquote>\\n<h4 id=\\\"3treenode-结构带来的性能\\\">3.TreeNode 结构带来的性能</h4>\\n<blockquote>\\n<p>因为 <strong>TreeNodes</strong> 结构一般都是普通结点大小的两倍左右大，我们仅仅是在当箱子装了足够的结点的时候，为了保证能够继续使用才使用这个结构（看<code>TREEIFY_THRESHOLD</code>，树化阈值）。而且当他们的数量变小的时候（移除操作或者恢复大小的操作）它们会变回一般的箱子结构。</p>\\n<p>在使用分布良好的用户实现的哈希码的时候，很少使用树箱子结构。</p>\\n<p>理想情况中，如果哈希码的实现能保证随机性，那么容器中的节点分布频率遵循<a href=\\\"http://en.wikipedia.org/wiki/Poisson_distribution\\\">泊松分布</a>，默认调整大小的参数平均约为 <strong>0.5</strong> ，阈值为 <strong>0.75</strong> ，虽然由于方差较大，会适当调整分布粒度。（这个意思大致是说，保持容器的载量是容器的容量的 <strong>0.5~0.75</strong> 之间，接近 <strong>0.75</strong> 就需要考虑容器扩容）</p>\\n<p>如果忽视方差,预期的列表大小 k 的出现次数是：**(exp(-0.5) * pow(0.5, k) / 阶乘(k))**，值如下：</p>\\n<ul>\\n<li><p>0: 0.60653066</p>\\n</li>\\n<li><p>1: 0.30326533</p>\\n</li>\\n<li><p>2: 0.07581633</p>\\n</li>\\n<li><p>3: 0.01263606</p>\\n</li>\\n<li><p>4: 0.00157952</p>\\n</li>\\n<li><p>5: 0.00015795</p>\\n</li>\\n<li><p>6: 0.00001316</p>\\n</li>\\n<li><p>7: 0.00000094</p>\\n</li>\\n<li><p>8: 0.00000006</p>\\n</li>\\n</ul>\\n<p>更多的值就已经不到千万分之一了，也就是说在<code>hashCode()</code>实现得理想的情况下，几乎容器中几乎不可能出现两位数以上的树箱子。</p>\\n<p>树箱的根通常是它的第一个节点。然而，有时（当前的实现，仅在<code>Iterator.remove</code>方法上出现这个情况），根可能会在其他地方，但可以通过<code>TreeNode.root()</code>方法恢复父节点跟随。</p>\\n</blockquote>\\n<h4 id=\\\"4其他的细节\\\">4.其他的细节</h4>\\n<blockquote>\\n<p>所有适用的内部方法都接受哈希码作为参数（通常由 public 方法提供），允许它们可以在不重新计算用户实现的哈希码的情况下相互调用。大多数内部方法也接受一个“tab”参数，这个参数通常是当前的表，但可能是新表或旧表调整或转换。</p>\\n<p>当箱子（bin）列表被树化、分割或未树化时，我们保留它们具有相同的相对访问 / 遍历顺序（例如：字段、后一个结点）以更好地保存局部，并稍微保留简化调用的分割和遍历的函数调用<code>iterator.remove</code>。当在插入时使用比较器时，保持一次全部排序（或这里要求的最接近的排序）以达到重新平衡，我们将类和标识码进行比较，以作为一个权衡的选择。</p>\\n<p><strong>普通模式</strong>和<strong>树模式</strong>之间的使用和转换是有点复杂的，可以参考<code>LinkedHashMap</code>。看到其中是在<strong>插入</strong>时调用<strong>hook 方法</strong>，允许<code>LinkedHashMap</code>内部进行<strong>删除操作</strong>和<strong>访问操作</strong>，否则保持这些机制独立性。（这也要求将 map 实例传递给一些实用程序方法，而这可能会创建一些新的节点。）</p>\\n</blockquote>\\n<h3 id=\\\"static-final-成员变量\\\">static final 成员变量</h3>\\n<pre><code class=\\\"hljs language-java\\\"><span class=\\\"hljs-comment\\\">// 默认的初始化容器容量 一开始就是16个</span>\\n<span class=\\\"hljs-keyword\\\">static</span> <span class=\\\"hljs-keyword\\\">final</span> <span class=\\\"hljs-type\\\">int</span> <span class=\\\"hljs-variable\\\">DEFAULT_INITIAL_CAPACITY</span> <span class=\\\"hljs-operator\\\">=</span> <span class=\\\"hljs-number\\\">1</span> &lt;&lt; <span class=\\\"hljs-number\\\">4</span>; <span class=\\\"hljs-comment\\\">// aka 16</span>\\n\\n<span class=\\\"hljs-comment\\\">// 最大的容量</span>\\n<span class=\\\"hljs-comment\\\">// 只在你使用指定容量的构造函数构造容器的时候 并且你给的值比这个值更大的时候使用</span>\\n<span class=\\\"hljs-comment\\\">// 无论如何一个容器初始化容量不会大过这个值</span>\\n<span class=\\\"hljs-comment\\\">// 而且最好是小于这个值的2的任意次方</span>\\n<span class=\\\"hljs-keyword\\\">static</span> <span class=\\\"hljs-keyword\\\">final</span> <span class=\\\"hljs-type\\\">int</span> <span class=\\\"hljs-variable\\\">MAXIMUM_CAPACITY</span> <span class=\\\"hljs-operator\\\">=</span> <span class=\\\"hljs-number\\\">1</span> &lt;&lt; <span class=\\\"hljs-number\\\">30</span>;\\n\\n<span class=\\\"hljs-comment\\\">// 默认的负载因子</span>\\n<span class=\\\"hljs-keyword\\\">static</span> <span class=\\\"hljs-keyword\\\">final</span> <span class=\\\"hljs-type\\\">float</span> <span class=\\\"hljs-variable\\\">DEFAULT_LOAD_FACTOR</span> <span class=\\\"hljs-operator\\\">=</span> <span class=\\\"hljs-number\\\">0.75f</span>;\\n\\n<span class=\\\"hljs-comment\\\">// 树化阈值</span>\\n<span class=\\\"hljs-comment\\\">// 箱子结构超过这个阈值的时候会用树结构而不是链结构去管理箱子</span>\\n<span class=\\\"hljs-comment\\\">// 当一条链结点超过这个阈值的时候 箱子会变成树结构</span>\\n<span class=\\\"hljs-comment\\\">// 这个值必须大于2，并且应该至少为8，以便匹配在树中进行删除操作后因为尺寸收缩而转换为普通箱子的情况</span>\\n<span class=\\\"hljs-keyword\\\">static</span> <span class=\\\"hljs-keyword\\\">final</span> <span class=\\\"hljs-type\\\">int</span> <span class=\\\"hljs-variable\\\">TREEIFY_THRESHOLD</span> <span class=\\\"hljs-operator\\\">=</span> <span class=\\\"hljs-number\\\">8</span>;\\n\\n<span class=\\\"hljs-comment\\\">// 逆树化阈值</span>\\n<span class=\\\"hljs-comment\\\">// 在一些恢复容量的操作中 当箱子容量小于这个阈值的时候会对箱子进行逆树化</span>\\n<span class=\\\"hljs-comment\\\">// 这个值最大是6</span>\\n<span class=\\\"hljs-keyword\\\">static</span> <span class=\\\"hljs-keyword\\\">final</span> <span class=\\\"hljs-type\\\">int</span> <span class=\\\"hljs-variable\\\">UNTREEIFY_THRESHOLD</span> <span class=\\\"hljs-operator\\\">=</span> <span class=\\\"hljs-number\\\">6</span>;\\n\\n<span class=\\\"hljs-comment\\\">// 最小的表容量</span>\\n<span class=\\\"hljs-comment\\\">// 超过这个最小的表容量就应该树化了(否则如果在一个仓位中有太多节点，表将被调整大小)</span>\\n<span class=\\\"hljs-comment\\\">// 这个值至少为4 * TREEIFY_THRESHOLD 以避免调整大小和树化阈值之间的冲突</span>\\n<span class=\\\"hljs-keyword\\\">static</span> <span class=\\\"hljs-keyword\\\">final</span> <span class=\\\"hljs-type\\\">int</span> <span class=\\\"hljs-variable\\\">MIN_TREEIFY_CAPACITY</span> <span class=\\\"hljs-operator\\\">=</span> <span class=\\\"hljs-number\\\">64</span>;\\n</code></pre>\\n<h3 id=\\\"内部类：链箱子结点\\\">内部类：链箱子——结点</h3>\\n<pre><code class=\\\"hljs language-java\\\"><span class=\\\"hljs-comment\\\">/**\\n * Basic hash bin node, used for most entries.  (See below for\\n * TreeNode subclass, and in LinkedHashMap for its Entry subclass.)\\n */</span>\\n<span class=\\\"hljs-keyword\\\">static</span> <span class=\\\"hljs-keyword\\\">class</span> <span class=\\\"hljs-title class_\\\">Node</span>&lt;K,V&gt; <span class=\\\"hljs-keyword\\\">implements</span> <span class=\\\"hljs-title class_\\\">Map</span>.Entry&lt;K,V&gt; {\\n    <span class=\\\"hljs-keyword\\\">final</span> <span class=\\\"hljs-type\\\">int</span> hash;\\n    <span class=\\\"hljs-keyword\\\">final</span> K key;\\n    V value;\\n    Node&lt;K,V&gt; next;\\n\\n    Node(<span class=\\\"hljs-type\\\">int</span> hash, K key, V value, Node&lt;K,V&gt; next) {\\n        <span class=\\\"hljs-built_in\\\">this</span>.hash = hash;\\n        <span class=\\\"hljs-built_in\\\">this</span>.key = key;\\n        <span class=\\\"hljs-built_in\\\">this</span>.value = value;\\n        <span class=\\\"hljs-built_in\\\">this</span>.next = next;\\n    }\\n\\n    <span class=\\\"hljs-keyword\\\">public</span> <span class=\\\"hljs-keyword\\\">final</span> K <span class=\\\"hljs-title function_\\\">getKey</span><span class=\\\"hljs-params\\\">()</span>        { <span class=\\\"hljs-keyword\\\">return</span> key; }\\n    <span class=\\\"hljs-keyword\\\">public</span> <span class=\\\"hljs-keyword\\\">final</span> V <span class=\\\"hljs-title function_\\\">getValue</span><span class=\\\"hljs-params\\\">()</span>      { <span class=\\\"hljs-keyword\\\">return</span> value; }\\n    <span class=\\\"hljs-keyword\\\">public</span> <span class=\\\"hljs-keyword\\\">final</span> String <span class=\\\"hljs-title function_\\\">toString</span><span class=\\\"hljs-params\\\">()</span> { <span class=\\\"hljs-keyword\\\">return</span> key + <span class=\\\"hljs-string\\\">&quot;=&quot;</span> + value; }\\n\\n    <span class=\\\"hljs-keyword\\\">public</span> <span class=\\\"hljs-keyword\\\">final</span> <span class=\\\"hljs-type\\\">int</span> <span class=\\\"hljs-title function_\\\">hashCode</span><span class=\\\"hljs-params\\\">()</span> {\\n        <span class=\\\"hljs-keyword\\\">return</span> Objects.hashCode(key) ^ Objects.hashCode(value);\\n    }\\n\\n    <span class=\\\"hljs-keyword\\\">public</span> <span class=\\\"hljs-keyword\\\">final</span> V <span class=\\\"hljs-title function_\\\">setValue</span><span class=\\\"hljs-params\\\">(V newValue)</span> {\\n        <span class=\\\"hljs-type\\\">V</span> <span class=\\\"hljs-variable\\\">oldValue</span> <span class=\\\"hljs-operator\\\">=</span> value;\\n        value = newValue;\\n        <span class=\\\"hljs-keyword\\\">return</span> oldValue;\\n    }\\n\\n    <span class=\\\"hljs-keyword\\\">public</span> <span class=\\\"hljs-keyword\\\">final</span> <span class=\\\"hljs-type\\\">boolean</span> <span class=\\\"hljs-title function_\\\">equals</span><span class=\\\"hljs-params\\\">(Object o)</span> {\\n        <span class=\\\"hljs-keyword\\\">if</span> (o == <span class=\\\"hljs-built_in\\\">this</span>)\\n            <span class=\\\"hljs-keyword\\\">return</span> <span class=\\\"hljs-literal\\\">true</span>;\\n        <span class=\\\"hljs-keyword\\\">if</span> (o <span class=\\\"hljs-keyword\\\">instanceof</span> Map.Entry) {\\n            Map.Entry&lt;?,?&gt; e = (Map.Entry&lt;?,?&gt;)o;\\n            <span class=\\\"hljs-keyword\\\">if</span> (Objects.equals(key, e.getKey()) &&\\n                Objects.equals(value, e.getValue()))\\n                <span class=\\\"hljs-keyword\\\">return</span> <span class=\\\"hljs-literal\\\">true</span>;\\n        }\\n        <span class=\\\"hljs-keyword\\\">return</span> <span class=\\\"hljs-literal\\\">false</span>;\\n    }\\n}\\n</code></pre>\\n<p>简单而常规，主要是两个 final 变量，存储 Key 和 hash，然后是 value 和下一个结点；</p>\\n<p><img src=\\\"../../../public/img/20180817154531.png\\\" alt=\\\"\\\"></p>\\n<h3 id=\\\"静态方法\\\">静态方法</h3>\\n<h4 id=\\\"hash\\\">hash</h4>\\n<pre><code class=\\\"hljs language-java\\\"><span class=\\\"hljs-comment\\\">// 计算key.hashCode()，并将(XORs)的高比特位分散到低比特位 以减少hash冲突</span>\\n<span class=\\\"hljs-comment\\\">// 应用了一种转换 将高比特的影响向下传播</span>\\n<span class=\\\"hljs-comment\\\">// 比特传播的速度 效用和质量之间存在权衡</span>\\n<span class=\\\"hljs-keyword\\\">static</span> <span class=\\\"hljs-keyword\\\">final</span> <span class=\\\"hljs-type\\\">int</span> <span class=\\\"hljs-title function_\\\">hash</span><span class=\\\"hljs-params\\\">(Object key)</span> {\\n    <span class=\\\"hljs-type\\\">int</span> h;\\n    <span class=\\\"hljs-keyword\\\">return</span> (key == <span class=\\\"hljs-literal\\\">null</span>) ? <span class=\\\"hljs-number\\\">0</span> : (h = key.hashCode()) ^ (h &gt;&gt;&gt; <span class=\\\"hljs-number\\\">16</span>);\\n}\\n</code></pre>\\n<h4 id=\\\"comparableclassfor\\\">comparableClassFor</h4>\\n<pre><code class=\\\"hljs language-java\\\"><span class=\\\"hljs-comment\\\">// 如果x实现了比较器接口就返回x的Class对象 不然就返回null</span>\\n<span class=\\\"hljs-keyword\\\">static</span> Class&lt;?&gt; comparableClassFor(Object x) {\\n    <span class=\\\"hljs-comment\\\">//...</span>\\n}\\n</code></pre>\\n<h4 id=\\\"comparecomparables\\\">compareComparables</h4>\\n<pre><code class=\\\"hljs language-java\\\"><span class=\\\"hljs-comment\\\">// 返回两个可比较对象的比较结果</span>\\n<span class=\\\"hljs-meta\\\">@SuppressWarnings({&quot;rawtypes&quot;,&quot;unchecked&quot;})</span> <span class=\\\"hljs-comment\\\">// for cast to Comparable</span>\\n<span class=\\\"hljs-keyword\\\">static</span> <span class=\\\"hljs-type\\\">int</span> <span class=\\\"hljs-title function_\\\">compareComparables</span><span class=\\\"hljs-params\\\">(Class&lt;?&gt; kc, Object k, Object x)</span> {\\n    <span class=\\\"hljs-keyword\\\">return</span> (x == <span class=\\\"hljs-literal\\\">null</span> || x.getClass() != kc ? <span class=\\\"hljs-number\\\">0</span> :\\n            ((Comparable)k).compareTo(x));\\n}\\n</code></pre>\\n<h4 id=\\\"tablesizefor\\\">tableSizeFor</h4>\\n<pre><code class=\\\"hljs language-java\\\"><span class=\\\"hljs-comment\\\">// 无论给什么容量 总是调整为比他大的2的若干次幂大大小 最大不超过MAXIMUM_CAPACITY</span>\\n<span class=\\\"hljs-keyword\\\">static</span> <span class=\\\"hljs-keyword\\\">final</span> <span class=\\\"hljs-type\\\">int</span> <span class=\\\"hljs-title function_\\\">tableSizeFor</span><span class=\\\"hljs-params\\\">(<span class=\\\"hljs-type\\\">int</span> cap)</span> {\\n    <span class=\\\"hljs-type\\\">int</span> <span class=\\\"hljs-variable\\\">n</span> <span class=\\\"hljs-operator\\\">=</span> cap - <span class=\\\"hljs-number\\\">1</span>;\\n    n |= n &gt;&gt;&gt; <span class=\\\"hljs-number\\\">1</span>;\\n    n |= n &gt;&gt;&gt; <span class=\\\"hljs-number\\\">2</span>;\\n    n |= n &gt;&gt;&gt; <span class=\\\"hljs-number\\\">4</span>;\\n    n |= n &gt;&gt;&gt; <span class=\\\"hljs-number\\\">8</span>;\\n    n |= n &gt;&gt;&gt; <span class=\\\"hljs-number\\\">16</span>;\\n    <span class=\\\"hljs-keyword\\\">return</span> (n &lt; <span class=\\\"hljs-number\\\">0</span>) ? <span class=\\\"hljs-number\\\">1</span> : (n &gt;= MAXIMUM_CAPACITY) ? MAXIMUM_CAPACITY : n + <span class=\\\"hljs-number\\\">1</span>;\\n}\\n</code></pre>\\n<h3 id=\\\"成员变量\\\">成员变量</h3>\\n<pre><code class=\\\"hljs language-java\\\"><span class=\\\"hljs-comment\\\">// 表</span>\\n<span class=\\\"hljs-comment\\\">// 以一个Node&lt;K,V&gt;数组来表示一张表的第一层结构 我称这个数组为“主仓”</span>\\n<span class=\\\"hljs-comment\\\">// 刚初始化的时候首先使用的表 在有必要的时候会重新计算容量</span>\\n<span class=\\\"hljs-comment\\\">// 表的长度总是2的任意次幂 （某些情况下也可以是0）</span>\\n<span class=\\\"hljs-keyword\\\">transient</span> Node&lt;K,V&gt;[] table;\\n\\n<span class=\\\"hljs-comment\\\">// 键值对集合</span>\\n<span class=\\\"hljs-comment\\\">// 保存键值对的集合 注意AbstractMap的成员白能力用的是keySet() and values()</span>\\n<span class=\\\"hljs-keyword\\\">transient</span> Set&lt;Map.Entry&lt;K,V&gt;&gt; entrySet;\\n\\n<span class=\\\"hljs-comment\\\">// 载量 这个map中装了多少对键值对</span>\\n<span class=\\\"hljs-keyword\\\">transient</span> <span class=\\\"hljs-type\\\">int</span> size;\\n\\n<span class=\\\"hljs-comment\\\">// 这个map改变结构的次数 可以是HaspMap结构的改变也可以是内部结构的改变</span>\\n<span class=\\\"hljs-comment\\\">// 通常迭代的时候会用这个值做参考</span>\\n<span class=\\\"hljs-keyword\\\">transient</span> <span class=\\\"hljs-type\\\">int</span> modCount;\\n\\n<span class=\\\"hljs-comment\\\">// 下一次容量调整（load_factor * capacity）要达到的的阈值</span>\\n<span class=\\\"hljs-type\\\">int</span> threshold;\\n\\n<span class=\\\"hljs-comment\\\">// 当前哈希表的负载因子</span>\\n<span class=\\\"hljs-keyword\\\">final</span> <span class=\\\"hljs-type\\\">float</span> loadFactor;\\n</code></pre>\\n<h3 id=\\\"构造函数\\\">构造函数</h3>\\n<p>本来不打算分析构造函数的，但是检查文章的时候发现，构造函数也有点东西，构造函数有 4 个，放 map 的那个就忽略了，先看无参的：</p>\\n<h4 id=\\\"无参\\\">无参</h4>\\n<pre><code class=\\\"hljs language-java\\\"><span class=\\\"hljs-comment\\\">/**\\n * Constructs an empty &lt;tt&gt;HashMap&lt;/tt&gt; with the default initial capacity\\n * (16) and the default load factor (0.75).\\n */</span>\\n<span class=\\\"hljs-keyword\\\">public</span> <span class=\\\"hljs-title function_\\\">HashMap</span><span class=\\\"hljs-params\\\">()</span> {\\n    <span class=\\\"hljs-built_in\\\">this</span>.loadFactor = DEFAULT_LOAD_FACTOR; <span class=\\\"hljs-comment\\\">// all other fields defaulted</span>\\n}\\n</code></pre>\\n<p>函数就只指定了一个默认的负载因子，其他的参数会在<code>resize()</code>方法做出，往下看就知道了；</p>\\n<h4 id=\\\"有参-1\\\">有参 1</h4>\\n<pre><code class=\\\"hljs language-java\\\"><span class=\\\"hljs-keyword\\\">public</span> <span class=\\\"hljs-title function_\\\">HashMap</span><span class=\\\"hljs-params\\\">(<span class=\\\"hljs-type\\\">int</span> initialCapacity)</span> {\\n    <span class=\\\"hljs-built_in\\\">this</span>(initialCapacity, DEFAULT_LOAD_FACTOR);\\n}\\n</code></pre>\\n<h4 id=\\\"有参-2\\\">有参 2</h4>\\n<pre><code class=\\\"hljs language-java\\\"><span class=\\\"hljs-keyword\\\">public</span> <span class=\\\"hljs-title function_\\\">HashMap</span><span class=\\\"hljs-params\\\">(<span class=\\\"hljs-type\\\">int</span> initialCapacity, <span class=\\\"hljs-type\\\">float</span> loadFactor)</span> {\\n    <span class=\\\"hljs-keyword\\\">if</span> (initialCapacity &lt; <span class=\\\"hljs-number\\\">0</span>)\\n        <span class=\\\"hljs-keyword\\\">throw</span> <span class=\\\"hljs-keyword\\\">new</span> <span class=\\\"hljs-title class_\\\">IllegalArgumentException</span>(<span class=\\\"hljs-string\\\">&quot;Illegal initial capacity: &quot;</span> +\\n                                           initialCapacity);\\n    <span class=\\\"hljs-keyword\\\">if</span> (initialCapacity &gt; MAXIMUM_CAPACITY)\\n        initialCapacity = MAXIMUM_CAPACITY;\\n    <span class=\\\"hljs-keyword\\\">if</span> (loadFactor &lt;= <span class=\\\"hljs-number\\\">0</span> || Float.isNaN(loadFactor))\\n        <span class=\\\"hljs-keyword\\\">throw</span> <span class=\\\"hljs-keyword\\\">new</span> <span class=\\\"hljs-title class_\\\">IllegalArgumentException</span>(<span class=\\\"hljs-string\\\">&quot;Illegal load factor: &quot;</span> +\\n                                           loadFactor);\\n    <span class=\\\"hljs-built_in\\\">this</span>.loadFactor = loadFactor;\\n    <span class=\\\"hljs-built_in\\\">this</span>.threshold = tableSizeFor(initialCapacity);\\n}\\n</code></pre>\\n<p>这里其他的都不重要，关键看<code>line:11</code>，其实我们指定初始容量并是直接的给表指定长度，而是直接指定阈值大小，因为我指定 1000 容量的容器，肯定是计划好能一次性不扩容地装 1000 个，读后面你会发现，hashmap 你是不会装满的，到了它容量的 75%（默认情况下）它就会扩容，因为它要留一大部分的空间来防止 hash 冲突；</p>\\n<h3 id=\\\"结构剧透！\\\">结构剧透！</h3>\\n<p><img src=\\\"../../../public/img/20180817171145.png\\\" alt=\\\"\\\"></p>\\n<p>我们看到，这就是一张一般的 HashMap 的结构，最上面的一横排是一个<code>Node&lt;K,V&gt;[]</code>也就是成员变量 table，我私称这个 table 为<strong>主仓（main warehouse）。</strong></p>\\n<p>每 hash 到的元素都会首先被放到<strong>主仓</strong>对应下标的位置上去，我私称每个下标对应的位置为一个<strong>仓位（position）</strong>，每一个<strong>箱子（也就是每一个结点）</strong>经过 hash 散列后，如果分到同一个仓位中，将在这个仓位上组织成链表，我私称这个链表为<strong>链箱群（linked bins）</strong>，如果<strong>链箱群</strong>长度达到树化阈值，那么这条<strong>链箱群</strong>就会树化为树结构，我私称这个树结构为<strong>树箱群（tree bins）</strong>。<strong>链箱群</strong>和<strong>树箱群</strong>我统称为<strong>箱群结构（bins structure）</strong></p>\\n<p>所以我们找元素的时候有这么一件事：<strong>hashCode 找仓位，equals 找箱子！</strong></p>\\n<h3 id=\\\"成员方法\\\">成员方法</h3>\\n<h4 id=\\\"get\\\">get</h4>\\n<pre><code class=\\\"hljs language-java\\\"><span class=\\\"hljs-comment\\\">// 多的没什么好说 关键是引出getNode方法</span>\\n<span class=\\\"hljs-keyword\\\">public</span> V <span class=\\\"hljs-title function_\\\">get</span><span class=\\\"hljs-params\\\">(Object key)</span> {\\n    Node&lt;K,V&gt; e;\\n    <span class=\\\"hljs-keyword\\\">return</span> (e = getNode(hash(key), key)) == <span class=\\\"hljs-literal\\\">null</span> ? <span class=\\\"hljs-literal\\\">null</span> : e.value;\\n}\\n</code></pre>\\n<h5 id=\\\"getnode\\\">getNode</h5>\\n<pre><code class=\\\"hljs language-java\\\"><span class=\\\"hljs-keyword\\\">final</span> Node&lt;K,V&gt; <span class=\\\"hljs-title function_\\\">getNode</span><span class=\\\"hljs-params\\\">(<span class=\\\"hljs-type\\\">int</span> hash, Object key)</span> {\\n    Node&lt;K,V&gt;[] tab;\\n    Node&lt;K,V&gt; first, e;\\n    <span class=\\\"hljs-type\\\">int</span> n; K k;\\n    <span class=\\\"hljs-keyword\\\">if</span> ((tab = table) != <span class=\\\"hljs-literal\\\">null</span> && (n = tab.length) &gt; <span class=\\\"hljs-number\\\">0</span> &&\\n        (first = tab[(n - <span class=\\\"hljs-number\\\">1</span>) & hash]) != <span class=\\\"hljs-literal\\\">null</span>) {\\n        <span class=\\\"hljs-keyword\\\">if</span> (first.hash == hash && <span class=\\\"hljs-comment\\\">// always check first node</span>\\n            ((k = first.key) == key || (key != <span class=\\\"hljs-literal\\\">null</span> && key.equals(k))))\\n            <span class=\\\"hljs-keyword\\\">return</span> first;\\n        <span class=\\\"hljs-keyword\\\">if</span> ((e = first.next) != <span class=\\\"hljs-literal\\\">null</span>) {\\n            <span class=\\\"hljs-keyword\\\">if</span> (first <span class=\\\"hljs-keyword\\\">instanceof</span> TreeNode)\\n                <span class=\\\"hljs-keyword\\\">return</span> ((TreeNode&lt;K,V&gt;)first).getTreeNode(hash, key);\\n            <span class=\\\"hljs-keyword\\\">do</span> {\\n                <span class=\\\"hljs-keyword\\\">if</span> (e.hash == hash &&\\n                    ((k = e.key) == key || (key != <span class=\\\"hljs-literal\\\">null</span> && key.equals(k))))\\n                    <span class=\\\"hljs-keyword\\\">return</span> e;\\n            } <span class=\\\"hljs-keyword\\\">while</span> ((e = e.next) != <span class=\\\"hljs-literal\\\">null</span>);\\n        }\\n    }\\n    <span class=\\\"hljs-keyword\\\">return</span> <span class=\\\"hljs-literal\\\">null</span>;\\n}\\n</code></pre>\\n<p>这里有 5 个变量，第一个<strong>tab</strong>变量引用 map 的<strong>主仓</strong>；</p>\\n<p>然后<strong>first</strong>根据 hash 去找到的<strong>主仓</strong>上的仓位的第一个<strong>箱子</strong>；</p>\\n<p><strong>e</strong>表示箱群中的某个<strong>箱子</strong>；</p>\\n<p><strong>n</strong>表示<strong>主仓数组的长度</strong>；</p>\\n<p><strong>k</strong>表示当前访问的箱子的 Key 对象；</p>\\n<p>读完代码发现，在一系列严谨的条件过后，首先看第一个箱子的 hash 值和要找到的 key 的 hash 值是否相等，相等则再比较地址以及 equals 方法；</p>\\n<p>如果第一个箱子并不是要找的元素，且当前仓位不只一个箱子而是一个箱群，那么接下来就开始判断<strong>箱群结构</strong>，如果 first 是<strong>树箱</strong>，那么就用<strong>树结构的方法去查找结点</strong>，否则就是<strong>链箱群</strong>，接着就是中规中矩的链遍历，对比步骤和上面一致；</p>\\n<p><strong>无论是树箱子还是链箱子的查找，都是<code>k == key || k.equals(key)</code>这样的比较句式！</strong></p>\\n<p>注意到<code>line:8</code>有一句<code>(n - 1) & hash</code>，这是将 hash 再映射到主仓的下标中，这也就解释了为什么会有<code>first.hash == hash</code>这样的语句，因为即使不同的 hash 也有可能映射到同一个仓位，下文的<code>hash & (n - 1)</code>也是计算仓位的下标，二者没有区别；</p>\\n<p>但是要注意的是，这样计算下标是有要求的，<strong>要求就是表容量必须是 2 的次幂，才能进行这样的运算</strong>，这也是为什么有静态方法<code>tableSizeFor</code>这个方法，比如说你指定初始化容量为 1000，实际创建出来的表容量也是比 1000 大的 2 的次幂数即 1024，我们配合<strong>有参构造方法 1</strong>去解答，当我们最开始使用<strong>有参构造方法 1</strong>的时候，只有<strong>threshold</strong>被赋值为比如说 1000，然后到了<code>resize()</code>方法：</p>\\n<blockquote>\\n<p>oldCap=0；</p>\\n<p>oldThr = threshold = 1024；</p>\\n<p>newCap = oldThr = 1024；</p>\\n<p>newThr = newCap * loadFactor = 1024 * 0.75；</p>\\n</blockquote>\\n<p>所以新容量就是 1024！</p>\\n<h4 id=\\\"containskey\\\">containsKey</h4>\\n<pre><code class=\\\"hljs language-java\\\"><span class=\\\"hljs-keyword\\\">public</span> <span class=\\\"hljs-type\\\">boolean</span> <span class=\\\"hljs-title function_\\\">containsKey</span><span class=\\\"hljs-params\\\">(Object key)</span> {\\n    <span class=\\\"hljs-keyword\\\">return</span> getNode(hash(key), key) != <span class=\\\"hljs-literal\\\">null</span>;\\n}\\n</code></pre>\\n<p>不解释了</p>\\n<h4 id=\\\"put\\\">put</h4>\\n<pre><code class=\\\"hljs language-java\\\"><span class=\\\"hljs-comment\\\">// 引putVal</span>\\n<span class=\\\"hljs-keyword\\\">public</span> V <span class=\\\"hljs-title function_\\\">put</span><span class=\\\"hljs-params\\\">(K key, V value)</span> {\\n    <span class=\\\"hljs-keyword\\\">return</span> putVal(hash(key), key, value, <span class=\\\"hljs-literal\\\">false</span>, <span class=\\\"hljs-literal\\\">true</span>);\\n}\\n</code></pre>\\n<h5 id=\\\"putval\\\">putVal</h5>\\n<pre><code class=\\\"hljs language-java\\\"><span class=\\\"hljs-keyword\\\">final</span> V <span class=\\\"hljs-title function_\\\">putVal</span><span class=\\\"hljs-params\\\">(<span class=\\\"hljs-type\\\">int</span> hash, K key, V value, <span class=\\\"hljs-type\\\">boolean</span> onlyIfAbsent,\\n               <span class=\\\"hljs-type\\\">boolean</span> evict)</span> {\\n    Node&lt;K,V&gt;[] tab;\\n    Node&lt;K,V&gt; p;\\n    <span class=\\\"hljs-type\\\">int</span> n, i;\\n    <span class=\\\"hljs-keyword\\\">if</span> ((tab = table) == <span class=\\\"hljs-literal\\\">null</span> || (n = tab.length) == <span class=\\\"hljs-number\\\">0</span>)\\n        n = (tab = resize()).length;\\n    <span class=\\\"hljs-keyword\\\">if</span> ((p = tab[i = (n - <span class=\\\"hljs-number\\\">1</span>) & hash]) == <span class=\\\"hljs-literal\\\">null</span>)\\n        tab[i] = newNode(hash, key, value, <span class=\\\"hljs-literal\\\">null</span>);\\n    <span class=\\\"hljs-keyword\\\">else</span> {\\n        Node&lt;K,V&gt; e; K k;\\n        <span class=\\\"hljs-keyword\\\">if</span> (p.hash == hash &&\\n            ((k = p.key) == key || (key != <span class=\\\"hljs-literal\\\">null</span> && key.equals(k))))\\n            e = p;\\n        <span class=\\\"hljs-keyword\\\">else</span> <span class=\\\"hljs-keyword\\\">if</span> (p <span class=\\\"hljs-keyword\\\">instanceof</span> TreeNode)\\n            e = ((TreeNode&lt;K,V&gt;)p).putTreeVal(<span class=\\\"hljs-built_in\\\">this</span>, tab, hash, key, value);\\n        <span class=\\\"hljs-keyword\\\">else</span> {\\n            <span class=\\\"hljs-keyword\\\">for</span> (<span class=\\\"hljs-type\\\">int</span> <span class=\\\"hljs-variable\\\">binCount</span> <span class=\\\"hljs-operator\\\">=</span> <span class=\\\"hljs-number\\\">0</span>; ; ++binCount) {\\n                <span class=\\\"hljs-keyword\\\">if</span> ((e = p.next) == <span class=\\\"hljs-literal\\\">null</span>) {\\n                    p.next = newNode(hash, key, value, <span class=\\\"hljs-literal\\\">null</span>);\\n                    <span class=\\\"hljs-keyword\\\">if</span> (binCount &gt;= TREEIFY_THRESHOLD - <span class=\\\"hljs-number\\\">1</span>) <span class=\\\"hljs-comment\\\">// -1 for 1st</span>\\n                        treeifyBin(tab, hash);\\n                    <span class=\\\"hljs-keyword\\\">break</span>;\\n                }\\n                <span class=\\\"hljs-keyword\\\">if</span> (e.hash == hash &&\\n                    ((k = e.key) == key || (key != <span class=\\\"hljs-literal\\\">null</span> && key.equals(k))))\\n                    <span class=\\\"hljs-keyword\\\">break</span>;\\n                p = e;\\n            }\\n        }\\n        <span class=\\\"hljs-keyword\\\">if</span> (e != <span class=\\\"hljs-literal\\\">null</span>) { <span class=\\\"hljs-comment\\\">// existing mapping for key</span>\\n            <span class=\\\"hljs-type\\\">V</span> <span class=\\\"hljs-variable\\\">oldValue</span> <span class=\\\"hljs-operator\\\">=</span> e.value;\\n            <span class=\\\"hljs-keyword\\\">if</span> (!onlyIfAbsent || oldValue == <span class=\\\"hljs-literal\\\">null</span>)\\n                e.value = value;\\n            afterNodeAccess(e);\\n            <span class=\\\"hljs-keyword\\\">return</span> oldValue;\\n        }\\n    }\\n    ++modCount;\\n    <span class=\\\"hljs-keyword\\\">if</span> (++size &gt; threshold)\\n        resize();\\n    afterNodeInsertion(evict);\\n    <span class=\\\"hljs-keyword\\\">return</span> <span class=\\\"hljs-literal\\\">null</span>;\\n}\\n</code></pre>\\n<p>假设我们要存储的 key 和 value 组装成了一个<strong>箱子（node）</strong>，我们的工作是要把这个箱子放在 map 中合适的位置上</p>\\n<ul>\\n<li><strong>tab</strong>代表当前的表，在<code>line:6</code>被赋值，<code>line:7</code>我们看到如果 map 是一个没被初始化过的 map，那么就调用<code>resize()</code>方法初始化一个 map；</li>\\n<li><strong>p</strong>用来预存之前在这个仓位上的第一个箱子，也就是一个结点，在<code>line:8</code>被赋值，同时也做链遍历的<strong>双指针之一</strong>，且如果位置上原本就没有元素的话，就不会进行<code>line:10-38</code>的一系列操作，而是直接在<code>line:9</code>被赋予新的结点；如果原来位置上有元素的话，那么继续进行如下逻辑：<ul>\\n<li>首先有一个<strong>e</strong>，用来存储一个结点，这个 e 有两个作用，一个是用作链遍历的<strong>双指针之一</strong>，另一个就是在链中已经存在一个和要存入的箱子具有相同的<strong>hash 和 key</strong>的箱子的情况下，存储这个已存在的箱子，用于后面判断是否覆盖 value</li>\\n<li>还有一个<strong>k</strong>，用来存储要存入箱子的 key 值；</li>\\n</ul>\\n</li>\\n</ul>\\n<p><code>line:12-16</code>如果 hash（key 的 hash 值）、key 都一样，那 e 就被赋值为 p，这时候也就是该仓位上原来的第一个箱子；如果不一样，那就接着判断 p 是不是树箱子，如果是树箱子，那么就按照树的方式去存放我们要存放的箱子；</p>\\n<p>如果还不是树箱子，意味着这时候这个<strong>仓位</strong>下的箱群结构是<strong>链箱群</strong>，我们执行<code>line:17-30</code>，尝试摸到链尾，把新结点添加到链尾<code>line:20</code>，然后判断链长度，到达树化阈值就将<strong>链箱群</strong>树化为<strong>树箱群</strong><code>line:21-22</code>；</p>\\n<p>如果在摸链尾的过程中发现有 hash 和 key 都一样的，这就意味着<strong>key 冲突（key conflict）</strong>，赋值<strong>e</strong>之后（代表记下这个冲突的位置了），那就可以退出循环了<code>line:25-27</code>；</p>\\n<p><code>line:31-37</code>是对<strong>key 冲突</strong>的情况进行判断，如果变量<strong>onlyIfAbsent</strong>是真，那么就不覆盖原有 key 对应的 value；我们的<code>put</code>方法传的就是 false，也就是默认覆盖 key 相同的 value；</p>\\n<p><strong>需要强调的是：整个方法中，hash 方法和 equals 方法的地位都是无比重要的！</strong></p>\\n<p>后面还注意到有<code>afterNodeAccess</code>和<code>afterNodeInsertion</code>两个方法，这两个方法在<code>HashMap</code>中没有实现，是给<code>LinkedHashMap</code>去实现的，在这里我们不必关心；</p>\\n<p>最后调整主仓，如果主仓 size 大于阈值就执行<code>resize()</code>方法；</p>\\n<h6 id=\\\"resizerehash\\\">resize/rehash</h6>\\n<p>resize 是 HashMap 的扩容方法，而 rehash 指的是扩容后旧表节点重新散列的过程</p>\\n<pre><code class=\\\"hljs language-java\\\"><span class=\\\"hljs-comment\\\">// 这个方法很关键 用于调整主仓的大小</span>\\n<span class=\\\"hljs-comment\\\">// 要么是初始化一个主仓 要么将主仓扩至2倍大</span>\\n<span class=\\\"hljs-comment\\\">// 如果旧主仓是null 那就分配一个和根据阈值做参考的主仓</span>\\n<span class=\\\"hljs-comment\\\">// 否则的话 使用2的次幂值去调整容量 元素要么在原来的位置 要么在新的表中有2的次幂的偏移量</span>\\n<span class=\\\"hljs-keyword\\\">final</span> Node&lt;K,V&gt;[] resize() {\\n    Node&lt;K,V&gt;[] oldTab = table;\\n    <span class=\\\"hljs-type\\\">int</span> <span class=\\\"hljs-variable\\\">oldCap</span> <span class=\\\"hljs-operator\\\">=</span> (oldTab == <span class=\\\"hljs-literal\\\">null</span>) ? <span class=\\\"hljs-number\\\">0</span> : oldTab.length;\\n    <span class=\\\"hljs-type\\\">int</span> <span class=\\\"hljs-variable\\\">oldThr</span> <span class=\\\"hljs-operator\\\">=</span> threshold;\\n    <span class=\\\"hljs-type\\\">int</span> newCap, newThr = <span class=\\\"hljs-number\\\">0</span>;\\n    <span class=\\\"hljs-keyword\\\">if</span> (oldCap &gt; <span class=\\\"hljs-number\\\">0</span>) {\\n        <span class=\\\"hljs-keyword\\\">if</span> (oldCap &gt;= MAXIMUM_CAPACITY) {\\n            threshold = Integer.MAX_VALUE;\\n            <span class=\\\"hljs-keyword\\\">return</span> oldTab;\\n        }\\n        <span class=\\\"hljs-keyword\\\">else</span> <span class=\\\"hljs-keyword\\\">if</span> ((newCap = oldCap &lt;&lt; <span class=\\\"hljs-number\\\">1</span>) &lt; MAXIMUM_CAPACITY &&\\n                 oldCap &gt;= DEFAULT_INITIAL_CAPACITY)\\n            newThr = oldThr &lt;&lt; <span class=\\\"hljs-number\\\">1</span>; <span class=\\\"hljs-comment\\\">// double threshold</span>\\n    }\\n    <span class=\\\"hljs-keyword\\\">else</span> <span class=\\\"hljs-keyword\\\">if</span> (oldThr &gt; <span class=\\\"hljs-number\\\">0</span>) <span class=\\\"hljs-comment\\\">// initial capacity was placed in threshold</span>\\n        newCap = oldThr;\\n    <span class=\\\"hljs-keyword\\\">else</span> {               <span class=\\\"hljs-comment\\\">// zero initial threshold signifies using defaults</span>\\n        newCap = DEFAULT_INITIAL_CAPACITY;\\n        newThr = (<span class=\\\"hljs-type\\\">int</span>)(DEFAULT_LOAD_FACTOR * DEFAULT_INITIAL_CAPACITY);\\n    }\\n    <span class=\\\"hljs-keyword\\\">if</span> (newThr == <span class=\\\"hljs-number\\\">0</span>) {\\n        <span class=\\\"hljs-type\\\">float</span> <span class=\\\"hljs-variable\\\">ft</span> <span class=\\\"hljs-operator\\\">=</span> (<span class=\\\"hljs-type\\\">float</span>)newCap * loadFactor;\\n        newThr = (newCap &lt; MAXIMUM_CAPACITY && ft &lt; (<span class=\\\"hljs-type\\\">float</span>)MAXIMUM_CAPACITY ?\\n                  (<span class=\\\"hljs-type\\\">int</span>)ft : Integer.MAX_VALUE);\\n    }\\n    threshold = newThr;\\n    <span class=\\\"hljs-meta\\\">@SuppressWarnings({&quot;rawtypes&quot;,&quot;unchecked&quot;})</span>\\n        Node&lt;K,V&gt;[] newTab = (Node&lt;K,V&gt;[])<span class=\\\"hljs-keyword\\\">new</span> <span class=\\\"hljs-title class_\\\">Node</span>[newCap];\\n    table = newTab;\\n    <span class=\\\"hljs-keyword\\\">if</span> (oldTab != <span class=\\\"hljs-literal\\\">null</span>) {\\n        <span class=\\\"hljs-keyword\\\">for</span> (<span class=\\\"hljs-type\\\">int</span> <span class=\\\"hljs-variable\\\">j</span> <span class=\\\"hljs-operator\\\">=</span> <span class=\\\"hljs-number\\\">0</span>; j &lt; oldCap; ++j) {\\n            Node&lt;K,V&gt; e;\\n            <span class=\\\"hljs-keyword\\\">if</span> ((e = oldTab[j]) != <span class=\\\"hljs-literal\\\">null</span>) {\\n                oldTab[j] = <span class=\\\"hljs-literal\\\">null</span>;\\n                <span class=\\\"hljs-keyword\\\">if</span> (e.next == <span class=\\\"hljs-literal\\\">null</span>)\\n                    newTab[e.hash & (newCap - <span class=\\\"hljs-number\\\">1</span>)] = e;\\n                <span class=\\\"hljs-keyword\\\">else</span> <span class=\\\"hljs-keyword\\\">if</span> (e <span class=\\\"hljs-keyword\\\">instanceof</span> TreeNode)\\n                    ((TreeNode&lt;K,V&gt;)e).split(<span class=\\\"hljs-built_in\\\">this</span>, newTab, j, oldCap);\\n                <span class=\\\"hljs-keyword\\\">else</span> { <span class=\\\"hljs-comment\\\">// preserve order</span>\\n                    Node&lt;K,V&gt; loHead = <span class=\\\"hljs-literal\\\">null</span>, loTail = <span class=\\\"hljs-literal\\\">null</span>;\\n                    Node&lt;K,V&gt; hiHead = <span class=\\\"hljs-literal\\\">null</span>, hiTail = <span class=\\\"hljs-literal\\\">null</span>;\\n                    Node&lt;K,V&gt; next;\\n                    <span class=\\\"hljs-keyword\\\">do</span> {\\n                        next = e.next;\\n                        <span class=\\\"hljs-keyword\\\">if</span> ((e.hash & oldCap) == <span class=\\\"hljs-number\\\">0</span>) {\\n                            <span class=\\\"hljs-keyword\\\">if</span> (loTail == <span class=\\\"hljs-literal\\\">null</span>)\\n                                loHead = e;\\n                            <span class=\\\"hljs-keyword\\\">else</span>\\n                                loTail.next = e;\\n                            loTail = e;\\n                        }\\n                        <span class=\\\"hljs-keyword\\\">else</span> {\\n                            <span class=\\\"hljs-keyword\\\">if</span> (hiTail == <span class=\\\"hljs-literal\\\">null</span>)\\n                                hiHead = e;\\n                            <span class=\\\"hljs-keyword\\\">else</span>\\n                                hiTail.next = e;\\n                            hiTail = e;\\n                        }\\n                    } <span class=\\\"hljs-keyword\\\">while</span> ((e = next) != <span class=\\\"hljs-literal\\\">null</span>);\\n                    <span class=\\\"hljs-keyword\\\">if</span> (loTail != <span class=\\\"hljs-literal\\\">null</span>) {\\n                        loTail.next = <span class=\\\"hljs-literal\\\">null</span>;\\n                        newTab[j] = loHead;\\n                    }\\n                    <span class=\\\"hljs-keyword\\\">if</span> (hiTail != <span class=\\\"hljs-literal\\\">null</span>) {\\n                        hiTail.next = <span class=\\\"hljs-literal\\\">null</span>;\\n                        newTab[j + oldCap] = hiHead;\\n                    }\\n                }\\n            }\\n        }\\n    }\\n    <span class=\\\"hljs-keyword\\\">return</span> newTab;\\n}\\n</code></pre>\\n<ol>\\n<li><code>line:9-29</code>：这一阶段主要是确定新的阈值和新的容量，要么是原来的两倍，要么最大也大不过 Integer 的最大值</li>\\n<li><code>line:33</code>：之后的代码主要就是元素的搬运工作了，值得注意的是这里面有<code>TreeNode</code>对象调用的<code>split</code>方法，可能会调整一些箱子的位置（并不是调整箱子所在的仓位）比如<strong>逆树化一个树箱群</strong>，这个待会就分析</li>\\n</ol>\\n<h6 id=\\\"树箱子大名鼎鼎的红黑树\\\">树箱子——大名鼎鼎的红黑树</h6>\\n<p>这方法里面的一些树操作细节，得先了解清楚<strong>树箱子</strong>的结构，才好继续分析，所以这里先插播一下，了解一下<strong>树箱子</strong>的结构</p>\\n<pre><code class=\\\"hljs language-java\\\"><span class=\\\"hljs-keyword\\\">static</span> <span class=\\\"hljs-keyword\\\">final</span> <span class=\\\"hljs-keyword\\\">class</span> <span class=\\\"hljs-title class_\\\">TreeNode</span>&lt;K,V&gt; <span class=\\\"hljs-keyword\\\">extends</span> <span class=\\\"hljs-title class_\\\">LinkedHashMap</span>.Entry&lt;K,V&gt; {\\n    TreeNode&lt;K,V&gt; parent;  <span class=\\\"hljs-comment\\\">// red-black tree links</span>\\n    TreeNode&lt;K,V&gt; left;\\n    TreeNode&lt;K,V&gt; right;\\n    TreeNode&lt;K,V&gt; prev;    <span class=\\\"hljs-comment\\\">// needed to unlink next upon deletion</span>\\n    <span class=\\\"hljs-type\\\">boolean</span> red;\\n    <span class=\\\"hljs-comment\\\">// ...</span>\\n}\\n<span class=\\\"hljs-comment\\\">// 这个是LinkedHashMap.Entry&lt;K,V&gt; 结构也挺简单</span>\\n<span class=\\\"hljs-keyword\\\">static</span> <span class=\\\"hljs-keyword\\\">class</span> <span class=\\\"hljs-title class_\\\">Entry</span>&lt;K,V&gt; <span class=\\\"hljs-keyword\\\">extends</span> <span class=\\\"hljs-title class_\\\">HashMap</span>.Node&lt;K,V&gt; {\\n    Entry&lt;K,V&gt; before, after;\\n    Entry(<span class=\\\"hljs-type\\\">int</span> hash, K key, V value, Node&lt;K,V&gt; next) {\\n        <span class=\\\"hljs-built_in\\\">super</span>(hash, key, value, next);\\n    }\\n}\\n</code></pre>\\n<p>这里虽然说继承关系稍微复杂了点，但是单纯从数据结构的角度去理解还是挺简单的：</p>\\n<p><code>HashMap</code>的<strong>主仓</strong>是一个 Node 数组，<code>HashMap.Entry</code>，仅仅用于存放键值对；</p>\\n<p>而<code>LinkedHashMap</code>的<strong>主仓</strong>之间的<strong>仓位</strong>是以链的形式组织的，<code>LinkedHashMap.Entry&lt;K,V&gt;</code>除了键值对还要存放前一个仓位（before）以及后一个仓位（after）</p>\\n<p>再说回<code>TreeNode&lt;K,V&gt;</code>，可以看到，这是一个 3+1 指针的结点，3 分别指向：<strong>父结点（parent）、左孩子结点（left）、右孩子结点（right）</strong>，1 指的是<strong>前指针（prev）</strong>，用于删除结点的时候，做辅助指针用，前指针不一定是父节点；再加上间接继承自<code>HashMap.Node&lt;K,V&gt;</code> ，<strong>那么就还有一个 next 指针！</strong></p>\\n<p>如果没分析错的话，<strong>树箱子</strong>的结构就应该是：</p>\\n<p><img src=\\\"../../../public/img/20180818150455.png\\\" alt=\\\"\\\"></p>\\n<p>这里应该还有<strong>before</strong>和<strong>after</strong>，但是和 HashMap 无关，就忽略了，我认为这里是不想重新实现某些已有方法</p>\\n<h6 id=\\\"split\\\">split</h6>\\n<p>之前在说<strong>resize/rehash</strong>的时候，就有看到，在重新散列节点的时候，也就是旧节点从旧表搬运到新表的时候，如果该节点是一个树节点，那么它会直接调用 split 方法：</p>\\n<pre><code class=\\\"hljs language-java\\\"><span class=\\\"hljs-keyword\\\">final</span> <span class=\\\"hljs-keyword\\\">void</span> <span class=\\\"hljs-title function_\\\">split</span><span class=\\\"hljs-params\\\">(HashMap&lt;K,V&gt; map, Node&lt;K,V&gt;[] tab, <span class=\\\"hljs-type\\\">int</span> index, <span class=\\\"hljs-type\\\">int</span> bit)</span> {\\n    TreeNode&lt;K,V&gt; b = <span class=\\\"hljs-built_in\\\">this</span>;\\n    <span class=\\\"hljs-comment\\\">// Relink into lo and hi lists, preserving order</span>\\n    TreeNode&lt;K,V&gt; loHead = <span class=\\\"hljs-literal\\\">null</span>, loTail = <span class=\\\"hljs-literal\\\">null</span>;\\n    TreeNode&lt;K,V&gt; hiHead = <span class=\\\"hljs-literal\\\">null</span>, hiTail = <span class=\\\"hljs-literal\\\">null</span>;\\n    <span class=\\\"hljs-type\\\">int</span> <span class=\\\"hljs-variable\\\">lc</span> <span class=\\\"hljs-operator\\\">=</span> <span class=\\\"hljs-number\\\">0</span>, hc = <span class=\\\"hljs-number\\\">0</span>;\\n    <span class=\\\"hljs-keyword\\\">for</span> (TreeNode&lt;K,V&gt; e = b, next; e != <span class=\\\"hljs-literal\\\">null</span>; e = next) {\\n        next = (TreeNode&lt;K,V&gt;)e.next;\\n        e.next = <span class=\\\"hljs-literal\\\">null</span>;\\n        <span class=\\\"hljs-keyword\\\">if</span> ((e.hash & bit) == <span class=\\\"hljs-number\\\">0</span>) {\\n            <span class=\\\"hljs-keyword\\\">if</span> ((e.prev = loTail) == <span class=\\\"hljs-literal\\\">null</span>)\\n                loHead = e;\\n            <span class=\\\"hljs-keyword\\\">else</span>\\n                loTail.next = e;\\n            loTail = e;\\n            ++lc;\\n        }\\n        <span class=\\\"hljs-keyword\\\">else</span> {\\n            <span class=\\\"hljs-keyword\\\">if</span> ((e.prev = hiTail) == <span class=\\\"hljs-literal\\\">null</span>)\\n                hiHead = e;\\n            <span class=\\\"hljs-keyword\\\">else</span>\\n                hiTail.next = e;\\n            hiTail = e;\\n            ++hc;\\n        }\\n    }\\n\\n    <span class=\\\"hljs-keyword\\\">if</span> (loHead != <span class=\\\"hljs-literal\\\">null</span>) {\\n        <span class=\\\"hljs-keyword\\\">if</span> (lc &lt;= UNTREEIFY_THRESHOLD)\\n            tab[index] = loHead.untreeify(map);\\n        <span class=\\\"hljs-keyword\\\">else</span> {\\n            tab[index] = loHead;\\n            <span class=\\\"hljs-keyword\\\">if</span> (hiHead != <span class=\\\"hljs-literal\\\">null</span>) <span class=\\\"hljs-comment\\\">// (else is already treeified)</span>\\n                loHead.treeify(tab);\\n        }\\n    }\\n    <span class=\\\"hljs-keyword\\\">if</span> (hiHead != <span class=\\\"hljs-literal\\\">null</span>) {\\n        <span class=\\\"hljs-keyword\\\">if</span> (hc &lt;= UNTREEIFY_THRESHOLD)\\n            tab[index + bit] = hiHead.untreeify(map);\\n        <span class=\\\"hljs-keyword\\\">else</span> {\\n            tab[index + bit] = hiHead;\\n            <span class=\\\"hljs-keyword\\\">if</span> (loHead != <span class=\\\"hljs-literal\\\">null</span>)\\n                hiHead.treeify(tab);\\n        }\\n    }\\n}\\n</code></pre>\\n<p>可以看到，该方法在保证结点顺序的情况下，将旧节点上的一颗树分为矮树和高树，划分的依据是<code>e.hash & bit</code>，划分完之后，矮树保留在旧节点的原位，而高数则分配到原下标加上一个 offset 为旧表的长度的下标位置</p>\\n<h6 id=\\\"treeifybin\\\">treeifyBin</h6>\\n<p>不管怎么说，我们还是开始分析树化方法：</p>\\n<pre><code class=\\\"hljs language-java\\\"><span class=\\\"hljs-comment\\\">// 树化这个hash仓位上的箱群</span>\\n<span class=\\\"hljs-keyword\\\">final</span> <span class=\\\"hljs-keyword\\\">void</span> <span class=\\\"hljs-title function_\\\">treeifyBin</span><span class=\\\"hljs-params\\\">(Node&lt;K,V&gt;[] tab, <span class=\\\"hljs-type\\\">int</span> hash)</span> {\\n    <span class=\\\"hljs-type\\\">int</span> n, index; Node&lt;K,V&gt; e;\\n    <span class=\\\"hljs-keyword\\\">if</span> (tab == <span class=\\\"hljs-literal\\\">null</span> || (n = tab.length) &lt; MIN_TREEIFY_CAPACITY)\\n        resize();\\n    <span class=\\\"hljs-keyword\\\">else</span> <span class=\\\"hljs-keyword\\\">if</span> ((e = tab[index = (n - <span class=\\\"hljs-number\\\">1</span>) & hash]) != <span class=\\\"hljs-literal\\\">null</span>) {\\n        TreeNode&lt;K,V&gt; hd = <span class=\\\"hljs-literal\\\">null</span>, tl = <span class=\\\"hljs-literal\\\">null</span>;\\n        <span class=\\\"hljs-keyword\\\">do</span> {\\n            TreeNode&lt;K,V&gt; p = replacementTreeNode(e, <span class=\\\"hljs-literal\\\">null</span>);\\n            <span class=\\\"hljs-keyword\\\">if</span> (tl == <span class=\\\"hljs-literal\\\">null</span>)\\n                hd = p;\\n            <span class=\\\"hljs-keyword\\\">else</span> {\\n                p.prev = tl;\\n                tl.next = p;\\n            }\\n            tl = p;\\n        } <span class=\\\"hljs-keyword\\\">while</span> ((e = e.next) != <span class=\\\"hljs-literal\\\">null</span>);\\n        <span class=\\\"hljs-keyword\\\">if</span> ((tab[index] = hd) != <span class=\\\"hljs-literal\\\">null</span>)\\n            hd.treeify(tab);\\n    }\\n}\\n</code></pre>\\n<p>直接开始分析<code>line:6-17</code>，这里有许多指针需要一一分析，整体的操作就是对这条链进行遍历，同时将普通箱子变成树箱（树化）：</p>\\n<ul>\\n<li><strong>e</strong>代表当前遍历到的普通箱子；</li>\\n<li><strong>hd</strong>代表当前链箱的第一个箱子，head 箱子，始终指向箱群的第一个箱子；</li>\\n<li><strong>tl</strong>代表转换为树箱群之后中的某一个树箱；</li>\\n<li><strong>p</strong>代表将<strong>e</strong>箱子树化之后得到的数箱子；</li>\\n</ul>\\n<p>其实观察两轮<code>do{}</code>操作之后，就比较清晰了，只关心树箱子中的<strong>prev</strong>和<strong>next</strong>指针的话，这顿操作就只是把原来的单项链表 copy 为一个双向链表，结点之间有<strong>prev</strong>和<strong>next</strong>的关系，原来只有<strong>next</strong>，然后每个<code>Node</code>换成了<code>TreeNode</code>而已；</p>\\n<p>然后拿着<strong>hd</strong>和<strong>tab</strong>，调用<code>treeify</code>方法，将这条链变成树，由于树化是选择<strong>红黑树</strong>去做，所以<strong>tab</strong>这个仓位的第一个树箱子不一定是<strong>hd</strong>原来指的那个箱子；关于这个方法，就不继续往下分析了，涉及到很多红黑树的知识，但是：<strong>正是因为红黑树的原因，红黑树的查找、插入、删除的时间复杂度最坏为 O(log n)！</strong></p>\\n<blockquote>\\n<p><em>参考：</em></p>\\n<ul>\\n<li><a href=\\\"http://www.cnblogs.com/skywang12345/p/3245399.html\\\">http://www.cnblogs.com/skywang12345/p/3245399.html</a></li>\\n<li><a href=\\\"https://blog.csdn.net/v_JULY_v/article/details/6105630\\\">https://blog.csdn.net/v_JULY_v/article/details/6105630</a></li>\\n</ul>\\n</blockquote>\\n<p>这里要特别留心！<strong>树化过后的箱群，还保有原来的链箱群的 prev 和 next 的关系！为了方便直接在 prev 和 next 的关系上直接进行逆树化！</strong></p>\\n<h4 id=\\\"remove\\\">remove</h4>\\n<p>同理引出 removeNode</p>\\n<pre><code class=\\\"hljs language-java\\\"><span class=\\\"hljs-keyword\\\">public</span> V <span class=\\\"hljs-title function_\\\">remove</span><span class=\\\"hljs-params\\\">(Object key)</span> {\\n    Node&lt;K,V&gt; e;\\n    <span class=\\\"hljs-keyword\\\">return</span> (e = removeNode(hash(key), key, <span class=\\\"hljs-literal\\\">null</span>, <span class=\\\"hljs-literal\\\">false</span>, <span class=\\\"hljs-literal\\\">true</span>)) == <span class=\\\"hljs-literal\\\">null</span> ?\\n        <span class=\\\"hljs-literal\\\">null</span> : e.value;\\n}\\n</code></pre>\\n<h5 id=\\\"removenode\\\">removeNode</h5>\\n<pre><code class=\\\"hljs language-java\\\"><span class=\\\"hljs-keyword\\\">final</span> Node&lt;K,V&gt; <span class=\\\"hljs-title function_\\\">removeNode</span><span class=\\\"hljs-params\\\">(<span class=\\\"hljs-type\\\">int</span> hash, Object key, Object value,\\n                           <span class=\\\"hljs-type\\\">boolean</span> matchValue, <span class=\\\"hljs-type\\\">boolean</span> movable)</span> {\\n    Node&lt;K,V&gt;[] tab; Node&lt;K,V&gt; p; <span class=\\\"hljs-type\\\">int</span> n, index;\\n    <span class=\\\"hljs-keyword\\\">if</span> ((tab = table) != <span class=\\\"hljs-literal\\\">null</span> && (n = tab.length) &gt; <span class=\\\"hljs-number\\\">0</span> &&\\n        (p = tab[index = (n - <span class=\\\"hljs-number\\\">1</span>) & hash]) != <span class=\\\"hljs-literal\\\">null</span>) {\\n        Node&lt;K,V&gt; node = <span class=\\\"hljs-literal\\\">null</span>, e; K k; V v;\\n        <span class=\\\"hljs-keyword\\\">if</span> (p.hash == hash &&\\n            ((k = p.key) == key || (key != <span class=\\\"hljs-literal\\\">null</span> && key.equals(k))))\\n            node = p;\\n        <span class=\\\"hljs-keyword\\\">else</span> <span class=\\\"hljs-keyword\\\">if</span> ((e = p.next) != <span class=\\\"hljs-literal\\\">null</span>) {\\n            <span class=\\\"hljs-keyword\\\">if</span> (p <span class=\\\"hljs-keyword\\\">instanceof</span> TreeNode)\\n                node = ((TreeNode&lt;K,V&gt;)p).getTreeNode(hash, key);\\n            <span class=\\\"hljs-keyword\\\">else</span> {\\n                <span class=\\\"hljs-keyword\\\">do</span> {\\n                    <span class=\\\"hljs-keyword\\\">if</span> (e.hash == hash &&\\n                        ((k = e.key) == key ||\\n                         (key != <span class=\\\"hljs-literal\\\">null</span> && key.equals(k)))) {\\n                        node = e;\\n                        <span class=\\\"hljs-keyword\\\">break</span>;\\n                    }\\n                    p = e;\\n                } <span class=\\\"hljs-keyword\\\">while</span> ((e = e.next) != <span class=\\\"hljs-literal\\\">null</span>);\\n            }\\n        }\\n        <span class=\\\"hljs-keyword\\\">if</span> (node != <span class=\\\"hljs-literal\\\">null</span> && (!matchValue || (v = node.value) == value ||\\n                             (value != <span class=\\\"hljs-literal\\\">null</span> && value.equals(v)))) {\\n            <span class=\\\"hljs-keyword\\\">if</span> (node <span class=\\\"hljs-keyword\\\">instanceof</span> TreeNode)\\n                ((TreeNode&lt;K,V&gt;)node).removeTreeNode(<span class=\\\"hljs-built_in\\\">this</span>, tab, movable);\\n            <span class=\\\"hljs-keyword\\\">else</span> <span class=\\\"hljs-keyword\\\">if</span> (node == p)\\n                tab[index] = node.next;\\n            <span class=\\\"hljs-keyword\\\">else</span>\\n                p.next = node.next;\\n            ++modCount;\\n            --size;\\n            afterNodeRemoval(node);\\n            <span class=\\\"hljs-keyword\\\">return</span> node;\\n        }\\n    }\\n    <span class=\\\"hljs-keyword\\\">return</span> <span class=\\\"hljs-literal\\\">null</span>;\\n}\\n</code></pre>\\n<p>经过 get 和 put 的洗礼之后，再看其他的单元素基础操作就比较流畅了，概括一下<code>removeNode</code>到底发生了什么：</p>\\n<p>观察<strong>node</strong>这一个变量就好了，它代表在表中是否找到你想要删除的那个箱子，如果找到就赋值为这个箱子，否则就为空</p>\\n<ol>\\n<li>首先秒找到仓位（hash 映射到数组下标），然后判断仓位上第一个箱子是否是要找的，是就赋值给<strong>node</strong></li>\\n<li>如果仓位第一个箱子不是要删除的，那么就继续，如果是树箱子就调用树结构的查找箱子的方法，链箱子就往链尾摸，找到就算</li>\\n<li>如果找到这么一个<strong>node</strong>，并且这个<strong>node</strong>箱子是树箱子，那么就按照红黑树的删除结点规则去删除，否则就简单的链式删除</li>\\n</ol>\\n<p>值得注意的是，<code>line:28</code>的<code>removeTreeNode</code>方法会导致：<strong>逆树化</strong>，也就是说树箱群已经小于逆树化的阈值了，这时候就要让<strong>树箱群</strong>逆树化为<strong>链箱群</strong></p>\\n<p>至于逆树化也非常简单，因为树化的时候还保留<strong>prev</strong>和<strong>next</strong>关系，所以直接顺着<strong>next</strong>去替换结点结构就行了</p>\\n<h3 id=\\\"总结\\\">总结</h3>\\n<p>主要也是好好了解了一下<code>HashMap</code>在存储结构上的特点，再细致的性能方面的分析，目前还没精力研究，其他方法比如<code>containsValue(Object value)</code>、<code>remove(Object key, Object value)</code>、<code>replace(K key, V oldValue, V newValue)</code>，处理思路都大同小异</p>\\n<p>本篇关键分析了如下几点：</p>\\n<ul>\\n<li>HashMap 的存储条件</li>\\n<li>主仓是什么？链箱子是什么？树箱子是什么？到底是什么结构？</li>\\n<li>什么时候树化？树化分几步？什么时候逆树化？</li>\\n<li>扩容阈值、树化阈值是什么？分别有什么用？负载因子又是什么？</li>\\n</ul>\\n<p><strong>HashMap 的存储条件：</strong> <strong>KEY</strong>需要实现<code>hashcode</code>和<code>equals</code>方法，前者用来找仓位，后者用来判断是否键冲突！<code>hashcode</code>冲突意味着存储位置的冲突，这对容器的使用者是透明的，使用者不必关心，而<code>equals</code>冲突意味着容器使用者试图替换掉他规定的键上的值！</p>\\n<p><strong>主仓：</strong>就是容器的主干，也就是 Node 数组，主仓上的每一个位置是仓位，注释中多次以 bucket（桶）去描述这个概念；</p>\\n<p><strong>链箱子：</strong>就是一般的链式结点，每个仓位上一开始放的就是链箱子；</p>\\n<p><strong>树箱子：</strong>就是红黑树的一个结点，当这个仓位存放超过 8 个链箱子的时候，这个<strong>链箱群</strong>就会转变为<strong>树箱群</strong>，树箱群中每一个箱子都是红黑树结点；</p>\\n<p><strong>树化时机：</strong>有一个静态变量——**树化阈值<code>TREEIFY_THRESHOLD</code>**做参考，值为 8，时机如上；</p>\\n<p><strong>树化步骤：</strong>将链箱群中的链箱结点替换为树箱结点，这时候还是一条链式结构，然后将这个链式结构转换为一个树结构<code>treeify</code>方法；</p>\\n<p><strong>逆树化：</strong>当树箱群箱子数少于<code>UNTREEIFY_THRESHOLD</code>，也就是 6 的时候，就会逆树化；</p>\\n<p><strong>扩容阈值（threshold）：</strong>这个值默认是容量的 0.75 倍，最好也是容量的 0.75 倍，当容器载量超过这个值的时候，比如 1024 的 0.75，容器就需要<code>resize()</code>扩容两倍；</p>\\n<p><strong>负载因子（load factor）：</strong>默认是 0.75，它表示 HashMap 能在当前容量高效工作的最大载量和容量值比，载量和容量之比如果达到负载因子，那么就需要扩容</p>\\n<h3 id=\\\"源码分析好文索引\\\">源码分析好文索引</h3>\\n<ul>\\n<li>JDK1.7HashMap 分析：<a href=\\\"https://www.cnblogs.com/xrq730/p/5030920.html\\\">https://www.cnblogs.com/xrq730/p/5030920.html</a></li>\\n<li>JDK1.8HashMap 分析：<a href=\\\"http://www.importnew.com/20386.html\\\">http://www.importnew.com/20386.html</a></li>\\n</ul>\\n\";","export default \"<p>本篇主要介绍一个用于字符串前后缀快速搜索的数据结构——前缀树，这篇也是在 Leetcode 里的一个数据结构<a href=\\\"https://leetcode-cn.com/explore/learn/card/trie/\\\">专题</a>，专题里已经把前缀树的实现方式以及实际应用都介绍了一下，这里稍微整理一下这个专题</p>\\n<p>关于前缀树的概念，可以参考：<a href=\\\"https://leetcode-cn.com/explore/learn/card/trie/165/introduction-to-trie/641/\\\">什么是前缀树？</a></p>\\n<p>关于前缀树的表示，可以参考：<a href=\\\"https://leetcode-cn.com/explore/learn/card/trie/165/introduction-to-trie/642/\\\">如何表示一个前缀树？</a></p>\\n<p>我们一般使用数组的方式去表示前缀树，虽然它会多占用一些空间，但是在查找的执行效率上，要比 HashMap 快上不少</p>\\n<h3 id=\\\"数组实现\\\">数组实现</h3>\\n<p>我们假定场景单词只有 26 个小写字母：</p>\\n<pre><code class=\\\"hljs language-java\\\"><span class=\\\"hljs-keyword\\\">class</span> <span class=\\\"hljs-title class_\\\">Trie</span> {\\n    <span class=\\\"hljs-keyword\\\">private</span> <span class=\\\"hljs-type\\\">boolean</span> <span class=\\\"hljs-variable\\\">isEnd</span>   <span class=\\\"hljs-operator\\\">=</span> <span class=\\\"hljs-literal\\\">false</span>;\\n    <span class=\\\"hljs-keyword\\\">private</span> Trie[] children = <span class=\\\"hljs-keyword\\\">new</span> <span class=\\\"hljs-title class_\\\">Trie</span>[<span class=\\\"hljs-number\\\">26</span>];\\n    <span class=\\\"hljs-keyword\\\">public</span> <span class=\\\"hljs-title function_\\\">Trie</span><span class=\\\"hljs-params\\\">()</span> {}\\n\\n    <span class=\\\"hljs-comment\\\">// 录入单词</span>\\n    <span class=\\\"hljs-keyword\\\">public</span> <span class=\\\"hljs-keyword\\\">void</span> <span class=\\\"hljs-title function_\\\">insert</span><span class=\\\"hljs-params\\\">(String word)</span> {\\n        <span class=\\\"hljs-type\\\">Trie</span> <span class=\\\"hljs-variable\\\">cur</span> <span class=\\\"hljs-operator\\\">=</span> <span class=\\\"hljs-built_in\\\">this</span>;\\n        <span class=\\\"hljs-keyword\\\">for</span> (<span class=\\\"hljs-type\\\">char</span> c: word.toCharArray()) {\\n            <span class=\\\"hljs-type\\\">int</span> <span class=\\\"hljs-variable\\\">cn</span> <span class=\\\"hljs-operator\\\">=</span> c - <span class=\\\"hljs-string\\\">&#x27;a&#x27;</span>;\\n            <span class=\\\"hljs-keyword\\\">if</span> (cur.children[cn] == <span class=\\\"hljs-literal\\\">null</span>) {\\n                cur.children[cn] = <span class=\\\"hljs-keyword\\\">new</span> <span class=\\\"hljs-title class_\\\">Trie</span>();\\n            }\\n            cur = cur.children[cn];\\n        }\\n        cur.isEnd = <span class=\\\"hljs-literal\\\">true</span>;\\n    }\\n\\n    <span class=\\\"hljs-comment\\\">// 是否存在某个单词</span>\\n    <span class=\\\"hljs-keyword\\\">public</span> <span class=\\\"hljs-type\\\">boolean</span> <span class=\\\"hljs-title function_\\\">search</span><span class=\\\"hljs-params\\\">(String word)</span> {\\n        <span class=\\\"hljs-type\\\">Trie</span> <span class=\\\"hljs-variable\\\">cur</span> <span class=\\\"hljs-operator\\\">=</span> <span class=\\\"hljs-built_in\\\">this</span>;\\n        <span class=\\\"hljs-keyword\\\">for</span> (<span class=\\\"hljs-type\\\">char</span> c: word.toCharArray()) {\\n            <span class=\\\"hljs-type\\\">int</span> <span class=\\\"hljs-variable\\\">cn</span> <span class=\\\"hljs-operator\\\">=</span> c - <span class=\\\"hljs-string\\\">&#x27;a&#x27;</span>;\\n            <span class=\\\"hljs-keyword\\\">if</span> (cur.children[cn] == <span class=\\\"hljs-literal\\\">null</span>) {\\n                <span class=\\\"hljs-keyword\\\">return</span> <span class=\\\"hljs-literal\\\">false</span>;\\n            }\\n            cur = cur.children[cn];\\n        }\\n        <span class=\\\"hljs-keyword\\\">return</span> cur.isEnd;\\n    }\\n\\n    <span class=\\\"hljs-comment\\\">// 是否存在某个前缀</span>\\n    <span class=\\\"hljs-keyword\\\">public</span> <span class=\\\"hljs-type\\\">boolean</span> <span class=\\\"hljs-title function_\\\">startsWith</span><span class=\\\"hljs-params\\\">(String prefix)</span> {\\n        <span class=\\\"hljs-type\\\">Trie</span> <span class=\\\"hljs-variable\\\">cur</span> <span class=\\\"hljs-operator\\\">=</span> <span class=\\\"hljs-built_in\\\">this</span>;\\n        <span class=\\\"hljs-keyword\\\">for</span> (<span class=\\\"hljs-type\\\">char</span> c: prefix.toCharArray()) {\\n            <span class=\\\"hljs-type\\\">int</span> <span class=\\\"hljs-variable\\\">cn</span> <span class=\\\"hljs-operator\\\">=</span> c - <span class=\\\"hljs-string\\\">&#x27;a&#x27;</span>;\\n            <span class=\\\"hljs-keyword\\\">if</span> (cur.children[cn] == <span class=\\\"hljs-literal\\\">null</span>) {\\n                <span class=\\\"hljs-keyword\\\">return</span> <span class=\\\"hljs-literal\\\">false</span>;\\n            }\\n            cur = cur.children[cn];\\n        }\\n        <span class=\\\"hljs-keyword\\\">return</span> <span class=\\\"hljs-literal\\\">true</span>;\\n    }\\n}\\n</code></pre>\\n<h3 id=\\\"相关题目\\\">相关题目</h3>\\n<h4 id=\\\"记录权值---map-sum-pairs\\\">记录权值 - Map Sum Pairs</h4>\\n<p>实现一个 MapSum 类里的两个方法，<code>insert</code> 和 <code>sum</code>。</p>\\n<p>对于方法 <code>insert</code>，你将得到一对（字符串，整数）的键值对。字符串表示键，整数表示值。如果键已经存在，那么原来的键值对将被替代成新的键值对。</p>\\n<p>对于方法 <code>sum</code>，你将得到一个表示前缀的字符串，你需要返回所有以该前缀开头的键的值的总和。</p>\\n<p><strong>示例 1:</strong></p>\\n<pre><code>输入: insert(&quot;apple&quot;, 3), 输出: Null\\n输入: sum(&quot;ap&quot;), 输出: 3\\n输入: insert(&quot;app&quot;, 2), 输出: Null\\n输入: sum(&quot;ap&quot;), 输出: 5\\n</code></pre>\\n<p>这题的关键就是要在<strong>每个缀点</strong>上都记录<strong>权值</strong>，所以我们设计的前缀树要同时支持<strong>权值</strong>记录，这里稍微要注意的是已存在键的<strong>权值</strong>的替换，我们的<code>search</code>方法返回的是该前缀的<strong>最后一个缀点</strong>，以便获取该前缀的旧<strong>权值</strong></p>\\n<pre><code class=\\\"hljs language-java\\\"><span class=\\\"hljs-keyword\\\">class</span> <span class=\\\"hljs-title class_\\\">Trie</span> {\\n    <span class=\\\"hljs-keyword\\\">public</span> <span class=\\\"hljs-type\\\">boolean</span> <span class=\\\"hljs-variable\\\">isEnd</span> <span class=\\\"hljs-operator\\\">=</span> <span class=\\\"hljs-literal\\\">false</span>;\\n    <span class=\\\"hljs-keyword\\\">public</span> <span class=\\\"hljs-type\\\">int</span> <span class=\\\"hljs-variable\\\">sum</span> <span class=\\\"hljs-operator\\\">=</span> <span class=\\\"hljs-number\\\">0</span>;\\n    <span class=\\\"hljs-keyword\\\">public</span> Trie[] children = <span class=\\\"hljs-keyword\\\">new</span> <span class=\\\"hljs-title class_\\\">Trie</span>[<span class=\\\"hljs-number\\\">26</span>];\\n    <span class=\\\"hljs-keyword\\\">public</span> <span class=\\\"hljs-title function_\\\">Trie</span><span class=\\\"hljs-params\\\">()</span> {}\\n\\n    <span class=\\\"hljs-keyword\\\">public</span> <span class=\\\"hljs-keyword\\\">void</span> <span class=\\\"hljs-title function_\\\">insert</span><span class=\\\"hljs-params\\\">(String word, <span class=\\\"hljs-type\\\">int</span> sum)</span> {\\n        <span class=\\\"hljs-comment\\\">// 搜索出该前缀是否已经存在</span>\\n        <span class=\\\"hljs-type\\\">Trie</span> <span class=\\\"hljs-variable\\\">oldTrie</span> <span class=\\\"hljs-operator\\\">=</span> search(word);\\n        <span class=\\\"hljs-type\\\">boolean</span> <span class=\\\"hljs-variable\\\">addOn</span> <span class=\\\"hljs-operator\\\">=</span> oldTrie == <span class=\\\"hljs-literal\\\">null</span>;\\n        <span class=\\\"hljs-type\\\">Trie</span> <span class=\\\"hljs-variable\\\">cur</span> <span class=\\\"hljs-operator\\\">=</span> <span class=\\\"hljs-built_in\\\">this</span>;\\n        <span class=\\\"hljs-keyword\\\">for</span> (<span class=\\\"hljs-type\\\">char</span> c: word.toCharArray()) {\\n            <span class=\\\"hljs-type\\\">int</span> <span class=\\\"hljs-variable\\\">cn</span> <span class=\\\"hljs-operator\\\">=</span> c - <span class=\\\"hljs-string\\\">&#x27;a&#x27;</span>;\\n            <span class=\\\"hljs-keyword\\\">if</span> (cur.children[cn] == <span class=\\\"hljs-literal\\\">null</span>) {\\n                cur.children[cn] = <span class=\\\"hljs-keyword\\\">new</span> <span class=\\\"hljs-title class_\\\">Trie</span>();\\n            }\\n            <span class=\\\"hljs-keyword\\\">if</span> (addOn) {\\n                <span class=\\\"hljs-comment\\\">// 如果是新的前缀 那么就直接在原权值上加</span>\\n                cur.children[cn].sum += sum;\\n            } <span class=\\\"hljs-keyword\\\">else</span> {\\n                <span class=\\\"hljs-comment\\\">// 如果是已存在的前缀 那么需要减去旧的权值 然后再加上新的权值</span>\\n                cur.children[cn].sum = cur.children[cn].sum - oldTrie.sum + sum;\\n            }\\n            cur = cur.children[cn];\\n        }\\n        cur.isEnd = <span class=\\\"hljs-literal\\\">true</span>;\\n    }\\n\\n    <span class=\\\"hljs-keyword\\\">public</span> Trie <span class=\\\"hljs-title function_\\\">search</span><span class=\\\"hljs-params\\\">(String word)</span> {\\n        <span class=\\\"hljs-type\\\">Trie</span> <span class=\\\"hljs-variable\\\">cur</span> <span class=\\\"hljs-operator\\\">=</span> <span class=\\\"hljs-built_in\\\">this</span>;\\n        <span class=\\\"hljs-keyword\\\">for</span> (<span class=\\\"hljs-type\\\">char</span> c: word.toCharArray()) {\\n            <span class=\\\"hljs-type\\\">int</span> <span class=\\\"hljs-variable\\\">cn</span> <span class=\\\"hljs-operator\\\">=</span> c - <span class=\\\"hljs-string\\\">&#x27;a&#x27;</span>;\\n            <span class=\\\"hljs-keyword\\\">if</span> (cur.children[cn] == <span class=\\\"hljs-literal\\\">null</span>) {\\n                <span class=\\\"hljs-keyword\\\">return</span> <span class=\\\"hljs-literal\\\">null</span>;\\n            }\\n            cur = cur.children[cn];\\n        }\\n        <span class=\\\"hljs-keyword\\\">return</span> cur.isEnd ? cur : <span class=\\\"hljs-literal\\\">null</span>;\\n    }\\n\\n    <span class=\\\"hljs-keyword\\\">public</span> <span class=\\\"hljs-type\\\">int</span> <span class=\\\"hljs-title function_\\\">getSum</span><span class=\\\"hljs-params\\\">(String prefix)</span> {\\n        <span class=\\\"hljs-type\\\">Trie</span> <span class=\\\"hljs-variable\\\">cur</span> <span class=\\\"hljs-operator\\\">=</span> <span class=\\\"hljs-built_in\\\">this</span>;\\n        <span class=\\\"hljs-keyword\\\">for</span> (<span class=\\\"hljs-type\\\">char</span> c: prefix.toCharArray()) {\\n            <span class=\\\"hljs-type\\\">int</span> <span class=\\\"hljs-variable\\\">cn</span> <span class=\\\"hljs-operator\\\">=</span> c - <span class=\\\"hljs-string\\\">&#x27;a&#x27;</span>;\\n            <span class=\\\"hljs-keyword\\\">if</span> (cur.children[cn] == <span class=\\\"hljs-literal\\\">null</span>) {\\n                <span class=\\\"hljs-keyword\\\">return</span> <span class=\\\"hljs-number\\\">0</span>;\\n            } <span class=\\\"hljs-keyword\\\">else</span> {\\n                cur = cur.children[cn];\\n            }\\n        }\\n        <span class=\\\"hljs-keyword\\\">return</span> cur.sum;\\n    }\\n}\\n</code></pre>\\n<h4 id=\\\"查询前缀---单词替换\\\">查询前缀 - 单词替换</h4>\\n<p>在英语中，我们有一个叫做 <code>词根</code>(root)的概念，它可以跟着其他一些词组成另一个较长的单词——我们称这个词为 <code>继承词</code>(successor)。例如，词根<code>an</code>，跟随着单词 <code>other</code>(其他)，可以形成新的单词 <code>another</code>(另一个)。</p>\\n<p>现在，给定一个由许多词根组成的词典和一个句子。你需要将句子中的所有<code>继承词</code>用<code>词根</code>替换掉。如果<code>继承词</code>有许多可以形成它的<code>词根</code>，则用最短的词根替换它。</p>\\n<p>你需要输出替换之后的句子。</p>\\n<p><strong>示例：</strong></p>\\n<pre><code>输入：dict(词典) = [&quot;cat&quot;, &quot;bat&quot;, &quot;rat&quot;] sentence(句子) = &quot;the cattle was rattled by the battery&quot;\\n输出：&quot;the cat was rat by the bat&quot;\\n</code></pre>\\n<p><strong>提示：</strong></p>\\n<ul>\\n<li>输入只包含小写字母。</li>\\n<li><code>1 &lt;= dict.length &lt;= 1000</code></li>\\n<li><code>1 &lt;= dict[i].length &lt;= 100</code></li>\\n<li>1 &lt;= 句中词语数 &lt;= 1000</li>\\n<li>1 &lt;= 句中词语长度 &lt;= 1000</li>\\n</ul>\\n<p>这题首先把字典录入到前缀树，然后根据构造的前缀树，查询所有输入单词的前缀然后替换即可</p>\\n<pre><code class=\\\"hljs language-java\\\"><span class=\\\"hljs-keyword\\\">class</span> <span class=\\\"hljs-title class_\\\">Solution</span> {\\n    <span class=\\\"hljs-keyword\\\">public</span> String <span class=\\\"hljs-title function_\\\">replaceWords</span><span class=\\\"hljs-params\\\">(List&lt;String&gt; dict, String sentence)</span> {\\n        <span class=\\\"hljs-keyword\\\">if</span> (sentence.length() &lt;= <span class=\\\"hljs-number\\\">1</span>) <span class=\\\"hljs-keyword\\\">return</span> sentence;\\n\\n        <span class=\\\"hljs-type\\\">Trie</span> <span class=\\\"hljs-variable\\\">trie</span> <span class=\\\"hljs-operator\\\">=</span> <span class=\\\"hljs-keyword\\\">new</span> <span class=\\\"hljs-title class_\\\">Trie</span>();\\n        <span class=\\\"hljs-keyword\\\">for</span> (String word: dict) {\\n            trie.insert(word);\\n        }\\n\\n        String[] words = sentence.split(<span class=\\\"hljs-string\\\">&quot; &quot;</span>);\\n\\n        <span class=\\\"hljs-type\\\">StringBuilder</span> <span class=\\\"hljs-variable\\\">sb</span> <span class=\\\"hljs-operator\\\">=</span> <span class=\\\"hljs-keyword\\\">new</span> <span class=\\\"hljs-title class_\\\">StringBuilder</span>(<span class=\\\"hljs-string\\\">&quot;&quot;</span>);\\n        <span class=\\\"hljs-keyword\\\">for</span> (String word: words) {\\n            <span class=\\\"hljs-comment\\\">// 搜索前缀长度</span>\\n            <span class=\\\"hljs-type\\\">int</span> <span class=\\\"hljs-variable\\\">length</span> <span class=\\\"hljs-operator\\\">=</span> trie.getPrefix(word);\\n            <span class=\\\"hljs-keyword\\\">if</span> (length == <span class=\\\"hljs-number\\\">0</span>) length = word.length();\\n            sb.append(word.substring(<span class=\\\"hljs-number\\\">0</span>, length)).append(<span class=\\\"hljs-string\\\">&quot; &quot;</span>);\\n        }\\n        <span class=\\\"hljs-keyword\\\">return</span> sb.deleteCharAt(sb.length() - <span class=\\\"hljs-number\\\">1</span>).toString();\\n    }\\n}\\n\\n<span class=\\\"hljs-keyword\\\">class</span> <span class=\\\"hljs-title class_\\\">Trie</span> {\\n    <span class=\\\"hljs-keyword\\\">public</span> <span class=\\\"hljs-type\\\">boolean</span> <span class=\\\"hljs-variable\\\">isEnd</span>  <span class=\\\"hljs-operator\\\">=</span> <span class=\\\"hljs-literal\\\">false</span>;\\n    <span class=\\\"hljs-keyword\\\">public</span> Trie[] children = <span class=\\\"hljs-keyword\\\">new</span> <span class=\\\"hljs-title class_\\\">Trie</span>[<span class=\\\"hljs-number\\\">26</span>];\\n    <span class=\\\"hljs-keyword\\\">public</span> <span class=\\\"hljs-title function_\\\">Trie</span><span class=\\\"hljs-params\\\">()</span> {}\\n    <span class=\\\"hljs-keyword\\\">public</span> <span class=\\\"hljs-keyword\\\">void</span> <span class=\\\"hljs-title function_\\\">insert</span><span class=\\\"hljs-params\\\">(String word)</span> {\\n        <span class=\\\"hljs-type\\\">Trie</span> <span class=\\\"hljs-variable\\\">cur</span> <span class=\\\"hljs-operator\\\">=</span> <span class=\\\"hljs-built_in\\\">this</span>;\\n        <span class=\\\"hljs-keyword\\\">for</span> (<span class=\\\"hljs-type\\\">char</span> c: word.toCharArray()) {\\n            <span class=\\\"hljs-type\\\">int</span> <span class=\\\"hljs-variable\\\">cn</span> <span class=\\\"hljs-operator\\\">=</span> c - <span class=\\\"hljs-string\\\">&#x27;a&#x27;</span>;\\n            <span class=\\\"hljs-keyword\\\">if</span> (cur.children[cn] == <span class=\\\"hljs-literal\\\">null</span>) {\\n                cur.children[cn] = <span class=\\\"hljs-keyword\\\">new</span> <span class=\\\"hljs-title class_\\\">Trie</span>();\\n            }\\n            cur = cur.children[cn];\\n        }\\n        cur.isEnd = <span class=\\\"hljs-literal\\\">true</span>;\\n    }\\n\\n    <span class=\\\"hljs-comment\\\">// 返回前缀的长度</span>\\n    <span class=\\\"hljs-keyword\\\">public</span> <span class=\\\"hljs-type\\\">int</span> <span class=\\\"hljs-title function_\\\">getPrefix</span><span class=\\\"hljs-params\\\">(String word)</span> {\\n        <span class=\\\"hljs-type\\\">Trie</span> <span class=\\\"hljs-variable\\\">cur</span> <span class=\\\"hljs-operator\\\">=</span> <span class=\\\"hljs-built_in\\\">this</span>;\\n        <span class=\\\"hljs-type\\\">int</span> <span class=\\\"hljs-variable\\\">length</span> <span class=\\\"hljs-operator\\\">=</span> <span class=\\\"hljs-number\\\">0</span>;\\n        <span class=\\\"hljs-keyword\\\">for</span> (<span class=\\\"hljs-type\\\">char</span> c: word.toCharArray()) {\\n            <span class=\\\"hljs-type\\\">int</span> <span class=\\\"hljs-variable\\\">cn</span> <span class=\\\"hljs-operator\\\">=</span> c - <span class=\\\"hljs-string\\\">&#x27;a&#x27;</span>;\\n            <span class=\\\"hljs-keyword\\\">if</span> (cur.children[cn] == <span class=\\\"hljs-literal\\\">null</span> || cur.isEnd) {\\n                <span class=\\\"hljs-comment\\\">// 如果已经到底了 说明当前缀点就是最短的前缀</span>\\n                <span class=\\\"hljs-keyword\\\">break</span>;\\n            }\\n            cur = cur.children[cn];\\n            length++;\\n        }\\n        <span class=\\\"hljs-keyword\\\">return</span> cur.isEnd ? length : <span class=\\\"hljs-number\\\">0</span>;\\n    }\\n}\\n</code></pre>\\n<h4 id=\\\"有通配符---添加与搜索单词\\\">有通配符 - 添加与搜索单词</h4>\\n<p>设计一个支持以下两种操作的数据结构：</p>\\n<pre><code>void addWord(word)\\nbool search(word)\\n</code></pre>\\n<p>search(word) 可以搜索文字或正则表达式字符串，字符串只包含字母 <code>.</code> 或 <code>a-z</code> 。 <code>.</code> 可以表示任何一个字母。</p>\\n<p><strong>示例:</strong></p>\\n<pre><code>addWord(&quot;bad&quot;)\\naddWord(&quot;dad&quot;)\\naddWord(&quot;mad&quot;)\\nsearch(&quot;pad&quot;) -&gt; false\\nsearch(&quot;bad&quot;) -&gt; true\\nsearch(&quot;.ad&quot;) -&gt; true\\nsearch(&quot;b..&quot;) -&gt; true\\n</code></pre>\\n<p><strong>说明:</strong></p>\\n<p>你可以假设所有单词都是由小写字母 <code>a-z</code> 组成的。</p>\\n<p>这题的关键就是处理通配符，对于像<code>b.a</code>，<code>b..</code>这样的用例，每当遇到<code>.</code>的时候，我们就需要遍历当前缀点的所有子缀点，比如实例上能构造前缀树：</p>\\n<p><img src=\\\"../../../public/img/20200714132901.png\\\" alt=\\\"\\\"></p>\\n<p>当我们搜索到第一个缀点 b 的子缀点的时候，发现是通配符，于是我们需要遍历 b 的所有有效子缀点<code>(trie != null)</code>来搜索后续的字符所以我们的<code>search</code>方法可以修改为</p>\\n<pre><code class=\\\"hljs language-java\\\"><span class=\\\"hljs-keyword\\\">public</span> <span class=\\\"hljs-keyword\\\">static</span> <span class=\\\"hljs-type\\\">boolean</span> <span class=\\\"hljs-title function_\\\">search</span><span class=\\\"hljs-params\\\">(String word, Trie root, <span class=\\\"hljs-type\\\">int</span> begin)</span> {\\n    <span class=\\\"hljs-type\\\">Trie</span> <span class=\\\"hljs-variable\\\">cur</span> <span class=\\\"hljs-operator\\\">=</span> root;\\n    <span class=\\\"hljs-keyword\\\">for</span> (<span class=\\\"hljs-type\\\">int</span> <span class=\\\"hljs-variable\\\">i</span> <span class=\\\"hljs-operator\\\">=</span> begin; i &lt; word.length(); i++) {\\n        <span class=\\\"hljs-type\\\">char</span> <span class=\\\"hljs-variable\\\">c</span> <span class=\\\"hljs-operator\\\">=</span> word.charAt(i);\\n        <span class=\\\"hljs-keyword\\\">if</span> (c == <span class=\\\"hljs-string\\\">&#x27;.&#x27;</span>) {\\n            <span class=\\\"hljs-comment\\\">// 遍历当前子缀点，并从当前子缀点继续搜索</span>\\n            <span class=\\\"hljs-keyword\\\">for</span> (Trie t: cur.next) {\\n                <span class=\\\"hljs-keyword\\\">if</span> (t != <span class=\\\"hljs-literal\\\">null</span> && search(word, t, i + <span class=\\\"hljs-number\\\">1</span>)) <span class=\\\"hljs-keyword\\\">return</span> <span class=\\\"hljs-literal\\\">true</span>;\\n            }\\n            <span class=\\\"hljs-keyword\\\">return</span> <span class=\\\"hljs-literal\\\">false</span>;\\n        } <span class=\\\"hljs-keyword\\\">else</span> {\\n            <span class=\\\"hljs-comment\\\">// 正常的搜索</span>\\n            <span class=\\\"hljs-type\\\">int</span> <span class=\\\"hljs-variable\\\">cn</span> <span class=\\\"hljs-operator\\\">=</span> c - <span class=\\\"hljs-string\\\">&#x27;a&#x27;</span>;\\n            <span class=\\\"hljs-keyword\\\">if</span> (cur.next[cn] == <span class=\\\"hljs-literal\\\">null</span>) {\\n                <span class=\\\"hljs-keyword\\\">return</span> <span class=\\\"hljs-literal\\\">false</span>;\\n            } <span class=\\\"hljs-keyword\\\">else</span> {\\n                cur = cur.next[cn];\\n            }\\n        }\\n    }\\n    <span class=\\\"hljs-keyword\\\">return</span> cur.isEnd;\\n}\\n</code></pre>\\n<h4 id=\\\"深度回溯---单词搜索-ii\\\">深度回溯 - 单词搜索 II</h4>\\n<p>给定一个二维网格 <strong>board</strong> 和一个字典中的单词列表 <strong>words</strong>，找出所有同时在二维网格和字典中出现的单词。</p>\\n<p>单词必须按照字母顺序，通过相邻的单元格内的字母构成，其中“相邻”单元格是那些水平相邻或垂直相邻的单元格。同一个单元格内的字母在一个单词中不允许被重复使用。</p>\\n<p><strong>示例:</strong></p>\\n<pre><code>输入:\\nwords = [&quot;oath&quot;,&quot;pea&quot;,&quot;eat&quot;,&quot;rain&quot;] and board =\\n[\\n  [&#x27;o&#x27;,&#x27;a&#x27;,&#x27;a&#x27;,&#x27;n&#x27;],\\n  [&#x27;e&#x27;,&#x27;t&#x27;,&#x27;a&#x27;,&#x27;e&#x27;],\\n  [&#x27;i&#x27;,&#x27;h&#x27;,&#x27;k&#x27;,&#x27;r&#x27;],\\n  [&#x27;i&#x27;,&#x27;f&#x27;,&#x27;l&#x27;,&#x27;v&#x27;]\\n]\\n\\n输出: [&quot;eat&quot;,&quot;oath&quot;]\\n</code></pre>\\n<p><strong>说明:</strong>\\n你可以假设所有输入都由小写字母 <code>a-z</code> 组成。</p>\\n<p>本体就在<strong>二维数组上进行深度优先</strong>再运用上<strong>前缀树的缀点进行回溯</strong>，难度不大，关键是要优化到 99%</p>\\n<pre><code class=\\\"hljs language-java\\\"><span class=\\\"hljs-keyword\\\">class</span> <span class=\\\"hljs-title class_\\\">Solution</span> {\\n\\n    <span class=\\\"hljs-type\\\">int</span>[][] direction = {\\n        {<span class=\\\"hljs-number\\\">0</span>, <span class=\\\"hljs-number\\\">1</span>},\\n        {<span class=\\\"hljs-number\\\">0</span>,-<span class=\\\"hljs-number\\\">1</span>},\\n        {<span class=\\\"hljs-number\\\">1</span>, <span class=\\\"hljs-number\\\">0</span>},\\n        {-<span class=\\\"hljs-number\\\">1</span>,<span class=\\\"hljs-number\\\">0</span>}\\n    };\\n\\n    <span class=\\\"hljs-type\\\">int</span> m;\\n    <span class=\\\"hljs-type\\\">int</span> n;\\n    <span class=\\\"hljs-type\\\">int</span> wc;\\n\\n    <span class=\\\"hljs-keyword\\\">public</span> List&lt;String&gt; <span class=\\\"hljs-title function_\\\">findWords</span><span class=\\\"hljs-params\\\">(<span class=\\\"hljs-type\\\">char</span>[][] board, String[] words)</span> {\\n        <span class=\\\"hljs-type\\\">Trie</span> <span class=\\\"hljs-variable\\\">trie</span> <span class=\\\"hljs-operator\\\">=</span> <span class=\\\"hljs-keyword\\\">new</span> <span class=\\\"hljs-title class_\\\">Trie</span>();\\n        wc = words.length;\\n        <span class=\\\"hljs-keyword\\\">for</span> (String word: words) {\\n            trie.insert(word);\\n        }\\n        m = board.length;\\n        List&lt;String&gt; ans = <span class=\\\"hljs-keyword\\\">new</span> <span class=\\\"hljs-title class_\\\">ArrayList</span>&lt;&gt;();\\n        <span class=\\\"hljs-keyword\\\">if</span> (m == <span class=\\\"hljs-number\\\">0</span>) <span class=\\\"hljs-keyword\\\">return</span> ans;\\n        n = board[<span class=\\\"hljs-number\\\">0</span>].length;\\n        <span class=\\\"hljs-keyword\\\">if</span> (n == <span class=\\\"hljs-number\\\">0</span>) <span class=\\\"hljs-keyword\\\">return</span> ans;\\n\\n        <span class=\\\"hljs-keyword\\\">for</span> (<span class=\\\"hljs-type\\\">int</span> <span class=\\\"hljs-variable\\\">row</span> <span class=\\\"hljs-operator\\\">=</span> <span class=\\\"hljs-number\\\">0</span>; row &lt; m; row++) {\\n            <span class=\\\"hljs-keyword\\\">for</span> (<span class=\\\"hljs-type\\\">int</span> <span class=\\\"hljs-variable\\\">col</span> <span class=\\\"hljs-operator\\\">=</span> <span class=\\\"hljs-number\\\">0</span>; col &lt; n; col++) {\\n                <span class=\\\"hljs-comment\\\">// 优化4：一旦字典找满了 则后面的搜索就没必要做了 因为答案是不重复记录</span>\\n                <span class=\\\"hljs-keyword\\\">if</span> (ans.size() &lt; wc) {\\n                    back(board, row, col, trie, ans);\\n                }\\n            }\\n        }\\n        <span class=\\\"hljs-keyword\\\">return</span> ans;\\n    }\\n\\n    <span class=\\\"hljs-keyword\\\">public</span> <span class=\\\"hljs-keyword\\\">void</span> <span class=\\\"hljs-title function_\\\">back</span><span class=\\\"hljs-params\\\">(<span class=\\\"hljs-type\\\">char</span>[][] board, <span class=\\\"hljs-type\\\">int</span> row, <span class=\\\"hljs-type\\\">int</span> col, Trie trie, List&lt;String&gt; ans)</span> {\\n        <span class=\\\"hljs-comment\\\">// 优化3：直接使用缀点去进行查询 快速剪枝</span>\\n        <span class=\\\"hljs-type\\\">Trie</span> <span class=\\\"hljs-variable\\\">t</span> <span class=\\\"hljs-operator\\\">=</span> trie.next[board[row][col] -<span class=\\\"hljs-string\\\">&#x27;a&#x27;</span>];\\n        <span class=\\\"hljs-keyword\\\">if</span> (t != <span class=\\\"hljs-literal\\\">null</span>) {\\n            <span class=\\\"hljs-keyword\\\">if</span> (t.word != <span class=\\\"hljs-literal\\\">null</span> && !t.visited) {\\n                ans.add(t.word);\\n                t.visited = <span class=\\\"hljs-literal\\\">true</span>;\\n            }\\n            <span class=\\\"hljs-type\\\">char</span> <span class=\\\"hljs-variable\\\">tmp</span> <span class=\\\"hljs-operator\\\">=</span> board[row][col];\\n            board[row][col] = <span class=\\\"hljs-string\\\">&#x27;#&#x27;</span>;\\n            <span class=\\\"hljs-keyword\\\">for</span> (<span class=\\\"hljs-type\\\">int</span>[] d: direction) {\\n                <span class=\\\"hljs-type\\\">int</span> <span class=\\\"hljs-variable\\\">newRow</span> <span class=\\\"hljs-operator\\\">=</span> row + d[<span class=\\\"hljs-number\\\">0</span>];\\n                <span class=\\\"hljs-type\\\">int</span> <span class=\\\"hljs-variable\\\">newCol</span> <span class=\\\"hljs-operator\\\">=</span> col + d[<span class=\\\"hljs-number\\\">1</span>];\\n\\n                <span class=\\\"hljs-keyword\\\">if</span> (newRow &lt; <span class=\\\"hljs-number\\\">0</span> || newRow &gt;= m || newCol &lt; <span class=\\\"hljs-number\\\">0</span> || newCol &gt;= n) <span class=\\\"hljs-keyword\\\">continue</span>;\\n                <span class=\\\"hljs-keyword\\\">if</span> (board[newRow][newCol] == <span class=\\\"hljs-string\\\">&#x27;#&#x27;</span>) <span class=\\\"hljs-keyword\\\">continue</span>;\\n\\n                back(board, newRow, newCol, t, ans);\\n            }\\n            board[row][col] = tmp;\\n        }\\n    }\\n}\\n\\n<span class=\\\"hljs-keyword\\\">class</span> <span class=\\\"hljs-title class_\\\">Trie</span> {\\n    <span class=\\\"hljs-keyword\\\">public</span> Trie[]  next    = <span class=\\\"hljs-keyword\\\">new</span> <span class=\\\"hljs-title class_\\\">Trie</span>[<span class=\\\"hljs-number\\\">26</span>];\\n    <span class=\\\"hljs-comment\\\">// 优化1：单词记录在最后一个缀点上，这样就不用在回溯的时候用StringBuilder去一个个记录字符</span>\\n    <span class=\\\"hljs-keyword\\\">public</span> <span class=\\\"hljs-type\\\">String</span>  <span class=\\\"hljs-variable\\\">word</span>    <span class=\\\"hljs-operator\\\">=</span> <span class=\\\"hljs-literal\\\">null</span>;\\n    <span class=\\\"hljs-comment\\\">// 优化2：使用一个布尔值去记录这个答案是否被访问过了，以达到答案去重的目的</span>\\n    <span class=\\\"hljs-keyword\\\">public</span> <span class=\\\"hljs-type\\\">boolean</span> <span class=\\\"hljs-variable\\\">visited</span> <span class=\\\"hljs-operator\\\">=</span> <span class=\\\"hljs-literal\\\">false</span>;\\n\\n    <span class=\\\"hljs-keyword\\\">public</span> <span class=\\\"hljs-keyword\\\">void</span> <span class=\\\"hljs-title function_\\\">insert</span><span class=\\\"hljs-params\\\">(String word)</span> {\\n        <span class=\\\"hljs-type\\\">Trie</span> <span class=\\\"hljs-variable\\\">cur</span> <span class=\\\"hljs-operator\\\">=</span> <span class=\\\"hljs-built_in\\\">this</span>;\\n        <span class=\\\"hljs-keyword\\\">for</span> (<span class=\\\"hljs-type\\\">char</span> c: word.toCharArray()) {\\n            <span class=\\\"hljs-type\\\">int</span> <span class=\\\"hljs-variable\\\">cn</span> <span class=\\\"hljs-operator\\\">=</span> c - <span class=\\\"hljs-string\\\">&#x27;a&#x27;</span>;\\n            <span class=\\\"hljs-keyword\\\">if</span> (cur.next[cn] == <span class=\\\"hljs-literal\\\">null</span>) {\\n                cur.next[cn] = <span class=\\\"hljs-keyword\\\">new</span> <span class=\\\"hljs-title class_\\\">Trie</span>();\\n            }\\n            cur = cur.next[cn];\\n        }\\n        cur.word = word;\\n    }\\n}\\n</code></pre>\\n<h4 id=\\\"有后缀树---恢复空格\\\">有后缀树 - 恢复空格</h4>\\n<p>哦，不！你不小心把一个长篇文章中的空格、标点都删掉了，并且大写也弄成了小写。像句子<code>&quot;I reset the computer. It still didn’t boot!&quot;</code>已经变成了<code>&quot;iresetthecomputeritstilldidntboot&quot;</code>。在处理标点符号和大小写之前，你得先把它断成词语。</p>\\n<p>当然了，你有一本厚厚的词典<code>dictionary</code>，不过，有些词没在词典里。假设文章用<code>sentence</code>表示，设计一个算法，把文章断开，要求未识别的字符最少，返回未识别的字符数。</p>\\n<p><strong>注意：</strong>本题相对原题稍作改动，只需返回未识别的字符数</p>\\n<p><strong>示例：</strong></p>\\n<pre><code>输入：\\ndictionary = [&quot;looked&quot;,&quot;just&quot;,&quot;like&quot;,&quot;her&quot;,&quot;brother&quot;]\\nsentence = &quot;jesslookedjustliketimherbrother&quot;\\n输出： 7\\n解释： 断句后为&quot;jess looked just like tim her brother&quot;，共7个未识别字符。\\n</code></pre>\\n<p><strong>提示：</strong></p>\\n<ul>\\n<li><code>0 &lt;= len(sentence) &lt;= 1000</code></li>\\n<li><code>dictionary</code>中总字符数不超过 150000。</li>\\n<li>你可以认为<code>dictionary</code>和<code>sentence</code>中只包含小写字母。</li>\\n</ul>\\n<p><img src=\\\"../../../public/img/20200714144233.gif\\\" alt=\\\"\\\"></p>\\n<p>刚开思考的时候，确实是正向思考的，录入了一颗前缀树，但是这样的坏处是，无法在 n^2 的时间内很好地进行单词的划分与判断，所以参考了一下官方给的思路，构造一颗后缀树，从后缀往前摸，不得不说这个思路确实很漂亮</p>\\n<p>而且这里还运用到了动态规划，申请了 n+1 长度的数组<code>dp</code>，<code>dp[i]</code>表示前 <code>i</code> 个字符最少的未识别的字符数量，从前往后计算 dp 值</p>\\n<p>考虑转移方程，每次转移的时候我们考虑第 <code>j(j &lt;= i)</code>个到第 <code>i</code> 个字符组成的子串 <code>sentence[j−1⋯i−1] </code>（注意字符串下标从 0 开始）是否能在词典中找到，如果能找到的话按照定义转移方程为：</p>\\n<p><span class=\\\"katex-display katexp\\\"><span class=\\\"katex-display\\\"><span class=\\\"katex\\\"><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:1em;vertical-align:-0.25em;\\\"></span><span class=\\\"mord mathnormal\\\">d</span><span class=\\\"mord mathnormal\\\">p</span><span class=\\\"mopen\\\">[</span><span class=\\\"mord mathnormal\\\">i</span><span class=\\\"mclose\\\">]</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2778em;\\\"></span><span class=\\\"mrel\\\">=</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2778em;\\\"></span></span><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:1em;vertical-align:-0.25em;\\\"></span><span class=\\\"mord mathnormal\\\">min</span><span class=\\\"mopen\\\">(</span><span class=\\\"mord mathnormal\\\">d</span><span class=\\\"mord mathnormal\\\">p</span><span class=\\\"mopen\\\">[</span><span class=\\\"mord mathnormal\\\">i</span><span class=\\\"mclose\\\">]</span><span class=\\\"mpunct\\\">,</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.5em;\\\"></span><span class=\\\"mspace\\\" style=\\\"margin-right:0.1667em;\\\"></span><span class=\\\"mord mathnormal\\\">d</span><span class=\\\"mord mathnormal\\\">p</span><span class=\\\"mopen\\\">[</span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.05724em;\\\">j</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2222em;\\\"></span><span class=\\\"mbin\\\">−</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2222em;\\\"></span></span><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:1em;vertical-align:-0.25em;\\\"></span><span class=\\\"mord\\\">1</span><span class=\\\"mclose\\\">])</span></span></span></span></span></span></p>\\n<p>否则没有找到的话我们可以复用 \\\\textit{dp}[i-1]dp[i−1] 的状态再加上当前未被识别的第 ii 个字符，因此此时 \\\\textit{dp}dp 值为</p>\\n<p><span class=\\\"katex-display katexp\\\"><span class=\\\"katex-display\\\"><span class=\\\"katex\\\"><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:1em;vertical-align:-0.25em;\\\"></span><span class=\\\"mord mathnormal\\\">d</span><span class=\\\"mord mathnormal\\\">p</span><span class=\\\"mopen\\\">[</span><span class=\\\"mord mathnormal\\\">i</span><span class=\\\"mclose\\\">]</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2778em;\\\"></span><span class=\\\"mrel\\\">=</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2778em;\\\"></span></span><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:1em;vertical-align:-0.25em;\\\"></span><span class=\\\"mord mathnormal\\\">d</span><span class=\\\"mord mathnormal\\\">p</span><span class=\\\"mopen\\\">[</span><span class=\\\"mord mathnormal\\\">i</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2222em;\\\"></span><span class=\\\"mbin\\\">−</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2222em;\\\"></span></span><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:1em;vertical-align:-0.25em;\\\"></span><span class=\\\"mord\\\">1</span><span class=\\\"mclose\\\">]</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2222em;\\\"></span><span class=\\\"mbin\\\">+</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2222em;\\\"></span></span><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.6444em;\\\"></span><span class=\\\"mord\\\">1</span></span></span></span></span></span></p>\\n<p>dp 的取值过程在动图里已经展示了</p>\\n<pre><code class=\\\"hljs language-java\\\"><span class=\\\"hljs-keyword\\\">class</span> <span class=\\\"hljs-title class_\\\">Solution</span> {\\n    <span class=\\\"hljs-comment\\\">/**\\n     * 参考官方解答\\n     */</span>\\n    <span class=\\\"hljs-keyword\\\">public</span> <span class=\\\"hljs-type\\\">int</span> <span class=\\\"hljs-title function_\\\">respace</span><span class=\\\"hljs-params\\\">(String[] dictionary, String sentence)</span> {\\n        <span class=\\\"hljs-keyword\\\">if</span> (sentence.length() == <span class=\\\"hljs-number\\\">0</span>) <span class=\\\"hljs-keyword\\\">return</span> <span class=\\\"hljs-number\\\">0</span>;\\n        <span class=\\\"hljs-type\\\">BackTrie</span> <span class=\\\"hljs-variable\\\">backtrie</span> <span class=\\\"hljs-operator\\\">=</span> <span class=\\\"hljs-keyword\\\">new</span> <span class=\\\"hljs-title class_\\\">BackTrie</span>();\\n        <span class=\\\"hljs-keyword\\\">for</span> (String word: dictionary) {\\n            backtrie.insert(word);\\n        }\\n        <span class=\\\"hljs-type\\\">int</span> <span class=\\\"hljs-variable\\\">length</span> <span class=\\\"hljs-operator\\\">=</span> sentence.length();\\n        <span class=\\\"hljs-type\\\">int</span>[] dp = <span class=\\\"hljs-keyword\\\">new</span> <span class=\\\"hljs-title class_\\\">int</span>[length + <span class=\\\"hljs-number\\\">1</span>];\\n        dp[<span class=\\\"hljs-number\\\">0</span>] = <span class=\\\"hljs-number\\\">0</span>;\\n        <span class=\\\"hljs-keyword\\\">for</span> (<span class=\\\"hljs-type\\\">int</span> <span class=\\\"hljs-variable\\\">i</span> <span class=\\\"hljs-operator\\\">=</span> <span class=\\\"hljs-number\\\">1</span>; i &lt;= length; i++) {\\n            dp[i] = dp[i - <span class=\\\"hljs-number\\\">1</span>] + <span class=\\\"hljs-number\\\">1</span>;\\n\\n            <span class=\\\"hljs-type\\\">BackTrie</span> <span class=\\\"hljs-variable\\\">cur</span> <span class=\\\"hljs-operator\\\">=</span> backtrie;\\n            <span class=\\\"hljs-keyword\\\">for</span> (<span class=\\\"hljs-type\\\">int</span> <span class=\\\"hljs-variable\\\">j</span> <span class=\\\"hljs-operator\\\">=</span> i - <span class=\\\"hljs-number\\\">1</span>; j &gt;= <span class=\\\"hljs-number\\\">0</span>; j--) {\\n                <span class=\\\"hljs-keyword\\\">if</span> (dp[i] == <span class=\\\"hljs-number\\\">0</span>) {\\n                    <span class=\\\"hljs-keyword\\\">break</span>;\\n                }\\n                <span class=\\\"hljs-type\\\">int</span> <span class=\\\"hljs-variable\\\">cn</span> <span class=\\\"hljs-operator\\\">=</span> sentence.charAt(j) - <span class=\\\"hljs-string\\\">&#x27;a&#x27;</span>;\\n                <span class=\\\"hljs-keyword\\\">if</span> (cur.next[cn] == <span class=\\\"hljs-literal\\\">null</span>) {\\n                    <span class=\\\"hljs-keyword\\\">break</span>;\\n                } <span class=\\\"hljs-keyword\\\">else</span> <span class=\\\"hljs-keyword\\\">if</span> (cur.next[cn].isEnd) {\\n                    dp[i] = Math.min(dp[i], dp[j]);\\n                }\\n                <span class=\\\"hljs-comment\\\">// 一旦是某个单词的后缀 就往前摸</span>\\n                cur = cur.next[cn];\\n            }\\n        }\\n        <span class=\\\"hljs-keyword\\\">return</span> dp[length];\\n    }\\n}\\n\\n<span class=\\\"hljs-comment\\\">/**\\n * 后缀树\\n */</span>\\n<span class=\\\"hljs-keyword\\\">class</span> <span class=\\\"hljs-title class_\\\">BackTrie</span> {\\n\\n    <span class=\\\"hljs-keyword\\\">public</span> <span class=\\\"hljs-type\\\">boolean</span> <span class=\\\"hljs-variable\\\">isEnd</span> <span class=\\\"hljs-operator\\\">=</span> <span class=\\\"hljs-literal\\\">false</span>;\\n    <span class=\\\"hljs-keyword\\\">public</span> BackTrie[] next;\\n\\n    <span class=\\\"hljs-keyword\\\">public</span> <span class=\\\"hljs-title function_\\\">BackTrie</span><span class=\\\"hljs-params\\\">()</span> {\\n        next = <span class=\\\"hljs-keyword\\\">new</span> <span class=\\\"hljs-title class_\\\">BackTrie</span>[<span class=\\\"hljs-number\\\">26</span>];\\n    }\\n\\n    <span class=\\\"hljs-keyword\\\">public</span> <span class=\\\"hljs-keyword\\\">void</span> <span class=\\\"hljs-title function_\\\">insert</span><span class=\\\"hljs-params\\\">(String word)</span> {\\n        <span class=\\\"hljs-type\\\">BackTrie</span> <span class=\\\"hljs-variable\\\">cur</span> <span class=\\\"hljs-operator\\\">=</span> <span class=\\\"hljs-built_in\\\">this</span>;\\n        <span class=\\\"hljs-keyword\\\">for</span> (<span class=\\\"hljs-type\\\">int</span> <span class=\\\"hljs-variable\\\">i</span> <span class=\\\"hljs-operator\\\">=</span> word.length() - <span class=\\\"hljs-number\\\">1</span>; i &gt;= <span class=\\\"hljs-number\\\">0</span>; i--) {\\n            <span class=\\\"hljs-type\\\">int</span> <span class=\\\"hljs-variable\\\">cn</span> <span class=\\\"hljs-operator\\\">=</span> word.charAt(i) - <span class=\\\"hljs-string\\\">&#x27;a&#x27;</span>;\\n            <span class=\\\"hljs-keyword\\\">if</span> (cur.next[cn] == <span class=\\\"hljs-literal\\\">null</span>) {\\n                cur.next[cn] = <span class=\\\"hljs-keyword\\\">new</span> <span class=\\\"hljs-title class_\\\">BackTrie</span>();\\n            }\\n            cur = cur.next[cn];\\n        }\\n        cur.isEnd = <span class=\\\"hljs-literal\\\">true</span>;\\n    }\\n}\\n</code></pre>\\n\";","export default \"<h3 id=\\\"前言\\\">前言</h3>\\n<blockquote>\\n<p>可能出乎很多人意料之外的一个事实是，微服务很多核心理念其实在半个世纪前的一篇文章中就被阐述过了，而且这篇文章中的很多论点在软件开发飞速发展的这半个世纪中竟然一再被验证，这就是康威定律。</p>\\n</blockquote>\\n<h3 id=\\\"概述\\\">概述</h3>\\n<p>微服务是最近非常火热的新概念，大家都在追，也都觉得很对，但是似乎没有很充足的理论基础说明这是正确的，给人的感觉是 <strong>不明觉厉</strong> 。前段时间看了Mike Amundsen <a href=\\\"http://www.infoq.com/cn/presentations/team-building-implementation-in-distributed-world\\\">《远距离条件下的康威定律——分布式世界中实现团队构建》</a>（是Design RESTful API的作者）在InfoQ上的一个分享，觉得很有帮助，结合自己的一些思考，整理了该演讲的内容。</p>\\n<p>可能出乎很多人意料之外的一个事实是，微服务很多核心理念其实在半个世纪前的一篇文章中就被阐述过了，而且这篇文章中的很多论点在软件开发飞速发展的这半个世纪中竟然一再被验证，这就是<a href=\\\"http://www.melconway.com/Home/Conways_Law.html\\\">康威定律（Conway&#39;s Law）</a>。</p>\\n<p><img src=\\\"http://img1.tbcdn.cn/L1/461/1/3fa834ea8c880a97d00f187f67962a8218b16f22\\\" alt=\\\"screenshot\\\"><img src=\\\"http://img2.tbcdn.cn/L1/461/1/ad8ba09ed2350c2a8c2f067d80197e74aefcef8d\\\" alt=\\\"screenshot\\\"></p>\\n<p>在康威的这篇文章中，最有名的一句话就是：</p>\\n<blockquote>\\n<p>Organizations which design systems are constrained to produce designs which are copies of the communication structures of these organizations. - Melvin Conway(1967)</p>\\n</blockquote>\\n<p>中文直译大概的意思就是：设计系统的组织，其产生的设计等同于组织之内、组织之间的沟通结构。看看下面的图片（来源于互联网，侵删），再想想Apple的产品、微软的产品设计，就能形象生动的理解这句话。\\n<img src=\\\"http://img2.tbcdn.cn/L1/461/1/74ab78cb5db601e5db68adf61e6dc58f437df4e0\\\" alt=\\\"screenshot\\\"></p>\\n<p>用通俗的说法就是：组织形式等同系统设计。</p>\\n<p>这里的系统按原作者的意思并不局限于软件系统。据说这篇文章最初投的哈佛商业评论，结果程序员屌丝的文章不入商业人士的法眼，无情被拒，康威就投到了一个编程相关的杂志，所以被误解为是针对软件开发的。最初这篇文章显然不敢自称定律（law），只是描述了作者自己的发现和总结。后来，在Brooks Law著名的人月神话中，引用这个论点，并将其“吹捧”成了现在我们熟知“康威定律”。</p>\\n<h3 id=\\\"康威定律详细介绍\\\">康威定律详细介绍</h3>\\n<p>Mike从他的角度归纳这篇论文中的其他一些核心观点，如下：</p>\\n<ul>\\n<li>第一定律<ul>\\n<li>Communication dictates design</li>\\n<li>组织沟通方式会通过系统设计表达出来</li>\\n</ul>\\n</li>\\n<li>第二定律<ul>\\n<li>There is never enough time to do something right, but there is always enough time to do it over</li>\\n<li>时间再多一件事情也不可能做的完美，但总有时间做完一件事情</li>\\n</ul>\\n</li>\\n<li>第三定律<ul>\\n<li>There is a homomorphism from the linear graph of a system to the linear graph of its design organization</li>\\n<li>线型系统和线型组织架构间有潜在的异质同态特性</li>\\n</ul>\\n</li>\\n<li>第四定律<ul>\\n<li>The structures of large systems tend to disintegrate during development, qualitatively more so than with small systems</li>\\n<li>大的系统组织总是比小系统更倾向于分解</li>\\n</ul>\\n</li>\\n</ul>\\n<h4 id=\\\"人是复杂社会动物\\\">人是复杂社会动物</h4>\\n<ul>\\n<li>第一定律<ul>\\n<li>Communication dictates design</li>\\n<li>组织沟通方式决定系统设计</li>\\n</ul>\\n</li>\\n</ul>\\n<p>组织的沟通和系统设计之间的紧密联系，在很多别的领域有类似的阐述。对于复杂的系统，聊设计就离不开聊人与人的沟通，解决好人与人的沟通问题，才能有一个好的系统设计。相信几乎每个程序员都读过的《人月神话》（1975年，感觉都是老古董了，经典的就是经得起时间考验）里面许多观点都和这句话有异曲同工之妙。</p>\\n<p><img src=\\\"http://img2.tbcdn.cn/L1/461/1/8759732579d4193ef27df9011d252cf357562349\\\" alt=\\\"screenshot\\\"><img src=\\\"http://img2.tbcdn.cn/L1/461/1/fb215be9fe9232ccda1fc8817b4af6e8da6abcd0\\\" alt=\\\"screenshot\\\"></p>\\n<p>比如《人月神话》中最著名的一句话就是</p>\\n<blockquote>\\n<p>Adding manpower to a late software project makes it later --Fred Brooks, (1975)</p>\\n</blockquote>\\n<p>Boss们都听到了吗？为了赶进度加程序员就像用水去灭油锅里的火一样（无奈大家还是前赴后继）。</p>\\n<p>为什么？人月神话也给出了很简洁的答案：沟通成本 = n(n-1)/2，沟通成本随着项目或者组织的人员增加呈指数级增长。是的，项目管理这个算法的复杂度是O(n^2)。举个例子</p>\\n<ul>\\n<li>5个人的项目组，需要沟通的渠道是 5*(5–1)/2 = 10</li>\\n<li>15个人的项目组，需要沟通的渠道是15*(15–1)/2 = 105</li>\\n<li>50个人的项目组，需要沟通的渠道是50*(50–1)/2 = 1,225</li>\\n<li>150个人的项目组，需要沟通的渠道是150*(150–1)/2 = 11,175</li>\\n</ul>\\n<p>所以知道为什么互联网创业公司都这么小了吧，必须小啊，不然等CEO和所有人讲一遍创业的想法后，风投的钱都烧完了。</p>\\n<p>Mike还举了一个非常有意思的理论，叫“Dunbar Number”，这是一个叫Dunbar（废话）生物学家在1992年最早提出来的。最初，他发现灵长类的大脑容量和其对应的族群大小有一定关联，进而推断出人类的大脑能维系的关系的一些有趣估计。举例来说</p>\\n<ul>\\n<li>亲密（intimate）朋友: 5</li>\\n<li>信任（trusted）朋友: 15</li>\\n<li>酒肉（close）朋友: 35</li>\\n<li>照面（casual）朋友: 150</li>\\n</ul>\\n<p><img src=\\\"http://img2.tbcdn.cn/L1/461/1/a63beac73c8d217c71aba36c4a6e270a3fa18603\\\" alt=\\\"screenshot\\\"></p>\\n<p>是不是和上面的沟通成本的数字很貌似有关联？是的，我们的大脑智力只能支持我们维系这么多的关系。（大家都知道这不是程序猿擅长的领域，在开发团队里，这个值应该更小，估计和猿差不多 -_-凸 ）</p>\\n<p>沟通的问题，会带来系统设计的问题，进而影响整个系统的开发效率和最终产品结果。</p>\\n<h4 id=\\\"一口气吃不成胖子，先搞定能搞定的\\\">一口气吃不成胖子，先搞定能搞定的</h4>\\n<ul>\\n<li>第二定律:<ul>\\n<li>There is never enough time to do something right, but there is always enough time to do it over</li>\\n<li>时间再多一件事情也不可能做的完美，但总有时间做完一件事情</li>\\n</ul>\\n</li>\\n</ul>\\n<p>Eric Hollnagel是敏捷开发社区的泰斗之一，在他《Efficiency-Effectiveness Trade Offs》 一书中解释了类似的论点。</p>\\n<blockquote>\\n<p>Problem too complicated? Ignore details. Not enough resources?Give up features.</p>\\n<pre><code>            --Eric Hollnagel (2009)\\n</code></pre>\\n</blockquote>\\n<p><img src=\\\"http://img1.tbcdn.cn/L1/461/1/654425008b3a53442a77f32068302b44b51a32da\\\" alt=\\\"screenshot\\\"><img src=\\\"http://img1.tbcdn.cn/L1/461/1/78d32f9955e5deebd42ab75333e226fd52d6797f\\\" alt=\\\"screenshot\\\"></p>\\n<p>系统越做越复杂，功能越来越多，外部市场的竞争越来越剧烈，投资人的期待越来越高。但人的智力是有上限的，即使再牛逼的人，融到钱再多也不一定招到足够多合适的人。对于一个巨复杂的系统，我们永远无法考虑周全。Eric认为，这个时候最好的解决办法竟然是——“破罐子破摔”。</p>\\n<p>其实我们在日常开发中也经常碰到。产品经理的需求太复杂了？适当忽略一些细节，先抓主线。产品经理的需求太多了？放弃一些功能。</p>\\n<p>据说Eric被一家航空公司请去做安全咨询顾问，复杂保证飞机飞行系统的稳定性和安全性。Eric认为做到安全有两种方式：</p>\\n<ul>\\n<li>常规的安全指的是尽可能多的发现并消除错误的部分，达到绝对安全，这是理想。</li>\\n<li>另一种则是弹性安全，即使发生错误，只要及时恢复，也能正常工作，这是现实。</li>\\n</ul>\\n<p>对于飞机这样的复杂系统，再牛逼的人也无法考虑到漏洞的方方面面，所以Eric建议放弃打造完美系统的想法，而是通过不断的试飞，发现问题，确保问题发生时，系统能自动复原即可，而不追求飞行系统的绝对正确和安全。</p>\\n<p>下面的图很好的解释了这个过程：\\n<img src=\\\"http://img1.tbcdn.cn/L1/461/1/a7fab1b350cd8c03d5e9ddded183c7bda114c326\\\" alt=\\\"screenshot\\\">\\n听着很耳熟不是吗？这不就是 <strong>持续集成</strong> 和敏捷开发吗？的确就是。</p>\\n<p>另一方面，这和互联网公司维护的分布式系统的弹性设计也是一个道理。对于一个分布式系统，我们几乎永远不可能找到并修复所有的bug，单元测试覆盖1000%也没有用，错误流淌在分布式系统的血液里。解决方法不是消灭这些问题，而是容忍这些问题，在问题发生时，能自动回复，微服务组成的系统，每一个微服务都可能挂掉，这是常态，我们只有有足够的冗余和备份即可。即所谓的 <strong>弹性设计（Resilience）</strong> 或者叫高可用设计（High Availability）。</p>\\n<h4 id=\\\"种瓜得瓜，做独立自治的字系统减少沟通成本\\\">种瓜得瓜，做独立自治的字系统减少沟通成本</h4>\\n<ul>\\n<li>第三定律<ul>\\n<li>There is a homomorphism from the linear graph of a system to the linear graph of its design organization</li>\\n<li>线型系统和线型组织架构间有潜在的异质同态特性</li>\\n</ul>\\n</li>\\n</ul>\\n<p><img src=\\\"http://img1.tbcdn.cn/L1/461/1/3810f88633a55bdf59bb7757cedc827ab425538e\\\" alt=\\\"screenshot\\\"></p>\\n<p>这是康威第一定律组织和设计间内在关系的一个具体应用。更直白的说，你想要什么样的系统，就搭建什么样的团队。如果你的团队分成前端团队，Java后台开发团队，DBA团队，运维团队，你的系统就会长成下面的样子：\\n<img src=\\\"http://img4.tbcdn.cn/L1/461/1/f4c2d4a8f8390ca6be19b54a524c8272aced3e34\\\" alt=\\\"screenshot\\\"></p>\\n<p>相反，如果你的系统是按照业务边界划分的，大家按照一个业务目标去把自己的模块做出小系统，小产品的话，你的大系统就会长成下面的样子，即微服务的架构\\n<img src=\\\"http://img3.tbcdn.cn/L1/461/1/c827db7a12d730140d4c0e6947535e168902a73e\\\" alt=\\\"screenshot\\\"></p>\\n<p>微服务的理念团队间应该是 <strong>inter-operate, not integrate</strong> 。inter-operate是定义好系统的边界和接口，在一个团队内全栈，让团队自治，原因就是因为如果团队按照这样的方式组建，将沟通的成本维持在系统内部，每个子系统就会更加内聚，彼此的依赖耦合能变弱，跨系统的沟通成本也就能降低。</p>\\n<h4 id=\\\"合久必分，分而治之\\\">合久必分，分而治之</h4>\\n<ul>\\n<li>第四定律<ul>\\n<li>The structures of large systems tend to disintegrate during development, qualitatively more so than with small systems</li>\\n<li>大的系统组织总是比小系统更倾向于分解</li>\\n</ul>\\n</li>\\n</ul>\\n<p>前面说了，人是复杂的社会动物，人与人的通过非常复杂。但是当我们面对复杂系统时，又往往只能通过增加人力来解决。这时，我们的组织一般是如何解决这个沟通问题的呢？Divide and conquer,分而治之。大家看看自己的公司的组织，是不是一个一线经理一般都是管理15个人以下的？二线经理再管理更少的一线？三线再管理更少的，以此类推。（这里完全没有暗示开发经理比程序猿更难管理）</p>\\n<p>所以，一个大的组织因为沟通成本/管理问题，总为被拆分成一个个小团队。</p>\\n<ul>\\n<li>创业的想法太好了，反正风投钱多，多招点程序猿</li>\\n<li>人多管不过来啊，找几个经理帮我管，我管经理</li>\\n<li>最后， <strong>康威定律</strong> 告诉我们组织沟通的方式会在系统设计上有所表达，每个经理都被赋予一定的职责去做大系统的某一小部分，他们和大系统便有了沟通的边界，所以大的系统也会因此被拆分成一个个小团队负责的小系统（微服务是一种好的模式）</li>\\n</ul>\\n<h3 id=\\\"康威定律如何解释微服务的合理性\\\">康威定律如何解释微服务的合理性</h3>\\n<p>了解了康威定律是什么，再来看看他如何在半个世纪前就奠定了微服务架构的理论基础。</p>\\n<ul>\\n<li>人与人的沟通是非常复杂的，一个人的沟通精力是有限的，所以当问题太复杂需要很多人解决的时候，我们需要做拆分组织来达成对沟通效率的管理</li>\\n<li>组织内人与人的沟通方式决定了他们参与的系统设计，管理者可以通过不同的拆分方式带来不同的团队间沟通方式，从而影响系统设计</li>\\n<li>如果子系统是内聚的，和外部的沟通边界是明确的，能降低沟通成本，对应的设计也会更合理高效</li>\\n<li>复杂的系统需要通过容错弹性的方式持续优化，不要指望一个大而全的设计或架构，好的架构和设计都是慢慢迭代出来的</li>\\n</ul>\\n<p>带来的具体的实践建议是：</p>\\n<ul>\\n<li>我们要用一切手段提升沟通效率，比如slack，github，wiki。能2个人讲清楚的事情，就不要拉更多人，每个人每个系统都有明确的分工，出了问题知道马上找谁，避免踢皮球的问题。</li>\\n<li>通过MVP的方式来设计系统，通过不断的迭代来验证优化，系统应该是弹性设计的。</li>\\n<li>你想要什么样的系统设计，就架构什么样的团队，能扁平化就扁平化。最好按业务来划分团队，这样能让团队自然的自治内聚，明确的业务边界会减少和外部的沟通成本，每个小团队都对自己的模块的整个生命周期负责，没有边界不清，没有无效的扯皮，inter-operate, not integrate。</li>\\n<li>做小而美的团队，人多会带来沟通的成本，让效率下降。亚马逊的Bezos有个逗趣的比喻，如果2个披萨不够一个团队吃的，那么这个团队就太大了。事实上一般一个互联网公司小产品的团队差不多就是7，8人左右（包含前后端测试交互用研等，可能身兼数职）。</li>\\n</ul>\\n<p>再对应下衡量微服务的标准，我们很容易会发现他们之间的密切关系：</p>\\n<ul>\\n<li>分布式服务组成的系统</li>\\n<li>按照业务而不是技术来划分组织</li>\\n<li>做有生命的产品而不是项目</li>\\n<li>Smart endpoints and dumb pipes（我的理解是强服务个体和弱通信）</li>\\n<li>自动化运维（DevOps）</li>\\n<li>容错</li>\\n<li>快速演化</li>\\n</ul>\\n<h3 id=\\\"参考资料\\\">参考资料</h3>\\n<ul>\\n<li><a href=\\\"http://www.infoq.com/cn/presentations/team-building-implementation-in-distributed-world\\\">远距离条件下的康威定律——分布式世界中实现团队构建</a>，本文图片来源该ppt截图</li>\\n<li><a href=\\\"https://en.wikipedia.org/wiki/Conway%27s_law\\\">Conway‘s Law in wiki</a></li>\\n<li><a href=\\\"http://www.melconway.com/Home/Conways_Law.html\\\">Conway&#39;s Law Homepage</a></li>\\n</ul>\\n<blockquote>\\n<p>转载自：<a href=\\\"https://yq.aliyun.com/articles/8611\\\">https://yq.aliyun.com/articles/8611</a></p>\\n</blockquote>\\n\";","export default \"<h3 id=\\\"1-twosumeasy\\\">1. TwoSum(Easy)</h3>\\n<p>Given an array of integers, return <strong>indices</strong> of the two numbers such that they add up to a specific target.</p>\\n<p>You may assume that each input would have <strong>exactly</strong> one solution, and you may not use the <em>same</em> element twice.</p>\\n<p><strong>Example:</strong></p>\\n<pre><code>Given nums = [2, 7, 11, 15], target = 9,\\n\\nBecause nums[0] + nums[1] = 2 + 7 = 9,\\nreturn [0, 1].\\n</code></pre>\\n<h4 id=\\\"ⅰbrute-force\\\">Ⅰ.Brute Force</h4>\\n<pre><code class=\\\"hljs language-java\\\"><span class=\\\"hljs-keyword\\\">public</span> <span class=\\\"hljs-type\\\">int</span>[] twoSum(<span class=\\\"hljs-type\\\">int</span>[] nums, <span class=\\\"hljs-type\\\">int</span> target) {\\n    <span class=\\\"hljs-keyword\\\">for</span> (<span class=\\\"hljs-type\\\">int</span> <span class=\\\"hljs-variable\\\">i</span> <span class=\\\"hljs-operator\\\">=</span> <span class=\\\"hljs-number\\\">0</span>; i &lt; nums.length; i++) {\\n        <span class=\\\"hljs-keyword\\\">for</span> (<span class=\\\"hljs-type\\\">int</span> <span class=\\\"hljs-variable\\\">j</span> <span class=\\\"hljs-operator\\\">=</span> i + <span class=\\\"hljs-number\\\">1</span>; j &lt; nums.length; j++) {\\n            <span class=\\\"hljs-keyword\\\">if</span> (nums[j] == target - nums[i]) {\\n                <span class=\\\"hljs-keyword\\\">return</span> <span class=\\\"hljs-keyword\\\">new</span> <span class=\\\"hljs-title class_\\\">int</span>[] { i, j };\\n            }\\n        }\\n    }\\n    <span class=\\\"hljs-keyword\\\">throw</span> <span class=\\\"hljs-keyword\\\">new</span> <span class=\\\"hljs-title class_\\\">IllegalArgumentException</span>(<span class=\\\"hljs-string\\\">&quot;No two sum solution&quot;</span>);\\n}\\n</code></pre>\\n<h4 id=\\\"ⅱhashing\\\">Ⅱ.Hashing</h4>\\n<p>Of all other Java solution with they call “hashing”, they just using JDK’s provided implementation, and it’s not a friendly solution for those who are not coding with Java.</p>\\n<p>And as I thinking about, it’s shit code that you are using <strong>a non-classic structure</strong> like <strong>“HashMap”, “ArrayList”</strong> and so on.</p>\\n<p>It’s ok that you using JDK’s implementation like <strong>“LinkedList”, “Stack”</strong> because their basic function were all implemented in the accepted ordinary way.</p>\\n<p>But using a structure like <strong>“HashMap”, “ArrayList”</strong>, it’s totally cheating because the algorithm inside them <strong>is not your work</strong>, and you probably don’t know how to implement <strong>HashMap’s</strong> treeify operation or <strong>ArrayList’s</strong> grow operation.</p>\\n<p>I see the solution to this Problem and I was disappointed with it.</p>\\n<pre><code class=\\\"hljs language-java\\\"><span class=\\\"hljs-keyword\\\">public</span> <span class=\\\"hljs-type\\\">int</span>[] twoSum(<span class=\\\"hljs-type\\\">int</span>[] nums, <span class=\\\"hljs-type\\\">int</span> target) {\\n    HashMap&lt;Integer, Integer&gt; map = <span class=\\\"hljs-keyword\\\">new</span> <span class=\\\"hljs-title class_\\\">HashMap</span>&lt;&gt;(nums.length);\\n    <span class=\\\"hljs-keyword\\\">for</span> (<span class=\\\"hljs-type\\\">int</span> <span class=\\\"hljs-variable\\\">i</span> <span class=\\\"hljs-operator\\\">=</span> <span class=\\\"hljs-number\\\">0</span>; i &lt; nums.length ; i++) {\\n        <span class=\\\"hljs-type\\\">int</span> <span class=\\\"hljs-variable\\\">complement</span> <span class=\\\"hljs-operator\\\">=</span> target - nums[i];\\n        <span class=\\\"hljs-keyword\\\">if</span> (map.containsKey(complement)) {\\n            <span class=\\\"hljs-keyword\\\">return</span> <span class=\\\"hljs-keyword\\\">new</span> <span class=\\\"hljs-title class_\\\">int</span>[]{i, map.get(complement)};\\n        }\\n        map.put(nums[i], i);\\n    }\\n    <span class=\\\"hljs-keyword\\\">return</span> nums;\\n}\\n</code></pre>\\n<p>So here is my solution about &quot;TwoSum&quot; with <strong>self implement &quot;hashing&quot;</strong>, it may not a nice code but it&#39;s friendly for all of you</p>\\n<pre><code class=\\\"hljs language-java\\\"><span class=\\\"hljs-comment\\\">// 4ms runtime 26~27MB memory use</span>\\n<span class=\\\"hljs-comment\\\">// need to record val and index at the same time</span>\\n<span class=\\\"hljs-keyword\\\">class</span> <span class=\\\"hljs-title class_\\\">Pair</span> {\\n    <span class=\\\"hljs-type\\\">int</span> val;\\n    <span class=\\\"hljs-type\\\">int</span> index;\\n}\\n\\n<span class=\\\"hljs-comment\\\">// hash table</span>\\n<span class=\\\"hljs-keyword\\\">private</span> Pair[] table;\\n\\n<span class=\\\"hljs-comment\\\">// hash method just mod</span>\\n<span class=\\\"hljs-keyword\\\">private</span> <span class=\\\"hljs-type\\\">int</span> <span class=\\\"hljs-title function_\\\">hash</span><span class=\\\"hljs-params\\\">(<span class=\\\"hljs-type\\\">int</span> key)</span> {\\n    <span class=\\\"hljs-keyword\\\">return</span> Math.abs(key) % table.length;\\n}\\n\\n<span class=\\\"hljs-comment\\\">// set hash table from origin sequence</span>\\n<span class=\\\"hljs-keyword\\\">private</span> <span class=\\\"hljs-keyword\\\">void</span> <span class=\\\"hljs-title function_\\\">setTable</span><span class=\\\"hljs-params\\\">(<span class=\\\"hljs-type\\\">int</span>[] origin)</span> {\\n    <span class=\\\"hljs-comment\\\">// table&#x27;s rank is double</span>\\n    <span class=\\\"hljs-type\\\">int</span> <span class=\\\"hljs-variable\\\">rank</span> <span class=\\\"hljs-operator\\\">=</span> origin.length &lt;&lt; <span class=\\\"hljs-number\\\">1</span>;\\n    table = <span class=\\\"hljs-keyword\\\">new</span> <span class=\\\"hljs-title class_\\\">Pair</span>[rank];\\n    <span class=\\\"hljs-keyword\\\">for</span> (<span class=\\\"hljs-type\\\">int</span> <span class=\\\"hljs-variable\\\">i</span> <span class=\\\"hljs-operator\\\">=</span> <span class=\\\"hljs-number\\\">0</span>; i &lt; origin.length; i++) {\\n        <span class=\\\"hljs-comment\\\">// detection the right place the key should set on hash table</span>\\n        <span class=\\\"hljs-type\\\">int</span> <span class=\\\"hljs-variable\\\">place</span> <span class=\\\"hljs-operator\\\">=</span> detection(origin[i], <span class=\\\"hljs-literal\\\">false</span>);\\n        <span class=\\\"hljs-type\\\">Pair</span> <span class=\\\"hljs-variable\\\">pair</span> <span class=\\\"hljs-operator\\\">=</span> <span class=\\\"hljs-keyword\\\">new</span> <span class=\\\"hljs-title class_\\\">Pair</span>();\\n        pair.val = origin[i];\\n        pair.index = i;\\n        table[place] = pair;\\n    }\\n}\\n\\n<span class=\\\"hljs-comment\\\">// seek the key&#x27;s position in hash table</span>\\n<span class=\\\"hljs-keyword\\\">private</span> <span class=\\\"hljs-type\\\">int</span> <span class=\\\"hljs-title function_\\\">seek</span><span class=\\\"hljs-params\\\">(<span class=\\\"hljs-type\\\">int</span> key)</span> {\\n    <span class=\\\"hljs-comment\\\">// seek key and return -1 if no key found in hash table</span>\\n    <span class=\\\"hljs-keyword\\\">return</span> detection(key, <span class=\\\"hljs-literal\\\">true</span>);\\n}\\n\\n<span class=\\\"hljs-comment\\\">// collsion handle with just linear detection</span>\\n<span class=\\\"hljs-keyword\\\">private</span> <span class=\\\"hljs-type\\\">int</span> <span class=\\\"hljs-title function_\\\">detection</span><span class=\\\"hljs-params\\\">(<span class=\\\"hljs-type\\\">int</span> key, <span class=\\\"hljs-type\\\">boolean</span> seek)</span> {\\n    <span class=\\\"hljs-type\\\">int</span> <span class=\\\"hljs-variable\\\">hash</span> <span class=\\\"hljs-operator\\\">=</span> hash(key);\\n    <span class=\\\"hljs-comment\\\">// detect key&#x27;s position in hash table at once hash()</span>\\n    <span class=\\\"hljs-keyword\\\">if</span> (!seek && table[hash] == <span class=\\\"hljs-literal\\\">null</span>) {\\n        <span class=\\\"hljs-keyword\\\">return</span> hash;\\n    } <span class=\\\"hljs-keyword\\\">else</span> <span class=\\\"hljs-keyword\\\">if</span> (seek && table[hash] == <span class=\\\"hljs-literal\\\">null</span>) {\\n        <span class=\\\"hljs-comment\\\">// no match found</span>\\n        <span class=\\\"hljs-keyword\\\">return</span> -<span class=\\\"hljs-number\\\">1</span>;\\n    } <span class=\\\"hljs-keyword\\\">else</span> <span class=\\\"hljs-keyword\\\">if</span> (seek && table[hash].val == key) {\\n        <span class=\\\"hljs-comment\\\">// match key</span>\\n        <span class=\\\"hljs-keyword\\\">return</span> hash;\\n    } <span class=\\\"hljs-keyword\\\">else</span> {\\n        <span class=\\\"hljs-comment\\\">// collsion handle with linear detection</span>\\n        <span class=\\\"hljs-type\\\">int</span> <span class=\\\"hljs-variable\\\">offset</span> <span class=\\\"hljs-operator\\\">=</span> <span class=\\\"hljs-number\\\">1</span>;\\n        <span class=\\\"hljs-type\\\">boolean</span> <span class=\\\"hljs-variable\\\">after</span> <span class=\\\"hljs-operator\\\">=</span> <span class=\\\"hljs-literal\\\">false</span>;\\n        <span class=\\\"hljs-comment\\\">// linear detect forward</span>\\n        <span class=\\\"hljs-keyword\\\">while</span> (hash + offset &lt; table.length) {\\n            <span class=\\\"hljs-keyword\\\">if</span> (!seek && table[hash + offset] == <span class=\\\"hljs-literal\\\">null</span>) {\\n                <span class=\\\"hljs-keyword\\\">break</span>;\\n            } <span class=\\\"hljs-keyword\\\">else</span> <span class=\\\"hljs-keyword\\\">if</span> (seek && table[hash + offset] == <span class=\\\"hljs-literal\\\">null</span>) {\\n                <span class=\\\"hljs-keyword\\\">return</span> -<span class=\\\"hljs-number\\\">1</span>;\\n            } <span class=\\\"hljs-keyword\\\">else</span> <span class=\\\"hljs-keyword\\\">if</span> (seek && table[hash + offset].val == key) {\\n                <span class=\\\"hljs-keyword\\\">return</span> hash + offset;\\n            }\\n            offset++;\\n        }\\n        <span class=\\\"hljs-comment\\\">// liner detect backward</span>\\n        <span class=\\\"hljs-keyword\\\">if</span> (hash + offset == table.length) {\\n            offset = <span class=\\\"hljs-number\\\">1</span>;\\n            <span class=\\\"hljs-keyword\\\">while</span> (hash - offset &gt;= <span class=\\\"hljs-number\\\">0</span>) {\\n                <span class=\\\"hljs-keyword\\\">if</span> (!seek && table[hash - offset] == <span class=\\\"hljs-literal\\\">null</span>) {\\n                    <span class=\\\"hljs-keyword\\\">break</span>;\\n                } <span class=\\\"hljs-keyword\\\">else</span> <span class=\\\"hljs-keyword\\\">if</span> (seek && table[hash - offset] == <span class=\\\"hljs-literal\\\">null</span>) {\\n                    <span class=\\\"hljs-keyword\\\">return</span> -<span class=\\\"hljs-number\\\">1</span>;\\n                } <span class=\\\"hljs-keyword\\\">else</span> <span class=\\\"hljs-keyword\\\">if</span> (seek && table[hash - offset].val == key) {\\n                    <span class=\\\"hljs-keyword\\\">return</span> hash + offset;\\n                }\\n                offset++;\\n            }\\n        } <span class=\\\"hljs-keyword\\\">else</span> {\\n            after = <span class=\\\"hljs-literal\\\">true</span>;\\n        }\\n        <span class=\\\"hljs-keyword\\\">return</span> after ? hash + offset : hash - offset;\\n    }\\n}\\n\\n<span class=\\\"hljs-keyword\\\">public</span> <span class=\\\"hljs-type\\\">int</span>[] twoSum(<span class=\\\"hljs-type\\\">int</span>[] nums, <span class=\\\"hljs-type\\\">int</span> target) {\\n    setTable(nums);\\n    <span class=\\\"hljs-keyword\\\">for</span> (<span class=\\\"hljs-type\\\">int</span> <span class=\\\"hljs-variable\\\">i</span> <span class=\\\"hljs-operator\\\">=</span> <span class=\\\"hljs-number\\\">0</span>; i &lt; nums.length; i++) {\\n        <span class=\\\"hljs-type\\\">int</span> <span class=\\\"hljs-variable\\\">complement</span> <span class=\\\"hljs-operator\\\">=</span> target - nums[i];\\n        <span class=\\\"hljs-type\\\">int</span> <span class=\\\"hljs-variable\\\">seek</span> <span class=\\\"hljs-operator\\\">=</span> seek(complement);\\n        <span class=\\\"hljs-keyword\\\">if</span> (seek != -<span class=\\\"hljs-number\\\">1</span>) {\\n            <span class=\\\"hljs-type\\\">int</span> <span class=\\\"hljs-variable\\\">index</span> <span class=\\\"hljs-operator\\\">=</span> table[seek].index;\\n            <span class=\\\"hljs-comment\\\">// handle case like [3, 3] target 6</span>\\n            <span class=\\\"hljs-keyword\\\">if</span> (index == i) {\\n                <span class=\\\"hljs-keyword\\\">if</span> (seek + <span class=\\\"hljs-number\\\">1</span> &lt; table.length) {\\n                    index = table[seek + <span class=\\\"hljs-number\\\">1</span>].index;\\n                } <span class=\\\"hljs-keyword\\\">else</span> {\\n                    index = table[seek - <span class=\\\"hljs-number\\\">1</span>].index;\\n                }\\n            }\\n            <span class=\\\"hljs-comment\\\">// handle case like [3, 2, 4] target 6</span>\\n            <span class=\\\"hljs-keyword\\\">if</span> (nums[index] + nums[i] == target) {\\n                <span class=\\\"hljs-keyword\\\">return</span> <span class=\\\"hljs-keyword\\\">new</span> <span class=\\\"hljs-title class_\\\">int</span>[]{i, index};\\n            }\\n        }\\n    }\\n    <span class=\\\"hljs-keyword\\\">return</span> nums;\\n}\\n</code></pre>\\n<h3 id=\\\"2-add-two-numbermedium\\\">2. Add Two Number(Medium)</h3>\\n<p>You are given two <strong>non-empty</strong> linked lists representing two non-negative integers. The digits are stored in <strong>reverse order</strong> and each of their nodes contain a single digit. Add the two numbers and return it as a linked list.</p>\\n<p>You may assume the two numbers do not contain any leading zero, except the number 0 itself.</p>\\n<p><strong>Example:</strong></p>\\n<pre><code>Input: (2 -&gt; 4 -&gt; 3) + (5 -&gt; 6 -&gt; 4)\\nOutput: 7 -&gt; 0 -&gt; 8\\nExplanation: 342 + 465 = 807.\\n</code></pre>\\n<p><img src=\\\"https://leetcode.com/problems/add-two-numbers/Figures/2_add_two_numbers.svg\\\" alt=\\\"\\\"></p>\\n<p>这题没什么tricky的，就是两个连各自的结点相加，关键是怎么记录各自链表的当前计算指针，并且处理好长短不一情况下的进位，下面是官方的solution：</p>\\n<pre><code class=\\\"hljs language-java\\\"><span class=\\\"hljs-comment\\\">// 由第三条新的链和它的计算指针完成</span>\\n<span class=\\\"hljs-keyword\\\">public</span> ListNode <span class=\\\"hljs-title function_\\\">addTwoNumbers</span><span class=\\\"hljs-params\\\">(ListNode l1, ListNode l2)</span> {\\n    <span class=\\\"hljs-type\\\">ListNode</span> <span class=\\\"hljs-variable\\\">dummyHead</span> <span class=\\\"hljs-operator\\\">=</span> <span class=\\\"hljs-keyword\\\">new</span> <span class=\\\"hljs-title class_\\\">ListNode</span>(<span class=\\\"hljs-number\\\">0</span>);\\n    <span class=\\\"hljs-type\\\">ListNode</span> <span class=\\\"hljs-variable\\\">p</span> <span class=\\\"hljs-operator\\\">=</span> l1, q = l2, curr = dummyHead;\\n    <span class=\\\"hljs-type\\\">int</span> <span class=\\\"hljs-variable\\\">carry</span> <span class=\\\"hljs-operator\\\">=</span> <span class=\\\"hljs-number\\\">0</span>;\\n    <span class=\\\"hljs-keyword\\\">while</span> (p != <span class=\\\"hljs-literal\\\">null</span> || q != <span class=\\\"hljs-literal\\\">null</span>) {\\n        <span class=\\\"hljs-type\\\">int</span> <span class=\\\"hljs-variable\\\">x</span> <span class=\\\"hljs-operator\\\">=</span> (p != <span class=\\\"hljs-literal\\\">null</span>) ? p.val : <span class=\\\"hljs-number\\\">0</span>;\\n        <span class=\\\"hljs-type\\\">int</span> <span class=\\\"hljs-variable\\\">y</span> <span class=\\\"hljs-operator\\\">=</span> (q != <span class=\\\"hljs-literal\\\">null</span>) ? q.val : <span class=\\\"hljs-number\\\">0</span>;\\n        <span class=\\\"hljs-type\\\">int</span> <span class=\\\"hljs-variable\\\">sum</span> <span class=\\\"hljs-operator\\\">=</span> carry + x + y;\\n        carry = sum / <span class=\\\"hljs-number\\\">10</span>;\\n        curr.next = <span class=\\\"hljs-keyword\\\">new</span> <span class=\\\"hljs-title class_\\\">ListNode</span>(sum % <span class=\\\"hljs-number\\\">10</span>);\\n        curr = curr.next;\\n        <span class=\\\"hljs-keyword\\\">if</span> (p != <span class=\\\"hljs-literal\\\">null</span>) p = p.next;\\n        <span class=\\\"hljs-keyword\\\">if</span> (q != <span class=\\\"hljs-literal\\\">null</span>) q = q.next;\\n    }\\n    <span class=\\\"hljs-keyword\\\">if</span> (carry &gt; <span class=\\\"hljs-number\\\">0</span>) {\\n        curr.next = <span class=\\\"hljs-keyword\\\">new</span> <span class=\\\"hljs-title class_\\\">ListNode</span>(carry);\\n    }\\n    <span class=\\\"hljs-keyword\\\">return</span> dummyHead.next;\\n}\\n</code></pre>\\n<p>下面是我参照这种思路，针对空间优化的代码，所有计算在1链上进行，并处理了两条链长短不一样的情况，如果1链长，那么就继续计算carry；如果二链长，那么把二链剩余需要计算的链接到1链上，在1链上继续计算carry：</p>\\n<pre><code class=\\\"hljs language-java\\\"><span class=\\\"hljs-keyword\\\">public</span> ListNode <span class=\\\"hljs-title function_\\\">addTwoNumbers</span><span class=\\\"hljs-params\\\">(ListNode l1, ListNode l2)</span> {\\n    <span class=\\\"hljs-type\\\">boolean</span> <span class=\\\"hljs-variable\\\">carry</span> <span class=\\\"hljs-operator\\\">=</span> <span class=\\\"hljs-literal\\\">false</span>;\\n    <span class=\\\"hljs-type\\\">ListNode</span> <span class=\\\"hljs-variable\\\">ap</span> <span class=\\\"hljs-operator\\\">=</span> l1, bp = l2;\\n    <span class=\\\"hljs-keyword\\\">while</span> (ap != <span class=\\\"hljs-literal\\\">null</span> || bp != <span class=\\\"hljs-literal\\\">null</span>) {\\n        <span class=\\\"hljs-type\\\">int</span> <span class=\\\"hljs-variable\\\">count</span> <span class=\\\"hljs-operator\\\">=</span> carry ? <span class=\\\"hljs-number\\\">1</span> : <span class=\\\"hljs-number\\\">0</span>;\\n        <span class=\\\"hljs-keyword\\\">if</span> (ap != <span class=\\\"hljs-literal\\\">null</span>) {\\n            count += ap.val;\\n        }\\n        <span class=\\\"hljs-keyword\\\">if</span> (bp != <span class=\\\"hljs-literal\\\">null</span>) {\\n            count += bp.val;\\n        }\\n        <span class=\\\"hljs-keyword\\\">if</span> (count &gt;= <span class=\\\"hljs-number\\\">10</span>) {\\n            count = count % <span class=\\\"hljs-number\\\">10</span>;\\n            carry = <span class=\\\"hljs-literal\\\">true</span>;\\n        } <span class=\\\"hljs-keyword\\\">else</span> {\\n            carry = <span class=\\\"hljs-literal\\\">false</span>;\\n        }\\n\\n        <span class=\\\"hljs-keyword\\\">if</span> (ap != <span class=\\\"hljs-literal\\\">null</span>) {\\n            ap.val = count;\\n            <span class=\\\"hljs-keyword\\\">if</span> (ap.next == <span class=\\\"hljs-literal\\\">null</span>) {\\n                <span class=\\\"hljs-keyword\\\">if</span> (bp != <span class=\\\"hljs-literal\\\">null</span>) {\\n                    ap.next = bp.next;\\n                    bp = <span class=\\\"hljs-literal\\\">null</span>;\\n                    <span class=\\\"hljs-comment\\\">// 以防还有carry 在l2上记录l1最后一个结点</span>\\n                    l2 = ap;\\n                } <span class=\\\"hljs-keyword\\\">else</span> <span class=\\\"hljs-keyword\\\">if</span> (carry) {\\n                    ap.next = <span class=\\\"hljs-keyword\\\">new</span> <span class=\\\"hljs-title class_\\\">ListNode</span>(<span class=\\\"hljs-number\\\">1</span>);\\n                    carry = <span class=\\\"hljs-literal\\\">false</span>;\\n                    <span class=\\\"hljs-keyword\\\">break</span>;\\n                }\\n            }\\n            ap = ap.next;\\n        }\\n        <span class=\\\"hljs-keyword\\\">if</span> (bp != <span class=\\\"hljs-literal\\\">null</span>) {\\n            bp = bp.next;\\n        }\\n    }\\n    <span class=\\\"hljs-keyword\\\">if</span> (carry) {\\n        l2.next = <span class=\\\"hljs-keyword\\\">new</span> <span class=\\\"hljs-title class_\\\">ListNode</span>(<span class=\\\"hljs-number\\\">1</span>);\\n    }\\n    <span class=\\\"hljs-keyword\\\">return</span> l1;\\n}\\n</code></pre>\\n<h3 id=\\\"3-longest-substringmedium\\\">3. Longest Substring(Medium)</h3>\\n<p>Given a string, find the length of the <strong>longest substring</strong> without repeating characters.</p>\\n<p><strong>Example 1:</strong></p>\\n<pre><code>Input: &quot;abcabcbb&quot;\\nOutput: 3 \\nExplanation: The answer is &quot;abc&quot;, with the length of 3. \\n</code></pre>\\n<p><strong>Example 2:</strong></p>\\n<pre><code>Input: &quot;bbbbb&quot;\\nOutput: 1\\nExplanation: The answer is &quot;b&quot;, with the length of 1.\\n</code></pre>\\n<p><strong>Example 3:</strong></p>\\n<pre><code>Input: &quot;pwwkew&quot;\\nOutput: 3\\nExplanation: The answer is &quot;wke&quot;, with the length of 3. \\n             Note that the answer must be a substring, &quot;pwke&quot; is a subsequence and not a substring.\\n</code></pre>\\n<h4 id=\\\"ascii-mapping\\\">ascii mapping</h4>\\n<p>官方给出的解法，官方还给出了用HashMap和HashSet去解的</p>\\n<p><strong>ascii mapping</strong>这样的解法虽然知道<strong>第一目的</strong>是用ascii映射数组去记录上一次重复出现char的下标，但是官方的这个后续实现，不多看几眼，很难看出意图，所以我觉得这是一段没有灵魂的代码，里面的i、j已经完全没有灵魂了，难以理解</p>\\n<pre><code class=\\\"hljs language-java\\\"><span class=\\\"hljs-keyword\\\">public</span> <span class=\\\"hljs-keyword\\\">class</span> <span class=\\\"hljs-title class_\\\">Solution</span> {\\n    <span class=\\\"hljs-keyword\\\">public</span> <span class=\\\"hljs-type\\\">int</span> <span class=\\\"hljs-title function_\\\">lengthOfLongestSubstring</span><span class=\\\"hljs-params\\\">(String s)</span> {\\n        <span class=\\\"hljs-type\\\">int</span> <span class=\\\"hljs-variable\\\">n</span> <span class=\\\"hljs-operator\\\">=</span> s.length(), ans = <span class=\\\"hljs-number\\\">0</span>;\\n        <span class=\\\"hljs-type\\\">int</span>[] index = <span class=\\\"hljs-keyword\\\">new</span> <span class=\\\"hljs-title class_\\\">int</span>[<span class=\\\"hljs-number\\\">128</span>];\\n        <span class=\\\"hljs-keyword\\\">for</span> (<span class=\\\"hljs-type\\\">int</span> <span class=\\\"hljs-variable\\\">j</span> <span class=\\\"hljs-operator\\\">=</span> <span class=\\\"hljs-number\\\">0</span>, i = <span class=\\\"hljs-number\\\">0</span>; j &lt; n; j++) {\\n            i = Math.max(index[s.charAt(j)], i);\\n            ans = Math.max(ans, j - i + <span class=\\\"hljs-number\\\">1</span>);\\n            index[s.charAt(j)] = j + <span class=\\\"hljs-number\\\">1</span>;\\n        }\\n        <span class=\\\"hljs-keyword\\\">return</span> ans;\\n    }\\n}\\n</code></pre>\\n<p>还是解一下逻辑：</p>\\n<ol>\\n<li><p>既然有下标，可以考虑用<strong>下标差</strong>去计算长度，而不是count出来</p>\\n</li>\\n<li><p>假设要表达的字符序列只在<strong>ascii-128</strong>中出现，于是我们可以用<strong>hash</strong>的方式，给出一个128位的数组<code>index</code>，数组用来记录<strong>上一次重复出现该ascii码字符的index的下一位（<code>index[s.charAt(j)] = j + 1</code>）</strong>，为什么是下一位？因为既然已经重复了，就从下一位开始计算所求序列</p>\\n<p> 比如说<strong>“a”</strong>这个序列，<strong>a</strong>的<strong>ascii</strong>是97，所以在<code>index</code>的97号上找index，这时候是0</p>\\n</li>\\n<li><p><strong>i</strong>的作用：获取最靠近<code>j</code>的<strong>有过重复的字符index的下一位</strong>，比如序列<strong>“abca”</strong>，当J循环到最后一个a的时候，i的值是上一个有过重复的a的index的下一位</p>\\n</li>\\n</ol>\\n<h3 id=\\\"4-median-of-two-sorted-arrayshard\\\">4. Median of Two Sorted Arrays(Hard)</h3>\\n<p>There are two sorted arrays <strong>nums1</strong> and <strong>nums2</strong> of size m and n respectively.</p>\\n<p>Find the median of the two sorted arrays. The overall run time complexity should be O(log (m+n)).</p>\\n<p>You may assume <strong>nums1</strong> and <strong>nums2</strong> cannot be both empty.</p>\\n<p><strong>Example 1:</strong></p>\\n<pre><code>nums1 = [1, 3]\\nnums2 = [2]\\n\\nThe median is 2.0\\n</code></pre>\\n<p><strong>Example 2:</strong></p>\\n<pre><code>nums1 = [1, 2]\\nnums2 = [3, 4]\\n\\nThe median is (2 + 3)/2 = 2.5\\n</code></pre>\\n<p>这道题难就难在要找到**O(log (m+n))**的解，说到已排好序、log级，自然而然想到二分法，关键是怎么对两个已排序的数组进行统一二分法，找到中位数</p>\\n<p>在此先给出容易想到但是不符合题意的解**(n+m)/2**解</p>\\n<h4 id=\\\"ⅰa-nm2-solution\\\">Ⅰ.a (n+m)/2 solution</h4>\\n<p>分别从两个数组中取最小的数，然后取到两数组长度中位之后，自然就找到中位数了</p>\\n<pre><code class=\\\"hljs language-java\\\"><span class=\\\"hljs-keyword\\\">public</span> <span class=\\\"hljs-type\\\">double</span> <span class=\\\"hljs-title function_\\\">findMedianSortedArrays</span><span class=\\\"hljs-params\\\">(<span class=\\\"hljs-type\\\">int</span>[] nums1, <span class=\\\"hljs-type\\\">int</span>[] nums2)</span> {\\n    <span class=\\\"hljs-keyword\\\">if</span> (nums1.length &lt; nums2.length) {\\n        <span class=\\\"hljs-keyword\\\">return</span> findMedianSortedArrays(nums2, nums1);\\n    }\\n    <span class=\\\"hljs-type\\\">int</span> <span class=\\\"hljs-variable\\\">lengthSum</span> <span class=\\\"hljs-operator\\\">=</span> nums1.length + nums2.length;\\n    <span class=\\\"hljs-type\\\">int</span> <span class=\\\"hljs-variable\\\">mi</span> <span class=\\\"hljs-operator\\\">=</span> lengthSum / <span class=\\\"hljs-number\\\">2</span>;\\n    <span class=\\\"hljs-type\\\">int</span> <span class=\\\"hljs-variable\\\">p1</span> <span class=\\\"hljs-operator\\\">=</span> <span class=\\\"hljs-number\\\">0</span>, p2 = <span class=\\\"hljs-number\\\">0</span>;\\n    <span class=\\\"hljs-type\\\">int</span>[] tar = <span class=\\\"hljs-keyword\\\">new</span> <span class=\\\"hljs-title class_\\\">int</span>[mi + <span class=\\\"hljs-number\\\">1</span>];\\n    <span class=\\\"hljs-keyword\\\">for</span> (<span class=\\\"hljs-type\\\">int</span> <span class=\\\"hljs-variable\\\">i</span> <span class=\\\"hljs-operator\\\">=</span> <span class=\\\"hljs-number\\\">0</span> ; i &lt;= mi; i++) {\\n        <span class=\\\"hljs-keyword\\\">if</span> (p1 == nums1 .length) {\\n            tar[i] = nums2[p2];\\n            <span class=\\\"hljs-keyword\\\">continue</span>;\\n        }\\n        <span class=\\\"hljs-keyword\\\">if</span> (p1 &lt;= nums1.length - <span class=\\\"hljs-number\\\">1</span> && p2 &lt;= nums2.length - <span class=\\\"hljs-number\\\">1</span>) {\\n            <span class=\\\"hljs-keyword\\\">if</span> (nums1[p1] &gt; nums2[p2]) {\\n                tar[i] = nums2[p2];\\n                p2++;\\n            } <span class=\\\"hljs-keyword\\\">else</span> <span class=\\\"hljs-keyword\\\">if</span> (nums1[p1] &lt; nums2[p2]) {\\n                tar[i] = nums1[p1];\\n                p1++;\\n            } <span class=\\\"hljs-keyword\\\">else</span> {\\n                tar[i++] = nums1[p1];\\n                <span class=\\\"hljs-keyword\\\">if</span> (i &lt; tar.length) {\\n                    tar[i] = nums1[p1];\\n                }\\n                p1++;\\n                p2++;\\n            }\\n        } <span class=\\\"hljs-keyword\\\">else</span> {\\n            tar[i] = nums1[p1];\\n            p1++;\\n        }\\n    }\\n    <span class=\\\"hljs-keyword\\\">if</span> (lengthSum % <span class=\\\"hljs-number\\\">2</span> == <span class=\\\"hljs-number\\\">0</span>) {\\n        <span class=\\\"hljs-type\\\">double</span> <span class=\\\"hljs-variable\\\">a</span> <span class=\\\"hljs-operator\\\">=</span> tar[tar.length - <span class=\\\"hljs-number\\\">1</span>];\\n        <span class=\\\"hljs-type\\\">double</span> <span class=\\\"hljs-variable\\\">b</span> <span class=\\\"hljs-operator\\\">=</span> tar[tar.length - <span class=\\\"hljs-number\\\">2</span>];\\n        <span class=\\\"hljs-keyword\\\">return</span> (a + b) / <span class=\\\"hljs-number\\\">2</span>;\\n    } <span class=\\\"hljs-keyword\\\">else</span> {\\n        <span class=\\\"hljs-keyword\\\">return</span> tar[tar.length - <span class=\\\"hljs-number\\\">1</span>];\\n    }\\n}\\n</code></pre>\\n<h4 id=\\\"ⅱ-logmn-solution\\\">Ⅱ. log(m+n) solution</h4>\\n<p>对数级解非常不容易找出来，我觉得能解出来的都是数学家- -</p>\\n<p>对数级解决方案有2种，一种是<strong>泛化为“findKth”问题</strong>，另一种是<strong>“分治法寻找perfect I”</strong></p>\\n<h5 id=\\\"perfect-i\\\">Perfect I</h5>\\n<p>官方给出的<a href=\\\"https://leetcode.com/problems/median-of-two-sorted-arrays/solution/\\\">solution</a>就是它，为了解这个问题，首先我们从统计学上去了解一下什么是<strong>Medium</strong></p>\\n<blockquote>\\n<p>Dividing a set into two equal length subsets, that one subset is always greater than the other.</p>\\n<p>它将原集合分成等长的两个子集，其中一个子集中的任意元素总是大于另一个子集中的任意元素</p>\\n</blockquote>\\n<p>然后我们再了解一个<strong>切（Cut）</strong>的概念：</p>\\n<p>假设长度为m的A集合有随机一个<strong>cut</strong>出现在下标i的位置，那么有<strong>m + 1</strong>种可能的<strong>cut（0 ~ m）</strong></p>\\n<pre><code class=\\\"hljs language-nhi\\\">left_A                   |  right_A\\nA[0], A[1], ..., A[i-1]  |  A[i], A[i+1], ..., A[m-1]\\n</code></pre>\\n<p>其中：</p>\\n<ul>\\n<li><p>len(left_A) = i, len(right_A) = m − i</p>\\n</li>\\n<li><p>when i = 0, <strong>left_A</strong> is empty, and when i = m, <strong>right_A</strong> is empty</p>\\n</li>\\n</ul>\\n<p>类似地，对B我们可以：</p>\\n<pre><code class=\\\"hljs language-nhi\\\">left_B                   |  right_B\\nB[0], B[1], ..., B[j-1]  |  B[j], B[j+1], ..., B[n-1]\\n</code></pre>\\n<p>A、B连在一起看，我们得出：</p>\\n<pre><code class=\\\"hljs language-nhi\\\">left_part                |  right_part\\nA[0], A[1], ..., A[i-1]  |  A[i], A[i+1], ..., A[m-1]\\nB[0], B[1], ..., B[j-1]  |  B[j], B[j+1], ..., B[n-1]\\n</code></pre>\\n<p>对于总集长度为偶数时，如果我们可以找到如下<strong>两个条件</strong>：\\n<span class=\\\"katex-display katexp\\\"><span class=\\\"katex-display\\\"><span class=\\\"katex\\\"><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:3em;vertical-align:-1.25em;\\\"></span><span class=\\\"mord\\\"><span class=\\\"mtable\\\"><span class=\\\"col-align-r\\\"><span class=\\\"vlist-t vlist-t2\\\"><span class=\\\"vlist-r\\\"><span class=\\\"vlist\\\" style=\\\"height:1.75em;\\\"><span style=\\\"top:-3.91em;\\\"><span class=\\\"pstrut\\\" style=\\\"height:3em;\\\"></span><span class=\\\"mord\\\"><span class=\\\"mord\\\">1.</span><span class=\\\"mspace\\\" style=\\\"margin-right:1em;\\\"></span></span></span><span style=\\\"top:-2.41em;\\\"><span class=\\\"pstrut\\\" style=\\\"height:3em;\\\"></span><span class=\\\"mord\\\"><span class=\\\"mord\\\">2.</span><span class=\\\"mspace\\\" style=\\\"margin-right:1em;\\\"></span></span></span></span><span class=\\\"vlist-s\\\">​</span></span><span class=\\\"vlist-r\\\"><span class=\\\"vlist\\\" style=\\\"height:1.25em;\\\"><span></span></span></span></span></span><span class=\\\"col-align-l\\\"><span class=\\\"vlist-t vlist-t2\\\"><span class=\\\"vlist-r\\\"><span class=\\\"vlist\\\" style=\\\"height:1.75em;\\\"><span style=\\\"top:-3.91em;\\\"><span class=\\\"pstrut\\\" style=\\\"height:3em;\\\"></span><span class=\\\"mord\\\"><span class=\\\"mord\\\"></span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.01968em;\\\">l</span><span class=\\\"mord mathnormal\\\">e</span><span class=\\\"mord mathnormal\\\">n</span><span class=\\\"mopen\\\">(</span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.01968em;\\\">l</span><span class=\\\"mord mathnormal\\\">e</span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.10764em;\\\">f</span><span class=\\\"mord mathnormal\\\">t</span><span class=\\\"mord\\\" style=\\\"margin-right:0.02778em;\\\">_</span><span class=\\\"mord mathnormal\\\">p</span><span class=\\\"mord mathnormal\\\">a</span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.02778em;\\\">r</span><span class=\\\"mord mathnormal\\\">t</span><span class=\\\"mclose\\\">)</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2778em;\\\"></span><span class=\\\"mrel\\\">=</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2778em;\\\"></span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.01968em;\\\">l</span><span class=\\\"mord mathnormal\\\">e</span><span class=\\\"mord mathnormal\\\">n</span><span class=\\\"mopen\\\">(</span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.02778em;\\\">r</span><span class=\\\"mord mathnormal\\\">i</span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.03588em;\\\">g</span><span class=\\\"mord mathnormal\\\">h</span><span class=\\\"mord mathnormal\\\">t</span><span class=\\\"mord\\\" style=\\\"margin-right:0.02778em;\\\">_</span><span class=\\\"mord mathnormal\\\">p</span><span class=\\\"mord mathnormal\\\">a</span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.02778em;\\\">r</span><span class=\\\"mord mathnormal\\\">t</span><span class=\\\"mclose\\\">)</span></span></span><span style=\\\"top:-2.41em;\\\"><span class=\\\"pstrut\\\" style=\\\"height:3em;\\\"></span><span class=\\\"mord\\\"><span class=\\\"mord\\\"></span><span class=\\\"mord mathnormal\\\">ma</span><span class=\\\"mord mathnormal\\\">x</span><span class=\\\"mopen\\\">(</span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.01968em;\\\">l</span><span class=\\\"mord mathnormal\\\">e</span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.10764em;\\\">f</span><span class=\\\"mord mathnormal\\\">t</span><span class=\\\"mord\\\" style=\\\"margin-right:0.02778em;\\\">_</span><span class=\\\"mord mathnormal\\\">p</span><span class=\\\"mord mathnormal\\\">a</span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.02778em;\\\">r</span><span class=\\\"mord mathnormal\\\">t</span><span class=\\\"mclose\\\">)</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2778em;\\\"></span><span class=\\\"mrel\\\">≤</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2778em;\\\"></span><span class=\\\"mord mathnormal\\\">min</span><span class=\\\"mopen\\\">(</span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.02778em;\\\">r</span><span class=\\\"mord mathnormal\\\">i</span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.03588em;\\\">g</span><span class=\\\"mord mathnormal\\\">h</span><span class=\\\"mord mathnormal\\\">t</span><span class=\\\"mord\\\" style=\\\"margin-right:0.02778em;\\\">_</span><span class=\\\"mord mathnormal\\\">p</span><span class=\\\"mord mathnormal\\\">a</span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.02778em;\\\">r</span><span class=\\\"mord mathnormal\\\">t</span><span class=\\\"mclose\\\">)</span></span></span></span><span class=\\\"vlist-s\\\">​</span></span><span class=\\\"vlist-r\\\"><span class=\\\"vlist\\\" style=\\\"height:1.25em;\\\"><span></span></span></span></span></span></span></span></span></span></span></span></span>\\n那么我们就等于将全集**{A, B}<strong>分为</strong>等长**的2部分，且左半部分中的元素总是比右半部分中的元素要小</p>\\n<p>此时集合的中位数为：\\n<span class=\\\"katex-display katexp\\\"><span class=\\\"katex-display\\\"><span class=\\\"katex\\\"><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.6944em;\\\"></span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.10903em;\\\">M</span><span class=\\\"mord mathnormal\\\">e</span><span class=\\\"mord mathnormal\\\">d</span><span class=\\\"mord mathnormal\\\">ian</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2778em;\\\"></span><span class=\\\"mrel\\\">=</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2778em;\\\"></span></span><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:2.136em;vertical-align:-0.686em;\\\"></span><span class=\\\"mord\\\"><span class=\\\"mopen nulldelimiter\\\"></span><span class=\\\"mfrac\\\"><span class=\\\"vlist-t vlist-t2\\\"><span class=\\\"vlist-r\\\"><span class=\\\"vlist\\\" style=\\\"height:1.45em;\\\"><span style=\\\"top:-2.314em;\\\"><span class=\\\"pstrut\\\" style=\\\"height:3em;\\\"></span><span class=\\\"mord\\\"><span class=\\\"mord\\\">2</span></span></span><span style=\\\"top:-3.23em;\\\"><span class=\\\"pstrut\\\" style=\\\"height:3em;\\\"></span><span class=\\\"frac-line\\\" style=\\\"border-bottom-width:0.04em;\\\"></span></span><span style=\\\"top:-3.7em;\\\"><span class=\\\"pstrut\\\" style=\\\"height:3em;\\\"></span><span class=\\\"mord\\\"><span class=\\\"mord mathnormal\\\">ma</span><span class=\\\"mord mathnormal\\\">x</span><span class=\\\"mopen\\\">(</span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.01968em;\\\">l</span><span class=\\\"mord mathnormal\\\">e</span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.10764em;\\\">f</span><span class=\\\"mord mathnormal\\\">t</span><span class=\\\"mord\\\" style=\\\"margin-right:0.02778em;\\\">_</span><span class=\\\"mord mathnormal\\\">p</span><span class=\\\"mord mathnormal\\\">a</span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.02778em;\\\">r</span><span class=\\\"mord mathnormal\\\">t</span><span class=\\\"mclose\\\">)</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2222em;\\\"></span><span class=\\\"mbin\\\">+</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2222em;\\\"></span><span class=\\\"mord mathnormal\\\">min</span><span class=\\\"mopen\\\">(</span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.02778em;\\\">r</span><span class=\\\"mord mathnormal\\\">i</span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.03588em;\\\">g</span><span class=\\\"mord mathnormal\\\">h</span><span class=\\\"mord mathnormal\\\">t</span><span class=\\\"mord\\\" style=\\\"margin-right:0.02778em;\\\">_</span><span class=\\\"mord mathnormal\\\">p</span><span class=\\\"mord mathnormal\\\">a</span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.02778em;\\\">r</span><span class=\\\"mord mathnormal\\\">t</span><span class=\\\"mclose\\\">)</span></span></span></span><span class=\\\"vlist-s\\\">​</span></span><span class=\\\"vlist-r\\\"><span class=\\\"vlist\\\" style=\\\"height:0.686em;\\\"><span></span></span></span></span></span><span class=\\\"mclose nulldelimiter\\\"></span></span></span></span></span></span></span>\\n对于总集长度为奇数时：\\n<span class=\\\"katex-display katexp\\\"><span class=\\\"katex-display\\\"><span class=\\\"katex\\\"><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:3em;vertical-align:-1.25em;\\\"></span><span class=\\\"mord\\\"><span class=\\\"mtable\\\"><span class=\\\"col-align-r\\\"><span class=\\\"vlist-t vlist-t2\\\"><span class=\\\"vlist-r\\\"><span class=\\\"vlist\\\" style=\\\"height:1.75em;\\\"><span style=\\\"top:-3.91em;\\\"><span class=\\\"pstrut\\\" style=\\\"height:3em;\\\"></span><span class=\\\"mord\\\"><span class=\\\"mord\\\">1.</span><span class=\\\"mspace\\\" style=\\\"margin-right:1em;\\\"></span></span></span><span style=\\\"top:-2.41em;\\\"><span class=\\\"pstrut\\\" style=\\\"height:3em;\\\"></span><span class=\\\"mord\\\"><span class=\\\"mord\\\">2.</span><span class=\\\"mspace\\\" style=\\\"margin-right:1em;\\\"></span></span></span></span><span class=\\\"vlist-s\\\">​</span></span><span class=\\\"vlist-r\\\"><span class=\\\"vlist\\\" style=\\\"height:1.25em;\\\"><span></span></span></span></span></span><span class=\\\"col-align-l\\\"><span class=\\\"vlist-t vlist-t2\\\"><span class=\\\"vlist-r\\\"><span class=\\\"vlist\\\" style=\\\"height:1.75em;\\\"><span style=\\\"top:-3.91em;\\\"><span class=\\\"pstrut\\\" style=\\\"height:3em;\\\"></span><span class=\\\"mord\\\"><span class=\\\"mord\\\"></span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.01968em;\\\">l</span><span class=\\\"mord mathnormal\\\">e</span><span class=\\\"mord mathnormal\\\">n</span><span class=\\\"mopen\\\">(</span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.01968em;\\\">l</span><span class=\\\"mord mathnormal\\\">e</span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.10764em;\\\">f</span><span class=\\\"mord mathnormal\\\">t</span><span class=\\\"mord\\\" style=\\\"margin-right:0.02778em;\\\">_</span><span class=\\\"mord mathnormal\\\">p</span><span class=\\\"mord mathnormal\\\">a</span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.02778em;\\\">r</span><span class=\\\"mord mathnormal\\\">t</span><span class=\\\"mclose\\\">)</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2778em;\\\"></span><span class=\\\"mrel\\\">=</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2778em;\\\"></span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.01968em;\\\">l</span><span class=\\\"mord mathnormal\\\">e</span><span class=\\\"mord mathnormal\\\">n</span><span class=\\\"mopen\\\">(</span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.02778em;\\\">r</span><span class=\\\"mord mathnormal\\\">i</span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.03588em;\\\">g</span><span class=\\\"mord mathnormal\\\">h</span><span class=\\\"mord mathnormal\\\">t</span><span class=\\\"mord\\\" style=\\\"margin-right:0.02778em;\\\">_</span><span class=\\\"mord mathnormal\\\">p</span><span class=\\\"mord mathnormal\\\">a</span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.02778em;\\\">r</span><span class=\\\"mord mathnormal\\\">t</span><span class=\\\"mclose\\\">)</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2222em;\\\"></span><span class=\\\"mbin\\\">+</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2222em;\\\"></span><span class=\\\"mord\\\">1</span></span></span><span style=\\\"top:-2.41em;\\\"><span class=\\\"pstrut\\\" style=\\\"height:3em;\\\"></span><span class=\\\"mord\\\"><span class=\\\"mord\\\"></span><span class=\\\"mord mathnormal\\\">ma</span><span class=\\\"mord mathnormal\\\">x</span><span class=\\\"mopen\\\">(</span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.01968em;\\\">l</span><span class=\\\"mord mathnormal\\\">e</span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.10764em;\\\">f</span><span class=\\\"mord mathnormal\\\">t</span><span class=\\\"mord\\\" style=\\\"margin-right:0.02778em;\\\">_</span><span class=\\\"mord mathnormal\\\">p</span><span class=\\\"mord mathnormal\\\">a</span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.02778em;\\\">r</span><span class=\\\"mord mathnormal\\\">t</span><span class=\\\"mclose\\\">)</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2778em;\\\"></span><span class=\\\"mrel\\\">≤</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2778em;\\\"></span><span class=\\\"mord mathnormal\\\">min</span><span class=\\\"mopen\\\">(</span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.02778em;\\\">r</span><span class=\\\"mord mathnormal\\\">i</span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.03588em;\\\">g</span><span class=\\\"mord mathnormal\\\">h</span><span class=\\\"mord mathnormal\\\">t</span><span class=\\\"mord\\\" style=\\\"margin-right:0.02778em;\\\">_</span><span class=\\\"mord mathnormal\\\">p</span><span class=\\\"mord mathnormal\\\">a</span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.02778em;\\\">r</span><span class=\\\"mord mathnormal\\\">t</span><span class=\\\"mclose\\\">)</span></span></span></span><span class=\\\"vlist-s\\\">​</span></span><span class=\\\"vlist-r\\\"><span class=\\\"vlist\\\" style=\\\"height:1.25em;\\\"><span></span></span></span></span></span></span></span></span></span></span></span></span>\\n注意，<strong>等长</strong>概念在偶数全集里面比较容易展现，即左右两边元素个数相同，而在奇数集合里面，约定<strong>左集合比右集合多一个</strong>，所以奇数集合的中位数总是<strong>左集合中最大的那一个</strong></p>\\n<p>此时集合的中位数为：\\n<span class=\\\"katex-display katexp\\\"><span class=\\\"katex-display\\\"><span class=\\\"katex\\\"><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.6944em;\\\"></span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.10903em;\\\">M</span><span class=\\\"mord mathnormal\\\">e</span><span class=\\\"mord mathnormal\\\">d</span><span class=\\\"mord mathnormal\\\">ian</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2778em;\\\"></span><span class=\\\"mrel\\\">=</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2778em;\\\"></span></span><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:1.06em;vertical-align:-0.31em;\\\"></span><span class=\\\"mord mathnormal\\\">ma</span><span class=\\\"mord mathnormal\\\">x</span><span class=\\\"mopen\\\">(</span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.01968em;\\\">l</span><span class=\\\"mord mathnormal\\\">e</span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.10764em;\\\">f</span><span class=\\\"mord mathnormal\\\">t</span><span class=\\\"mord\\\" style=\\\"margin-right:0.02778em;\\\">_</span><span class=\\\"mord mathnormal\\\">p</span><span class=\\\"mord mathnormal\\\">a</span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.02778em;\\\">r</span><span class=\\\"mord mathnormal\\\">t</span><span class=\\\"mclose\\\">)</span></span></span></span></span></span>\\n于是我们按照以下步骤进行切点的寻找：</p>\\n<ol>\\n<li><p>总是以较短的集合作为A集合，以短集合的长度去寻找<strong>Cut</strong></p>\\n</li>\\n<li><p>设置<code>iMin=0</code>，<code>iMax=m</code>，在<code>[iMin, iMax]</code>中寻找<strong>Cut</strong></p>\\n</li>\\n<li><p><code>i</code>为A的<strong>Cut</strong>，它等于<code>(iMin + iMax) / 2</code>; <code>j</code>为B的<strong>Cut</strong>，它等于<code>(m + n + 1) / 2 -i </code></p>\\n</li>\\n<li><p>现在我们切好了，满足了等长条件，于是我们判断切点是否是我们想要的，这将会有3种情况：</p>\\n<ul>\\n<li><p><code>B[j - 1] &lt;= A[i] && A[i - 1] &gt;= B[j]</code>：</p>\\n<p>意味着满足了条件二了，<code>i</code>和<code>j</code>正是我们要找的<strong>切点</strong>，找到了切点，就判断全集长度的奇偶性，从而求出<strong>Medium</strong></p>\\n<blockquote>\\n<p>我们来分析一下：</p>\\n</blockquote>\\n</li>\\n</ul>\\n</li>\\n</ol>\\n<blockquote>\\n</blockquote>\\n<pre><code> &gt; 对于左边集合，我们需要找`maxLeft`，对于左边的集合来说，`i`和`j`任意一个切点如果顶到0下标了，那么左边集合最大值肯定在对方那里，比如`i`等于0的时候，左边集合最大的数字肯定在`B[j - 1]`处，如果两个切点都没顶格，那么有`maxLeft = Math.max(A[i-1], B[j-1])`\\n</code></pre>\\n<blockquote>\\n</blockquote>\\n<pre><code> &gt; 对于右边集合，同样如此，如果顶格（`i = m`或者`j = n`）了的话，右边集合的最小值肯定在对方那里，否则就取`minRight = Math.min(B[j], A[i])`\\n</code></pre>\\n<blockquote>\\n</blockquote>\\n<pre><code> &gt; 然后根据`m + n`的奇偶性求得中位数\\n</code></pre>\\n<ul>\\n<li><p>如果<code>i &lt; iMax </code>并且<code>A[i] &lt; B[j - 1]  </code>：</p>\\n<p>表示此时<code>i</code>还能继续往大的方向走，并且此时左边最大的数字大于右边最小的数字，此时意味着<code>i</code>找小了，所以这时候将<code>iMin</code>加1，这时：</p>\\n<blockquote>\\n<p><code>i</code>切点会往后挪，把<code>A[i]</code>退回左边集合，<code>j</code>相应地会往前挪，然后把<code>B[j - 1]</code>收进右边集合；</p>\\n</blockquote>\\n</li>\\n<li><p>如果<code>i &gt; iMin </code>并且<code>A[i-1] &gt; B[j]</code>：</p>\\n<p>表示此时<code>i</code>还能继续往小的方向走，并且此时左边最大的数字大于右边最的数字，此时意味着<code>i</code>找大了，这时候将<code>iMax</code>减1，这时：</p>\\n<blockquote>\\n<p><code>i</code>切点会往前挪，把<code>A[i - 1]</code>收进右边集合，<code>j</code>相应地会往后挪，把<code>B[j]</code>退回到左边集合；</p>\\n</blockquote>\\n</li>\\n</ul>\\n<p>该题有两个需要注意的约定：</p>\\n<ol>\\n<li>奇数集合里面，约定<strong>左集合比右集合多一个</strong>；</li>\\n<li>保证A集合长度要小于等于B集合；</li>\\n</ol>\\n<p>题解：</p>\\n<pre><code class=\\\"hljs language-java\\\"><span class=\\\"hljs-keyword\\\">public</span> <span class=\\\"hljs-type\\\">double</span> <span class=\\\"hljs-title function_\\\">findMedianSortedArrays</span><span class=\\\"hljs-params\\\">(<span class=\\\"hljs-type\\\">int</span>[] A, <span class=\\\"hljs-type\\\">int</span>[] B)</span> {\\n    <span class=\\\"hljs-type\\\">int</span> <span class=\\\"hljs-variable\\\">m</span> <span class=\\\"hljs-operator\\\">=</span> A.length;\\n    <span class=\\\"hljs-type\\\">int</span> <span class=\\\"hljs-variable\\\">n</span> <span class=\\\"hljs-operator\\\">=</span> B.length;\\n    <span class=\\\"hljs-comment\\\">// to ensure m&lt;=n</span>\\n    <span class=\\\"hljs-keyword\\\">if</span> (m &gt; n) {\\n        <span class=\\\"hljs-keyword\\\">return</span> findMedianSortedArrays(B, A);\\n    }\\n    <span class=\\\"hljs-type\\\">int</span> <span class=\\\"hljs-variable\\\">iMin</span> <span class=\\\"hljs-operator\\\">=</span> <span class=\\\"hljs-number\\\">0</span>, iMax = m, halfLen = (m + n + <span class=\\\"hljs-number\\\">1</span>) / <span class=\\\"hljs-number\\\">2</span>;\\n    <span class=\\\"hljs-keyword\\\">while</span> (iMin &lt;= iMax) {\\n        <span class=\\\"hljs-type\\\">int</span> <span class=\\\"hljs-variable\\\">i</span> <span class=\\\"hljs-operator\\\">=</span> (iMin + iMax) / <span class=\\\"hljs-number\\\">2</span>;\\n        <span class=\\\"hljs-type\\\">int</span> <span class=\\\"hljs-variable\\\">j</span> <span class=\\\"hljs-operator\\\">=</span> halfLen - i;\\n        <span class=\\\"hljs-keyword\\\">if</span> (i &lt; iMax && B[j-<span class=\\\"hljs-number\\\">1</span>] &gt; A[i]){\\n            <span class=\\\"hljs-comment\\\">// i is too small</span>\\n            iMin = i + <span class=\\\"hljs-number\\\">1</span>;\\n        } <span class=\\\"hljs-keyword\\\">else</span> <span class=\\\"hljs-keyword\\\">if</span> (i &gt; iMin && A[i-<span class=\\\"hljs-number\\\">1</span>] &gt; B[j]) {\\n            <span class=\\\"hljs-comment\\\">// i is too big</span>\\n            iMax = i - <span class=\\\"hljs-number\\\">1</span>;\\n        } <span class=\\\"hljs-keyword\\\">else</span> {\\n            <span class=\\\"hljs-comment\\\">// i is perfect</span>\\n            <span class=\\\"hljs-type\\\">int</span> maxLeft;\\n            <span class=\\\"hljs-keyword\\\">if</span> (i == <span class=\\\"hljs-number\\\">0</span>) { maxLeft = B[j-<span class=\\\"hljs-number\\\">1</span>]; }\\n            <span class=\\\"hljs-keyword\\\">else</span> <span class=\\\"hljs-keyword\\\">if</span> (j == <span class=\\\"hljs-number\\\">0</span>) { maxLeft = A[i-<span class=\\\"hljs-number\\\">1</span>]; }\\n            <span class=\\\"hljs-keyword\\\">else</span> { maxLeft = Math.max(A[i-<span class=\\\"hljs-number\\\">1</span>], B[j-<span class=\\\"hljs-number\\\">1</span>]); }\\n            <span class=\\\"hljs-keyword\\\">if</span> ( (m + n) % <span class=\\\"hljs-number\\\">2</span> == <span class=\\\"hljs-number\\\">1</span> ) { <span class=\\\"hljs-keyword\\\">return</span> maxLeft; }\\n\\n            <span class=\\\"hljs-type\\\">int</span> minRight;\\n            <span class=\\\"hljs-keyword\\\">if</span> (i == m) { minRight = B[j]; }\\n            <span class=\\\"hljs-keyword\\\">else</span> <span class=\\\"hljs-keyword\\\">if</span> (j == n) { minRight = A[i]; }\\n            <span class=\\\"hljs-keyword\\\">else</span> { minRight = Math.min(B[j], A[i]); }\\n\\n            <span class=\\\"hljs-keyword\\\">return</span> (maxLeft + minRight) / <span class=\\\"hljs-number\\\">2.0</span>;\\n        }\\n    }\\n    <span class=\\\"hljs-keyword\\\">return</span> <span class=\\\"hljs-number\\\">0.0</span>;\\n}\\n\\n<span class=\\\"hljs-comment\\\">// show cut when perfect i was found</span>\\n<span class=\\\"hljs-comment\\\">// eg: A[1, 8, 20, 55, 77] B[2, 4, 5, 9, 23, 27, 85, 152, 964]</span>\\n<span class=\\\"hljs-comment\\\">//</span>\\n<span class=\\\"hljs-comment\\\">// cut:3 --&gt; [1, 8, 20] | [55, 77]</span>\\n<span class=\\\"hljs-comment\\\">// cut:4 --&gt; [2, 4, 5, 9] | [23, 27, 85, 152, 964]</span>\\n<span class=\\\"hljs-keyword\\\">public</span> <span class=\\\"hljs-keyword\\\">void</span> <span class=\\\"hljs-title function_\\\">showCut</span><span class=\\\"hljs-params\\\">(<span class=\\\"hljs-type\\\">int</span>[] arr, <span class=\\\"hljs-type\\\">int</span> cutIndex)</span> {\\n    <span class=\\\"hljs-type\\\">int</span>[] leftPart = <span class=\\\"hljs-keyword\\\">new</span> <span class=\\\"hljs-title class_\\\">int</span>[cutIndex];\\n    <span class=\\\"hljs-type\\\">int</span>[] rightPart = <span class=\\\"hljs-keyword\\\">new</span> <span class=\\\"hljs-title class_\\\">int</span>[arr.length - cutIndex];\\n    System.arraycopy(arr, <span class=\\\"hljs-number\\\">0</span>, leftPart, <span class=\\\"hljs-number\\\">0</span>, cutIndex);\\n    System.arraycopy(arr, cutIndex, rightPart, <span class=\\\"hljs-number\\\">0</span>, arr.length - cutIndex);\\n    System.out.println(<span class=\\\"hljs-string\\\">&quot;cut:&quot;</span> + cutIndex + <span class=\\\"hljs-string\\\">&quot; --&gt; &quot;</span> + Arrays.toString(leftPart) + <span class=\\\"hljs-string\\\">&quot; | &quot;</span> + Arrays.toString(rightPart));\\n}\\n</code></pre>\\n<h3 id=\\\"5-longest-palindromic-substring\\\">5. Longest Palindromic Substring</h3>\\n<p>Given a string <strong>s</strong>, find the longest palindromic substring in <strong>s</strong>. You may assume that the maximum length of <strong>s</strong> is 1000.</p>\\n<p><strong>Example 1:</strong></p>\\n<pre><code>Input: &quot;babad&quot;\\nOutput: &quot;bab&quot;\\nNote: &quot;aba&quot; is also a valid answer.\\n</code></pre>\\n<p><strong>Example 2:</strong></p>\\n<pre><code>Input: &quot;cbbd&quot;\\nOutput: &quot;bb&quot;\\n</code></pre>\\n<p><strong>Example 3:</strong></p>\\n<pre><code>Input: &quot;ab&quot;\\nOutput: &quot;a&quot;\\n</code></pre>\\n<p><strong>Example 4:</strong></p>\\n<pre><code>Input: &quot;&quot;\\nOutput: &quot;&quot;\\n</code></pre>\\n<h4 id=\\\"60ms-solution-beat-33\\\">60+ms Solution (Beat 33%)</h4>\\n<p>因为String <strong>s</strong>是一个char数组，我们以遍历这个数组为基础，当我们在位置<code>i</code>碰到一个char的时候，就找它下一次出现的位置<code>j</code>，那么我们就可以继续数组子序列<code>[i, j]</code>是否是回文串，由此找到一个可能的解；然后再以<code>j+1</code>开始，再找下一个<code>j</code>，于是代码可以是：</p>\\n<pre><code class=\\\"hljs language-java\\\"><span class=\\\"hljs-keyword\\\">public</span> <span class=\\\"hljs-type\\\">boolean</span> <span class=\\\"hljs-title function_\\\">isPalindrome</span><span class=\\\"hljs-params\\\">(<span class=\\\"hljs-type\\\">char</span>[] src, <span class=\\\"hljs-type\\\">int</span> begin, <span class=\\\"hljs-type\\\">int</span> end)</span> {\\n    <span class=\\\"hljs-keyword\\\">while</span>(begin &lt; end) {\\n        <span class=\\\"hljs-keyword\\\">if</span>(src[begin++] != src[end--]) {\\n            <span class=\\\"hljs-keyword\\\">return</span> <span class=\\\"hljs-literal\\\">false</span>;\\n        }\\n    }\\n    <span class=\\\"hljs-keyword\\\">return</span> <span class=\\\"hljs-literal\\\">true</span>;\\n}\\n\\n<span class=\\\"hljs-keyword\\\">public</span> String <span class=\\\"hljs-title function_\\\">longestPalindrome</span><span class=\\\"hljs-params\\\">(String s)</span> {\\n    <span class=\\\"hljs-type\\\">char</span>[] chars = s.toCharArray();\\n    <span class=\\\"hljs-keyword\\\">if</span> (chars.length == <span class=\\\"hljs-number\\\">1</span>) {\\n        <span class=\\\"hljs-keyword\\\">return</span> s;\\n    }\\n    <span class=\\\"hljs-type\\\">int</span> <span class=\\\"hljs-variable\\\">start</span> <span class=\\\"hljs-operator\\\">=</span> <span class=\\\"hljs-number\\\">0</span>, end = <span class=\\\"hljs-number\\\">0</span>;\\n    <span class=\\\"hljs-keyword\\\">for</span> (<span class=\\\"hljs-type\\\">int</span> <span class=\\\"hljs-variable\\\">i</span> <span class=\\\"hljs-operator\\\">=</span> <span class=\\\"hljs-number\\\">0</span>; i &lt; chars.length; i++) {\\n        <span class=\\\"hljs-keyword\\\">if</span> (chars.length - i &lt; end - start + <span class=\\\"hljs-number\\\">1</span>) {\\n            <span class=\\\"hljs-keyword\\\">break</span>;\\n        }\\n        <span class=\\\"hljs-type\\\">char</span> <span class=\\\"hljs-variable\\\">nowC</span> <span class=\\\"hljs-operator\\\">=</span> chars[i];\\n        <span class=\\\"hljs-type\\\">int</span> <span class=\\\"hljs-variable\\\">next</span> <span class=\\\"hljs-operator\\\">=</span> i;\\n        <span class=\\\"hljs-keyword\\\">do</span> {\\n            next = s.indexOf(nowC, next + <span class=\\\"hljs-number\\\">1</span>);\\n            <span class=\\\"hljs-keyword\\\">if</span> (next - i + <span class=\\\"hljs-number\\\">1</span> &lt; end - start + <span class=\\\"hljs-number\\\">1</span>) {\\n                <span class=\\\"hljs-keyword\\\">continue</span>;\\n            }\\n            <span class=\\\"hljs-keyword\\\">if</span> (next &gt; <span class=\\\"hljs-number\\\">0</span>) {\\n                <span class=\\\"hljs-keyword\\\">if</span> (next - i + <span class=\\\"hljs-number\\\">2</span> &gt; end - start + <span class=\\\"hljs-number\\\">1</span> &&\\n                    isPalindrome(chars, i + <span class=\\\"hljs-number\\\">1</span>, next - <span class=\\\"hljs-number\\\">1</span>)) {\\n                    \\n                    start = i;\\n                    end = next + <span class=\\\"hljs-number\\\">1</span>;\\n                }\\n            }\\n        } <span class=\\\"hljs-keyword\\\">while</span> (next &gt; <span class=\\\"hljs-number\\\">0</span>);\\n    }\\n    <span class=\\\"hljs-keyword\\\">if</span> (end == <span class=\\\"hljs-number\\\">0</span> && chars.length != <span class=\\\"hljs-number\\\">0</span>) {\\n        <span class=\\\"hljs-keyword\\\">return</span> chars[<span class=\\\"hljs-number\\\">0</span>] + <span class=\\\"hljs-string\\\">&quot;&quot;</span>;\\n    }\\n    <span class=\\\"hljs-keyword\\\">return</span> s.substring(start, end);\\n}\\n</code></pre>\\n<p>解法的关键是do循环里面的<code>next = s.indexOf(nowC, next + 1)</code>，但也正是在这一步里，花费了大量的时间做了重复的工作，因为这里也是在遍历数组- -</p>\\n<h4 id=\\\"7-10ms-solution-beat-98\\\">7-10ms Solution (Beat 98%)</h4>\\n<p>我们换个思路，关于next的位置，我们不一定要通过遍历数组的方式去寻找下一个可能的end字符的下标，我们可以通过之前已经找到过的回文字符串的长度，来<strong>猜</strong>出下标</p>\\n<p>我们倒着来看（为什么倒着？后面解释），对于每个<code>i &gt; 0</code>，都有很多种可能说在<code>s[i]</code>就是一组回文数的end，那么这个可能性由什么去缩小？由一个<strong>既定的长度len</strong>来决定，我们倒着来看的话，<code>s[i - len + 1]</code>到<code>s[i]</code>之间的<strong>len</strong>长度子串如果是回文数的话，我们就马上找到了一组可能的解</p>\\n<p>那么这个<strong>既定的len</strong>怎么求？我们可以发现这个<strong>len</strong>最终就是我们想要的结果字串的长度，所以我们不妨从0开始，在序列<strong>至少有一个字符</strong>的时候，<strong>要找到比原len更长的解的话，我们的len需要再往前吃1位或者2位数字</strong>，如果还是要保持原<strong>len</strong>的话，是求不出解的，比如最开始<code>end = i = 0</code>的时候<code>start = i - len + 1 = 1</code>，这是无解</p>\\n<p>以<code>&quot;abcba&quot;</code>为例</p>\\n<p>我们尝试<strong>len</strong>往前吃1位，<code>end = i = 0</code>的时候<code>start = i - (len + 1)+ 1 = i - len = 0</code>，我们得到整个字符串的第一个字符<code>&#39;a&#39;</code>，它肯定是回文数，所以我们得到第一个解，**len++**，此时记录下<code>start</code>和<code>end</code></p>\\n<p>接下来我们以表格的形式来描述遍历过程，包含了往前吃2位的情况：</p>\\n<table>\\n<thead>\\n<tr>\\n<th align=\\\"center\\\">end = i</th>\\n<th align=\\\"center\\\">start = i - len - 1</th>\\n<th align=\\\"center\\\">start = i - len</th>\\n<th align=\\\"center\\\">string[start, end]</th>\\n<th align=\\\"center\\\">len</th>\\n</tr>\\n</thead>\\n<tbody><tr>\\n<td align=\\\"center\\\">0 = <code>&#39;a&#39;</code></td>\\n<td align=\\\"center\\\">-1 <strong>无解</strong></td>\\n<td align=\\\"center\\\">0</td>\\n<td align=\\\"center\\\">a</td>\\n<td align=\\\"center\\\">++后等于1</td>\\n</tr>\\n<tr>\\n<td align=\\\"center\\\">1= <code>&#39;b&#39;</code></td>\\n<td align=\\\"center\\\">-1 <strong>无解</strong></td>\\n<td align=\\\"center\\\">0</td>\\n<td align=\\\"center\\\">ab <strong>不是解</strong></td>\\n<td align=\\\"center\\\">还是1</td>\\n</tr>\\n<tr>\\n<td align=\\\"center\\\">2= <code>&#39;c&#39;</code></td>\\n<td align=\\\"center\\\">0</td>\\n<td align=\\\"center\\\">1</td>\\n<td align=\\\"center\\\">abc/bc <strong>都不是解</strong></td>\\n<td align=\\\"center\\\">1</td>\\n</tr>\\n<tr>\\n<td align=\\\"center\\\">3= <code>&#39;b&#39;</code></td>\\n<td align=\\\"center\\\">1</td>\\n<td align=\\\"center\\\">2</td>\\n<td align=\\\"center\\\">bcb <strong>是解</strong></td>\\n<td align=\\\"center\\\">吃两位得的解，所以len+=2 = 3</td>\\n</tr>\\n<tr>\\n<td align=\\\"center\\\">4= <code>&#39;a&#39;</code></td>\\n<td align=\\\"center\\\">0</td>\\n<td align=\\\"center\\\">1</td>\\n<td align=\\\"center\\\">abcba <strong>是解</strong></td>\\n<td align=\\\"center\\\">len+=2 = 5</td>\\n</tr>\\n</tbody></table>\\n<p>于是循环中的逻辑为：</p>\\n<pre><code class=\\\"hljs language-java\\\"><span class=\\\"hljs-keyword\\\">public</span> String <span class=\\\"hljs-title function_\\\">longestPalindrome</span><span class=\\\"hljs-params\\\">(String s)</span> {\\n    <span class=\\\"hljs-type\\\">char</span>[] ca = s.toCharArray();\\n    <span class=\\\"hljs-comment\\\">// handle &quot;&quot;</span>\\n    <span class=\\\"hljs-keyword\\\">if</span> (ca.length == <span class=\\\"hljs-number\\\">0</span>) {\\n        <span class=\\\"hljs-keyword\\\">return</span> <span class=\\\"hljs-string\\\">&quot;&quot;</span>;\\n    }\\n    <span class=\\\"hljs-type\\\">int</span> <span class=\\\"hljs-variable\\\">start</span> <span class=\\\"hljs-operator\\\">=</span> <span class=\\\"hljs-number\\\">0</span>, end = <span class=\\\"hljs-number\\\">0</span>;\\n    <span class=\\\"hljs-type\\\">int</span> <span class=\\\"hljs-variable\\\">len</span> <span class=\\\"hljs-operator\\\">=</span> <span class=\\\"hljs-number\\\">0</span>;\\n    <span class=\\\"hljs-keyword\\\">for</span>(<span class=\\\"hljs-type\\\">int</span> <span class=\\\"hljs-variable\\\">i</span> <span class=\\\"hljs-operator\\\">=</span> <span class=\\\"hljs-number\\\">0</span>; i &lt; ca.length; i++) {\\n        <span class=\\\"hljs-comment\\\">// eat 2</span>\\n        <span class=\\\"hljs-keyword\\\">if</span>(isPalindrome(ca, i - len - <span class=\\\"hljs-number\\\">1</span>, i)) {\\n            start = i - len - <span class=\\\"hljs-number\\\">1</span>; end = i;\\n            len += <span class=\\\"hljs-number\\\">2</span>;\\n        } \\n        <span class=\\\"hljs-comment\\\">// eat 1</span>\\n        <span class=\\\"hljs-keyword\\\">else</span> <span class=\\\"hljs-keyword\\\">if</span>(isPalindrome(ca, i - len, i)) {\\n            start = i - len; end = i;\\n            len += <span class=\\\"hljs-number\\\">1</span>;\\n        }\\n    }\\n    <span class=\\\"hljs-keyword\\\">return</span> s.substring(start, end + <span class=\\\"hljs-number\\\">1</span>);\\n}\\n\\n<span class=\\\"hljs-keyword\\\">private</span> <span class=\\\"hljs-type\\\">boolean</span> <span class=\\\"hljs-title function_\\\">isPalindrome</span><span class=\\\"hljs-params\\\">(<span class=\\\"hljs-type\\\">char</span>[] chars, <span class=\\\"hljs-type\\\">int</span> head, <span class=\\\"hljs-type\\\">int</span> tail)</span> {\\n    <span class=\\\"hljs-keyword\\\">if</span>(head &lt; <span class=\\\"hljs-number\\\">0</span>) {\\n        <span class=\\\"hljs-keyword\\\">return</span> <span class=\\\"hljs-literal\\\">false</span>;\\n    }\\n    <span class=\\\"hljs-keyword\\\">while</span>(head &lt; tail) {\\n        <span class=\\\"hljs-keyword\\\">if</span>(chars[head++] != chars[tail--]) {\\n            <span class=\\\"hljs-keyword\\\">return</span> <span class=\\\"hljs-literal\\\">false</span>;\\n        }\\n    }\\n    <span class=\\\"hljs-keyword\\\">return</span> <span class=\\\"hljs-literal\\\">true</span>;\\n}\\n</code></pre>\\n<h5 id=\\\"一点优化\\\">一点优化</h5>\\n<p>观察表中最后一行以及<code>isPalindrome</code>函数可以发现，判断<code>abcba</code>是否为回文串的时候，重复判断了<code>bcb</code>，而它已经在上一次被判断过了，于是我们可以将start和end提出去，让它们在下一次判断回文数的时候也能够使用，避免重复判断</p>\\n<p>在回文数判断函数中补上：</p>\\n<pre><code class=\\\"hljs language-java\\\"><span class=\\\"hljs-keyword\\\">private</span> <span class=\\\"hljs-type\\\">int</span> start, end;\\n<span class=\\\"hljs-keyword\\\">private</span> <span class=\\\"hljs-type\\\">boolean</span> <span class=\\\"hljs-title function_\\\">isPalindrome</span><span class=\\\"hljs-params\\\">(<span class=\\\"hljs-type\\\">char</span>[] chars, <span class=\\\"hljs-type\\\">int</span> head, <span class=\\\"hljs-type\\\">int</span> tail)</span> {\\n    <span class=\\\"hljs-keyword\\\">if</span>(head &lt; <span class=\\\"hljs-number\\\">0</span>) {\\n        <span class=\\\"hljs-keyword\\\">return</span> <span class=\\\"hljs-literal\\\">false</span>;\\n    }\\n    <span class=\\\"hljs-keyword\\\">if</span> (chars[head] == chars[tail] && start == head + <span class=\\\"hljs-number\\\">1</span> && end == tail - <span class=\\\"hljs-number\\\">1</span>) {\\n        <span class=\\\"hljs-keyword\\\">return</span> <span class=\\\"hljs-literal\\\">true</span>;\\n    }\\n    <span class=\\\"hljs-keyword\\\">while</span>(head &lt; tail) {\\n        <span class=\\\"hljs-keyword\\\">if</span>(chars[head++] != chars[tail--]) {\\n            <span class=\\\"hljs-keyword\\\">return</span> <span class=\\\"hljs-literal\\\">false</span>;\\n        }\\n    }\\n    <span class=\\\"hljs-keyword\\\">return</span> <span class=\\\"hljs-literal\\\">true</span>;\\n}\\n</code></pre>\\n\";","export default \"<h4 id=\\\"graduation-design\\\">Graduation Design</h4>\\n<ul>\\n<li><p>Title：Tracing Monitoring System of Kafka-Cluster with Opentracing API</p>\\n</li>\\n<li><p>Framework：B/S</p>\\n</li>\\n<li><p>Technology stack：</p>\\n<ul>\\n<li><p>back-end：</p>\\n<ul>\\n<li>Microservice：spring-boot</li>\\n<li>MessageSystem：kafka</li>\\n<li>TracingSystem：opentracing</li>\\n</ul>\\n</li>\\n<li><p>front-end：</p>\\n<ul>\\n<li>normal html/css/js</li>\\n</ul>\\n</li>\\n</ul>\\n</li>\\n</ul>\\n<h4 id=\\\"system-design：\\\">System Design：</h4>\\n<blockquote>\\n<h5 id=\\\"demo：\\\">Demo：</h5>\\n<ol>\\n<li><p>We got three microservice application :</p>\\n<ol>\\n<li>Service App</li>\\n<li>Logging App</li>\\n<li>DataBase App</li>\\n</ol>\\n<p>With their name we can easily figure out how this three work：<code>Service App </code>handle the <strong>USER Request</strong> and send <strong>CRUD Request</strong> to<code>DataBase App</code>，then get the <strong>Result</strong> from<code>DataBase App</code>，and every <strong>Request/Response Information</strong> between those two app were gonna <strong>send</strong> to the<code>Logging App</code>and <strong>log as record</strong>.</p>\\n</li>\\n<li><p>We got two pages：</p>\\n<ol>\\n<li>User pages：to serve for <strong>User</strong>，<strong>USER Requset</strong> was send from here</li>\\n<li>Logging pages：to show the system-operation-log to <strong>Apps manager</strong></li>\\n</ol>\\n</li>\\n</ol>\\n<h5 id=\\\"besides：\\\">Besides：</h5>\\n<ol>\\n<li><p>Every request/response/msg were transfered by message system ：<strong>Kafka Cluster</strong></p>\\n</li>\\n<li><p>Every request/response/msg were traced by tracing system ：<strong>Opentracing</strong></p>\\n<blockquote>\\n<p>so that we could know some information for a single **&quot;USER Requset process&quot;**，such as：</p>\\n<ol>\\n<li>processing timeout</li>\\n<li>msg transfer path</li>\\n<li>service line tracing</li>\\n<li>info/error/warning for single process</li>\\n<li>etc...</li>\\n</ol>\\n</blockquote>\\n</li>\\n</ol>\\n<h5 id=\\\"main-goal--result\\\">Main Goal & Result:</h5>\\n<p>We could see the tracing result on a **&quot;tracing monitoring page&quot;**，every <strong>&quot;USER Requset process&quot;</strong> are display on this page to assess our system&#39;s preformence</p>\\n</blockquote>\\n<h4 id=\\\"system-design-map\\\">System Design Map</h4>\\n<p><img src=\\\"../../../public/img/20181102231633.png\\\" alt=\\\"map\\\"></p>\\n<p>As the map show，the green arrows are request/response/msg，we will trace every msg from Kafka Producers/Consumers.</p>\\n\";","export default \"<h3 id=\\\"前言\\\">前言</h3>\\n<p>本书第二版为止，其实还是针对于 Java SE 7 Specification（后简称 Spec），然而到了 Java8，情况又有很大的不同，比如最出名的 Permanent Generation，就在 8 中被 HotSpot 虚拟机移除掉了，所以这一系列的文章，我后续还需要慢慢地研究和重写</p>\\n<p>然后是一篇关于 Java SE 7 Spec 的<a href=\\\"http://blog.jamesdbloom.com/JVMInternals.html#threads\\\">好文</a></p>\\n<h3 id=\\\"jvm-运行时数据区\\\">JVM 运行时数据区</h3>\\n<p>基本上整个第二章说的都是<strong>运行时数据取区</strong>,，Java 虚拟机在执行 Java 程序的时候,，会把它所管理的内存划分为若干个不同的数据区域</p>\\n<p>这些数据区域有<strong>各自的用途</strong>以及<strong>各自的生命周期</strong>(创建和销毁策略)</p>\\n<p><img src=\\\"../../../public/img/jvmRuntimeDataArea2.png\\\" alt=\\\"jvmRuntimeDataArea\\\"></p>\\n<p>我们得特别注意，这里我们再将<strong>JVM 的运行时数据区</strong>划分为：<strong>线程共享数据区</strong>，<strong>线程私有数据区</strong></p>\\n<h4 id=\\\"1-程序计数器（pcr）\\\">1. 程序计数器（PCR）</h4>\\n<h5 id=\\\"作用\\\">作用</h5>\\n<p>它可以看作是<strong>当前线程程序执行的字节码的行号指示器</strong></p>\\n<p>字节码解释器工作的时候，就是通过改变这个计数器里的值来选取下一条需要执行的字节码指令，程序的分支、循环、跳转、异常处理、线程恢复等基础功能都需要依赖计数器</p>\\n<h5 id=\\\"特点\\\">特点</h5>\\n<ul>\\n<li><strong>内存较小</strong></li>\\n<li><strong>线程私有</strong>：每条线程都有自己的独立的程序计数器，各线程之间的计数器互不影响，独立存储</li>\\n<li><strong>仅面对 Java 方法计数</strong>：如果线程执行的是 Java 方法，则计数器有记录，记录的是所执行字节码的指令地址，如果执行的是 Native 方法，则计数器记录为空</li>\\n<li><strong>不会内存溢出</strong>：则个区域是 JVM 中唯一不会出<code>OutOfMemoryError</code>的地方</li>\\n</ul>\\n<h4 id=\\\"2-java-虚拟机栈（jvm-stack）\\\">2. Java 虚拟机栈（JVM Stack）</h4>\\n<h5 id=\\\"作用-1\\\">作用</h5>\\n<p>虚拟机栈描述的是<strong>Java 方法执行（注意是方法执行）的内存模型</strong></p>\\n<p>当<strong>每个方法执行的同时</strong>，<strong>会创建一个栈帧（Stack Frame）</strong>用于存放<u><strong>局部变量表（这个表就是我们 Java 程序员常说的栈内存所在）</strong></u>、<u><strong>操作数栈</strong></u>、**<u>动态链接</u><strong>、</strong><u>方法出口</u>**等信息</p>\\n<p>每个方法从<strong>调用</strong>到<strong>执行完成的过程</strong>，就对应着一个栈帧在虚拟机栈中入栈到出栈</p>\\n<h5 id=\\\"局部变量表\\\">局部变量表</h5>\\n<h6 id=\\\"存放内容\\\">存放内容</h6>\\n<p>这里存放了编译期可知的各种：</p>\\n<ul>\\n<li><strong>基本数据类型</strong>（boolean、byte、char、short、int、float、long、double）</li>\\n<li><strong>对象引用（reference 类型， 这个是重点，它不同于对象本身，它可能是一个指向对象起始地址的引用指针，也可能是指向一个代表对象的句柄或其他和此对象相关的位置）</strong></li>\\n<li><strong>returnAddress 类型（指向了一条字节码指令地址）</strong></li>\\n</ul>\\n<h6 id=\\\"特点-1\\\">特点</h6>\\n<ul>\\n<li>其中 64 位长度的<strong>long 类型</strong>和<strong>double 类型</strong>数据会占用两个<strong>局部变量空间（Slot）</strong>，其他占 1 个</li>\\n<li>局部变量表所需内存空间<strong>在编译器就完成分配，运行期间不会改变</strong>，当方法入栈时，运行期间栈帧所需的内存大小是<strong>完全固定的</strong></li>\\n</ul>\\n<h5 id=\\\"特点-2\\\">特点</h5>\\n<ul>\\n<li><strong>线程私有</strong></li>\\n<li><strong>两个异常</strong>：<code>StackOverflowError</code>栈深过长和<code>OutOfMemoryError</code>扩充内存时内存不够而溢出</li>\\n</ul>\\n<h4 id=\\\"3-本地方法栈（nm-stack）\\\">3. 本地方法栈（NM Stack）</h4>\\n<p>这个区域和<strong>JVM-Stack</strong>如出一辙，唯一不同的地方就是，<strong>JVM-Stack</strong>执行的是 Java 方法，而<strong>NM-Stack</strong>执行的是 Native 方法，这里同样也会抛出<code>StackOverflowError</code>栈深过长和<code>OutOfMemoryError</code>扩充内存时内存不够而溢出两个异常</p>\\n<h4 id=\\\"4-java-堆（java-heapgc-heap）\\\">4. Java 堆（Java Heap/GC Heap）</h4>\\n<h5 id=\\\"作用-2\\\">作用</h5>\\n<p>唯一的目的就是<strong>存放对象实例</strong>，“几乎”所有的<strong>对象实例以及数组</strong>都在这里分配内存</p>\\n<h5 id=\\\"特点-3\\\">特点</h5>\\n<ul>\\n<li><p><strong>内存最大</strong></p>\\n</li>\\n<li><p><strong>线程共享：</strong> 因为存放的是所有对象的实例</p>\\n</li>\\n<li><p><strong>别名 GC-Heap：</strong> 是垃圾收集器（Garbage Collector）管理的主要区域</p>\\n</li>\\n<li><p><strong>堆内再划分：</strong> 基于<strong>CG 分代收集算法</strong>，还可细分为新生代、老年代</p>\\n<p><strong>再划分的意义：</strong> 为了更好地管理回收内存，或者说更快地分配内存</p>\\n</li>\\n<li><p><strong>可以不连续：</strong> 内存空间可以不连续，只要逻辑连续即可</p>\\n</li>\\n<li><p><strong>一个异常：</strong><code>OutOfMemoryError</code></p>\\n</li>\\n</ul>\\n<h4 id=\\\"5-方法区（method-area）\\\">5. 方法区（Method Area）</h4>\\n<h5 id=\\\"作用-3\\\">作用</h5>\\n<p>用于存储已被虚拟机加载的<strong>类信息</strong>、<strong>常量</strong>、<strong>静态变量</strong>、<strong>即时编译器编译后的代码</strong>等数据</p>\\n<h5 id=\\\"特点-4\\\">特点</h5>\\n<ul>\\n<li><p><strong>逻辑上是堆的一部分</strong></p>\\n<blockquote>\\n<p>虽然 JVM Spec 把方法区描述为堆的一个<strong>逻辑部分</strong>，但它有一个别名：Non-Heap，目的应该是表面它相比于堆的其它部分的特殊性；</p>\\n</blockquote>\\n</li>\\n<li><p><strong>线程共享</strong></p>\\n</li>\\n<li><p><strong>CG 执行少：</strong></p>\\n<ul>\\n<li>回收内容：针对<strong>常量池的回收</strong>和对<strong>类型的卸载</strong></li>\\n<li>回收难度大，尤其是类型卸载</li>\\n<li>回收必要性：很有必要</li>\\n</ul>\\n</li>\\n<li><p><strong>一个异常：</strong><code>OutOfMemoryError</code></p>\\n</li>\\n</ul>\\n<h5 id=\\\"运行时常量池（runtime-constant-pool）\\\">运行时常量池（Runtime Constant Pool）</h5>\\n<p>它是方法区的一部分，主要存储的东西有：</p>\\n<ol>\\n<li>在 Class 文件中除了有类的版本、字段、方法、接口等描述信息，还有一项信息是常量池（Constant Pool Table），用于存放<strong>“编译期”生成的各种字面量和符号引用</strong>，这部分常量是运行之前就确定好了的，并且在类被加载后将这些信息<strong>转入</strong>运行时常量池存放；</li>\\n<li>系统运行的过程中才确定的常量；</li>\\n<li>还有编译期翻译出来的直接引用；</li>\\n<li>String 类型、Integer、Double、Long、Float 等类型的字面量常量；</li>\\n</ol>\\n<p>所以这里也会发生 OOM</p>\\n<h4 id=\\\"-6-直接内存（direct-memory）\\\">* 6. 直接内存（Direct Memory）</h4>\\n<h5 id=\\\"介绍\\\">介绍</h5>\\n<p>在 NIO 类的使用中，基于通道（Channel）和缓冲区（Buffer）的 IO 方式，它们使用的是<strong>Native 函数库直接分配的堆外内存（注意是堆外）</strong>，这部分内存并不属于堆或者 JVM 的运行时数据区内存</p>\\n<p>通过堆中的一个<strong>DirectByteBuffer 对象</strong>来操作这块<strong>内存的引用</strong></p>\\n<p>而在 Java 8 之后，这里又有一块区域被划分为 Metaspace，承担原 Perm Gen 区的部分功能，存储类的元数据</p>\\n<h5 id=\\\"作用-4\\\">作用</h5>\\n<p>在某些场景中显著地提高性能，因为避免了<strong>Java 堆</strong>和<strong>Native 堆</strong>中来回复制数据</p>\\n\";","export default \"<h4 id=\\\"arraylist类\\\">ArrayList类</h4>\\n<p>对终于要正式开始读<strong>ArrayList</strong>的源码了，虽然<strong>ArrayList</strong>的源码价值并不是那么地大，但作为集合框架源码阅读的第一站来说，我选择了在这里站稳脚跟</p>\\n<p>这个计划搁置了很久，大概有15天，中间跑去面试了一个星期，面试下来发现自己的基础已经忘的差不多了，决定回来好好沉淀一段时间，暑期实习offer有没有已经不重要了，<strong>剑指秋招！</strong></p>\\n<p>为什么要读它，因为线性表几乎是数据结构的基础必备，昨晚花了将近1小时手撸了一个ArrayList的自实现，再搭配源码来看<strong>自己在基础方法上有哪些没考虑到的点</strong>，以及<strong>实际投入使用的ArrayList到底优秀在哪里</strong></p>\\n<h4 id=\\\"源码\\\">源码</h4>\\n<h5 id=\\\"类头\\\">类头</h5>\\n<pre><code class=\\\"hljs language-java\\\"><span class=\\\"hljs-keyword\\\">public</span> <span class=\\\"hljs-keyword\\\">class</span> <span class=\\\"hljs-title class_\\\">ArrayList</span>&lt;E&gt; <span class=\\\"hljs-keyword\\\">extends</span> <span class=\\\"hljs-title class_\\\">AbstractList</span>&lt;E&gt;\\n        <span class=\\\"hljs-keyword\\\">implements</span> <span class=\\\"hljs-title class_\\\">List</span>&lt;E&gt;, RandomAccess, Cloneable, java.io.Serializable\\n{\\n    <span class=\\\"hljs-comment\\\">//...</span>\\n}\\n</code></pre>\\n<p>首先继承了<code>AbstractList</code></p>\\n<p>我们顺着<code>AbstractList</code>往里摸，一直到最后我们发现，还有<strong>Collection接口和Iterable接口</strong>，这两个接口加上<strong>List接口</strong>为我们提供了非常重要的集合接口规范</p>\\n<p>然后我们往下看</p>\\n<h5 id=\\\"成员变量\\\">成员变量</h5>\\n<p>ArrayList这个类的成员变量并不复杂</p>\\n<pre><code class=\\\"hljs language-java\\\"><span class=\\\"hljs-comment\\\">// 这是默认的容器长度</span>\\n<span class=\\\"hljs-keyword\\\">private</span> <span class=\\\"hljs-keyword\\\">static</span> <span class=\\\"hljs-keyword\\\">final</span> <span class=\\\"hljs-type\\\">int</span> <span class=\\\"hljs-variable\\\">DEFAULT_CAPACITY</span> <span class=\\\"hljs-operator\\\">=</span> <span class=\\\"hljs-number\\\">10</span>;\\n\\n<span class=\\\"hljs-comment\\\">// 这是一个空的容器数组</span>\\n<span class=\\\"hljs-keyword\\\">private</span> <span class=\\\"hljs-keyword\\\">static</span> <span class=\\\"hljs-keyword\\\">final</span> Object[] EMPTY_ELEMENTDATA = {};\\n\\n<span class=\\\"hljs-comment\\\">// 这是默认容量的空的容器数组 用这个数组和上面那个数组对比</span>\\n<span class=\\\"hljs-comment\\\">// 来分辨出第一个元素被添加进来的时候到底有多膨胀</span>\\n<span class=\\\"hljs-keyword\\\">private</span> <span class=\\\"hljs-keyword\\\">static</span> <span class=\\\"hljs-keyword\\\">final</span> Object[] DEFAULTCAPACITY_EMPTY_ELEMENTDATA = {};\\n\\n<span class=\\\"hljs-comment\\\">// 存储元素的数组</span>\\n<span class=\\\"hljs-comment\\\">// ArrayList的容量就是这个数组的长度</span>\\n<span class=\\\"hljs-comment\\\">// 在空数组的情况下 如果 elementData == DEFAULTCAPACITY_EMPTY_ELEMENTDATA</span>\\n<span class=\\\"hljs-comment\\\">// 那么我们加入第一个元素的时候会选择以DEFAULT_CAPACITY为初试容量去扩展容器</span>\\n<span class=\\\"hljs-keyword\\\">transient</span> Object[] elementData; <span class=\\\"hljs-comment\\\">// non-private to simplify nested class access</span>\\n\\n<span class=\\\"hljs-comment\\\">// 包含元素的个数 我更愿意将size叫成是载量</span>\\n<span class=\\\"hljs-keyword\\\">private</span> <span class=\\\"hljs-type\\\">int</span> size;\\n</code></pre>\\n<p>其中最重要的显然就是<strong>elementData</strong>这个变量了，它就是整个容器的核心</p>\\n<p>其次就是<strong>size</strong>这个变量，在<strong>线性结构</strong>中，我们常接触到的两个概念：<strong>capacity（容量）、size（大小）</strong></p>\\n<p>前者表示容器<strong>能装多少</strong>，后者表示容器<strong>装了多少</strong>，但我们使用后者的时候，总说<strong>“这个容器大小是多少”</strong>，这个<strong>”大小“</strong>的说法很容易和<strong>“容量”</strong>混为一谈</p>\\n<p>所以我更愿意将<strong>size</strong>叫成是<strong>载量（loaded size）</strong></p>\\n<p>在这里我们还需要留意一个变量，这个变量来自于<strong>AbstractList抽象类</strong></p>\\n<pre><code class=\\\"hljs language-java\\\"><span class=\\\"hljs-keyword\\\">protected</span> <span class=\\\"hljs-keyword\\\">transient</span> <span class=\\\"hljs-type\\\">int</span> <span class=\\\"hljs-variable\\\">modCount</span> <span class=\\\"hljs-operator\\\">=</span> <span class=\\\"hljs-number\\\">0</span>;\\n</code></pre>\\n<p>这个值记录着List的<strong>结构被改变的次数</strong>，结构改变指的是<strong>任何会影响到size的操作</strong>\\n因为这些改动，可能会<strong>扰乱容器结构</strong>，而导致迭代过程会出现错误的结果\\n这个变量会在迭代器中去补充一些逻辑，比如非法的修改会扰乱迭代过程，则<strong>会抛出异常</strong>\\n如果子类也要用到这个变量，要求<strong>每一个可能改动容器结构的操作都需要调用一次这个变量</strong></p>\\n<h5 id=\\\"构造方法\\\">构造方法</h5>\\n<p>总共有三个，我们只关心前两个就好了</p>\\n<pre><code class=\\\"hljs language-java\\\"><span class=\\\"hljs-keyword\\\">public</span> <span class=\\\"hljs-title function_\\\">ArrayList</span><span class=\\\"hljs-params\\\">(<span class=\\\"hljs-type\\\">int</span> initialCapacity)</span> {\\n    <span class=\\\"hljs-keyword\\\">if</span> (initialCapacity &gt; <span class=\\\"hljs-number\\\">0</span>) {\\n        <span class=\\\"hljs-built_in\\\">this</span>.elementData = <span class=\\\"hljs-keyword\\\">new</span> <span class=\\\"hljs-title class_\\\">Object</span>[initialCapacity];\\n    } <span class=\\\"hljs-keyword\\\">else</span> <span class=\\\"hljs-keyword\\\">if</span> (initialCapacity == <span class=\\\"hljs-number\\\">0</span>) {\\n        <span class=\\\"hljs-built_in\\\">this</span>.elementData = EMPTY_ELEMENTDATA;\\n    } <span class=\\\"hljs-keyword\\\">else</span> {\\n        <span class=\\\"hljs-keyword\\\">throw</span> <span class=\\\"hljs-keyword\\\">new</span> <span class=\\\"hljs-title class_\\\">IllegalArgumentException</span>(<span class=\\\"hljs-string\\\">&quot;Illegal Capacity: &quot;</span>+\\n                                           initialCapacity);\\n    }\\n}\\n<span class=\\\"hljs-keyword\\\">public</span> <span class=\\\"hljs-title function_\\\">ArrayList</span><span class=\\\"hljs-params\\\">()</span> {\\n    <span class=\\\"hljs-built_in\\\">this</span>.elementData = DEFAULTCAPACITY_EMPTY_ELEMENTDATA;\\n}\\n</code></pre>\\n<p>这里给出了我们的两个常量<strong>EMPTY_ELEMENTDATA</strong>和<strong>DEFAULTCAPACITY_EMPTY_ELEMENTDATA</strong>的去处，在我的自实现里，<strong>无论是哪种方法我都选择了new出数组对象</strong>，而这里还会有点偷懒，如果没有指定容量的话，则并不会**new Object[DEFAULT_CAPACITY]**，等到真正要加入元素的时候，才创建对象，这在下面add方法的时候会看到</p>\\n<h5 id=\\\"成员方法\\\">成员方法</h5>\\n<p>接下来我们进入成员方法部分</p>\\n<h6 id=\\\"trimtosize\\\">trimToSize</h6>\\n<pre><code class=\\\"hljs language-java\\\"><span class=\\\"hljs-keyword\\\">public</span> <span class=\\\"hljs-keyword\\\">void</span> <span class=\\\"hljs-title function_\\\">trimToSize</span><span class=\\\"hljs-params\\\">()</span> {\\n    modCount++;\\n    <span class=\\\"hljs-keyword\\\">if</span> (size &lt; elementData.length) {\\n        elementData = (size == <span class=\\\"hljs-number\\\">0</span>)\\n          ? EMPTY_ELEMENTDATA\\n          : Arrays.copyOf(elementData, size);\\n    }\\n}\\n</code></pre>\\n<p>首当其冲就是这个方法 该方法用于<strong>修剪容器的容量</strong></p>\\n<p>怎么个<strong>修剪</strong>法？将容器的<strong>”容量“</strong>修剪为当前列表的<strong>载量</strong>，其目的是为了<strong>优化容器对象所占存储空间</strong></p>\\n<p>比如我们容器初始容量为10，里面装了3个元素，那么就有<strong>7个元素空间是被null占着的</strong></p>\\n<p>假设我们容器的使用场景总是在小于等于3的情况下工作，那么我们就可以把容器的容量修剪一下</p>\\n<p><strong>修剪前：</strong>[a, b, c, <strong>null, null, null, null, null, null, null</strong>]</p>\\n<p><strong>修剪后：</strong>[a, b, c]</p>\\n<p>并且<strong>修剪</strong>操作会访问<strong>modCount</strong>变量，意味着这告诉容器的<strong>迭代器</strong>，这个修剪方法可能会<strong>扰乱迭代过程</strong></p>\\n<p>在修剪的时候，我们看到了这样的一个方法：<strong>Arrays.copyOf(elementData, size)</strong></p>\\n<h6 id=\\\"arrayscopyof\\\">Arrays.copyOf</h6>\\n<pre><code class=\\\"hljs language-java\\\"><span class=\\\"hljs-keyword\\\">public</span> <span class=\\\"hljs-keyword\\\">static</span> &lt;T&gt; T[] copyOf(T[] original, <span class=\\\"hljs-type\\\">int</span> newLength) {\\n    <span class=\\\"hljs-keyword\\\">return</span> (T[]) copyOf(original, newLength, original.getClass());\\n}\\n\\n<span class=\\\"hljs-keyword\\\">public</span> <span class=\\\"hljs-keyword\\\">static</span> &lt;T,U&gt; T[] copyOf(U[] original, <span class=\\\"hljs-type\\\">int</span> newLength, Class&lt;? <span class=\\\"hljs-keyword\\\">extends</span> <span class=\\\"hljs-title class_\\\">T</span>[]&gt; newType) {\\n    T[] copy = ((Object)newType == (Object)Object[].class)\\n        ? (T[]) <span class=\\\"hljs-keyword\\\">new</span> <span class=\\\"hljs-title class_\\\">Object</span>[newLength]\\n        : (T[]) Array.newInstance(newType.getComponentType(), newLength);\\n    System.arraycopy(original, <span class=\\\"hljs-number\\\">0</span>, copy, <span class=\\\"hljs-number\\\">0</span>,\\n                     Math.min(original.length, newLength));\\n    <span class=\\\"hljs-keyword\\\">return</span> copy;\\n}\\n</code></pre>\\n<p>重点是<strong>line：10</strong>，整个方法是按照<strong>源数组的长度（original.length）</strong>以及<strong>新长度（newLength）</strong>的最小值去复制数组的</p>\\n<h6 id=\\\"ensurecapacity\\\">ensureCapacity</h6>\\n<pre><code class=\\\"hljs language-java\\\"><span class=\\\"hljs-keyword\\\">public</span> <span class=\\\"hljs-keyword\\\">void</span> <span class=\\\"hljs-title function_\\\">ensureCapacity</span><span class=\\\"hljs-params\\\">(<span class=\\\"hljs-type\\\">int</span> minCapacity)</span> {\\n    <span class=\\\"hljs-type\\\">int</span> <span class=\\\"hljs-variable\\\">minExpand</span> <span class=\\\"hljs-operator\\\">=</span> (elementData != DEFAULTCAPACITY_EMPTY_ELEMENTDATA)\\n        ? <span class=\\\"hljs-number\\\">0</span>\\n        : DEFAULT_CAPACITY;\\n\\n    <span class=\\\"hljs-keyword\\\">if</span> (minCapacity &gt; minExpand) {\\n        ensureExplicitCapacity(minCapacity);\\n    }\\n}\\n</code></pre>\\n<p>这个方法用于提升容器的容量，这个方法告诉容器：<strong>至少要保证根据传入的最小容量（minCapacity）参数那么多的容量</strong></p>\\n<p>在这个方法里的选择是：</p>\\n<ul>\\n<li>对于<strong>最小扩容量（minExpand）</strong>，如果当前容器为空容器，则最小扩容量为<strong>DEFAULT_CAPACITY（10）</strong>，如果容器<strong>不是空容器</strong>，则最<strong>小扩容量为0</strong></li>\\n<li>一旦<strong>最小容量（minCapacity）&gt; 最小扩容量（minExpand）</strong>，则需要<strong>确保显式容量</strong></li>\\n</ul>\\n<p>这里的理解有点绕，我们把它放到场景去分析一下：</p>\\n<p><strong>场景1，空容器：</strong></p>\\n<p>空容器传进来，<strong>minExpand</strong>就得<strong>DEFAULT_CAPACITY</strong>等于10，那么如果我们传入的<strong>minCapacity</strong>甚至小于默认的容量，那你就<strong>一边呆着吧</strong></p>\\n<p>如果大于10，那就<strong>按照你的来</strong>，虽然还得进<strong>ensureExplicitCapacity方法</strong>，但是看到了后面就会发现，确实是会按照你给的大于10的值来扩容</p>\\n<p><strong>场景2，[ 1 / 10 ] 的容器：</strong></p>\\n<p><strong>minExpand</strong>肯定是0，那么只要我们传入的传入的<strong>minCapacity</strong>大于0，是肯定可以进<strong>ensureExplicitCapacity方法</strong>的，到了方法里面我们发现，如果你给的<strong>minCapacity</strong>还没有当前容器长度的<strong>1.5倍</strong>大，那么容器至少也会扩到<strong>1.5倍</strong>而忽略你给的值，大于<strong>1.5倍</strong>救会采用你给值来扩容</p>\\n<p>为什么是<strong>1.5倍</strong>？往下看就知道了</p>\\n<p>我们来看<strong>ensureExplicitCapacity方法</strong></p>\\n<pre><code class=\\\"hljs language-java\\\"><span class=\\\"hljs-keyword\\\">private</span> <span class=\\\"hljs-keyword\\\">void</span> <span class=\\\"hljs-title function_\\\">ensureExplicitCapacity</span><span class=\\\"hljs-params\\\">(<span class=\\\"hljs-type\\\">int</span> minCapacity)</span> {\\n    modCount++;\\n\\n    <span class=\\\"hljs-comment\\\">// overflow-conscious code</span>\\n    <span class=\\\"hljs-keyword\\\">if</span> (minCapacity - elementData.length &gt; <span class=\\\"hljs-number\\\">0</span>)\\n        grow(minCapacity);\\n}\\n</code></pre>\\n<p>除了会改变容器结构，我们还得注意：当<strong>允许的最小容量（minCapacity）</strong>大于<strong>当前容器容量（elementData.length）</strong>的时候，这个时候我们就需要进行**溢出考虑(overflow-conscious)**了</p>\\n<h6 id=\\\"grow\\\">grow</h6>\\n<pre><code class=\\\"hljs language-java\\\"><span class=\\\"hljs-keyword\\\">private</span> <span class=\\\"hljs-keyword\\\">static</span> <span class=\\\"hljs-keyword\\\">final</span> <span class=\\\"hljs-type\\\">int</span> <span class=\\\"hljs-variable\\\">MAX_ARRAY_SIZE</span> <span class=\\\"hljs-operator\\\">=</span> Integer.MAX_VALUE - <span class=\\\"hljs-number\\\">8</span>;\\n\\n<span class=\\\"hljs-keyword\\\">private</span> <span class=\\\"hljs-keyword\\\">void</span> <span class=\\\"hljs-title function_\\\">grow</span><span class=\\\"hljs-params\\\">(<span class=\\\"hljs-type\\\">int</span> minCapacity)</span> {\\n    <span class=\\\"hljs-comment\\\">// overflow-conscious code</span>\\n    <span class=\\\"hljs-type\\\">int</span> <span class=\\\"hljs-variable\\\">oldCapacity</span> <span class=\\\"hljs-operator\\\">=</span> elementData.length;\\n    <span class=\\\"hljs-type\\\">int</span> <span class=\\\"hljs-variable\\\">newCapacity</span> <span class=\\\"hljs-operator\\\">=</span> oldCapacity + (oldCapacity &gt;&gt; <span class=\\\"hljs-number\\\">1</span>);\\n    <span class=\\\"hljs-keyword\\\">if</span> (newCapacity - minCapacity &lt; <span class=\\\"hljs-number\\\">0</span>)\\n        newCapacity = minCapacity;\\n    <span class=\\\"hljs-keyword\\\">if</span> (newCapacity - MAX_ARRAY_SIZE &gt; <span class=\\\"hljs-number\\\">0</span>)\\n        newCapacity = hugeCapacity(minCapacity);\\n    <span class=\\\"hljs-comment\\\">// minCapacity is usually close to size, so this is a win:</span>\\n    elementData = Arrays.copyOf(elementData, newCapacity);\\n}\\n</code></pre>\\n<p>这里规定：<strong>数组最大的长度（MAX_ARRAY_SIZE）</strong>为Integer值所能表示的最大的数减8，也就是**(2^31 - 1) - 8**</p>\\n<p>在方法里首先考虑<strong>新容量（newCapacity）</strong>怎么定义：</p>\\n<ul>\\n<li><strong>先定义新容量为旧容量的1.5倍（line：6）！</strong> </li>\\n<li>一旦<strong>新容量（1.5倍）</strong>比<strong>允许的最小容量（minCapacity，这是用户期望的最小扩容量）</strong>要小，那么新容量被<strong>重新定义</strong>为允许的最小容量</li>\\n<li>一旦<strong>新容量（这时候可能是期望值，也可能是1.5倍）</strong>大于<strong>数组最大的长度（MAX_ARRAY_SIZE）</strong>，那么我们就按照<strong>hugeCapacity(minCapacity)<strong>方法去</strong>重新定义新容量</strong></li>\\n</ul>\\n<p>于是我们发现，<strong>ArrayList</strong>的每次扩容，<strong>最少都得是原容器的1.5倍</strong></p>\\n<p>对于<strong>hugeCapacity</strong></p>\\n<pre><code class=\\\"hljs language-java\\\"><span class=\\\"hljs-keyword\\\">private</span> <span class=\\\"hljs-keyword\\\">static</span> <span class=\\\"hljs-type\\\">int</span> <span class=\\\"hljs-title function_\\\">hugeCapacity</span><span class=\\\"hljs-params\\\">(<span class=\\\"hljs-type\\\">int</span> minCapacity)</span> {\\n    <span class=\\\"hljs-keyword\\\">if</span> (minCapacity &lt; <span class=\\\"hljs-number\\\">0</span>) <span class=\\\"hljs-comment\\\">// overflow</span>\\n        <span class=\\\"hljs-keyword\\\">throw</span> <span class=\\\"hljs-keyword\\\">new</span> <span class=\\\"hljs-title class_\\\">OutOfMemoryError</span>();\\n    <span class=\\\"hljs-keyword\\\">return</span> (minCapacity &gt; MAX_ARRAY_SIZE) ?\\n        Integer.MAX_VALUE :\\n        MAX_ARRAY_SIZE;\\n}\\n</code></pre>\\n<p>我们知道，既然<strong>minCapacity</strong>是个<strong>int值</strong>，那么它最大值就只能为<strong>Integer.MAX_VALUE</strong>，而我们这里定义的最大的数组长度为<strong>Integer.MAX_VALUE - 8</strong>，也就是说，这个定义并不是一定的，如果我们设置的minCapacity的值在**( Integer.MAX_VALUE - 8, Integer.MAX_VALUE ]<strong>之间的话，那我们还是允许用</strong>Integer.MAX_VALUE**作为最大数组长度的</p>\\n<p>这里我就有个疑问了，**-8的意义在哪里？一开始就定义到最大值不就好了？**</p>\\n<p>考虑完新容量之后，开始使用<strong>Arrays.copyOf</strong>来扩展容量<strong>（grow line：12）</strong></p>\\n<h6 id=\\\"contains和indexof\\\">contains和indexOf</h6>\\n<pre><code class=\\\"hljs language-java\\\"><span class=\\\"hljs-keyword\\\">public</span> <span class=\\\"hljs-type\\\">boolean</span> <span class=\\\"hljs-title function_\\\">contains</span><span class=\\\"hljs-params\\\">(Object o)</span> {\\n    <span class=\\\"hljs-keyword\\\">return</span> indexOf(o) &gt;= <span class=\\\"hljs-number\\\">0</span>;\\n}\\n\\n<span class=\\\"hljs-keyword\\\">public</span> <span class=\\\"hljs-type\\\">int</span> <span class=\\\"hljs-title function_\\\">indexOf</span><span class=\\\"hljs-params\\\">(Object o)</span> {\\n    <span class=\\\"hljs-keyword\\\">if</span> (o == <span class=\\\"hljs-literal\\\">null</span>) {\\n        <span class=\\\"hljs-keyword\\\">for</span> (<span class=\\\"hljs-type\\\">int</span> <span class=\\\"hljs-variable\\\">i</span> <span class=\\\"hljs-operator\\\">=</span> <span class=\\\"hljs-number\\\">0</span>; i &lt; size; i++)\\n            <span class=\\\"hljs-keyword\\\">if</span> (elementData[i]==<span class=\\\"hljs-literal\\\">null</span>)\\n                <span class=\\\"hljs-keyword\\\">return</span> i;\\n    } <span class=\\\"hljs-keyword\\\">else</span> {\\n        <span class=\\\"hljs-keyword\\\">for</span> (<span class=\\\"hljs-type\\\">int</span> <span class=\\\"hljs-variable\\\">i</span> <span class=\\\"hljs-operator\\\">=</span> <span class=\\\"hljs-number\\\">0</span>; i &lt; size; i++)\\n            <span class=\\\"hljs-keyword\\\">if</span> (o.equals(elementData[i]))\\n                <span class=\\\"hljs-keyword\\\">return</span> i;\\n    }\\n    <span class=\\\"hljs-keyword\\\">return</span> -<span class=\\\"hljs-number\\\">1</span>;\\n}\\n</code></pre>\\n<p>和自实现不同的是，这里<strong>contains调用的是indexOf的实现</strong>，而且<strong>indexOf</strong>还允许<strong>查找到第一个null元素在哪里</strong>，这是我在自实现里没考虑过的</p>\\n<h6 id=\\\"get和set\\\">get和set</h6>\\n<pre><code class=\\\"hljs language-java\\\">E <span class=\\\"hljs-title function_\\\">elementData</span><span class=\\\"hljs-params\\\">(<span class=\\\"hljs-type\\\">int</span> index)</span> {\\n    <span class=\\\"hljs-keyword\\\">return</span> (E) elementData[index];\\n}\\n\\n<span class=\\\"hljs-keyword\\\">public</span> E <span class=\\\"hljs-title function_\\\">get</span><span class=\\\"hljs-params\\\">(<span class=\\\"hljs-type\\\">int</span> index)</span> {\\n    rangeCheck(index);\\n\\n    <span class=\\\"hljs-keyword\\\">return</span> elementData(index);\\n}\\n\\n<span class=\\\"hljs-keyword\\\">public</span> E <span class=\\\"hljs-title function_\\\">set</span><span class=\\\"hljs-params\\\">(<span class=\\\"hljs-type\\\">int</span> index, E element)</span> {\\n    rangeCheck(index);\\n\\n    <span class=\\\"hljs-type\\\">E</span> <span class=\\\"hljs-variable\\\">oldValue</span> <span class=\\\"hljs-operator\\\">=</span> elementData(index);\\n    elementData[index] = element;\\n    <span class=\\\"hljs-keyword\\\">return</span> oldValue;\\n}\\n</code></pre>\\n<pre><code class=\\\"hljs language-java\\\"><span class=\\\"hljs-keyword\\\">private</span> <span class=\\\"hljs-keyword\\\">void</span> <span class=\\\"hljs-title function_\\\">rangeCheck</span><span class=\\\"hljs-params\\\">(<span class=\\\"hljs-type\\\">int</span> index)</span> {\\n    <span class=\\\"hljs-keyword\\\">if</span> (index &gt;= size)\\n        <span class=\\\"hljs-keyword\\\">throw</span> <span class=\\\"hljs-keyword\\\">new</span> <span class=\\\"hljs-title class_\\\">IndexOutOfBoundsException</span>(outOfBoundsMsg(index));\\n}\\n</code></pre>\\n<p>首先看<strong>get&set</strong>，没什么特别的设计，只是这里有个<strong>rangeCheck</strong>，如果index大于等于载量，就抛异常</p>\\n<h6 id=\\\"add1\\\">add1</h6>\\n<p>这个是<strong>ArrayList</strong>的重头戏之一，牵扯到扩容的问题，来看看它怎么面对扩容</p>\\n<pre><code class=\\\"hljs language-java\\\"><span class=\\\"hljs-keyword\\\">public</span> <span class=\\\"hljs-type\\\">boolean</span> <span class=\\\"hljs-title function_\\\">add</span><span class=\\\"hljs-params\\\">(E e)</span> {\\n    ensureCapacityInternal(size + <span class=\\\"hljs-number\\\">1</span>);  <span class=\\\"hljs-comment\\\">// Increments modCount!!</span>\\n    elementData[size++] = e;\\n    <span class=\\\"hljs-keyword\\\">return</span> <span class=\\\"hljs-literal\\\">true</span>;\\n}\\n</code></pre>\\n<p>这里我们又注意到了<strong>ensureCapacityInternal</strong>这个方法</p>\\n<pre><code class=\\\"hljs language-java\\\"><span class=\\\"hljs-keyword\\\">private</span> <span class=\\\"hljs-keyword\\\">static</span> <span class=\\\"hljs-type\\\">int</span> <span class=\\\"hljs-title function_\\\">calculateCapacity</span><span class=\\\"hljs-params\\\">(Object[] elementData, <span class=\\\"hljs-type\\\">int</span> minCapacity)</span> {\\n    <span class=\\\"hljs-keyword\\\">if</span> (elementData == DEFAULTCAPACITY_EMPTY_ELEMENTDATA) {\\n        <span class=\\\"hljs-keyword\\\">return</span> Math.max(DEFAULT_CAPACITY, minCapacity);\\n    }\\n    <span class=\\\"hljs-keyword\\\">return</span> minCapacity;\\n}\\n\\n<span class=\\\"hljs-keyword\\\">private</span> <span class=\\\"hljs-keyword\\\">void</span> <span class=\\\"hljs-title function_\\\">ensureCapacityInternal</span><span class=\\\"hljs-params\\\">(<span class=\\\"hljs-type\\\">int</span> minCapacity)</span> {\\n    ensureExplicitCapacity(calculateCapacity(elementData, minCapacity));\\n}\\n\\n<span class=\\\"hljs-keyword\\\">private</span> <span class=\\\"hljs-keyword\\\">void</span> <span class=\\\"hljs-title function_\\\">ensureExplicitCapacity</span><span class=\\\"hljs-params\\\">(<span class=\\\"hljs-type\\\">int</span> minCapacity)</span> {\\n    modCount++;\\n\\n    <span class=\\\"hljs-comment\\\">// overflow-conscious code</span>\\n    <span class=\\\"hljs-keyword\\\">if</span> (minCapacity - elementData.length &gt; <span class=\\\"hljs-number\\\">0</span>)\\n        grow(minCapacity);\\n}\\n</code></pre>\\n<p>从方法名意义上去解释，当我们调用<strong>add(E e)<strong>的时候，是把元素加到数组的尾部位置，在这之前我们得先</strong>确保容器的内部容量（ensureCapacityInternal）</strong>，确保这个内部容量至少得是当前的<strong>载量（size） + 1</strong>，以这个值作为我们<strong>允许的最小容量（minCapacity）</strong></p>\\n<p>也就是说，我的<strong>elementData</strong>数组至少还有最后一个位置可以让我顺利添加一个元素</p>\\n<p>在确保内部容量的时候，得先<strong>计算容量（calculateCapacity）</strong>，这里面的处理没有太多的花哨，如果容器为空，而且你给的<strong>允许的最小容量（minCapacity）</strong>还不如<strong>默认容量（10）</strong>大的话，那就直接选默认容量，只要容器不为空，哪怕里面只有一个元素，你给的<strong>允许的最小容量（minCapacity）</strong>甚至只是<strong>2</strong>，那也还是用2作为<strong>参照</strong>去调整容量，但这仅仅只是<strong>参照</strong></p>\\n<p>为什么说仅仅是<strong>参照</strong>？重点在<strong>ensureExplicitCapacity</strong>这里</p>\\n<p>我们先理一理调用栈：</p>\\n<ul>\\n<li><strong>add(E e)</strong><ul>\\n<li><strong>ensureCapacityInternal(size + 1)</strong><ul>\\n<li><strong>calculateCapacity(elementData, minCapacity)</strong></li>\\n<li><strong>ensureExplicitCapacity(calculateCapacity(elementData, minCapacity))</strong><ul>\\n<li><strong>grow(minCapacity)</strong></li>\\n</ul>\\n</li>\\n</ul>\\n</li>\\n</ul>\\n</li>\\n</ul>\\n<p>准备3个场景：</p>\\n<ul>\\n<li>空容器，加一个元素</li>\\n<li>非空容器，容器容量足够  <strong>[ 1 / 10 ]  (size &lt; element.length)</strong></li>\\n<li>非空容器，容器容量已满  <strong>[ 10 / 10 ]  （size == element.length）</strong></li>\\n</ul>\\n<hr>\\n<p>对于<strong>场景1</strong>：</p>\\n<ul>\\n<li><strong>add(E e)</strong><ul>\\n<li><strong>ensureCapacityInternal(0 + 1)</strong><ul>\\n<li><p><strong>calculateCapacity(elementData, 0 + 1)    ==》   10</strong></p>\\n</li>\\n<li><p><strong>ensureExplicitCapacity(10)</strong></p>\\n<p>到了<strong>ensureExplicitCapacity(10)<strong>的时候，因为这时候</strong>elementData</strong>其实是空的，所以会继续到<strong>grow（10）</strong></p>\\n</li>\\n<li><p><strong>grow（10）</strong></p>\\n</li>\\n</ul>\\n</li>\\n</ul>\\n</li>\\n</ul>\\n<p><strong>保证完内部容量之后</strong>，可以进行<strong>elementData[size++] = e</strong>了，所以总的来说，最最最开始的时候，数组扩容肯定是一扩到10的</p>\\n<p>对于<strong>场景2</strong>：</p>\\n<ul>\\n<li><strong>add(E e)</strong><ul>\\n<li><p><strong>ensureCapacityInternal(1 + 1)</strong></p>\\n<ul>\\n<li><p><strong>calculateCapacity(elementData, 1 + 1)    ==》   2</strong></p>\\n</li>\\n<li><p><strong>ensureExplicitCapacity(2)</strong></p>\\n<p>到了<strong>ensureExplicitCapacity(2)<strong>的时候，因为这时候</strong>elementData.length = 10 &gt; 2</strong>，所以并不会调用<strong>grow</strong>来扩容</p>\\n</li>\\n</ul>\\n</li>\\n</ul>\\n</li>\\n</ul>\\n<p>此时可以直接进行<strong>elementData[size++] = e</strong></p>\\n<p>对于<strong>场景3</strong>：</p>\\n<ul>\\n<li><p><strong>add(E e)</strong></p>\\n<ul>\\n<li><p><strong>ensureCapacityInternal(10 + 1)</strong></p>\\n<ul>\\n<li><p><strong>calculateCapacity(elementData, 10 + 1)    ==》   11</strong></p>\\n</li>\\n<li><p><strong>ensureExplicitCapacity(11)</strong></p>\\n<p>到了<strong>ensureExplicitCapacity(11)<strong>的时候，因为这时候</strong>elementData.length = 10 &lt; 11</strong>，所以会继续到<strong>grow（11）来进行扩容</strong></p>\\n</li>\\n<li><p><strong>grow（11）</strong></p>\\n<p>往上翻<strong>grow</strong>会发现，这里新容量是扩展到了<strong>15</strong></p>\\n</li>\\n</ul>\\n</li>\\n</ul>\\n</li>\\n</ul>\\n<p>此时可以直接进行<strong>elementData[size++] = e</strong></p>\\n<hr>\\n<h6 id=\\\"add2\\\">add2</h6>\\n<pre><code class=\\\"hljs language-java\\\"><span class=\\\"hljs-keyword\\\">public</span> <span class=\\\"hljs-keyword\\\">void</span> <span class=\\\"hljs-title function_\\\">add</span><span class=\\\"hljs-params\\\">(<span class=\\\"hljs-type\\\">int</span> index, E element)</span> {\\n    rangeCheckForAdd(index);\\n\\n    ensureCapacityInternal(size + <span class=\\\"hljs-number\\\">1</span>);  <span class=\\\"hljs-comment\\\">// Increments modCount!!</span>\\n    System.arraycopy(elementData, index, elementData, index + <span class=\\\"hljs-number\\\">1</span>,\\n                     size - index);\\n    elementData[index] = element;\\n    size++;\\n}\\n</code></pre>\\n<pre><code class=\\\"hljs language-java\\\"><span class=\\\"hljs-keyword\\\">private</span> <span class=\\\"hljs-keyword\\\">void</span> <span class=\\\"hljs-title function_\\\">rangeCheckForAdd</span><span class=\\\"hljs-params\\\">(<span class=\\\"hljs-type\\\">int</span> index)</span> {\\n    <span class=\\\"hljs-keyword\\\">if</span> (index &gt; size || index &lt; <span class=\\\"hljs-number\\\">0</span>)\\n        <span class=\\\"hljs-keyword\\\">throw</span> <span class=\\\"hljs-keyword\\\">new</span> <span class=\\\"hljs-title class_\\\">IndexOutOfBoundsException</span>(outOfBoundsMsg(index));\\n}\\n</code></pre>\\n<p>对于<strong>index</strong>的限定：<strong>不能在载量之外，也不能小于0</strong>，然后确保了容量之后就开始移元素，然后往中间插元素，从这点来说，我的自实现和这个实现的差不多</p>\\n<h6 id=\\\"remove1\\\">remove1</h6>\\n<pre><code class=\\\"hljs language-java\\\"><span class=\\\"hljs-keyword\\\">public</span> E <span class=\\\"hljs-title function_\\\">remove</span><span class=\\\"hljs-params\\\">(<span class=\\\"hljs-type\\\">int</span> index)</span> {\\n    rangeCheck(index);\\n\\n    modCount++;\\n    <span class=\\\"hljs-type\\\">E</span> <span class=\\\"hljs-variable\\\">oldValue</span> <span class=\\\"hljs-operator\\\">=</span> elementData(index);\\n\\n    <span class=\\\"hljs-type\\\">int</span> <span class=\\\"hljs-variable\\\">numMoved</span> <span class=\\\"hljs-operator\\\">=</span> size - index - <span class=\\\"hljs-number\\\">1</span>;\\n    <span class=\\\"hljs-keyword\\\">if</span> (numMoved &gt; <span class=\\\"hljs-number\\\">0</span>)\\n        System.arraycopy(elementData, index+<span class=\\\"hljs-number\\\">1</span>, elementData, index,\\n                         numMoved);\\n    elementData[--size] = <span class=\\\"hljs-literal\\\">null</span>; <span class=\\\"hljs-comment\\\">// clear to let GC do its work</span>\\n\\n    <span class=\\\"hljs-keyword\\\">return</span> oldValue;\\n}\\n</code></pre>\\n<p>基本都是常规操作，但是！这里的<strong>line：11</strong>是一个骚操作，很多自实现里面，只是把位置移到了，载量减到了就完了，也强调过可以不写<strong>elementData[--size] = null</strong>这句，目的是为了减少一步操作，访问不到的元素留着也没什么，现在想想确实有点可笑，注释里也说了，<strong>将这个对象的引用摘除，好让GC管管这个被删除的元素</strong></p>\\n<p>这就是真正投入使用的容器，要考虑到的事情，<strong>为用户尽可能地提高时间和空间效率！</strong></p>\\n<h6 id=\\\"remove2\\\">remove2</h6>\\n<pre><code class=\\\"hljs language-java\\\"><span class=\\\"hljs-keyword\\\">public</span> <span class=\\\"hljs-type\\\">boolean</span> <span class=\\\"hljs-title function_\\\">remove</span><span class=\\\"hljs-params\\\">(Object o)</span> {\\n    <span class=\\\"hljs-keyword\\\">if</span> (o == <span class=\\\"hljs-literal\\\">null</span>) {\\n        <span class=\\\"hljs-keyword\\\">for</span> (<span class=\\\"hljs-type\\\">int</span> <span class=\\\"hljs-variable\\\">index</span> <span class=\\\"hljs-operator\\\">=</span> <span class=\\\"hljs-number\\\">0</span>; index &lt; size; index++)\\n            <span class=\\\"hljs-keyword\\\">if</span> (elementData[index] == <span class=\\\"hljs-literal\\\">null</span>) {\\n                fastRemove(index);\\n                <span class=\\\"hljs-keyword\\\">return</span> <span class=\\\"hljs-literal\\\">true</span>;\\n            }\\n    } <span class=\\\"hljs-keyword\\\">else</span> {\\n        <span class=\\\"hljs-keyword\\\">for</span> (<span class=\\\"hljs-type\\\">int</span> <span class=\\\"hljs-variable\\\">index</span> <span class=\\\"hljs-operator\\\">=</span> <span class=\\\"hljs-number\\\">0</span>; index &lt; size; index++)\\n            <span class=\\\"hljs-keyword\\\">if</span> (o.equals(elementData[index])) {\\n                fastRemove(index);\\n                <span class=\\\"hljs-keyword\\\">return</span> <span class=\\\"hljs-literal\\\">true</span>;\\n            }\\n    }\\n    <span class=\\\"hljs-keyword\\\">return</span> <span class=\\\"hljs-literal\\\">false</span>;\\n}\\n<span class=\\\"hljs-keyword\\\">private</span> <span class=\\\"hljs-keyword\\\">void</span> <span class=\\\"hljs-title function_\\\">fastRemove</span><span class=\\\"hljs-params\\\">(<span class=\\\"hljs-type\\\">int</span> index)</span> {\\n    modCount++;\\n    <span class=\\\"hljs-type\\\">int</span> <span class=\\\"hljs-variable\\\">numMoved</span> <span class=\\\"hljs-operator\\\">=</span> size - index - <span class=\\\"hljs-number\\\">1</span>;\\n    <span class=\\\"hljs-keyword\\\">if</span> (numMoved &gt; <span class=\\\"hljs-number\\\">0</span>)\\n        System.arraycopy(elementData, index+<span class=\\\"hljs-number\\\">1</span>, elementData, index,\\n                         numMoved);\\n    elementData[--size] = <span class=\\\"hljs-literal\\\">null</span>; <span class=\\\"hljs-comment\\\">// clear to let GC do its work</span>\\n}\\n</code></pre>\\n<p>常规，我在想为什么remove1里的代码不用<strong>fastRemove</strong>，这两段完全是一摸一样的</p>\\n<h6 id=\\\"clear\\\">clear</h6>\\n<pre><code class=\\\"hljs language-java\\\"><span class=\\\"hljs-keyword\\\">public</span> <span class=\\\"hljs-keyword\\\">void</span> <span class=\\\"hljs-title function_\\\">clear</span><span class=\\\"hljs-params\\\">()</span> {\\n    modCount++;\\n\\n    <span class=\\\"hljs-comment\\\">// clear to let GC do its work</span>\\n    <span class=\\\"hljs-keyword\\\">for</span> (<span class=\\\"hljs-type\\\">int</span> <span class=\\\"hljs-variable\\\">i</span> <span class=\\\"hljs-operator\\\">=</span> <span class=\\\"hljs-number\\\">0</span>; i &lt; size; i++)\\n        elementData[i] = <span class=\\\"hljs-literal\\\">null</span>;\\n\\n    size = <span class=\\\"hljs-number\\\">0</span>;\\n}\\n</code></pre>\\n<p>同理，很多自实现也只是将<strong>size</strong>置为零，并没扣考虑GC，但是我觉得这里是否存在一个<strong>更好的实现</strong>呢？比如说可以这样：</p>\\n<pre><code class=\\\"hljs language-java\\\"><span class=\\\"hljs-keyword\\\">public</span> <span class=\\\"hljs-keyword\\\">void</span> <span class=\\\"hljs-title function_\\\">clear</span><span class=\\\"hljs-params\\\">()</span> {\\n    modCount++;\\n\\n    <span class=\\\"hljs-comment\\\">// clear to let GC do its work</span>\\n    elementData = <span class=\\\"hljs-keyword\\\">new</span> <span class=\\\"hljs-title class_\\\">Object</span>[elementData.length];\\n\\n    size = <span class=\\\"hljs-number\\\">0</span>;\\n}\\n</code></pre>\\n<p>转瞬我就想明白了，这其实是一个<strong>时间换空间的选择！</strong></p>\\n<p>确实for循环一个个置空确实比较浪费时间，比如有30w个元素在容器中，我就得for30w次</p>\\n<p>但是这样我还是在原数组的地址内存上进行操作，如果我选择了所谓的<strong>更好的实现</strong>，那么我还得在内存中再申请<strong>30w个元素长度的数组空间</strong>，虽然看上去，我好像马上就<strong>摘除了原elementData的引用</strong>，但实际上，原<strong>elementData</strong>的数组数据仍然会在内存中停留一段时间，<strong>等待下一次GC并且GC选择回收它</strong></p>\\n<p>上面只是我的推测，实际GC是如何对于这两种情况做出选择的我们并不清楚，姑且就这样认为吧</p>\\n<h6 id=\\\"removeall和retainall\\\">removeAll和retainAll</h6>\\n<p>对于<strong>addAll、removeRange</strong>等方法的实现比较常规，基本上和上面的差不多，<strong>removeAll以及retainAll</strong>还是要研究一哈子</p>\\n<pre><code class=\\\"hljs language-java\\\"><span class=\\\"hljs-keyword\\\">public</span> <span class=\\\"hljs-type\\\">boolean</span> <span class=\\\"hljs-title function_\\\">removeAll</span><span class=\\\"hljs-params\\\">(Collection&lt;?&gt; c)</span> {\\n    Objects.requireNonNull(c);\\n    <span class=\\\"hljs-keyword\\\">return</span> batchRemove(c, <span class=\\\"hljs-literal\\\">false</span>);\\n}\\n</code></pre>\\n<pre><code class=\\\"hljs language-java\\\"><span class=\\\"hljs-keyword\\\">public</span> <span class=\\\"hljs-type\\\">boolean</span> <span class=\\\"hljs-title function_\\\">retainAll</span><span class=\\\"hljs-params\\\">(Collection&lt;?&gt; c)</span> {\\n    Objects.requireNonNull(c);\\n    <span class=\\\"hljs-keyword\\\">return</span> batchRemove(c, <span class=\\\"hljs-literal\\\">true</span>);\\n}\\n</code></pre>\\n<p>这两个方法很相似，作用恰好相反，</p>\\n<ul>\\n<li><strong>removeAll是移除交集元素，留下补集元素</strong></li>\\n<li><strong>retainAll是移除补集元素，保留交集元素</strong></li>\\n</ul>\\n<p>两个方法都调用了<strong>bantchRemove</strong>方法</p>\\n<p>为了方便理解，我们将<strong>bantchRemove</strong>源码中的</p>\\n<ul>\\n<li><strong>complement重命名为justComplement，这个变量标识是取补集还是交集</strong></li>\\n<li><strong>r重命名为readIndex，标识到元素的下标</strong></li>\\n<li><strong>w重命名为writeIndex，标识写到元素的下标</strong></li>\\n</ul>\\n<pre><code class=\\\"hljs language-java\\\"><span class=\\\"hljs-keyword\\\">private</span> <span class=\\\"hljs-type\\\">boolean</span> <span class=\\\"hljs-title function_\\\">batchRemove</span><span class=\\\"hljs-params\\\">(Collection&lt;?&gt; c, <span class=\\\"hljs-type\\\">boolean</span> justComplement)</span> {\\n    <span class=\\\"hljs-keyword\\\">final</span> Object[] elementData = <span class=\\\"hljs-built_in\\\">this</span>.elementData;\\n    <span class=\\\"hljs-type\\\">int</span> <span class=\\\"hljs-variable\\\">readIndex</span> <span class=\\\"hljs-operator\\\">=</span> <span class=\\\"hljs-number\\\">0</span>, writeIndex = <span class=\\\"hljs-number\\\">0</span>;\\n    <span class=\\\"hljs-type\\\">boolean</span> <span class=\\\"hljs-variable\\\">modified</span> <span class=\\\"hljs-operator\\\">=</span> <span class=\\\"hljs-literal\\\">false</span>;\\n    <span class=\\\"hljs-keyword\\\">try</span> {\\n        <span class=\\\"hljs-keyword\\\">for</span> (; readIndex &lt; size; readIndex++)\\n            <span class=\\\"hljs-keyword\\\">if</span> (c.contains(elementData[readIndex]) == justComplement)\\n                elementData[writeIndex++] = elementData[readIndex];\\n    } <span class=\\\"hljs-keyword\\\">finally</span> {\\n        <span class=\\\"hljs-comment\\\">// Preserve behavioral compatibility with AbstractCollection,</span>\\n        <span class=\\\"hljs-comment\\\">// even if c.contains() throws.</span>\\n        <span class=\\\"hljs-keyword\\\">if</span> (readIndex != size) {\\n            System.arraycopy(elementData, readIndex,\\n                             elementData, writeIndex,\\n                             size - readIndex);\\n            writeIndex += size - readIndex;\\n        }\\n        <span class=\\\"hljs-keyword\\\">if</span> (writeIndex != size) {\\n            <span class=\\\"hljs-comment\\\">// clear to let GC do its work</span>\\n            <span class=\\\"hljs-keyword\\\">for</span> (<span class=\\\"hljs-type\\\">int</span> <span class=\\\"hljs-variable\\\">i</span> <span class=\\\"hljs-operator\\\">=</span> writeIndex; i &lt; size; i++)\\n                elementData[i] = <span class=\\\"hljs-literal\\\">null</span>;\\n            modCount += size - writeIndex;\\n            size = writeIndex;\\n            modified = <span class=\\\"hljs-literal\\\">true</span>;\\n        }\\n    }\\n    <span class=\\\"hljs-keyword\\\">return</span> modified;\\n}\\n</code></pre>\\n<p>我们看<strong>try块代码</strong>，代码遍历了<strong>elementData</strong>，其中这一句的解读很有意思：</p>\\n<pre><code class=\\\"hljs language-java\\\">c.contains(elementData[r]) == justComplement\\n</code></pre>\\n<p>在<strong>justComplement</strong>为<strong>false</strong>的情况下：</p>\\n<ul>\\n<li>如果c中没有原容器当前遍历到的元素，则<strong>（false == false）= true</strong>，将这个<strong>c中没有的元素</strong>覆盖到**elementData[writeIndex]**的位置</li>\\n<li>如果c中有原容器当前遍历到的元素，则<strong>（true == false）= false</strong>，不进行操作，进入下次循环</li>\\n</ul>\\n<p>总的来说，就是<strong>把原容器和c容器中不相交的元素按顺序移到原容器的前面去了</strong></p>\\n<p>同理在<strong>justComplement</strong>为<strong>true</strong>的情况下：</p>\\n<ul>\\n<li>如果c中没有原容器当前遍历到的元素，则<strong>（false == true）= false</strong>，不进行操作，进入下次循环</li>\\n<li>如果c中有原容器当前遍历到的元素，则<strong>（true == true）= true</strong>，将这个<strong>c中有的元素</strong>覆盖到**elementData[writeIndex]**的位置</li>\\n</ul>\\n<p>就是<strong>把原容器和c容器中相交的元素按顺序移到原容器的前面去了</strong></p>\\n<p>然后有点迷的是<strong>finally块</strong>的语句</p>\\n<p>第一个判断应该是说，加入之前抛了一些异常什么的，导致上面的for循环中断了，如此一来应该是<strong>没读完原容器里的元素</strong>的，好了，没读完就算了，<strong>把剩下没读完的元素移到之前写好的元素之后</strong>，那这部分也算<strong>读到了写好了（line：16）</strong></p>\\n<p>我认为这样的做法是<strong>保护未读取完的元素数据不被丢失</strong></p>\\n<p>第二个判断，好了读完也写完了，现在数组中可能有三部分：</p>\\n<ul>\\n<li>第一部分是选择<strong>写下的元素序列</strong>，这部分<strong>有效</strong></li>\\n<li>第二部分可能是之前出错了，没读完的元素但是我移动到紧接着第一部分序列的后边了，这部分也<strong>有效</strong></li>\\n<li>第三部分就是第二部分往前移动之前剩下的一些错位的元素，这部分不应该被访问到，所以<strong>无效</strong></li>\\n</ul>\\n<p>读完写完之后，**(writeIndex != size)<strong>这样的条件会在什么情况下出现？第二部分真的有往前移动的时候，也就是说包含</strong>无效元素**的时候</p>\\n<p>所以这时候就要<strong>摘除无效元素的引用，然后重置载量为写元素的长度</strong></p>\\n\";","export default \"<h3 id=\\\"introduction\\\">Introduction</h3>\\n<p>In this section, we will go through all the main concepts of docker technologies such as : <strong>Docker Engine</strong>, <strong>Docker Architecture</strong>, <strong>Docker underlying technology</strong>.</p>\\n<p>Basically reprinted from: <a href=\\\"https://docs.docker.com/engine/docker-overview\\\">https://docs.docker.com/engine/docker-overview</a>, but I will make some adjustment for better understanding.</p>\\n<h3 id=\\\"docker-engine\\\">Docker Engine</h3>\\n<p><em>Docker Engine</em> is a client-server application with these major components:</p>\\n<ul>\\n<li>A server which is a type of long-running program called a daemon process (the <code>dockerd</code> command).</li>\\n<li>A REST API which specifies interfaces that programs can use to talk to the daemon and instruct it what to do.</li>\\n<li>A command line interface (CLI) client (the <code>docker</code> command).</li>\\n</ul>\\n<p><img src=\\\"https://docs.docker.com/engine/images/engine-components-flow.png\\\" alt=\\\"engine-components-workflow\\\"></p>\\n<p>The CLI uses the Docker REST API to control or interact with the Docker daemon through scripting or direct CLI commands. Many other Docker applications use the underlying API and CLI.</p>\\n<p>The daemon creates and manages Docker <em>objects</em>, such as images, containers, networks, and volumes.</p>\\n<h3 id=\\\"docker-architecture\\\">Docker architecture</h3>\\n<p>Docker uses a <strong>client-server architecture</strong>. </p>\\n<p>The Docker <em>client</em> talks to the Docker <em>daemon</em>, which does the heavy lifting of building, running, and distributing your Docker containers. The Docker client and daemon <em>can</em> run on the same system, or you can connect a Docker client to a remote Docker daemon. </p>\\n<p><strong>The Docker client and daemon communicate using a REST API, over UNIX sockets or a network interface.</strong></p>\\n<p><img src=\\\"https://docs.docker.com/engine/images/architecture.svg\\\" alt=\\\"architecture\\\"></p>\\n<h4 id=\\\"1-the-docker-daemon-core\\\">1. The Docker daemon (core)</h4>\\n<p>The Docker daemon (<code>dockerd</code>) listens for Docker API requests and manages Docker objects such as images, containers, networks, and volumes. A daemon can also communicate with other daemons to manage Docker services.</p>\\n<h4 id=\\\"2-the-docker-client-interface\\\">2. The Docker client (interface)</h4>\\n<p>The Docker client (<code>docker</code>) is the primary way that many Docker users interact with Docker. When you use commands such as <code>docker run</code>, the client sends these commands to <code>dockerd</code>, which carries them out. The <code>docker</code> command uses the Docker API. The Docker client can communicate with more than one daemon.</p>\\n<h4 id=\\\"3-docker-registries-store\\\">3. Docker registries (store)</h4>\\n<p>A Docker <em>registry</em> stores Docker images. Docker Hub and Docker Cloud are public registries that anyone can use, and Docker is configured to look for images on Docker Hub by default. You can even run your own private registry. If you use Docker Datacenter (DDC), it includes Docker Trusted Registry (DTR).</p>\\n<p>When you use the <code>docker pull</code> or <code>docker run</code> commands, the required images are pulled from your configured registry. When you use the <code>docker push</code> command, your image is pushed to your configured registry.</p>\\n<p><a href=\\\"http://store.docker.com/\\\">Docker store</a> allows you to buy and sell Docker images or distribute them for free. For instance, you can buy a Docker image containing an application or service from a software vendor and use the image to deploy the application into your testing, staging, and production environments. You can upgrade the application by pulling the new version of the image and redeploying the containers.</p>\\n<h4 id=\\\"4-docker-objects-components\\\">4. Docker objects (components)</h4>\\n<p>When you use Docker, you are creating and using images, containers, networks, volumes, plugins, and other objects. This section is a brief overview of some of those objects.</p>\\n<h5 id=\\\"images\\\">IMAGES</h5>\\n<p>An <em>image</em> is a <strong>read-only template</strong> with instructions for creating a Docker container. </p>\\n<p>Often, an image is <em>based on</em> another image, with some additional customization. For example, you may build an image which is based on the <code>ubuntu</code> image, but installs the Apache web server and your application, as well as the configuration details needed to make your application run.</p>\\n<p>You might create your own images or you might only use those created by others and published in a registry. To build your own image, you create a <em>Dockerfile</em> with a simple syntax for defining the steps needed to create the image and run it. Each instruction in a Dockerfile creates a layer in the image. When you change the Dockerfile and rebuild the image, only those layers which have changed are rebuilt. This is part of what makes images so lightweight, small, and fast, when compared to other virtualization technologies.</p>\\n<h5 id=\\\"containers\\\">CONTAINERS</h5>\\n<p><strong>A container is a runnable instance of an image.</strong> You can create, start, stop, move, or delete a container using the Docker API or CLI. You can connect a container to one or more networks, attach storage to it, or even create a new image based on its current state.</p>\\n<p>By default, a container is relatively well isolated from other containers and its host machine. </p>\\n<p><strong>You can control how isolated a container’s network, storage, or other underlying subsystems are from other containers or from the host machine.</strong></p>\\n<p>A container is defined by its image as well as any configuration options you provide to it when you create or start it. When a container is removed, any changes to its state that are not stored in persistent storage disappear.</p>\\n<h5 id=\\\"services\\\">SERVICES</h5>\\n<p>Services allow you to scale containers across multiple Docker daemons, which all work together as a <em>swarm</em> with multiple <em>managers</em> and <em>workers</em>. Each member of a swarm is a Docker daemon, and the daemons all communicate using the Docker API. A service allows you to define the desired state, such as the number of replicas of the service that must be available at any given time. By default, the service is load-balanced across all worker nodes. To the consumer, the Docker service appears to be a single application. Docker Engine supports swarm mode in Docker 1.12 and higher.</p>\\n<h3 id=\\\"the-underlying-technology\\\">The underlying technology</h3>\\n<p>Docker is written in <a href=\\\"https://golang.org/\\\">Go</a> and takes advantage of several features of the Linux kernel to deliver its functionality.</p>\\n<h4 id=\\\"namespaces\\\">Namespaces</h4>\\n<p>Docker uses a technology called <code>namespaces</code> to provide the isolated workspace called the <em>container</em>. When you run a container, Docker creates a set of <em>namespaces</em> for that container.</p>\\n<p>These namespaces provide a layer of isolation. Each aspect of a container runs in a separate namespace and its access is limited to that namespace.</p>\\n<p>Docker Engine uses namespaces such as the following on Linux:</p>\\n<ul>\\n<li><strong>The pid namespace:</strong> Process isolation (PID: Process ID).</li>\\n<li><strong>The net namespace:</strong> Managing network interfaces (NET: Networking).</li>\\n<li><strong>The ipc namespace:</strong> Managing access to IPC resources (IPC: InterProcess Communication).</li>\\n<li><strong>The mnt namespace:</strong> Managing filesystem mount points (MNT: Mount).</li>\\n<li><strong>The uts namespace:</strong> Isolating kernel and version identifiers. (UTS: Unix Timesharing System).</li>\\n</ul>\\n<h4 id=\\\"control-groups\\\">Control groups</h4>\\n<p>Docker Engine on Linux also relies on another technology called <em>control groups</em> (<code>cgroups</code>). A cgroup limits an application to a specific set of resources. Control groups allow Docker Engine to share available hardware resources to containers and optionally enforce limits and constraints. For example, you can limit the memory available to a specific container.</p>\\n<h4 id=\\\"union-file-systems\\\">Union file systems</h4>\\n<p>Union file systems, or <strong>UnionFS</strong>, are file systems that operate by creating layers, making them very lightweight and fast. Docker Engine uses UnionFS to provide the building blocks for containers. Docker Engine can use multiple UnionFS variants, including AUFS, btrfs, vfs, and DeviceMapper.</p>\\n<h4 id=\\\"container-format\\\">Container format</h4>\\n<p>Docker Engine combines the namespaces, control groups, and UnionFS into a wrapper called a container format. The default container format is <code>libcontainer</code>. In the future, Docker may support other container formats by integrating with technologies such as BSD Jails or Solaris Zones.</p>\\n\";","export default \"<h1 id=\\\"linux安装mysql\\\">Linux安装MySql</h1>\\n<p>一位哲人说过，只会用 FTP 工具的人都是傻子。</p>\\n<h2 id=\\\"原料\\\">原料</h2>\\n<p>去 <a href=\\\"https://www.mysql.com/downloads/\\\">Mysql官网</a> 下载\\nmysql-5.7.19-linux-glibc2.12x86_64.tar.gz。</p>\\n<h2 id=\\\"步骤\\\">步骤</h2>\\n<ul>\\n<li>上传至 /usr/local/</li>\\n<li>解压、重命名<pre><code>tar -xvz -f mysql-5.7.19-linuxglibc2.12x86_64.tar.gz\\nmv /usr/local/mysql-5.7.19-linuxglibc2.12x86_64 /usr/local/mysql\\n</code></pre>\\n此时 MySql 的位置在 /usr/local/mysql/</li>\\n<li>更改mysql用户组,如果没有 mysql 用户和用户组，新建即可<pre><code>chown mysql:mysql /usr/local/mysql/\\n</code></pre>\\n这里要提一句，<strong>Linux中有关于 MySql 的配置文件，最好都将文件所属用户和用户组设置为 mysql，因为在 MySql 启动时会读取或写入数据</strong>。</li>\\n<li>在 /usr/local/mysql/support-files 新建 my_default.cnf 默认配置文件（当然可以改），并添加默认配置，以下是我的 my_default.cnf 。<pre><code>[mysqld]\\n# 一般配置选项\\nbasedir = /usr/local/mysql\\ndatadir = /usr/local/mysql/data\\nport = 3306\\nsocket = /var/run/mysqld/mysqld.sock\\ncharacter-set-server=utf8\\n[client]\\nsocket = /var/run/mysqld/mysqld.sock\\n[mysql]\\n</code></pre>\\n这里提一句，在新建完之后<code>ll my_default.cnf</code>查看一下该文件的用户和用户组，如果是 root 将其改为 mysql。</li>\\n<li>注册和初始化 MySql 服务<pre><code>bin/mysqld --initialize-insecure --user=mysql --basedir=/usr/local/mysql/ --datadir=/usr/local/mysql/data/\\n</code></pre>\\n在这里提示了错误<pre><code>bin/mysqld: error while loading shared libraries: libnuma.so.1: cannot open shared object file: No such file or directory\\n</code></pre>\\n具体意思好像是什么东西没有安装，查了一下 libnuma.so.1 这个东西，可以安装 numactl 来解决这个问题<pre><code>yum install numactl\\n</code></pre>\\n继续初始化服务，虽然有警告，打没有报错</li>\\n<li>复制上述的my_default.cnf和mysql.server配置文件到etc目录，之前复制过该文件到etc目录，它这里提示是否覆盖，输入Y覆盖<pre><code>cp -a /usr/local/mysql/support-files/my_default.cnf /etc/my.cnf\\ncp: overwrite ‘/etc/my.cnf’? y\\ncp -a /usr/local/mysql/support-files/mysql.server /etc/init.d/mysqld\\n</code></pre>\\ncp 使用 -a 参数，会将该文件的属性（用户组，用户）都复制</li>\\n<li>启动 MySql 服务<pre><code>/usr/local/mysql/bin/mysqld_safe --user=mysql\\n</code></pre>\\n</li>\\n<li>重新启动 MySql<pre><code>/etc/init.d/mysqld restart\\nShutting down MySQL.. SUCCESS!\\nStarting MySQL. SUCCESS!\\n</code></pre>\\n但是在登陆的时候出现了一点问题<pre><code> /usr/local/mysql/bin/mysql -u root -p\\nEnter password:\\nERROR 2002 (HY000): Can&#x27;t connect to local MySQL server through socket &#x27;/tmp/mysql.sock&#x27; (2)\\n</code></pre>\\n他说在 /tmp/mysql.sock 连接不到 MySQL 的 socket，看到这我仿佛明白了什么，在 MySQL启动的时候，会读取 /etc/my.cnf 配置文件，在里面可以配置 mysql 的 socket ，当没有配置时 默认就是 socket=/tmp/mysql.sock ，这就简单了，找到我们的 sock 文件 配置到 mysql 节点下面，像这样<pre><code>[mysqld]\\n# 一般配置选项\\nbasedir = /usr/local/mysql\\ndatadir = /usr/local/mysql/data\\nport = 3306\\nsocket = /var/run/mysqld/mysqld.sock\\ncharacter-set-server=utf8\\n[client]\\nsocket = /var/run/mysqld/mysqld.sock\\n[mysql]\\nsocket = /var/run/mysqld/mysqld.sock ===&gt;这里\\n</code></pre>\\n</li>\\n<li>重启MySQL，从新以 root 进入 mysql<pre><code>/etc/init.d/mysqld restart\\nShutting down MySQL.. SUCCESS!\\nStarting MySQL. SUCCESS!\\n/usr/local/myqsl/bin/mysql -u root -p\\nEnter password:\\nWelcome to the MySQL monitor. Commands end with ; or \\\\g.\\nYour MySQL connection id is 3\\nServer version: 5.7.19 MySQL Community Server (GPL)\\nCopyright (c) 2000, 2017, Oracle and/or its affiliates. All rights reserved.\\nOracle is a registered trademark of Oracle Corporation and/or its\\naffiliates. Other names may be trademarks of their respective\\nowners.\\nType &#x27;help;&#x27; or &#x27;\\\\h&#x27; for help. Type &#x27;\\\\c&#x27; to clear the current input statement.\\n</code></pre>\\n剩下的初始化密码，建立远程连接就不写了。emmm ,在 Linux 下面 安装 MySql 的方法还有很多，慢慢参透吧。<h2 id=\\\"参考\\\">参考</h2>\\n<a href=\\\"http://www.cnblogs.com/wy123/p/6815049.html\\\">http://www.cnblogs.com/wy123/p/6815049.html</a>\\n<a href=\\\"http://blog.csdn.net/yoon0205/article/details/50605584\\\">http://blog.csdn.net/yoon0205/article/details/50605584</a></li>\\n</ul>\\n\";","export default \"<h3 id=\\\"6-zigzag-conversionmedium\\\">6. ZigZag Conversion(Medium)</h3>\\n<p>The string <code>&quot;PAYPALISHIRING&quot;</code> is written in a zigzag pattern on a given number of rows like this: (you may want to display this pattern in a fixed font for better legibility)</p>\\n<pre><code class=\\\"hljs language-graph\\\">P   A   H   N\\nA P L S I I G\\nY   I   R\\n</code></pre>\\n<p>And then read line by line: <code>&quot;PAHNAPLSIIGYIR&quot;</code></p>\\n<p>Write the code that will take a string and make this conversion given a number of rows:</p>\\n<pre><code>string convert(string s, int numRows);\\n</code></pre>\\n<p><strong>Example 1:</strong></p>\\n<blockquote>\\n<p>Input: s = &quot;PAYPALISHIRING&quot;, numRows = 3\\nOutput: &quot;PAHNAPLSIIGYIR&quot;</p>\\n</blockquote>\\n<p><strong>Example 2:</strong></p>\\n<blockquote>\\n<p>Input: s = &quot;PAYPALISHIRING&quot;, numRows = 4\\nOutput: &quot;PINALSIGYAHRPI&quot;\\nExplanation:</p>\\n<p>P     I    N\\nA   L S  I G\\nY A   H R\\nP     I</p>\\n</blockquote>\\n<p>说白了就是按照行数去写N字，完了之后再从左到右从上到下的序列</p>\\n<h4 id=\\\"logical-gap-beat9982\\\">Logical Gap Beat(99.82%)</h4>\\n<p>这样的阵图是很有逻辑性的，我们多看几组图的下标就能发现逻辑：</p>\\n<pre><code class=\\\"hljs language-graph\\\">以26个字母序列为例：\\nrow=3\\n    A   E   I   M   Q   U   Y            00    04    08    12    16    20    24\\n    B D F H J L N P R T V X Z     ---&gt;   01 03 05 07 09 11 13 15 17 19 21 23 25 \\n    C   G   K   O   S   W                02    06    10    14    18    22\\n------------------------------------\\nrow=4\\n    A     G     M     S     Y            00      06       12       18       24\\n    B   F H   L N   R T   X Z     ---&gt;   01   05 07    11 13    17 19    23 25\\n    C E   I K   O Q   U W                02 04   08 10    14 16    20 22 \\n    D     J     p     V                  03      09       15       21\\n------------------------------------\\nrow=5\\n    A       I       Q       Y            00        08          16          24\\n    B     H J     P R     X Z     ---&gt;   01     07 09       15 17       23 25\\n    C   G   K   O   S   W                02   06   10    14    18    22\\n    D F     L N     T V                  03 05     11 13       19 21\\n    E       M       U                    04        12          20\\n</code></pre>\\n<p>到这差不多就看出规律了，我们以一个<strong>V</strong>为单元，每次循环就处理这个V单元就好了，比如以row为3/5为例：</p>\\n<pre><code class=\\\"hljs language-graph\\\">row=3\\nA   E   I   M   Q   U   Y   00    | 04    | 08    | 12    | 16    | 20    | 24\\nB D F H J L N P R T V X Z   01 03 | 05 07 | 09 11 | 13 15 | 17 19 | 21 23 | 25 \\nC   G   K   O   S   W       02    | 06    | 10    | 14    | 18    | 22\\n-----------------------------\\nrow=5\\nA       I       Q       Y   00        | 08          | 16          | 24\\nB     H J     P R     X Z   01     07 | 09       15 | 17       23 | 25\\nC   G   K   O   S   W       02   06   | 10    14    | 18    22\\nD F     L N     T V         03 05     | 11 13       | 19 21\\nE       M       U           04        | 12          | 20\\n</code></pre>\\n<p><strong>row=3时</strong></p>\\n<ul>\\n<li>第一行和最后一行之间有4个下标间距 （4 = (3 - 1) * 2）</li>\\n<li>第二行之间有2个下标间距 （2 = (3 - 2) * 2）</li>\\n</ul>\\n<p><strong>row=5时</strong></p>\\n<ul>\\n<li>第一行和最后一行之间有8个下标间距 （8 = (5 - 1) * 2）</li>\\n<li>第二行之间有6个下标间距 （6 = (5 - 2) * 2）</li>\\n<li>第三行4 （4 = (5 - 3) * 2）</li>\\n<li>第四行2 （2 = (5 - 4) * 2）</li>\\n</ul>\\n<p>容易看出规律，我们以行数为遍历顺序的话，设求行数为<strong>numRow</strong>，当前行数为<strong>nowRow</strong>：</p>\\n<ul>\\n<li>第一行和最后一行字符之间间距都是<em><em>（numRow - 1）</em> 2</em><em>，我们称它为*<em>mainGap</em></em></li>\\n<li>其他行：<em><em>（numRow - nowRow）</em> 2</em><em>，我们称它为*<em>minorGap</em></em></li>\\n</ul>\\n<p>如果只看<strong>mainGap</strong>的距离，那么每一行我们都会经过它，关键在于求出<strong>minorGap</strong>的时候，如果它小于<strong>mainGap</strong>，那么在下一次循环之前，也要加上它</p>\\n<p>于是代码如下：</p>\\n<pre><code class=\\\"hljs language-java\\\"><span class=\\\"hljs-keyword\\\">public</span> String <span class=\\\"hljs-title function_\\\">convert</span><span class=\\\"hljs-params\\\">(String s, <span class=\\\"hljs-type\\\">int</span> numRows)</span> {\\n    <span class=\\\"hljs-keyword\\\">if</span> (numRows == <span class=\\\"hljs-number\\\">1</span>) {\\n        <span class=\\\"hljs-keyword\\\">return</span> s;\\n    }\\n    <span class=\\\"hljs-type\\\">char</span>[] chars = s.toCharArray();\\n    <span class=\\\"hljs-type\\\">int</span> <span class=\\\"hljs-variable\\\">rowsCount</span> <span class=\\\"hljs-operator\\\">=</span> <span class=\\\"hljs-number\\\">1</span>;\\n    <span class=\\\"hljs-type\\\">StringBuilder</span> <span class=\\\"hljs-variable\\\">sb</span> <span class=\\\"hljs-operator\\\">=</span> <span class=\\\"hljs-keyword\\\">new</span> <span class=\\\"hljs-title class_\\\">StringBuilder</span>();\\n    <span class=\\\"hljs-type\\\">int</span> <span class=\\\"hljs-variable\\\">mainGap</span> <span class=\\\"hljs-operator\\\">=</span> (numRows - <span class=\\\"hljs-number\\\">1</span>) * <span class=\\\"hljs-number\\\">2</span>;\\n    <span class=\\\"hljs-keyword\\\">while</span> (rowsCount &lt;= numRows) {\\n        <span class=\\\"hljs-type\\\">int</span> <span class=\\\"hljs-variable\\\">start</span> <span class=\\\"hljs-operator\\\">=</span> rowsCount - <span class=\\\"hljs-number\\\">1</span>;\\n        <span class=\\\"hljs-type\\\">int</span> <span class=\\\"hljs-variable\\\">minorGap</span> <span class=\\\"hljs-operator\\\">=</span> (numRows - rowsCount) * <span class=\\\"hljs-number\\\">2</span>;\\n        <span class=\\\"hljs-keyword\\\">for</span> (<span class=\\\"hljs-type\\\">int</span> <span class=\\\"hljs-variable\\\">i</span> <span class=\\\"hljs-operator\\\">=</span> start; i &lt; chars.length; i += mainGap) {\\n            sb.append(chars[i]);\\n            <span class=\\\"hljs-comment\\\">// add minorGap&#x27;s char if it&#x27;s not first/last row</span>\\n            <span class=\\\"hljs-keyword\\\">if</span> (minorGap &lt; mainGap\\n                    && rowsCount &lt; numRows\\n                    && i + minorGap &lt; chars.length) {\\n                sb.append(chars[i + minorGap]);\\n            }\\n        }\\n        rowsCount++;\\n    }\\n    <span class=\\\"hljs-keyword\\\">return</span> sb.toString();\\n}\\n</code></pre>\\n<h3 id=\\\"7-reverse-integereasy\\\">7. Reverse Integer(Easy)</h3>\\n<p>Given a 32-bit signed integer, reverse digits of an integer.</p>\\n<p><strong>Example 1:</strong></p>\\n<blockquote>\\n<p>Input: 123\\nOutput: 321</p>\\n</blockquote>\\n<p><strong>Example 2:</strong></p>\\n<blockquote>\\n<p>Input: -123\\nOutput: -321</p>\\n</blockquote>\\n<p><strong>Example 3:</strong></p>\\n<blockquote>\\n<p>Input: 120\\nOutput: 21</p>\\n</blockquote>\\n<p><strong>Note:</strong>\\nAssume we are dealing with an environment which could only store integers within the 32-bit signed integer range: [−2^31,  2^(31 − 1)]. For the purpose of this problem, assume that your function returns 0 when the reversed integer overflows.</p>\\n<h4 id=\\\"ⅰ-with-string\\\">Ⅰ. with string</h4>\\n<p>You can use only string but in java we have StringBuilder</p>\\n<pre><code class=\\\"hljs language-java\\\"><span class=\\\"hljs-keyword\\\">public</span> <span class=\\\"hljs-type\\\">int</span> <span class=\\\"hljs-title function_\\\">reverse</span><span class=\\\"hljs-params\\\">(<span class=\\\"hljs-type\\\">int</span> x)</span> {\\n    <span class=\\\"hljs-type\\\">int</span> <span class=\\\"hljs-variable\\\">raw</span> <span class=\\\"hljs-operator\\\">=</span> Math.abs(x);\\n    <span class=\\\"hljs-type\\\">StringBuilder</span> <span class=\\\"hljs-variable\\\">sb</span> <span class=\\\"hljs-operator\\\">=</span> <span class=\\\"hljs-keyword\\\">new</span> <span class=\\\"hljs-title class_\\\">StringBuilder</span>(raw + <span class=\\\"hljs-string\\\">&quot;&quot;</span>);\\n    sb.reverse();\\n    <span class=\\\"hljs-keyword\\\">if</span> (x &lt; <span class=\\\"hljs-number\\\">0</span>) {\\n        sb.insert(<span class=\\\"hljs-number\\\">0</span>, <span class=\\\"hljs-string\\\">&quot;-&quot;</span>);\\n    }\\n    <span class=\\\"hljs-type\\\">int</span> <span class=\\\"hljs-variable\\\">ans</span> <span class=\\\"hljs-operator\\\">=</span> <span class=\\\"hljs-number\\\">0</span>;\\n    <span class=\\\"hljs-keyword\\\">try</span> {\\n        ans = Integer.parseInt(sb.toString());\\n    } <span class=\\\"hljs-keyword\\\">catch</span> (Exception e) {\\n        <span class=\\\"hljs-comment\\\">// ignore</span>\\n    }\\n    <span class=\\\"hljs-keyword\\\">return</span> ans;\\n}\\n</code></pre>\\n<h4 id=\\\"ⅱ-calculate\\\">Ⅱ. calculate</h4>\\n<p>Refer from discuss</p>\\n<ol>\\n<li><p>No need to handle the minus sign cause <strong>Mod</strong> will keep it.</p>\\n<p>e.g <code>-51  % 10</code> get  <code>-1</code></p>\\n</li>\\n<li><p>Do not use <strong>long</strong> type in java cause <strong>&quot;Assume we are dealing with an environment which could only store integers&quot;</strong> was declare on the question</p>\\n</li>\\n</ol>\\n<pre><code class=\\\"hljs language-java\\\"><span class=\\\"hljs-keyword\\\">public</span> <span class=\\\"hljs-type\\\">int</span> <span class=\\\"hljs-title function_\\\">reverse</span><span class=\\\"hljs-params\\\">(<span class=\\\"hljs-type\\\">int</span> x)</span> {\\n    <span class=\\\"hljs-type\\\">int</span> <span class=\\\"hljs-variable\\\">ans</span> <span class=\\\"hljs-operator\\\">=</span> <span class=\\\"hljs-number\\\">0</span>;\\n    <span class=\\\"hljs-keyword\\\">while</span> (x != <span class=\\\"hljs-number\\\">0</span>) {\\n        <span class=\\\"hljs-type\\\">int</span> <span class=\\\"hljs-variable\\\">bit</span> <span class=\\\"hljs-operator\\\">=</span> x % <span class=\\\"hljs-number\\\">10</span>;\\n        <span class=\\\"hljs-type\\\">int</span> <span class=\\\"hljs-variable\\\">tmp</span> <span class=\\\"hljs-operator\\\">=</span> ans * <span class=\\\"hljs-number\\\">10</span> + bit;\\n        <span class=\\\"hljs-keyword\\\">if</span> ((tmp - bit) / <span class=\\\"hljs-number\\\">10</span> != ans) { <span class=\\\"hljs-keyword\\\">return</span> <span class=\\\"hljs-number\\\">0</span>; }\\n        ans = tmp;\\n        x /= <span class=\\\"hljs-number\\\">10</span>;\\n    }\\n    <span class=\\\"hljs-keyword\\\">return</span> ans;\\n}\\n</code></pre>\\n<h3 id=\\\"8-string-to-integermedium\\\">8. String To Integer(Medium)</h3>\\n<p>Implement <code>atoi </code>which converts a string to an integer.</p>\\n<p>The function first discards as many whitespace characters as necessary until the first non-whitespace character is found. Then, starting from this character, takes an optional initial plus or minus sign followed by as many numerical digits as possible, and interprets them as a numerical value.</p>\\n<p>The string can contain additional characters after those that form the integral number, which are ignored and have no effect on the behavior of this function.</p>\\n<p>If the first sequence of non-whitespace characters in str is not a valid integral number, or if no such sequence exists because either str is empty or it contains only whitespace characters, no conversion is performed.</p>\\n<p>If no valid conversion could be performed, a zero value is returned.</p>\\n<p>Note:</p>\\n<ul>\\n<li>Only the space character &#39; &#39; is considered as whitespace character.</li>\\n<li><strong>Assume we are dealing with an environment which could only store integers</strong> within the 32-bit signed integer range: [−231,  231 − 1]. If the numerical value is out of the range of representable values, INT_MAX (231 − 1) or INT_MIN (−231) is returned.\\nExample 1:</li>\\n</ul>\\n<blockquote>\\n<p>Input: &quot;42&quot;\\nOutput: 42</p>\\n</blockquote>\\n<p>Example 2:</p>\\n<blockquote>\\n<p>Input: &quot;   -42&quot;\\nOutput: -42\\nExplanation: The first non-whitespace character is &#39;-&#39;, which is the minus sign.\\n             Then take as many numerical digits as possible, which gets 42.</p>\\n</blockquote>\\n<p>Example 3:</p>\\n<blockquote>\\n<p>Input: &quot;4193 with words&quot;\\nOutput: 4193\\nExplanation: Conversion stops at digit &#39;3&#39; as the next character is not a numerical digit.</p>\\n</blockquote>\\n<p>Example 4:</p>\\n<blockquote>\\n<p>Input: &quot;words and 987&quot;\\nOutput: 0\\nExplanation: The first non-whitespace character is &#39;w&#39;, which is not a numerical \\n             digit or a +/- sign. Therefore no valid conversion could be performed.</p>\\n</blockquote>\\n<p>Example 5:</p>\\n<blockquote>\\n<p>Input: &quot;-91283472332&quot;\\nOutput: -2147483648\\nExplanation: The number &quot;-91283472332&quot; is out of the range of a 32-bit signed integer.\\n             Thefore INT_MIN (−231) is returned.</p>\\n</blockquote>\\n<p>这题需要注意处理各种边角情况：</p>\\n<ol>\\n<li><p>全是空格符</p>\\n</li>\\n<li><p>空字符串</p>\\n</li>\\n<li><p>乘法溢出：因为每次加一位数字就需要将上一次的结果乘以10：</p>\\n<p>整型的范围是<code>[-2147483648  ~ 2147483647]</code></p>\\n<p>假设我们需要处理字符串<code>“2147483657”</code>，那么在处理最后一位数字<code>7</code>的时候，我们需要将上一次得到的结果<code>214748365</code>乘以10，得到<code>2147483650</code>，显然这时候这个数字已经大于<code>2147483647</code>了，不需要进行到加法就已经因为乘法而溢出了</p>\\n</li>\\n<li><p>加法溢出： 判断符号是否反转（整型的上下溢）</p>\\n</li>\\n</ol>\\n<pre><code class=\\\"hljs language-java\\\"><span class=\\\"hljs-keyword\\\">public</span> <span class=\\\"hljs-type\\\">int</span> <span class=\\\"hljs-title function_\\\">strToInt2</span><span class=\\\"hljs-params\\\">(String str)</span> {\\n    <span class=\\\"hljs-keyword\\\">if</span> (str.length() == <span class=\\\"hljs-number\\\">0</span>) <span class=\\\"hljs-keyword\\\">return</span> <span class=\\\"hljs-number\\\">0</span>;\\n    <span class=\\\"hljs-type\\\">int</span> <span class=\\\"hljs-variable\\\">ans</span> <span class=\\\"hljs-operator\\\">=</span> <span class=\\\"hljs-number\\\">0</span>;\\n    <span class=\\\"hljs-type\\\">char</span>[] cArr = str.toCharArray();\\n    <span class=\\\"hljs-type\\\">int</span> <span class=\\\"hljs-variable\\\">startIndex</span> <span class=\\\"hljs-operator\\\">=</span> <span class=\\\"hljs-number\\\">0</span>;\\n    <span class=\\\"hljs-comment\\\">// skip spaces</span>\\n    <span class=\\\"hljs-keyword\\\">while</span> (cArr[startIndex] == <span class=\\\"hljs-string\\\">&#x27; &#x27;</span>) {\\n        startIndex++;\\n        <span class=\\\"hljs-comment\\\">// all spaces</span>\\n        <span class=\\\"hljs-keyword\\\">if</span> (startIndex == cArr.length) <span class=\\\"hljs-keyword\\\">return</span> <span class=\\\"hljs-number\\\">0</span>;\\n    }\\n    <span class=\\\"hljs-type\\\">int</span> <span class=\\\"hljs-variable\\\">sign</span> <span class=\\\"hljs-operator\\\">=</span> <span class=\\\"hljs-number\\\">1</span>;\\n    <span class=\\\"hljs-keyword\\\">if</span> (cArr[startIndex] == <span class=\\\"hljs-string\\\">&#x27;-&#x27;</span>) {\\n        sign = -<span class=\\\"hljs-number\\\">1</span>;\\n        startIndex++;\\n    } <span class=\\\"hljs-keyword\\\">else</span> <span class=\\\"hljs-keyword\\\">if</span> (cArr[startIndex] == <span class=\\\"hljs-string\\\">&#x27;+&#x27;</span>) {\\n        sign = <span class=\\\"hljs-number\\\">1</span>;\\n        startIndex++;\\n    }\\n    <span class=\\\"hljs-keyword\\\">while</span> (startIndex &lt; cArr.length) {\\n        <span class=\\\"hljs-keyword\\\">if</span> (cArr[startIndex] &gt;= <span class=\\\"hljs-string\\\">&#x27;0&#x27;</span> && cArr[startIndex] &lt;= <span class=\\\"hljs-string\\\">&#x27;9&#x27;</span>) {\\n            <span class=\\\"hljs-keyword\\\">if</span> (ans &gt; Integer.MAX_VALUE / <span class=\\\"hljs-number\\\">10</span> || ans &lt; Integer.MIN_VALUE / <span class=\\\"hljs-number\\\">10</span>) {\\n                <span class=\\\"hljs-comment\\\">// multiplication overflow</span>\\n                <span class=\\\"hljs-type\\\">return</span> <span class=\\\"hljs-variable\\\">sign</span> <span class=\\\"hljs-operator\\\">=</span>= -<span class=\\\"hljs-number\\\">1</span> ? Integer.MIN_VALUE : Integer.MAX_VALUE;\\n            }\\n            ans = (ans * <span class=\\\"hljs-number\\\">10</span>) + (sign * (cArr[startIndex] - <span class=\\\"hljs-string\\\">&#x27;0&#x27;</span>));\\n            <span class=\\\"hljs-comment\\\">// addiction overflow</span>\\n            <span class=\\\"hljs-keyword\\\">if</span> (sign == -<span class=\\\"hljs-number\\\">1</span> && ans &gt; <span class=\\\"hljs-number\\\">0</span>) {\\n                <span class=\\\"hljs-keyword\\\">return</span> Integer.MIN_VALUE;\\n            }\\n            <span class=\\\"hljs-keyword\\\">if</span> (sign == <span class=\\\"hljs-number\\\">1</span> && ans &lt; <span class=\\\"hljs-number\\\">0</span>) {\\n                <span class=\\\"hljs-keyword\\\">return</span> Integer.MAX_VALUE;\\n            }\\n        } <span class=\\\"hljs-keyword\\\">else</span> {\\n            <span class=\\\"hljs-comment\\\">// not a number</span>\\n            <span class=\\\"hljs-keyword\\\">return</span> ans;\\n        }\\n        startIndex++;\\n    }\\n    <span class=\\\"hljs-keyword\\\">return</span> ans;\\n}\\n</code></pre>\\n<h3 id=\\\"9-parlindrome-numbereasy\\\">9. Parlindrome Number(Easy)</h3>\\n<p>Determine whether an integer is a palindrome. An integer is a palindrome when it reads the same backward as forward.</p>\\n<p><strong>Example 1:</strong></p>\\n<blockquote>\\n<p>Input: 121\\nOutput: true</p>\\n</blockquote>\\n<p><strong>Example 2:</strong></p>\\n<blockquote>\\n<p>Input: -121\\nOutput: false\\nExplanation: From left to right, it reads -121. From right to left, it becomes 121-. Therefore it is not a palindrome.</p>\\n</blockquote>\\n<p><strong>Example 3:</strong></p>\\n<blockquote>\\n<p>Input: 10\\nOutput: false\\nExplanation: Reads 01 from right to left. Therefore it is not a palindrome.</p>\\n</blockquote>\\n<p><strong>Follow up:</strong></p>\\n<p>Coud you solve it without converting the integer to a string?</p>\\n<h4 id=\\\"ⅰ-slide-window\\\">Ⅰ. slide window</h4>\\n<p>If we know the length of the number sequence, then we could easily pick up any single number on this sequence.</p>\\n<pre class=\\\"nhi\\\">\\nWe have number: x = 10234\\n               [1] 0 2 3 4\\n           pick 1 = (x / 10000) % 10\\n           -------------------------\\n                1 0 [2] 3 4\\n           pick 2 = (x / 100) % 10\\nWe call 10000/100 as a 'base', it descide the position of the window.\\n</pre>\\n\\n<pre><code class=\\\"hljs language-java\\\"><span class=\\\"hljs-keyword\\\">public</span> <span class=\\\"hljs-type\\\">boolean</span> <span class=\\\"hljs-title function_\\\">isPalindrome</span><span class=\\\"hljs-params\\\">(<span class=\\\"hljs-type\\\">int</span> x)</span> {\\n    <span class=\\\"hljs-keyword\\\">if</span> (x &lt; <span class=\\\"hljs-number\\\">0</span>) {\\n        <span class=\\\"hljs-keyword\\\">return</span> <span class=\\\"hljs-literal\\\">false</span>;\\n    }\\n    <span class=\\\"hljs-type\\\">int</span> <span class=\\\"hljs-variable\\\">length</span> <span class=\\\"hljs-operator\\\">=</span> <span class=\\\"hljs-number\\\">1</span>;\\n    <span class=\\\"hljs-type\\\">int</span> <span class=\\\"hljs-variable\\\">tmp</span> <span class=\\\"hljs-operator\\\">=</span> x;\\n    <span class=\\\"hljs-type\\\">int</span> <span class=\\\"hljs-variable\\\">headBase</span> <span class=\\\"hljs-operator\\\">=</span> <span class=\\\"hljs-number\\\">1</span>;\\n    <span class=\\\"hljs-type\\\">int</span> <span class=\\\"hljs-variable\\\">tailBase</span> <span class=\\\"hljs-operator\\\">=</span> <span class=\\\"hljs-number\\\">1</span>;\\n    <span class=\\\"hljs-comment\\\">// get length and head bse</span>\\n    <span class=\\\"hljs-keyword\\\">while</span> (tmp &gt;= <span class=\\\"hljs-number\\\">10</span>) {\\n        length++;\\n        tmp /= <span class=\\\"hljs-number\\\">10</span>;\\n        headBase *= <span class=\\\"hljs-number\\\">10</span>;\\n    }\\n    <span class=\\\"hljs-comment\\\">// pick head and tail accoding to the base</span>\\n    <span class=\\\"hljs-keyword\\\">for</span> (<span class=\\\"hljs-type\\\">int</span> <span class=\\\"hljs-variable\\\">i</span> <span class=\\\"hljs-operator\\\">=</span> <span class=\\\"hljs-number\\\">0</span>; i &lt; length / <span class=\\\"hljs-number\\\">2</span>; i++) {\\n        <span class=\\\"hljs-type\\\">int</span> <span class=\\\"hljs-variable\\\">head</span> <span class=\\\"hljs-operator\\\">=</span> (x / headBase) % <span class=\\\"hljs-number\\\">10</span>;\\n        <span class=\\\"hljs-type\\\">int</span> <span class=\\\"hljs-variable\\\">tail</span> <span class=\\\"hljs-operator\\\">=</span> (x / tailBase) % <span class=\\\"hljs-number\\\">10</span>;\\n        <span class=\\\"hljs-keyword\\\">if</span> (head != tail) {\\n            <span class=\\\"hljs-keyword\\\">return</span> <span class=\\\"hljs-literal\\\">false</span>;\\n        } <span class=\\\"hljs-keyword\\\">else</span> {\\n            headBase /= <span class=\\\"hljs-number\\\">10</span>;               \\n            tailBase *= <span class=\\\"hljs-number\\\">10</span>;\\n        }\\n    } \\n    <span class=\\\"hljs-keyword\\\">return</span> <span class=\\\"hljs-literal\\\">true</span>;\\n}\\n</code></pre>\\n<h4 id=\\\"ⅱ-just-look-on-half\\\">Ⅱ. just look on half</h4>\\n<p>Base on offical solution:</p>\\n<pre><code class=\\\"hljs language-java\\\"><span class=\\\"hljs-keyword\\\">public</span> bool <span class=\\\"hljs-title function_\\\">IsPalindrome</span><span class=\\\"hljs-params\\\">(<span class=\\\"hljs-type\\\">int</span> x)</span> {\\n    <span class=\\\"hljs-keyword\\\">if</span>(x &lt; <span class=\\\"hljs-number\\\">0</span> || (x % <span class=\\\"hljs-number\\\">10</span> == <span class=\\\"hljs-number\\\">0</span> && x != <span class=\\\"hljs-number\\\">0</span>)) {\\n        <span class=\\\"hljs-keyword\\\">return</span> <span class=\\\"hljs-literal\\\">false</span>;\\n    }\\n    <span class=\\\"hljs-type\\\">int</span> <span class=\\\"hljs-variable\\\">rev</span> <span class=\\\"hljs-operator\\\">=</span> <span class=\\\"hljs-number\\\">0</span>;\\n    <span class=\\\"hljs-keyword\\\">while</span>(x &gt; rev) {\\n        rev = rev * <span class=\\\"hljs-number\\\">10</span> + x % <span class=\\\"hljs-number\\\">10</span>;\\n        x /= <span class=\\\"hljs-number\\\">10</span>;\\n    }\\n    <span class=\\\"hljs-type\\\">return</span> <span class=\\\"hljs-variable\\\">x</span> <span class=\\\"hljs-operator\\\">=</span>= rev || x == rev/<span class=\\\"hljs-number\\\">10</span>;\\n}\\n</code></pre>\\n<h3 id=\\\"10-regular-expression-matchinghard\\\">10. Regular Expression Matching(hard)</h3>\\n<p>Given an input string (<code>s</code>) and a pattern (<code>p</code>), implement regular expression matching with support for <code>&#39;.&#39;</code>and <code>&#39;*&#39;</code>.</p>\\n<pre><code>&#x27;.&#x27; Matches any single character.\\n&#x27;*&#x27; Matches zero or more of the preceding element.\\n</code></pre>\\n<p>The matching should cover the <strong>entire</strong> input string (not partial).</p>\\n<p><strong>Note:</strong></p>\\n<ul>\\n<li><code>s</code> could be empty and contains only lowercase letters <code>a-z</code>.</li>\\n<li><code>p</code> could be empty and contains only lowercase letters <code>a-z</code>, and characters like <code>.</code> or <code>*</code>.</li>\\n</ul>\\n<p><strong>Example 1:</strong></p>\\n<blockquote>\\n<p>Input:\\ns = &quot;aa&quot;\\np = &quot;a&quot;\\nOutput: false\\nExplanation: &quot;a&quot; does not match the entire string &quot;aa&quot;.</p>\\n</blockquote>\\n<p><strong>Example 2:</strong></p>\\n<blockquote>\\n<p>Input:\\ns = &quot;aa&quot;\\np = &quot;a*&quot;\\nOutput: true\\nExplanation: &#39;*&#39; means zero or more of the precedeng element, &#39;a&#39;. Therefore, by repeating &#39;a&#39; once, it becomes &quot;aa&quot;.</p>\\n</blockquote>\\n<p><strong>Example 3:</strong></p>\\n<blockquote>\\n<p>Input:\\ns = &quot;ab&quot;\\np = &quot;.<em>&quot;\\nOutput: true\\nExplanation: &quot;.</em>&quot; means &quot;zero or more (*) of any character (.)&quot;.</p>\\n</blockquote>\\n<p><strong>Example 4:</strong></p>\\n<blockquote>\\n<p>Input:\\ns = &quot;aab&quot;\\np = &quot;c<em>a</em>b&quot;\\nOutput: true\\nExplanation: c can be repeated 0 times, a can be repeated 1 time. Therefore it matches &quot;aab&quot;.</p>\\n</blockquote>\\n<p><strong>Example 5:</strong></p>\\n<blockquote>\\n<p>Input:\\ns = &quot;mississippi&quot;\\np = &quot;mis<em>is</em>p*.&quot;\\nOutput: false</p>\\n</blockquote>\\n<h4 id=\\\"ⅰ-recursion\\\">Ⅰ. Recursion</h4>\\n<p>这题难就难在，如果没有一阵见血地看出用什么思想去解的话，是很难找到解法的，因为解法并不多</p>\\n<p>我开始解的时候沉迷于线性解法，去遍历<code>pattern</code>字串，试图用多个<code>if-else</code>去覆盖到所有的case，但是失败了，因为线性解法去覆盖case的话，不太可能一次性写出所有的case就算真的让你写出来了话，花的时间也非常多</p>\\n<p>那么怎么才能一阵见血呢？看你做题的sence了- -</p>\\n<p>为了方便，我们把<code>text</code> matching <code>pattern</code>简写成<code>text -&gt; pattern</code></p>\\n<p>根据官方给出的回溯思路，我们考虑如下几种情况：</p>\\n<ul>\\n<li><p>如果<code>pattern</code>为&quot;&quot;的话，这次match的结果就等同于看<code>text</code>是否为空；</p>\\n</li>\\n<li><p>如果我们每次只对比<code>text</code>中的第一个字符，并且比完我们就将它剔除掉的话，于是我们每次都是从一个新的子<code>pattern</code>和一个新的子<code>text</code>去继续往下进行对比，比如说<code>abc -&gt; abc</code>，当对比完<code>text[0] -&gt; pattern[0]</code>之后，我们下一次就从<code>bc -&gt; bc</code>去对比；</p>\\n<p>  也就是说：<code>text[0, n] -&gt; pattern[0, m]</code>的结果等于<code>text[0]-&gt;pattern[0] && text[1, n]-&gt;pattern[1, m]</code></p>\\n</li>\\n<li><p>如果<code>pattern</code>不为空，根据上一个情况的扩展，对于<code>text[0]-&gt;pattern[0]</code>的判断，如果pattern是<code>.</code>，那么这次判断match，否则还是看text和pattern的字符是否相等；</p>\\n</li>\\n<li><p>对于<code>.*</code>或者<code>X*</code>（X代表一个确定的字符）的情况，假如说，<code>text</code>只剩下一个字符了，那么我们其实可以忽略掉这个2长度的pattern，因为<code>*</code>就是0到多个，比如<code>c -&gt; a*c</code>的match结果可以看作是<code>c -&gt; c</code>；但是如果<code>text</code>还有多个字符，我们还是得乖乖地<strong>去腥（去*）</strong>，比如<code>aac -&gt; a*c</code>，的match结果，我们首先判断首字符是否在<strong>星范围内</strong>，如果在，那么我们可以去掉它，继续用子串和原<code>pattern</code>比较：<code>ac -&gt; a*c</code>，一直到最后我们发现，又回到了<code>c -&gt; a*c</code>；</p>\\n</li>\\n</ul>\\n<pre><code class=\\\"hljs language-java\\\"><span class=\\\"hljs-keyword\\\">public</span> <span class=\\\"hljs-type\\\">boolean</span> <span class=\\\"hljs-title function_\\\">isMatch</span><span class=\\\"hljs-params\\\">(String text, String pattern)</span> {\\n    <span class=\\\"hljs-keyword\\\">if</span> (pattern.isEmpty()) {\\n        <span class=\\\"hljs-keyword\\\">return</span> text.isEmpty();\\n    }\\n    <span class=\\\"hljs-type\\\">boolean</span> <span class=\\\"hljs-variable\\\">firstMatch</span> <span class=\\\"hljs-operator\\\">=</span> (!text.isEmpty() &&\\n            (pattern.charAt(<span class=\\\"hljs-number\\\">0</span>) == text.charAt(<span class=\\\"hljs-number\\\">0</span>) || pattern.charAt(<span class=\\\"hljs-number\\\">0</span>) == <span class=\\\"hljs-string\\\">&#x27;.&#x27;</span>));\\n\\n    <span class=\\\"hljs-keyword\\\">if</span> (pattern.length() &gt;= <span class=\\\"hljs-number\\\">2</span> && pattern.charAt(<span class=\\\"hljs-number\\\">1</span>) == <span class=\\\"hljs-string\\\">&#x27;*&#x27;</span>) {\\n        <span class=\\\"hljs-type\\\">String</span> <span class=\\\"hljs-variable\\\">subPattern</span> <span class=\\\"hljs-operator\\\">=</span> pattern.substring(<span class=\\\"hljs-number\\\">2</span>);\\n        <span class=\\\"hljs-keyword\\\">return</span> (isMatch(text, subPattern) ||\\n                (firstMatch && isMatch(text.substring(<span class=\\\"hljs-number\\\">1</span>), pattern)));\\n    } <span class=\\\"hljs-keyword\\\">else</span> {\\n        <span class=\\\"hljs-keyword\\\">return</span> firstMatch && isMatch(text.substring(<span class=\\\"hljs-number\\\">1</span>), pattern.substring(<span class=\\\"hljs-number\\\">1</span>));\\n    }\\n}\\n</code></pre>\\n<h4 id=\\\"ⅱ-dp\\\">Ⅱ. DP</h4>\\n<p>DP能写出千种万种方式，只是想不想得到而已，附上我喜欢的<a href=\\\"https://leetcode.com/problems/regular-expression-matching/discuss/5651/Easy-DP-Java-Solution-with-detailed-Explanation/231235\\\">一种</a></p>\\n<pre><code>假如我们有：\\n\\nTn = t1t2t3...tn-1tn\\nPm = p1p2p3...pm-1pm\\n\\n那么：\\nMatch(Tm, Pm) = Match(tn, pm) && Match(Tn-1, Pm-1)        (1)\\nMatch(Ti, Pj) =   if (ti == pj || pj == &#x27;.&#x27;)\\n                then return Match(Ti-1, Pj-1);            (2)    \\n                else\\n                    if (pj == &#x27;*&#x27;)\\n                        if (ti != pj-1 && pj-1 != &#x27;.&#x27;)\\n                      then return Match(Ti, Pj-2);        (3)    // no match then skip &#x27;X*&#x27;\\n                      else\\n                        return \\n                            (Match(Ti, Pj-1)) ||        (4) // char before * appears once\\n                            (Match(Ti-1,Pj))  ||        (5) // char before * appears more\\n                            (Match(Ti, Pj-2));            (6) // no match then skip &#x27;X*&#x27;\\n\\n然后有一条边界条件，Match(tn, &quot;&quot;) = (tn == &quot;&quot;)\\n</code></pre>\\n<pre><code class=\\\"hljs language-java\\\"><span class=\\\"hljs-keyword\\\">public</span> <span class=\\\"hljs-type\\\">boolean</span> <span class=\\\"hljs-title function_\\\">isMatch</span><span class=\\\"hljs-params\\\">(String s, String p)</span> {\\n    s = <span class=\\\"hljs-string\\\">&#x27;+&#x27;</span> + s;\\n    p = <span class=\\\"hljs-string\\\">&#x27;+&#x27;</span> + p;\\n    <span class=\\\"hljs-type\\\">char</span>[] scs = s.toCharArray();\\n    <span class=\\\"hljs-type\\\">char</span>[] pcs = p.toCharArray();\\n    <span class=\\\"hljs-type\\\">boolean</span>[][] dp = <span class=\\\"hljs-keyword\\\">new</span> <span class=\\\"hljs-title class_\\\">boolean</span>[scs.length][pcs.length];\\n    dp[<span class=\\\"hljs-number\\\">0</span>][<span class=\\\"hljs-number\\\">0</span>] = <span class=\\\"hljs-literal\\\">true</span>;\\n    <span class=\\\"hljs-keyword\\\">for</span> (<span class=\\\"hljs-type\\\">int</span> <span class=\\\"hljs-variable\\\">j</span> <span class=\\\"hljs-operator\\\">=</span> <span class=\\\"hljs-number\\\">1</span>; j &lt; pcs.length; j++) {\\n        <span class=\\\"hljs-keyword\\\">if</span> (pcs[j] == <span class=\\\"hljs-string\\\">&#x27;*&#x27;</span>) {\\n            dp[<span class=\\\"hljs-number\\\">0</span>][j] = dp[<span class=\\\"hljs-number\\\">0</span>][j - <span class=\\\"hljs-number\\\">2</span>];\\n        }\\n    }\\n    <span class=\\\"hljs-keyword\\\">for</span> (<span class=\\\"hljs-type\\\">int</span> <span class=\\\"hljs-variable\\\">i</span> <span class=\\\"hljs-operator\\\">=</span> <span class=\\\"hljs-number\\\">1</span>; i &lt; scs.length; i++) {\\n        <span class=\\\"hljs-keyword\\\">for</span> (<span class=\\\"hljs-type\\\">int</span> <span class=\\\"hljs-variable\\\">j</span> <span class=\\\"hljs-operator\\\">=</span> <span class=\\\"hljs-number\\\">1</span>; j &lt; pcs.length; j++) {\\n            <span class=\\\"hljs-type\\\">char</span> <span class=\\\"hljs-variable\\\">pj</span> <span class=\\\"hljs-operator\\\">=</span> pcs[j];\\n            <span class=\\\"hljs-type\\\">char</span> <span class=\\\"hljs-variable\\\">si</span> <span class=\\\"hljs-operator\\\">=</span> scs[i];\\n            <span class=\\\"hljs-keyword\\\">if</span> (pj == si || pj == <span class=\\\"hljs-string\\\">&#x27;.&#x27;</span>) {\\n                dp[i][j] = dp[i - <span class=\\\"hljs-number\\\">1</span>][j - <span class=\\\"hljs-number\\\">1</span>];\\n            } <span class=\\\"hljs-keyword\\\">else</span> <span class=\\\"hljs-keyword\\\">if</span> (pj == <span class=\\\"hljs-string\\\">&#x27;*&#x27;</span>) {\\n                <span class=\\\"hljs-keyword\\\">if</span> (si != pcs[j - <span class=\\\"hljs-number\\\">1</span>] && pcs[j - <span class=\\\"hljs-number\\\">1</span>] != <span class=\\\"hljs-string\\\">&#x27;.&#x27;</span>) {\\n                    dp[i][j] = dp[i][j - <span class=\\\"hljs-number\\\">2</span>];\\n                } <span class=\\\"hljs-keyword\\\">else</span> {\\n                    dp[i][j] = dp[i][j - <span class=\\\"hljs-number\\\">1</span>] || dp[i - <span class=\\\"hljs-number\\\">1</span>][j] || dp[i][j - <span class=\\\"hljs-number\\\">2</span>];\\n                }\\n            }\\n        }\\n    }\\n    <span class=\\\"hljs-keyword\\\">return</span> dp[scs.length - <span class=\\\"hljs-number\\\">1</span>][pcs.length - <span class=\\\"hljs-number\\\">1</span>];\\n}\\n</code></pre>\\n<p>我们如果把几个case的dp打印出来，应该会更好理解一点，有多条状态转移公式的DP，确实是难，但是这个解法有一个优雅的地方在于它在T和P的开头加上&#39;+&#39;来代表各自的&quot;&quot;，从而让各下标更好处理</p>\\n<p>*<em>Case Match(&quot;abcd&quot;, &quot;.<em>bcd&quot;)</em></em></p>\\n<pre><code>    +        .        *        b        c        d        \\n+    true    false    true    false    false    false    \\na    false    true    true    false    false    false    \\nb    false    false    true    true    false    false    \\nc    false    false    true    false    true    false    \\nd    false    false    true    false    false    true    \\n</code></pre>\\n<p><em><em>Case Match(&quot;mississippi&quot;, &quot;mis*is*p</em>.&quot;)</em>*</p>\\n<pre><code>    +        m        i        s        *        i        s        *        p        *        .        \\n+    true    false    false    false    false    false    false    false    false    false    false    \\nm    false    true    false    false    false    false    false    false    false    false    false    \\ni    false    false    true    false    true    false    false    false    false    false    false    \\ns    false    false    false    true    true    false    false    false    false    false    false    \\ns    false    false    false    false    true    false    false    false    false    false    false    \\ni    false    false    false    false    false    true    false    true    false    true    false    \\ns    false    false    false    false    false    false    true    true    false    true    true    \\ns    false    false    false    false    false    false    false    true    false    true    true    \\ni    false    false    false    false    false    false    false    false    false    false    true    \\np    false    false    false    false    false    false    false    false    false    false    false    \\np    false    false    false    false    false    false    false    false    false    false    false    \\ni    false    false    false    false    false    false    false    false    false    false    false\\n</code></pre>\\n\";","export default \"<p>The series of &lt;Python Note&gt; is talking about some basic grammar rules of python, for quick search while I might use python.</p>\\n<p>The first article will introduces  <code>print()</code> and <code>input()</code>, the comment syntax, variables assignment and some basic types in python.</p>\\n<h2 id=\\\"a\\\">A</h2>\\n<h3 id=\\\"method-print--input\\\">Method: print() & input()</h3>\\n<p>Example:</p>\\n<pre><code class=\\\"hljs language-python\\\"><span class=\\\"hljs-built_in\\\">print</span>(<span class=\\\"hljs-string\\\">&#x27;NI&#x27;</span>, <span class=\\\"hljs-string\\\">&#x27;Hao&#x27;</span>) <span class=\\\"hljs-comment\\\"># NI HAO</span>\\n<span class=\\\"hljs-built_in\\\">print</span>(<span class=\\\"hljs-string\\\">&#x27;1 + 3 =&#x27;</span>, <span class=\\\"hljs-number\\\">1</span> + <span class=\\\"hljs-number\\\">3</span>) <span class=\\\"hljs-comment\\\"># 1 + 3 = 4</span>\\nname = <span class=\\\"hljs-built_in\\\">input</span>() <span class=\\\"hljs-comment\\\"># type jack</span>\\n<span class=\\\"hljs-built_in\\\">print</span>(<span class=\\\"hljs-string\\\">&#x27;name was signed as: &#x27;</span> + name) <span class=\\\"hljs-comment\\\"># name was signed as:  jack</span>\\n</code></pre>\\n<h4 id=\\\"print\\\">print()</h4>\\n<p><code>print</code>(*<em>objects</em>, <em>sep=&#39; &#39;</em>, <em>end=&#39;\\\\n&#39;</em>, <em>file=sys.stdout</em>, <em>flush=False</em>)</p>\\n<p>Print <em>objects</em> to the text stream <em>file</em>, separated by <em>sep</em> and followed by <em>end</em>. <em>sep</em>, <em>end</em>, <em>file</em> and <em>flush</em>, if present, must be given as keyword arguments.</p>\\n<pre><code class=\\\"hljs language-python\\\"><span class=\\\"hljs-built_in\\\">print</span>(<span class=\\\"hljs-string\\\">&#x27;NI&#x27;</span>, <span class=\\\"hljs-string\\\">&#x27;Hao&#x27;</span>, sep=<span class=\\\"hljs-string\\\">&#x27;-&#x27;</span>, end=<span class=\\\"hljs-string\\\">&#x27;&#x27;</span>) <span class=\\\"hljs-comment\\\"># NI HAO</span>\\n<span class=\\\"hljs-built_in\\\">print</span>(<span class=\\\"hljs-string\\\">&#x27;1 + 3 =&#x27;</span>, <span class=\\\"hljs-number\\\">1</span> + <span class=\\\"hljs-number\\\">3</span>) <span class=\\\"hljs-comment\\\"># NI HAO1 + 3 = 4</span>\\n</code></pre>\\n<h4 id=\\\"input\\\">input()</h4>\\n<p><code>input</code>([<em>prompt</em>])</p>\\n<p>If the <em>prompt</em> argument is present, it is written to standard output without a trailing newline. The function then reads a line from input, converts it to a string (stripping a trailing newline), and returns that. When EOF is read, <a href=\\\"https://docs.python.org/3/library/exceptions.html#EOFError\\\"><code>EOFError</code></a> is raised. Example:</p>\\n<pre><code>&gt;&gt;&gt; s = input(&#x27;--&gt; &#x27;)  \\n--&gt; Monty Python&#x27;s Flying Circus\\n&gt;&gt;&gt; s  \\n&quot;Monty Python&#x27;s Flying Circus&quot;\\n</code></pre>\\n<h3 id=\\\"comment\\\">Comment</h3>\\n<pre><code class=\\\"hljs language-python\\\"><span class=\\\"hljs-comment\\\"># single line</span>\\n<span class=\\\"hljs-string\\\">&#x27;&#x27;&#x27; multi-line \\nxixi = 123\\nhaha = 456\\n&#x27;&#x27;&#x27;</span>\\n</code></pre>\\n<h3 id=\\\"variables-assignment\\\">Variables Assignment</h3>\\n<pre><code class=\\\"hljs language-python\\\"><span class=\\\"hljs-comment\\\"># assignment</span>\\nvar = <span class=\\\"hljs-string\\\">&#x27;123&#x27;</span>\\nvar2, var3 = <span class=\\\"hljs-string\\\">&#x27;123&#x27;</span>, <span class=\\\"hljs-number\\\">456</span>\\n\\n<span class=\\\"hljs-comment\\\"># delete reference</span>\\n<span class=\\\"hljs-keyword\\\">del</span> var\\n<span class=\\\"hljs-comment\\\"># call print(var) will raise NameError: name &#x27;var&#x27; is not defined</span>\\n</code></pre>\\n<h2 id=\\\"b\\\">B</h2>\\n<h3 id=\\\"basic-types\\\">Basic Types</h3>\\n<h4 id=\\\"boolean\\\">Boolean</h4>\\n<h5 id=\\\"truth-value-testing\\\">Truth Value Testing</h5>\\n<p><strong>Any object can be tested for truth value</strong>, for use in an <a href=\\\"https://docs.python.org/3/reference/compound_stmts.html#if\\\"><code>if</code></a> or <a href=\\\"https://docs.python.org/3/reference/compound_stmts.html#while\\\"><code>while</code></a> condition or as operand of the Boolean operations below.</p>\\n<p>By default, an object <strong>is considered <code>true</code></strong> unless its class defines either a <a href=\\\"https://docs.python.org/3/reference/datamodel.html#object.__bool__\\\"><code>__bool__()</code></a> method that returns <code>False</code> or a <a href=\\\"https://docs.python.org/3/reference/datamodel.html#object.__len__\\\"><code>__len__()</code></a> method that returns zero, when called with the object. [<a href=\\\"https://docs.python.org/3/library/stdtypes.html#id12\\\">1</a>]</p>\\n<p>Here are most of the built-in objects considered  <strong><code>false</code></strong>:</p>\\n<ul>\\n<li>constants defined to be false: <code>None</code> and <code>False</code>.</li>\\n<li>zero of any numeric type: <code>0</code>, <code>0.0</code>, <code>0j</code>, <code>Decimal(0)</code>, <code>Fraction(0, 1)</code></li>\\n<li>empty sequences and collections: <code>&#39;&#39;</code>, <code>()</code>, <code>[]</code>, <code>{}</code>, <code>set()</code>, <code>range(0)</code></li>\\n</ul>\\n<p>Operations and built-in functions that have a Boolean result always return <code>0</code> or <code>False</code> for false and <code>1</code> or <code>True</code> for true, unless otherwise stated. (Important exception: the Boolean operations <code>or</code> and <code>and</code> always return one of their operands.)</p>\\n<h5 id=\\\"operators\\\">Operators</h5>\\n<pre><code class=\\\"hljs language-python\\\">x <span class=\\\"hljs-keyword\\\">or</span> y <span class=\\\"hljs-comment\\\"># if x is false, then y, else x</span>\\nx <span class=\\\"hljs-keyword\\\">and</span> y <span class=\\\"hljs-comment\\\"># if x is false, then x, else y</span>\\n<span class=\\\"hljs-keyword\\\">not</span> x <span class=\\\"hljs-comment\\\"># if x is false, then True, else False</span>\\n</code></pre>\\n<h5 id=\\\"comparisons\\\">Comparisons</h5>\\n<p>There are eight comparison operations in Python. They all have the same priority (which is higher than that of the Boolean operations). Comparisons <strong>can be chained</strong> arbitrarily like <code>x &lt; y &lt;= z</code> which equivalent to <code>x &lt; y and y &lt;= z</code>, except that <em>y</em> is evaluated only once (but in both cases <em>z</em> is not evaluated at all when <code>x &lt; y</code> is found to be false).</p>\\n<p>This table summarizes the comparison operations:</p>\\n<table>\\n<thead>\\n<tr>\\n<th align=\\\"left\\\">Operation</th>\\n<th align=\\\"left\\\">Meaning</th>\\n</tr>\\n</thead>\\n<tbody><tr>\\n<td align=\\\"left\\\"><code>&lt;</code></td>\\n<td align=\\\"left\\\">strictly less than</td>\\n</tr>\\n<tr>\\n<td align=\\\"left\\\"><code>&lt;=</code></td>\\n<td align=\\\"left\\\">less than or equal</td>\\n</tr>\\n<tr>\\n<td align=\\\"left\\\"><code>&gt;</code></td>\\n<td align=\\\"left\\\">strictly greater than</td>\\n</tr>\\n<tr>\\n<td align=\\\"left\\\"><code>&gt;=</code></td>\\n<td align=\\\"left\\\">greater than or equal</td>\\n</tr>\\n<tr>\\n<td align=\\\"left\\\"><code>==</code></td>\\n<td align=\\\"left\\\">equal</td>\\n</tr>\\n<tr>\\n<td align=\\\"left\\\"><code>!=</code></td>\\n<td align=\\\"left\\\">not equal</td>\\n</tr>\\n<tr>\\n<td align=\\\"left\\\"><code>is</code></td>\\n<td align=\\\"left\\\">object identity</td>\\n</tr>\\n<tr>\\n<td align=\\\"left\\\"><code>is not</code></td>\\n<td align=\\\"left\\\">negated object identity</td>\\n</tr>\\n</tbody></table>\\n<p>Any object can be compared with those operators when defining <code>__lt__()</code>,<code>__le__()</code>,<code>__eq__()</code>,<code>__ne__()</code>, <code>__gt__()</code>,<code>__ge__()</code> methods. </p>\\n<p>These are the so-called “rich comparison” methods. The correspondence between operator symbols and method names is as follows: <code>x&lt;y</code> calls <code>x.__lt__(y)</code>, <code>x&lt;=y</code> calls <code>x.__le__(y)</code>, <code>x==y</code> calls <code>x.__eq__(y)</code>, <code>x!=y</code> calls <code>x.__ne__(y)</code>, <code>x&gt;y</code> calls <code>x.__gt__(y)</code>, and <code>x&gt;=y</code> calls <code>x.__ge__(y)</code>.</p>\\n<p>Example:</p>\\n<pre><code class=\\\"hljs language-python\\\"><span class=\\\"hljs-meta\\\">@total_ordering</span>\\n<span class=\\\"hljs-keyword\\\">class</span> <span class=\\\"hljs-title class_\\\">Student</span>:\\n    <span class=\\\"hljs-keyword\\\">def</span> <span class=\\\"hljs-title function_\\\">_is_valid_operand</span>(<span class=\\\"hljs-params\\\">self, other</span>):\\n        <span class=\\\"hljs-keyword\\\">return</span> (<span class=\\\"hljs-built_in\\\">hasattr</span>(other, <span class=\\\"hljs-string\\\">&quot;lastname&quot;</span>) <span class=\\\"hljs-keyword\\\">and</span>\\n                <span class=\\\"hljs-built_in\\\">hasattr</span>(other, <span class=\\\"hljs-string\\\">&quot;firstname&quot;</span>))\\n    <span class=\\\"hljs-keyword\\\">def</span> <span class=\\\"hljs-title function_\\\">__eq__</span>(<span class=\\\"hljs-params\\\">self, other</span>):\\n        <span class=\\\"hljs-keyword\\\">if</span> <span class=\\\"hljs-keyword\\\">not</span> self._is_valid_operand(other):\\n            <span class=\\\"hljs-keyword\\\">return</span> <span class=\\\"hljs-literal\\\">NotImplemented</span>\\n        <span class=\\\"hljs-keyword\\\">return</span> ((self.lastname.lower(), self.firstname.lower()) ==\\n                (other.lastname.lower(), other.firstname.lower()))\\n    <span class=\\\"hljs-keyword\\\">def</span> <span class=\\\"hljs-title function_\\\">__lt__</span>(<span class=\\\"hljs-params\\\">self, other</span>):\\n        <span class=\\\"hljs-keyword\\\">if</span> <span class=\\\"hljs-keyword\\\">not</span> self._is_valid_operand(other):\\n            <span class=\\\"hljs-keyword\\\">return</span> <span class=\\\"hljs-literal\\\">NotImplemented</span>\\n        <span class=\\\"hljs-keyword\\\">return</span> ((self.lastname.lower(), self.firstname.lower()) &lt;\\n                (other.lastname.lower(), other.firstname.lower()))\\n</code></pre>\\n<h4 id=\\\"numeric-types\\\">Numeric Types</h4>\\n<p>The constructors <a href=\\\"https://docs.python.org/3/library/functions.html#int\\\"><code>int()</code></a>, <a href=\\\"https://docs.python.org/3/library/functions.html#float\\\"><code>float()</code></a>, and <a href=\\\"https://docs.python.org/3/library/functions.html#complex\\\"><code>complex()</code></a> can be used to produce numbers of a specific type.</p>\\n<p>All numeric types (except complex) support the following operations (for priorities of the operations, see <a href=\\\"https://docs.python.org/3/reference/expressions.html#operator-summary\\\">Operator precedence</a>):</p>\\n<table>\\n<thead>\\n<tr>\\n<th align=\\\"left\\\">Operation</th>\\n<th align=\\\"left\\\">Result</th>\\n<th align=\\\"left\\\">Notes</th>\\n<th align=\\\"left\\\">Full documentation</th>\\n</tr>\\n</thead>\\n<tbody><tr>\\n<td align=\\\"left\\\"><code>x + y</code></td>\\n<td align=\\\"left\\\">sum of <em>x</em> and <em>y</em></td>\\n<td align=\\\"left\\\"></td>\\n<td align=\\\"left\\\"></td>\\n</tr>\\n<tr>\\n<td align=\\\"left\\\"><code>x - y</code></td>\\n<td align=\\\"left\\\">difference of <em>x</em> and <em>y</em></td>\\n<td align=\\\"left\\\"></td>\\n<td align=\\\"left\\\"></td>\\n</tr>\\n<tr>\\n<td align=\\\"left\\\"><code>x * y</code></td>\\n<td align=\\\"left\\\">product of <em>x</em> and <em>y</em></td>\\n<td align=\\\"left\\\"></td>\\n<td align=\\\"left\\\"></td>\\n</tr>\\n<tr>\\n<td align=\\\"left\\\"><code>x / y</code></td>\\n<td align=\\\"left\\\">quotient of <em>x</em> and <em>y</em></td>\\n<td align=\\\"left\\\"></td>\\n<td align=\\\"left\\\"></td>\\n</tr>\\n<tr>\\n<td align=\\\"left\\\"><code>x // y</code></td>\\n<td align=\\\"left\\\">floored quotient of <em>x</em> and <em>y</em></td>\\n<td align=\\\"left\\\">(1)</td>\\n<td align=\\\"left\\\"></td>\\n</tr>\\n<tr>\\n<td align=\\\"left\\\"><code>x % y</code></td>\\n<td align=\\\"left\\\">remainder of <code>x / y</code></td>\\n<td align=\\\"left\\\">(2)</td>\\n<td align=\\\"left\\\"></td>\\n</tr>\\n<tr>\\n<td align=\\\"left\\\"><code>-x</code></td>\\n<td align=\\\"left\\\"><em>x</em> negated</td>\\n<td align=\\\"left\\\"></td>\\n<td align=\\\"left\\\"></td>\\n</tr>\\n<tr>\\n<td align=\\\"left\\\"><code>+x</code></td>\\n<td align=\\\"left\\\"><em>x</em> unchanged</td>\\n<td align=\\\"left\\\"></td>\\n<td align=\\\"left\\\"></td>\\n</tr>\\n<tr>\\n<td align=\\\"left\\\"><code>abs(x)</code></td>\\n<td align=\\\"left\\\">absolute value or magnitude of <em>x</em></td>\\n<td align=\\\"left\\\"></td>\\n<td align=\\\"left\\\"><a href=\\\"https://docs.python.org/3/library/functions.html#abs\\\"><code>abs()</code></a></td>\\n</tr>\\n<tr>\\n<td align=\\\"left\\\"><code>int(x)</code></td>\\n<td align=\\\"left\\\"><em>x</em> converted to integer</td>\\n<td align=\\\"left\\\">(3)(6)</td>\\n<td align=\\\"left\\\"><a href=\\\"https://docs.python.org/3/library/functions.html#int\\\"><code>int()</code></a></td>\\n</tr>\\n<tr>\\n<td align=\\\"left\\\"><code>float(x)</code></td>\\n<td align=\\\"left\\\"><em>x</em> converted to floating point</td>\\n<td align=\\\"left\\\">(4)(6)</td>\\n<td align=\\\"left\\\"><a href=\\\"https://docs.python.org/3/library/functions.html#float\\\"><code>float()</code></a></td>\\n</tr>\\n<tr>\\n<td align=\\\"left\\\"><code>complex(re, im)</code></td>\\n<td align=\\\"left\\\">a complex number with real part <em>re</em>, imaginary part <em>im</em>. <em>im</em> defaults to zero.</td>\\n<td align=\\\"left\\\">(6)</td>\\n<td align=\\\"left\\\"><a href=\\\"https://docs.python.org/3/library/functions.html#complex\\\"><code>complex()</code></a></td>\\n</tr>\\n<tr>\\n<td align=\\\"left\\\"><code>c.conjugate()</code></td>\\n<td align=\\\"left\\\">conjugate of the complex number <em>c</em></td>\\n<td align=\\\"left\\\"></td>\\n<td align=\\\"left\\\"></td>\\n</tr>\\n<tr>\\n<td align=\\\"left\\\"><code>divmod(x, y)</code></td>\\n<td align=\\\"left\\\">the pair <code>(x // y, x % y)</code></td>\\n<td align=\\\"left\\\">(2)</td>\\n<td align=\\\"left\\\"><a href=\\\"https://docs.python.org/3/library/functions.html#divmod\\\"><code>divmod()</code></a></td>\\n</tr>\\n<tr>\\n<td align=\\\"left\\\"><code>pow(x, y)</code></td>\\n<td align=\\\"left\\\"><em>x</em> to the power <em>y</em></td>\\n<td align=\\\"left\\\">(5)</td>\\n<td align=\\\"left\\\"><a href=\\\"https://docs.python.org/3/library/functions.html#pow\\\"><code>pow()</code></a></td>\\n</tr>\\n<tr>\\n<td align=\\\"left\\\"><code>x ** y</code></td>\\n<td align=\\\"left\\\"><em>x</em> to the power <em>y</em></td>\\n<td align=\\\"left\\\">(5)</td>\\n<td align=\\\"left\\\"></td>\\n</tr>\\n</tbody></table>\\n<p>Notes:</p>\\n<ol>\\n<li><p>Also referred to as integer division. The resultant value is a whole integer, though the result’s type is not necessarily int. The result is always rounded towards minus infinity: <code>1//2</code> is <code>0</code>, <code>(-1)//2</code> is <code>-1</code>, <code>1//(-2)</code> is <code>-1</code>, and <code>(-1)//(-2)</code> is <code>0</code>.</p>\\n</li>\\n<li><p>Not for complex numbers. Instead convert to floats using <a href=\\\"https://docs.python.org/3/library/functions.html#abs\\\"><code>abs()</code></a> if appropriate.</p>\\n</li>\\n<li><p>Conversion from floating point to integer may round or truncate as in C; see functions <a href=\\\"https://docs.python.org/3/library/math.html#math.floor\\\"><code>math.floor()</code></a> and <a href=\\\"https://docs.python.org/3/library/math.html#math.ceil\\\"><code>math.ceil()</code></a> for well-defined conversions.</p>\\n</li>\\n<li><p>float also accepts the strings “nan” and “inf” with an optional prefix “+” or “-” for Not a Number (NaN) and positive or negative infinity.</p>\\n</li>\\n<li><p>Python defines <code>pow(0, 0)</code> and <code>0 ** 0</code> to be <code>1</code>, as is common for programming languages.</p>\\n</li>\\n<li><p>The numeric literals accepted include the digits <code>0</code> to <code>9</code> or any Unicode equivalent (code points with the <code>Nd</code> property).</p>\\n<p>See <a href=\\\"http://www.unicode.org/Public/12.1.0/ucd/extracted/DerivedNumericType.txt\\\">http://www.unicode.org/Public/12.1.0/ucd/extracted/DerivedNumericType.txt</a> for a complete list of code points with the <code>Nd</code> property.</p>\\n</li>\\n</ol>\\n<p>All <a href=\\\"https://docs.python.org/3/library/numbers.html#numbers.Real\\\"><code>numbers.Real</code></a> types (<a href=\\\"https://docs.python.org/3/library/functions.html#int\\\"><code>int</code></a> and <a href=\\\"https://docs.python.org/3/library/functions.html#float\\\"><code>float</code></a>) also include the following operations:</p>\\n<table>\\n<thead>\\n<tr>\\n<th align=\\\"left\\\">Operation</th>\\n<th align=\\\"left\\\">Result</th>\\n</tr>\\n</thead>\\n<tbody><tr>\\n<td align=\\\"left\\\"><a href=\\\"https://docs.python.org/3/library/math.html#math.trunc\\\"><code>math.trunc(x)</code></a></td>\\n<td align=\\\"left\\\"><em>x</em> truncated to <a href=\\\"https://docs.python.org/3/library/numbers.html#numbers.Integral\\\"><code>Integral</code></a></td>\\n</tr>\\n<tr>\\n<td align=\\\"left\\\"><a href=\\\"https://docs.python.org/3/library/functions.html#round\\\"><strong><code>round(x[, n])</code></strong></a></td>\\n<td align=\\\"left\\\"><em>x</em> rounded to <em>n</em> digits, rounding half to even. If <em>n</em> is omitted, it defaults to 0.</td>\\n</tr>\\n<tr>\\n<td align=\\\"left\\\"><a href=\\\"https://docs.python.org/3/library/math.html#math.floor\\\"><code>math.floor(x)</code></a></td>\\n<td align=\\\"left\\\">the greatest <a href=\\\"https://docs.python.org/3/library/numbers.html#numbers.Integral\\\"><code>Integral</code></a> &lt;= <em>x</em></td>\\n</tr>\\n<tr>\\n<td align=\\\"left\\\"><a href=\\\"https://docs.python.org/3/library/math.html#math.ceil\\\"><code>math.ceil(x)</code></a></td>\\n<td align=\\\"left\\\">the least <a href=\\\"https://docs.python.org/3/library/numbers.html#numbers.Integral\\\"><code>Integral</code></a> &gt;= <em>x</em></td>\\n</tr>\\n</tbody></table>\\n<h4 id=\\\"string\\\">String</h4>\\n<h5 id=\\\"basic-usage\\\">Basic Usage</h5>\\n<pre><code class=\\\"hljs language-python\\\"><span class=\\\"hljs-comment\\\"># single quotes</span>\\n<span class=\\\"hljs-built_in\\\">print</span>(<span class=\\\"hljs-string\\\">&#x27;spam eggs&#x27;</span>)\\n<span class=\\\"hljs-comment\\\"># double quotes</span>\\n<span class=\\\"hljs-built_in\\\">print</span>(<span class=\\\"hljs-string\\\">&quot;spam eggs&quot;</span>)\\n<span class=\\\"hljs-comment\\\"># \\\\ can be used to escape quotes</span>\\n<span class=\\\"hljs-built_in\\\">print</span>(<span class=\\\"hljs-string\\\">&quot;dosn\\\\&#x27;t&quot;</span>)\\n\\n<span class=\\\"hljs-comment\\\"># index</span>\\nword = <span class=\\\"hljs-string\\\">&quot;abcd&quot;</span>\\n<span class=\\\"hljs-built_in\\\">print</span>(word[<span class=\\\"hljs-number\\\">1</span>])\\n<span class=\\\"hljs-comment\\\"># range</span>\\n<span class=\\\"hljs-built_in\\\">print</span>(word[-<span class=\\\"hljs-number\\\">1</span>])\\n<span class=\\\"hljs-built_in\\\">print</span>(word[<span class=\\\"hljs-number\\\">2</span>:<span class=\\\"hljs-number\\\">3</span>])\\n<span class=\\\"hljs-built_in\\\">print</span>(word[:<span class=\\\"hljs-number\\\">3</span>])\\n\\n<span class=\\\"hljs-comment\\\"># span multiple line with triple quotes &#x27;&#x27;&#x27;... &#x27;&#x27;&#x27; or &quot;&quot;&quot;...&quot;&quot;&quot;</span>\\n<span class=\\\"hljs-comment\\\"># backslash can prevent newline when placed at the end of the line</span>\\n<span class=\\\"hljs-built_in\\\">print</span>(<span class=\\\"hljs-string\\\">&#x27;&#x27;&#x27;\\\\\\nOptions: \\n    -a      all\\n    -c      clean\\\\\\n&#x27;&#x27;&#x27;</span>)\\n\\n<span class=\\\"hljs-built_in\\\">print</span>(<span class=\\\"hljs-string\\\">&#x27;&#x27;&#x27;\\\\\\nShow the index of a string like \\\\&#x27;Python\\\\&#x27;\\n    +---+---+---+---+---+---+\\n    | P | y | t | h | o | n |\\n    +---+---+---+---+---+---+\\n      0   1   2   3   4   5   6\\n     -6  -5  -4  -3  -2  -1\\\\\\n&#x27;&#x27;&#x27;</span>)\\n\\n<span class=\\\"hljs-comment\\\"># operator &#x27;+&#x27; and &#x27;*&#x27;</span>\\n<span class=\\\"hljs-built_in\\\">print</span>(<span class=\\\"hljs-string\\\">&#x27;h&#x27;</span> +  <span class=\\\"hljs-number\\\">2</span> * <span class=\\\"hljs-string\\\">&#x27;mmm&#x27;</span>)\\n\\n<span class=\\\"hljs-comment\\\"># operator &#x27;in&#x27; to see if a substr is contained in a sting</span>\\n<span class=\\\"hljs-built_in\\\">print</span>(<span class=\\\"hljs-string\\\">&#x27;xi&#x27;</span> <span class=\\\"hljs-keyword\\\">in</span> <span class=\\\"hljs-string\\\">&#x27;awpfasdxidapdpw&#x27;</span>)\\n\\n<span class=\\\"hljs-comment\\\"># built-in function len()</span>\\n<span class=\\\"hljs-built_in\\\">print</span>(<span class=\\\"hljs-built_in\\\">len</span>(<span class=\\\"hljs-string\\\">&#x27;1234&#x27;</span>))\\n\\n<span class=\\\"hljs-comment\\\"># method</span>\\n<span class=\\\"hljs-comment\\\">## capitalize / lower / upper the str</span>\\n<span class=\\\"hljs-built_in\\\">print</span>(<span class=\\\"hljs-string\\\">&#x27;hello&#x27;</span>.capitalize())\\n<span class=\\\"hljs-built_in\\\">print</span>(<span class=\\\"hljs-string\\\">&#x27;hello&#x27;</span>.upper())\\n<span class=\\\"hljs-built_in\\\">print</span>(<span class=\\\"hljs-string\\\">&#x27;ASD&#x27;</span>.lower())\\n<span class=\\\"hljs-comment\\\">## centered / left justify / right justify the str with width</span>\\n<span class=\\\"hljs-built_in\\\">print</span>(<span class=\\\"hljs-string\\\">&#x27;HELLO&#x27;</span>.center(<span class=\\\"hljs-number\\\">2</span>))\\n<span class=\\\"hljs-built_in\\\">print</span>(<span class=\\\"hljs-string\\\">&#x27;HELLO&#x27;</span>.center(<span class=\\\"hljs-number\\\">10</span>))\\n<span class=\\\"hljs-built_in\\\">print</span>(<span class=\\\"hljs-string\\\">&#x27;HELLO&#x27;</span>.center(<span class=\\\"hljs-number\\\">11</span>, <span class=\\\"hljs-string\\\">&#x27;-&#x27;</span>))\\n<span class=\\\"hljs-built_in\\\">print</span>(<span class=\\\"hljs-string\\\">&#x27;HELLO&#x27;</span>.ljust(<span class=\\\"hljs-number\\\">11</span>, <span class=\\\"hljs-string\\\">&#x27;-&#x27;</span>))\\n<span class=\\\"hljs-built_in\\\">print</span>(<span class=\\\"hljs-string\\\">&#x27;HELLO&#x27;</span>.rjust(<span class=\\\"hljs-number\\\">11</span>, <span class=\\\"hljs-string\\\">&#x27;-&#x27;</span>))\\n\\n<span class=\\\"hljs-comment\\\">## find and return the lowest index</span>\\n<span class=\\\"hljs-built_in\\\">print</span>(<span class=\\\"hljs-string\\\">&#x27;hello&#x27;</span>.find(<span class=\\\"hljs-string\\\">&#x27;ll&#x27;</span>))\\n<span class=\\\"hljs-built_in\\\">print</span>(<span class=\\\"hljs-string\\\">&#x27;hello&#x27;</span>.find(<span class=\\\"hljs-string\\\">&#x27;lel&#x27;</span>))\\n<span class=\\\"hljs-built_in\\\">print</span>(<span class=\\\"hljs-string\\\">&#x27;hellohello&#x27;</span>.rfind(<span class=\\\"hljs-string\\\">&#x27;llo&#x27;</span>))\\n\\n<span class=\\\"hljs-comment\\\">## index similar to find() but raise ValueError when the substr is not found</span>\\n<span class=\\\"hljs-comment\\\"># print(&#x27;hello&#x27;.index(&#x27;lel&#x27;))</span>\\n<span class=\\\"hljs-comment\\\"># print(&#x27;hello&#x27;.rindex(&#x27;lel&#x27;))</span>\\n\\n<span class=\\\"hljs-comment\\\">## isalnum() / isalpha()</span>\\n<span class=\\\"hljs-built_in\\\">print</span>(<span class=\\\"hljs-string\\\">&#x27;1123&#x27;</span>.isalnum())\\n<span class=\\\"hljs-built_in\\\">print</span>(<span class=\\\"hljs-string\\\">&#x27;aasd&#x27;</span>.isalpha())\\n\\n<span class=\\\"hljs-built_in\\\">print</span>(<span class=\\\"hljs-string\\\">&#x27;   &#x27;</span>.isspace())\\n<span class=\\\"hljs-built_in\\\">print</span>(<span class=\\\"hljs-string\\\">&#x27;132&#x27;</span>.isnumeric())\\n\\n<span class=\\\"hljs-built_in\\\">print</span>(<span class=\\\"hljs-string\\\">&#x27;asddda&#x27;</span>.replace(<span class=\\\"hljs-string\\\">&#x27;d&#x27;</span>, <span class=\\\"hljs-string\\\">&#x27;e&#x27;</span>))\\n<span class=\\\"hljs-built_in\\\">print</span>(<span class=\\\"hljs-string\\\">&#x27;asddda&#x27;</span>.replace(<span class=\\\"hljs-string\\\">&#x27;d&#x27;</span>, <span class=\\\"hljs-string\\\">&#x27;e&#x27;</span>, <span class=\\\"hljs-number\\\">2</span>))\\n\\n<span class=\\\"hljs-comment\\\">## endswith / startswith</span>\\n<span class=\\\"hljs-built_in\\\">print</span>(<span class=\\\"hljs-string\\\">&#x27;asd&#x27;</span>.endswith(<span class=\\\"hljs-string\\\">&#x27;d&#x27;</span>))\\n\\n<span class=\\\"hljs-comment\\\">## split</span>\\n<span class=\\\"hljs-built_in\\\">print</span>(<span class=\\\"hljs-string\\\">&#x27;a,b,c&#x27;</span>.split(<span class=\\\"hljs-string\\\">&#x27;,&#x27;</span>))\\n<span class=\\\"hljs-built_in\\\">print</span>(<span class=\\\"hljs-string\\\">&#x27;a,b,c&#x27;</span>.split(<span class=\\\"hljs-string\\\">&#x27;,&#x27;</span>, maxsplit=<span class=\\\"hljs-number\\\">1</span>))\\n<span class=\\\"hljs-built_in\\\">print</span>(<span class=\\\"hljs-string\\\">&#x27;asd\\\\naasd\\\\naasda\\\\r&#x27;</span>.splitlines())\\n<span class=\\\"hljs-built_in\\\">print</span>(<span class=\\\"hljs-string\\\">&#x27;asd\\\\naasd\\\\naasda\\\\r&#x27;</span>.splitlines(keepends=<span class=\\\"hljs-literal\\\">True</span>))\\n\\n<span class=\\\"hljs-comment\\\">## strip remove certain characters from the sides of a string</span>\\n<span class=\\\"hljs-built_in\\\">print</span>(<span class=\\\"hljs-string\\\">&#x27;#....ASdas..asad##..dadkjl....##...#&#x27;</span>.strip(<span class=\\\"hljs-string\\\">&#x27;.#&#x27;</span>))\\n<span class=\\\"hljs-built_in\\\">print</span>(<span class=\\\"hljs-string\\\">&#x27;#....ASdas..asad##..dadkjl....##...#&#x27;</span>.lstrip(<span class=\\\"hljs-string\\\">&#x27;.#&#x27;</span>))\\n<span class=\\\"hljs-built_in\\\">print</span>(<span class=\\\"hljs-string\\\">&#x27;#....ASdas..asad##..dadkjl....##...#&#x27;</span>.rstrip(<span class=\\\"hljs-string\\\">&#x27;.#&#x27;</span>))\\n</code></pre>\\n<p>Output:</p>\\n<pre><code class=\\\"hljs language-console\\\">spam eggs\\nspam eggs\\ndosn&#x27;t\\nstr asd number 123\\nb\\nd\\nc\\nabc\\nOptions:\\n    -a      all\\n    -c      clean\\nShow the index of a string like &#x27;Python&#x27;\\n    +---+---+---+---+---+---+\\n    | P | y | t | h | o | n |\\n    +---+---+---+---+---+---+\\n      0   1   2   3   4   5   6\\n     -6  -5  -4  -3  -2  -1\\nhmmmmmm\\nTrue\\n4\\nHello\\nHELLO\\nasd\\nHELLO\\n  HELLO   \\n---HELLO---\\nHELLO------\\n------HELLO\\n2\\n-1\\n7\\nTrue\\nTrue\\nTrue\\nTrue\\naseeea\\naseeda\\nTrue\\n[&#x27;a&#x27;, &#x27;b&#x27;, &#x27;c&#x27;]\\n[&#x27;a&#x27;, &#x27;b,c&#x27;]\\n[&#x27;asd&#x27;, &#x27;aasd&#x27;, &#x27;aasda&#x27;]\\n[&#x27;asd\\\\n&#x27;, &#x27;aasd\\\\n&#x27;, &#x27;aasda\\\\r&#x27;]\\nASdas..asad##..dadkjl\\nASdas..asad##..dadkjl....##...#\\n<span class=\\\"hljs-meta\\\">#</span><span class=\\\"language-bash\\\">....ASdas..asad<span class=\\\"hljs-comment\\\">##..dadkjl</span></span>\\n</code></pre>\\n<h5 id=\\\"format\\\">Format</h5>\\n<pre><code class=\\\"hljs language-python\\\"><span class=\\\"hljs-comment\\\"># fill with index</span>\\n<span class=\\\"hljs-built_in\\\">print</span>(<span class=\\\"hljs-string\\\">&#x27;{}-{}-{}&#x27;</span>.<span class=\\\"hljs-built_in\\\">format</span>(<span class=\\\"hljs-number\\\">1</span>,<span class=\\\"hljs-number\\\">2</span>,<span class=\\\"hljs-number\\\">3</span>))\\n<span class=\\\"hljs-built_in\\\">print</span>(<span class=\\\"hljs-string\\\">&#x27;{0}-{2}-{1}&#x27;</span>.<span class=\\\"hljs-built_in\\\">format</span>(<span class=\\\"hljs-number\\\">1</span>,<span class=\\\"hljs-number\\\">2</span>,<span class=\\\"hljs-number\\\">3</span>))\\n\\n<span class=\\\"hljs-comment\\\"># fill by values: add &#x27;f&#x27; flag before quotes</span>\\na = <span class=\\\"hljs-string\\\">&#x27;xixi&#x27;</span>\\nb = <span class=\\\"hljs-string\\\">&#x27;haha&#x27;</span>\\n<span class=\\\"hljs-built_in\\\">print</span>(<span class=\\\"hljs-string\\\">f&#x27;<span class=\\\"hljs-subst\\\">{a}</span> <span class=\\\"hljs-subst\\\">{b}</span>&#x27;</span>)\\n\\n<span class=\\\"hljs-comment\\\"># fill with keys</span>\\n<span class=\\\"hljs-built_in\\\">print</span>(<span class=\\\"hljs-string\\\">&#x27;{a} {b}&#x27;</span>.<span class=\\\"hljs-built_in\\\">format</span>(a=<span class=\\\"hljs-string\\\">&#x27;xixi&#x27;</span>, b=<span class=\\\"hljs-string\\\">&#x27;haha&#x27;</span>))\\n\\n<span class=\\\"hljs-comment\\\"># fill with dict&#x27;s key</span>\\nd = {<span class=\\\"hljs-string\\\">&#x27;a&#x27;</span>: <span class=\\\"hljs-string\\\">&#x27;xixi&#x27;</span>, <span class=\\\"hljs-string\\\">&#x27;b&#x27;</span>: <span class=\\\"hljs-string\\\">&#x27;haha&#x27;</span>}\\n<span class=\\\"hljs-built_in\\\">print</span>(<span class=\\\"hljs-string\\\">&#x27;{a} {b}&#x27;</span>.<span class=\\\"hljs-built_in\\\">format</span>(**d))\\n\\n<span class=\\\"hljs-comment\\\"># fill with attributes</span>\\n<span class=\\\"hljs-keyword\\\">class</span> <span class=\\\"hljs-title class_\\\">Point</span>:\\n    <span class=\\\"hljs-keyword\\\">def</span> <span class=\\\"hljs-title function_\\\">__init__</span>(<span class=\\\"hljs-params\\\">self, x, y</span>):\\n        self.x, self.y = x, y\\n    <span class=\\\"hljs-keyword\\\">def</span> <span class=\\\"hljs-title function_\\\">__str__</span>(<span class=\\\"hljs-params\\\">self</span>):\\n        <span class=\\\"hljs-keyword\\\">return</span> <span class=\\\"hljs-string\\\">&#x27;Point({me.x}, {me.y})&#x27;</span>.<span class=\\\"hljs-built_in\\\">format</span>(me = self)\\n\\n<span class=\\\"hljs-built_in\\\">print</span>(Point(<span class=\\\"hljs-number\\\">3</span>,<span class=\\\"hljs-number\\\">4</span>))\\n\\n<span class=\\\"hljs-comment\\\"># aligning string</span>\\n<span class=\\\"hljs-built_in\\\">print</span>(<span class=\\\"hljs-string\\\">&#x27;{:&gt;30}&#x27;</span>.<span class=\\\"hljs-built_in\\\">format</span>(<span class=\\\"hljs-string\\\">&#x27;align&#x27;</span>))\\n<span class=\\\"hljs-built_in\\\">print</span>(<span class=\\\"hljs-string\\\">&#x27;{:&lt;30}&#x27;</span>.<span class=\\\"hljs-built_in\\\">format</span>(<span class=\\\"hljs-string\\\">&#x27;align&#x27;</span>))\\n<span class=\\\"hljs-built_in\\\">print</span>(<span class=\\\"hljs-string\\\">&#x27;{:^30}&#x27;</span>.<span class=\\\"hljs-built_in\\\">format</span>(<span class=\\\"hljs-string\\\">&#x27;align&#x27;</span>))\\n<span class=\\\"hljs-built_in\\\">print</span>(<span class=\\\"hljs-string\\\">&#x27;{:-^30}&#x27;</span>.<span class=\\\"hljs-built_in\\\">format</span>(<span class=\\\"hljs-string\\\">&#x27;align&#x27;</span>))\\n<span class=\\\"hljs-built_in\\\">print</span>(<span class=\\\"hljs-string\\\">&#x27;{:*^30}&#x27;</span>.<span class=\\\"hljs-built_in\\\">format</span>(<span class=\\\"hljs-string\\\">&#x27;align&#x27;</span>))\\n<span class=\\\"hljs-built_in\\\">print</span>(<span class=\\\"hljs-string\\\">&#x27;{:*&lt;30}&#x27;</span>.<span class=\\\"hljs-built_in\\\">format</span>(<span class=\\\"hljs-string\\\">&#x27;align&#x27;</span>))\\n\\n<span class=\\\"hljs-comment\\\"># converting the value between different base</span>\\n<span class=\\\"hljs-built_in\\\">print</span>(<span class=\\\"hljs-string\\\">&#x27;int:{0:d} hex:{0:x} oct:{0:o} bin:{0:b}&#x27;</span>.<span class=\\\"hljs-built_in\\\">format</span>(<span class=\\\"hljs-number\\\">10</span>))\\n<span class=\\\"hljs-comment\\\">## with prefix</span>\\n<span class=\\\"hljs-built_in\\\">print</span>(<span class=\\\"hljs-string\\\">&#x27;int:{0:d} hex:{0:#x} oct:{0:#o} bin:{0:#b}&#x27;</span>.<span class=\\\"hljs-built_in\\\">format</span>(<span class=\\\"hljs-number\\\">10</span>))\\n\\n<span class=\\\"hljs-comment\\\"># expressing percentage</span>\\ni = <span class=\\\"hljs-number\\\">1</span> / <span class=\\\"hljs-number\\\">3</span>\\n<span class=\\\"hljs-built_in\\\">print</span>(<span class=\\\"hljs-string\\\">&#x27;{0:&gt;20.2%}&#x27;</span>.<span class=\\\"hljs-built_in\\\">format</span>(i)) <span class=\\\"hljs-comment\\\"># align and percentage</span>\\n<span class=\\\"hljs-built_in\\\">print</span>(<span class=\\\"hljs-string\\\">&#x27;{0:*&gt;20.2%}&#x27;</span>.<span class=\\\"hljs-built_in\\\">format</span>(i))\\n<span class=\\\"hljs-built_in\\\">print</span>(<span class=\\\"hljs-string\\\">&#x27;{0:&gt;20.10%}&#x27;</span>.<span class=\\\"hljs-built_in\\\">format</span>(i))\\n<span class=\\\"hljs-built_in\\\">print</span>(<span class=\\\"hljs-string\\\">&#x27;{0:.10%}&#x27;</span>.<span class=\\\"hljs-built_in\\\">format</span>(i))\\n</code></pre>\\n<p>Output:</p>\\n<pre><code class=\\\"hljs language-console\\\">1-2-3\\n1-3-2\\nxixi haha\\nxixi haha\\nxixi haha\\nPoint(3, 4)\\n                         align\\nalign\\n            align\\n------------align-------------\\n************align*************\\nalign*************************\\nint:10 hex:a oct:12 bin:1010\\nint:10 hex:0xa oct:0o12 bin:0b1010\\n              33.33%\\n**************33.33%\\n      33.3333333333%\\n33.3333333333%\\n</code></pre>\\n<h5 id=\\\"regex\\\">Regex</h5>\\n<pre><code class=\\\"hljs language-python\\\"><span class=\\\"hljs-comment\\\"># compile a regular expression pattern into a regular expression object </span>\\n<span class=\\\"hljs-keyword\\\">import</span> re\\n\\n<span class=\\\"hljs-built_in\\\">str</span> = <span class=\\\"hljs-string\\\">&#x27;aasddohwawddogasads&#x27;</span>\\n\\n<span class=\\\"hljs-comment\\\"># use regular expression object </span>\\npo = re.<span class=\\\"hljs-built_in\\\">compile</span>(<span class=\\\"hljs-string\\\">r&#x27;do[gh]&#x27;</span>)\\n<span class=\\\"hljs-built_in\\\">print</span>(po.search(<span class=\\\"hljs-built_in\\\">str</span>))\\n\\n<span class=\\\"hljs-comment\\\"># use re directly</span>\\n<span class=\\\"hljs-built_in\\\">print</span>(re.search(<span class=\\\"hljs-string\\\">r&#x27;do[gh]&#x27;</span>, <span class=\\\"hljs-built_in\\\">str</span>))\\n\\n<span class=\\\"hljs-comment\\\"># return all matching substr as list</span>\\n<span class=\\\"hljs-built_in\\\">print</span>(re.findall(<span class=\\\"hljs-string\\\">r&#x27;do[gh]&#x27;</span>, <span class=\\\"hljs-built_in\\\">str</span>))\\n\\n<span class=\\\"hljs-comment\\\"># return all matching Match Object as list</span>\\n<span class=\\\"hljs-keyword\\\">for</span> rs <span class=\\\"hljs-keyword\\\">in</span> re.finditer(<span class=\\\"hljs-string\\\">r&#x27;do[gh]&#x27;</span>, <span class=\\\"hljs-built_in\\\">str</span>):\\n    <span class=\\\"hljs-built_in\\\">print</span>(rs)\\n\\n<span class=\\\"hljs-comment\\\"># split str</span>\\n<span class=\\\"hljs-built_in\\\">print</span>(re.split(<span class=\\\"hljs-string\\\">r&#x27;[a-z]&#x27;</span>, <span class=\\\"hljs-string\\\">&#x27;adas123fd12d123&#x27;</span>, flags=re.IGNORECASE))\\n\\n<span class=\\\"hljs-comment\\\"># replace</span>\\n<span class=\\\"hljs-built_in\\\">print</span>(re.sub(<span class=\\\"hljs-string\\\">r&#x27;and&#x27;</span>, <span class=\\\"hljs-string\\\">&#x27;&&#x27;</span>, <span class=\\\"hljs-string\\\">&#x27;You And Me, Me And You.&#x27;</span>, flags=re.IGNORECASE))\\n<span class=\\\"hljs-built_in\\\">print</span>(re.sub(<span class=\\\"hljs-string\\\">r&#x27;and&#x27;</span>, <span class=\\\"hljs-string\\\">&#x27;&&#x27;</span>, <span class=\\\"hljs-string\\\">&#x27;You And Me, Me And You.&#x27;</span>, flags=re.IGNORECASE, count=<span class=\\\"hljs-number\\\">1</span>))\\n</code></pre>\\n<p>Output:</p>\\n<pre><code class=\\\"hljs language-console\\\">&lt;re.Match object; span=(4, 7), match=&#x27;doh&#x27;&gt;\\n&lt;re.Match object; span=(4, 7), match=&#x27;doh&#x27;&gt;\\n[&#x27;doh&#x27;, &#x27;dog&#x27;]\\n&lt;re.Match object; span=(4, 7), match=&#x27;doh&#x27;&gt;\\n&lt;re.Match object; span=(11, 14), match=&#x27;dog&#x27;&gt;\\n[&#x27;&#x27;, &#x27;&#x27;, &#x27;&#x27;, &#x27;&#x27;, &#x27;123&#x27;, &#x27;&#x27;, &#x27;12&#x27;, &#x27;123&#x27;]\\nYou & Me, Me & You.\\nYou & Me, Me And You.\\n</code></pre>\\n\";","export default \"<p>本篇介绍内容：</p>\\n<ul>\\n<li>数据库系统中事务的相关概念；</li>\\n<li>SQL 隔离级别要解决的问题；</li>\\n<li>InnoDB 中的隔离级别；</li>\\n<li>InnoDB 支持什么样的事务以及如何支持事务；</li>\\n</ul>\\n<h3 id=\\\"事务相关概述\\\">事务相关概述</h3>\\n<h4 id=\\\"acid\\\">ACID</h4>\\n<p>在数据库中，事务可以是一条简单的 SQL 语句，也可以是一组复杂的 SQL 语句；一个事务是访问并更新数据库的一个<strong>执行单元</strong>；</p>\\n<p>数据库要保证的是，事务中的操作要么全部成功，要么全部无效；</p>\\n<p>事务的保证需要遵循<strong>ACID 特性</strong>，但是数据库可以不必严格满足<strong>ACID</strong>，对于 InnoDB 来说，它是完全满足了 ACID 的</p>\\n<p><strong>原子性（Atomicity）</strong></p>\\n<p>是指整个事务是一个不可切分的工作单位，整个事务中所有的数据库操作要都成功，该事务才算成功；事务中任何一个语句失败则整个事务都失败；</p>\\n<p><strong>一致性（Consistency）</strong></p>\\n<p>指事务从一个状态转变到下一个状态的过程中，事务的开始和结束后，数据库的完整性约束没有被破坏；例如某个字段是唯一的，在事务进行当中如果破坏了该字段的唯一性，系统会撤销该事务，然会到初始状态；</p>\\n<p><strong>隔离性（Isolation）</strong></p>\\n<p>隔离性在 MySQL 的 InnoDB 中还代表着：并发控制、可串行化、锁等；</p>\\n<p>事务的隔离性要求每个对鞋事务的对象对其他事务的操作对象能够互相分离，即该事务提交前对其他事务都不可见，一般是用锁来实现；</p>\\n<p><strong>持久性（Durability）</strong></p>\\n<p>事务一旦提交，其结果是永久性的，即使发生宕机事故，数据库也能恢复该数据；</p>\\n<h4 id=\\\"事务的分类\\\">事务的分类</h4>\\n<p>理论上来说，事务可以被分为以下几种类型：</p>\\n<ul>\\n<li>扁平事务；</li>\\n<li>带保存点的事务；</li>\\n<li>链事务；</li>\\n<li>嵌套事务；</li>\\n<li>分布式事务；</li>\\n</ul>\\n<p><strong>扁平事务</strong></p>\\n<p>它是使用得最多的事务类型，它的所有操作都在同一个层次，其间的操作都是原子的，要么都执行，要么都回滚，因此扁平事务是程序称为原子操作的基本组成</p>\\n<p><strong>带保存点的事务</strong></p>\\n<p>允许在事务执行的过程中回滚到<strong>同一事务中较早的某个状态</strong>，虽然扁平事务的使用率高，但是有些事务在执行过程中万一出错就要回滚整个事务好像有点不划算，于是利用<strong>保存点（save point）</strong>机制来让系统支持事务的部分回滚</p>\\n<p>对于扁平事务，其保存点是事务的最开始</p>\\n<p><strong>链事务</strong></p>\\n<p>在一个事务进行时如果系统崩溃，那么其所有的保存点都会消失，当进行恢复的时候，事务又要重新开始执行，而不会从最近一个保存点开始执行</p>\\n<p>链事务的思想是：在提交一个事务的时候，开始下一个事务，这个过程是原子的，意味着下一个事务能看到上一个事务的结果，就好像它们处于同一个事务一样；</p>\\n<p>不同的是：</p>\\n<ul>\\n<li><p>事务的回滚仅能回到当前事务节点的保存点，而不能回到之前事务节点的保存点；</p>\\n</li>\\n<li><p>任意节点 commit 之后，会释放相应事务节点所设计的锁，而带有保存点的事务的任何回滚操作都不会放锁；</p>\\n</li>\\n</ul>\\n<p><strong>嵌套事务</strong></p>\\n<p>一个事务中可以开启其他事务，所属关系为父子关系，在结构上是一棵树；其特点是：</p>\\n<ol>\\n<li>子事务可以是任何类型的事务；</li>\\n<li>子事务的提交并不立即生效，而是都在顶层事务提交后再提交；</li>\\n<li>树中任意事务回滚都会引起其他子事务的一同回滚</li>\\n</ol>\\n<p><strong>分布式事务（XA 事务）</strong></p>\\n<p>分布式事务是处理不同主机、不同数据库甚至是同一数据库实例的不同引擎之间的<strong>扁平事务</strong>，我们把不同的执行上下文称为一个节点；</p>\\n<p>对于分布式事务，其对 ACID 的要求是最严格的，任何节点的事务失败，则整个事务都会失败；</p>\\n<p>实现分布式事务的各个节点的隔离级别都需要是<strong>SERIALIABLE（串行化）</strong>级别</p>\\n<p>分布式事务的基本模型为：一个或多个资源管理器、一个事务管理器、一个应用程序；</p>\\n<ul>\\n<li>资源管理器：通常由数据库代表；</li>\\n<li>事务管理器：协调参与全局事务中的各个事务，需要和所有节点通信；</li>\\n<li>应用程序：事务发起方；</li>\\n</ul>\\n<p><img src=\\\"../../../public/img/20200616171712.png\\\" alt=\\\"\\\"></p>\\n<p>分布式事务采用<strong>两段式提交（two-phase commit）</strong>：</p>\\n<ul>\\n<li>第一阶段：所有参与事务的节点都进入准备状态（PREPARE），并通知事务管理器；</li>\\n<li>第二阶段：事务管理器告诉资源管理器执行 COMMIT 还是 ROLLBACK，待所有节点都发出同意消息之后，再最终 COMMIT 或者 ROLLBACK；</li>\\n</ul>\\n<h3 id=\\\"事务的实现\\\">事务的实现</h3>\\n<p>事务的隔离性由锁来实现，而原子性、一致性、持久性由事务来保持</p>\\n<ul>\\n<li>redo log，用来保证原子性、持久性，基本上是顺序读写；</li>\\n<li>undo log，用来保证事务的一致性和 MVCC，需要进行随机读写；</li>\\n</ul>\\n<h4 id=\\\"redo-的概念\\\">Redo 的概念</h4>\\n<p>为了实现事务的持久性，设计了<strong>重做日志</strong>，其由两部分组成：</p>\\n<ol>\\n<li>内存中的重做日志缓冲（redo log buffer）；</li>\\n<li>文件中的重做日志文件（redo log file）；</li>\\n</ol>\\n<p>InnoDB 为了能保证事务的理论特性，通过**<em>Force Log At Commit</em><strong>机制实现事务的持久性，在事务提交的时候，必须先把该事务的所有</strong>“日志”<strong>写入到</strong>重做日志文件**中，然后再真正执行 COMIMIT</p>\\n<p>这里的<strong>“日志”</strong>由两部分组成，一是 redo log，二是 undo log；</p>\\n<p>为了确保重做日志的及时性和有效性，当要把日志从缓冲写到文件系统后，引擎都要调用一次主机系统的 fsync 操作，由于这个操作依赖磁盘性能，所以事务也依赖磁盘性能，所以数据库整体就依赖磁盘性能；</p>\\n<h4 id=\\\"undo\\\">Undo</h4>\\n<h5 id=\\\"支持回滚\\\">支持回滚</h5>\\n<p>重做日志记录了事务的行为，可以很好地重做页；但是事务还需要回滚操作，这时候就会需要 undo，在数据要修改的时候，引擎不仅会产生 redo，还会产生一定量的 undo，这样如果某条语句失败了，或者用户可以主动地调用回滚，将数据滚回之前的样子</p>\\n<p>于是，<strong>“回滚”是 undo 第一个要做的事</strong></p>\\n<p>redo 存放在重做日志文件中，而 undo 是存在数据库内部的一个特殊段（segment）中，这个 undo 段位于共享表空间里</p>\\n<p>需要注意的是：undo 并非用于将数据库<strong>物理地</strong>恢复到事务之前的样子，实际上 undo 是逻辑日志，它将数据<strong>逻辑地</strong>恢复到原来的样子；我们可以理解为：</p>\\n<blockquote>\\n<p>你怎么改的哪些东西，就怎么改哪些东西回去，而不是将整个页都改回原来的样子</p>\\n</blockquote>\\n<p>因为只有这样，你才能不会影响到其他线程的事务</p>\\n<h5 id=\\\"支持-mvcc\\\">支持 MVCC</h5>\\n<p><strong>undo 还有一个作用是 MVCC</strong></p>\\n<p>MVCC 的实现是通过 undo 来完成的，当读取一条被锁定的记录的时候，不会阻塞在此而是通过 undo 来读取之前的行版本信息，实现<strong>非锁定读</strong></p>\\n<p>最后，undo 的执行也会产生 redo log，因为它页需要持久性保护</p>\\n<p>那么 undo 究竟在干嘛？当事务提交的时候，<strong>引擎会为 undo 机制做以下两件事</strong>：</p>\\n<ol>\\n<li>将 undo log 放入列表，以供 purge 操作；</li>\\n<li>判断 undo log 所在页释放可以重用，以供下个事务使用；</li>\\n</ol>\\n<p>事务提交后不会马上删除 undo log 和相关 undo log 页，因为可能还有其他事务需要这个 undo 的版本，所以 undo 的删除页交由 purge 线程来判断</p>\\n<blockquote>\\n<p>什么是 MVCC？</p>\\n<p>MVCC 其实并不是一个标准，但是大多数数据库或者引擎都实现了它，可以简单将其理解为<strong>行级锁</strong>的一个变种，但它在很多情况下都避免了对行加锁因此开销小，阻塞率低</p>\\n<p>其基本思路是，所有操作后都会保留一个快照，事务的执行以快照版本为准，也就是说，无论一个需要时间的事务执行期间该记录被修改了多少次，该事务始终只看到该记录在该事务开始之前的样子，除非该事务自己修改了这个记录；所以根据事务开始的时机的不同，它看到的表数据可能不一样，但是一旦事务开启之后，它只能看到唯一一个版本的数据</p>\\n<p>每个引擎对这个机制的实现不同，InnoDB 的行为如下：</p>\\n<ul>\\n<li><p>select</p>\\n<ol>\\n<li>只查找版本早于当前事务版本的数据，保证事务读取的<strong>行</strong>：要么是事务开始前已经存在的，要么是事务自身修改或者拆入过的；</li>\\n<li>行的删除版本要么未定义，要么大于当前事务版本号，保证事务读取到的行在事务开始之前未被删除；</li>\\n</ol>\\n</li>\\n<li><p>insert/delete/update</p>\\n<p>都是对<strong>该行</strong>的版本号进行改动</p>\\n</li>\\n</ul>\\n</blockquote>\\n<h5 id=\\\"purge-线程\\\">purge 线程</h5>\\n<p>那么怎么决定什么样的 undo log 要删除呢？我们先来了解以下 undo log 的分类：</p>\\n<ul>\\n<li><p>insert undo log</p>\\n<p>是指 insert 操作产生的 undo log，因为该操作只对当前线程可见，所以一旦事务提交，则该 undo log 可以直接删除，不需要转给 purge；</p>\\n</li>\\n<li><p>update undo log</p>\\n<p>是指 delete 和 update 语句产生的 undo log，这些操作因为可能会被其他事务的 MVCC 所需要，所以会保留一段时间，直到没有事务线程引用其 MVCC 版本就会删除；</p>\\n</li>\\n</ul>\\n<p>我们把重点放在第 第二种 log 上，由于一些 update 操作需要保留一些 undo log 来支持 MVCC，所以实际上这些操作设计到的数据记录页并没有<strong>马上就更新或者是删除，而是会有延时，这些操作最终会由 purge 线程来完成！等到没有事务引用其版本记录，那么就会删除这个版本，并且执行 update 操作</strong></p>\\n<h3 id=\\\"事务的隔离级别\\\">事务的隔离级别</h3>\\n<p>和 ACID 类似地，SQL 标准定义的四个隔离级别为：</p>\\n<p><strong>读未提交（READ UNCOMMITTED）</strong></p>\\n<p>能够读取到其他事务的正在修改中的<strong>未提交的结果</strong>，称之为脏读；而且性能上说这个隔离级别也没有比后面的级别好多少，反而问题多多</p>\\n<p><strong>读已提交（READ COMMITTED）</strong></p>\\n<p>大多数数据库的默认隔离级别（MySQL 不是），简单来说就是只能够读取到已经提交过的结果，但是在同一次事务中读取某个数据两次可能会得到两个不同的结果（假如其他事务同时对该数据提交了两次修改）；所以该级别也叫不可重复读（nonrepeatable read）</p>\\n<p><strong>可重复读（REPEATABLE READ)</strong></p>\\n<p>可重复读解决了脏读、多次读取不一致的问题，但在理论上，标准的可重复读没有能够解决幻读的问题，即某个事务在读取<strong>范围内数据</strong>的时候，另一个事务在这个范围又插了一条数据，原来的事务再次读取这个范围就会读取到<strong>幻行</strong>，导致上下文不一致；而 MySQL 的 InnoDB 通过多版本<strong>并发控制（MVCC）</strong>解决了这个问题</p>\\n<p><strong>串行化（SERIALIZABLE）</strong></p>\\n<p>最高级别，强制事务串行执行，避免前面的各种问题，简单说就是在读取的每行上都加了共享锁，所以这个隔离级别的性能会比较低；</p>\\n<hr>\\n<p>下面我们来说一些<strong>细节</strong></p>\\n<h4 id=\\\"效率问题\\\">效率问题</h4>\\n<p>隔离级别越低，事务请求的锁就越少或者保持锁的时间就越短，但是随着技术的不断改进，可以有很多机制来辅助隔离级别的行为，于是各个隔离级别之间的性能差异越来越小，甚至没有区别</p>\\n<h4 id=\\\"实现问题\\\">实现问题</h4>\\n<p>对于<strong>InnoDB</strong>，由于其提供了 MVCC 而解决了<strong>不可重复读、幻读等问题，同时还提高了并发性能</strong>；所以在其 REPEATABLE READ（可重复读）级别下也能完整地支持事务 ACID，于是其默认的级别也就是这个；</p>\\n<p>对于其他引擎，甚至是其他数据库，都不一定会支持所有隔离级别，也不会严格按照标准实现</p>\\n<h4 id=\\\"mvcc-的行为\\\">MVCC 的行为</h4>\\n<p>对于 MVCC，不同隔离级别的快照读取的方式不同：</p>\\n<ul>\\n<li>READ COMMITTED：总是读取最新的一份快照；</li>\\n<li>REPEATEABLE READ：总是读取事务开始时的快照版本；</li>\\n</ul>\\n\";","export default \"<h3 id=\\\"前言\\\">前言</h3>\\n<p>因为Intern Job的原因，要接触到kafka和Microservice，虽然目前接触的不是很多，对于kafka的场景还不是很熟悉，但是总觉得这个东西是必学的，也是很重要的一种趋势</p>\\n<p>于是前几天给帖老板写的Graduation Design里写的就是kafka+springboot+opentracing的tracing监控系统</p>\\n<p>难度还是有的，springboot刚上手，opentracing的api在前一个月的工作里面也算是熟悉了，关键就是kafka以及如何把这几个玩意整合起来</p>\\n<p>anyway，这篇是关于kafka的入门理论基础</p>\\n<p>绝大部分转自：<a href=\\\"http://orchome.com\\\">http://orchome.com</a></p>\\n<hr>\\n<h3 id=\\\"简单说明什么是kafka\\\">简单说明什么是kafka</h3>\\n<p>Apache kafka是消息中间件的一种，我发现很多人不知道消息中间件是什么，在开始学习之前，我这边就先简单的解释一下什么是消息中间件，只是粗略的讲解，目前kafka已经可以做<code>更多</code>的事情。</p>\\n<p>举个例子，生产者消费者，生产者生产鸡蛋，消费者消费鸡蛋，生产者生产一个鸡蛋，消费者就消费一个鸡蛋，假设消费者消费鸡蛋的时候噎住了（系统宕机了），生产者还在生产鸡蛋，那新生产的鸡蛋就丢失了。再比如生产者很强劲（大交易量的情况），生产者1秒钟生产100个鸡蛋，消费者1秒钟只能吃50个鸡蛋，那要不了一会，消费者就吃不消了（消息堵塞，最终导致系统超时），消费者拒绝再吃了，”鸡蛋“又丢失了，这个时候我们放个篮子在它们中间，生产出来的鸡蛋都放到篮子里，消费者去篮子里拿鸡蛋，这样鸡蛋就不会丢失了，都在篮子里，而这个篮子就是”kafka“。\\n鸡蛋其实就是“数据流”，系统之间的交互都是通过“数据流”来传输的（就是tcp、http什么的），也称为报文，也叫“消息”。\\n消息队列满了，其实就是篮子满了，”鸡蛋“ 放不下了，那赶紧多放几个篮子，其实就是kafka的扩容。\\n各位现在知道kafka是干什么的了吧，它就是那个&quot;篮子&quot;。</p>\\n<h3 id=\\\"kafka名词解释\\\">kafka名词解释</h3>\\n<p>后面大家会看到一些关于kafka的名词，比如topic、producer、consumer、broker，我这边来简单说明一下。</p>\\n<ul>\\n<li><code>producer</code>：生产者，就是它来生产“鸡蛋”的。</li>\\n<li><code>consumer</code>：消费者，生出的“鸡蛋”它来消费。</li>\\n<li><code>topic</code>：你把它理解为标签，生产者每生产出来一个鸡蛋就贴上一个标签（topic），消费者可不是谁生产的“鸡蛋”都吃的，这样不同的生产者生产出来的“鸡蛋”，消费者就可以选择性的“吃”了。</li>\\n<li><code>broker</code>：就是篮子了。</li>\\n</ul>\\n<p>大家一定要学会抽象的去思考，上面只是属于业务的角度，如果从技术角度，topic标签实际就是队列，生产者把所有“鸡蛋（消息）”都放到对应的队列里了，消费者到指定的队列里取。</p>\\n<h3 id=\\\"kafka作为一个分布式的流平台，这到底意味着什么？\\\">Kafka作为一个分布式的流平台，这到底意味着什么？</h3>\\n<p>我们认为，一个流处理平台具有三个关键能力：</p>\\n<ol>\\n<li>发布和订阅消息（流），在这方面，它类似于一个消息队列或企业消息系统。</li>\\n<li>以<code>容错</code>的方式存储消息（流）。</li>\\n<li>在消息流发生时处理它们。</li>\\n</ol>\\n<h4 id=\\\"什么是kakfa的优势？\\\">什么是kakfa的优势？</h4>\\n<p>它应用于2大类应用：</p>\\n<ol>\\n<li>构建实时的流数据管道，可靠地获取系统和应用程序之间的数据。</li>\\n<li>构建实时流的应用程序，对数据流进行转换或反应。</li>\\n</ol>\\n<p>要了解kafka是如何做这些事情的，让我们从下到上深入探讨kafka的能力。</p>\\n<h4 id=\\\"首先几个概念：\\\">首先几个概念：</h4>\\n<ol>\\n<li>kafka作为一个集群运行在一个或多个服务器上。</li>\\n<li>kafka集群存储的消息是以topic为类别记录的。</li>\\n<li>每个消息（也叫记录<strong>record</strong>，我习惯叫消息）是由一个key，一个value和时间戳构成。</li>\\n</ol>\\n<h4 id=\\\"kafka有四个核心api：\\\">kafka有四个核心API：</h4>\\n<ul>\\n<li>应用程序使用 <code>Producer API</code> 发布消息到1个或多个topic（主题）。</li>\\n<li>应用程序使用 <code>Consumer API</code> 来订阅一个或多个topic，并处理产生的消息。</li>\\n<li>应用程序使用 <code>Streams API</code> 充当一个流处理器，从1个或多个topic消费输入流，并生产一个输出流到1个或多个输出topic，有效地将输入流转换到输出流。</li>\\n<li><code>Connector API</code>允许构建或运行可重复使用的生产者或消费者，将topic连接到现有的应用程序或数据系统。例如，一个关系数据库的连接器可捕获每一个变化。</li>\\n</ul>\\n<p><img src=\\\"http://kafka.apache.org/20/images/kafka-apis.png\\\" alt=\\\"img\\\"></p>\\n<p>Client和Server之间的通讯，是通过一条简单、高性能并且和开发语言无关的<a href=\\\"https://kafka.apache.org/protocol.html\\\">TCP协议</a>。并且该协议保持与老版本的兼容。Kafka提供了Java Client（客户端）。除了Java Client外，还有非常多的<a href=\\\"https://cwiki.apache.org/confluence/display/KAFKA/Clients\\\">其它编程语言的Client</a>。</p>\\n<h3 id=\\\"首先来了解一下kafka所使用的基本术语：\\\">首先来了解一下Kafka所使用的基本术语：</h3>\\n<h4 id=\\\"topic\\\">Topic</h4>\\n<p>Kafka将消息种子(Feed)分门别类，每一类的消息称之为一个主题(Topic).</p>\\n<h4 id=\\\"producer\\\">Producer</h4>\\n<p>发布消息的对象称之为主题生产者(Kafka topic producer)</p>\\n<h4 id=\\\"consumer\\\">Consumer</h4>\\n<p>订阅消息并处理发布的消息的种子的对象称之为主题消费者(consumers)</p>\\n<h4 id=\\\"broker\\\">Broker</h4>\\n<p>已发布的消息保存在一组服务器中，称之为Kafka集群。集群中的每一个服务器都是一个代理(Broker). 消费者可以订阅一个或多个主题（topic），并从Broker拉数据，从而消费这些已发布的消息。</p>\\n<h3 id=\\\"主题和日志--topic和log\\\">主题和日志  (Topic和Log)</h3>\\n<p>让我们更深入的了解Kafka中的Topic。</p>\\n<p>Topic是发布的消息的类别或者种子Feed名。对于每一个Topic，Kafka集群维护这一个分区（partition）的log，就像下图中的示例：</p>\\n<p><img src=\\\"http://kafka.apache.org/20/images/log_anatomy.png\\\" alt=\\\"img\\\"></p>\\n<p>每一个分区（partition）都是一个顺序的、不可变的消息队列， 并且可以持续的添加。分区（partition）中的消息都被分了一个序列号，称之为偏移量(offset)，在每个分区（partition）中此偏移量都是唯一的。</p>\\n<p>Kafka集群保持所有的消息，直到它们过期， 无论消息是否被消费了。 实际上消费者所持有的仅有的元数据就是这个偏移量，也就是消费者在这个log中的位置。 这个偏移量由消费者控制：正常情况当消费者消费消息的时候，偏移量也线性的的增加。但是实际偏移量由消费者控制，消费者可以将偏移量重置为更老的一个偏移量，重新读取消息。 可以看到这种设计对消费者来说操作自如， 一个消费者的操作不会影响其它消费者对此log的处理。 再说说分区（partition）。Kafka中采用分区（partition）的设计有几个目的。一是可以处理更多的消息，不受单台服务器的限制。Topic拥有多个分区（partition）意味着它可以不受限的处理更多的数据。第二，分区（partition）可以作为并行处理的单元，稍后会谈到这一点。\\n<img src=\\\"http://kafka.apache.org/20/images/log_consumer.png\\\" alt=\\\"img\\\"></p>\\n<h3 id=\\\"分布式distribution\\\">分布式(Distribution)</h3>\\n<p>Log的分区（partition）被分布到集群中的多个服务器上。每个服务器处理它分到的分区（partition）。 根据配置每个分区（partition）还可以复制到其它服务器作为备份容错。 每个分区（partition）有一个leader，零或多个follower。Leader处理此分区（partition）的所有的读写请求，而follower被动的复制数据。如果leader宕机，其它的一个follower会被推举为新的leader。 一台服务器可能同时是一个分区（partition）的leader，另一个分区（partition）的follower。 这样可以平衡负载，避免所有的请求都只让一台或者某几台服务器处理。</p>\\n<h3 id=\\\"geo-replication异地数据同步技术\\\">Geo-Replication(异地数据同步技术)</h3>\\n<p><strong>Kafka MirrorMaker</strong>为群集提供<code>geo-replication</code>支持。借助<code>MirrorMaker</code>，消息可以跨多个数据中心或云区域进行复制。 您可以在active/passive场景中用于备份和恢复; 或者在active/passive方案中将数据置于更接近用户的位置，或数据本地化。</p>\\n<h3 id=\\\"生产者producers\\\">生产者(Producers)</h3>\\n<p>生产者往某个Topic上发布消息。生产者也负责选择发布到Topic上的哪一个分区（partition）。最简单的方式从分区（partition）列表中轮流选择。也可以根据某种算法依照权重选择分区（partition）。开发者负责如何选择分区（partition）的算法。</p>\\n<h3 id=\\\"消费者consumers\\\">消费者(Consumers)</h3>\\n<p>通常来讲，消息模型可以分为两种， 队列和发布-订阅式。 队列的处理方式是 一组消费者从服务器读取消息，一条消息只有其中的一个消费者来处理。在发布-订阅模型中，消息被广播给所有的消费者，接收到消息的消费者都可以处理此消息。Kafka为这两种模型提供了单一的消费者抽象模型： 消费者组 （consumer group）。 消费者用一个消费者组名标记自己。 一个发布在Topic上消息被分发给此消费者组中的一个消费者。 假如所有的消费者都在一个组中，那么这就变成了queue模型。 假如所有的消费者都在不同的组中，那么就完全变成了发布-订阅模型。 更通用的， 我们可以创建一些消费者组作为逻辑上的订阅者。每个组包含数目不等的消费者， 一个组内多个消费者可以用来扩展性能和容错。正如下图所示：\\n<img src=\\\"http://kafka.apache.org/20/images/consumer-groups.png\\\" alt=\\\"img\\\"></p>\\n<p>2个kafka集群托管4个分区（partition）（P0-P3），2个消费者组，消费组A有2个消费者实例，消费组B有4个。</p>\\n<p>正像传统的消息系统一样，Kafka保证消息的顺序不变。 再详细扯几句。传统的队列模型保持消息，并且保证它们的先后顺序不变。但是， 尽管服务器保证了消息的顺序，消息还是异步的发送给各个消费者，消费者收到消息的先后顺序不能保证了。这也意味着并行消费将不能保证消息的先后顺序。用过传统的消息系统的同学肯定清楚，消息的顺序处理很让人头痛。如果只让一个消费者处理消息，又违背了并行处理的初衷。 在这一点上Kafka做的更好，尽管并没有完全解决上述问题。 Kafka采用了一种分而治之的策略：分区（partition）。 因为Topic分区（partition）中消息只能由消费者组中的唯一一个消费者处理，所以消息肯定是按照先后顺序进行处理的。但是它也仅仅是保证Topic的一个分区（partition）顺序处理，不能保证跨分区（partition）的消息先后处理顺序。 所以，如果你想要顺序的处理Topic的所有消息，那就只提供一个分区（partition）。</p>\\n<h3 id=\\\"kafka的保证guarantees\\\">Kafka的保证(Guarantees)</h3>\\n<ul>\\n<li>生产者发送到一个特定的Topic的分区（partition）上，消息将会按照它们发送的顺序依次加入，也就是说，如果一个消息M1和M2使用相同的producer发送，M1先发送，那么M1将比M2的offset低，并且优先的出现在日志中。</li>\\n<li>消费者收到的消息也是此顺序。</li>\\n<li>如果一个Topic配置了复制因子（replication factor）为N， 那么可以允许N-1服务器宕机而不丢失任何已经提交（committed）的消息。</li>\\n</ul>\\n<p>有关这些保证的更多详细信息，请参见文档的设计部分。</p>\\n<h3 id=\\\"kafka作为一个消息系统\\\">kafka作为一个消息系统</h3>\\n<h4 id=\\\"kafka的流与传统企业消息系统相比的概念如何？\\\">Kafka的流与传统企业消息系统相比的概念如何？</h4>\\n<p>传统的消息有两种模式：<code>队列</code>和<code>发布订阅</code>。 在队列模式中，消费者池从服务器读取消息（每个消息只被其中一个读取）; 发布订阅模式：消息广播给所有的消费者。这两种模式都有优缺点，队列的优点是允许多个消费者瓜分处理数据，这样可以扩展处理。但是，队列不像多个订阅者，一旦消息者进程读取后故障了，那么消息就丢了。而<code>发布和订阅</code>允许你广播数据到多个消费者，由于每个订阅者都订阅了消息，所以没办法缩放处理。</p>\\n<p>kafka中消费者组有两个概念：<code>队列</code>：消费者组（consumer group）允许同名的消费者组成员瓜分处理。<code>发布订阅</code>：允许你广播消息给多个消费者组（不同名）。</p>\\n<p>kafka的每个topic都具有这两种模式。</p>\\n<h4 id=\\\"kafka有比传统的消息系统更强的顺序保证。\\\">kafka有比传统的消息系统更强的顺序保证。</h4>\\n<p>传统的消息系统按顺序保存数据，如果多个消费者从队列消费，则服务器按存储的顺序发送消息，但是，尽管服务器按顺序发送，消息异步传递到消费者，因此消息可能乱序到达消费者。这意味着消息存在并行消费的情况，顺序就无法保证。消息系统常常通过仅设1个消费者来解决这个问题，但是这意味着没用到并行处理。</p>\\n<p>kafka做的更好。通过并行topic的parition —— kafka提供了顺序保证和负载均衡。每个partition仅由同一个消费者组中的一个消费者消费到。并确保消费者是该partition的唯一消费者，并按顺序消费数据。每个topic有多个分区（partition），则需要对多个消费者做负载均衡，但请注意，<code>相同的消费者组中不能有比分区（partition）更多的消费者，否则多出的消费者一直处于空等待，不会收到消息</code>。</p>\\n<h3 id=\\\"kafka作为一个存储系统\\\">kafka作为一个存储系统</h3>\\n<p>所有发布消息到<code>消息队列</code>和消费分离的系统，实际上都充当了一个存储系统（发布的消息先存储起来）。Kafka比别的系统的优势是它是一个非常高性能的<code>存储系统</code>。</p>\\n<p>写入到kafka的数据将写到磁盘并复制到集群中保证容错性。并允许生产者等待消息应答，直到消息完全写入。</p>\\n<p>kafka的磁盘结构 - 无论你服务器上有50KB或50TB，执行是相同的。</p>\\n<p>client来控制读取数据的位置。你还可以认为kafka是一种专用于高性能，低延迟，提交日志存储，复制，和传播特殊用途的<code>分布式文件系统</code>。</p>\\n<h3 id=\\\"kafka的流处理\\\">kafka的流处理</h3>\\n<p>仅仅读，写和存储是不够的，kafka的目标是实时的流处理。</p>\\n<p>在kafka中，流处理持续获取<code>输入topic</code>的数据，进行处理加工，然后写入<code>输出topic</code>。例如，一个零售APP，接收销售和出货的<code>输入流</code>，统计数量或调整价格后输出。</p>\\n<p>可以直接使用producer和consumer API进行简单的处理。对于复杂的转换，Kafka提供了更强大的Streams API。可构建<code>聚合计算</code>或<code>连接流到一起</code>的复杂应用程序。</p>\\n<p>此工具有助于解决此类应用程序面临的难题：处理无序数据，在代码更改时重新处理输入，执行有状态计算等。</p>\\n<p>Sterams API在Kafka中的核心：使用producer和consumer API作为输入，利用Kafka做状态存储，使用相同的<strong>组机制（group mechanism）</strong>在stream处理器实例之间进行容错保障。</p>\\n<h3 id=\\\"拼在一起\\\">拼在一起</h3>\\n<p>消息传递，存储和流处理的组合看似反常，但对于Kafka作为流式处理平台的作用至关重要。</p>\\n<p>像HDFS这样的分布式文件系统允许存储静态文件来进行批处理。这样系统可以有效地存储和处理来自过去的历史数据。</p>\\n<p>传统企业的消息系统允许在你订阅之后处理未来的消息：在未来数据到达时处理它。</p>\\n<p>Kafka结合了这两种能力，这种组合对于kafka作为流处理应用和流数据管道平台是至关重要的。</p>\\n<p>批处理以及消息驱动应用程序的流处理的概念：通过组合存储和低延迟订阅，流处理应用可以用相同的方式对待过去和未来的数据。它是一个单一的应用程序，它可以处理历史的存储数据，当它处理到最后一个消息时，它进入等待未来的数据到达，而不是结束。</p>\\n<p>同样，对于流数据管道（pipeline），订阅实时事件的组合使得可以将Kafka用于非常低延迟的管道；但是，可靠地存储数据的能力使得它可以将其用于必须保证传递的关键数据，或与仅定期加载数据或长时间维护的离线系统集成在一起。流处理可以在数据到达时转换它。</p>\\n\";","export default \"<h3 id=\\\"introduction\\\">Introduction</h3>\\n<p>上节我们介绍了Java并发编程的一个新的阶段——Java并发包中的<code>Lock</code>接口以及<code>AbstractQueuedSynchronizer</code>的配合使用</p>\\n<p>并且尝试实现了一个简单的独占锁Mutex，借此我们了解到，并发编程还能如此灵活与优雅</p>\\n<p>本节还是属于第七坎，因为第七坎应该是关于整个Java并发包的基础内容，所以会分成多节进行</p>\\n<p>在上节的最后我们运用<code>Lock</code>和<code>AbstractQueuedSynchronizer</code>去简单地实现了一个独占锁，本节我们紧接着要分析一下<code>AbstractQueuedSynchronizer</code>的部分方法的实现原理，了解同步器为什么能如此强大</p>\\n<p>本篇参考书本上，试图分析<strong>独占式同步状态的获取和释放/共享式同步状态的获取和释放</strong>的源码</p>\\n<p>观察源码之前我们需要回顾一下：</p>\\n<blockquote>\\n<p> 对于同步器中的方法，我们需要实现的是：<strong>对同步状态的“尝试”获取/释放</strong>的一类方法</p>\\n<ul>\\n<li>try方法只返回是否获取同步状态成功（独占式）/获取到了1个以上的同步状态（共享式）</li>\\n<li>这类方法被模板方法第一次尝试调用：<ul>\\n<li>若成功，则线程获取到锁；</li>\\n<li>若失败，则模板方法继续管理同步队列</li>\\n</ul>\\n</li>\\n<li>在线程成为结点加入到同步队列的过程中，结点在自旋的时候也在不断地try获取同步状态</li>\\n</ul>\\n</blockquote>\\n<h3 id=\\\"synchronizedqueue\\\">SynchronizedQueue</h3>\\n<p>同步器依赖内部实现的一个同步队列来完成<strong>同步状态的管理</strong>，当前线程获取同步状态失败的时候，同步器会将当前线程以及等待状态等信息构造成一个结点（Node）并将其加入到同步队列的尾部，<strong>同时阻塞当前线程</strong></p>\\n<h4 id=\\\"node\\\">Node</h4>\\n<p>同步队列中的结点用来保存同步状态获取失败的线程引用、等待状态以及前驱和后继结点，我们来看一下Node结构，值得一提的是，Node的结构是CLH队列锁的一个变体，CLH队列锁是一种自旋锁，有兴趣可以参考<a href=\\\"./vywf17.html\\\">这里</a>来学习一下，推荐学习Node之前看一下CLH队列锁</p>\\n<pre><code class=\\\"hljs language-java\\\"><span class=\\\"hljs-keyword\\\">static</span> <span class=\\\"hljs-keyword\\\">final</span> <span class=\\\"hljs-keyword\\\">class</span> <span class=\\\"hljs-title class_\\\">Node</span> {\\n    <span class=\\\"hljs-comment\\\">/** Marker to indicate a node is waiting in shared mode */</span>\\n    <span class=\\\"hljs-keyword\\\">static</span> <span class=\\\"hljs-keyword\\\">final</span> <span class=\\\"hljs-type\\\">Node</span> <span class=\\\"hljs-variable\\\">SHARED</span> <span class=\\\"hljs-operator\\\">=</span> <span class=\\\"hljs-keyword\\\">new</span> <span class=\\\"hljs-title class_\\\">Node</span>();\\n    <span class=\\\"hljs-comment\\\">/** Marker to indicate a node is waiting in exclusive mode */</span>\\n    <span class=\\\"hljs-keyword\\\">static</span> <span class=\\\"hljs-keyword\\\">final</span> <span class=\\\"hljs-type\\\">Node</span> <span class=\\\"hljs-variable\\\">EXCLUSIVE</span> <span class=\\\"hljs-operator\\\">=</span> <span class=\\\"hljs-literal\\\">null</span>;\\n    \\n    <span class=\\\"hljs-comment\\\">// 在同步队列中等待的线程如果超时或者被中断了，则会转变为此状态，且以后不会再发生状态变化</span>\\n    <span class=\\\"hljs-keyword\\\">static</span> <span class=\\\"hljs-keyword\\\">final</span> <span class=\\\"hljs-type\\\">int</span> <span class=\\\"hljs-variable\\\">CANCELLED</span> <span class=\\\"hljs-operator\\\">=</span>  <span class=\\\"hljs-number\\\">1</span>;\\n    <span class=\\\"hljs-comment\\\">// 后继结点如果处于等待（park）状态，而当前结点的线程如果释放了同步状态或者被取消了的话，就会唤醒(unpark)后继结点</span>\\n    <span class=\\\"hljs-keyword\\\">static</span> <span class=\\\"hljs-keyword\\\">final</span> <span class=\\\"hljs-type\\\">int</span> <span class=\\\"hljs-variable\\\">SIGNAL</span>    <span class=\\\"hljs-operator\\\">=</span> -<span class=\\\"hljs-number\\\">1</span>;\\n    <span class=\\\"hljs-comment\\\">// 结点在等待队列中，结点等带在Condition上，如果其他线程调用了Condition的signal()方法，则该结点会从等待队列中转移到同步队列中，加入到同步状态的获取中</span>\\n    <span class=\\\"hljs-keyword\\\">static</span> <span class=\\\"hljs-keyword\\\">final</span> <span class=\\\"hljs-type\\\">int</span> <span class=\\\"hljs-variable\\\">CONDITION</span> <span class=\\\"hljs-operator\\\">=</span> -<span class=\\\"hljs-number\\\">2</span>;\\n    <span class=\\\"hljs-comment\\\">// 表示下一次共享式同步状态的获取会被无条件地传播下去</span>\\n    <span class=\\\"hljs-keyword\\\">static</span> <span class=\\\"hljs-keyword\\\">final</span> <span class=\\\"hljs-type\\\">int</span> <span class=\\\"hljs-variable\\\">PROPAGATE</span> <span class=\\\"hljs-operator\\\">=</span> -<span class=\\\"hljs-number\\\">3</span>;\\n    <span class=\\\"hljs-keyword\\\">volatile</span> <span class=\\\"hljs-type\\\">int</span> waitStatus;\\n\\n    <span class=\\\"hljs-comment\\\">// 前驱节点</span>\\n    <span class=\\\"hljs-keyword\\\">volatile</span> Node prev;\\n    <span class=\\\"hljs-comment\\\">// 后继结点</span>\\n    <span class=\\\"hljs-keyword\\\">volatile</span> Node next;\\n    <span class=\\\"hljs-comment\\\">// 要获取同步状态的线程</span>\\n    <span class=\\\"hljs-keyword\\\">volatile</span> Thread thread;\\n    <span class=\\\"hljs-comment\\\">// 等待队列中的后继结点</span>\\n    Node nextWaiter;\\n\\n    <span class=\\\"hljs-keyword\\\">final</span> <span class=\\\"hljs-type\\\">boolean</span> <span class=\\\"hljs-title function_\\\">isShared</span><span class=\\\"hljs-params\\\">()</span> {\\n        <span class=\\\"hljs-type\\\">return</span> <span class=\\\"hljs-variable\\\">nextWaiter</span> <span class=\\\"hljs-operator\\\">=</span>= SHARED;\\n    }\\n    <span class=\\\"hljs-keyword\\\">final</span> Node <span class=\\\"hljs-title function_\\\">predecessor</span><span class=\\\"hljs-params\\\">()</span> <span class=\\\"hljs-keyword\\\">throws</span> NullPointerException {\\n        <span class=\\\"hljs-type\\\">Node</span> <span class=\\\"hljs-variable\\\">p</span> <span class=\\\"hljs-operator\\\">=</span> prev;\\n        <span class=\\\"hljs-keyword\\\">if</span> (p == <span class=\\\"hljs-literal\\\">null</span>)\\n            <span class=\\\"hljs-keyword\\\">throw</span> <span class=\\\"hljs-keyword\\\">new</span> <span class=\\\"hljs-title class_\\\">NullPointerException</span>();\\n        <span class=\\\"hljs-keyword\\\">else</span>\\n            <span class=\\\"hljs-keyword\\\">return</span> p;\\n    }\\n    Node() {    <span class=\\\"hljs-comment\\\">// Used to establish initial head or SHARED marker</span>\\n    }\\n    Node(Thread thread, Node mode) {     <span class=\\\"hljs-comment\\\">// Used by addWaiter</span>\\n        <span class=\\\"hljs-built_in\\\">this</span>.nextWaiter = mode;\\n        <span class=\\\"hljs-built_in\\\">this</span>.thread = thread;\\n    }\\n    Node(Thread thread, <span class=\\\"hljs-type\\\">int</span> waitStatus) { <span class=\\\"hljs-comment\\\">// Used by Condition</span>\\n        <span class=\\\"hljs-built_in\\\">this</span>.waitStatus = waitStatus;\\n        <span class=\\\"hljs-built_in\\\">this</span>.thread = thread;\\n    }\\n}\\n</code></pre>\\n<p>结点是构成<strong>同步队列</strong>和<strong>等待队列</strong>的基础，等待队列的概念会在后面几节介绍，它和Condition对象有关；</p>\\n<p>我们看到最前面两个变量都是Node类型的，分别代表结点的共享式和独占式两种模式，然后就是结点的状态以及前驱后继结点的引用，关于<code>nextWaiter</code>的意义我们后面说到等待队列的时候再细说</p>\\n<p>同步器拥有头节点head和尾结点tail，没有成功获取到同步状态的线程会称为结点加入到队列的尾部，其结构大概是：</p>\\n<pre class=\\\"nhi\\\">\\n         AQS          setHead(Node update)\\n    ┏-----------┓       /\\n    |           |     ┏---&gt;Node         Node         Node         Node\\n    |  { head }-|-----┛  | prev |&lt;----|-prev |&lt;----|-prev |&lt;----|-prev |\\n    |           |        | next-|----&gt;| next-|----&gt;| next-|----&gt;| next |\\n    |  { tail }-|--------------------------------------------------^\\n    |           |        \\\\\\n    ┗-----------┛      compareAndSetTail(Node expect, Node update)\\n</pre>\\n\\n\\n<p>把<strong>当前结点（刚获取同步状态失败的线程构成的结点）</strong>放到尾部的过程必须用CAS的方式去做，<strong>保证每个并发加入的结点最终能够串行成队列</strong>，它需要传入当前线程“认为”的尾结点和当前结点</p>\\n<p>同步队列也遵从FIFO，首节点是获取同步状态成功的结点，首节点线程在释放同步状态的时候，会唤醒后继结点，而后继结点会在<strong>获取同步状态成功的那一刻</strong>将自己设置为首节点，因为设置首节点的前提是<strong>获取到同步状态</strong>，<u>由于只有一个线程获取到同步状态</u>，所以设置首节点的方法并不需要使用CAS来保证，它只需要将首节点设置成原首节点的后继，并且断开原首节点的next引用即可</p>\\n<blockquote>\\n<p>这里就有一个疑问，如果是共享式锁的情况下，同步状态回被多个线程获取到，那又该怎么办呢？</p>\\n<p>疑问解决：看完后面的shared节点的获取过程之后，我们就能知道，在同步状态足够的情况下，unpark是会传递下去的</p>\\n</blockquote>\\n<h4 id=\\\"exclusive-acquire--release\\\">Exclusive acquire & release</h4>\\n<h5 id=\\\"acquire\\\">acquire</h5>\\n<p>通过调用同步器的<code>acquire(int arg)</code>方法可以获取到同步状态</p>\\n<pre><code class=\\\"hljs language-java\\\"><span class=\\\"hljs-keyword\\\">public</span> <span class=\\\"hljs-keyword\\\">final</span> <span class=\\\"hljs-keyword\\\">void</span> <span class=\\\"hljs-title function_\\\">acquire</span><span class=\\\"hljs-params\\\">(<span class=\\\"hljs-type\\\">int</span> arg)</span> {\\n    <span class=\\\"hljs-keyword\\\">if</span> (!tryAcquire(arg) &&\\n        acquireQueued(addWaiter(Node.EXCLUSIVE), arg))\\n        selfInterrupt();\\n}\\n</code></pre>\\n<p>在获取同步状态的时候，首先调用<code>tryAcquire(int arg)</code>方法，这个方法是我们需要实现的模板方法之一，我们需要保证该方法能够线程安全地获取同步状态，方法尝试获取一次同步状态，如果获取成功，则<code>acquire(int arg)</code>方法结束；如果获取失败，首先调用<code>addWaiter</code>方法将获取同步状态失败的线程构建为Node结点（Node.EXCLUSIVE），然后加入到队尾，最后调用<code>acquireQueued</code>方法，让这个结点以“死循环”的方式不断获取同步状态<strong>（实际上也就循环了2次，之后就会被park掉）</strong>，若是获取失败，则阻塞结点持有的线程，等到结点被前驱结点唤醒的时候（一般是前驱结点已经获取到同步状态并且打算释放了的时候），或者阻塞线程被中断了的时候</p>\\n<h5 id=\\\"addwaiter\\\">addWaiter</h5>\\n<pre><code class=\\\"hljs language-java\\\"><span class=\\\"hljs-keyword\\\">private</span> Node <span class=\\\"hljs-title function_\\\">addWaiter</span><span class=\\\"hljs-params\\\">(Node mode)</span> {\\n    <span class=\\\"hljs-type\\\">Node</span> <span class=\\\"hljs-variable\\\">node</span> <span class=\\\"hljs-operator\\\">=</span> <span class=\\\"hljs-keyword\\\">new</span> <span class=\\\"hljs-title class_\\\">Node</span>(Thread.currentThread(), mode);\\n    <span class=\\\"hljs-comment\\\">// Try the fast path of enq; backup to full enq on failure</span>\\n    <span class=\\\"hljs-type\\\">Node</span> <span class=\\\"hljs-variable\\\">pred</span> <span class=\\\"hljs-operator\\\">=</span> tail;\\n    <span class=\\\"hljs-keyword\\\">if</span> (pred != <span class=\\\"hljs-literal\\\">null</span>) {\\n        node.prev = pred;\\n        <span class=\\\"hljs-keyword\\\">if</span> (compareAndSetTail(pred, node)) {\\n            pred.next = node;\\n            <span class=\\\"hljs-keyword\\\">return</span> node;\\n        }\\n    }\\n    enq(node);\\n    <span class=\\\"hljs-keyword\\\">return</span> node;\\n}\\n</code></pre>\\n<p>如注释所说，Node.EXCLUSIVE是独占式结点，Node.SHARED是共享式结点，我其实很好奇为什么要用Node对象来表示结点的mode，也许在后面的共享式结点中有什么出彩的操作吧，后面再继续研究这个事</p>\\n<p>注释里也说了，line：10-17行只是一个<code>enq</code>的快速版本，如果是第一个要addWaiter的结点，这时候AQS里面的tail是为null的；如果AQS里已经有tail了，那么可以在这段代码中尝试快速设置tail（如注释中所说）</p>\\n<h5 id=\\\"enq\\\">enq</h5>\\n<pre><code class=\\\"hljs language-java\\\"><span class=\\\"hljs-keyword\\\">private</span> Node <span class=\\\"hljs-title function_\\\">enq</span><span class=\\\"hljs-params\\\">(<span class=\\\"hljs-keyword\\\">final</span> Node node)</span> {\\n    <span class=\\\"hljs-keyword\\\">for</span> (;;) {\\n        <span class=\\\"hljs-type\\\">Node</span> <span class=\\\"hljs-variable\\\">t</span> <span class=\\\"hljs-operator\\\">=</span> tail;\\n        <span class=\\\"hljs-keyword\\\">if</span> (t == <span class=\\\"hljs-literal\\\">null</span>) { <span class=\\\"hljs-comment\\\">// Must initialize</span>\\n            <span class=\\\"hljs-keyword\\\">if</span> (compareAndSetHead(<span class=\\\"hljs-keyword\\\">new</span> <span class=\\\"hljs-title class_\\\">Node</span>()))\\n                tail = head;\\n        } <span class=\\\"hljs-keyword\\\">else</span> {\\n            node.prev = t;\\n            <span class=\\\"hljs-keyword\\\">if</span> (compareAndSetTail(t, node)) {\\n                t.next = node;\\n                <span class=\\\"hljs-keyword\\\">return</span> t;\\n            }\\n        }\\n    }\\n}\\n</code></pre>\\n<p>这part其实是很欢乐的，死循环里的逻辑：如果tail为null，证明这是第一个获取同步状态失败的线程的结点，所以call<code>compareAndSetHead</code>，刚开始肯定是走的这里，将一个新的结点设置为AQS的head</p>\\n<blockquote>\\n<p>这个方法实际上是调用<code>sun.misc.Unsafe</code>类的<code>compareAndSwapObject</code>方法，更底层的就没必要深入了，作用是以CAS的方式设置AQS的head字段，同理<code>compareAndSetTail</code>也一样</p>\\n<p><code>compareAndSwapXXX</code>系列的方法都是一样的参数列表，比如SwapInt就是<code>(Object o, long offset, int expected, int update)</code>，Object o就是要设置字段的对象，offset值同样可以通过<code>Unsafe</code>类的<code>objectFieldOffset</code>方法获取，比如在AQS中就是：</p>\\n<pre><code class=\\\"hljs language-java\\\"><span class=\\\"hljs-keyword\\\">private</span> <span class=\\\"hljs-keyword\\\">static</span> <span class=\\\"hljs-keyword\\\">final</span> <span class=\\\"hljs-type\\\">Unsafe</span> <span class=\\\"hljs-variable\\\">unsafe</span> <span class=\\\"hljs-operator\\\">=</span> Unsafe.getUnsafe();\\n<span class=\\\"hljs-keyword\\\">private</span> <span class=\\\"hljs-keyword\\\">static</span> <span class=\\\"hljs-keyword\\\">final</span> <span class=\\\"hljs-type\\\">long</span> headOffset;\\n<span class=\\\"hljs-comment\\\">// ...</span>\\n<span class=\\\"hljs-keyword\\\">static</span> {\\n    <span class=\\\"hljs-keyword\\\">try</span> {\\n        headOffset = unsafe.objectFieldOffset\\n            (AbstractQueuedSynchronizer.class.getDeclaredField(<span class=\\\"hljs-string\\\">&quot;head&quot;</span>));\\n        <span class=\\\"hljs-comment\\\">// ...</span>\\n    } <span class=\\\"hljs-keyword\\\">catch</span> (Exception ex) { <span class=\\\"hljs-keyword\\\">throw</span> <span class=\\\"hljs-keyword\\\">new</span> <span class=\\\"hljs-title class_\\\">Error</span>(ex); }\\n}\\n</code></pre>\\n<p>然后<code>compareAndSetHead</code>方法里面：</p>\\n<pre><code class=\\\"hljs language-java\\\"><span class=\\\"hljs-keyword\\\">private</span> <span class=\\\"hljs-keyword\\\">final</span> <span class=\\\"hljs-type\\\">boolean</span> <span class=\\\"hljs-title function_\\\">compareAndSetHead</span><span class=\\\"hljs-params\\\">(Node update)</span> {\\n    <span class=\\\"hljs-keyword\\\">return</span> unsafe.compareAndSwapObject(<span class=\\\"hljs-built_in\\\">this</span>, headOffset, <span class=\\\"hljs-literal\\\">null</span>, update);\\n}\\n</code></pre>\\n<p>值得一提的是，unsafe对象并不能直接使用，它是单例模式，只有有限的几个类加载器才能够获取它的单例</p>\\n</blockquote>\\n<p>anyway，在设置好head了之后，又把tail设置为head，也就是说这个时候tail和head都是这个<code>new Node()</code>，这还没结束，还得再循环一遍，这一遍来，就是走else的时候了，还记得从<code>enq</code>进来的node嘛？这里用到了！我们称它为入队结点</p>\\n<pre><code class=\\\"hljs language-java\\\"><span class=\\\"hljs-comment\\\">// ...</span>\\n<span class=\\\"hljs-comment\\\">// t = tail</span>\\n<span class=\\\"hljs-keyword\\\">else</span> {\\n    node.prev = t;\\n    <span class=\\\"hljs-keyword\\\">if</span> (compareAndSetTail(t, node)) {\\n        t.next = node;\\n        <span class=\\\"hljs-keyword\\\">return</span> t;\\n    }\\n}\\n</code></pre>\\n<p>之前的<code>new Node()</code>作为入队结点的前驱（prev），然后<code>compareAndSetTail</code>，将入队结点设置为AQS的tail字段，然后t的后继指向入队结点，然后返回t，这时候AQS的结构如：</p>\\n<pre class=\\\"nhi\\\">\\n         AQS       \\n    -------------   \\n    |           |      new Node()     入队结点\\n    |  { head }-|------>{ prev }&lt;----{-prev }\\n    |           |       { next-}----&gt;{ next }\\n    |  { tail }-|------------------------^\\n    |           |        \\n    ------------- \\n</pre>\\n\\n<p>这时候的<code>new Node()</code>是没有什么意义的，然后入队结点还系着获取同步状态失败的线程，后面如果再有入队的结点的话，就直接走else，尝试不断地将新入队结点设置为tail，直到成功的时候才返回，虽然<code>enq</code>的返回值没有被用到</p>\\n<h5 id=\\\"aquirequeued\\\">aquireQueued</h5>\\n<p>结点进入同步队列之后，就进入了一个自旋的过程并阻塞结点持有的线程，每个结点会自我审查，当条件满足，获取到同步状态的时候，就会从自旋中退出</p>\\n<pre><code class=\\\"hljs language-java\\\"><span class=\\\"hljs-keyword\\\">final</span> <span class=\\\"hljs-type\\\">boolean</span> <span class=\\\"hljs-title function_\\\">acquireQueued</span><span class=\\\"hljs-params\\\">(<span class=\\\"hljs-keyword\\\">final</span> Node node, <span class=\\\"hljs-type\\\">int</span> arg)</span> {\\n    <span class=\\\"hljs-type\\\">boolean</span> <span class=\\\"hljs-variable\\\">failed</span> <span class=\\\"hljs-operator\\\">=</span> <span class=\\\"hljs-literal\\\">true</span>;\\n    <span class=\\\"hljs-keyword\\\">try</span> {\\n        <span class=\\\"hljs-type\\\">boolean</span> <span class=\\\"hljs-variable\\\">interrupted</span> <span class=\\\"hljs-operator\\\">=</span> <span class=\\\"hljs-literal\\\">false</span>;\\n        <span class=\\\"hljs-keyword\\\">for</span> (;;) {\\n            <span class=\\\"hljs-keyword\\\">final</span> <span class=\\\"hljs-type\\\">Node</span> <span class=\\\"hljs-variable\\\">p</span> <span class=\\\"hljs-operator\\\">=</span> node.predecessor();\\n            <span class=\\\"hljs-keyword\\\">if</span> (p == head && tryAcquire(arg)) {\\n                setHead(node);\\n                p.next = <span class=\\\"hljs-literal\\\">null</span>; <span class=\\\"hljs-comment\\\">// help GC</span>\\n                failed = <span class=\\\"hljs-literal\\\">false</span>;\\n                <span class=\\\"hljs-keyword\\\">return</span> interrupted;\\n            }\\n            <span class=\\\"hljs-keyword\\\">if</span> (shouldParkAfterFailedAcquire(p, node) &&\\n                parkAndCheckInterrupt())\\n                interrupted = <span class=\\\"hljs-literal\\\">true</span>;\\n        }\\n    } <span class=\\\"hljs-keyword\\\">finally</span> {\\n        <span class=\\\"hljs-keyword\\\">if</span> (failed)\\n            cancelAcquire(node);\\n    }\\n}\\n</code></pre>\\n<p>接上面的内容，当我们从<code>addWaiter</code>的<code>enq</code>方法返回之后，<code>addWaiter</code>也就结束了，返回入队结点，然后入队结点进入到<code>aquireQueued</code>方法，其中通过死循环来自审：</p>\\n<ul>\\n<li><p>获取<strong>当前入队结点</strong>的前驱，如果前驱是head的话，那么<strong>当前入队结点</strong>就不断地尝试获取同步状态（line:15 <code>tryAcquire</code>）</p>\\n<ul>\\n<li><p>如果尝试成功，则将<strong>当前入队结点</strong>设置为头节点，并且断开引用便于GC</p>\\n<blockquote>\\n<p>这里也指明了，头节点在不同的时候具有不同的涵义：头节点最开始或许是一个无用的<code>new Node()</code>，但是当下一个入队结点成获取同步状态了之后，这个入队结点会称为新的head</p>\\n</blockquote>\\n</li>\\n</ul>\\n</li>\\n<li><p>然后如果前驱节点并不是head，即使是也没有获取到同步状态的话，就到了<code>shouldParkAfterFailedAcquire</code>方法</p>\\n<pre><code class=\\\"hljs language-java\\\"><span class=\\\"hljs-comment\\\">/**\\n * Checks and updates status for a node that failed to acquire.\\n * Returns true if thread should block. This is the main signal\\n * control in all acquire loops.  Requires that pred == node.prev.\\n *\\n * <span class=\\\"hljs-doctag\\\">@param</span> pred node&#x27;s predecessor holding status\\n * <span class=\\\"hljs-doctag\\\">@param</span> node the node\\n * <span class=\\\"hljs-doctag\\\">@return</span> {<span class=\\\"hljs-doctag\\\">@code</span> true} if thread should block\\n */</span>\\n<span class=\\\"hljs-keyword\\\">private</span> <span class=\\\"hljs-keyword\\\">static</span> <span class=\\\"hljs-type\\\">boolean</span> <span class=\\\"hljs-title function_\\\">shouldParkAfterFailedAcquire</span><span class=\\\"hljs-params\\\">(Node pred, Node node)</span> {\\n    <span class=\\\"hljs-type\\\">int</span> <span class=\\\"hljs-variable\\\">ws</span> <span class=\\\"hljs-operator\\\">=</span> pred.waitStatus;\\n    <span class=\\\"hljs-keyword\\\">if</span> (ws == Node.SIGNAL)\\n        <span class=\\\"hljs-comment\\\">/*\\n         * This node has already set status asking a release\\n         * to signal it, so it can safely park.\\n         */</span>\\n        <span class=\\\"hljs-keyword\\\">return</span> <span class=\\\"hljs-literal\\\">true</span>;\\n    <span class=\\\"hljs-keyword\\\">if</span> (ws &gt; <span class=\\\"hljs-number\\\">0</span>) {\\n        <span class=\\\"hljs-comment\\\">/*\\n         * Predecessor was cancelled. Skip over predecessors and\\n         * indicate retry.\\n         */</span>\\n        <span class=\\\"hljs-keyword\\\">do</span> {\\n            node.prev = pred = pred.prev;\\n        } <span class=\\\"hljs-keyword\\\">while</span> (pred.waitStatus &gt; <span class=\\\"hljs-number\\\">0</span>);\\n        pred.next = node;\\n    } <span class=\\\"hljs-keyword\\\">else</span> {\\n        <span class=\\\"hljs-comment\\\">/*\\n         * waitStatus must be 0 or PROPAGATE.  Indicate that we\\n         * need a signal, but don&#x27;t park yet.  Caller will need to\\n         * retry to make sure it cannot acquire before parking.\\n         */</span>\\n        compareAndSetWaitStatus(pred, ws, Node.SIGNAL);\\n    }\\n    <span class=\\\"hljs-keyword\\\">return</span> <span class=\\\"hljs-literal\\\">false</span>;\\n}\\n</code></pre>\\n<ul>\\n<li><p>如果已经设置过状态，并且状态是处于SIGNAL中的话，则返回true</p>\\n</li>\\n<li><p>如果最开始的结构是<code>new Node()--&gt;当前入队结点</code>的话，入队结点的前驱<code>new Node()</code>的waitStatus是0，这时候走line: 33，然后返回false接着继续死循环</p>\\n<blockquote>\\n<p>但是这里比较关键，第二次再到这里的时候，pred的waitStatus已经是SIGNAL了，所以这趟出去之后会返回true，线程会park掉，除非被中断或者被前驱unpark</p>\\n</blockquote>\\n</li>\\n<li><p>如果前驱的状态大于零，意味着这个前驱已经被cancel掉了，所以在line:23-26的时候做出的处理是断开这些前驱的引用，一直到找到一个没有被cancel了的前驱为止，然后返回false；</p>\\n</li>\\n</ul>\\n</li>\\n<li><p>如果<code>shouldParkAfterFailedAcquire</code>返回true，则意味着<strong>当前入队结点</strong>的线程应该被<strong>“park（停置）”</strong>掉，所以进入<code>parkAndCheckInterrupt</code>方法，这个方法暂停线程并且返回线程的中断标志；这个中断标志的返回关系到最开始的<code>acquireQueued</code>方法是否会返回true，并且调用<code>selfInterrupted</code>方法</p>\\n</li>\\n</ul>\\n<p>简单来说，<code>aquireQueued</code>方法让入队的线程进入一个自旋过程，我们可以展开一下它的结构与过程：</p>\\n<pre class=\\\"nhi\\\">\\n                                     node.prev=head & tryAcquire(arg)\\n         AQS       might get sync state             /\\n    -------------         /      ┌------v       ┌------v       ┌------v\\n    |           |       Node     |     Node     |     Node     |     Node\\n    |  { head }-|----&gt;{ prev }&lt;--|---{-prev }&lt;--|---{-prev }&lt;--|---{-prev }\\n    |           |     { next-}---|--&gt;{ next-}---|--&gt;{ next-}---|--&gt;{ next }\\n    |  { tail }-|----------------|------|-------|------|-------|------^\\n    |           |                └------┘       └------┘       └------┘\\n    -------------\\n注意：并不是所有结点都在无时无刻地自旋当中，结点在第二次for循环中，就都是处于park状态，\\n     因为一次for循环中的shouldParkAfterFailedAcquire就已经把前驱设置为SIGNAL了，\\n     直到第二个结点称为新的头节点，并且unpark原来的第三个结点，以此...\\n</pre>\\n\\n<p>如结构里展示的一样，除了获取到同步状态的头节点之外，后面的结点都在排队park中，这个结论我已经debug过了，确实是这样的，<strong>这样看来，排队中的各个结点线程它们之间获取锁的顺序，是“公平的”</strong>，</p>\\n<p>最后，给出独占锁<code>acquire</code>方法的流程图：</p>\\n<pre><code class=\\\"hljs language-flow\\\">st=&gt;start: start\\ngetsycn=&gt;condition: 获取同步状态\\ngennode=&gt;operation: 生成入队结点\\naddwaiter=&gt;operation: 加入同步队列尾部(CAS)\\npreishead=&gt;condition: 前驱是头节点\\ngetsycn2=&gt;condition: 获取同步状态\\ntwait=&gt;operation: 线程进入等待状态\\nbehead=&gt;operation: 当前结点设置为头节点\\nexit=&gt;operation: 退出\\ne=&gt;end: end\\n\\nst-&gt;getsycn\\ngetsycn(yes)-&gt;exit\\ngetsycn(no)-&gt;gennode\\ngennode-&gt;addwaiter\\naddwaiter-&gt;preishead\\npreishead(yes)-&gt;getsycn2\\npreishead(no)-&gt;twait\\ngetsycn2(no)-&gt;twait\\ntwait(right)-&gt;preishead\\ngetsycn2(yes)-&gt;behead\\nbehead(left)-&gt;exit(right)\\nexit-&gt;e\\n</code></pre>\\n<p><em>流程图可以知道里的线条还需要注意一个，‘线程进入等待状态’到‘前驱是头节点’这里，意义是：线程被中断或者前驱结点被释放</em></p>\\n<h5 id=\\\"release\\\">release</h5>\\n<pre><code class=\\\"hljs language-java\\\"><span class=\\\"hljs-keyword\\\">public</span> <span class=\\\"hljs-keyword\\\">final</span> <span class=\\\"hljs-type\\\">boolean</span> <span class=\\\"hljs-title function_\\\">release</span><span class=\\\"hljs-params\\\">(<span class=\\\"hljs-type\\\">int</span> arg)</span> {\\n    <span class=\\\"hljs-keyword\\\">if</span> (tryRelease(arg)) {\\n        <span class=\\\"hljs-type\\\">Node</span> <span class=\\\"hljs-variable\\\">h</span> <span class=\\\"hljs-operator\\\">=</span> head;\\n        <span class=\\\"hljs-keyword\\\">if</span> (h != <span class=\\\"hljs-literal\\\">null</span> && h.waitStatus != <span class=\\\"hljs-number\\\">0</span>)\\n            unparkSuccessor(h);\\n        <span class=\\\"hljs-keyword\\\">return</span> <span class=\\\"hljs-literal\\\">true</span>;\\n    }\\n    <span class=\\\"hljs-keyword\\\">return</span> <span class=\\\"hljs-literal\\\">false</span>;\\n}\\n</code></pre>\\n<p>方法执行的时候，会唤醒头节点的后继结点，然后在自旋中的后继结点会有机会获取到同步状态，然后进行上面的流程图；</p>\\n<h4 id=\\\"shared-acquire--release\\\">Shared acquire & release</h4>\\n<p>共享式的源码阅读真是<strong>一道大坎</strong>，网上的要么没说到重点，要么一通胡说，而且网上的版本大多都是1.7的，虽然相较1.8，也仅仅在<code>setHeadAndPropagate</code>中某处多了2个condition，但就是这个方法都没人能搞清楚到底<strong>“propagate”</strong>的含义是什么，甚至我觉得1.8多的那2个condition是用来迫不得已去修1.7时留下来的bug才加上去的，<em>Daug Lea</em>前辈的思想确实精巧高深</p>\\n<h5 id=\\\"tryacquireshared\\\">tryAcquireShared</h5>\\n<p>分析<code>acquireShared</code>之前，我们首先分析一下<code>tryAcquireShared</code>方法，这个方法的返回值对前者影响非常大，关键是注释：</p>\\n<p>这是第一段：</p>\\n<pre><code>* Attempts to acquire in shared mode. This method should query if\\n* the state of the object permits it to be acquired in the shared\\n* mode, and if so to acquire it.\\n*\\n* This method is always invoked by the thread performing\\n* acquire.\\n* If this method reports failure, the acquire method\\n* may queue the thread, if it is not already queued, until it is\\n* signalled by a release from some other thread.\\n</code></pre>\\n<blockquote>\\n<p>这个方法尝试在共享模式下获取同步状态，方法应该在同步器支持共享模式的情况下才能被使用</p>\\n<p>方法应该在线程请求获取同步状态的时候（即call<code>acquire</code>）被调用</p>\\n<p>如果方法返回错误，那么<code>acquire</code>方法会让线程进入同步队列</p>\\n</blockquote>\\n<p>第二段是关于参数和返回值</p>\\n<pre><code>* @param arg the acquire argument. This value is always the one\\n*        passed to an acquire method, or is the value saved on entry\\n*        to a condition wait.  The value is otherwise uninterpreted\\n*        and can represent anything you like.\\n* @return a negative value on failure; zero if acquisition in shared\\n*         mode succeeded but no subsequent shared-mode acquire can\\n*         succeed; and a positive value if acquisition in shared\\n*         mode succeeded and subsequent shared-mode acquires might\\n*         also succeed, in which case a subsequent waiting thread\\n*         must check availability. (Support for three different\\n*         return values enables this method to be used in contexts\\n*         where acquires only sometimes act exclusively.)  Upon\\n*         success, this object has been acquired.\\n</code></pre>\\n<blockquote>\\n<p><strong>参数arg：</strong>这个值也许是1，或者是保存在condition（某个地方- -）的一个值，或者你可以设置为任意你喜欢的值</p>\\n<p><strong>返回值：</strong></p>\\n<ul>\\n<li>如果获取失败了的话，就返回复数</li>\\n<li>在共享模式下获取成功，但是后继的共享模式获取同步状态没有成功（很迷吧？），返回0</li>\\n<li>共享模式下获取成功，后期的共享模式也获取成功，返回正数</li>\\n</ul>\\n<p>这里说支持3种情况，但是老爷子自己在写的时候也没太多想，实际上运用当作一般只支持负数代表不成功，非负数代表成功，所以和boolean没什么区别- -</p>\\n</blockquote>\\n<h5 id=\\\"acquireshared\\\">acquireShared</h5>\\n<pre><code class=\\\"hljs language-java\\\"><span class=\\\"hljs-keyword\\\">public</span> <span class=\\\"hljs-keyword\\\">final</span> <span class=\\\"hljs-keyword\\\">void</span> <span class=\\\"hljs-title function_\\\">acquireShared</span><span class=\\\"hljs-params\\\">(<span class=\\\"hljs-type\\\">int</span> arg)</span> {\\n    <span class=\\\"hljs-keyword\\\">if</span> (tryAcquireShared(arg) &lt; <span class=\\\"hljs-number\\\">0</span>)\\n        doAcquireShared(arg);\\n}\\n\\n<span class=\\\"hljs-keyword\\\">private</span> <span class=\\\"hljs-keyword\\\">void</span> <span class=\\\"hljs-title function_\\\">doAcquireShared</span><span class=\\\"hljs-params\\\">(<span class=\\\"hljs-type\\\">int</span> arg)</span> {\\n    <span class=\\\"hljs-keyword\\\">final</span> <span class=\\\"hljs-type\\\">Node</span> <span class=\\\"hljs-variable\\\">node</span> <span class=\\\"hljs-operator\\\">=</span> addWaiter(Node.SHARED);\\n    <span class=\\\"hljs-type\\\">boolean</span> <span class=\\\"hljs-variable\\\">failed</span> <span class=\\\"hljs-operator\\\">=</span> <span class=\\\"hljs-literal\\\">true</span>;\\n    <span class=\\\"hljs-keyword\\\">try</span> {\\n        <span class=\\\"hljs-type\\\">boolean</span> <span class=\\\"hljs-variable\\\">interrupted</span> <span class=\\\"hljs-operator\\\">=</span> <span class=\\\"hljs-literal\\\">false</span>;\\n        <span class=\\\"hljs-keyword\\\">for</span> (;;) {\\n            <span class=\\\"hljs-keyword\\\">final</span> <span class=\\\"hljs-type\\\">Node</span> <span class=\\\"hljs-variable\\\">p</span> <span class=\\\"hljs-operator\\\">=</span> node.predecessor();\\n            <span class=\\\"hljs-keyword\\\">if</span> (p == head) {\\n                <span class=\\\"hljs-type\\\">int</span> <span class=\\\"hljs-variable\\\">r</span> <span class=\\\"hljs-operator\\\">=</span> tryAcquireShared(arg);\\n                <span class=\\\"hljs-keyword\\\">if</span> (r &gt;= <span class=\\\"hljs-number\\\">0</span>) {    <span class=\\\"hljs-comment\\\">// 这里就是，非负数就是代表成功了</span>\\n                    setHeadAndPropagate(node, r);\\n                    p.next = <span class=\\\"hljs-literal\\\">null</span>; <span class=\\\"hljs-comment\\\">// help GC</span>\\n                    <span class=\\\"hljs-keyword\\\">if</span> (interrupted)\\n                        selfInterrupt();\\n                    failed = <span class=\\\"hljs-literal\\\">false</span>;\\n                    <span class=\\\"hljs-keyword\\\">return</span>;\\n                }\\n            }\\n            <span class=\\\"hljs-keyword\\\">if</span> (shouldParkAfterFailedAcquire(p, node) &&\\n                parkAndCheckInterrupt())\\n                interrupted = <span class=\\\"hljs-literal\\\">true</span>;\\n        }\\n    } <span class=\\\"hljs-keyword\\\">finally</span> {\\n        <span class=\\\"hljs-keyword\\\">if</span> (failed)\\n            cancelAcquire(node);\\n    }\\n}\\n</code></pre>\\n<p>首先<code>addWaiter</code>，添加的是SHARED模式的结点，这种结点的mode对象是一个<code>new Node</code></p>\\n<p>一直到line: 25，进入自旋阶段：</p>\\n<ol>\\n<li><p>如果前驱是head，则try一次同步状态：</p>\\n<ol>\\n<li><p>如果try到了<code>arg</code>个同步状态，那么就设置这个刚刚获取同步状态成功的结点为，head并且<strong>“Propagate”</strong>：</p>\\n<pre><code class=\\\"hljs language-java\\\"><span class=\\\"hljs-keyword\\\">private</span> <span class=\\\"hljs-keyword\\\">void</span> <span class=\\\"hljs-title function_\\\">setHeadAndPropagate</span><span class=\\\"hljs-params\\\">(Node node, <span class=\\\"hljs-type\\\">int</span> propagate)</span> {\\n    <span class=\\\"hljs-type\\\">Node</span> <span class=\\\"hljs-variable\\\">h</span> <span class=\\\"hljs-operator\\\">=</span> head; <span class=\\\"hljs-comment\\\">// Record old head for check below</span>\\n    setHead(node);\\n    <span class=\\\"hljs-comment\\\">/*\\n     * Try to signal next queued node if:\\n     *   Propagation was indicated by caller,\\n     *     or was recorded (as h.waitStatus either before\\n     *     or after setHead) by a previous operation\\n     *     (note: this uses sign-check of waitStatus because\\n     *      PROPAGATE status may transition to SIGNAL.)\\n     * and\\n     *   The next node is waiting in shared mode,\\n     *     or we don&#x27;t know, because it appears null\\n     *\\n     * The conservatism in both of these checks may cause\\n     * unnecessary wake-ups, but only when there are multiple\\n     * racing acquires/releases, so most need signals now or soon\\n     * anyway.\\n     */</span>\\n    <span class=\\\"hljs-keyword\\\">if</span> (propagate &gt; <span class=\\\"hljs-number\\\">0</span> || h == <span class=\\\"hljs-literal\\\">null</span> || h.waitStatus &lt; <span class=\\\"hljs-number\\\">0</span> ||\\n        (h = head) == <span class=\\\"hljs-literal\\\">null</span> || h.waitStatus &lt; <span class=\\\"hljs-number\\\">0</span>) {\\n        <span class=\\\"hljs-type\\\">Node</span> <span class=\\\"hljs-variable\\\">s</span> <span class=\\\"hljs-operator\\\">=</span> node.next;\\n        <span class=\\\"hljs-keyword\\\">if</span> (s == <span class=\\\"hljs-literal\\\">null</span> || s.isShared())\\n            doReleaseShared();\\n    }\\n}\\n</code></pre>\\n<p> 这段其实也很迷，首先用<code>h</code>记录旧头，然后设置新头，如果说</p>\\n<ul>\\n<li>上一步的<code>tryAcquireShared</code>拿到了1以上的同步状态的话</li>\\n<li>旧头是null的话</li>\\n<li>旧头的<code>waitStatus</code>是SIGNAL/CONDITION/PROPAGATE的话</li>\\n<li><code>(h = head) == null</code>这段更不知所云，变成新头了之后，新头还能为null嘛？</li>\\n<li>新头<code>waitStatus</code>是SIGNAL/CONDITION/PROPAGATE的话</li>\\n</ul>\\n<p> 后面2个条件是1.8新加的，1.7没有这样的，但是真的不是很懂为什么会判断后面2个条件，也许是为了处理并发，如果是这样的话，那我越发觉得shared这段的代码写的很不严谨了，应该有直接的方法去处理shared锁的</p>\\n<p> anyway，总之如果说满足上面的条件的话，代表着这个时候应该从队中<code>doReleaseShared</code>结点了，</p>\\n<pre><code class=\\\"hljs language-java\\\"><span class=\\\"hljs-comment\\\">/**\\n * Release action for shared mode -- signals successor and ensures\\n * propagation. (Note: For exclusive mode, release just amounts\\n * to calling unparkSuccessor of head if it needs signal.)\\n */</span>\\n<span class=\\\"hljs-keyword\\\">private</span> <span class=\\\"hljs-keyword\\\">void</span> <span class=\\\"hljs-title function_\\\">doReleaseShared</span><span class=\\\"hljs-params\\\">()</span> {\\n    <span class=\\\"hljs-comment\\\">/*\\n     * Ensure that a release propagates, even if there are other\\n     * in-progress acquires/releases.  This proceeds in the usual\\n     * way of trying to unparkSuccessor of head if it needs\\n     * signal. But if it does not, status is set to PROPAGATE to\\n     * ensure that upon release, propagation continues.\\n     * Additionally, we must loop in case a new node is added\\n     * while we are doing this. Also, unlike other uses of\\n     * unparkSuccessor, we need to know if CAS to reset status\\n     * fails, if so rechecking.\\n     */</span>\\n    <span class=\\\"hljs-keyword\\\">for</span> (;;) {\\n        <span class=\\\"hljs-type\\\">Node</span> <span class=\\\"hljs-variable\\\">h</span> <span class=\\\"hljs-operator\\\">=</span> head;\\n        <span class=\\\"hljs-keyword\\\">if</span> (h != <span class=\\\"hljs-literal\\\">null</span> && h != tail) {\\n            <span class=\\\"hljs-type\\\">int</span> <span class=\\\"hljs-variable\\\">ws</span> <span class=\\\"hljs-operator\\\">=</span> h.waitStatus;\\n            <span class=\\\"hljs-keyword\\\">if</span> (ws == Node.SIGNAL) {\\n                <span class=\\\"hljs-keyword\\\">if</span> (!compareAndSetWaitStatus(h, Node.SIGNAL, <span class=\\\"hljs-number\\\">0</span>))\\n                    <span class=\\\"hljs-keyword\\\">continue</span>;            <span class=\\\"hljs-comment\\\">// loop to recheck cases</span>\\n                unparkSuccessor(h);\\n            }\\n            <span class=\\\"hljs-keyword\\\">else</span> <span class=\\\"hljs-keyword\\\">if</span> (ws == <span class=\\\"hljs-number\\\">0</span> &&\\n                     !compareAndSetWaitStatus(h, <span class=\\\"hljs-number\\\">0</span>, Node.PROPAGATE))\\n                <span class=\\\"hljs-keyword\\\">continue</span>;                <span class=\\\"hljs-comment\\\">// loop on failed CAS</span>\\n        }\\n        <span class=\\\"hljs-keyword\\\">if</span> (h == head)                   <span class=\\\"hljs-comment\\\">// loop if head changed</span>\\n            <span class=\\\"hljs-keyword\\\">break</span>;\\n    }\\n}\\n</code></pre>\\n<p> 这个<code>doReleaseShared</code>的含义是：头结点的后继结点或许已经park了，这时候我们需要unpark它，让这个后继<strong>重新开始死循环以尝试获取同步状态</strong>因，为<strong>在park状态的无法回到自旋中尝试继续获取同步状态的！！！</strong>这些结点也许是SHARED模式的，但是它们必须被unpark之后，重新开始自旋之后，才能够尝试获取新的同步状态！</p>\\n<p> <strong><code>acquireShared/setHeadAndPropagate/doReleaseShared</code>这三个方法加一起这才是Propagate的含义</strong></p>\\n<blockquote>\\n<p>同一时间有3个同步状态被释放，队列中有A、B、C三个共享结点被park掉，A的前驱最后释放的时候，会unparkA结点，当A获取到了同步状态的时候，A经过<code>acquireShared</code>，进入<code>setHeadAndPropagate</code>，将A设置为head，然后验证B是shared模式了之后，进入<code>doReleaseShared</code>，这时候在A结点线程中通过死循环的方式最终unparkB，A返回到线程继续作业；</p>\\n<p>于是B又尝试获取同步状态，然后将自己设置为头，然后验证C是shared了之后，然后死循环unparkC，以此类推....</p>\\n<p>这也是和独占不一样的地方，独占每次只需要unpark头结点的后继就行了，共享是尽可能地从队伍开始，往后unpark更多的SHARED结点！</p>\\n</blockquote>\\n<p> 此外，这个方法还有另外一层含义，这个下面马上说到</p>\\n</li>\\n</ol>\\n</li>\\n<li><p>如果不是head，则应该park当前线程，直到被前驱唤醒</p>\\n</li>\\n</ol>\\n<h5 id=\\\"releaseshared\\\">releaseShared</h5>\\n<pre><code class=\\\"hljs language-java\\\"><span class=\\\"hljs-keyword\\\">public</span> <span class=\\\"hljs-keyword\\\">final</span> <span class=\\\"hljs-type\\\">boolean</span> <span class=\\\"hljs-title function_\\\">releaseShared</span><span class=\\\"hljs-params\\\">(<span class=\\\"hljs-type\\\">int</span> arg)</span> {\\n    <span class=\\\"hljs-keyword\\\">if</span> (tryReleaseShared(arg)) {\\n        doReleaseShared();\\n        <span class=\\\"hljs-keyword\\\">return</span> <span class=\\\"hljs-literal\\\">true</span>;\\n    }\\n    <span class=\\\"hljs-keyword\\\">return</span> <span class=\\\"hljs-literal\\\">false</span>;\\n}\\n</code></pre>\\n<p><code>doReleaseShared</code>在这里体现出的含义是：确保同步状态被<strong>线程安全地释放（归还）</strong>，可以看到，方法内部通过CAS加循环的方式做这个确保，因为释放操作会同时来自多个线程</p>\\n<h3 id=\\\"conclusion\\\">Conclusion</h3>\\n<p>这篇应该是字数最多的blog了，分析了很很久时间，花费的精力也比较多，老爷子总是在高层次的地方设计逻辑，如果不多处一起看代码，估计很难理解逻辑设计的用意</p>\\n<p>特别是有的时候，即使是畅销书都不太会和你分析深一些的道理和结构逻辑，比如share部分就没太分析，网上也有许多同行尝试进行分析，但是也没讲出<strong>Propagate</strong>的真正含义</p>\\n<hr>\\n\";","export default \"<h3 id=\\\"introduction\\\">Introduction</h3>\\n<p>At the part of &quot;Container&quot;, we&#39;ve know we can define a <code>docker-compose.yaml</code> to deploy a service on our swarm so it can run on multiple machine.</p>\\n<p>As we practice before, our service just contains one container: a python app that provide web service with Flask.</p>\\n<p>But did you remember that sentence ? <strong>Services are really just &quot;Containers in Production&quot;</strong></p>\\n<p>So we can define multiple containers in one service !!! Sounds nice isn&#39;t it ?</p>\\n<p>This is what they call <strong>&quot;a Stack&quot;</strong>, and that sounds very confused.</p>\\n<h3 id=\\\"stack\\\">Stack</h3>\\n<p>A stack is a group of interrelated services that share dependencies, and can be orchestrated and scaled together.</p>\\n<p>A single stack is capable of defining and coordinating the functionality of an entire application (though very complex applications may want to use multiple stacks).</p>\\n<p>We&#39;ve been technically work with stack while we deploy a Composefile with <code>docker stack deploy</code>. But that was a single service stack running on a single host, which is not usually what takes place in production. Here, you can take what you’ve learned, make multiple services relate to each other, and run them on multiple machines.</p>\\n<blockquote>\\n<p>Now we should build up a main concept for this:</p>\\n<ol>\\n<li>one service mapping one containers</li>\\n<li>one stack including multiple servcices</li>\\n<li>one stack can running at multiple machines</li>\\n</ol>\\n</blockquote>\\n<ol>\\n<li><p>composefile</p>\\n<pre><code class=\\\"hljs language-yaml\\\"><span class=\\\"hljs-attr\\\">version:</span> <span class=\\\"hljs-string\\\">&quot;3&quot;</span>\\n<span class=\\\"hljs-attr\\\">services:</span>\\n  <span class=\\\"hljs-attr\\\">web:</span>\\n    <span class=\\\"hljs-comment\\\"># replace username/repo:tag with your name and image details</span>\\n    <span class=\\\"hljs-attr\\\">image:</span> <span class=\\\"hljs-string\\\">youyinnn/getstarted:tag1</span>\\n    <span class=\\\"hljs-attr\\\">deploy:</span>\\n      <span class=\\\"hljs-attr\\\">replicas:</span> <span class=\\\"hljs-number\\\">3</span>\\n      <span class=\\\"hljs-attr\\\">restart_policy:</span>\\n        <span class=\\\"hljs-attr\\\">condition:</span> <span class=\\\"hljs-string\\\">on-failure</span>\\n      <span class=\\\"hljs-attr\\\">resources:</span>\\n        <span class=\\\"hljs-attr\\\">limits:</span>\\n          <span class=\\\"hljs-attr\\\">cpus:</span> <span class=\\\"hljs-string\\\">&quot;0.1&quot;</span>\\n          <span class=\\\"hljs-attr\\\">memory:</span> <span class=\\\"hljs-string\\\">50M</span>\\n    <span class=\\\"hljs-attr\\\">ports:</span>\\n      <span class=\\\"hljs-bullet\\\">-</span> <span class=\\\"hljs-string\\\">&quot;4000:80&quot;</span>\\n    <span class=\\\"hljs-attr\\\">networks:</span>\\n      <span class=\\\"hljs-bullet\\\">-</span> <span class=\\\"hljs-string\\\">webnet</span>\\n  <span class=\\\"hljs-attr\\\">visualizer:</span>\\n    <span class=\\\"hljs-attr\\\">image:</span> <span class=\\\"hljs-string\\\">dockersamples/visualizer:stable</span>\\n    <span class=\\\"hljs-attr\\\">ports:</span>\\n      <span class=\\\"hljs-bullet\\\">-</span> <span class=\\\"hljs-string\\\">&quot;5000:8080&quot;</span>\\n    <span class=\\\"hljs-attr\\\">volumes:</span>\\n      <span class=\\\"hljs-bullet\\\">-</span> <span class=\\\"hljs-string\\\">&quot;/var/run/docker.sock:/var/run/docker.sock&quot;</span>\\n    <span class=\\\"hljs-attr\\\">deploy:</span>\\n      <span class=\\\"hljs-attr\\\">placement:</span>\\n        <span class=\\\"hljs-attr\\\">constraints:</span> [<span class=\\\"hljs-string\\\">node.role</span> <span class=\\\"hljs-string\\\">==</span> <span class=\\\"hljs-string\\\">manager</span>]\\n    <span class=\\\"hljs-attr\\\">networks:</span>\\n      <span class=\\\"hljs-bullet\\\">-</span> <span class=\\\"hljs-string\\\">webnet</span>\\n<span class=\\\"hljs-attr\\\">networks:</span>\\n  <span class=\\\"hljs-attr\\\">webnet:</span>\\n</code></pre>\\n<p>The only thing new here is the peer service to <code>web</code>, named <code>visualizer</code>. Notice two new things here: a <code>volumes</code> key, giving the visualizer access to the host’s socket file for Docker, and a <code>placement</code> key, ensuring that this service only ever runs on a swarm manager -- never a worker. That’s because this container, built from <a href=\\\"https://github.com/ManoMarks/docker-swarm-visualizer\\\">an open source project created by Docker</a>, displays Docker services running on a swarm in a diagram.</p>\\n<p>We talk more about placement constraints and volumes in a moment.</p>\\n</li>\\n<li><p>Re-run the <code>docker stack deploy</code> command on the manager, and whatever services need updating are updated</p>\\n<p>As we just got a cloud server, so we can just simply deploy our stack on one machine and continue the learning.</p>\\n<pre><code class=\\\"hljs language-bash\\\"><span class=\\\"hljs-comment\\\"># make sure you&#x27;ve run `docker swarm init`</span>\\n$ docker stack deploy -c docker-compose.yml getstartedlab\\nUpdating service getstartedlab_web (<span class=\\\"hljs-built_in\\\">id</span>: angi1bf5e4to03qu9f93trnxm)\\nCreating service getstartedlab_visualizer (<span class=\\\"hljs-built_in\\\">id</span>: l9mnwkeq2jiononb5ihz9u7a4)\\n</code></pre>\\n</li>\\n<li><p>Check stack&#39;s status</p>\\n<pre><code class=\\\"hljs language-bash\\\">$ docker stack ps getstartedlab\\nID                  NAME                         IMAGE                             NODE                DESIRED STATE       CURRENT STATE            ERROR               PORTS\\nxixa1lh6topy        getstartedlab_web.1          youyinnn/getstarted:tag1          VM_16_214_centos    Running             Running 28 minutes ago\\nupz5s23iduz6        getstartedlab_visualizer.1   dockersamples/visualizer:stable   VM_16_214_centos    Running             Running 28 minutes ago\\nkr8sdm9g4qnl        getstartedlab_web.2          youyinnn/getstarted:tag1          VM_16_214_centos    Running             Running 28 minutes ago\\n</code></pre>\\n</li>\\n<li><p>Take a look at the <code>visualizer</code></p>\\n<p><img src=\\\"../../../public/img/20181129222014.png\\\" alt=\\\"\\\"></p>\\n<p>and you can also visit the port:4000 to visit the Flask web app.</p>\\n</li>\\n</ol>\\n<h3 id=\\\"a-preview-of-persist-data-from-docker-container-to-host\\\">A preview of persist data from docker container to host</h3>\\n<p>There still a section about <strong>&quot;Persist data&quot;</strong> on offical doc, it show us how to create a redis service and presist data from container&#39;s inside filesystem to host filesystem. We will just take a look for the compose file and explain it&#39;s usage.</p>\\n<pre><code class=\\\"hljs language-yaml\\\"><span class=\\\"hljs-attr\\\">version:</span> <span class=\\\"hljs-string\\\">&quot;3&quot;</span>\\n<span class=\\\"hljs-attr\\\">services:</span>\\n  <span class=\\\"hljs-attr\\\">web:</span>\\n    <span class=\\\"hljs-comment\\\"># ...</span>\\n  <span class=\\\"hljs-attr\\\">visualizer:</span>\\n    <span class=\\\"hljs-comment\\\"># ...</span>\\n  <span class=\\\"hljs-attr\\\">redis:</span>\\n    <span class=\\\"hljs-attr\\\">image:</span> <span class=\\\"hljs-string\\\">redis</span>\\n    <span class=\\\"hljs-attr\\\">ports:</span>\\n      <span class=\\\"hljs-bullet\\\">-</span> <span class=\\\"hljs-string\\\">&quot;6379:6379&quot;</span>\\n    <span class=\\\"hljs-attr\\\">volumes:</span>\\n      <span class=\\\"hljs-bullet\\\">-</span> <span class=\\\"hljs-string\\\">&quot;/home/docker/data:/data&quot;</span>\\n    <span class=\\\"hljs-attr\\\">deploy:</span>\\n      <span class=\\\"hljs-attr\\\">placement:</span>\\n        <span class=\\\"hljs-attr\\\">constraints:</span> [<span class=\\\"hljs-string\\\">node.role</span> <span class=\\\"hljs-string\\\">==</span> <span class=\\\"hljs-string\\\">manager</span>]\\n    <span class=\\\"hljs-attr\\\">command:</span> <span class=\\\"hljs-string\\\">redis-server</span> <span class=\\\"hljs-string\\\">--appendonly</span> <span class=\\\"hljs-literal\\\">yes</span>\\n    <span class=\\\"hljs-attr\\\">networks:</span>\\n      <span class=\\\"hljs-bullet\\\">-</span> <span class=\\\"hljs-string\\\">webnet</span>\\n<span class=\\\"hljs-attr\\\">networks:</span>\\n  <span class=\\\"hljs-attr\\\">webnet:</span>\\n</code></pre>\\n<p>Redis has an official image in the Docker library and has been granted the short <code>image</code> name of just <code>redis</code>, so no <code>username/repo</code> notation here.</p>\\n<p><strong>The Redis port, 6379, has been pre-configured by Redis</strong> to be exposed from the container to the host, and here in our Compose file we expose it from the host to the world, so you can actually enter the IP for any of your nodes into Redis Desktop Manager and manage this Redis instance, if you so choose.</p>\\n<p><strong>Most importantly</strong>, there are a couple of things in the <code>redis</code> specification that make data persist between deployments of this stack:</p>\\n<ul>\\n<li><code>redis</code> always runs on the manager, so it’s always using the same filesystem.</li>\\n<li><code>redis</code> accesses an arbitrary directory in the host’s file system as <code>/data</code> inside the container, which is where Redis stores data.</li>\\n</ul>\\n<p>Together, this is creating a <strong>“source of truth”</strong> in your host’s physical filesystem for the Redis data. Without this, Redis would store its data in <code>/data</code> inside the container’s filesystem, which would get wiped out if that container were ever redeployed.</p>\\n<p>This source of truth has two components:</p>\\n<ul>\\n<li><p>The <strong>placement</strong> constraint you put on the Redis service, ensuring that it always uses the same host.</p>\\n</li>\\n<li><p>The <strong>volume</strong> you created that lets the container access <code>./data</code> (on the host) as <code>/data</code> (inside the Redis container). While containers come and go, the files stored on <code>./data</code> on the specified host persists, enabling continuity.</p>\\n<blockquote>\\n<p>In other words, anything you write to redis will stored on <code>/home/docker/data</code> on your host.</p>\\n</blockquote>\\n</li>\\n</ul>\\n<p>You are ready to deploy your new Redis-using stack.</p>\\n\";","export default \"<h3 id=\\\"introduction\\\">Introduction</h3>\\n<p>本篇主要介绍Docker里面Containers的概念，以及它的定义</p>\\n<p>还有就是如何分享你创建的Containers到hub上面</p>\\n<p>需要注意的是，containers的定义其实就是image的定义</p>\\n<p>以及说到了docker run了两个option<code>-p</code>和<code>-d</code></p>\\n<h3 id=\\\"define-a-container-with-dockerfile\\\">Define a container with Dockerfile</h3>\\n<p><code>Dockerfile</code> defines what goes on in the environment inside your container. Access to resources like networking interfaces and disk drives is virtualized inside this environment, which is isolated from the rest of your system, so you need to map ports to the outside world, and be specific about what files you want to “copy in” to that environment. However, after doing that, you can expect that the build of your app defined in this <code>Dockerfile</code> behaves exactly the same wherever it runs.</p>\\n<h4 id=\\\"dockerfile\\\">Dockerfile</h4>\\n<p>Create an empty directory. Change directories (<code>cd</code>) into the new directory, create a file called <code>Dockerfile</code>, copy-and-paste the following content into that file, and save it. Take note of the comments that explain each statement in your new Dockerfile.</p>\\n<pre><code class=\\\"hljs language-dockerfile\\\"><span class=\\\"hljs-comment\\\"># Use an official Python runtime as a parent image</span>\\n<span class=\\\"hljs-keyword\\\">FROM</span> python:<span class=\\\"hljs-number\\\">2.7</span>-slim\\n\\n<span class=\\\"hljs-comment\\\"># Set the working directory to /app</span>\\n<span class=\\\"hljs-keyword\\\">WORKDIR</span><span class=\\\"language-bash\\\"> /app</span>\\n\\n<span class=\\\"hljs-comment\\\"># Copy the current directory contents into the container at /app</span>\\n<span class=\\\"hljs-keyword\\\">COPY</span><span class=\\\"language-bash\\\"> . /app</span>\\n\\n<span class=\\\"hljs-comment\\\"># Install any needed packages specified in requirements.txt</span>\\n<span class=\\\"hljs-keyword\\\">RUN</span><span class=\\\"language-bash\\\"> pip install --trusted-host pypi.python.org -r requirements.txt</span>\\n\\n<span class=\\\"hljs-comment\\\"># Make port 80 available to the world outside this container</span>\\n<span class=\\\"hljs-keyword\\\">EXPOSE</span> <span class=\\\"hljs-number\\\">80</span>\\n\\n<span class=\\\"hljs-comment\\\"># Define environment variable</span>\\n<span class=\\\"hljs-keyword\\\">ENV</span> NAME World\\n\\n<span class=\\\"hljs-comment\\\"># Run app.py when the container launches</span>\\n<span class=\\\"hljs-keyword\\\">CMD</span><span class=\\\"language-bash\\\"> [<span class=\\\"hljs-string\\\">&quot;python&quot;</span>, <span class=\\\"hljs-string\\\">&quot;app.py&quot;</span>]</span>\\n</code></pre>\\n<p>This <code>Dockerfile</code> refers to a couple of files we haven’t created yet, namely <code>app.py</code> and <code>requirements.txt</code>. Let’s create those next.</p>\\n<h4 id=\\\"the-app-itself\\\">The App itself</h4>\\n<p>Create two more files, <code>requirements.txt</code> and <code>app.py</code>, and put them in the same folder with the <code>Dockerfile</code>. This completes our app, which as you can see is quite simple. When the above <code>Dockerfile</code> is built into an image, <code>app.py</code> and <code>requirements.txt</code> is present because of that <code>Dockerfile</code>’s <code>COPY</code> command, and the output from <code>app.py</code> is accessible over HTTP thanks to the <code>EXPOSE</code>command.</p>\\n<h5 id=\\\"requirementstxt\\\"><code>requirements.txt</code></h5>\\n<pre><code>Flask\\nRedis\\n</code></pre>\\n<h5 id=\\\"apppy\\\"><code>app.py</code></h5>\\n<pre><code class=\\\"hljs language-python\\\"><span class=\\\"hljs-keyword\\\">from</span> flask <span class=\\\"hljs-keyword\\\">import</span> Flask\\n<span class=\\\"hljs-keyword\\\">from</span> redis <span class=\\\"hljs-keyword\\\">import</span> Redis, RedisError\\n<span class=\\\"hljs-keyword\\\">import</span> os\\n<span class=\\\"hljs-keyword\\\">import</span> socket\\n\\n<span class=\\\"hljs-comment\\\"># Connect to Redis</span>\\nredis = Redis(host=<span class=\\\"hljs-string\\\">&quot;redis&quot;</span>, db=<span class=\\\"hljs-number\\\">0</span>, socket_connect_timeout=<span class=\\\"hljs-number\\\">2</span>, socket_timeout=<span class=\\\"hljs-number\\\">2</span>)\\n\\napp = Flask(__name__)\\n\\n<span class=\\\"hljs-meta\\\">@app.route(<span class=\\\"hljs-params\\\"><span class=\\\"hljs-string\\\">&quot;/&quot;</span></span>)</span>\\n<span class=\\\"hljs-keyword\\\">def</span> <span class=\\\"hljs-title function_\\\">hello</span>():\\n    <span class=\\\"hljs-keyword\\\">try</span>:\\n        visits = redis.incr(<span class=\\\"hljs-string\\\">&quot;counter&quot;</span>)\\n    <span class=\\\"hljs-keyword\\\">except</span> RedisError:\\n        visits = <span class=\\\"hljs-string\\\">&quot;&lt;i&gt;cannot connect to Redis, counter disabled&lt;/i&gt;&quot;</span>\\n\\n    html = <span class=\\\"hljs-string\\\">&quot;&lt;h3&gt;Hello {name}!&lt;/h3&gt;&quot;</span> \\\\\\n           <span class=\\\"hljs-string\\\">&quot;&lt;b&gt;Hostname:&lt;/b&gt; {hostname}&lt;br/&gt;&quot;</span> \\\\\\n           <span class=\\\"hljs-string\\\">&quot;&lt;b&gt;Visits:&lt;/b&gt; {visits}&quot;</span>\\n    <span class=\\\"hljs-keyword\\\">return</span> html.<span class=\\\"hljs-built_in\\\">format</span>(name=os.getenv(<span class=\\\"hljs-string\\\">&quot;NAME&quot;</span>, <span class=\\\"hljs-string\\\">&quot;world&quot;</span>), hostname=socket.gethostname(), visits=visits)\\n\\n<span class=\\\"hljs-keyword\\\">if</span> __name__ == <span class=\\\"hljs-string\\\">&quot;__main__&quot;</span>:\\n    app.run(host=<span class=\\\"hljs-string\\\">&#x27;0.0.0.0&#x27;</span>, port=<span class=\\\"hljs-number\\\">80</span>)\\n</code></pre>\\n<p>Now we see that <code>pip install -r requirements.txt</code> installs the Flask and Redis libraries for Python, and the app prints the environment variable <code>NAME</code>, as well as the output of a call to <code>socket.gethostname()</code>. Finally, because Redis isn’t running (as we’ve only installed the Python library, and not Redis itself), we should expect that the attempt to use it here fails and produces the error message.</p>\\n<blockquote>\\n<p><strong>Note</strong>: Accessing the name of the host when inside a container retrieves the container ID, which is like the process ID for a running executable.</p>\\n</blockquote>\\n<p>That’s it! You don’t need Python or anything in <code>requirements.txt</code> on your system, nor does building or running this image install them on your system. It doesn’t seem like you’ve really set up an environment with Python and Flask, but you have.</p>\\n<blockquote>\\n<p><strong>Notice</strong>: For quick start and practice, I didn&#39;t install the Redis library on my build.</p>\\n</blockquote>\\n<h4 id=\\\"build-the-app\\\">Build the app</h4>\\n<p>We are ready to build the app. Make sure you are still at the top level of your new directory. Here’s what <code>ls</code> should show:</p>\\n<pre><code class=\\\"hljs language-bash\\\">$ <span class=\\\"hljs-built_in\\\">ls</span>\\nDockerfile        app.py            requirements.txt\\n</code></pre>\\n<p>Now run the build command. This creates a Docker image, which we’re going to tag using <code>-t</code> so it has a friendly name.</p>\\n<pre><code class=\\\"hljs language-bash\\\">docker build -t hello-hj .\\n</code></pre>\\n<p>Where is your built image? It’s in your machine’s local Docker image registry:</p>\\n<pre><code class=\\\"hljs language-bash\\\">$ docker image <span class=\\\"hljs-built_in\\\">ls</span>\\n\\nREPOSITORY            TAG                 IMAGE ID\\nhello-hj             latest              326387cea398\\n</code></pre>\\n<h4 id=\\\"run-the-app\\\">Run the app</h4>\\n<h5 id=\\\"run-on-the-frontground\\\">run on the frontground</h5>\\n<p>Run the app, mapping your machine’s port 4000 to the container’s published port 80 using <code>-p</code>:</p>\\n<pre><code>docker run -p 4000:80 hello-hj\\n</code></pre>\\n<p>You should see a message that Python is serving your app at <code>http://0.0.0.0:80</code>. But that message is coming from inside the container, which doesn’t know you mapped port 80 of that container to 4000, making the correct URL <code>http://localhost:4000</code>.</p>\\n<p>Go to that URL in a web browser to see the display content served up on a web page.</p>\\n<h5 id=\\\"run-on-the-background\\\">run on the background</h5>\\n<p>Now let’s run the app in the background, in detached mode:</p>\\n<pre><code>docker run -d -p 4000:80 hello-hj\\n</code></pre>\\n<p>You get the long container ID for your app and then are kicked back to your terminal. Your container is running in the background. You can also see the abbreviated container ID with <code>docker container ls</code> (and both work interchangeably when running commands):</p>\\n<pre><code class=\\\"hljs language-bash\\\">$ docker container <span class=\\\"hljs-built_in\\\">ls</span>\\nCONTAINER ID        IMAGE               COMMAND             CREATED\\n1fa4ab2cf395        hello-hj       <span class=\\\"hljs-string\\\">&quot;python app.py&quot;</span>     28 seconds ago\\n</code></pre>\\n<p>Notice that <code>CONTAINER ID</code> matches what’s on <code>http://localhost:4000</code>.</p>\\n<h5 id=\\\"stop-an-container\\\">stop an container</h5>\\n<p>Now use <code>docker container stop</code> to end the process, using the <code>CONTAINER ID</code>, like so:</p>\\n<pre><code class=\\\"hljs language-bash\\\">docker container stop 1fa4ab2cf395\\n</code></pre>\\n<h3 id=\\\"share-your-image-to-the-hub\\\">Share your image to the hub</h3>\\n<h4 id=\\\"log-in-with-your-docker-id\\\">Log in with your Docker ID</h4>\\n<p>If you don’t have a Docker account, sign up for one at <a href=\\\"https://hub.docker.com/\\\">hub.docker.com</a>. Make note of your username.</p>\\n<p>Log in to the Docker public registry on your local machine.</p>\\n<pre><code class=\\\"hljs language-bash\\\">$ docker login\\n</code></pre>\\n<h4 id=\\\"tag-the-image\\\">Tag the image</h4>\\n<p>The notation for associating a local image with a repository on a registry is <code>username/repository:tag</code>. The tag is optional, but recommended, since it is the mechanism that registries use to give Docker images a version. Give the repository and tag meaningful names for the context, such as <code>get-started:part2</code>. This puts the image in the <code>get-started</code> repository and tag it as <code>part2</code>.</p>\\n<p>Now, put it all together to tag the image. Run <code>docker tag image</code> with your username, repository, and tag names so that the image uploads to your desired destination. The syntax of the command is:</p>\\n<pre><code class=\\\"hljs language-bash\\\">docker tag image username/repository:tag\\n</code></pre>\\n<p>For example:</p>\\n<pre><code class=\\\"hljs language-bash\\\">docker tag hello-hj youyinnn/getstarted:tag1\\n</code></pre>\\n<p>Run <a href=\\\"https://docs.docker.com/engine/reference/commandline/image_ls/\\\">docker image ls</a> to see your newly tagged image.</p>\\n<pre><code class=\\\"hljs language-bash\\\">$ docker image <span class=\\\"hljs-built_in\\\">ls</span>\\n\\nREPOSITORY               TAG                 IMAGE ID            CREATED             SIZE\\nhello-hj              latest              27caa1c952f6        2 days ago          130MB\\nyouyinnn/getstarted   tag1                27caa1c952f6        2 days ago          130MB\\npython                2.7-slim            804b0a01ea83        4 weeks ago         120MB\\nhello-world           latest              4ab4c602aa5e        2 months ago        1.84kB\\n</code></pre>\\n<h4 id=\\\"publish-the-image\\\">Publish the image</h4>\\n<p>Upload your tagged image to the repository:</p>\\n<pre><code class=\\\"hljs language-bash\\\">docker push username/repository:tag\\n</code></pre>\\n<p>Once complete, the results of this upload are publicly available. If you log in to <a href=\\\"https://hub.docker.com/\\\">Docker Hub</a>, you see the new image there, with its pull command.</p>\\n<h4 id=\\\"pull-and-run-the-image-from-the-remote-repository\\\">Pull and run the image from the remote repository</h4>\\n<p>From now on, you can use <code>docker run</code> and run your app on any machine with this command:</p>\\n<pre><code class=\\\"hljs language-bash\\\">docker run -p 4000:80 username/repository:tag\\n</code></pre>\\n<p>If the image isn’t available locally on the machine, Docker pulls it from the repository.</p>\\n<pre><code class=\\\"hljs language-bash\\\">$ docker run -p 4000:80 youyinnn/getstarted:tag1 \\nUnable to find image <span class=\\\"hljs-string\\\">&#x27;youyinnn/getstarted:tag1&#x27;</span> locally\\npart2: Pulling from gordon/get-started\\n10a267c67f42: Already exists\\nf68a39a6a5e4: Already exists\\n9beaffc0cf19: Already exists\\n3c1fe835fb6b: Already exists\\n4c9f1fa8fcb8: Already exists\\nee7d8f576a14: Already exists\\nfbccdcced46e: Already exists\\nDigest: sha256:a569b6b6dc5afc145b4be32ed4d7c7407269c3ecd426dc3b5602b5cf9e3c6ac1\\nStatus: Downloaded newer image <span class=\\\"hljs-keyword\\\">for</span> youyinnn/getstarted:tag1\\n * Running on http://0.0.0.0:80/ (Press CTRL+C to quit)\\n</code></pre>\\n<p>No matter where <code>docker run</code> executes, it pulls your image, along with Python and all the dependencies from <code>requirements.txt</code>, and runs your code. It all travels together in a neat little package, and you don’t need to install anything on the host machine for Docker to run it.</p>\\n<h3 id=\\\"dockerfile-reference\\\">Dockerfile reference</h3>\\n<p>Docker can build images automatically by reading the instructions from a <code>Dockerfile</code>. A <code>Dockerfile</code> is a text document that contains all the commands a user could call on the command line to assemble an image. Using <code>docker build</code> users can create an automated build that executes several command-line instructions in succession.</p>\\n<p>For more information,  please refer to: <strong><a href=\\\"https://docs.docker.com/engine/reference/builder/#usage\\\">https://docs.docker.com/engine/reference/builder/#usage</a></strong></p>\\n\";","export default \"<h3 id=\\\"36-valid-sudokumedium\\\">36. Valid Sudoku(Medium)</h3>\\n<p>Determine if a 9x9 Sudoku board is valid. Only the filled cells need to be validated <strong>according to the following rules</strong>:</p>\\n<ol>\\n<li>Each row must contain the digits <code>1-9</code> without repetition.</li>\\n<li>Each column must contain the digits <code>1-9</code> without repetition.</li>\\n<li>Each of the 9 <code>3x3</code> sub-boxes of the grid must contain the digits <code>1-9</code> without repetition.</li>\\n</ol>\\n<p><img src=\\\"https://upload.wikimedia.org/wikipedia/commons/thumb/f/ff/Sudoku-by-L2G-20050714.svg/250px-Sudoku-by-L2G-20050714.svg.png\\\" alt=\\\"sudoku\\\"></p>\\n<p>A partially filled sudoku which is valid.</p>\\n<p>The Sudoku board could be partially filled, where empty cells are filled with the character <code>&#39;.&#39;</code>.</p>\\n<p><strong>Example 1:</strong></p>\\n<pre><code>Input:\\n[\\n  [&quot;5&quot;,&quot;3&quot;,&quot;.&quot;,&quot;.&quot;,&quot;7&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;],\\n  [&quot;6&quot;,&quot;.&quot;,&quot;.&quot;,&quot;1&quot;,&quot;9&quot;,&quot;5&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;],\\n  [&quot;.&quot;,&quot;9&quot;,&quot;8&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;6&quot;,&quot;.&quot;],\\n  [&quot;8&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;6&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;3&quot;],\\n  [&quot;4&quot;,&quot;.&quot;,&quot;.&quot;,&quot;8&quot;,&quot;.&quot;,&quot;3&quot;,&quot;.&quot;,&quot;.&quot;,&quot;1&quot;],\\n  [&quot;7&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;2&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;6&quot;],\\n  [&quot;.&quot;,&quot;6&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;2&quot;,&quot;8&quot;,&quot;.&quot;],\\n  [&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;4&quot;,&quot;1&quot;,&quot;9&quot;,&quot;.&quot;,&quot;.&quot;,&quot;5&quot;],\\n  [&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;8&quot;,&quot;.&quot;,&quot;.&quot;,&quot;7&quot;,&quot;9&quot;]\\n]\\nOutput: true\\n</code></pre>\\n<p><strong>Example 2:</strong></p>\\n<pre><code>Input:\\n[\\n  [&quot;8&quot;,&quot;3&quot;,&quot;.&quot;,&quot;.&quot;,&quot;7&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;],\\n  [&quot;6&quot;,&quot;.&quot;,&quot;.&quot;,&quot;1&quot;,&quot;9&quot;,&quot;5&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;],\\n  [&quot;.&quot;,&quot;9&quot;,&quot;8&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;6&quot;,&quot;.&quot;],\\n  [&quot;8&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;6&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;3&quot;],\\n  [&quot;4&quot;,&quot;.&quot;,&quot;.&quot;,&quot;8&quot;,&quot;.&quot;,&quot;3&quot;,&quot;.&quot;,&quot;.&quot;,&quot;1&quot;],\\n  [&quot;7&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;2&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;6&quot;],\\n  [&quot;.&quot;,&quot;6&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;2&quot;,&quot;8&quot;,&quot;.&quot;],\\n  [&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;4&quot;,&quot;1&quot;,&quot;9&quot;,&quot;.&quot;,&quot;.&quot;,&quot;5&quot;],\\n  [&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;8&quot;,&quot;.&quot;,&quot;.&quot;,&quot;7&quot;,&quot;9&quot;]\\n]\\nOutput: false\\nExplanation: Same as Example 1, except with the 5 in the top left corner being \\n    modified to 8. Since there are two 8&#x27;s in the top left 3x3 sub-box, it is invalid.\\n</code></pre>\\n<p><strong>Note:</strong></p>\\n<ul>\\n<li>A Sudoku board (partially filled) could be valid but is not necessarily solvable.</li>\\n<li>Only the filled cells need to be validated according to the mentioned rules.</li>\\n<li>The given board contain only digits <code>1-9</code> and the character <code>&#39;.&#39;</code>.</li>\\n<li>The given board size is always <code>9x9</code>.</li>\\n</ul>\\n<h4 id=\\\"brute-force\\\">Brute Force</h4>\\n<p>这图暴力解就已经足够快了，其他解也不觉得有多快，比较无论怎么弄都是常数次，所以空间消耗要考虑好</p>\\n<pre><code class=\\\"hljs language-java\\\"><span class=\\\"hljs-keyword\\\">public</span> <span class=\\\"hljs-type\\\">boolean</span> <span class=\\\"hljs-title function_\\\">isValidSudoku</span><span class=\\\"hljs-params\\\">(<span class=\\\"hljs-type\\\">char</span>[][] board)</span> {\\n    <span class=\\\"hljs-keyword\\\">for</span> (<span class=\\\"hljs-type\\\">int</span> <span class=\\\"hljs-variable\\\">rowIndex</span> <span class=\\\"hljs-operator\\\">=</span> <span class=\\\"hljs-number\\\">0</span>; rowIndex &lt; board.length; rowIndex++) {\\n        <span class=\\\"hljs-type\\\">char</span>[] row = board[rowIndex];\\n        <span class=\\\"hljs-keyword\\\">for</span> (<span class=\\\"hljs-type\\\">int</span> <span class=\\\"hljs-variable\\\">columnIndex</span> <span class=\\\"hljs-operator\\\">=</span> <span class=\\\"hljs-number\\\">0</span>; columnIndex &lt; row.length; columnIndex++) {\\n            <span class=\\\"hljs-type\\\">char</span> <span class=\\\"hljs-variable\\\">number</span> <span class=\\\"hljs-operator\\\">=</span> row[columnIndex];\\n            <span class=\\\"hljs-keyword\\\">if</span> (number != <span class=\\\"hljs-string\\\">&#x27;.&#x27;</span>) {\\n                <span class=\\\"hljs-keyword\\\">for</span> (<span class=\\\"hljs-type\\\">int</span> <span class=\\\"hljs-variable\\\">col</span> <span class=\\\"hljs-operator\\\">=</span> <span class=\\\"hljs-number\\\">0</span>; col &lt; row.length; col++) {\\n                    <span class=\\\"hljs-comment\\\">// duplicate in same row</span>\\n                    <span class=\\\"hljs-keyword\\\">if</span> (col != columnIndex && row[col] == number) {\\n                        <span class=\\\"hljs-keyword\\\">return</span> <span class=\\\"hljs-literal\\\">false</span>;\\n                    }\\n                }\\n                <span class=\\\"hljs-keyword\\\">for</span> (<span class=\\\"hljs-type\\\">int</span> <span class=\\\"hljs-variable\\\">ro</span> <span class=\\\"hljs-operator\\\">=</span> <span class=\\\"hljs-number\\\">0</span>; ro &lt; row.length; ro++) {\\n                    <span class=\\\"hljs-comment\\\">// duplicate in same column</span>\\n                    <span class=\\\"hljs-keyword\\\">if</span> (ro != rowIndex && board[ro][columnIndex] == number) {\\n                        <span class=\\\"hljs-keyword\\\">return</span> <span class=\\\"hljs-literal\\\">false</span>;\\n                    }\\n                }\\n                <span class=\\\"hljs-type\\\">int</span> <span class=\\\"hljs-variable\\\">rowFactor</span> <span class=\\\"hljs-operator\\\">=</span> rowIndex / <span class=\\\"hljs-number\\\">3</span>;\\n                <span class=\\\"hljs-type\\\">int</span> <span class=\\\"hljs-variable\\\">colFactor</span> <span class=\\\"hljs-operator\\\">=</span> columnIndex / <span class=\\\"hljs-number\\\">3</span>;\\n                <span class=\\\"hljs-comment\\\">// duplicate in 3x3</span>\\n                <span class=\\\"hljs-keyword\\\">for</span> (<span class=\\\"hljs-type\\\">int</span> <span class=\\\"hljs-variable\\\">rs</span> <span class=\\\"hljs-operator\\\">=</span> rowFactor * <span class=\\\"hljs-number\\\">3</span>; rs &lt; (rowFactor * <span class=\\\"hljs-number\\\">3</span>) + <span class=\\\"hljs-number\\\">3</span>; rs++) {\\n                    <span class=\\\"hljs-keyword\\\">for</span> (<span class=\\\"hljs-type\\\">int</span> <span class=\\\"hljs-variable\\\">cs</span> <span class=\\\"hljs-operator\\\">=</span> colFactor * <span class=\\\"hljs-number\\\">3</span>; cs &lt; (colFactor * <span class=\\\"hljs-number\\\">3</span>) + <span class=\\\"hljs-number\\\">3</span>; cs++) {\\n                        <span class=\\\"hljs-keyword\\\">if</span> (rs != rowIndex && cs != columnIndex && board[rs][cs] == number) {\\n                            <span class=\\\"hljs-keyword\\\">return</span> <span class=\\\"hljs-literal\\\">false</span>;\\n                        }\\n                    }\\n                }\\n            }\\n        }\\n    }\\n    <span class=\\\"hljs-keyword\\\">return</span> <span class=\\\"hljs-literal\\\">true</span>;\\n}\\n</code></pre>\\n<h3 id=\\\"37-sudoku-solverhard\\\">37. Sudoku Solver(Hard)</h3>\\n<p>Write a program to solve a Sudoku puzzle by filling the empty cells.</p>\\n<p>A sudoku solution must satisfy <strong>all of the following rules</strong>:</p>\\n<ol>\\n<li>Each of the digits <code>1-9</code> must occur exactly once in each row.</li>\\n<li>Each of the digits <code>1-9</code> must occur exactly once in each column.</li>\\n<li>Each of the the digits <code>1-9</code> must occur exactly once in each of the 9 <code>3x3</code> sub-boxes of the grid.</li>\\n</ol>\\n<p>Empty cells are indicated by the character <code>&#39;.&#39;</code>.</p>\\n<p><img src=\\\"https://upload.wikimedia.org/wikipedia/commons/thumb/f/ff/Sudoku-by-L2G-20050714.svg/250px-Sudoku-by-L2G-20050714.svg.png\\\" alt=\\\"img\\\">\\nA sudoku puzzle...</p>\\n<p><img src=\\\"https://upload.wikimedia.org/wikipedia/commons/thumb/3/31/Sudoku-by-L2G-20050714_solution.svg/250px-Sudoku-by-L2G-20050714_solution.svg.png\\\" alt=\\\"img\\\">\\n...and its solution numbers marked in red.</p>\\n<p><strong>Note:</strong></p>\\n<ul>\\n<li>The given board contain only digits <code>1-9</code> and the character <code>&#39;.&#39;</code>.</li>\\n<li>You may assume that the given Sudoku puzzle will have a single unique solution.</li>\\n<li>The given board size is always <code>9x9</code>.</li>\\n</ul>\\n<p>暂不会解，感觉和马踏棋盘一样要用回溯法，而且需要对数独的解法要有了解；</p>\\n<h3 id=\\\"38-count-and-sayeasy\\\">38. Count And Say(Easy)</h3>\\n<p>傻逼题</p>\\n<h3 id=\\\"39-combination-summedium\\\">39. Combination Sum(Medium)</h3>\\n<p>Given a <strong>set</strong> of candidate numbers (<code>candidates</code>) <strong>(without duplicates)</strong> and a target number (<code>target</code>), find all unique combinations in <code>candidates</code> where the candidate numbers sums to <code>target</code>.</p>\\n<p>The <strong>same</strong> repeated number may be chosen from <code>candidates</code> unlimited number of times.</p>\\n<p><strong>Note:</strong></p>\\n<ul>\\n<li>All numbers (including <code>target</code>) will be positive integers.</li>\\n<li>The solution set must not contain duplicate combinations.</li>\\n</ul>\\n<p><strong>Example 1:</strong></p>\\n<pre><code>Input: candidates = [2,3,6,7], target = 7,\\nA solution set is:\\n[\\n  [7],\\n  [2,2,3]\\n]\\n</code></pre>\\n<p><strong>Example 2:</strong></p>\\n<pre><code class=\\\"hljs language-java\\\">Input: candidates = [<span class=\\\"hljs-number\\\">2</span>,<span class=\\\"hljs-number\\\">3</span>,<span class=\\\"hljs-number\\\">5</span>], target = <span class=\\\"hljs-number\\\">8</span>,\\nA solution set is:\\n[\\n  [<span class=\\\"hljs-number\\\">2</span>,<span class=\\\"hljs-number\\\">2</span>,<span class=\\\"hljs-number\\\">2</span>,<span class=\\\"hljs-number\\\">2</span>],\\n  [<span class=\\\"hljs-number\\\">2</span>,<span class=\\\"hljs-number\\\">3</span>,<span class=\\\"hljs-number\\\">3</span>],\\n  [<span class=\\\"hljs-number\\\">3</span>,<span class=\\\"hljs-number\\\">5</span>]\\n]\\n</code></pre>\\n<h4 id=\\\"recursion\\\">Recursion</h4>\\n<p>这题比较好用回溯，去重的技巧也有点3sum的意思</p>\\n<pre><code class=\\\"hljs language-java\\\"><span class=\\\"hljs-keyword\\\">public</span> List&lt;List&lt;Integer&gt;&gt; <span class=\\\"hljs-title function_\\\">combinationSum</span><span class=\\\"hljs-params\\\">(<span class=\\\"hljs-type\\\">int</span>[] candidates, <span class=\\\"hljs-type\\\">int</span> target)</span> {\\n    LinkedList&lt;List&lt;Integer&gt;&gt; ans = <span class=\\\"hljs-keyword\\\">new</span> <span class=\\\"hljs-title class_\\\">LinkedList</span>&lt;&gt;();\\n    Arrays.sort(candidates);\\n    <span class=\\\"hljs-keyword\\\">for</span> (<span class=\\\"hljs-type\\\">int</span> <span class=\\\"hljs-variable\\\">i</span> <span class=\\\"hljs-operator\\\">=</span> <span class=\\\"hljs-number\\\">0</span>; i &lt; candidates.length; i++) {\\n        <span class=\\\"hljs-type\\\">int</span> <span class=\\\"hljs-variable\\\">candidate</span> <span class=\\\"hljs-operator\\\">=</span> candidates[i];\\n        LinkedList&lt;Integer&gt; one = <span class=\\\"hljs-keyword\\\">new</span> <span class=\\\"hljs-title class_\\\">LinkedList</span>&lt;&gt;();\\n        one.add(candidate);\\n        get(ans, one, candidates, i, target - candidate);\\n    }\\n    <span class=\\\"hljs-keyword\\\">return</span> ans;\\n}\\n\\n<span class=\\\"hljs-keyword\\\">private</span> <span class=\\\"hljs-keyword\\\">void</span> <span class=\\\"hljs-title function_\\\">get</span><span class=\\\"hljs-params\\\">(List&lt;List&lt;Integer&gt;&gt; ans, List&lt;Integer&gt; one, <span class=\\\"hljs-type\\\">int</span>[] candidates, <span class=\\\"hljs-type\\\">int</span> offset, <span class=\\\"hljs-type\\\">int</span> target)</span> {\\n    <span class=\\\"hljs-keyword\\\">if</span> (target == <span class=\\\"hljs-number\\\">0</span>) {\\n        ans.add(<span class=\\\"hljs-keyword\\\">new</span> <span class=\\\"hljs-title class_\\\">LinkedList</span>&lt;&gt;(one));\\n    }\\n    <span class=\\\"hljs-keyword\\\">if</span> (candidates[offset] &lt;= target) {\\n        <span class=\\\"hljs-keyword\\\">for</span> (<span class=\\\"hljs-type\\\">int</span> <span class=\\\"hljs-variable\\\">i</span> <span class=\\\"hljs-operator\\\">=</span> offset; i &lt; candidates.length; i++) {\\n            <span class=\\\"hljs-type\\\">int</span> <span class=\\\"hljs-variable\\\">candidate</span> <span class=\\\"hljs-operator\\\">=</span> candidates[i];\\n            <span class=\\\"hljs-keyword\\\">if</span> (candidate &lt;= target) {\\n                one.add(candidate);\\n                get(ans, one, candidates, i, target - candidate);\\n                one.remove(one.size() - <span class=\\\"hljs-number\\\">1</span>);\\n            }\\n        }\\n    }\\n}\\n</code></pre>\\n<h3 id=\\\"40-combination-sum-iimedium\\\">40. Combination Sum II(Medium)</h3>\\n<p>Given a collection of candidate numbers (<code>candidates</code>) and a target number (<code>target</code>), find all unique combinations in <code>candidates</code> where the candidate numbers sums to <code>target</code>.</p>\\n<p>Each number in <code>candidates</code> may only be used <strong>once</strong> in the combination.</p>\\n<p><strong>Note:</strong></p>\\n<ul>\\n<li>All numbers (including <code>target</code>) will be positive integers.</li>\\n<li>The solution set must not contain duplicate combinations.</li>\\n</ul>\\n<p><strong>Example 1:</strong></p>\\n<pre><code>Input: candidates = [10,1,2,7,6,1,5], target = 8,\\nA solution set is:\\n[\\n  [1, 7],\\n  [1, 2, 5],\\n  [2, 6],\\n  [1, 1, 6]\\n]\\n</code></pre>\\n<p><strong>Example 2:</strong></p>\\n<pre><code>Input: candidates = [2,5,2,1,2], target = 5,\\nA solution set is:\\n[\\n  [1,2,2],\\n  [5]\\n]\\n</code></pre>\\n<p>这题和上题一样，多费心思处理重复就好了</p>\\n<pre><code class=\\\"hljs language-java\\\"><span class=\\\"hljs-keyword\\\">public</span> List&lt;List&lt;Integer&gt;&gt; <span class=\\\"hljs-title function_\\\">combinationSum2</span><span class=\\\"hljs-params\\\">(<span class=\\\"hljs-type\\\">int</span>[] candidates, <span class=\\\"hljs-type\\\">int</span> target)</span> {\\n    LinkedList&lt;List&lt;Integer&gt;&gt; ans = <span class=\\\"hljs-keyword\\\">new</span> <span class=\\\"hljs-title class_\\\">LinkedList</span>&lt;&gt;();\\n    Arrays.sort(candidates);\\n    <span class=\\\"hljs-keyword\\\">for</span> (<span class=\\\"hljs-type\\\">int</span> <span class=\\\"hljs-variable\\\">i</span> <span class=\\\"hljs-operator\\\">=</span> <span class=\\\"hljs-number\\\">0</span>; i &lt; candidates.length; i++) {\\n        <span class=\\\"hljs-keyword\\\">if</span> (i &gt; <span class=\\\"hljs-number\\\">0</span> && candidates[i] == candidates[i - <span class=\\\"hljs-number\\\">1</span>]) {\\n            <span class=\\\"hljs-keyword\\\">continue</span>;\\n        }\\n        <span class=\\\"hljs-type\\\">int</span> <span class=\\\"hljs-variable\\\">candidate</span> <span class=\\\"hljs-operator\\\">=</span> candidates[i];\\n        LinkedList&lt;Integer&gt; one = <span class=\\\"hljs-keyword\\\">new</span> <span class=\\\"hljs-title class_\\\">LinkedList</span>&lt;&gt;();\\n        one.add(candidate);\\n        get(ans, one, candidates, i + <span class=\\\"hljs-number\\\">1</span>, target - candidate);\\n    }\\n    <span class=\\\"hljs-keyword\\\">return</span> ans;\\n}\\n\\n<span class=\\\"hljs-keyword\\\">private</span> <span class=\\\"hljs-keyword\\\">void</span> <span class=\\\"hljs-title function_\\\">get</span><span class=\\\"hljs-params\\\">(List&lt;List&lt;Integer&gt;&gt; ans, List&lt;Integer&gt; one, <span class=\\\"hljs-type\\\">int</span>[] candidates, <span class=\\\"hljs-type\\\">int</span> offset, <span class=\\\"hljs-type\\\">int</span> target)</span> {\\n    <span class=\\\"hljs-keyword\\\">if</span> (target == <span class=\\\"hljs-number\\\">0</span>) {\\n        ans.add(<span class=\\\"hljs-keyword\\\">new</span> <span class=\\\"hljs-title class_\\\">LinkedList</span>&lt;&gt;(one));\\n    }\\n    <span class=\\\"hljs-keyword\\\">if</span> (offset &lt; candidates.length && candidates[offset] &lt;= target) {\\n        <span class=\\\"hljs-keyword\\\">for</span> (<span class=\\\"hljs-type\\\">int</span> <span class=\\\"hljs-variable\\\">i</span> <span class=\\\"hljs-operator\\\">=</span> offset; i &lt; candidates.length; i++) {\\n            <span class=\\\"hljs-keyword\\\">if</span> (i != offset && candidates[i] == candidates[i - <span class=\\\"hljs-number\\\">1</span>]) {\\n                <span class=\\\"hljs-keyword\\\">continue</span>;\\n            }\\n            <span class=\\\"hljs-type\\\">int</span> <span class=\\\"hljs-variable\\\">candidate</span> <span class=\\\"hljs-operator\\\">=</span> candidates[i];\\n            <span class=\\\"hljs-keyword\\\">if</span> (candidate &lt;= target) {\\n                one.add(candidate);\\n                get(ans, one, candidates, i + <span class=\\\"hljs-number\\\">1</span>, target - candidate);\\n                one.remove(one.size() - <span class=\\\"hljs-number\\\">1</span>);\\n            } <span class=\\\"hljs-keyword\\\">else</span> {\\n                <span class=\\\"hljs-keyword\\\">break</span>;\\n            }\\n        }\\n    }\\n}\\n</code></pre>\\n\";","export default \"<h3 id=\\\"introduction\\\">Introduction</h3>\\n<p>在学习Java并发中的同步器源码的时候，注释中有提到过AQS的Node结构是参考CLH的一种变体：</p>\\n<blockquote>\\n<p>The wait queue is a variant of a &quot;CLH&quot; (Craig, Landin, and Hagersten) lock queue. </p>\\n<p>CLH locks are normally used for spinlocks.  We instead use them for blocking synchronizers, but use the same basic tactic of holding some of the control information about a thread in the predecessor of its node.  A &quot;status&quot; field in each node keeps track of whether a thread should block.  </p>\\n<p>A node is signalled when its predecessor releases.  Each node of the queue otherwise serves as a specific-notification-style monitor holding a single waiting thread. The status field does NOT control whether threads are granted locks etc though.  </p>\\n<p>A thread may try to acquire if it is first in the queue. But being first does not guarantee success; it only gives the right to contend.  So the currently released contender thread may need to rewait.</p>\\n<p><strong>To enqueue into a CLH lock, you atomically splice it in as new tail.</strong> </p>\\n<p><strong>To dequeue, you just set the head field.</strong></p>\\n <pre class=\\\"nhi\\\">\\n      +------+  prev +-----+       +-----+\\n head |      | &lt;---- |     | &lt;---- |     |  tail\\n      +------+       +-----+       +-----+\\n </pre>\\n\\n<p>Insertion into a CLH queue requires only a single atomic operation on &quot;tail&quot;, so there is a simple atomic point of demarcation from unqueued to queued. Similarly, dequeuing involves only updating the &quot;head&quot;. </p>\\n<p>However, it takes a bit more work for nodes to determine who their successors are, in part to deal with possible cancellation due to timeouts and interrupts.</p>\\n</blockquote>\\n<p>CLH锁即Craig, Landin, and Hagersten (CLH) locks，CLH锁是一个自旋锁，能确保无饥饿性，提供先来先服务的公平性</p>\\n<p>CLH锁也是一种基于链表的可扩展、高性能、公平的自旋锁，申请线程只在本地变量上自旋，它不断轮询前驱的状态，如果发现前驱释放了锁就结束自旋</p>\\n<p>CLH Lock是一种比较简单的自旋锁算法之一，因为锁的CAS操作涉及到了硬件的锁定(锁总线或者是锁内存)所以性能和CPU架构也密不可分</p>\\n<p>CLH Lock是独占式锁的一种，并且是不可重入的锁</p>\\n<h3 id=\\\"implement\\\">Implement</h3>\\n<pre><code class=\\\"hljs language-java\\\"><span class=\\\"hljs-keyword\\\">public</span> <span class=\\\"hljs-keyword\\\">class</span> <span class=\\\"hljs-title class_\\\">ClhSpinLock</span> <span class=\\\"hljs-keyword\\\">implements</span> <span class=\\\"hljs-title class_\\\">Lock</span>{\\n    <span class=\\\"hljs-keyword\\\">private</span> <span class=\\\"hljs-keyword\\\">final</span> ThreadLocal&lt;Node&gt; prev;\\n    <span class=\\\"hljs-keyword\\\">private</span> <span class=\\\"hljs-keyword\\\">final</span> ThreadLocal&lt;Node&gt; node;\\n    <span class=\\\"hljs-keyword\\\">private</span> <span class=\\\"hljs-keyword\\\">final</span> AtomicReference&lt;Node&gt; tail = <span class=\\\"hljs-keyword\\\">new</span> <span class=\\\"hljs-title class_\\\">AtomicReference</span>&lt;Node&gt;(<span class=\\\"hljs-keyword\\\">new</span> <span class=\\\"hljs-title class_\\\">Node</span>());\\n\\n    <span class=\\\"hljs-keyword\\\">public</span> <span class=\\\"hljs-title function_\\\">ClhSpinLock</span><span class=\\\"hljs-params\\\">()</span> {\\n        <span class=\\\"hljs-built_in\\\">this</span>.node = <span class=\\\"hljs-keyword\\\">new</span> <span class=\\\"hljs-title class_\\\">ThreadLocal</span>&lt;Node&gt;() {\\n            <span class=\\\"hljs-keyword\\\">protected</span> Node <span class=\\\"hljs-title function_\\\">initialValue</span><span class=\\\"hljs-params\\\">()</span> {\\n                <span class=\\\"hljs-keyword\\\">return</span> <span class=\\\"hljs-keyword\\\">new</span> <span class=\\\"hljs-title class_\\\">Node</span>();\\n            }\\n        };\\n\\n        <span class=\\\"hljs-built_in\\\">this</span>.prev = <span class=\\\"hljs-keyword\\\">new</span> <span class=\\\"hljs-title class_\\\">ThreadLocal</span>&lt;Node&gt;() {\\n            <span class=\\\"hljs-keyword\\\">protected</span> Node <span class=\\\"hljs-title function_\\\">initialValue</span><span class=\\\"hljs-params\\\">()</span> {\\n                <span class=\\\"hljs-keyword\\\">return</span> <span class=\\\"hljs-literal\\\">null</span>;\\n            }\\n        };\\n    }\\n\\n    <span class=\\\"hljs-comment\\\">/**\\n     * 1.初始状态 tail指向一个node(head)节点 \\n     * +------+ \\n     * | head | &lt;---- tail \\n     * +------+\\n     * \\n     * 2.lock-thread加入等待队列: tail指向新的Node，同时Prev指向tail之前指向的节点\\n     * +----------+\\n     * | Thread-A |\\n     * | := Node  | &lt;---- tail\\n     * | := Prev  | -----&gt; +------+\\n     * +----------+        | head |\\n     *                     +------+ \\n     * \\n     *             +----------+            +----------+\\n     *             | Thread-B |            | Thread-A |\\n     * tail ----&gt;  | := Node  |     --&gt;    | := Node  | \\n     *             | := Prev  | ----|      | := Prev  | -----&gt;  +------+\\n     *             +----------+            +----------+         | head |\\n     *                                                          +------+ \\n     * 3.寻找当前node的prev-node然后开始自旋\\n     * \\n     */</span>\\n    <span class=\\\"hljs-keyword\\\">public</span> <span class=\\\"hljs-keyword\\\">void</span> <span class=\\\"hljs-title function_\\\">lock</span><span class=\\\"hljs-params\\\">()</span> {\\n        <span class=\\\"hljs-keyword\\\">final</span> <span class=\\\"hljs-type\\\">Node</span> <span class=\\\"hljs-variable\\\">node</span> <span class=\\\"hljs-operator\\\">=</span> <span class=\\\"hljs-built_in\\\">this</span>.node.get();\\n        node.locked = <span class=\\\"hljs-literal\\\">true</span>;\\n        <span class=\\\"hljs-type\\\">Node</span> <span class=\\\"hljs-variable\\\">pred</span> <span class=\\\"hljs-operator\\\">=</span> <span class=\\\"hljs-built_in\\\">this</span>.tail.getAndSet(node);\\n        <span class=\\\"hljs-built_in\\\">this</span>.prev.set(pred);\\n        <span class=\\\"hljs-comment\\\">// 自旋</span>\\n        <span class=\\\"hljs-keyword\\\">while</span> (pred.locked);\\n    }\\n\\n    <span class=\\\"hljs-keyword\\\">public</span> <span class=\\\"hljs-keyword\\\">void</span> <span class=\\\"hljs-title function_\\\">unlock</span><span class=\\\"hljs-params\\\">()</span> {\\n        <span class=\\\"hljs-keyword\\\">final</span> <span class=\\\"hljs-type\\\">Node</span> <span class=\\\"hljs-variable\\\">node</span> <span class=\\\"hljs-operator\\\">=</span> <span class=\\\"hljs-built_in\\\">this</span>.node.get();\\n        node.locked = <span class=\\\"hljs-literal\\\">false</span>;\\n        <span class=\\\"hljs-built_in\\\">this</span>.node.set(<span class=\\\"hljs-built_in\\\">this</span>.prev.get());\\n    }\\n\\n    <span class=\\\"hljs-keyword\\\">private</span> <span class=\\\"hljs-keyword\\\">static</span> <span class=\\\"hljs-keyword\\\">class</span> <span class=\\\"hljs-title class_\\\">Node</span> {<span class=\\\"hljs-keyword\\\">private</span> <span class=\\\"hljs-keyword\\\">volatile</span> <span class=\\\"hljs-type\\\">boolean</span> locked;}\\n}\\n</code></pre>\\n<p>CLH的算法定义</p>\\n<blockquote>\\n<p>the list, the application thread spin only on a local variable, it constantly polling the precursor state, if it is found that the pre release lock end spin.</p>\\n</blockquote>\\n<p>基于list，线程仅在一个局部变量上自旋，它不断轮询前一个节点状态，如果发现前一个节点释放锁结束.</p>\\n<p>所以在java中使用了ThreadLocal作为具体实现,AtomicReference为了消除多个线程并发对tail引用Node的影响，核心方法lock()中分为3个步骤去实现</p>\\n<ol>\\n<li><p>初始状态 tail指向一个node(head)节点</p>\\n<pre><code>private final AtomicReference&lt;Node&gt; tail = new AtomicReference&lt;Node&gt;(new Node());\\n</code></pre>\\n</li>\\n<li><p>thread加入等待队列: tail指向新的Node，同时Prev指向tail之前指向的节点，在java代码中使用了getAndSet即CAS操作使用</p>\\n<pre><code>Node pred = this.tail.getAndSet(node);\\nthis.prev.set(pred);\\n</code></pre>\\n</li>\\n<li><p>寻找当前线程对应的node的前驱node然后开始自旋前驱node的status判断是否可以获取lock</p>\\n<pre><code>while (pred.locked);\\n</code></pre>\\n</li>\\n</ol>\\n<p>同理unlock()方法，获取当前线程的node，设置lock status，将当前node指向前驱node(这样操作tail指向的就是前驱node等同于出队操作).至此CLH Lock的过程就结束了</p>\\n<hr>\\n<p>更多的关于简单的自旋锁或者MCS锁可以参考：<a href=\\\"https://coderbee.net/index.php/concurrent/20131115/577\\\">https://coderbee.net/index.php/concurrent/20131115/577</a></p>\\n<p>本文整理自：</p>\\n<ol>\\n<li><a href=\\\"https://segmentfault.com/a/1190000007094429\\\">https://segmentfault.com/a/1190000007094429</a></li>\\n<li><a href=\\\"https://blog.csdn.net/bingjing12345/article/details/17789613\\\">https://blog.csdn.net/bingjing12345/article/details/17789613</a></li>\\n<li><a href=\\\"https://www.programering.com/a/MjM5gTNwATE.html\\\">https://www.programering.com/a/MjM5gTNwATE.html</a></li>\\n</ol>\\n\";","export default \"<h3 id=\\\"小声-bb\\\">小声 BB</h3>\\n<p>本篇尽量不 po 代码，仅仅过一遍 AVL 树和红黑树</p>\\n<p>其中红黑树更是在 HashMap 中大展身手，肯定要研究一下为什么他们要用到 RBT</p>\\n<hr>\\n<h3 id=\\\"avl\\\">AVL</h3>\\n<p>了解 AVL 之前，我们先 BB 一句二叉搜索树（Binary Search Tree，BST），BST 有什么性质？</p>\\n<p>曰：<strong>二叉结构，元素可比，左小右大，仅此而已</strong></p>\\n<p>然后再 BB 一句为什么有了 BST 之后，又要研究 AVL 树：在极端的情况下，一组大小有序的数据插入 BST，那么就会生成一条线而不是一棵树，这样对于树的操作就完全退化成链表操作，举例说查找操作从二分法的效率变成了顺序查找</p>\\n<p>大部分时候我们使用一棵树，更重要的是要用到他的查找操作，而不是插入或者删除操作</p>\\n<p>于是为了防止一棵树会变成一条线，于是就有了平衡二叉树，也就是 AVL 树</p>\\n<p>下面引自<a href=\\\"https://www.geeksforgeeks.org/avl-tree-set-1-insertion/\\\">GeekforKGeek 的《AVL Tree | Set 1 (Insertion)》一文</a></p>\\n<blockquote>\\n<p><strong>Why AVL Trees?</strong> Most of the BST operations (e.g., search, max, min, insert, delete.. etc) take O(h) time where h is the height of the BST. The cost of these operations may become O(n) for a skewed Binary tree. If we make sure that height of the tree remains O(Logn) after every insertion and deletion, then we can guarantee an upper bound of O(Logn) for all these operations. The height of an AVL tree is always O(Logn) where n is the number of nodes in the tree (See <a href=\\\"http://www.youtube.com/watch?v=TbvhGcf6UJU\\\">this </a>video lecture for proof).</p>\\n</blockquote>\\n<p>大部分的 BST 操作都会在**O(h)<strong>的效率内完成，但是一旦树有倾斜，就会变成</strong>O(n)<strong>的效率，AVL 通过旋转来保持平衡防止树倾斜，使得所有操作都在</strong>O(logn)<strong>的效率内完成；因为 AVL 的高度始终都是</strong>O(logn)**；</p>\\n<h4 id=\\\"和-bst-有何异同？\\\">和 BST 有何异同？</h4>\\n<ul>\\n<li><p><strong>结点：</strong>AVL 树的每一个结点中有一个字段用于存储平衡因子（average factor），这个平衡因子用于记录该结点的左子树高度和右子树高度之差，用以表示这棵树本身是否<strong>平衡</strong>，于是这个平衡因子的取值在一棵合法的 AVL 数中的每个节点上只可能取值为：-1，0，1；</p>\\n</li>\\n<li><p><strong>平衡状态：</strong>保证树上的每个结点的平衡因子都只在**[-1，1]**之间，一旦达到+2 或者-2，就需要通过选旋转操作来保持平衡；</p>\\n</li>\\n<li><p><strong>旋转操作：</strong>为了保持平衡，在达插入的时候如果发现其祖父结点达到不平衡了，那么就需要旋转该树，以从新达到平衡；</p>\\n<ul>\\n<li><p><strong>右旋（Right Rotation，RR）：这个旋转是在一个新的键插入左子女的左子树后发生的，插入前这棵树的 AF 是+1</strong></p>\\n<pre><code>         z                                      y\\n        / \\\\                                   /   \\\\\\n       y   T4      Right Rotate (z)          x      z\\n      / \\\\          - - - - - - - - -&gt;      /  \\\\    /  \\\\\\n     x   T3                               T1  T2  T3  T4\\n    / \\\\\\n  T1   T2\\n</code></pre>\\n</li>\\n<li><p><strong>左旋（Left Rotation，LL）：这个旋转是在一个新的键插入右子女的右子树后发生的，插入前这棵树的 AF 是-1</strong></p>\\n<pre><code>  z                                y\\n /  \\\\                            /   \\\\\\nT1   y     Left Rotate(z)       z      x\\n    /  \\\\   - - - - - - - -&gt;    / \\\\    / \\\\\\n   T2   x                     T1  T2 T3  T4\\n       / \\\\\\n     T3  T4\\n</code></pre>\\n</li>\\n<li><p><strong>左右旋（Left Right Rotation，LR）：这个旋转是在一个新的键插入树的左子女的右子树后发生的，插入前这棵树的 AF 是+1</strong></p>\\n<pre><code>     z                               z                           x\\n    / \\\\                            /   \\\\                        /  \\\\\\n   y   T4  Left Rotate (y)        x    T4  Right Rotate(z)    y      z\\n  / \\\\      - - - - - - - - -&gt;    /  \\\\      - - - - - - - -&gt;  / \\\\    / \\\\\\nT1   x                          y    T3                    T1  T2 T3  T4\\n    / \\\\                        / \\\\\\n  T2   T3                    T1   T2\\n</code></pre>\\n</li>\\n<li><p><strong>右左旋（Right Left Rotation，RL）：这个旋转是在一个新的键插入树的右子女的左子树后发生的，插入前这棵树的 AF 是-1</strong></p>\\n<pre><code>   z                            z                            x\\n  / \\\\                          / \\\\                          /  \\\\\\nT1   y   Right Rotate (y)    T1   x      Left Rotate(z)   z      y\\n    / \\\\  - - - - - - - - -&gt;     /  \\\\   - - - - - - - -&gt;  / \\\\    / \\\\\\n   x   T4                      T2   y                  T1  T2  T3  T4\\n  / \\\\                              /  \\\\\\nT2   T3                           T3   T4\\n</code></pre>\\n</li>\\n</ul>\\n</li>\\n</ul>\\n<h4 id=\\\"结构与过程\\\">结构与过程</h4>\\n<h5 id=\\\"结点结构\\\">结点结构</h5>\\n<p>结构比较简单，左右两子和平衡高度</p>\\n<pre><code class=\\\"hljs language-java\\\"><span class=\\\"hljs-keyword\\\">class</span> <span class=\\\"hljs-title class_\\\">Node</span> {\\n    <span class=\\\"hljs-type\\\">int</span> key, height;\\n    Node left, right;\\n    Node(<span class=\\\"hljs-type\\\">int</span> d) {\\n        key = d;\\n        height = <span class=\\\"hljs-number\\\">1</span>;\\n    }\\n}\\n<span class=\\\"hljs-keyword\\\">class</span> <span class=\\\"hljs-title class_\\\">AVLTree</span> {\\n    Node root;\\n    <span class=\\\"hljs-comment\\\">// A utility function to get the height of the tree</span>\\n    <span class=\\\"hljs-type\\\">int</span> <span class=\\\"hljs-title function_\\\">height</span><span class=\\\"hljs-params\\\">(Node N)</span> {\\n        <span class=\\\"hljs-keyword\\\">if</span> (N == <span class=\\\"hljs-literal\\\">null</span>)\\n            <span class=\\\"hljs-keyword\\\">return</span> <span class=\\\"hljs-number\\\">0</span>;\\n        <span class=\\\"hljs-keyword\\\">return</span> N.height;\\n    }\\n    <span class=\\\"hljs-comment\\\">// A utility function to get maximum of two integers</span>\\n    <span class=\\\"hljs-type\\\">int</span> <span class=\\\"hljs-title function_\\\">max</span><span class=\\\"hljs-params\\\">(<span class=\\\"hljs-type\\\">int</span> a, <span class=\\\"hljs-type\\\">int</span> b)</span> {\\n        <span class=\\\"hljs-keyword\\\">return</span> (a &gt; b) ? a : b;\\n    }\\n    <span class=\\\"hljs-comment\\\">// Get Balance factor of node N</span>\\n    <span class=\\\"hljs-type\\\">int</span> <span class=\\\"hljs-title function_\\\">getBalance</span><span class=\\\"hljs-params\\\">(Node N)</span> {\\n        <span class=\\\"hljs-keyword\\\">if</span> (N == <span class=\\\"hljs-literal\\\">null</span>)\\n            <span class=\\\"hljs-keyword\\\">return</span> <span class=\\\"hljs-number\\\">0</span>;\\n        <span class=\\\"hljs-keyword\\\">return</span> height(N.left) - height(N.right);\\n    }\\n    <span class=\\\"hljs-comment\\\">// ...</span>\\n}\\n</code></pre>\\n<h5 id=\\\"右旋\\\">右旋</h5>\\n<pre><code class=\\\"hljs language-java\\\">Node <span class=\\\"hljs-title function_\\\">rightRotate</span><span class=\\\"hljs-params\\\">(Node y)</span> {\\n    <span class=\\\"hljs-type\\\">Node</span> <span class=\\\"hljs-variable\\\">x</span> <span class=\\\"hljs-operator\\\">=</span> y.left;\\n    <span class=\\\"hljs-type\\\">Node</span> <span class=\\\"hljs-variable\\\">T2</span> <span class=\\\"hljs-operator\\\">=</span> x.right;\\n    <span class=\\\"hljs-comment\\\">// Perform rotation</span>\\n    x.right = y;\\n    y.left = T2;\\n    <span class=\\\"hljs-comment\\\">// Update heights</span>\\n    y.height = max(height(y.left), height(y.right)) + <span class=\\\"hljs-number\\\">1</span>;\\n    x.height = max(height(x.left), height(x.right)) + <span class=\\\"hljs-number\\\">1</span>;\\n    <span class=\\\"hljs-comment\\\">// Return new root</span>\\n    <span class=\\\"hljs-keyword\\\">return</span> x;\\n}\\n</code></pre>\\n<pre><code>// 图示\\n   y                        x\\n  /                             \\\\\\n x             =====&gt;              y\\n  \\\\                          /\\n   T2                        T2\\n</code></pre>\\n<h5 id=\\\"左旋\\\">左旋</h5>\\n<pre><code class=\\\"hljs language-java\\\">Node <span class=\\\"hljs-title function_\\\">leftRotate</span><span class=\\\"hljs-params\\\">(Node x)</span> {\\n    <span class=\\\"hljs-type\\\">Node</span> <span class=\\\"hljs-variable\\\">y</span> <span class=\\\"hljs-operator\\\">=</span> x.right;\\n    <span class=\\\"hljs-type\\\">Node</span> <span class=\\\"hljs-variable\\\">T2</span> <span class=\\\"hljs-operator\\\">=</span> y.left;\\n    <span class=\\\"hljs-comment\\\">// Perform rotation</span>\\n    y.left = x;\\n    x.right = T2;\\n    <span class=\\\"hljs-comment\\\">//  Update heights</span>\\n    x.height = max(height(x.left), height(x.right)) + <span class=\\\"hljs-number\\\">1</span>;\\n    y.height = max(height(y.left), height(y.right)) + <span class=\\\"hljs-number\\\">1</span>;\\n    <span class=\\\"hljs-comment\\\">// Return new root</span>\\n    <span class=\\\"hljs-keyword\\\">return</span> y;\\n}\\n</code></pre>\\n<pre><code>// 图示\\n   x                       y\\n    \\\\                      /\\n     y        =====&gt;         x\\n    /                      \\\\\\n   T2                      T2\\n</code></pre>\\n<p>其他双旋操作都是基于这两个基本操作来搞的；</p>\\n<h5 id=\\\"插入\\\">插入</h5>\\n<pre><code class=\\\"hljs language-java\\\">Node <span class=\\\"hljs-title function_\\\">insert</span><span class=\\\"hljs-params\\\">(Node node, <span class=\\\"hljs-type\\\">int</span> key)</span> {\\n    <span class=\\\"hljs-comment\\\">/* 1.  Perform the normal BST insertion */</span>\\n    <span class=\\\"hljs-keyword\\\">if</span> (node == <span class=\\\"hljs-literal\\\">null</span>)\\n        <span class=\\\"hljs-keyword\\\">return</span> (<span class=\\\"hljs-keyword\\\">new</span> <span class=\\\"hljs-title class_\\\">Node</span>(key));\\n    <span class=\\\"hljs-keyword\\\">if</span> (key &lt; node.key)\\n        node.left = insert(node.left, key);\\n    <span class=\\\"hljs-keyword\\\">else</span> <span class=\\\"hljs-keyword\\\">if</span> (key &gt; node.key)\\n        node.right = insert(node.right, key);\\n    <span class=\\\"hljs-keyword\\\">else</span> <span class=\\\"hljs-comment\\\">// Duplicate keys not allowed</span>\\n        <span class=\\\"hljs-keyword\\\">return</span> node;\\n\\n    <span class=\\\"hljs-comment\\\">/* 2. Update height of this ancestor node */</span>\\n    node.height = <span class=\\\"hljs-number\\\">1</span> + max(height(node.left),\\n                          height(node.right));\\n\\n    <span class=\\\"hljs-comment\\\">/* 3. Get the balance factor of this ancestor\\n          node to check whether this node became\\n          unbalanced */</span>\\n    <span class=\\\"hljs-type\\\">int</span> <span class=\\\"hljs-variable\\\">balance</span> <span class=\\\"hljs-operator\\\">=</span> getBalance(node);\\n\\n    <span class=\\\"hljs-comment\\\">// If this node becomes unbalanced, then there</span>\\n    <span class=\\\"hljs-comment\\\">// are 4 cases</span>\\n    <span class=\\\"hljs-comment\\\">// Left Left Case</span>\\n    <span class=\\\"hljs-keyword\\\">if</span> (balance &gt; <span class=\\\"hljs-number\\\">1</span> && key &lt; node.left.key)\\n        <span class=\\\"hljs-keyword\\\">return</span> rightRotate(node);\\n\\n    <span class=\\\"hljs-comment\\\">// Right Right Case</span>\\n    <span class=\\\"hljs-keyword\\\">if</span> (balance &lt; -<span class=\\\"hljs-number\\\">1</span> && key &gt; node.right.key)\\n        <span class=\\\"hljs-keyword\\\">return</span> leftRotate(node);\\n\\n    <span class=\\\"hljs-comment\\\">// Left Right Case</span>\\n    <span class=\\\"hljs-keyword\\\">if</span> (balance &gt; <span class=\\\"hljs-number\\\">1</span> && key &gt; node.left.key) {\\n        node.left = leftRotate(node.left);\\n        <span class=\\\"hljs-keyword\\\">return</span> rightRotate(node);\\n    }\\n\\n    <span class=\\\"hljs-comment\\\">// Right Left Case</span>\\n    <span class=\\\"hljs-keyword\\\">if</span> (balance &lt; -<span class=\\\"hljs-number\\\">1</span> && key &lt; node.right.key) {\\n        node.right = rightRotate(node.right);\\n        <span class=\\\"hljs-keyword\\\">return</span> leftRotate(node);\\n    }\\n\\n    <span class=\\\"hljs-comment\\\">/* return the (unchanged) node pointer */</span>\\n    <span class=\\\"hljs-keyword\\\">return</span> node;\\n}\\n</code></pre>\\n<p>我们来分析一下实现，我们插入一个新键，也许会破坏树的平衡，所以在插入操作完毕之后，我们就需要调整树平衡，由于实现中的插入是通过递归去实现的，<strong>所以递归路径上就记录了每一个经过的父节点</strong>，于是等我们从插入点最近的不平衡点开始回溯的时候，同时执行平衡性判断，然后依次通过旋转去调整<strong>回去路上</strong>每个点的平衡，以达到回到根节点的时候，整棵树就是平衡的；一下是几个关键点：</p>\\n<ol>\\n<li><p>递归寻找插入点，通过键值判断左右；</p>\\n</li>\\n<li><p>调整插入点的父亲的高度；</p>\\n</li>\\n<li><p>判断该点的平衡性；</p>\\n</li>\\n<li><p>根据四种失衡情况进行旋转；</p>\\n</li>\\n</ol>\\n<h5 id=\\\"删除操作\\\">删除操作</h5>\\n<p>这个更为复杂点，就先不分析了；</p>\\n<h4 id=\\\"效率\\\">效率</h4>\\n<p>插入、查找、删除均为<strong>O(logn)</strong></p>\\n<h4 id=\\\"参考\\\">参考</h4>\\n<blockquote>\\n<p><a href=\\\"https://www.geeksforgeeks.org/avl-tree-set-1-insertion/\\\">https://www.geeksforgeeks.org/avl-tree-set-1-insertion/</a></p>\\n<p><a href=\\\"https://www.geeksforgeeks.org/avl-tree-set-2-deletion/\\\">https://www.geeksforgeeks.org/avl-tree-set-2-deletion/</a></p>\\n</blockquote>\\n<hr>\\n<h3 id=\\\"红黑树\\\">红黑树</h3>\\n<p>红黑树是一棵自平衡（self-balancing）的 BST，它的每个结点都遵循以下四个规则：</p>\\n<p><strong>1)</strong> 每点非红即黑</p>\\n<p><strong>2)</strong> 根结点必定黑</p>\\n<p><strong>3)</strong> 红结点若有子节点，这俩子节点必定是黑色（有直接关系的两结点不能同时都是红色）</p>\\n<p><strong>4)</strong> 每条从根节点到一个 NULL 结点的路径上总有相同数量的黑色结点</p>\\n<p><img src=\\\"../../../public/img/20180829110435.png\\\" alt=\\\"rbt example\\\"></p>\\n<p>前 3 条没什么难理解的，关键是第四条，到底是什么意思呢？参考<a href=\\\"https://baike.baidu.com/item/%E7%BA%A2%E9%BB%91%E6%A0%91\\\">百度百科</a>可知，这句话还可以这样说：<strong>“从任一节点到其每个叶子的所有路径都包含相同数目的黑色节点”</strong></p>\\n<p>也就是说，如上图中任意结点到其子树上的所有的<strong>NIL 结点</strong>，路上都只有<strong>相同数量</strong>的黑色结点</p>\\n<p>然后就是<em>Why</em>的问题了，下面引自<a href=\\\"https://baike.baidu.com/item/%E7%BA%A2%E9%BB%91%E6%A0%91\\\">百度百科</a>：</p>\\n<blockquote>\\n<ol>\\n<li>这些约束强制了红黑树的关键性质: 从根到叶子的最长的可能路径不多于最短的可能路径的两倍长。结果是这个树大致上是平衡的。</li>\\n<li>要知道为什么这些特性确保了这个结果，注意到性质 4 导致了路径不能有两个毗连的红色节点就足够了。最短的可能路径都是黑色节点，最长的可能路径有交替的红色和黑色节点。因为根据性质 5 所有最长的路径都有相同数目的黑色节点，<strong>这就表明了没有路径能多于任何其他路径的两倍长</strong>。</li>\\n</ol>\\n</blockquote>\\n<p>以上这个特性，保证了 RBT 的任何操作，最坏情况也不过是**O(logn)**，这看上去和 AVL-T 是一样的，但是我们继续往下看</p>\\n<p>说完两树的特性之后，我们说一下它们有何不同，为什么有了 AVL-T 之后，还要来个 RBT？一下引自<a href=\\\"https://www.geeksforgeeks.org/red-black-tree-set-1-introduction-2/\\\">GeekforGeek-《Red-Black Tree | Set 1 (Introduction)》</a>：</p>\\n<blockquote>\\n<p>The AVL trees are more balanced compared to Red-Black Trees, but they may cause more rotations during insertion and deletion. So if your application involves many frequent insertions and deletions, then Red Black trees should be preferred. And if the insertions and deletions are less frequent and search is a more frequent operation, then AVL tree should be preferred over Red-Black Tree.</p>\\n</blockquote>\\n<p>即是 AVL 树是<strong>绝对的平衡</strong>，而要保持这个绝对平衡就需要花费更多的旋转操作去达到这个绝对平衡，<strong>而 RBT 允许有那么一点不平衡</strong>，牺牲了那么一点不平衡，能够在保证操作成本仍在**O(logn)**下，减少许多旋转操作，所以 RBT 的整体效率，要比 AVL-T 高；</p>\\n<p>如果场景中经常有插入和删除等操作，相应的就会有很多旋转操作，在这个情况下，RBT 的表现无疑是更胜一筹；</p>\\n<p>如果场景中查询操作更多，那还是选 AVL-T 吧；</p>\\n<p>但是也因为如此，RBT 的平衡是用概念去描述的，而非像 AVL-T 一样可以用高度差去量化平衡，所以 RBT 的实现稍微复杂和难懂一些；</p>\\n<h5 id=\\\"插入简要分析\\\">插入简要分析</h5>\\n<p>在做插入分析之前，我们再说两件事：</p>\\n<ol>\\n<li><strong>插入的结点一开始就把他当成一个红色结点来插入；（为什么？因为当成黑色结点插入必然会违背 rule4）</strong></li>\\n<li><strong>NULL 结点虽然不做考虑，但是可以视为是黑色结点；</strong></li>\\n</ol>\\n<p>AVL-T 的平衡是通过旋转去调节的，而 RBT 则需要通过<strong>“着色”</strong>和旋转来重新达到平衡，在失衡的时候：</p>\\n<ol>\\n<li>首先尝试着色，看是否能还原平衡；</li>\\n<li>如果不能平衡，就分两种情况讨论，主要是针对新键的<strong>舅舅</strong>结点：<ol>\\n<li>如果舅舅结点是红色，那么就只需要重新着色；</li>\\n<li>如果是黑色，则先做旋转，再看是否需要重新着色；</li>\\n</ol>\\n</li>\\n</ol>\\n<p>关于具体的逻辑，可以去看<a href=\\\"https://www.geeksforgeeks.org/c-program-red-black-tree-insertion/\\\">GeekforGeek《C Program for Red Black Tree Insertion》</a></p>\\n<p>里面还有详细的 C 语言实现</p>\\n\";","export default \"<h3 id=\\\"introduction\\\">Introduction</h3>\\n<p>之前在搜 OOM 的时候，无意中发现了<a href=\\\"https://plumbr.io/\\\">https://plumbr.io/</a>这个网站，它们的产品就是做内存监控工具之类的，于是官网上也有很多关于 JVM 的 GC 方面的技术博客，简直和挖到宝藏了一样- -</p>\\n<p>本篇主要是针对对象在堆上的分代和 GC 事件再做一些细致的了解，主要也是参考网站里的内容</p>\\n<h3 id=\\\"object-generation\\\">Object Generation</h3>\\n<p>从我们熟悉的开始，堆内存大致可以分为三个区域，Young——新生代、Turned——老年代、PermGen——永久代</p>\\n<p>其中新生代里又默认以 8：1：1 分为 Eden：Survivor：Survivor</p>\\n<p><img src=\\\"../../../public/img/20190318213039.png\\\" alt=\\\"\\\"></p>\\n<h4 id=\\\"eden\\\">Eden</h4>\\n<p>在以前一篇<a href=\\\"./18669ga.html\\\">关于 JVM 的对象创建与访问</a>里提到过的 TLAB（Thead Local Allocatipn Buffer），它主要用于解决对象分配的时候需要先划定一些内存空间，一个内存空间仅允许一个线程进行操作，这样就可以避免用同步的<strong>高耗时</strong>代价去保证对象分配的正常进行</p>\\n<p>于是 Eden 空间进一步划分一个或者多个 TLAB 区域，并且保留一块公共区域，当 TLAB 空间不够分配对象的时候，会选择到公共区域继续分配，如果这里也没有空间了的话，那就会出发一次年轻代的 GC，也就是<strong>Minor GC</strong></p>\\n<p>这里有个 GC 的细节，也是之前没提到过的，我们说 GC 的基本操作是，扫描引用链，然后清除掉和根引用无关的对象，但是我们需要知道，对象之间的引用是可以跨代的，比如新生代对象可以挂在老年代对象上，所以一次直白的<strong>Reachability Analysis</strong>，可能会跨代进行</p>\\n<p><img src=\\\"../../../public/img/20190318214251.png\\\" alt=\\\"\\\"></p>\\n<p>但是这样做的话，<strong>分代 GC</strong>就没有意义了，于是 JVM 在这里使用了一个小伎俩：_card-marking_，详细可以参考<a href=\\\"http://psy-lob-saw.blogspot.com/2014/10/the-jvm-write-barrier-card-marking.html\\\">The JVM Write Barrier - Card Marking</a>，JVM 用这个算法粗略地将 Eden 区的有可能有跨代引用的对象进行标记，然后把它们移到 Survivor 区，然后剩下的对象就容易清理掉了——是不是很眼熟？这就是<strong>标记-复制</strong>算法</p>\\n<h4 id=\\\"survivor\\\">Survivor</h4>\\n<p>紧接着 Eden，是两个 Survivor 区，这两个区域也各自拥有姓名，**&quot;from&quot;<strong>和</strong>&quot;to&quot;<strong>，前面也提到过了，其中一个区域应该总是空的，所以实际上 Eden 区能用的最大空间是分配的</strong>90%**</p>\\n<p>当年轻代开始 GC 的时候，所有存活的年轻代会从 Eden 和 from 区域复制到 to 区域，有的年轻代对象也会从 from 区域直接分配到老年代，因为在这存活了 15 次，然后原先的 from 和 to 会互换身份；</p>\\n<p><img src=\\\"../../../public/img/20190318223935.png\\\" alt=\\\"\\\"></p>\\n<p>再提一嘴，15 次是默认值，可以用参数调整，然后大对象会更早的进入老年代，不受 age 限制，这个在前面也说过了</p>\\n<h4 id=\\\"old-generation\\\">Old Generation</h4>\\n<p>这部分的对象大多数长期存活的，或者是占用空间有点大的对象，而这里的 GC 算法也并不能简单地进行<strong>标记-复制</strong>，而是尽可能的用移动去减小对象之间的碎片空间</p>\\n<p>老年代的回收算法通常是根据不同的基础去确定的，但是原理上都是如下步骤：</p>\\n<ul>\\n<li>根据 GC Root，为对象标记可达性检测；</li>\\n<li>删除不可达对象；</li>\\n<li>压缩这些存活对象，让他们尽量靠近彼此，靠近空间的开端；</li>\\n</ul>\\n<h4 id=\\\"permgen--metaspace\\\">PermGen & Metaspace</h4>\\n<p>这两个就不再解释了，之前研究字符串的时候，有写过相关的：<a href=\\\"./46bhg0.html\\\">The Revelation of Java String</a></p>\\n<h3 id=\\\"gc-events\\\">GC Events</h3>\\n<h4 id=\\\"minor-gc\\\">Minor GC</h4>\\n<p><strong>Minor GC</strong>发生在年轻代，它的概念和意图其实也就这么简单，但是还有一些细节需要我们了解一下：</p>\\n<ol>\\n<li><strong>Minor GC</strong>发生在新对象无法分配内存的时候，所以在对象创建频率高的时候，<strong>Minor GC</strong>也更频发；</li>\\n<li>老年代到新生代的引用会被视为<strong>GC Root</strong>，新生代到老年代的引用会被忽略掉，然后移动到 Survivor 区；</li>\\n<li>需要明确的是：<strong>Minor GC</strong>也会触发<strong>“大暂停”</strong>，会停止所有的线程，但是一般来说，如果绝大部分对象都被视为垃圾而不必进行复制的话，那么这个暂停延迟基本上可以忽略不记，反之需要在复制的过程中多消耗一些延迟</li>\\n</ol>\\n<h4 id=\\\"major-gc-vs-full-gc\\\">Major GC vs Full GC</h4>\\n<p>虽然没有明确的文档或者规范定义出<strong>Major GC</strong>和<strong>Full GC</strong>，但我们还是可以参照<strong>Minor GC</strong>的定义方向，定义出这两种事件：</p>\\n<ul>\\n<li><strong>Major GC</strong>：清理老年代；</li>\\n<li><strong>Full GC</strong>：清理整个 Heap，新老年代；</li>\\n</ul>\\n<p>但我们还是不能完全将他们分开来，在很多情况下，<strong>Major GC</strong>都是由<strong>Minor GC</strong>触发的；但是另一方面，现代的 GC 算法比如<strong>G1</strong>，就是只进行了<strong>“部分清理”</strong>；</p>\\n<p>所以在这个问题上，我们的重心应该从<strong>“这个是 Major GC 还是 Full GC”</strong>变为<strong>“是否会触发大暂停，还是这次 GC 能和程序同步进行”</strong></p>\\n\";","export default \"<h3 id=\\\"介绍\\\">介绍</h3>\\n<p>本篇主要介绍了 MySQL 系统的核心引擎之一：**<em>InnoDB</em>*<em>，本系列所有的内容是基于姜承尧老师所著</em>《MySQL 技术内幕：InnoDB 存储引擎》*再加上整理的网络笔记、MySQL5.7 的<a href=\\\"https://dev.mysql.com/doc/refman/5.7/en/\\\">官方文档</a>和自己的一些理解</p>\\n<h3 id=\\\"innodb-引擎\\\">InnoDB 引擎</h3>\\n<p>MySQL5.5.8 以后的默认引擎，支持事务、行锁设计、外键、全文索引、非锁定读（默认读操作不会产生锁）；</p>\\n<p>使用多版本并发控制（MVCC）来支持高并发性，并实现了 4 中标准的隔离级别，能避免幻读；还提供了许多其他的特性来支持高性能高并发；</p>\\n<h3 id=\\\"体系架构\\\">体系架构</h3>\\n<p><img src=\\\"../../../public/img/20200611211157.png\\\" alt=\\\"\\\"></p>\\n<p>引擎的内存中主要包含以下工作区域：</p>\\n<ol>\\n<li>线程维护区域/线程所需内部数据结构区域</li>\\n<li>数据缓存，数据修改之后并不是马上进入磁盘文件，而是先缓存在这里；</li>\\n<li>重做日志（redo log）缓冲；</li>\\n</ol>\\n<h3 id=\\\"后台线程的分类\\\">后台线程的分类</h3>\\n<ol>\\n<li><strong>Master Thread</strong>：核心线程，主要负责将缓冲池中的数据异步地刷新到磁盘，保证数据一致性，具体表现为：<strong>刷脏页（InnoDB 1.2.x 之后被独立为 Page Cleaner Thread）、合并插入缓冲、回收 Undo 页（InnoDB 1.1 之后被独立为 Purge Thread）</strong>；</li>\\n<li><strong>IO Thread</strong>：引擎使用了大量的 AIO 技术来处理写 IO 请求，以提高数据库的性能，该线程的工作是<strong>处理这些 IO 的回调</strong>；而在 Windows 系统中，IO 线程的数量可以调整；</li>\\n<li><strong>Purge Thread</strong>：（InnoDB 1.1 引入）事务被提交后，其所使用的 undolog 可能不再被需要，该线程是负责<strong>回收</strong>这些被分配的 undo 页；该线程的线程数也支持配置；减轻 Master Thread 的负担，提高性能；</li>\\n<li><strong>Page Cleaner Thread</strong>：（InnoDB 1.2.x 引入），主要完成<strong>脏页的刷新</strong>操作，减轻 Master Thread 的负担，提高性能；</li>\\n</ol>\\n<h3 id=\\\"内存内存对象\\\">内存/内存对象</h3>\\n<h3 id=\\\"缓冲池\\\">缓冲池</h3>\\n<p>InnoDB 是基于磁盘文件存储的引擎，并将数据按页分配和管理。而由于 CPU 和磁盘的 IO 差距，想要提高性能，肯定是要利用系统内存区弥补 IO 差距的，所以我们可以简单地将缓冲池理解为磁盘数据文件的内存映射</p>\\n<h4 id=\\\"基本逻辑和内容\\\">基本逻辑和内容</h4>\\n<p><strong>读操作</strong>：系统启动的时候，会缓存（FIX）部分页到缓冲池里，在读页的时候，首先去缓冲池里找，如果找到了就直接读取，否则就从磁盘上读</p>\\n<p><strong>写操作</strong>：首先修改缓冲池中的页，然后再以一定频率刷新到次磁盘上，而且不是一有页更新就刷，而是根据一种叫<strong>Checkpoint</strong>的机制来刷</p>\\n<p>缓冲池的内存大小也直接影响了数据库的性能，我们也可以再配置中调节它的大小，也能够调节缓冲池的实例个数，多缓冲池实例的好处是每个页会更散列地分配到不同实例当中，好处是减少内部资源竞争</p>\\n<p>缓冲池的内存数据对象如下：</p>\\n<p><img src=\\\"../../../public/img/20200611215932.png\\\" alt=\\\"\\\"></p>\\n<h4 id=\\\"缓冲算法\\\">缓冲算法</h4>\\n<p>对于缓冲池的管理，引擎使用了基本的三种算法来完成：<strong>LRU List、Free List、Flush List</strong></p>\\n<p>假设我们知道基本的 LRU 缓存算法，但再 InnoDB 中的 LRU 算法又不太一样，它提供了一个**<em>midpoint</em>**来处理使用频率更新时，节点的放置策略：在新读取到页的时候，虽然是最新访问的，但是并不是放到队列的头部，而是放在大概中间的位置，默认是列表长度的 5/8 处，这个值也是可以进行配置的</p>\\n<p>而我们把这个点之前的页称为 new 列表，表示是使用频繁的热点数据，后面的称为 old 列表</p>\\n<p>InnoDB 之所以对算法进行改进的原因是：某些 SQL 操作可以能会把相当一部分的页甚至是所有页都刷出去，如果热点数据放在头部，那么它有可能最早被刷出，而下一次需要的时候，又从磁盘读取，非常影响性能</p>\\n<p><strong>Free 列表是干嘛的呢？</strong></p>\\n<p>在数据库刚启动的时候，LRU 列表是空的，没有任何的页，因为这时候页都在 Free 列表中。当需要从缓冲池中分页的时候，首先从 Free 列表中查找是否有可用的空闲页，有就直接将该页从 Free 列表移动到 LRU 列表</p>\\n<p><strong>Flush 列表和脏页</strong></p>\\n<p>在 LRU 列表中的页被修改之后，该页被称为脏页，这时候该页的数据和磁盘上对应的映射数据不一致，于是引擎通过 Checkpoint 机制将脏页刷回磁盘，我们把脏页都放在 Flush 列表中</p>\\n<p><em>注意：脏页即存在 LRU 列表中，页存在 Flush 列表中，两者逻辑上分工不同</em></p>\\n<h4 id=\\\"重做日志缓冲（redo-log-buffer）\\\">重做日志缓冲（redo log buffer）</h4>\\n<p>在一个事务的过程中，引擎会先把重做日志放到缓冲区，然后再按照频率刷新到重做日志文件。在这样的场景下，重做日志缓存一般不会占用太多内存，保证每秒的事务量在这个范围内就好，默认的 8M，也是能够配置的</p>\\n<blockquote>\\n<p>重做日志刷新的时机：</p>\\n<ol>\\n<li>Master Thread 每一秒都刷一次；</li>\\n<li>每个事务提交的时候也会刷；</li>\\n<li>重做日志空间剩余空间小于 1/2 的时候，也会刷；</li>\\n</ol>\\n</blockquote>\\n<h4 id=\\\"额外的内存\\\">额外的内存</h4>\\n<p>剩下还有一些额外内存，用于分配数据库所需的对象、数据结构等，用于记录锁信息和 LRU 以及等待的信息</p>\\n<h3 id=\\\"checkpoint-机制\\\">Checkpoint 机制</h3>\\n<p>之前说过，缓冲池的为了弥补 CPU 速度和磁盘速度而存在的，因此页操作都是先在缓冲池中完成，这种页叫脏页（缓冲池中页的版本比磁盘上的新）</p>\\n<p>当出现脏页的时候，需要把数据刷回磁盘，但不能每出现一次脏页就刷回，这样会增加 IO 的压力，从而性能会很差；同时，如果在刷页的时候系统挂了，那么数据就难以恢复；大部分数据库系统采用了**<em>Write Ahead Log</em>**的策略，即先写重做日志，再修改页，在出意外的时候，可用日志恢复；</p>\\n<p>但是这样又会带来新的问题：</p>\\n<ol>\\n<li><strong>缓冲池中脏页过多，重做日志的体积也会很大！</strong>万一宕机，那数据恢复的时间会很长，因为要从整个重做日志从头开始重做；</li>\\n<li><strong>缓冲池容量不是无限大的，重做日志的体积也不能无限大！</strong>所以必须找合适的时机强制将脏页刷到磁盘，保证缓冲池和重做日志体积不会压力过大；</li>\\n</ol>\\n<p>所以 Checkpoint 技术的出现主要是为了解决：</p>\\n<ol>\\n<li><p>缩短<strong>数据恢复</strong>的时间；</p>\\n<blockquote>\\n<p>当系统挂掉的时候，数据库<strong>不需要</strong>重做所有的日志，checkpoint 之前的页已经刷回磁盘；只需要恢复<strong>checkpoint 后面的页</strong>就行；</p>\\n</blockquote>\\n</li>\\n<li><p><strong>缓冲池不够用</strong>的时候，将脏页刷到磁盘；</p>\\n<blockquote>\\n<p>缓冲池不够用的时候，LRU 算法会溢出最近少使用的页，如果这个页是脏页，那么需要强制执行 checkpoint，将脏页刷回磁盘</p>\\n</blockquote>\\n</li>\\n<li><p><strong>重做日志不可用</strong>的时候，刷新脏页；</p>\\n<blockquote>\\n<p>在重做日志不够用的时候，强制产生 checkpoint，将缓冲池的页至少刷新到当前重做日志的位置；</p>\\n</blockquote>\\n</li>\\n</ol>\\n<p>于是 Checkpoint 机制的行为就了然了：<strong>将缓冲池中的脏页刷到磁盘！</strong>而它真正要关心的无非是<strong>每次要刷多次脏页、每次刷哪些脏页、什么时候应该要刷脏页</strong>了。</p>\\n<p>InnoDB 的 Checkpont 分为 2 种：</p>\\n<ol>\\n<li>Sharp Checkpoint：数据库即将关闭的时候将所有的脏页刷回磁盘；</li>\\n<li>Fuzzy Checkpoint：运行时的 Checkpoint，每次只刷新部分脏页，保证数据库可用性；</li>\\n</ol>\\n<h3 id=\\\"master-threadbefore-11\\\">Master Thread(before 1.1)</h3>\\n<p>Master Thread 具有最高的线程优先级，其内部由多个循环组成：主循环（loop）、后台循环（backgroud loop）、暂停循环（suspend loop）。主线程会根据数据库的状态在不同下循环之间进行切换</p>\\n<p>而我们先分析 InnoDB1.1 之前，Master Thread 的工作细节，再回头看，Master 线程中的哪些工作被独立为线程</p>\\n<h4 id=\\\"loop\\\">Loop</h4>\\n<p>主循环的工作有 2 部分：</p>\\n<ol>\\n<li>每秒一次：<ul>\\n<li>（总是）将重做日志（redo log）缓存刷到磁盘，即使事务还没提交；</li>\\n<li>（可能）合并插入缓冲，是否发生看 IO 的次数，次数小就可用执行合并；</li>\\n<li>（可能）最多刷 100 个脏页到磁盘，是否发生看脏页比例，超过某个阈值就刷；</li>\\n<li>（可能）如果当前用户没有活动，切换到后台循环；</li>\\n</ul>\\n</li>\\n<li>每 10 秒一次：<ul>\\n<li>（可能）刷 100 个脏页；</li>\\n<li>（总是）合并若干个插入缓冲；</li>\\n<li>（总是）刷重做日志（redo log）到磁盘；</li>\\n<li>（总是）删除无用的 Undo 页；</li>\\n<li>（总是）刷 100 个脏页或者 10 个脏页到磁盘；</li>\\n</ul>\\n</li>\\n</ol>\\n<p>在 InnoDB 版本迭代之后，每秒次可以刷不只 100 页脏页，可以自己在配置中调节，其中阈值也能够进行调节</p>\\n<p>除此之外，我们把删除 Undo 页的操作称为<strong>“full purge”</strong>，在引擎版本升级的时候，删除多少页 Undo 页也能够配置</p>\\n<h4 id=\\\"background-loop\\\">Background Loop</h4>\\n<p>如果当前用户没有活动，或者数据库要关闭了，那么就会切换到这个循环，它的工作有：</p>\\n<ol>\\n<li>（总是）删除无用的 Undo 页；</li>\\n<li>（总是）合并 20 个插入缓冲；</li>\\n<li>（总是）跳回主循环；</li>\\n<li>（可能）刷 100 页直到符合条件（在 flush loop 还在主线程的版本的时候，这会跳转到 flush loop）</li>\\n</ol>\\n<p>如果 flush loop 也没有什么可以做的了，主线程就会切换到 suspend loop，将线程挂起，等待事件发生</p>\\n<h4 id=\\\"version\\\">Version</h4>\\n<ul>\\n<li>InnoDB 1.1 开始，回收 Undo 页的工作独立为**<em>Purge Thread</em>**；</li>\\n<li>InnoDB 1.2 开始，刷脏页的工作独立为**<em>Page Cleaner Thread</em>**;</li>\\n</ul>\\n<h3 id=\\\"innodb-关键特性\\\">InnoDB 关键特性</h3>\\n<h4 id=\\\"插入缓冲（insert-buffer）\\\">插入缓冲（Insert Buffer）</h4>\\n<p>听名字可能会让人以为它是缓冲池的一部分，但其实它和数据页一样，是物理页的一个组成部分，它的作用是为了提高插入操作的性能</p>\\n<p>了解插入缓冲之前，我们先来了解一下引擎是如何根据索引插入行记录的：</p>\\n<ul>\\n<li><strong>在一般情况下</strong>，主键是行的唯一标识符，所以插入顺序一般是按照主键递增的顺序执行，不需要磁盘随机读取，若主键支持自动增长，那么这类情况的插入效率非常快；对于这样的<strong>按照表的主键构造的索引</strong>，我们称为<strong>聚集索引</strong>；</li>\\n<li><strong>但是每张表中不一定只有聚集索引</strong>，可能还有多个<strong>非聚集的辅助索引</strong>，比如需要按照某个字段进行查找，而且某个字段不是唯一的，这样就会产生非聚集索引；而在插入的时候，数据页虽然还是按照主键顺序存放，但是非聚集索引的叶子节点就不是顺序的了，这时候就需要<strong>离散地</strong>访问非聚集索引页，导致插入性能会有所下降（<strong>由 B+树的特性决定的非聚集索引插入的离散性</strong>）；</li>\\n<li><strong>某些情况下</strong>，非聚集索引也可能是顺序的或者说较为顺序，在插入索引值的时候手动保证绝对顺序（比如字段存的是绝对时间）；</li>\\n</ul>\\n<p>于是对于非聚集索引的插入或者更新操作，InnoDB 设计的<strong>Insert Buffer</strong>就会起到作用：</p>\\n<ul>\\n<li>对于非聚集索引的插入或者更新，不是直接插入到索引页中，而是先判断插入的非聚集索引页是否在缓冲池中：<ul>\\n<li>若在，则直接插入；</li>\\n<li>否则，先放到一个<strong>Insert Buffer</strong>对象中；</li>\\n</ul>\\n</li>\\n<li>然后再以一定频率和特定情况将<strong>Insert Buffer</strong>和辅助索引子节点进行<strong>merge</strong>操作；这时通常能够将多个插入操作合并到一个操作中（如果是针对同一张索引页的话），这就大大提高非聚集索引的插入性能；</li>\\n</ul>\\n<p>然而插入缓冲是需要条件的，只有符合以下条件的插入操作才能触发插入缓冲：</p>\\n<ol>\\n<li>索引是辅助索引（not primary key）；</li>\\n<li>索引不是唯一的（not unique）；</li>\\n</ol>\\n<h5 id=\\\"结构\\\">结构</h5>\\n<p>Insert Buffer 的数据结构是一棵 B+树，而且是全局共享的，负责对所有表的辅助索引进行 Insert Buffer</p>\\n<h4 id=\\\"改动缓冲（change-buffer）\\\">改动缓冲（Change Buffer）</h4>\\n<p>Change Buffer 可以理解为 Insert Buffer 的升级，它对更新操作都进行缓冲——INSERT、DELETE、UPDATE，分别对应 Insert Buffer、Delete Buffer、Purge Buffer；它面向的依然是非唯一的辅助索引</p>\\n<h4 id=\\\"合并插入缓冲\\\">合并插入缓冲</h4>\\n<p>接下来我们了解 Insert Buffer 的合并时机：</p>\\n<ul>\\n<li><p>辅助索引页被读取到缓冲池时；</p>\\n<blockquote>\\n<p>比如在执行 Select 操作的时候，先检查 Insert Buffer Bitmap，然后确认该辅助页在不在树上，在树上就把该页记录插入到辅助索引页中</p>\\n</blockquote>\\n</li>\\n<li><p>Insert Buffer Bitmap 页追踪到该辅助索引页已无可用空间的时候；</p>\\n</li>\\n<li><p>钟点工 Master Thread 在认真地工作；</p>\\n</li>\\n</ul>\\n<h4 id=\\\"两次写（doublewrite）\\\">两次写（Doublewrite）</h4>\\n<p>主要是保证数据页的可靠性，当数据库在写操作的中间时候发生宕机，这种情况叫做分写失败</p>\\n<p>我们之前了解过，重做日志中记录的是对该页的物理操作，但是如果这个页本身已经发生了损坏，再重做的意义就不大了，于是可用在<strong>应用重做日志之前</strong>，先准备一个页的副本，当写入失效的时候，先通过副本还原页，再进行重做，这就是<strong>两次写</strong>技术</p>\\n<p>我们先来看看 doublewrite 的架构</p>\\n<p><img src=\\\"../../../public/img/20200612112402.png\\\" alt=\\\"\\\"></p>\\n<p>doublewrite 由两部分组成：内存中的 doublewrite buffer，另一部分是物理磁盘上共享表空间中连续的 128 页，大小都是 2MB</p>\\n<p>在对脏页刷新的时候，不直接写到磁盘，而是先将脏页复制到内存中的 doublewrite buffer，然后通过该 buffer 分写两次，每次 1MB 顺序地写入共享表空间磁盘，然后马上调用 fsync 函数，同步磁盘</p>\\n<p>在这个过程中，因为 doublewrite 页是连续的，所以写入过程是顺序的，执行非常快；写完 doublewrite 页之后，再将 doublewrite buffer 中的页写如各个表空间文件中；</p>\\n<p>如果要恢复数据，InnoDB 可用从共享表空间中的 doublewrite 页中找到该页的副本，将其复制到表空间文件，再应用重做日志</p>\\n<h4 id=\\\"自适应哈希索引（adaptive-hash-index）\\\">自适应哈希索引（Adaptive Hash Index）</h4>\\n<p>一般情况下，索引页都是 B+树结构，虽然已经非常快了，但是随机访问还是没有哈希快，InnoDB 引擎会对表上索引页的查询进行监控，如果觉得建立哈希索引可以提示速度，则简历哈希索引，这个哈希索引是从 B+树页构造而来，所以建立的速度非常快</p>\\n<p>但是 AHI 的建立条件非常多但是这些条件不太需要用户去关心，引擎默认开启 AHI 的建立；</p>\\n<h4 id=\\\"异步-io（async-io）\\\">异步 IO（Async IO）</h4>\\n<p>AIO 对应的是 SIO（Sync IO），AIO 的优势是充分利用线程的优势，异步读取多个对象；其另一个优势就是可以合并多个 IO 操作，也能够提高性能；</p>\\n<p>需要注意的是，AIO 需要操作系统提供 Native 支持，Windows 和 Linus 都行，Max OS 不行；</p>\\n<h4 id=\\\"刷新邻接页（flush-neighbor-page）\\\">刷新邻接页（Flush Neighbor Page）</h4>\\n<p>再刷脏页的时候，引擎会检测该页所在区域（extent）的所有页，如果是脏页，那么一起刷新，这样做的好处的可以合并 IO，但是对于读写速度比较快的磁盘，应用这个特性可能会带来一些问题，于是推荐在机械磁盘开启这个设置，在 SSD 等高速磁盘关闭该设置</p>\\n\";","export default \"<h3 id=\\\"51-n-queenshard\\\">51. N-Queens(Hard)</h3>\\n<p>The <em>n</em>-queens puzzle is the problem of placing <em>n</em> queens on an <em>n</em>×<em>n</em> chessboard such that no two queens attack each other.</p>\\n<p><img src=\\\"https://assets.leetcode.com/uploads/2018/10/12/8-queens.png\\\" alt=\\\"img\\\"></p>\\n<p>Given an integer <em>n</em>, return all distinct solutions to the <em>n</em>-queens puzzle.</p>\\n<p>Each solution contains a distinct board configuration of the <em>n</em>-queens&#39; placement, where <code>&#39;Q&#39;</code> and <code>&#39;.&#39;</code> both indicate a queen and an empty space respectively.</p>\\n<p><strong>Example:</strong></p>\\n<pre><code>Input: 4\\nOutput: [\\n [&quot;.Q..&quot;,  // Solution 1\\n  &quot;...Q&quot;,\\n  &quot;Q...&quot;,\\n  &quot;..Q.&quot;],\\n\\n [&quot;..Q.&quot;,  // Solution 2\\n  &quot;Q...&quot;,\\n  &quot;...Q&quot;,\\n  &quot;.Q..&quot;]\\n]\\nExplanation: There exist two distinct solutions to the 4-queens puzzle as shown above.\\n</code></pre>\\n<h4 id=\\\"rough-backtracking\\\">Rough Backtracking</h4>\\n<p>要打这题，首先得做好下棋的一步关键的那一步：判断该位置是否能下，于是对于<strong>一张完整的棋盘</strong>来说，我们每下一步之前，就需要判断：</p>\\n<ol>\\n<li>同行同列是否有棋子；</li>\\n<li>对角线是否有棋子；</li>\\n</ol>\\n<p>于是为了做到这一步，大概会花n * n的时间</p>\\n<p>然后用回溯去做每一颗棋子的下棋判断，直观+回溯的考虑的话，确实是这样的，但是这题我们可以用一种更聪明的方式去解决；</p>\\n<h4 id=\\\"smart-backtracking\\\">Smart Backtracking</h4>\\n<p>首先我们的判断步骤，不需要遍历整张<code>n*n</code>的棋盘，我们也不需要事先准备好整张棋盘，如果我们把每一步棋当成一行去填补棋盘，第一行是一个棋子，第二行是第二个棋子，于是</p>\\n<ul>\\n<li>当我们下第<code>i</code>个棋子的时候，只需要判断前面的<code>0~i-1</code>行棋盘就好了；</li>\\n<li>关于对角线，我们也不必遍历整行，因为对角线的位置可以根据行差算出来，比如要插入第<code>i</code>行第<code>j</code>列的时候，需要判断上面<code>i-1</code>行的对角线的话，比如第2行在该行的对角线理论上为<code>j + i - 2</code>或者<code>j - (i - 2)</code>；</li>\\n</ul>\\n<p>于是我们的判断方法为：</p>\\n<pre><code class=\\\"hljs language-java\\\"><span class=\\\"hljs-keyword\\\">private</span> <span class=\\\"hljs-type\\\">boolean</span> <span class=\\\"hljs-title function_\\\">valid</span><span class=\\\"hljs-params\\\">(List&lt;String&gt; cb, <span class=\\\"hljs-type\\\">int</span> x, <span class=\\\"hljs-type\\\">int</span> y)</span> {\\n    <span class=\\\"hljs-keyword\\\">for</span> (<span class=\\\"hljs-type\\\">int</span> <span class=\\\"hljs-variable\\\">rowIndex</span> <span class=\\\"hljs-operator\\\">=</span> <span class=\\\"hljs-number\\\">0</span>; rowIndex &lt; x; rowIndex++) {\\n        <span class=\\\"hljs-type\\\">char</span>[] row = cb.get(rowIndex).toCharArray();\\n        <span class=\\\"hljs-keyword\\\">if</span> (row[y] == <span class=\\\"hljs-string\\\">&#x27;Q&#x27;</span>) {\\n            <span class=\\\"hljs-keyword\\\">return</span> <span class=\\\"hljs-literal\\\">false</span>;\\n        }\\n        <span class=\\\"hljs-type\\\">int</span> <span class=\\\"hljs-variable\\\">gap</span> <span class=\\\"hljs-operator\\\">=</span> x - rowIndex;\\n        <span class=\\\"hljs-keyword\\\">if</span> (y + gap &lt; row.length && row[y + gap] == <span class=\\\"hljs-string\\\">&#x27;Q&#x27;</span>) {\\n            <span class=\\\"hljs-keyword\\\">return</span> <span class=\\\"hljs-literal\\\">false</span>;\\n        }\\n        <span class=\\\"hljs-keyword\\\">if</span> (y - gap &gt;= <span class=\\\"hljs-number\\\">0</span> && row[y - gap] == <span class=\\\"hljs-string\\\">&#x27;Q&#x27;</span>) {\\n            <span class=\\\"hljs-keyword\\\">return</span> <span class=\\\"hljs-literal\\\">false</span>;\\n        }\\n    }\\n    <span class=\\\"hljs-keyword\\\">return</span> <span class=\\\"hljs-literal\\\">true</span>;\\n}\\n</code></pre>\\n<p>这样来说会将判断方法的效率基本提到线性，于是加上回溯：</p>\\n<pre><code class=\\\"hljs language-java\\\"><span class=\\\"hljs-type\\\">char</span>[] css;\\n\\n<span class=\\\"hljs-keyword\\\">public</span> List&lt;List&lt;String&gt;&gt; <span class=\\\"hljs-title function_\\\">solveNQueens</span><span class=\\\"hljs-params\\\">(<span class=\\\"hljs-type\\\">int</span> n)</span> {\\n    css = <span class=\\\"hljs-keyword\\\">new</span> <span class=\\\"hljs-title class_\\\">char</span>[n];\\n    List&lt;List&lt;String&gt;&gt; ans = <span class=\\\"hljs-keyword\\\">new</span> <span class=\\\"hljs-title class_\\\">ArrayList</span>&lt;&gt;();\\n    backtracking(ans, <span class=\\\"hljs-keyword\\\">new</span> <span class=\\\"hljs-title class_\\\">ArrayList</span>&lt;&gt;(), n, <span class=\\\"hljs-number\\\">0</span>);\\n    <span class=\\\"hljs-keyword\\\">return</span> ans;\\n}\\n\\n<span class=\\\"hljs-keyword\\\">private</span> <span class=\\\"hljs-keyword\\\">void</span> <span class=\\\"hljs-title function_\\\">backtracking</span><span class=\\\"hljs-params\\\">(List&lt;List&lt;String&gt;&gt; ans, List&lt;String&gt; cb, <span class=\\\"hljs-type\\\">int</span> n, <span class=\\\"hljs-type\\\">int</span> row)</span> {\\n    <span class=\\\"hljs-keyword\\\">if</span> (row == n) {\\n        ans.add(<span class=\\\"hljs-keyword\\\">new</span> <span class=\\\"hljs-title class_\\\">ArrayList</span>&lt;&gt;(cb));\\n    } <span class=\\\"hljs-keyword\\\">else</span> {\\n        <span class=\\\"hljs-keyword\\\">for</span> (<span class=\\\"hljs-type\\\">int</span> <span class=\\\"hljs-variable\\\">i</span> <span class=\\\"hljs-operator\\\">=</span> <span class=\\\"hljs-number\\\">0</span>; i &lt; n; i++) {\\n            <span class=\\\"hljs-keyword\\\">if</span> (valid(cb, row, i)) {\\n                Arrays.fill(css, <span class=\\\"hljs-string\\\">&#x27;.&#x27;</span>);\\n                css[i] = <span class=\\\"hljs-string\\\">&#x27;Q&#x27;</span>;\\n                cb.add(String.valueOf(css));\\n                backtracking(ans, cb, n, row + <span class=\\\"hljs-number\\\">1</span>);\\n                cb.remove(cb.size() - <span class=\\\"hljs-number\\\">1</span>);\\n            }\\n        }\\n    }\\n}\\n</code></pre>\\n<h4 id=\\\"elegant-backtracking\\\">Elegant Backtracking</h4>\\n<p>很遗憾的是，我们上面再聪明再接近线性的判断效率，其实还是抵不过常数级的，所以我们上面的优化过后的code也仅是打到43.6%，我们再来整理一下我们的<strong>valid</strong>函数：</p>\\n<ul>\\n<li>同列不能下；</li>\\n<li>左右对角线不能下；</li>\\n</ul>\\n<p>同列的话，我们可以用一个n长度数组去记录，这个数组可以所有行共用；</p>\\n<p>对角线的话，我们前面做<a href=\\\"./11z93zc.html?hash=22be3288\\\"><strong>MultiplyString</strong></a>，有想出来过一个对角线的技巧，于是这里我们也可以将所有的对角线压缩成一行：</p>\\n<pre><code>对于一个4*4的棋盘：\\n\\n对于135°的右向对角线，我们可以将2维的压缩成\\n                                 0\\n   j = 0  1  2  3               1 1              \\ni = 0  0  1  2  3              2 2 2        \\n    1  1  2  3  4     --&gt;     3 3 3 3  --&gt;  drSet：0 1 2 3 4 5 6\\n    2  2  3  4  5              4 4 4\\n    3  3  4  5  6               5 5\\n                                 6\\n行列关系和压缩数组的关系可以是：\\n    dri = col + row\\n    \\n同理对于45°的左向对角线：\\n                                   3\\n   j =  0   1   2   3            2  2\\ni = 0   0   1   2   3          1  1  1\\n    1  -1   0   1   2  --&gt;   0  0  0  0  --&gt; dlSet: -3 -2 -1 0 1 2 3\\n    2  -2  -1   0   1         -1 -1 -1 \\n    3  -3  -2  -1   0           -2 -2\\n                                  -3\\n行列关系和压缩数组的关系可以是：\\n    dli = col - row\\n    \\n然后为了数组下标好处理，我们可以加上一个n\\n    dli = col - row + n      --&gt; dlSet: 1 2 3 4 5 6 7\\n</code></pre>\\n<p>于是这两行就能在代表整个棋盘的左右对角线，<strong>通过规律可以发现，对角线压缩数组的长度不会超过2n</strong>，于是我们的程序可以在线性的时间内判断对角线和列的棋位是否合法了：</p>\\n<pre><code class=\\\"hljs language-java\\\"><span class=\\\"hljs-keyword\\\">public</span> List&lt;List&lt;String&gt;&gt; <span class=\\\"hljs-title function_\\\">solveNQueens</span><span class=\\\"hljs-params\\\">(<span class=\\\"hljs-type\\\">int</span> n)</span> {\\n    List&lt;List&lt;String&gt;&gt; ans = <span class=\\\"hljs-keyword\\\">new</span> <span class=\\\"hljs-title class_\\\">ArrayList</span>&lt;&gt;();\\n    backtracking(ans, <span class=\\\"hljs-keyword\\\">new</span> <span class=\\\"hljs-title class_\\\">ArrayList</span>&lt;&gt;(), <span class=\\\"hljs-keyword\\\">new</span> <span class=\\\"hljs-title class_\\\">boolean</span>[n], <span class=\\\"hljs-keyword\\\">new</span> <span class=\\\"hljs-title class_\\\">boolean</span>[n * <span class=\\\"hljs-number\\\">2</span>], <span class=\\\"hljs-keyword\\\">new</span> <span class=\\\"hljs-title class_\\\">boolean</span>[n * <span class=\\\"hljs-number\\\">2</span>], n, <span class=\\\"hljs-number\\\">0</span>);\\n    <span class=\\\"hljs-keyword\\\">return</span> ans;\\n}\\n\\n<span class=\\\"hljs-keyword\\\">private</span> <span class=\\\"hljs-keyword\\\">void</span> <span class=\\\"hljs-title function_\\\">backtracking</span><span class=\\\"hljs-params\\\">(List&lt;List&lt;String&gt;&gt; ans, List&lt;String&gt; cb,\\n                           <span class=\\\"hljs-type\\\">boolean</span>[] colSet, <span class=\\\"hljs-type\\\">boolean</span>[] dlSet, <span class=\\\"hljs-type\\\">boolean</span>[] drSet, <span class=\\\"hljs-type\\\">int</span> n, <span class=\\\"hljs-type\\\">int</span> row)</span> {\\n    <span class=\\\"hljs-keyword\\\">if</span> (row == n) {\\n        ans.add(<span class=\\\"hljs-keyword\\\">new</span> <span class=\\\"hljs-title class_\\\">ArrayList</span>&lt;&gt;(cb));\\n    } <span class=\\\"hljs-keyword\\\">else</span> {\\n        <span class=\\\"hljs-keyword\\\">for</span> (<span class=\\\"hljs-type\\\">int</span> <span class=\\\"hljs-variable\\\">col</span> <span class=\\\"hljs-operator\\\">=</span> <span class=\\\"hljs-number\\\">0</span>; col &lt; n; col++) {\\n            <span class=\\\"hljs-type\\\">int</span> <span class=\\\"hljs-variable\\\">dli</span> <span class=\\\"hljs-operator\\\">=</span> col - row + n;\\n            <span class=\\\"hljs-type\\\">int</span> <span class=\\\"hljs-variable\\\">dri</span> <span class=\\\"hljs-operator\\\">=</span> col + row;\\n            <span class=\\\"hljs-keyword\\\">if</span> (colSet[col] || dlSet[dli] || drSet[dri]) {\\n                <span class=\\\"hljs-keyword\\\">continue</span>;\\n            }\\n            colSet[col] = dlSet[dli] = drSet[dri] =  <span class=\\\"hljs-literal\\\">true</span>;\\n            <span class=\\\"hljs-type\\\">char</span>[] css = <span class=\\\"hljs-keyword\\\">new</span> <span class=\\\"hljs-title class_\\\">char</span>[n];\\n            Arrays.fill(css, <span class=\\\"hljs-string\\\">&#x27;.&#x27;</span>);\\n            css[col] = <span class=\\\"hljs-string\\\">&#x27;Q&#x27;</span>;\\n            cb.add(String.valueOf(css));\\n            backtracking(ans, cb, colSet, dlSet, drSet, n, row + <span class=\\\"hljs-number\\\">1</span>);\\n            cb.remove(cb.size() - <span class=\\\"hljs-number\\\">1</span>);\\n            colSet[col] = dlSet[dli] = drSet[dri] =  <span class=\\\"hljs-literal\\\">false</span>;\\n        }\\n    }\\n}\\n</code></pre>\\n<h3 id=\\\"52n-queensiihard\\\">52.N-QueensII(Hard)</h3>\\n<p>The <em>n</em>-queens puzzle is the problem of placing <em>n</em> queens on an <em>n</em>×<em>n</em> chessboard such that no two queens attack each other.</p>\\n<p><img src=\\\"https://assets.leetcode.com/uploads/2018/10/12/8-queens.png\\\" alt=\\\"img\\\"></p>\\n<p>Given an integer <em>n</em>, return the number of distinct solutions to the <em>n</em>-queens puzzle.</p>\\n<p><strong>Example:</strong></p>\\n<pre><code>Input: 4\\nOutput: 2\\nExplanation: There are two distinct solutions to the 4-queens puzzle as shown below.\\n[\\n [&quot;.Q..&quot;,  // Solution 1\\n  &quot;...Q&quot;,\\n  &quot;Q...&quot;,\\n  &quot;..Q.&quot;],\\n\\n [&quot;..Q.&quot;,  // Solution 2\\n  &quot;Q...&quot;,\\n  &quot;...Q&quot;,\\n  &quot;.Q..&quot;]\\n]\\n</code></pre>\\n<h4 id=\\\"solution-i\\\">Solution I</h4>\\n<p>没什么，就改一改上一题而已</p>\\n<pre><code class=\\\"hljs language-java\\\"><span class=\\\"hljs-type\\\">int</span> <span class=\\\"hljs-variable\\\">ans</span> <span class=\\\"hljs-operator\\\">=</span> <span class=\\\"hljs-number\\\">0</span>;\\n\\n<span class=\\\"hljs-keyword\\\">public</span> <span class=\\\"hljs-type\\\">int</span> <span class=\\\"hljs-title function_\\\">totalNQueens</span><span class=\\\"hljs-params\\\">(<span class=\\\"hljs-type\\\">int</span> n)</span> {\\n    backtracking(<span class=\\\"hljs-keyword\\\">new</span> <span class=\\\"hljs-title class_\\\">ArrayList</span>&lt;&gt;(), n, <span class=\\\"hljs-number\\\">0</span>);\\n    <span class=\\\"hljs-keyword\\\">return</span> ans;\\n}\\n\\n<span class=\\\"hljs-keyword\\\">private</span> <span class=\\\"hljs-keyword\\\">void</span> <span class=\\\"hljs-title function_\\\">backtracking</span><span class=\\\"hljs-params\\\">(List&lt;String&gt; cb, <span class=\\\"hljs-type\\\">int</span> n, <span class=\\\"hljs-type\\\">int</span> row)</span> {\\n    <span class=\\\"hljs-keyword\\\">if</span> (row == n) {\\n        ans++;\\n    } <span class=\\\"hljs-keyword\\\">else</span> {\\n        <span class=\\\"hljs-keyword\\\">for</span> (<span class=\\\"hljs-type\\\">int</span> <span class=\\\"hljs-variable\\\">i</span> <span class=\\\"hljs-operator\\\">=</span> <span class=\\\"hljs-number\\\">0</span>; i &lt; n; i++) {\\n            <span class=\\\"hljs-keyword\\\">if</span> (valid(cb, row, i)) {\\n                <span class=\\\"hljs-type\\\">char</span>[] css = <span class=\\\"hljs-keyword\\\">new</span> <span class=\\\"hljs-title class_\\\">char</span>[n];\\n                Arrays.fill(css, <span class=\\\"hljs-string\\\">&#x27;.&#x27;</span>);\\n                css[i] = <span class=\\\"hljs-string\\\">&#x27;Q&#x27;</span>;\\n                cb.add(String.valueOf(css));\\n                backtracking(cb, n, row + <span class=\\\"hljs-number\\\">1</span>);\\n                cb.remove(cb.size() - <span class=\\\"hljs-number\\\">1</span>);\\n            }\\n        }\\n    }\\n}\\n\\n<span class=\\\"hljs-keyword\\\">private</span> <span class=\\\"hljs-type\\\">boolean</span> <span class=\\\"hljs-title function_\\\">valid</span><span class=\\\"hljs-params\\\">(List&lt;String&gt; cb, <span class=\\\"hljs-type\\\">int</span> x, <span class=\\\"hljs-type\\\">int</span> y)</span> {\\n    <span class=\\\"hljs-keyword\\\">for</span> (<span class=\\\"hljs-type\\\">int</span> <span class=\\\"hljs-variable\\\">rowIndex</span> <span class=\\\"hljs-operator\\\">=</span> <span class=\\\"hljs-number\\\">0</span>; rowIndex &lt; x; rowIndex++) {\\n        <span class=\\\"hljs-type\\\">char</span>[] row = cb.get(rowIndex).toCharArray();\\n        <span class=\\\"hljs-keyword\\\">if</span> (row[y] == <span class=\\\"hljs-string\\\">&#x27;Q&#x27;</span>) {\\n            <span class=\\\"hljs-keyword\\\">return</span> <span class=\\\"hljs-literal\\\">false</span>;\\n        }\\n        <span class=\\\"hljs-type\\\">int</span> <span class=\\\"hljs-variable\\\">gap</span> <span class=\\\"hljs-operator\\\">=</span> x - rowIndex;\\n        <span class=\\\"hljs-keyword\\\">if</span> (y + gap &lt; row.length && row[y + gap] == <span class=\\\"hljs-string\\\">&#x27;Q&#x27;</span>) {\\n            <span class=\\\"hljs-keyword\\\">return</span> <span class=\\\"hljs-literal\\\">false</span>;\\n        }\\n        <span class=\\\"hljs-keyword\\\">if</span> (y - gap &gt;= <span class=\\\"hljs-number\\\">0</span> && row[y - gap] == <span class=\\\"hljs-string\\\">&#x27;Q&#x27;</span>) {\\n            <span class=\\\"hljs-keyword\\\">return</span> <span class=\\\"hljs-literal\\\">false</span>;\\n        }\\n    }\\n    <span class=\\\"hljs-keyword\\\">return</span> <span class=\\\"hljs-literal\\\">true</span>;\\n}\\n</code></pre>\\n<h4 id=\\\"solution-ii\\\">Solution II</h4>\\n<pre><code class=\\\"hljs language-java\\\"><span class=\\\"hljs-type\\\">int</span> <span class=\\\"hljs-variable\\\">ans</span> <span class=\\\"hljs-operator\\\">=</span> <span class=\\\"hljs-number\\\">0</span>;\\n<span class=\\\"hljs-type\\\">boolean</span>[] colSet, drSet, dlSet;\\n\\n<span class=\\\"hljs-keyword\\\">public</span> <span class=\\\"hljs-type\\\">int</span> <span class=\\\"hljs-title function_\\\">totalNQueens</span><span class=\\\"hljs-params\\\">(<span class=\\\"hljs-type\\\">int</span> n)</span> {\\n    colSet = <span class=\\\"hljs-keyword\\\">new</span> <span class=\\\"hljs-title class_\\\">boolean</span>[n];\\n    drSet = <span class=\\\"hljs-keyword\\\">new</span> <span class=\\\"hljs-title class_\\\">boolean</span>[n * <span class=\\\"hljs-number\\\">2</span>];\\n    dlSet = <span class=\\\"hljs-keyword\\\">new</span> <span class=\\\"hljs-title class_\\\">boolean</span>[n * <span class=\\\"hljs-number\\\">2</span>];\\n    backtracking(n, <span class=\\\"hljs-number\\\">0</span>);\\n    <span class=\\\"hljs-keyword\\\">return</span> ans;\\n}\\n\\n<span class=\\\"hljs-keyword\\\">private</span> <span class=\\\"hljs-keyword\\\">void</span> <span class=\\\"hljs-title function_\\\">backtracking</span><span class=\\\"hljs-params\\\">(<span class=\\\"hljs-type\\\">int</span> n, <span class=\\\"hljs-type\\\">int</span> row)</span> {\\n    <span class=\\\"hljs-keyword\\\">if</span> (row == n) {\\n        ans++;\\n    } <span class=\\\"hljs-keyword\\\">else</span> {\\n        <span class=\\\"hljs-keyword\\\">for</span> (<span class=\\\"hljs-type\\\">int</span> <span class=\\\"hljs-variable\\\">col</span> <span class=\\\"hljs-operator\\\">=</span> <span class=\\\"hljs-number\\\">0</span>; col &lt; n; col++) {\\n            <span class=\\\"hljs-type\\\">int</span> <span class=\\\"hljs-variable\\\">dli</span> <span class=\\\"hljs-operator\\\">=</span> col - row + n;\\n            <span class=\\\"hljs-type\\\">int</span> <span class=\\\"hljs-variable\\\">dri</span> <span class=\\\"hljs-operator\\\">=</span> col + row;\\n            <span class=\\\"hljs-keyword\\\">if</span> (colSet[col] || drSet[dri] || dlSet[dli]) {\\n                <span class=\\\"hljs-keyword\\\">continue</span>;\\n            }\\n            colSet[col] = drSet[dri] = dlSet[dli] = <span class=\\\"hljs-literal\\\">true</span>;\\n            backtracking(n, row + <span class=\\\"hljs-number\\\">1</span>);\\n            colSet[col] = drSet[dri] = dlSet[dli] = <span class=\\\"hljs-literal\\\">false</span>;\\n        }\\n    }\\n}\\n</code></pre>\\n<h3 id=\\\"53-maximun-subarrayeasy\\\">53. Maximun SubArray(Easy)</h3>\\n<p>Given an integer array <code>nums</code>, find the contiguous subarray (containing at least one number) which has the largest sum and return its sum.</p>\\n<p><strong>Example:</strong></p>\\n<pre><code>Input: [-2,1,-3,4,-1,2,1,-5,4],\\nOutput: 6\\nExplanation: [4,-1,2,1] has the largest sum = 6.\\n</code></pre>\\n<p><strong>Follow up:</strong></p>\\n<p>If you have figured out the O(<em>n</em>) solution, try coding another solution using the divide and conquer approach, which is more subtle.</p>\\n<h4 id=\\\"dp\\\">DP</h4>\\n<p>不多说，在<a href=\\\"./188zp6j.html\\\">地痞</a>有分析过的</p>\\n<pre><code class=\\\"hljs language-java\\\"><span class=\\\"hljs-keyword\\\">public</span> <span class=\\\"hljs-type\\\">int</span> <span class=\\\"hljs-title function_\\\">maxSubArray</span><span class=\\\"hljs-params\\\">(<span class=\\\"hljs-type\\\">int</span>[] nums)</span> {\\n    <span class=\\\"hljs-type\\\">int</span> <span class=\\\"hljs-variable\\\">rMax</span> <span class=\\\"hljs-operator\\\">=</span> <span class=\\\"hljs-number\\\">0</span>, max = Integer.MIN_VALUE;\\n    <span class=\\\"hljs-keyword\\\">for</span> (<span class=\\\"hljs-type\\\">int</span> current: nums) {\\n        rMax = Math.max(current, current + rMax);\\n        max = Math.max(max, rMax);\\n    }\\n    <span class=\\\"hljs-keyword\\\">return</span> max;\\n}\\n</code></pre>\\n<h3 id=\\\"54-spiral-matrixmedium\\\">54. Spiral Matrix(Medium)</h3>\\n<p>Given a matrix of <em>m</em> x <em>n</em> elements (<em>m</em> rows, <em>n</em> columns), return all elements of the matrix in spiral order.</p>\\n<p><strong>Example 1:</strong></p>\\n<pre><code>Input:\\n[\\n [ 1, 2, 3 ],\\n [ 4, 5, 6 ],\\n [ 7, 8, 9 ]\\n]\\nOutput: [1,2,3,6,9,8,7,4,5]\\n</code></pre>\\n<p><strong>Example 2:</strong></p>\\n<pre><code>Input:\\n[\\n  [1, 2, 3, 4],\\n  [5, 6, 7, 8],\\n  [9,10,11,12]\\n]\\nOutput: [1,2,3,4,8,12,11,10,9,5,6,7]\\n</code></pre>\\n<h4 id=\\\"brute-force\\\">Brute Force</h4>\\n<p>hmmmmm，强打就完事了，怎么强打呢？四个关键点：</p>\\n<ol>\\n<li><p>起点</p>\\n<blockquote>\\n<p>我们假设每次我们都从当前圈的左上角为起点</p>\\n</blockquote>\\n</li>\\n<li><p>方向</p>\\n<blockquote>\\n<p>我们假设每次从起点开始的话，转一圈经过的方向恒为：右-下-左-上</p>\\n</blockquote>\\n<pre><code>比如一个3X4的矩阵，从起点0,0开始的话：\\n    → → → →                       \\n    1 2 3 4          1 2 3 4 ↓        1 2 3 4            1  2  3  4\\n                ==&gt;        5 ↓  ==&gt;         5    ==&gt;  ↑ 10        5\\n                           6 ↓        9 8 7 6            9  8  7  6\\n                                      ← ← ← ←\\n于是第一圈就完成了，四个方向均只执行到边界了\\n</code></pre>\\n</li>\\n<li><p>边界</p>\\n<blockquote>\\n<p>0我们设每个方向都会有边界，每经过一个方向，边界就上涨或者下调；</p>\\n<p>比如一个3X4的矩阵，第一圈的时候，按照下标和方向顺序的话，边界值是：3-2-0-1</p>\\n<p>关于上涨和下调，接着看下一点</p>\\n</blockquote>\\n</li>\\n<li><p>单向行进</p>\\n<blockquote>\\n<p>我们有了起点、方向、边界了之后，就可以开始单向行进了，开始由0,0为起点，朝右行进，边界值为3，于是我们从起点开始遍历列下标</p>\\n</blockquote>\\n<pre><code>模拟第一圈的情况：\\n1. 0,0 - 0,1 - 0,2 - 0,3；到达边右界；于是右边界减少到2；轮到下一个方向；\\n2. 0,3 - 1,3 - 2,3；到达下边界；于是下边界增加到1；轮到下一个方向；\\n3. 2,3 - 2,2 - 2,1 - 2,0；到达左边界；于是左边界增加到1；轮到下一个方向；\\n4. 2,0 - 1,0；到达上边界；于是上边界减少到2；轮到下一个方向；\\n</code></pre>\\n</li>\\n</ol>\\n<p>于是代码为：</p>\\n<pre><code class=\\\"hljs language-java\\\"><span class=\\\"hljs-keyword\\\">public</span> List&lt;Integer&gt; <span class=\\\"hljs-title function_\\\">spiralOrder</span><span class=\\\"hljs-params\\\">(<span class=\\\"hljs-type\\\">int</span>[][] matrix)</span> {\\n    LinkedList&lt;Integer&gt; ans = <span class=\\\"hljs-keyword\\\">new</span> <span class=\\\"hljs-title class_\\\">LinkedList</span>&lt;&gt;();\\n    <span class=\\\"hljs-keyword\\\">if</span> (matrix.length == <span class=\\\"hljs-number\\\">0</span>) {\\n        <span class=\\\"hljs-keyword\\\">return</span> ans;\\n    }\\n    <span class=\\\"hljs-type\\\">int</span>[] range = <span class=\\\"hljs-keyword\\\">new</span> <span class=\\\"hljs-title class_\\\">int</span>[]{matrix[<span class=\\\"hljs-number\\\">0</span>].length - <span class=\\\"hljs-number\\\">1</span>, matrix.length - <span class=\\\"hljs-number\\\">1</span>, <span class=\\\"hljs-number\\\">0</span>, <span class=\\\"hljs-number\\\">1</span>};\\n    <span class=\\\"hljs-type\\\">int</span>[] point = <span class=\\\"hljs-keyword\\\">new</span> <span class=\\\"hljs-title class_\\\">int</span>[]{<span class=\\\"hljs-number\\\">0</span>, <span class=\\\"hljs-number\\\">0</span>};\\n    <span class=\\\"hljs-type\\\">int</span> <span class=\\\"hljs-variable\\\">rangeIndex</span> <span class=\\\"hljs-operator\\\">=</span> <span class=\\\"hljs-number\\\">0</span>;\\n    ans.add(matrix[<span class=\\\"hljs-number\\\">0</span>][<span class=\\\"hljs-number\\\">0</span>]);\\n    <span class=\\\"hljs-keyword\\\">while</span> (ans.size() &lt; matrix.length * matrix[<span class=\\\"hljs-number\\\">0</span>].length) {\\n        <span class=\\\"hljs-type\\\">int</span> <span class=\\\"hljs-variable\\\">nowRange</span> <span class=\\\"hljs-operator\\\">=</span> range[rangeIndex];\\n        <span class=\\\"hljs-keyword\\\">if</span> (rangeIndex == <span class=\\\"hljs-number\\\">0</span>) {\\n            <span class=\\\"hljs-keyword\\\">for</span> (<span class=\\\"hljs-type\\\">int</span> <span class=\\\"hljs-variable\\\">i</span> <span class=\\\"hljs-operator\\\">=</span> point[<span class=\\\"hljs-number\\\">1</span>] + <span class=\\\"hljs-number\\\">1</span>; i &lt;= nowRange; i++) {\\n                ans.add(matrix[point[<span class=\\\"hljs-number\\\">0</span>]][i]);\\n            }\\n            point[<span class=\\\"hljs-number\\\">1</span>] = nowRange;\\n            range[rangeIndex] -= <span class=\\\"hljs-number\\\">1</span>;\\n        }\\n        <span class=\\\"hljs-keyword\\\">if</span> (rangeIndex == <span class=\\\"hljs-number\\\">1</span>){\\n            <span class=\\\"hljs-keyword\\\">for</span> (<span class=\\\"hljs-type\\\">int</span> <span class=\\\"hljs-variable\\\">i</span> <span class=\\\"hljs-operator\\\">=</span> point[<span class=\\\"hljs-number\\\">0</span>] + <span class=\\\"hljs-number\\\">1</span>; i &lt;= nowRange; i++) {\\n                ans.add(matrix[i][point[<span class=\\\"hljs-number\\\">1</span>]]);\\n            }\\n            point[<span class=\\\"hljs-number\\\">0</span>] = nowRange;\\n            range[rangeIndex] -= <span class=\\\"hljs-number\\\">1</span>;\\n        }\\n        <span class=\\\"hljs-keyword\\\">if</span> (rangeIndex == <span class=\\\"hljs-number\\\">2</span>) {\\n            <span class=\\\"hljs-keyword\\\">for</span> (<span class=\\\"hljs-type\\\">int</span> <span class=\\\"hljs-variable\\\">i</span> <span class=\\\"hljs-operator\\\">=</span> point[<span class=\\\"hljs-number\\\">1</span>] - <span class=\\\"hljs-number\\\">1</span>; i &gt;= nowRange; i--) {\\n                ans.add(matrix[point[<span class=\\\"hljs-number\\\">0</span>]][i]);\\n            }\\n            point[<span class=\\\"hljs-number\\\">1</span>] = nowRange;\\n            range[rangeIndex] += <span class=\\\"hljs-number\\\">1</span>;\\n        }\\n        <span class=\\\"hljs-keyword\\\">if</span> (rangeIndex == <span class=\\\"hljs-number\\\">3</span>) {\\n            <span class=\\\"hljs-keyword\\\">for</span> (<span class=\\\"hljs-type\\\">int</span> <span class=\\\"hljs-variable\\\">i</span> <span class=\\\"hljs-operator\\\">=</span> point[<span class=\\\"hljs-number\\\">0</span>] - <span class=\\\"hljs-number\\\">1</span>; i &gt;= nowRange; i--) {\\n                ans.add(matrix[i][point[<span class=\\\"hljs-number\\\">1</span>]]);\\n            }\\n            point[<span class=\\\"hljs-number\\\">0</span>] = nowRange;\\n            range[rangeIndex] += <span class=\\\"hljs-number\\\">1</span>;\\n        }\\n        rangeIndex = nextRange(rangeIndex);\\n    }\\n    <span class=\\\"hljs-keyword\\\">return</span> ans;\\n}\\n\\n<span class=\\\"hljs-keyword\\\">private</span> <span class=\\\"hljs-type\\\">int</span> <span class=\\\"hljs-title function_\\\">nextRange</span><span class=\\\"hljs-params\\\">(<span class=\\\"hljs-type\\\">int</span> i)</span> {\\n    <span class=\\\"hljs-keyword\\\">return</span> i + <span class=\\\"hljs-number\\\">1</span> &lt; <span class=\\\"hljs-number\\\">4</span> ? i + <span class=\\\"hljs-number\\\">1</span> : <span class=\\\"hljs-number\\\">0</span>;\\n}\\n</code></pre>\\n<h3 id=\\\"55jump-gamemedium\\\">55.Jump Game(Medium)</h3>\\n<p>Given an array of non-negative integers, you are initially positioned at the first index of the array.</p>\\n<p>Each element in the array represents your maximum jump length at that position.</p>\\n<p>Determine if you are able to reach the last index.</p>\\n<p><strong>Example 1:</strong></p>\\n<pre><code>Input: [2,3,1,1,4]\\nOutput: true\\nExplanation: Jump 1 step from index 0 to 1, then 3 steps to the last index.\\n</code></pre>\\n<p><strong>Example 2:</strong></p>\\n<pre><code>Input: [3,2,1,0,4]\\nOutput: false\\nExplanation: You will always arrive at index 3 no matter what. Its maximum\\n             jump length is 0, which makes it impossible to reach the last index.\\n</code></pre>\\n<p>这题就不多解释了，在<a href=\\\"./1flo1c0.html\\\">DP Again</a>中有详细解读过，但是在再一次做到这题的时候，还是写出了一种更优的DP，因为一时间忘了贪婪解法怎么写出来了- -</p>\\n<h4 id=\\\"dp-1\\\">DP</h4>\\n<pre><code class=\\\"hljs language-java\\\"><span class=\\\"hljs-keyword\\\">public</span> <span class=\\\"hljs-type\\\">boolean</span> <span class=\\\"hljs-title function_\\\">canJump</span><span class=\\\"hljs-params\\\">(<span class=\\\"hljs-type\\\">int</span>[] nums)</span> {\\n    <span class=\\\"hljs-type\\\">boolean</span>[] can = <span class=\\\"hljs-keyword\\\">new</span> <span class=\\\"hljs-title class_\\\">boolean</span>[nums.length];\\n    can[nums.length - <span class=\\\"hljs-number\\\">1</span>] = <span class=\\\"hljs-literal\\\">true</span>;\\n    <span class=\\\"hljs-keyword\\\">for</span> (<span class=\\\"hljs-type\\\">int</span> <span class=\\\"hljs-variable\\\">i</span> <span class=\\\"hljs-operator\\\">=</span> nums.length - <span class=\\\"hljs-number\\\">2</span>; i &gt;= <span class=\\\"hljs-number\\\">0</span>; i--) {\\n        <span class=\\\"hljs-type\\\">int</span> <span class=\\\"hljs-variable\\\">steps</span> <span class=\\\"hljs-operator\\\">=</span> nums[i];\\n        <span class=\\\"hljs-keyword\\\">for</span> (<span class=\\\"hljs-type\\\">int</span> <span class=\\\"hljs-variable\\\">j</span> <span class=\\\"hljs-operator\\\">=</span> i + <span class=\\\"hljs-number\\\">1</span>; j &lt; nums.length && j &lt;= i + steps; j++) {\\n            <span class=\\\"hljs-keyword\\\">if</span>  (can[j]) {\\n                can[i] = <span class=\\\"hljs-literal\\\">true</span>;\\n                <span class=\\\"hljs-keyword\\\">break</span>;\\n            }\\n        }\\n    }\\n    <span class=\\\"hljs-keyword\\\">return</span> can[<span class=\\\"hljs-number\\\">0</span>];\\n}\\n</code></pre>\\n<h4 id=\\\"greedy\\\">Greedy</h4>\\n<pre><code class=\\\"hljs language-java\\\"><span class=\\\"hljs-keyword\\\">public</span> <span class=\\\"hljs-type\\\">boolean</span> <span class=\\\"hljs-title function_\\\">canJump</span><span class=\\\"hljs-params\\\">(<span class=\\\"hljs-type\\\">int</span>[] nums)</span> {\\n    <span class=\\\"hljs-type\\\">int</span> <span class=\\\"hljs-variable\\\">last</span> <span class=\\\"hljs-operator\\\">=</span> nums.length - <span class=\\\"hljs-number\\\">1</span>;\\n    <span class=\\\"hljs-keyword\\\">for</span> (<span class=\\\"hljs-type\\\">int</span> <span class=\\\"hljs-variable\\\">i</span> <span class=\\\"hljs-operator\\\">=</span> nums.length - <span class=\\\"hljs-number\\\">2</span>; i &gt;= <span class=\\\"hljs-number\\\">0</span>; i--) {\\n        <span class=\\\"hljs-keyword\\\">if</span> (i + nums[i] &gt;= last) {\\n            last = i;\\n        }\\n    }\\n    <span class=\\\"hljs-type\\\">return</span> <span class=\\\"hljs-variable\\\">last</span> <span class=\\\"hljs-operator\\\">=</span>= <span class=\\\"hljs-number\\\">0</span>;\\n}\\n</code></pre>\\n\";","export default \"<h3 id=\\\"xquartz-setup\\\">XQuartz setup</h3>\\n<p><a href=\\\"https://www.xquartz.org/\\\">https://www.xquartz.org/</a></p>\\n<p>Download & Install</p>\\n<p>Then you will see this in the ssh config file located at <code>/private/etc/ssh/ssh_config</code>:</p>\\n<pre><code>....\\n\\n# XAuthLocation added by XQuartz (https://www.xquartz.org)\\nHost *\\n    XAuthLocation /opt/X11/bin/xauth\\n</code></pre>\\n<h3 id=\\\"vs-code\\\">VS Code</h3>\\n<p>With the power of <a href=\\\"https://marketplace.visualstudio.com/items?itemName=ms-vscode-remote.remote-ssh\\\">Remote - SSH</a>, you can add a ssh connection like:</p>\\n<pre><code>Host login.encs.concordia.ca\\n  HostName login.encs.concordia.ca\\n  ForwardX11Trusted yes\\n  User hu_ju\\n</code></pre>\\n<p>And also <a href=\\\"https://marketplace.visualstudio.com/items?itemName=rjyoung.vscode-modern-vhdl-support\\\">Modern VHDL</a> for vhdl support.</p>\\n<h3 id=\\\"troubshoot\\\">Troubshoot</h3>\\n<h4 id=\\\"establish-error\\\">Establish Error</h4>\\n<p>When this shows on the output of <code>Remote SSH</code></p>\\n<pre><code class=\\\"hljs language-bash\\\">...\\n\\n[16:44:34.541] Platform: linux\\n[16:44:34.549] stderr&gt; bash: line 1: syntax error near unexpected token <span class=\\\"hljs-keyword\\\">fi</span>\\n[16:44:34.550] stderr&gt; bash: line 1: <span class=\\\"hljs-keyword\\\">fi</span>\\n[16:44:34.552] &gt; 6b09ed1419cf: running\\n[16:44:34.553] stderr&gt; <span class=\\\"hljs-keyword\\\">function</span>: Command not found.\\n[16:44:34.553] stderr&gt; Bad : modifier <span class=\\\"hljs-keyword\\\">in</span> $ (-).\\n[16:44:34.553] stderr&gt; <span class=\\\"hljs-keyword\\\">fi</span>: Command not found.\\n[16:44:34.553] stderr&gt; found_glibc: Undefined variable.\\n[16:44:34.554] stderr&gt; Unmatched <span class=\\\"hljs-string\\\">&quot;.\\n[16:44:34.556] stderr&gt; SERVER_PID: Undefined variable.\\n[16:44:34.558] stderr&gt; =: Command not found.</span>\\n</code></pre>\\n<p>Fix this with:</p>\\n<p><a href=\\\"https://github.com/microsoft/vscode-remote-release/issues/5543\\\">https://github.com/microsoft/vscode-remote-release/issues/5543</a></p>\\n<p>by adding a setting on vscode settings file:</p>\\n<pre><code class=\\\"hljs language-json\\\"><span class=\\\"hljs-punctuation\\\">{</span>\\n    <span class=\\\"hljs-attr\\\">&quot;remote.SSH.useLocalServer&quot;</span><span class=\\\"hljs-punctuation\\\">:</span> <span class=\\\"hljs-keyword\\\">false</span><span class=\\\"hljs-punctuation\\\">,</span>\\n<span class=\\\"hljs-punctuation\\\">}</span>\\n</code></pre>\\n<p>And then select Linux when first connection</p>\\n<h4 id=\\\"can-not-open-modelsim-ui-with-vscode\\\">Can not open ModelSIM UI with vscode</h4>\\n<p>Fefering: <a href=\\\"https://unix.stackexchange.com/a/12772/495761\\\">https://unix.stackexchange.com/a/12772/495761</a></p>\\n<p>Fix it by enable <code>ForwardX11 yes</code> in ssh_config:</p>\\n<pre><code># XAuthLocation added by XQuartz (https://www.xquartz.org)\\nHost *\\n    XAuthLocation /opt/X11/bin/xauth\\n    ForwardX11 yes\\n</code></pre>\\n\";","export default \"<p><div class=\\\"saying mb-4\\\"><div class=\\\"saying-quote saying-left-quote\\\">“</div><div class=\\\"saying-quote saying-right-quote\\\">”</div></p>\\n<p>Layout：定制你的输出模式</p>\\n<p></div></p>\\n<!-- more -->\\n\\n<p><a href=\\\"https://logging.apache.org/log4j/2.x/manual/layouts.html\\\">Layouts</a>里提到了许多种 Layout 方式，我最常用的是 PatternLayout。</p>\\n<h3 id=\\\"pattern-layout-模式输出\\\">Pattern Layout 模式输出</h3>\\n<p>是一种通过 pattern 字符串来配置的灵活的输出方式。</p>\\n<p>属性：</p>\\n<ul>\\n<li>charset：string：所使用的字符集</li>\\n<li>pattern：string：定制你的输出模式</li>\\n<li>header：string：这是一个可选项，它会包含在每个 log 文件的开头</li>\\n<li>footer：string：这是一个可选项....</li>\\n</ul>\\n<h4 id=\\\"patterns\\\">Patterns</h4>\\n<h5 id=\\\"logger-name-模式\\\">Logger Name 模式</h5>\\n<p><code>c{precision}</code>\\n<code>logger{precision}</code></p>\\n<p>用例：</p>\\n<p><img src=\\\"../../../public/img/0c7bcdb7e018e47007e1f94164a2b626.png\\\" alt=\\\"class pattern\\\"></p>\\n<h4 id=\\\"class-模式\\\">Class 模式</h4>\\n<p><code>C{precision}</code>\\n<code>class{precision}</code></p>\\n<h5 id=\\\"date-模式\\\">Date 模式</h5>\\n<p><code>d{pattern} & date{pattern}</code></p>\\n<p>用例：</p>\\n<p><img src=\\\"../../../public/img/782b42701d03650c07a92766558d225f.png\\\" alt=\\\"date pattern\\\"></p>\\n<h4 id=\\\"line-模式\\\">Line 模式</h4>\\n<p><code>%L</code>：输出报出 issue 的 logger 的行数\\n<code>%l</code>：输出更详细的行数信息</p>\\n<h4 id=\\\"message-信息模式\\\">Message 信息模式</h4>\\n<p><code>%msg</code>：输出 logger 的信息</p>\\n<h4 id=\\\"method-模式\\\">Method 模式</h4>\\n<p><code>%M</code>：输出 logger 所在的方法</p>\\n<h4 id=\\\"n-模式\\\">n 模式</h4>\\n<p><code>%n</code>：输出系统支持的行分隔符，比如<code>\\\\n</code>或者<code>\\\\r\\\\n</code></p>\\n<h4 id=\\\"n-模式-1\\\">N 模式</h4>\\n<p><code>%N</code>：输出调用 Log 事件时的:<code>System.nanoTime()</code></p>\\n<h4 id=\\\"pid-模式\\\">pid 模式</h4>\\n<p><code>%pid</code>：输出程序的 pid</p>\\n<h4 id=\\\"level-模式\\\">level 模式</h4>\\n<p><code>p|level{level=label, level=label, ...}</code>：指定每个级别的别名\\n<code>p|level{lowerCase=true|false}</code>：指定级别是否小写</p>\\n<h4 id=\\\"thread-模式\\\">Thread 模式</h4>\\n<p><code>%t</code>: 输出调用 Log 事件时所处的线程名\\n<code>%tid</code>: 输出调用 Log 事件时所处的线程 id</p>\\n<h4 id=\\\"context-模式\\\">Context 模式</h4>\\n<p><code>%X{key[,key2...]}</code>: 输出存在 ThreadContext 里的键所对应的值</p>\\n\";","export default \"<h3 id=\\\"66plus-oneeasy\\\">66.Plus One(Easy)</h3>\\n<p>Given a <strong>non-empty</strong> array of digits representing a non-negative integer, plus one to the integer.</p>\\n<p>The digits are stored such that the most significant digit is at the head of the list, and each element in the array contain a single digit.</p>\\n<p>You may assume the integer does not contain any leading zero, except the number 0 itself.</p>\\n<p><strong>Example 1:</strong></p>\\n<pre><code>Input: [1,2,3]\\nOutput: [1,2,4]\\nExplanation: The array represents the integer 123.\\n</code></pre>\\n<p><strong>Example 2:</strong></p>\\n<pre><code>Input: [4,3,2,1]\\nOutput: [4,3,2,2]\\nExplanation: The array represents the integer 4321.\\n</code></pre>\\n<h4 id=\\\"solution\\\">Solution</h4>\\n<p>处理carry的题目我们前面碰的多了，熟能生巧</p>\\n<pre><code class=\\\"hljs language-java\\\"><span class=\\\"hljs-keyword\\\">public</span> <span class=\\\"hljs-type\\\">int</span>[] plusOne(<span class=\\\"hljs-type\\\">int</span>[] digits) {\\n    <span class=\\\"hljs-type\\\">boolean</span> <span class=\\\"hljs-variable\\\">carry</span> <span class=\\\"hljs-operator\\\">=</span> <span class=\\\"hljs-literal\\\">true</span>;\\n    <span class=\\\"hljs-keyword\\\">for</span> (<span class=\\\"hljs-type\\\">int</span> <span class=\\\"hljs-variable\\\">i</span> <span class=\\\"hljs-operator\\\">=</span> digits.length - <span class=\\\"hljs-number\\\">1</span>; i &gt;= <span class=\\\"hljs-number\\\">0</span>; i--) {\\n        <span class=\\\"hljs-keyword\\\">if</span> (carry) {\\n            <span class=\\\"hljs-type\\\">int</span> <span class=\\\"hljs-variable\\\">tmp</span> <span class=\\\"hljs-operator\\\">=</span> digits[i] + <span class=\\\"hljs-number\\\">1</span>;\\n            <span class=\\\"hljs-keyword\\\">if</span> (tmp &gt;= <span class=\\\"hljs-number\\\">10</span>) {\\n                digits[i] = tmp % <span class=\\\"hljs-number\\\">10</span>;\\n            } <span class=\\\"hljs-keyword\\\">else</span> {\\n                digits[i] = tmp;\\n                carry = <span class=\\\"hljs-literal\\\">false</span>;\\n            }\\n        }\\n    }\\n    <span class=\\\"hljs-keyword\\\">if</span> (carry) {\\n        <span class=\\\"hljs-type\\\">int</span>[] ans = <span class=\\\"hljs-keyword\\\">new</span> <span class=\\\"hljs-title class_\\\">int</span>[digits.length + <span class=\\\"hljs-number\\\">1</span>];\\n        ans[<span class=\\\"hljs-number\\\">0</span>] = <span class=\\\"hljs-number\\\">1</span>;\\n        <span class=\\\"hljs-keyword\\\">return</span> ans;\\n    } <span class=\\\"hljs-keyword\\\">else</span> {\\n        <span class=\\\"hljs-keyword\\\">return</span> digits;\\n    }\\n}\\n</code></pre>\\n<h3 id=\\\"67add-binaryeasy\\\">67.Add Binary(Easy)</h3>\\n<p>Given two binary strings, return their sum (also a binary string).</p>\\n<p>The input strings are both <strong>non-empty</strong> and contains only characters <code>1</code> or <code>0</code>.</p>\\n<p><strong>Example 1:</strong></p>\\n<pre><code>Input: a = &quot;11&quot;, b = &quot;1&quot;\\nOutput: &quot;100&quot;\\n</code></pre>\\n<p><strong>Example 2:</strong></p>\\n<pre><code>Input: a = &quot;1010&quot;, b = &quot;1011&quot;\\nOutput: &quot;10101&quot;\\n</code></pre>\\n<h4 id=\\\"solution-1\\\">Solution</h4>\\n<p>和<a href=\\\"./11z93zc.html?hash=22be3288\\\">MultiplyString</a>一样，我们先把两数和算到长数数组中，然后再遍历长数数组进行进位的处理</p>\\n<pre><code class=\\\"hljs language-java\\\"><span class=\\\"hljs-keyword\\\">public</span> String <span class=\\\"hljs-title function_\\\">addBinary</span><span class=\\\"hljs-params\\\">(String a, String b)</span> {\\n    <span class=\\\"hljs-keyword\\\">if</span> (a.length() &lt; b.length()) {\\n        <span class=\\\"hljs-keyword\\\">return</span> addBinary(b, a);\\n    }\\n    <span class=\\\"hljs-type\\\">char</span>[] ac = a.toCharArray();\\n    <span class=\\\"hljs-type\\\">char</span>[] bc = b.toCharArray();\\n    <span class=\\\"hljs-type\\\">int</span> <span class=\\\"hljs-variable\\\">ai</span> <span class=\\\"hljs-operator\\\">=</span> ac.length - <span class=\\\"hljs-number\\\">1</span>;\\n    <span class=\\\"hljs-type\\\">int</span> <span class=\\\"hljs-variable\\\">bi</span> <span class=\\\"hljs-operator\\\">=</span> bc.length - <span class=\\\"hljs-number\\\">1</span>;\\n    <span class=\\\"hljs-keyword\\\">while</span> (bi &gt;= <span class=\\\"hljs-number\\\">0</span>) {\\n        ac[ai] = ac[ai] == <span class=\\\"hljs-string\\\">&#x27;0&#x27;</span>\\n                <span class=\\\"hljs-comment\\\">// aci = 0</span>\\n                ? bc[bi]\\n                <span class=\\\"hljs-comment\\\">// aci = 1</span>\\n                : (bc[bi] == <span class=\\\"hljs-string\\\">&#x27;0&#x27;</span>\\n                    <span class=\\\"hljs-comment\\\">// bci = 0</span>\\n                    ? <span class=\\\"hljs-string\\\">&#x27;1&#x27;</span>\\n                    <span class=\\\"hljs-comment\\\">// bci = 1</span>\\n                    : <span class=\\\"hljs-string\\\">&#x27;2&#x27;</span>);\\n        bi--;\\n        ai--;\\n    }\\n    <span class=\\\"hljs-type\\\">StringBuilder</span> <span class=\\\"hljs-variable\\\">sb</span> <span class=\\\"hljs-operator\\\">=</span> <span class=\\\"hljs-keyword\\\">new</span> <span class=\\\"hljs-title class_\\\">StringBuilder</span>();\\n    <span class=\\\"hljs-type\\\">boolean</span> <span class=\\\"hljs-variable\\\">carry</span> <span class=\\\"hljs-operator\\\">=</span> <span class=\\\"hljs-literal\\\">false</span>;\\n    <span class=\\\"hljs-keyword\\\">for</span> (<span class=\\\"hljs-type\\\">int</span> <span class=\\\"hljs-variable\\\">i</span> <span class=\\\"hljs-operator\\\">=</span> ac.length - <span class=\\\"hljs-number\\\">1</span>; i &gt;= <span class=\\\"hljs-number\\\">0</span>; i--) {\\n        <span class=\\\"hljs-keyword\\\">if</span> (carry) {\\n            <span class=\\\"hljs-keyword\\\">if</span> (ac[i] == <span class=\\\"hljs-string\\\">&#x27;0&#x27;</span>) {\\n                ac[i] = <span class=\\\"hljs-string\\\">&#x27;1&#x27;</span>;\\n                carry = <span class=\\\"hljs-literal\\\">false</span>;\\n            } <span class=\\\"hljs-keyword\\\">else</span> <span class=\\\"hljs-keyword\\\">if</span> (ac[i] == <span class=\\\"hljs-string\\\">&#x27;1&#x27;</span>) {\\n                ac[i] = <span class=\\\"hljs-string\\\">&#x27;2&#x27;</span>;\\n            } <span class=\\\"hljs-keyword\\\">else</span> <span class=\\\"hljs-keyword\\\">if</span> (ac[i] == <span class=\\\"hljs-string\\\">&#x27;2&#x27;</span>){\\n                ac[i] = <span class=\\\"hljs-string\\\">&#x27;3&#x27;</span>;\\n            }\\n        }\\n        <span class=\\\"hljs-keyword\\\">if</span> (ac[i] == <span class=\\\"hljs-string\\\">&#x27;2&#x27;</span>) {\\n            ac[i] = <span class=\\\"hljs-string\\\">&#x27;0&#x27;</span>;\\n            carry = <span class=\\\"hljs-literal\\\">true</span>;\\n        } <span class=\\\"hljs-keyword\\\">else</span> <span class=\\\"hljs-keyword\\\">if</span> (ac[i] == <span class=\\\"hljs-string\\\">&#x27;3&#x27;</span>) {\\n            ac[i] = <span class=\\\"hljs-string\\\">&#x27;1&#x27;</span>;\\n            carry = <span class=\\\"hljs-literal\\\">true</span>;\\n        }\\n        sb.insert(<span class=\\\"hljs-number\\\">0</span>, ac[i]);\\n    }\\n    <span class=\\\"hljs-keyword\\\">if</span> (carry) {\\n        sb.insert(<span class=\\\"hljs-number\\\">0</span>, <span class=\\\"hljs-string\\\">&#x27;1&#x27;</span>);\\n    }\\n    <span class=\\\"hljs-keyword\\\">return</span> sb.toString();\\n}\\n</code></pre>\\n<h3 id=\\\"68text-justificationhard\\\">68.Text Justification(Hard)</h3>\\n<p>Given an array of words and a width <em>maxWidth</em>, format the text such that each line has exactly <em>maxWidth</em>characters and is fully (left and right) justified.</p>\\n<p>You should pack your words in a greedy approach; that is, pack as many words as you can in each line. Pad extra spaces <code>&#39; &#39;</code> when necessary so that each line has exactly <em>maxWidth</em> characters.</p>\\n<p>Extra spaces between words should be distributed as evenly as possible. If the number of spaces on a line do not divide evenly between words, the empty slots on the left will be assigned more spaces than the slots on the right.</p>\\n<p>For the last line of text, it should be left justified and no <strong>extra</strong> space is inserted between words.</p>\\n<p><strong>Note:</strong></p>\\n<ul>\\n<li>A word is defined as a character sequence consisting of non-space characters only.</li>\\n<li>Each word&#39;s length is guaranteed to be greater than 0 and not exceed <em>maxWidth</em>.</li>\\n<li>The input array <code>words</code> contains at least one word.</li>\\n</ul>\\n<p><strong>Example 1:</strong></p>\\n<pre><code>Input:\\nwords = [&quot;This&quot;, &quot;is&quot;, &quot;an&quot;, &quot;example&quot;, &quot;of&quot;, &quot;text&quot;, &quot;justification.&quot;]\\nmaxWidth = 16\\nOutput:\\n[\\n   &quot;This    is    an&quot;,\\n   &quot;example  of text&quot;,\\n   &quot;justification.  &quot;\\n]\\n</code></pre>\\n<p><strong>Example 2:</strong></p>\\n<pre><code>Input:\\nwords = [&quot;What&quot;,&quot;must&quot;,&quot;be&quot;,&quot;acknowledgment&quot;,&quot;shall&quot;,&quot;be&quot;]\\nmaxWidth = 16\\nOutput:\\n[\\n  &quot;What   must   be&quot;,\\n  &quot;acknowledgment  &quot;,\\n  &quot;shall be        &quot;\\n]\\nExplanation: Note that the last line is &quot;shall be    &quot; instead of &quot;shall     be&quot;,\\n             because the last line must be left-justified instead of fully-justified.\\n             Note that the second line is also left-justified becase it contains only one word.\\n</code></pre>\\n<p><strong>Example 3:</strong></p>\\n<pre><code>Input:\\nwords = [&quot;Science&quot;,&quot;is&quot;,&quot;what&quot;,&quot;we&quot;,&quot;understand&quot;,&quot;well&quot;,&quot;enough&quot;,&quot;to&quot;,&quot;explain&quot;,\\n         &quot;to&quot;,&quot;a&quot;,&quot;computer.&quot;,&quot;Art&quot;,&quot;is&quot;,&quot;everything&quot;,&quot;else&quot;,&quot;we&quot;,&quot;do&quot;]\\nmaxWidth = 20\\nOutput:\\n[\\n  &quot;Science  is  what we&quot;,\\n  &quot;understand      well&quot;,\\n  &quot;enough to explain to&quot;,\\n  &quot;a  computer.  Art is&quot;,\\n  &quot;everything  else  we&quot;,\\n  &quot;do                  &quot;\\n]\\n</code></pre>\\n<h4 id=\\\"solution-2\\\">Solution</h4>\\n<p>这题难，难就难在题解的步骤多，虽然这题争议很大，但是这题还挺多公司喜欢出的</p>\\n<p>首先我们要来看一下标准解的条件：</p>\\n<ul>\\n<li>每一行尽可能的吃能吃的单词；（Greedy）</li>\\n<li>每一行单词之间的空格要分布均匀，如果有不均匀，那么左边的空格要比右边的空格多；（full-justify）</li>\\n<li>如果一行只有一个单词，那么它左对齐；（left-justify）</li>\\n<li>最后一行无论多少单词，都是左对齐；（left-justify）</li>\\n</ul>\\n<p>我们的步骤可以简单地理解为：</p>\\n<ol>\\n<li>从剩下的单词中，尽可能地吃能吃的单词；<code>findRight</code></li>\\n<li>调整当前吃下的单词的空格；<code>justify</code></li>\\n<li>将调整好的单词添加到结果；</li>\\n<li>如果还有剩下的单词，重复步骤1；</li>\\n</ol>\\n<pre><code class=\\\"hljs language-java\\\"> <span class=\\\"hljs-keyword\\\">public</span> List&lt;String&gt; <span class=\\\"hljs-title function_\\\">fullJustify</span><span class=\\\"hljs-params\\\">(String[] words, <span class=\\\"hljs-type\\\">int</span> maxWidth)</span> {\\n    <span class=\\\"hljs-type\\\">int</span> <span class=\\\"hljs-variable\\\">left</span> <span class=\\\"hljs-operator\\\">=</span> <span class=\\\"hljs-number\\\">0</span>; List&lt;String&gt; result = <span class=\\\"hljs-keyword\\\">new</span> <span class=\\\"hljs-title class_\\\">ArrayList</span>&lt;&gt;();\\n    \\n    <span class=\\\"hljs-keyword\\\">while</span> (left &lt; words.length) {\\n        <span class=\\\"hljs-type\\\">int</span> <span class=\\\"hljs-variable\\\">right</span> <span class=\\\"hljs-operator\\\">=</span> findRight(left, words, maxWidth);\\n        result.add(justify(left, right, words, maxWidth));\\n        left = right + <span class=\\\"hljs-number\\\">1</span>;\\n    }\\n    \\n    <span class=\\\"hljs-keyword\\\">return</span> result;\\n}\\n\\n<span class=\\\"hljs-keyword\\\">private</span> <span class=\\\"hljs-type\\\">int</span> <span class=\\\"hljs-title function_\\\">findRight</span><span class=\\\"hljs-params\\\">(<span class=\\\"hljs-type\\\">int</span> left, String[] words, <span class=\\\"hljs-type\\\">int</span> maxWidth)</span> {\\n    <span class=\\\"hljs-type\\\">int</span> <span class=\\\"hljs-variable\\\">right</span> <span class=\\\"hljs-operator\\\">=</span> left;\\n    <span class=\\\"hljs-type\\\">int</span> <span class=\\\"hljs-variable\\\">sum</span> <span class=\\\"hljs-operator\\\">=</span> words[right++].length();\\n    \\n    <span class=\\\"hljs-keyword\\\">while</span> (right &lt; words.length && (sum + <span class=\\\"hljs-number\\\">1</span> + words[right].length()) &lt;= maxWidth)\\n        sum += <span class=\\\"hljs-number\\\">1</span> + words[right++].length();\\n        \\n    <span class=\\\"hljs-keyword\\\">return</span> right - <span class=\\\"hljs-number\\\">1</span>;\\n}\\n\\n<span class=\\\"hljs-keyword\\\">private</span> String <span class=\\\"hljs-title function_\\\">justify</span><span class=\\\"hljs-params\\\">(<span class=\\\"hljs-type\\\">int</span> left, <span class=\\\"hljs-type\\\">int</span> right, String[] words, <span class=\\\"hljs-type\\\">int</span> maxWidth)</span> {\\n    <span class=\\\"hljs-keyword\\\">if</span> (right - left == <span class=\\\"hljs-number\\\">0</span>) <span class=\\\"hljs-keyword\\\">return</span> padResult(words[left], maxWidth);\\n    \\n    <span class=\\\"hljs-type\\\">boolean</span> <span class=\\\"hljs-variable\\\">isLastLine</span> <span class=\\\"hljs-operator\\\">=</span> right == words.length - <span class=\\\"hljs-number\\\">1</span>;\\n    <span class=\\\"hljs-type\\\">int</span> <span class=\\\"hljs-variable\\\">numSpaces</span> <span class=\\\"hljs-operator\\\">=</span> right - left;\\n    <span class=\\\"hljs-type\\\">int</span> <span class=\\\"hljs-variable\\\">totalSpace</span> <span class=\\\"hljs-operator\\\">=</span> maxWidth - wordsLength(left, right, words);\\n    \\n    <span class=\\\"hljs-type\\\">String</span> <span class=\\\"hljs-variable\\\">space</span> <span class=\\\"hljs-operator\\\">=</span> isLastLine ? <span class=\\\"hljs-string\\\">&quot; &quot;</span> : blank(totalSpace / numSpaces);\\n    <span class=\\\"hljs-type\\\">int</span> <span class=\\\"hljs-variable\\\">remainder</span> <span class=\\\"hljs-operator\\\">=</span> isLastLine ? <span class=\\\"hljs-number\\\">0</span> : totalSpace % numSpaces;\\n    \\n    <span class=\\\"hljs-type\\\">StringBuilder</span> <span class=\\\"hljs-variable\\\">result</span> <span class=\\\"hljs-operator\\\">=</span> <span class=\\\"hljs-keyword\\\">new</span> <span class=\\\"hljs-title class_\\\">StringBuilder</span>();\\n    <span class=\\\"hljs-keyword\\\">for</span> (<span class=\\\"hljs-type\\\">int</span> <span class=\\\"hljs-variable\\\">i</span> <span class=\\\"hljs-operator\\\">=</span> left; i &lt;= right; i++)\\n        result.append(words[i])\\n            .append(space)\\n            .append(remainder-- &gt; <span class=\\\"hljs-number\\\">0</span> ? <span class=\\\"hljs-string\\\">&quot; &quot;</span> : <span class=\\\"hljs-string\\\">&quot;&quot;</span>);\\n    \\n    <span class=\\\"hljs-keyword\\\">return</span> padResult(result.toString().trim(), maxWidth);\\n}\\n\\n<span class=\\\"hljs-keyword\\\">private</span> <span class=\\\"hljs-type\\\">int</span> <span class=\\\"hljs-title function_\\\">wordsLength</span><span class=\\\"hljs-params\\\">(<span class=\\\"hljs-type\\\">int</span> left, <span class=\\\"hljs-type\\\">int</span> right, String[] words)</span> {\\n    <span class=\\\"hljs-type\\\">int</span> <span class=\\\"hljs-variable\\\">wordsLength</span> <span class=\\\"hljs-operator\\\">=</span> <span class=\\\"hljs-number\\\">0</span>;\\n    <span class=\\\"hljs-keyword\\\">for</span> (<span class=\\\"hljs-type\\\">int</span> <span class=\\\"hljs-variable\\\">i</span> <span class=\\\"hljs-operator\\\">=</span> left; i &lt;= right; i++) wordsLength += words[i].length();\\n    <span class=\\\"hljs-keyword\\\">return</span> wordsLength;\\n}\\n\\n<span class=\\\"hljs-keyword\\\">private</span> String <span class=\\\"hljs-title function_\\\">padResult</span><span class=\\\"hljs-params\\\">(String result, <span class=\\\"hljs-type\\\">int</span> maxWidth)</span> {\\n    <span class=\\\"hljs-keyword\\\">return</span> result + blank(maxWidth - result.length());\\n}\\n\\n<span class=\\\"hljs-keyword\\\">private</span> String <span class=\\\"hljs-title function_\\\">blank</span><span class=\\\"hljs-params\\\">(<span class=\\\"hljs-type\\\">int</span> length)</span> {\\n    <span class=\\\"hljs-keyword\\\">return</span> <span class=\\\"hljs-keyword\\\">new</span> <span class=\\\"hljs-title class_\\\">String</span>(<span class=\\\"hljs-keyword\\\">new</span> <span class=\\\"hljs-title class_\\\">char</span>[length]).replace(<span class=\\\"hljs-string\\\">&#x27;\\\\0&#x27;</span>, <span class=\\\"hljs-string\\\">&#x27; &#x27;</span>);\\n}\\n</code></pre>\\n<h3 id=\\\"69sqrtx-easy\\\">69.Sqrt(x) (Easy)</h3>\\n<p>Implement <code>int sqrt(int x)</code>.</p>\\n<p>Compute and return the square root of <em>x</em>, where <em>x</em> is guaranteed to be a non-negative integer.</p>\\n<p>Since the return type is an integer, the decimal digits are truncated and only the integer part of the result is returned.</p>\\n<p><strong>Example 1:</strong></p>\\n<pre><code>Input: 4\\nOutput: 2\\n</code></pre>\\n<p><strong>Example 2:</strong></p>\\n<pre><code>Input: 8\\nOutput: 2\\nExplanation: The square root of 8 is 2.82842..., and since \\n             the decimal part is truncated, 2 is returned.\\n</code></pre>\\n<h4 id=\\\"binary\\\">Binary</h4>\\n<p>这题虽然是简单题，但我也还是在弯路上走了很久</p>\\n<p>题目给到提示了：</p>\\n<ol>\\n<li><strong>Try exploring all integers.</strong></li>\\n<li><strong>Use the sorted property of integers to reduced the search space.</strong></li>\\n</ol>\\n<p>这两条提示我开始没看出来什么，后面发现- -，原来都已经告诉你标准的二分法思路了</p>\\n<p>于是我们要求X的开根号，可以这样想：</p>\\n<ul>\\n<li>答案肯定在<code>[1~X]</code>之间；</li>\\n<li>二分的思路找最接近X^2的数，因为毕竟是整数结果；</li>\\n</ul>\\n<pre><code class=\\\"hljs language-java\\\"><span class=\\\"hljs-keyword\\\">public</span> <span class=\\\"hljs-type\\\">int</span> <span class=\\\"hljs-title function_\\\">mySqrt</span><span class=\\\"hljs-params\\\">(<span class=\\\"hljs-type\\\">int</span> x)</span> {\\n    <span class=\\\"hljs-type\\\">int</span> <span class=\\\"hljs-variable\\\">low</span> <span class=\\\"hljs-operator\\\">=</span> <span class=\\\"hljs-number\\\">1</span>, high = x, mid;\\n    <span class=\\\"hljs-keyword\\\">while</span> (low &lt; high) {\\n        mid = low + (high - low) / <span class=\\\"hljs-number\\\">2</span>;\\n        <span class=\\\"hljs-keyword\\\">if</span> (mid == x / mid) {\\n            <span class=\\\"hljs-keyword\\\">return</span> mid;\\n        } <span class=\\\"hljs-keyword\\\">else</span> <span class=\\\"hljs-keyword\\\">if</span> (mid &gt; x / mid) {\\n            high = mid - <span class=\\\"hljs-number\\\">1</span>;\\n        } <span class=\\\"hljs-keyword\\\">else</span> {\\n            low = mid + <span class=\\\"hljs-number\\\">1</span>;\\n        }\\n    }\\n    <span class=\\\"hljs-keyword\\\">return</span> low &gt; x / low ? low - <span class=\\\"hljs-number\\\">1</span> : low;\\n}\\n</code></pre>\\n<h3 id=\\\"70climbingstairseasy\\\">70.ClimbingStairs(Easy)</h3>\\n<p>You are climbing a stair case. It takes <em>n</em> steps to reach to the top.</p>\\n<p>Each time you can either climb 1 or 2 steps. In how many distinct ways can you climb to the top?</p>\\n<p><strong>Note:</strong> Given <em>n</em> will be a positive integer.</p>\\n<p><strong>Example 1:</strong></p>\\n<pre><code>Input: 2\\nOutput: 2\\nExplanation: There are two ways to climb to the top.\\n1. 1 step + 1 step\\n2. 2 steps\\n</code></pre>\\n<p><strong>Example 2:</strong></p>\\n<pre><code>Input: 3\\nOutput: 3\\nExplanation: There are three ways to climb to the top.\\n1. 1 step + 1 step + 1 step\\n2. 1 step + 2 steps\\n3. 2 steps + 1 step\\n</code></pre>\\n<h4 id=\\\"solution-3\\\">Solution</h4>\\n<pre><code class=\\\"hljs language-java\\\"><span class=\\\"hljs-keyword\\\">public</span> <span class=\\\"hljs-type\\\">int</span> <span class=\\\"hljs-title function_\\\">climbStairs</span><span class=\\\"hljs-params\\\">(<span class=\\\"hljs-type\\\">int</span> n)</span> {\\n    <span class=\\\"hljs-type\\\">int</span> <span class=\\\"hljs-variable\\\">a</span> <span class=\\\"hljs-operator\\\">=</span> <span class=\\\"hljs-number\\\">1</span>, b = <span class=\\\"hljs-number\\\">0</span>;\\n    <span class=\\\"hljs-type\\\">int</span> <span class=\\\"hljs-variable\\\">ans</span> <span class=\\\"hljs-operator\\\">=</span> <span class=\\\"hljs-number\\\">0</span>;\\n    <span class=\\\"hljs-keyword\\\">for</span> (<span class=\\\"hljs-type\\\">int</span> <span class=\\\"hljs-variable\\\">i</span> <span class=\\\"hljs-operator\\\">=</span> <span class=\\\"hljs-number\\\">1</span>; i &lt;= n; i++) {\\n        ans = a + b;\\n        b = a;\\n        a = ans;\\n    }\\n    <span class=\\\"hljs-keyword\\\">return</span> ans;\\n}\\n</code></pre>\\n\";","export default \"<h3 id=\\\"service\\\">Service</h3>\\n<p>In a distributed application, different pieces of the app are called “services.” For example, if you imagine a video sharing site, it probably includes <strong>[1]a service for storing application data in a database</strong>, <strong>[2]a service for video transcoding in the background after a user uploads something</strong>, <strong>[3]a service for the front-end</strong>, and so on.</p>\\n<p>Services are really just “containers in production.” A service only runs one image, but it codifies the way that image runs:</p>\\n<ul>\\n<li>what ports it should use</li>\\n<li>how many replicas of the container should run so the service has the capacity it needs</li>\\n<li>scaling a service changes the number of container instances running that piece of software</li>\\n<li>assigning more computing resources to the service in the process</li>\\n<li>....</li>\\n</ul>\\n<p>Luckily it’s very easy to <strong>define</strong>, run, and scale services with the Docker platform -- just write a <code>docker-compose.yml</code> file</p>\\n<p>A <code>docker-compose.yml</code> file is a YAML file that defines how Docker containers should behave in production.</p>\\n<blockquote>\\n<p>image或者说container只是一个app的运行环境，通常来说在完整系统里面我们不止要用到1个app，这也是微服务的架构，而每个app有各自的环境资源和部署策略</p>\\n<p>我们这样去看待：</p>\\n<ul>\\n<li>app是面向业务，而提供解决方案的</li>\\n<li>servcie是面向使用者，而提供使用这个app的管理办法的</li>\\n</ul>\\n<p>当我们将app看成是一个service的时候，我们可以对service做要上生产环境时候的确保配置，比如为每一个container设置一些容器管理参数，比如replicas、cpu资源、memory资源、重启策略等等</p>\\n<p>于是我们可以用<code>docker-compose.yaml</code>去组织一个service，这是投入生产环境时候的正确做法</p>\\n</blockquote>\\n<h3 id=\\\"docker-composeyml\\\"><code>docker-compose.yml</code></h3>\\n<p>Save this file as <code>docker-compose.yml</code> wherever you want. Be sure you have <a href=\\\"https://docs.docker.com/get-started/part2/#share-your-image\\\">pushed the image</a> you created in <a href=\\\"https://docs.docker.com/get-started/part2/\\\">Part 2</a> to a registry, and update this <code>.yml</code> by replacing <code>username/repo:tag</code> with your image details.</p>\\n<pre><code>version: &quot;3&quot;\\nservices:\\n  web:\\n    # replace username/repo:tag with your name and image details\\n    image: username/repo:tag\\n    deploy:\\n      replicas: 5\\n      resources:\\n        limits:\\n          cpus: &quot;0.1&quot;\\n          memory: 50M\\n      restart_policy:\\n        condition: on-failure\\n    ports:\\n      - &quot;4000:80&quot;\\n    networks:\\n      - webnet\\nnetworks:\\n  webnet:\\n</code></pre>\\n<p>This <code>docker-compose.yml</code> file tells Docker to do the following:</p>\\n<ul>\\n<li>Pull the image we uploaded <strong>before</strong> from the registry.</li>\\n<li>Run 5 instances of that image as a service called <code>web</code>, limiting each one to use, at most, 10% of the CPU (across all cores), and 50MB of RAM.</li>\\n<li>Immediately restart containers if one fails.</li>\\n<li>Map port 4000 on the host to <code>web</code>’s port 80.</li>\\n<li>Instruct <code>web</code>’s containers to share port 80 via a load-balanced network called <code>webnet</code>. (Internally, the containers themselves publish to <code>web</code>’s port 80 at an ephemeral port.)</li>\\n<li>Define the <code>webnet</code> network with the default settings (which is a load-balanced overlay network).</li>\\n</ul>\\n<h3 id=\\\"deploy-a-load-balanced-app\\\">Deploy a load-balanced app</h3>\\n<p>Before we can use the <code>docker stack deploy</code> command we first run:</p>\\n<pre><code class=\\\"hljs language-bash\\\">$ docker swarm init\\nSwarm initialized: current node (gadm7xrpe7br364zscnmexkf6) is now a manager.\\n\\nTo add a worker to this swarm, run the following <span class=\\\"hljs-built_in\\\">command</span>:\\n\\n    docker swarm <span class=\\\"hljs-built_in\\\">join</span> --token SWMTKN-1-16a3wl8wfmnu8z3vzu9t2a32x8mdb7n1c25ehkqbdfxtn1g6s9-8f5x4jehjlffr957k35euvojz 10.169.161.227:2377\\n\\nTo add a manager to this swarm, run <span class=\\\"hljs-string\\\">&#x27;docker swarm join-token manager&#x27;</span> and follow the instructions.\\n</code></pre>\\n<blockquote>\\n<p><strong>Note</strong>: We get into the meaning of that command in <a href=\\\"https://docs.docker.com/get-started/part4/\\\">part 4</a>. If you don’t run <code>docker swarm init</code> you get an error that “this node is not a swarm manager.”</p>\\n</blockquote>\\n<p>Now let’s run it. You need to give your app a name. Here, it is set to <code>getstartedlab</code>:</p>\\n<pre><code class=\\\"hljs language-bash\\\">$ docker stack deploy -c docker-compose.yml getstartedlab\\nCreating network getstartedlab_webnet\\nCreating service getstartedlab_web\\n</code></pre>\\n<p>Our single service stack is running 5 container instances of our deployed image on one host. Let’s investigate.</p>\\n<p>Get the service ID for the one service in our application:</p>\\n<pre><code class=\\\"hljs language-bash\\\">$ docker service <span class=\\\"hljs-built_in\\\">ls</span>\\n</code></pre>\\n<p>Look for output for the <code>web</code> service, prepended with your app name. If you named it the same as shown in this example, the name is<code>getstartedlab_web</code>. The service ID is listed as well, along with the number of replicas, image name, and <strong>exposed ports</strong>.</p>\\n<p>A single container running in a service is called a <strong>task</strong>. Tasks are given unique IDs that numerically increment, up to the number of <code>replicas</code> you defined in <code>docker-compose.yml</code>. List the tasks for your service:</p>\\n<pre><code class=\\\"hljs language-bash\\\">$ docker service ps getstartedlab_web\\n</code></pre>\\n<p>Tasks also show up if you just list all the containers on your system, though that is not filtered by service:</p>\\n<pre><code class=\\\"hljs language-bash\\\">$ docker container <span class=\\\"hljs-built_in\\\">ls</span> -q\\n</code></pre>\\n<h3 id=\\\"scale-the-app\\\">Scale the app</h3>\\n<p>You can scale the app by changing the <code>replicas</code> value in <code>docker-compose.yml</code>, saving the change, and re-running the <code>docker stack deploy</code> command:</p>\\n<pre><code>docker stack deploy -c docker-compose.yml getstartedlab\\n</code></pre>\\n<p>Docker performs an in-place update, no need to tear the stack down first or kill any containers.</p>\\n<p>Now, re-run <code>docker container ls -q</code> to see the deployed instances reconfigured. If you scaled up the replicas, more tasks, and hence, more containers, are started.</p>\\n<h3 id=\\\"take-down-the-app-and-the-swarm\\\">Take down the app and the swarm</h3>\\n<ul>\\n<li><p>Take the app down with <code>docker stack rm</code>:</p>\\n<pre><code class=\\\"hljs language-bash\\\">$ docker stack <span class=\\\"hljs-built_in\\\">rm</span> getstartedlab\\n</code></pre>\\n</li>\\n<li><p>Take down the swarm.</p>\\n<pre><code class=\\\"hljs language-bash\\\">$ docker swarm leave --force\\n</code></pre>\\n</li>\\n</ul>\\n<p>It’s as easy as that to stand up and scale your app with Docker. You’ve taken a huge step towards learning how to run containers in production. Up next, you learn how to run this app as a bonafide swarm on a cluster of Docker machines.</p>\\n<blockquote>\\n<p><strong>Note</strong>: Compose files like this are used to define applications with Docker, and can be uploaded to cloud providers using <a href=\\\"https://docs.docker.com/docker-cloud/\\\">Docker Cloud</a>, or on any hardware or cloud provider you choose with <a href=\\\"https://www.docker.com/enterprise-edition\\\">Docker Enterprise Edition</a>.</p>\\n</blockquote>\\n<h3 id=\\\"compose-file-reference\\\">Compose file Reference</h3>\\n<p><a href=\\\"https://docs.docker.com/compose/compose-file/#args\\\">https://docs.docker.com/compose/compose-file/#args</a></p>\\n\";","export default \"<h2 id=\\\"linux\\\">Linux</h2>\\n<h3 id=\\\"shell\\\">Shell</h3>\\n<h4 id=\\\"expect-让你的-shell-可以处理交互命令（如自动-ssh-远程登陆另一台主机）\\\">expect 让你的 shell 可以处理交互命令（如自动 ssh 远程登陆另一台主机）</h4>\\n<ul>\\n<li><a href=\\\"https://www.jianshu.com/p/70556b1ce932\\\">https://www.jianshu.com/p/70556b1ce932</a></li>\\n<li><a href=\\\"https://www.cnblogs.com/lzrabbit/p/4298794.html\\\">https://www.cnblogs.com/lzrabbit/p/4298794.html</a></li>\\n<li><a href=\\\"https://www.jellythink.com/archives/373\\\">https://www.jellythink.com/archives/373</a></li>\\n</ul>\\n<h4 id=\\\"set-设置你-shell-脚本的运行配置\\\">set 设置你 shell 脚本的运行配置</h4>\\n<ul>\\n<li><a href=\\\"https://www.cnblogs.com/liduanjun/p/3536996.html\\\">https://www.cnblogs.com/liduanjun/p/3536996.html</a></li>\\n</ul>\\n<h4 id=\\\"read-在-shell-里面读取新的字符\\\">read 在 shell 里面读取新的字符</h4>\\n<ul>\\n<li><a href=\\\"http://www.runoob.com/linux/linux-comm-read.html\\\">http://www.runoob.com/linux/linux-comm-read.html</a></li>\\n</ul>\\n<h4 id=\\\"wc-计算字数\\\">wc 计算字数</h4>\\n<ul>\\n<li><a href=\\\"http://www.runoob.com/linux/linux-comm-wc.html\\\">http://www.runoob.com/linux/linux-comm-wc.html</a></li>\\n</ul>\\n<h4 id=\\\"cut-字符串切割\\\">cut 字符串切割</h4>\\n<ul>\\n<li><a href=\\\"https://www.jb51.net/article/41872.htm\\\">https://www.jb51.net/article/41872.htm</a></li>\\n</ul>\\n<h4 id=\\\"shell-脚本-sudo-外部输入密码\\\">shell 脚本 sudo 外部输入密码</h4>\\n<ul>\\n<li><a href=\\\"https://blog.csdn.net/qq_23587541/article/details/82841489\\\">https://blog.csdn.net/qq_23587541/article/details/82841489</a></li>\\n</ul>\\n<h4 id=\\\"和-sh-执行脚本的区别：\\\">./和 sh 执行脚本的区别：</h4>\\n<ul>\\n<li><code>./</code>需要执行权限，使用脚本文件中第一行<code>#!</code>指定的 shell（解释器）来执行命令（譬如常见的/bin/bash），不指定系统会调用默认 shell 程序</li>\\n<li><code>sh</code>不需要执行权限，是使用<code>sh</code>这个 shell 执行命令，是个软链接，它可能是一个任意的 shell，通常默认是<code>bash shel</code>，用 type 命令可以查看</li>\\n</ul>\\n<h4 id=\\\"nohup-使用详解\\\">nohup 使用详解</h4>\\n<ul>\\n<li><a href=\\\"https://www.cnblogs.com/jinxiao-pu/p/9131057.html\\\">https://www.cnblogs.com/jinxiao-pu/p/9131057.html</a></li>\\n</ul>\\n<h4 id=\\\"linux中添加用户自定义的命令全局命令\\\"><strong>linux中添加用户自定义的命令</strong>(全局命令)</h4>\\n<p><a href=\\\"http://www.findme.wang/blog/detail/id/261.html\\\">http://www.findme.wang/blog/detail/id/261.html</a></p>\\n<p><a href=\\\"https://www.cnblogs.com/Survivalist/p/11297938.html\\\">https://www.cnblogs.com/Survivalist/p/11297938.html</a></p>\\n<h3 id=\\\"tools--system\\\">Tools &amp; System</h3>\\n<h4 id=\\\"工具\\\">工具</h4>\\n<ul>\\n<li>fzf：<a href=\\\"https://www.colabug.com/4062481.html\\\">https://www.colabug.com/4062481.html</a></li>\\n</ul>\\n<h4 id=\\\"设置\\\">设置</h4>\\n<ul>\\n<li>修改终端提示符：<a href=\\\"https://www.cnblogs.com/xiaofeiIDO/p/8037331.html\\\">https://www.cnblogs.com/xiaofeiIDO/p/8037331.html</a></li>\\n<li>环境变量：<a href=\\\"https://www.cnblogs.com/haore147/p/3633116.html\\\">https://www.cnblogs.com/haore147/p/3633116.html</a></li>\\n</ul>\\n<h4 id=\\\"命令\\\">命令</h4>\\n<ul>\\n<li>命令大全：<a href=\\\"http://man.linuxde.net/\\\">http://man.linuxde.net/</a></li>\\n<li>一些巨棒的命令替代：<a href=\\\"https://linux.cn/article-10171-1.html\\\">https://linux.cn/article-10171-1.html</a></li>\\n</ul>\\n<h4 id=\\\"centos\\\">CentOS</h4>\\n<h5 id=\\\"yum-详解\\\">yum 详解</h5>\\n<ul>\\n<li><a href=\\\"http://www.cnblogs.com/vathe/p/6736094.html\\\">http://www.cnblogs.com/vathe/p/6736094.html</a></li>\\n<li><a href=\\\"https://www.cnblogs.com/wholj/p/11031220.html\\\">执行 yum 相关命令总是卡住，ctrl+c 也退出不了</a></li>\\n</ul>\\n<h5 id=\\\"lc_ctype\\\">LC_CTYPE</h5>\\n<p>On a freshly installed CentOS 7 machine, I got the following notice when I SSH’d into the server.</p>\\n<pre><code>warning: setlocale: LC_CTYPE: cannot change locale (UTF-8): No such file or directory\\n</code></pre>\\n<p>The fix is pretty straight-forward. On the server (not your client), edit the file <code>/etc/environment</code> and add the following lines.</p>\\n<p>(You’ll need root privileges to do this)</p>\\n<pre><code>$ cat /etc/environment\\nLANG=en_US.utf-8\\nLC_ALL=en_US.utf-8\\n</code></pre>\\n<p>Log out &amp; back in and you should notice the warning message is gone.</p>\\n<h4 id=\\\"ubuntu\\\">Ubuntu</h4>\\n<h5 id=\\\"apt-get-详解\\\">apt-get 详解</h5>\\n<ul>\\n<li><a href=\\\"https://blog.csdn.net/sinat_31206523/article/details/78138822\\\">https://blog.csdn.net/sinat_31206523/article/details/78138822</a></li>\\n<li><a href=\\\"https://blog.csdn.net/yessharing/article/details/55806090\\\">https://blog.csdn.net/yessharing/article/details/55806090</a></li>\\n</ul>\\n<h5 id=\\\"安装-nodejs\\\">安装 nodejs</h5>\\n<ol>\\n<li><p>通过<strong>nvm</strong></p>\\n<p><a href=\\\"https://nodejs.org/en/download/package-manager/#nvm\\\">https://nodejs.org/en/download/package-manager/#nvm</a></p>\\n</li>\\n</ol>\\n\";","export default \"<h2 id=\\\"css\\\">CSS</h2>\\n<h3 id=\\\"css-media设备适配样式设置\\\">CSS media设备适配样式设置</h3>\\n<pre><code class=\\\"hljs language-css\\\"><span class=\\\"hljs-comment\\\">/* \\n  针对iphone5 等320px的宽做出调整\\n*/</span>\\n<span class=\\\"hljs-keyword\\\">@media</span> screen <span class=\\\"hljs-keyword\\\">and</span> (<span class=\\\"hljs-attribute\\\">max-width</span>: <span class=\\\"hljs-number\\\">320px</span>){\\n  <span class=\\\"hljs-selector-class\\\">.friendcard</span> {\\n    <span class=\\\"hljs-attribute\\\">margin</span>: <span class=\\\"hljs-number\\\">0</span> auto;\\n    <span class=\\\"hljs-attribute\\\">width</span>: <span class=\\\"hljs-number\\\">15rem</span>;\\n  }\\n}\\n</code></pre>\\n<h3 id=\\\"css-动画库animatecss\\\">CSS 动画库animate.css</h3>\\n<p>介绍博客 : <a href=\\\"https://www.cnblogs.com/2050/p/3409129.html\\\">https://www.cnblogs.com/2050/p/3409129.html</a></p>\\n<h3 id=\\\"css-去除按钮选中蓝色边框\\\">CSS 去除按钮选中蓝色边框</h3>\\n<pre><code class=\\\"hljs language-css\\\"><span class=\\\"hljs-selector-class\\\">.className</span> {\\n  <span class=\\\"hljs-attribute\\\">border</span>: none;\\n}\\n\\n<span class=\\\"hljs-selector-class\\\">.className</span><span class=\\\"hljs-selector-pseudo\\\">:focus</span>{\\n  <span class=\\\"hljs-attribute\\\">outline</span>: none;\\n}\\n</code></pre>\\n<p><a href=\\\"https://blog.csdn.net/qq_26222859/article/details/51516011\\\">参考</a></p>\\n<h3 id=\\\"css-元素失焦虚化滤镜\\\">CSS 元素失焦/虚化滤镜</h3>\\n<pre><code class=\\\"hljs language-css\\\"><span class=\\\"hljs-selector-id\\\">#idname</span>{\\n   <span class=\\\"hljs-attribute\\\">filter</span> : <span class=\\\"hljs-built_in\\\">blur</span>(<span class=\\\"hljs-number\\\">2px</span>);\\n}\\n</code></pre>\\n<h3 id=\\\"css-文字换行\\\">CSS 文字换行</h3>\\n<p>强制不换行</p>\\n<pre><code class=\\\"hljs language-css\\\"><span class=\\\"hljs-selector-tag\\\">div</span>{\\n    <span class=\\\"hljs-attribute\\\">white-space</span>:nowrap;\\n}\\n</code></pre>\\n<p>自动换行</p>\\n<pre><code class=\\\"hljs language-css\\\"><span class=\\\"hljs-selector-tag\\\">div</span>{ \\n    <span class=\\\"hljs-attribute\\\">word-wrap</span>: break-word; \\n    <span class=\\\"hljs-attribute\\\">word-break</span>: normal; \\n}\\n</code></pre>\\n<p>强制英文单词断开换行</p>\\n<pre><code class=\\\"hljs language-css\\\"><span class=\\\"hljs-selector-tag\\\">div</span>{\\n    <span class=\\\"hljs-attribute\\\">word-break</span>:break-all;\\n}\\n</code></pre>\\n<p>英文单词不断开换行</p>\\n<pre><code class=\\\"hljs language-css\\\"><span class=\\\"hljs-selector-tag\\\">div</span> {\\n    <span class=\\\"hljs-attribute\\\">word-break</span>: keep-all;\\n    <span class=\\\"hljs-attribute\\\">word-wrap</span>: break-word;\\n    <span class=\\\"hljs-attribute\\\">white-space</span>: pre-wrap;\\n}\\n</code></pre>\\n<h3 id=\\\"css-placeholder居位设置\\\">CSS placeholder居位设置</h3>\\n<pre><code class=\\\"hljs language-css\\\"><span class=\\\"hljs-comment\\\">/* placeholder居中 */</span>\\n<span class=\\\"hljs-selector-id\\\">#postsearchtext</span>:-moz-placeholder\\n{\\n  <span class=\\\"hljs-attribute\\\">text-align</span>: center;\\n}\\n<span class=\\\"hljs-selector-id\\\">#postsearchtext</span>::-moz-placeholder\\n{\\n  <span class=\\\"hljs-attribute\\\">text-align</span>: center;\\n}\\n<span class=\\\"hljs-selector-id\\\">#postsearchtext</span>:-ms-input-placeholder\\n{\\n  <span class=\\\"hljs-attribute\\\">text-align</span>: center;\\n}\\n<span class=\\\"hljs-selector-id\\\">#postsearchtext</span>::-webkit-input-placeholder\\n{\\n    <span class=\\\"hljs-attribute\\\">text-align</span>: center;\\n}\\n</code></pre>\\n<h3 id=\\\"css-文字超过元素长度显示省略号\\\">CSS 文字超过元素长度显示省略号</h3>\\n<pre><code class=\\\"hljs language-css\\\"><span class=\\\"hljs-selector-tag\\\">div</span>{\\n  <span class=\\\"hljs-attribute\\\">width</span>: <span class=\\\"hljs-number\\\">75%</span>;\\n  <span class=\\\"hljs-attribute\\\">overflow</span>:hidden; \\n  <span class=\\\"hljs-attribute\\\">white-space</span>:nowrap; \\n  <span class=\\\"hljs-attribute\\\">text-overflow</span>:ellipsis;\\n}\\n</code></pre>\\n<h3 id=\\\"css-变量设置和获取\\\">CSS 变量设置和获取</h3>\\n<h4 id=\\\"small_blue_diamond设置\\\">🔹设置</h4>\\n<pre><code class=\\\"hljs language-css\\\"><span class=\\\"hljs-selector-pseudo\\\">:root</span>{\\n  <span class=\\\"hljs-attr\\\">--main-color</span>: <span class=\\\"hljs-number\\\">#4d4e53</span>;\\n  <span class=\\\"hljs-attr\\\">--main-bg</span>: <span class=\\\"hljs-built_in\\\">rgb</span>(<span class=\\\"hljs-number\\\">255</span>, <span class=\\\"hljs-number\\\">255</span>, <span class=\\\"hljs-number\\\">255</span>);\\n  <span class=\\\"hljs-attr\\\">--logo-border-color</span>: rebeccapurple;\\n\\n  <span class=\\\"hljs-attr\\\">--header-height</span>: <span class=\\\"hljs-number\\\">68px</span>;\\n  <span class=\\\"hljs-attr\\\">--content-padding</span>: <span class=\\\"hljs-number\\\">10px</span> <span class=\\\"hljs-number\\\">20px</span>;\\n\\n  <span class=\\\"hljs-attr\\\">--base-line-height</span>: <span class=\\\"hljs-number\\\">1.428571429</span>;\\n  <span class=\\\"hljs-attr\\\">--transition-duration</span>: .<span class=\\\"hljs-number\\\">35s</span>;\\n  <span class=\\\"hljs-attr\\\">--external-link</span>: <span class=\\\"hljs-string\\\">&quot;external link&quot;</span>;\\n  <span class=\\\"hljs-attr\\\">--margin-top</span>: <span class=\\\"hljs-built_in\\\">calc</span>(<span class=\\\"hljs-number\\\">2vh</span> + <span class=\\\"hljs-number\\\">20px</span>);\\n}\\n</code></pre>\\n<h4 id=\\\"small_blue_diamond引用\\\">🔹引用</h4>\\n<pre><code class=\\\"hljs language-css\\\"><span class=\\\"hljs-selector-tag\\\">a</span> {\\n  <span class=\\\"hljs-attribute\\\">color</span>: <span class=\\\"hljs-built_in\\\">var</span>(--foo);\\n  <span class=\\\"hljs-attribute\\\">text-decoration-color</span>: <span class=\\\"hljs-built_in\\\">var</span>(--bar);\\n}\\n</code></pre>\\n<p>参考 : <a href=\\\"http://www.ruanyifeng.com/blog/2017/05/css-variables.html\\\">http://www.ruanyifeng.com/blog/2017/05/css-variables.html</a></p>\\n<h3 id=\\\"css-元素垂直水平居中的骚操作\\\">CSS 元素垂直/水平居中的骚操作</h3>\\n<blockquote>\\n<p>垂直居中就上下是0, 水平居中就左右是0,关键是margin:auto;</p>\\n</blockquote>\\n<pre><code class=\\\"hljs language-css\\\"><span class=\\\"hljs-selector-id\\\">#sidetoccontainer</span> {\\n  <span class=\\\"hljs-attribute\\\">position</span>: (不知道);\\n  <span class=\\\"hljs-attribute\\\">margin</span>: auto;\\n  <span class=\\\"hljs-attribute\\\">bottom</span>: <span class=\\\"hljs-number\\\">0</span>;\\n  <span class=\\\"hljs-attribute\\\">top</span>: <span class=\\\"hljs-number\\\">0</span>;\\n}\\n</code></pre>\\n<p>如果元素定位的fixed, 且如果这个骚操作用不了, 那么就给父元素加上</p>\\n<pre><code class=\\\"hljs language-css\\\"><span class=\\\"hljs-selector-id\\\">#father</span> {\\n   <span class=\\\"hljs-attribute\\\">transform</span>:<span class=\\\"hljs-built_in\\\">translate</span>(<span class=\\\"hljs-number\\\">0</span>,<span class=\\\"hljs-number\\\">0</span>)\\n}\\n</code></pre>\\n<p>参考自知乎 : <a href=\\\"https://www.zhihu.com/question/24822927\\\">https://www.zhihu.com/question/24822927</a></p>\\n<h3 id=\\\"css3-瀑布布局\\\">CSS3 瀑布布局</h3>\\n<p>三列瀑布</p>\\n<pre><code class=\\\"hljs language-css\\\"><span class=\\\"hljs-selector-class\\\">.con</span> {\\n  <span class=\\\"hljs-attribute\\\">column-count</span>: <span class=\\\"hljs-number\\\">3</span>;\\n}\\n\\n<span class=\\\"hljs-selector-class\\\">.todo-card</span> {\\n  <span class=\\\"hljs-attribute\\\">float</span>: left;\\n  <span class=\\\"hljs-attribute\\\">width</span>: <span class=\\\"hljs-number\\\">100%</span>;\\n}\\n</code></pre>\\n<h3 id=\\\"css-将div画成直角三角形\\\">CSS 将DIV画成直角三角形</h3>\\n<p>教程: <a href=\\\"https://www.cnblogs.com/v-weiwang/p/5057588.html\\\">https://www.cnblogs.com/v-weiwang/p/5057588.html</a></p>\\n<h3 id=\\\"css自定义滚动条样式\\\">CSS自定义滚动条样式</h3>\\n<p><a href=\\\"https://segmentfault.com/a/1190000012800450\\\">https://segmentfault.com/a/1190000012800450</a></p>\\n<p>特效是不会无故无效的，检查一下是不是开了inline</p>\\n<p>下面这个是coding的滚动条样式：</p>\\n<pre><code class=\\\"hljs language-css\\\">*::-webkit-scrollbar {\\n    <span class=\\\"hljs-attribute\\\">width</span>: <span class=\\\"hljs-number\\\">8px</span>;\\n    <span class=\\\"hljs-attribute\\\">height</span>: <span class=\\\"hljs-number\\\">8px</span>; \\n}\\n*::-webkit-scrollbar-track {\\n    <span class=\\\"hljs-attribute\\\">background-color</span>: <span class=\\\"hljs-built_in\\\">rgba</span>(<span class=\\\"hljs-number\\\">216</span>, <span class=\\\"hljs-number\\\">221</span>, <span class=\\\"hljs-number\\\">228</span>, <span class=\\\"hljs-number\\\">0.3</span>);\\n    <span class=\\\"hljs-attribute\\\">border-radius</span>: <span class=\\\"hljs-number\\\">10px</span>; \\n}\\n*::-webkit-scrollbar-thumb {\\n    <span class=\\\"hljs-attribute\\\">border-radius</span>: <span class=\\\"hljs-number\\\">10px</span>;\\n    <span class=\\\"hljs-attribute\\\">background</span>: <span class=\\\"hljs-number\\\">#76808e</span>; \\n}\\n*::-webkit-scrollbar-thumb:window-inactive {\\n    <span class=\\\"hljs-attribute\\\">background</span>: <span class=\\\"hljs-number\\\">#d8dde4</span>; \\n}\\n</code></pre>\\n<h3 id=\\\"css-inline-block-垂直居中\\\">CSS inline-block 垂直居中</h3>\\n<p><a href=\\\"https://www.cnblogs.com/olafff/p/5103775.html\\\">https://www.cnblogs.com/olafff/p/5103775.html</a></p>\\n<p><a href=\\\"https://www.cnblogs.com/hutuzhu/p/4450850.html\\\">https://www.cnblogs.com/hutuzhu/p/4450850.html</a></p>\\n<h3 id=\\\"scroll-snap-滚动贴合\\\">Scroll snap 滚动贴合</h3>\\n<p><a href=\\\"https://developer.mozilla.org/zh-CN/docs/Web/CSS/scroll-snap-type\\\">https://developer.mozilla.org/zh-CN/docs/Web/CSS/scroll-snap-type</a></p>\\n\";","export default \"<h2 id=\\\"mac\\\">MAC</h2>\\n<h3 id=\\\"mac-m1-系统怎么进入恢复模式\\\">MAC M1 系统怎么进入恢复模式</h3>\\n<p>Intel 的 MAC 是在开机显示 logo 的时候按下<code>command + R</code>，而 M1 的 MAC 只需要长按开机键就能进入了</p>\\n<h3 id=\\\"mac-启动安全性实用工具\\\">MAC 启动安全性实用工具</h3>\\n<p><a href=\\\"https://support.apple.com/zh-cn/HT208198\\\">https://support.apple.com/zh-cn/HT208198</a></p>\\n<h3 id=\\\"mac-m1-视频录制录入系统声音\\\">MAC M1 视频录制录入系统声音</h3>\\n<p><strong>Intel</strong>的 Mac 是可以用<a href=\\\"https://github.com/mattingalls/Soundflower/releases/tag/2.0b2\\\">Soundflower</a>来解决</p>\\n<p>但是它不支持<strong>M1</strong>，所以找到了替代品</p>\\n<p><a href=\\\"https://apple.stackexchange.com/questions/414072/soundflower-replacement-on-m1-macs\\\">https://apple.stackexchange.com/questions/414072/soundflower-replacement-on-m1-macs</a></p>\\n<p>就是这个<a href=\\\"https://existential.audio/blackhole/\\\">BlackHole</a></p>\\n<p>安装好之后打开</p>\\n<p><img src=\\\"../../../../public/img/20210425192156.png\\\" alt=\\\"\\\"></p>\\n<p>添加聚合设备之后，再打开声音设置-&gt;输出-&gt;选上你刚设置的输出源</p>\\n<p><img src=\\\"../../../../public/img/20210425192756.png\\\" alt=\\\"\\\"></p>\\n<h3 id=\\\"mac-m1-安装-homebrew\\\">MAC M1 安装 Homebrew</h3>\\n<p>选择国内镜像安装</p>\\n<pre><code class=\\\"hljs language-bash\\\">/bin/zsh -c <span class=\\\"hljs-string\\\">&quot;<span class=\\\"hljs-subst\\\">$(curl -fsSL https://gitee.com/cunkai/HomebrewCN/raw/master/Homebrew.sh)</span>&quot;</span>\\n</code></pre>\\n<h3 id=\\\"关于-big-sur-没有权限打开应用程序的解决方法\\\">关于 Big Sur 没有权限打开应用程序的解决方法</h3>\\n<p><a href=\\\"https://zhuanlan.zhihu.com/p/331816664\\\">https://zhuanlan.zhihu.com/p/331816664</a></p>\\n<h3 id=\\\"mac-查看-ssd-写入和电源使用情况\\\">MAC 查看 SSD 写入和电源使用情况</h3>\\n<pre><code class=\\\"hljs language-bash\\\">brew install smartmontools\\nsmartctl -a disk0\\n</code></pre>\\n\";","export default \"<h2 id=\\\"latex\\\">LaTeX</h2>\\n<h3 id=\\\"vscode-tex-file-formatting-on-save\\\">Vscode <code>.tex</code> `file formatting on save</h3>\\n<p>Tools:</p>\\n<ol>\\n<li>LaTeX-Workshop extension;</li>\\n<li>latexindent.pl</li>\\n<li>Save and Run extension(optional);</li>\\n</ol>\\n<h4 id=\\\"toggle-formatter\\\">Toggle formatter</h4>\\n<h5 id=\\\"option-1\\\">Option 1</h5>\\n<p>While using LaTeX-Workshop+latexindent.pl, it will never toggle the indent process.</p>\\n<p> I fix it by replace the extension&#39;s setting:</p>\\n<pre><code class=\\\"hljs language-json\\\"><span class=\\\"hljs-punctuation\\\">{</span>\\n  <span class=\\\"hljs-attr\\\">&quot;latex-workshop.latex.recipes&quot;</span><span class=\\\"hljs-punctuation\\\">:</span> <span class=\\\"hljs-punctuation\\\">[</span>\\n    <span class=\\\"hljs-punctuation\\\">{</span>\\n      <span class=\\\"hljs-attr\\\">&quot;name&quot;</span><span class=\\\"hljs-punctuation\\\">:</span> <span class=\\\"hljs-string\\\">&quot;latexmk 🔃&quot;</span><span class=\\\"hljs-punctuation\\\">,</span>\\n      <span class=\\\"hljs-comment\\\">// add tool &quot;latexindent&quot; as the second step of this recipes</span>\\n      <span class=\\\"hljs-attr\\\">&quot;tools&quot;</span><span class=\\\"hljs-punctuation\\\">:</span> <span class=\\\"hljs-punctuation\\\">[</span><span class=\\\"hljs-string\\\">&quot;latexmk&quot;</span><span class=\\\"hljs-punctuation\\\">,</span> <span class=\\\"hljs-string\\\">&quot;latexindent&quot;</span><span class=\\\"hljs-punctuation\\\">]</span>\\n    <span class=\\\"hljs-punctuation\\\">}</span><span class=\\\"hljs-punctuation\\\">,</span>\\n  <span class=\\\"hljs-punctuation\\\">]</span><span class=\\\"hljs-punctuation\\\">,</span>\\n  <span class=\\\"hljs-attr\\\">&quot;latex-workshop.latex.tools&quot;</span><span class=\\\"hljs-punctuation\\\">:</span> <span class=\\\"hljs-punctuation\\\">[</span>\\n    <span class=\\\"hljs-comment\\\">// previous tools should be remained ....</span>\\n    \\n    <span class=\\\"hljs-comment\\\">// adding a new tool named latexindent</span>\\n    <span class=\\\"hljs-punctuation\\\">{</span>\\n      <span class=\\\"hljs-attr\\\">&quot;name&quot;</span><span class=\\\"hljs-punctuation\\\">:</span> <span class=\\\"hljs-string\\\">&quot;latexindent&quot;</span><span class=\\\"hljs-punctuation\\\">,</span>\\n      <span class=\\\"hljs-attr\\\">&quot;command&quot;</span><span class=\\\"hljs-punctuation\\\">:</span> <span class=\\\"hljs-string\\\">&quot;latexindent&quot;</span><span class=\\\"hljs-punctuation\\\">,</span>\\n      <span class=\\\"hljs-attr\\\">&quot;args&quot;</span><span class=\\\"hljs-punctuation\\\">:</span> <span class=\\\"hljs-punctuation\\\">[</span><span class=\\\"hljs-string\\\">&quot;%DOC_EXT%&quot;</span><span class=\\\"hljs-punctuation\\\">,</span> <span class=\\\"hljs-string\\\">&quot;-w&quot;</span><span class=\\\"hljs-punctuation\\\">]</span><span class=\\\"hljs-punctuation\\\">,</span>\\n      <span class=\\\"hljs-attr\\\">&quot;env&quot;</span><span class=\\\"hljs-punctuation\\\">:</span> <span class=\\\"hljs-punctuation\\\">{</span><span class=\\\"hljs-punctuation\\\">}</span>\\n    <span class=\\\"hljs-punctuation\\\">}</span>\\n  <span class=\\\"hljs-punctuation\\\">]</span>\\n<span class=\\\"hljs-punctuation\\\">}</span> \\n</code></pre>\\n<h5 id=\\\"option-2-extension-save-and-run\\\">Option 2: Extension &quot;Save and Run&quot;</h5>\\n<pre><code class=\\\"hljs language-json\\\"><span class=\\\"hljs-attr\\\">&quot;saveAndRun&quot;</span><span class=\\\"hljs-punctuation\\\">:</span> <span class=\\\"hljs-punctuation\\\">{</span>\\n  <span class=\\\"hljs-attr\\\">&quot;commands&quot;</span><span class=\\\"hljs-punctuation\\\">:</span> <span class=\\\"hljs-punctuation\\\">[</span>\\n    <span class=\\\"hljs-punctuation\\\">{</span>\\n      <span class=\\\"hljs-attr\\\">&quot;match&quot;</span><span class=\\\"hljs-punctuation\\\">:</span> <span class=\\\"hljs-string\\\">&quot;\\\\\\\\.tex$&quot;</span><span class=\\\"hljs-punctuation\\\">,</span>\\n      <span class=\\\"hljs-attr\\\">&quot;cmd&quot;</span><span class=\\\"hljs-punctuation\\\">:</span> <span class=\\\"hljs-string\\\">&quot;latexindent &#x27;${file}&#x27; -o &#x27;${file}&#x27; -s -g /dev/null&quot;</span><span class=\\\"hljs-punctuation\\\">,</span>\\n      <span class=\\\"hljs-attr\\\">&quot;useShortcut&quot;</span><span class=\\\"hljs-punctuation\\\">:</span> <span class=\\\"hljs-keyword\\\">false</span><span class=\\\"hljs-punctuation\\\">,</span>\\n      <span class=\\\"hljs-attr\\\">&quot;silent&quot;</span><span class=\\\"hljs-punctuation\\\">:</span> <span class=\\\"hljs-keyword\\\">true</span>\\n    <span class=\\\"hljs-punctuation\\\">}</span>\\n  <span class=\\\"hljs-punctuation\\\">]</span>\\n<span class=\\\"hljs-punctuation\\\">}</span>\\n</code></pre>\\n<h4 id=\\\"environment-modules-for-latexindentpl\\\">Environment modules for latexindent.pl</h4>\\n<p>Refer to: <a href=\\\"https://latexindentpl.readthedocs.io/en/latest/appendices.html#mac\\\">https://latexindentpl.readthedocs.io/en/latest/appendices.html#mac</a></p>\\n<h4 id=\\\"no-backup-file-and-log-file\\\">no backup file and log file</h4>\\n<p><code>-o</code>: no backup;</p>\\n<p><code>-g /dev/null</code>: no log;</p>\\n<pre><code class=\\\"hljs language-bash\\\">latexindent <span class=\\\"hljs-string\\\">&#x27;${file}&#x27;</span> -o <span class=\\\"hljs-string\\\">&#x27;${file}&#x27;</span> -s -g /dev/null<span class=\\\"hljs-string\\\">&quot;</span>\\n</code></pre>\\n<h4 id=\\\"update-latexindentpl\\\">Update latexindent.pl</h4>\\n<p>The latexindent.pl which brought by MacTex might out of date. Replace it manually by replacing it on the mac.</p>\\n<p>It might located at:</p>\\n<pre><code class=\\\"hljs language-bash\\\">/usr/local/texlive/2021/texmf-dist/scripts/latexindent/LatexIndent/\\n</code></pre>\\n<h4 id=\\\"latex-trick\\\">Latex Trick</h4>\\n<ol>\\n<li><p>use url nicely:</p>\\n<p><a href=\\\"https://www.kronto.org/thesis/tips/url-formatting.html\\\">How do you get nicely formatted URLs in the bibliography?</a></p>\\n<p><a href=\\\"https://tex.stackexchange.com/questions/4503/how-do-i-specify-color-in-rgb-using-hypersetup-in-hyperref/4506#4506\\\"><a href=\\\"https://tex.stackexchange.com/questions/4503/how-do-i-specify-color-in-rgb-using-hypersetup-in-hyperref\\\">How do I specify color in RGB using \\\\hypersetup in hyperref?</a></a></p>\\n<p><a href=\\\"https://www.overleaf.com/learn/latex/Questions%2FI%27m_trying_to_include_URLs_in_my_.tex_or_.bib%2C_but_I_got_an_error_%22Missing_%24_inserted%22\\\">I&#39;m trying to include URLs in my .tex or .bib, but I got an error &quot;Missing $ inserted&quot;</a></p>\\n</li>\\n<li><p>first line indent: <a href=\\\"https://tex.stackexchange.com/questions/39227/no-indent-in-the-first-paragraph-in-a-section\\\">No indent in the first paragraph in a section?</a></p>\\n</li>\\n<li><p>line space: <a href=\\\"https://zhuanlan.zhihu.com/p/138408387\\\">https://zhuanlan.zhihu.com/p/138408387</a></p>\\n</li>\\n<li><p><a href=\\\"https://tex.stackexchange.com/questions/111822/using-subfloat-to-place-figures-side-by-side\\\">Using subfloat to place figures side by side</a></p>\\n</li>\\n<li><p><a href=\\\"https://tex.stackexchange.com/questions/467491/warning-a-possible-image-without-description\\\">Warning: a possible image without description</a></p>\\n</li>\\n<li><p><a href=\\\"https://tex.stackexchange.com/questions/456063/how-to-remove-authors-addresses-in-acm-art\\\">How to remove Author&#39;s addresses in acm art?</a></p>\\n</li>\\n<li><p><a href=\\\"https://tex.stackexchange.com/questions/21536/how-to-remove-the-copyright-box-on-a-paper-that-uses-the-acm-sig-alternate-cls-c\\\">How to remove the copyright box on a paper that uses the ACM sig-alternate.cls class file?</a></p>\\n</li>\\n<li><p><a href=\\\"https://tex.stackexchange.com/questions/296624/subfloat-vertical-alignment-in-latex\\\">Subfloat vertical alignment in latex</a></p>\\n</li>\\n<li><p><a href=\\\"https://mirror.csclub.uwaterloo.ca/CTAN/macros/latex/contrib/csquotes/csquotes.pdf\\\">Context Sensitive Quotation Facilities</a></p>\\n</li>\\n<li><p><a href=\\\"https://tex.stackexchange.com/questions/12703/how-to-create-fixed-width-table-columns-with-text-raggedright-centered-raggedlef\\\">How to create fixed width table columns with text raggedright/centered/raggedleft?</a></p>\\n</li>\\n<li><p><a href=\\\"https://tex.stackexchange.com/questions/100434/centering-figure-captions-in-ieeetran\\\">Centering figure captions in IEEEtran</a></p>\\n</li>\\n<li><p><a href=\\\"https://tex.stackexchange.com/questions/62636/referencing-subfigures-in-main-caption-with-subfloat-and-subref\\\">Referencing subfigures in main caption (with \\\\subfloat and \\\\subref)</a></p>\\n</li>\\n<li><p><a href=\\\"https://tex.stackexchange.com/questions/14144/make-more-lines-fit-on-the-page-in-the-scrreprt-class\\\">Make more lines fit on the page in the scrreprt class</a></p>\\n</li>\\n<li><p><a href=\\\"https://tex.stackexchange.com/questions/161439/fancyhdr-and-scrreprt\\\">Fancyhdr and scrreprt</a> header on scrreprt</p>\\n</li>\\n<li><p><a href=\\\"https://tex.stackexchange.com/questions/74108/text-alignment-on-top-with-multirow-command\\\">Text alignment on top with multirow command</a></p>\\n</li>\\n<li><p><a href=\\\"https://tex.stackexchange.com/questions/70143/cross-reference-with-custom-text\\\">Cross-Reference with custom text</a></p>\\n</li>\\n<li><p><a href=\\\"https://tex.stackexchange.com/questions/5017/center-column-with-specifying-width-in-table-tabular-enviroment\\\">Center column with specifying width in table (tabular enviroment)?</a></p>\\n</li>\\n<li><p><a href=\\\"https://tex.stackexchange.com/questions/117358/newcommand-argument-confusion\\\">\\\\newcommand argument confusion</a></p>\\n</li>\\n<li><p><a href=\\\"https://tex.stackexchange.com/questions/194236/why-does-not-return-a-new-line-in-an-equation\\\">Why does \\\\ not return a new line in an equation?</a></p>\\n</li>\\n<li></li>\\n</ol>\\n\";","export default \"<h2 id=\\\"mysql\\\">MySQL</h2>\\n<h3 id=\\\"数据库三范式\\\">数据库三范式</h3>\\n<p><strong>第一范式（1NF）</strong></p>\\n<p>数据表中的每一列，必须是不可拆分的最小单元，也即必须保证列的原子性；</p>\\n<p><strong>第二范式（2NF）</strong></p>\\n<p>满足**<em>1NF</em><strong>要求的所有列，每个非主键列都必须完全依赖域主键，目的是为了消除</strong>部分依赖**；</p>\\n<p>举例：</p>\\n<p>比如有课程分数表（学号，姓名，系名，系主任，课名，分数）</p>\\n<p>我们得知学号和课名能唯一确定一个分数，但是还有其他冗余数据：<strong>姓名、系名、系主任</strong></p>\\n<p>于是有函数依赖关系：</p>\\n<p><img src=\\\"https://pic2.zhimg.com/80/51e2689ac9416a91800e63101bee9db7_1440w.jpg\\\" alt=\\\"img\\\"></p>\\n<p>这一步完成以后，可以得到，表 3 的码只有一个，就是<strong>（学号、课名）</strong>。</p>\\n<p>第二步：\\n主属性有两个：<strong>学号</strong> 与 <strong>课名</strong></p>\\n<p>第三步：\\n非主属性有四个：<strong>姓名</strong>、<strong>系名</strong>、<strong>系主任</strong>、<strong>分数</strong></p>\\n<p><strong>第四步：</strong>\\n对于<strong>（学号，课名） → 姓名</strong>，有 <strong>学号 → 姓名</strong>，存在非主属性 <strong>姓名</strong> 对码<strong>（学号，课名）</strong>的部分函数依赖。\\n对于<strong>（学号，课名） → 系名</strong>，有 <strong>学号 → 系名</strong>，存在非主属性 系<strong>名</strong> 对码<strong>（学号，课名）</strong>的部分函数依赖。\\n对于<strong>（学号，课名） → 系主任</strong>，有 <strong>学号 → 系主任</strong>，存在非主属性 对码<strong>（学号，课名）</strong>的部分函数依赖。</p>\\n<p>所以表 3 存在非主属性对于码的部分函数依赖，最高只符合 1NF 的要求，不符合 2NF 的要求。</p>\\n<p>为了让表 3 符合 2NF 的要求，我们必须消除这些部分函数依赖，只有一个办法，就是将大数据表拆分成两个或者更多个更小的数据表，在拆分的过程中，要达到更高一级范式的要求，这个过程叫做”模式分解“。模式分解的方法不是唯一的，以下是其中一种方法：\\n选课（学号，课名，分数）\\n学生（学号，姓名，系名，系主任）</p>\\n<p>我们先来判断以下，<strong>选课</strong>表与<strong>学生</strong>表，是否符合了 2NF 的要求？</p>\\n<p>对于<strong>选课</strong>表，其码是<strong>（学号，课名）</strong>，主属性是<strong>学号</strong>和<strong>课名</strong>，非主属性是<strong>分数</strong>，<strong>学号</strong>确定，并不能唯一确定<strong>分数</strong>，<strong>课名</strong>确定，也不能唯一确定<strong>分数</strong>，所以不存在非主属性<strong>分数</strong>对于码 <strong>（学号，课名）</strong>的部分函数依赖，所以此表符合 2NF 的要求。</p>\\n<p>对于<strong>学生</strong>表，其码是<strong>学号，</strong>主属性是<strong>学号</strong>，非主属性是<strong>姓名、系名</strong>和<strong>系主任</strong>，因为码只有一个属性，所以不可能存在非主属性对于码 的部分函数依赖，所以此表符合 2NF 的要求。</p>\\n<p>下图表示了模式分解以后的新的函数依赖关系</p>\\n<p><img src=\\\"https://pic1.zhimg.com/50/2f4b4a887f6a61674a49d03d79e3fe17_hd.jpg\\\" alt=\\\"img\\\"></p>\\n<p><strong>第三范式（3NF）</strong></p>\\n<p>满足**<em>2NF</em><strong>的同时，消除非主属性对于主键的</strong>传递依赖**；</p>\\n<p>举例：</p>\\n<p>对于<strong>选课</strong>表，主码为（学号，课名），主属性为<strong>学号</strong>和<strong>课名，</strong>非主属性只有一个，为分数，不可能存在传递函数依赖，所以<strong>选课</strong>表的设计，符合 3NF 的要求。</p>\\n<p>对于<strong>学生</strong>表，主码为<strong>学号</strong>，主属性为<strong>学号</strong>，非主属性为<strong>姓名</strong>、<strong>系名</strong>和<strong>系主任</strong>。因为 学号 → 系名，同时 系名 → 系主任，所以存在非主属性<strong>系主任</strong>对于码<strong>学号</strong>的传递函数依赖，所以<strong>学生</strong>表的设计，不符合 3NF 的要求。。</p>\\n<p>为了让数据表设计达到 3NF，我们必须进一步进行模式分解为以下形式：\\n选课（学号，课名，分数）\\n学生（学号，姓名，系名）\\n系（系名，系主任）</p>\\n<p><img src=\\\"https://pic4.zhimg.com/50/5b20707ff3d9afb51ef7bfda726c3e34_hd.jpg\\\" alt=\\\"img\\\"></p>\\n<p>再来分析：</p>\\n<p>对于<strong>选课</strong>表，符合 3NF 的要求，之前已经分析过了。</p>\\n<p>对于<strong>学生</strong>表，码为<strong>学号</strong>，主属性为<strong>学号</strong>，非主属性为<strong>系名</strong>，不可能存在非主属性对于码的传递函数依赖，所以符合 3NF 的要求。</p>\\n<p>对于<strong>系</strong>表，码为<strong>系名</strong>，主属性为<strong>系名</strong>，非主属性为<strong>系主任</strong>，不可能存在非主属性对于码的传递函数依赖（至少要有三个属性才可能存在传递函数依赖关系），所以符合 3NF 的要求</p>\\n<p><strong>为什么需要遵循范式？</strong></p>\\n<ul>\\n<li>减少数据冗余；</li>\\n<li>避免插入异常、修改异常、删除异常；</li>\\n</ul>\\n<blockquote>\\n<p>作者：刘慰\\n链接：<a href=\\\"https://www.zhihu.com/question/24696366/answer/29189700\\\">https://www.zhihu.com/question/24696366/answer/29189700</a>\\n来源：知乎\\n著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。</p>\\n</blockquote>\\n<h3 id=\\\"mysql-用户管理\\\">MySQL 用户管理</h3>\\n<pre><code class=\\\"hljs language-sql\\\"><span class=\\\"hljs-operator\\\">/</span><span class=\\\"hljs-operator\\\">/</span> 查看所有用户\\nuse mysql;\\n<span class=\\\"hljs-keyword\\\">select</span> <span class=\\\"hljs-operator\\\">*</span> <span class=\\\"hljs-keyword\\\">from</span> <span class=\\\"hljs-keyword\\\">user</span>;\\n\\n<span class=\\\"hljs-operator\\\">/</span><span class=\\\"hljs-operator\\\">/</span> 查看用户权限\\nhow grants;\\n<span class=\\\"hljs-keyword\\\">show</span> grants <span class=\\\"hljs-keyword\\\">for</span> root;\\n\\n<span class=\\\"hljs-operator\\\">/</span><span class=\\\"hljs-operator\\\">/</span> 授予用户权限\\n<span class=\\\"hljs-keyword\\\">grant</span> <span class=\\\"hljs-keyword\\\">select</span> <span class=\\\"hljs-keyword\\\">on</span> base.table <span class=\\\"hljs-keyword\\\">to</span> hi;\\n<span class=\\\"hljs-keyword\\\">grant</span> <span class=\\\"hljs-keyword\\\">all</span> <span class=\\\"hljs-keyword\\\">on</span> base.<span class=\\\"hljs-operator\\\">*</span> <span class=\\\"hljs-keyword\\\">to</span> <span class=\\\"hljs-string\\\">&#x27;hi&#x27;</span>@<span class=\\\"hljs-string\\\">&#x27;localhost&#x27;</span>;\\n<span class=\\\"hljs-operator\\\">/</span><span class=\\\"hljs-operator\\\">/</span> 移除用户权限\\n<span class=\\\"hljs-keyword\\\">revoke</span> <span class=\\\"hljs-keyword\\\">select</span> <span class=\\\"hljs-keyword\\\">on</span> base.table <span class=\\\"hljs-keyword\\\">from</span> hi;\\n<span class=\\\"hljs-operator\\\">/</span><span class=\\\"hljs-operator\\\">/</span> 刷新权限\\nflush privileges;\\n\\n<span class=\\\"hljs-operator\\\">/</span><span class=\\\"hljs-operator\\\">/</span> 创建用户\\n<span class=\\\"hljs-keyword\\\">create</span> <span class=\\\"hljs-keyword\\\">user</span> hi identified <span class=\\\"hljs-keyword\\\">by</span> <span class=\\\"hljs-string\\\">&#x27;passowrd&#x27;</span>;\\n<span class=\\\"hljs-operator\\\">/</span><span class=\\\"hljs-operator\\\">/</span> 删除用户\\n<span class=\\\"hljs-keyword\\\">drop</span> <span class=\\\"hljs-keyword\\\">user</span> hi;\\n\\n<span class=\\\"hljs-operator\\\">/</span><span class=\\\"hljs-operator\\\">/</span> 改密码\\n<span class=\\\"hljs-keyword\\\">set</span> password <span class=\\\"hljs-keyword\\\">for</span> hi <span class=\\\"hljs-operator\\\">=</span> Password(<span class=\\\"hljs-string\\\">&#x27;new password&#x27;</span>);\\n<span class=\\\"hljs-operator\\\">/</span><span class=\\\"hljs-operator\\\">/</span> 改自己密码\\n<span class=\\\"hljs-keyword\\\">set</span> password <span class=\\\"hljs-operator\\\">=</span> Password(<span class=\\\"hljs-string\\\">&#x27;new password&#x27;</span>);\\n</code></pre>\\n<p><a href=\\\"https://www.cnblogs.com/gavin110-lgy/p/5773981.html\\\">https://www.cnblogs.com/gavin110-lgy/p/5773981.html</a>\\n<a href=\\\"https://www.cnblogs.com/clsn/p/8047028.html\\\">https://www.cnblogs.com/clsn/p/8047028.html</a></p>\\n<h3 id=\\\"mysql-自己更新自己\\\">MySQL 自己更新自己</h3>\\n<p><a href=\\\"https://www.cnblogs.com/jeffen/p/7016547.html\\\">https://www.cnblogs.com/jeffen/p/7016547.html</a></p>\\n<p>mysql 不允许在同一次执行中自己更新自己 所以要套一次层中间查询 欺骗 mysql 以为不是同一张表</p>\\n<h3 id=\\\"mysql-系统体系架构\\\">MySQL 系统体系架构</h3>\\n<p><img src=\\\"../../../../public/img/20200611194657.png\\\" alt=\\\"\\\"></p>\\n<p>根据图里我们可以发现，MySQL 系统最核心的“存储引擎”是以插件的形式为系统提供服务的，这种架构提供了与存储引擎实现无关的一系列标准服务支持，让引擎的实现能够解放出来。</p>\\n<p><strong>需要注意的是，存储引擎是基于表的，而不是数据库</strong></p>\\n<h3 id=\\\"mysql-各引擎介绍\\\">MySQL 各引擎介绍</h3>\\n<p><strong>InnoDB</strong></p>\\n<p>MySQL5.5.8 以后的默认引擎，支持事物、行锁设计、外键、全文索引、非锁定读（默认读操作不会产生锁）</p>\\n<p>使用多版本并发控制（MVCC）来支持高并发性，并实现了 4 中标准的隔离级别，能避免幻读；还提供了许多其他的特性来支持高性能高并发；每张表按照主键顺序进行存放；</p>\\n<p><strong>MyISAM</strong></p>\\n<p>不支持事物、表锁设计，支持全文索引；</p>\\n<p>缓冲池不缓存数据，只缓存索引；</p>\\n<p><strong>NDB</strong></p>\\n<p>集群存储引擎，特点是数据都放在内存中，而非索引数据存在磁盘上，因此性能很快，但是连接操作时性能很差，因为该操作是在数据库完成的，而不是又引擎完成的；</p>\\n<p><strong>Memory</strong></p>\\n<p>数据都在内存中，数据库如果重启或者崩溃就会丢失所有数据，适合用于存储临时数据；默认使用哈希索引，而不是 B+树索引；</p>\\n<p>但是只支持表锁，所以并发性能差，不支持全部数据类型；</p>\\n<p><strong>Archive</strong></p>\\n<p>只支持 Insert 和 Select 操作，特点是会对数据进行压缩，压缩比高，适合存储归档数据、日志信息等；</p>\\n<p>虽然支持行锁，但是不支持事物；</p>\\n<h3 id=\\\"mysql-文件有哪些\\\">MySQL 文件有哪些</h3>\\n<h4 id=\\\"日志文件\\\">日志文件</h4>\\n<h5 id=\\\"错误日志\\\">错误日志</h5>\\n<p>错误日志对 MySQL 的启动、运行、关闭过程进行记录，在 MySQL 用户操作出现错误的时候，错误信息会被记录在这个日志里</p>\\n<p>而系统也会在运行时发出一些警告，提示用户需要优化系统</p>\\n<p>通过以下命令查看日志的位置：</p>\\n<pre><code class=\\\"hljs language-sql\\\"><span class=\\\"hljs-keyword\\\">show</span> variables <span class=\\\"hljs-keyword\\\">like</span> <span class=\\\"hljs-string\\\">&#x27;log_error&#x27;</span>;\\n</code></pre>\\n<h5 id=\\\"慢查询日志\\\">慢查询日志</h5>\\n<p>在 MySQL 启动的时候可以设置一个阈值，MySQL 系统就会将运行时间超过这个阈值的 SQL 语句记录到慢查询日志中，如果出现这种 SQL，你可能需要考虑是否能够优化或者拆分这个 SQL 业务相关的业务</p>\\n<h5 id=\\\"查询日志\\\">查询日志</h5>\\n<p>记录了所有用户对 MySQL 数据库的请求信息</p>\\n<h5 id=\\\"二进制日志\\\">二进制日志</h5>\\n<p>记录了所有 MySQL 数据库执行的更改操作，不包括 select 和 show 这类操作，二进制日志的作用主要有：</p>\\n<ul>\\n<li>恢复数据；</li>\\n<li>复制数据；</li>\\n<li>审计（判断是否有对数据库的注入攻击）；</li>\\n</ul>\\n<p>它和重做日志不同的是：</p>\\n<ol>\\n<li>重做日志是 InnoDB 引擎写的，是引擎层面的文件，而二进制日志是 MySQL 系统写的，任何引擎都会记录二进制文件日志；</li>\\n<li>格式也不同，二进制日志是一种逻辑日志，它记录的是操作的 SQL 语句，而重做日志是物理格式日志，记录的是对每个页的修改；所以重做日志比二进制日志的恢复速度快很多</li>\\n<li>写入磁盘的时间点不同，二进制日志只在<strong>事务提交完成后</strong>做一次写入，而重做日志会在事务<strong>进行中</strong>不断地写入；</li>\\n</ol>\\n<p>日志格式：</p>\\n<ul>\\n<li>STATEMENT：记录原生的 SQL 语句；</li>\\n<li>ROW：记录表的更改情况；</li>\\n<li>MIXED：一般使用 STATEMENT，一些情况下会使用 ROW 格式；</li>\\n</ul>\\n<h5 id=\\\"innodb-存储引擎文件\\\">InnoDB 存储引擎文件</h5>\\n<ul>\\n<li>表空间文件：InnoDB 将存储的数据按照表空间进行存放，<strong>需要注意的是，这里还存放着 undo log 文件</strong>；</li>\\n<li>重做日志文件：记录了对于 InnoDB 引擎的事务日志；不同的操作有不同个重做日志格式；一般数据库里只会有两个重做日志文件，而且是循环使用的，一个写满了再换另一个；重做日志文件不能设置地太大，否则数据恢复会很长时间，也不能太小，否则会频繁切换重做日志，而且会频繁触发**<em>checkpoint</em>**导致性能抖动；</li>\\n</ul>\\n<h4 id=\\\"其他文件\\\">其他文件</h4>\\n<ul>\\n<li>数据库系统的配置文件；</li>\\n<li>pid 文件；</li>\\n<li>套接字文件（socket）；</li>\\n<li>表结构定义文件</li>\\n</ul>\\n<h3 id=\\\"innodb-逻辑存储结构\\\">InnoDB 逻辑存储结构</h3>\\n<p><img src=\\\"../../../../public/img/20200612124701.png\\\" alt=\\\"\\\"></p>\\n<p>所有数据都被存放在一个空间中，称为<strong>表空间</strong>，而表空间又由<strong>段（segment）、区（extent）、页（page）</strong>组成</p>\\n<p><strong>表空间</strong></p>\\n<p>表空间是 InnoDB 存储引擎的最高层，所有数据都存放在表空间，默认情况下只有一个共享表空间，如果用参数配置了<code>innodb_file_per_table</code>，那么每张表内的数据可以单独放在一个表空间内</p>\\n<p>每张表的单独表空间只存放数据、索引、插入缓冲 Bitmap 页，而其他的数据如回滚信息、插入缓冲索引页、系统事务信息、二次写缓冲等还是存放在原来的共享表空间里</p>\\n<p><strong>段</strong></p>\\n<p>表空间由段组成，常见的段有数据段、索引段、回滚段</p>\\n<p>由于 InnoDB 的存储引擎表是由索引组织的，所以数据即索引，索引即数据，这点在 B+树上的体现为：数据段为 B+树的子叶节点，索引段为 B+树的非索引节点</p>\\n<p><strong>区</strong></p>\\n<p>区由连续的页组成，每个区的大小都是 1MB，且为了保证页的连续性，引擎每次都会申请 4 个以上的区，默认情况下，一页有 16KB，于是一个区有 64 张连续的页；</p>\\n<p><strong>页</strong></p>\\n<p>页的默认大小为 16KB，但也可以通过配置来调整</p>\\n<p>常见的页类型有：</p>\\n<ul>\\n<li>数据页（B-tree Node）；</li>\\n<li>undo 页；</li>\\n<li>系统页；</li>\\n<li>事物数据页；</li>\\n<li>插入缓冲位图页；</li>\\n<li>插入缓冲空闲列表页；</li>\\n<li>未压缩的二进制大对象页；</li>\\n<li>已压缩的二进制大对象页；</li>\\n</ul>\\n<p><strong>行</strong></p>\\n<p>InnoDB 引擎是面向行的，每页最多允许存放 7992 行记录；</p>\\n<h3 id=\\\"innodb-约束类型概念\\\">InnoDB 约束类型&amp;概念</h3>\\n<p>关系型数据库系统和文件系统的一个区别是，关系型数据库本身能保证数据的完整性，不需要程序控制</p>\\n<p>所有的关系型数据库都提供了约束机制，利用这个机制区保证数据完整性，一般来说，数据完整性包括：</p>\\n<ul>\\n<li>保证表中有一个主键，在 InnoDB 中可以使用 Primary Key 或者 Unique Key 约束来保证；</li>\\n<li>触发器；</li>\\n<li>域完整性，保证每列的值满足特定条件；</li>\\n</ul>\\n<p>在 InnoDB 中，提供的约束有：</p>\\n<ul>\\n<li>Primary Key；</li>\\n<li>Unique Key；</li>\\n<li>Foreign Key；</li>\\n<li>Default；</li>\\n<li>Not Null；</li>\\n<li>ENUM &amp; SET 约束，但是约束力很小，建议使用触发器；</li>\\n</ul>\\n<p>我们需要在创建表的时候就就列字段设定约束，也可以创建完之后用 alter table 来修改约束：</p>\\n<pre><code class=\\\"hljs language-sql\\\"><span class=\\\"hljs-keyword\\\">create</span> <span class=\\\"hljs-keyword\\\">table</span> test (\\n    id <span class=\\\"hljs-type\\\">int</span>,\\n    name <span class=\\\"hljs-type\\\">varchar</span>(<span class=\\\"hljs-number\\\">20</span>),\\n    id_card <span class=\\\"hljs-type\\\">char</span>(<span class=\\\"hljs-number\\\">18</span>),\\n    primiary key (id),\\n    <span class=\\\"hljs-keyword\\\">unique</span> key (name)\\n);\\n</code></pre>\\n<p><strong>约束和索引的区别</strong></p>\\n<p>约束是逻辑上的概念，用来保证数据完整性，而索引是数据结构，不仅有逻辑概念，还代表着物理存储方式</p>\\n<h3 id=\\\"触发器概念\\\">触发器概念</h3>\\n<p>MySQL5.1 之后，触发器的实现已经稳定，我们可以使用其来对数据进行约束，<strong>触发器的作用是在执行 INSERT、UPDATE、DELETE 操作的之前和之后自动调用 SQL 命令或者存储过程</strong></p>\\n<p>最多可以为一个表建立 6 个触发器：INSERT、UPDATE、DELETE 的 Before 和 After 各建立一个，目前只支持按照<strong>每行记录</strong>进行触发</p>\\n<p>通过触发器，用户可以实现 MySQL 本身不支持的<strong>特性</strong>，比如 Check 约束（检查某个值的合法性）、物化视图、高级复制、审计等等；</p>\\n<h3 id=\\\"视图概念\\\">视图概念</h3>\\n<p>视图的主要用途就算被用作为抽象装置，一些程序如果不需要关心表的结构，只需要按照视图定义来<strong>取数据</strong>或者<strong>更新数据</strong>，因此视图在一定程度上起到了安全层的作用；</p>\\n<p>虽然视图只是虚拟表，没有物理文件，但是我们依然可以通过视图来<strong>更新数据</strong></p>\\n<h3 id=\\\"事务-acid\\\">事务 ACID</h3>\\n<p><strong>原子性（Atomicity）</strong></p>\\n<p>是指整个事务是一个不可切分的工作单位，整个事务中所有的数据库操作要都成功，该事务才算成功；事务中任何一个语句失败则整个事务都失败；</p>\\n<p><strong>一致性（Consistency）</strong></p>\\n<p>指事务从一个状态转变到下一个状态的过程中，事务的开始和结束后，数据库的完整性约束没有被破坏；例如某个字段是唯一的，在事务进行当中如果破坏了该字段的唯一性，系统会撤销该事务，然会到初始状态；</p>\\n<p><strong>隔离性（Isolation）</strong></p>\\n<p>隔离性在 MySQL 的 InnoDB 中还代表着：并发控制、可串行化、锁等；</p>\\n<p>事务的隔离性要求每个对鞋事务的对象对其他事务的操作对象能够互相分离，即该事务提交前对其他事务都不可见，一般是用锁来实现；</p>\\n<p><strong>持久性（Durability）</strong></p>\\n<p>事务一旦提交，其结果是永久性的，即使发生宕机事故，数据库也能恢复该数据；</p>\\n<h3 id=\\\"sql-事务隔离级别\\\">SQL 事务隔离级别</h3>\\n<p><strong>读未提交（READ UNCOMMITTED）</strong></p>\\n<p>能够读取到其他事务的正在修改中的<strong>未提交的结果</strong>，称之为脏读；而且性能上说这个隔离级别也没有比后面的级别好多少，反而问题多多</p>\\n<p><strong>读已提交（READ COMMITTED）</strong></p>\\n<p>大多数数据库的默认隔离级别（MySQL 不是），简单来说就是只能够读取到已经提交过的结果，但是在同一次事务中读取某个数据两次可能会得到两个不同的结果（假如其他事务同时对该数据提交了两次修改）；所以该级别也叫不可重复读（nonrepeatable read）</p>\\n<p><strong>可重复读（REPEATABLE READ)</strong></p>\\n<p>可重复读解决了脏读、多次读取不一致的问题，但在理论上，标准的可重复读没有能够解决幻读的问题，即某个事务在读取<strong>范围内数据</strong>的时候，另一个事务在这个范围又插了一条数据，原来的事务再次读取这个范围就会读取到<strong>幻行</strong>，导致上下文不一致；而 MySQL 的 InnoDB 通过多版本<strong>并发控制（MVCC）</strong>解决了这个问题</p>\\n<p><strong>串行化（SERIALIZABLE）</strong></p>\\n<p>最高级别，强制事务串行执行，避免前面的各种问题，简单说就是在读取的每行上都加了锁，所以这个隔离级别的性能会比较低；</p>\\n<h3 id=\\\"多版本并发控制（mvcc）\\\">多版本并发控制（MVCC）</h3>\\n<p>MVCC 其实并不是一个标准，但是大多数数据库或者引擎都实现了它，可以简单将其理解为<strong>行级锁</strong>的一个变种，但它在很多情况下都避免了对行加锁因此开销小，阻塞率低</p>\\n<p>其基本思路是，所有操作后都会保留一个快照，事务的执行以快照版本为准，也就是说，无论一个需要时间的事务执行期间该记录被修改了多少次，该事务始终只看到该记录在该事务开始之前的样子，除非该事务自己修改了这个记录；所以根据事务开始的时机的不同，它看到的表数据可能不一样，但是一旦事务开启之后，它只能看到唯一一个版本的数据</p>\\n<p>每个引擎对这个机制的实现不同，InnoDB 的行为如下：</p>\\n<ul>\\n<li><p>select</p>\\n<ol>\\n<li>只查找版本早于当前事务版本的数据，保证事务读取的<strong>行</strong>：要么是事务开始前已经存在的，要么是事务自身修改或者拆入过的；</li>\\n<li>行的删除版本要么未定义，要么大于当前事务版本号，保证事务读取到的行在事务开始之前未被删除；</li>\\n</ol>\\n</li>\\n<li><p>insert/delete/update</p>\\n<p>都是对<strong>该行</strong>的版本号进行改动</p>\\n</li>\\n</ul>\\n<h3 id=\\\"mysql-中的死锁\\\">MySQL 中的死锁</h3>\\n<p>一个简单的死锁复现：</p>\\n<ol>\\n<li>t1 开启事务，更新行 a，于是行 a 被 t1 锁住；</li>\\n<li>t2 开启事务，更新行 b，于是行 b 被 t2 锁住；</li>\\n<li>t1 想要更新行 b，无法获取锁，阻塞；</li>\\n<li>t2 想要更新行 a，无法获取锁，阻塞；</li>\\n</ol>\\n<p>数据库对死锁的处理实现了各种<strong>死锁检测</strong>和<strong>死锁超时</strong>，越复杂的系统，比如 InnoDB，越能检测到死锁的循环依赖，并立即返回一个错误；或者当等待锁时机过长的时候，放弃锁请求，但是一般不这样做；</p>\\n<p>InnoDB 的处理是：<strong>将持有最少行级排他锁的事务进行回滚</strong></p>\\n<h3 id=\\\"mysql-备份\\\">MySQL 备份</h3>\\n<p>备份的分类如果按照<strong>备份方法</strong>可以分为：</p>\\n<ul>\\n<li><p>Hot Backup</p>\\n<p>在数据库运行期间直接备份，对正在运行的数据库没有任何影响；</p>\\n<blockquote>\\n<p>使用 MySQL 官方提供的热备工具<code>ibbackup</code>，其优点:</p>\\n<ul>\\n<li>不需要停机，在线备份，也不阻塞任何语句；</li>\\n<li>性能好，其本质是复制<strong>数据库文件</strong>和<strong>重做日志</strong>；</li>\\n<li>支持压缩；</li>\\n<li>支持跨平台</li>\\n</ul>\\n</blockquote>\\n</li>\\n<li><p>Cold Backup</p>\\n<p>在数据库停机的情况下备份，这种备份最简单，一般只需要直接复制数据库数据的物理文件即可；</p>\\n<blockquote>\\n<p>优点：</p>\\n<ul>\\n<li>备份简单，直接复制文件；</li>\\n<li>恢复简单，直接复制到指定位置即可；</li>\\n<li>恢复速度快，不需要执行任何语句和建立任何索引；</li>\\n</ul>\\n<p>缺点：</p>\\n<ul>\\n<li>物理文件通常比逻辑备份文件大很多；</li>\\n<li>不一定总是能跨平台；</li>\\n</ul>\\n</blockquote>\\n</li>\\n<li><p>Warm Backup</p>\\n<p>在数据库运行期间备份，但是会影响是数据库，比如会请求一些加锁操作；</p>\\n</li>\\n</ul>\\n<p>按照备份<strong>文件格式</strong>可以分为：</p>\\n<ul>\\n<li><p>逻辑备份</p>\\n<p>一般是复制 SQL 语句；</p>\\n</li>\\n<li><p>裸文件备份</p>\\n<p>直接复制数据库的物理数据文件，恢复的时间比逻辑备份短很多；</p>\\n</li>\\n</ul>\\n<p>按照备份<strong>文件内容</strong>又可以分为：</p>\\n<ul>\\n<li><p>完全备份</p>\\n<p>对整个数据集进行备份；</p>\\n</li>\\n<li><p>增量备份</p>\\n<p>在上传完全备份的几次上，对更改的数据进行备份；</p>\\n</li>\\n<li><p>日志备份</p>\\n<p>对数据库的二进制日志的备份，通常根据这个文件进行重放（replay）来完成数据库的恢复；</p>\\n</li>\\n</ul>\\n<h3 id=\\\"mysql-复制\\\">MySQL 复制</h3>\\n<p><strong>复制（Replication）</strong>是 MySQL 提供的一种高可用高性能的解决方案，在大型应用中是必不可少的，其步骤为：</p>\\n<ol>\\n<li>主库需要记录二进制日志文件；</li>\\n<li>备库将主库的二进制日志文件复制到自己的<strong>中继日志（Replay Log）</strong>；</li>\\n<li>备库重放中继日志；</li>\\n</ol>\\n<p><img src=\\\"../../../../public/img/20200618165816.png\\\" alt=\\\"\\\"></p>\\n<h4 id=\\\"复制要解决的问题\\\">复制要解决的问题</h4>\\n<ol>\\n<li>数据分布</li>\\n<li>负载均衡</li>\\n<li>备份</li>\\n<li>高可用性和故障切换</li>\\n<li>MySQL 升级测试</li>\\n</ol>\\n<h3 id=\\\"select-count-细节\\\">Select count 细节</h3>\\n<h4 id=\\\"函数用法\\\">函数用法</h4>\\n<p><img src=\\\"../../../../public/img/15709530990912-1.jpg\\\" alt=\\\"img\\\"></p>\\n<ol>\\n<li>COUNT(expr) ，返回 SELECT 语句检索的行中 expr 的值不为 NULL 的数量。结果是一个 BIGINT 值。</li>\\n<li>如果查询结果没有命中任何记录，则返回 0</li>\\n<li>但是，值得注意的是，<code>COUNT(*)</code> 的统计结果中，会<strong>包含</strong>值为 NULL 的行数。</li>\\n</ol>\\n<h4 id=\\\"相关问题\\\">相关问题</h4>\\n<ol>\\n<li><p>为什么《阿里巴巴 Java 开发手册》中强制要求不让使用 <code>COUNT(列名)</code>或 <code>COUNT(常量)</code>来替代 <code>COUNT(*)</code>呢？</p>\\n<blockquote>\\n<p>不要使用 <code>count(列名)</code>或 <code>count(常量)</code>来替代 <code>count(*)</code>，<code>count(*)</code>是 SQL92 定义的标 准统计行数的语法，跟数据库无关，跟 NULL 和非 NULL 无关。 说明：<code>count(*)</code>会统计值为 NULL 的行，而 <code>count(列名)</code>不会统计此列为 NULL 值的行。</p>\\n</blockquote>\\n</li>\\n<li><p><code>COUNT(列名)</code>、<code>COUNT(常量)</code>和<code>COUNT(*)</code>之间的区别</p>\\n<blockquote>\\n<ol>\\n<li><code>COUNT(常量)</code> 和 <code>COUNT(*)</code>表示的是直接查询符合条件的数据库表的行数。而<code>COUNT(列名)</code>表示的是查询符合条件的列的值不为 NULL 的行数；</li>\\n<li>对于<code>COUNT(1)</code>和<code>COUNT(*)</code>，MySQL 的优化是完全一样的，根本不存在谁比谁快；</li>\\n<li><code>COUNT(字段)</code>多了一个步骤就是判断所查询的字段是否为 NULL，所以他的性能要比<code>COUNT(*)</code>慢；</li>\\n</ol>\\n</blockquote>\\n</li>\\n</ol>\\n<h3 id=\\\"mysql-内存占用太大\\\">MySQL 内存占用太大</h3>\\n<pre><code>performance_schema_max_table_instances=400\\ntable_definition_cache=400\\ntable_open_cache=256\\nperformance_schema = off\\n</code></pre>\\n\";","export default \"<h2 id=\\\"坑\\\">坑</h2>\\n<h3 id=\\\"代码高亮的的坑\\\">代码高亮的的坑</h3>\\n<blockquote>\\n<p>editor.md的preview页 + highlight.js</p>\\n</blockquote>\\n<h4 id=\\\"small_blue_diamond1-highlightjs-的坑\\\">🔹1. highlight.js 的坑</h4>\\n<h5 id=\\\"small_orange_diamondhighlightjs无效问题\\\">🔸highlight.js无效问题</h5>\\n<blockquote>\\n<p><strong>hub主页上的highlight.js文件是用不了的!!!</strong>\\n解决: 去<a href=\\\"\\\">官网主页</a>上查看源码下载, 也可以在博客仓库里找到<code>highlight-site-pack.js</code>文件</p>\\n</blockquote>\\n<h5 id=\\\"small_orange_diamond始终只能渲染code而无法渲染pre的问题\\\">🔸始终只能渲染code而无法渲染pre的问题</h5>\\n<blockquote>\\n<p><strong>readme里给的选择器只能选中pre下的code(眼戳没注意...)</strong>\\n解决: 把pre也一起选中就好了</p>\\n</blockquote>\\n<pre><code class=\\\"hljs language-js\\\">$(<span class=\\\"hljs-string\\\">&#x27;pre, pre code&#x27;</span>).<span class=\\\"hljs-title function_\\\">each</span>(<span class=\\\"hljs-keyword\\\">function</span>(<span class=\\\"hljs-params\\\">i, block</span>) {\\n    hljs.<span class=\\\"hljs-title function_\\\">highlightBlock</span>(block);\\n});\\n</code></pre>\\n<h4 id=\\\"small_blue_diamond2-editor的默认md-code渲染和highlightjs渲染冲突问题\\\">🔹2. editor的默认md code渲染和highlight.js渲染冲突问题</h4>\\n<p><img src=\\\"https://user-images.githubusercontent.com/23525754/39576589-3bab975a-4f11-11e8-9a2c-1bb3ea38ab73.png\\\" alt=\\\"image\\\"></p>\\n<p>如图用的atom-one-dark, 但是背景还是白色的...</p>\\n<h5 id=\\\"small_orange_diamond1-editor渲染禁用\\\">🔸1. editor渲染禁用</h5>\\n<ol>\\n<li><p>首先不引用lib下的prettify.min.js文件</p>\\n</li>\\n<li><p>修改editormd.min.js源码, 在1505行, 取消对这个文件的引用和code渲染</p>\\n<p><img src=\\\"https://user-images.githubusercontent.com/23525754/39576049-4d6e24d2-4f0f-11e8-9532-9d6b5c54389a.png\\\" alt=\\\"image\\\">\\n修改完之后, 这样就不会在pre和code上添加pretty的类了</p>\\n</li>\\n</ol>\\n<h5 id=\\\"small_orange_diamond2-css覆盖\\\">🔸2. css覆盖</h5>\\n<p>因为我们是运行时渲染, 所以我们的highlight.js添加的css类是无论如何都是会冲突的(理论上可以避免的, 不知代码是怎么写的)</p>\\n<p>注释一部分editormd.preview.css:</p>\\n<p><img src=\\\"https://user-images.githubusercontent.com/23525754/39576285-3c0ceed4-4f10-11e8-8c24-685d894994b6.png\\\" alt=\\\"image\\\"></p>\\n<p>我们要的是最下面那个css, 所以注掉上面两个就好了, 行数如图.</p>\\n<h4 id=\\\"small_blue_diamond结果\\\">🔹结果</h4>\\n<p><img src=\\\"https://user-images.githubusercontent.com/23525754/39576723-b592211a-4f11-11e8-8b5f-c60303166ce6.png\\\" alt=\\\"image\\\"></p>\\n<h3 id=\\\"github-api-response-条数pagination限制\\\">GitHub API response 条数pagination限制</h3>\\n<p>GitHub API的响应条数是有限制的, 默认是30条, 如果要更多,或者使用分页,可以参照:</p>\\n<p><img src=\\\"https://user-images.githubusercontent.com/23525754/39813936-fe5352ea-53c4-11e8-9f10-79741b895d3a.png\\\" alt=\\\"image\\\"></p>\\n<p><img src=\\\"https://user-images.githubusercontent.com/23525754/39813946-06fa84c2-53c5-11e8-9a35-6e95ea0502f4.png\\\" alt=\\\"image\\\"></p>\\n<p>参考: <a href=\\\"https://developer.github.com/v3/#pagination\\\">https://developer.github.com/v3/#pagination</a></p>\\n<p>我现在的blog所有的comments请求都是9999</p>\\n<h3 id=\\\"关于-github-oauth-app\\\">关于 github oauth app</h3>\\n<p><img src=\\\"https://user-images.githubusercontent.com/23525754/39562055-124667c6-4edc-11e8-91af-d1bfcfe540fd.png\\\" alt=\\\"image\\\"></p>\\n<p><a href=\\\"https://github.com/timqian/my-notes/issues/9\\\">reference.</a></p>\\n<h3 id=\\\"关于引用奥森图标一类的i标签失效的问题\\\">关于引用奥森图标一类的i标签失效的问题</h3>\\n<p>路径也排查过了 文件也排查过了 也没报错 为什么呢？</p>\\n<p>因为......</p>\\n<p>千万要想想是不是全局font-family的问题！！！</p>\\n<h4 id=\\\"vscode-path和系统不一致\\\">VsCode PATH和系统不一致</h4>\\n<p>在设置里加个：</p>\\n<pre><code class=\\\"hljs language-json\\\"><span class=\\\"hljs-attr\\\">&quot;terminal.integrated.env.osx&quot;</span><span class=\\\"hljs-punctuation\\\">:</span> <span class=\\\"hljs-punctuation\\\">{</span>\\n  <span class=\\\"hljs-attr\\\">&quot;PATH&quot;</span><span class=\\\"hljs-punctuation\\\">:</span> <span class=\\\"hljs-string\\\">&quot;${env:PATH}&quot;</span>\\n<span class=\\\"hljs-punctuation\\\">}</span>\\n</code></pre>\\n\";","export default \"<h2 id=\\\"open-api\\\">Open API</h2>\\n<h3 id=\\\"一些开放的api\\\">一些开放的API</h3>\\n<p><a href=\\\"https://github.com/public-apis/public-apis\\\">github repo public-apis</a></p>\\n<h3 id=\\\"用来查询ip的api\\\">用来查询IP的API</h3>\\n<ul>\\n<li><p>国内：</p>\\n<ul>\\n<li><p>搜狐</p>\\n<ul>\\n<li><a href=\\\"https://link.jianshu.com?t=http://pv.sohu.com/cityjson\\\">http://pv.sohu.com/cityjson</a></li>\\n<li><a href=\\\"https://link.jianshu.com?t=http://pv.sohu.com/cityjson?ie=utf-8\\\">http://pv.sohu.com/cityjson?ie=utf-8</a></li>\\n<li><a href=\\\"https://link.jianshu.com?t=http://txt.go.sohu.com/ip/soip\\\">http://txt.go.sohu.com/ip/soip</a></li>\\n</ul>\\n<p>其中有一个支持https，但是有跨域问题，如果使用<code>&lt;script&gt;</code>标签解决跨域的话，它的代码是直接注入的，而不是返回的callback，而且因为没有正式的开放信息，只是搜出来的，不知道什么时候就下线了</p>\\n</li>\\n<li><p>某大佬个人维护的免费开放接口平台：<a href=\\\"https://github.com/MZCretin/RollToolsApi%EF%BC%8C%E6%9C%89https%EF%BC%8C%E6%9C%89%E8%B7%A8%E5%9F%9F%EF%BC%8C%E4%BD%86%E6%98%AF%E5%9B%A0%E4%B8%BA%E6%98%AF%E4%B8%AA%E4%BA%BA%E7%BB%B4%E6%8A%A4%EF%BC%8C%E8%BF%98%E6%98%AF%E6%80%95%E4%B8%8D%E7%A8%B3%E5%AE%9A%EF%BC%8C%E8%99%BD%E7%84%B6%E6%9C%89%E5%B0%8F%E7%A8%8B%E5%BA%8F%E7%9B%91%E6%8E%A7%EF%BC%9B%E4%B9%9F%E6%98%AF%E7%AC%AC%E4%B8%80%E7%89%88%E8%B7%B3%E8%BD%ACipcheck\\\">https://github.com/MZCretin/RollToolsApi，有https，有跨域，但是因为是个人维护，还是怕不稳定，虽然有小程序监控；也是第一版跳转ipcheck</a></p>\\n</li>\\n<li><p>百度地图开放API：<a href=\\\"http://lbs.baidu.com/index.php?title=webapi/ip-api\\\">http://lbs.baidu.com/index.php?title=webapi/ip-api</a></p>\\n<p>虽然跨域，但是好在有callback，不用怕注入，而且平台是正式开放的；虽然文档里没有callback的说明，我还是搜出来了，确实接口支持callback，这也是我现在使用的跳转ipcheck</p>\\n</li>\\n</ul>\\n</li>\\n<li><p>国外：</p>\\n<ul>\\n<li><a href=\\\"https://ip-api.com/\\\">ip-api</a> https要会员</li>\\n<li><a href=\\\"https://freegeoip.app/\\\">freegeoip</a> 还行 免费https 每小时1万5的请求 比下面的快</li>\\n<li><a href=\\\"https://ipinfo.io/developers#https-ssl\\\">ipinfo</a> https免费 速度慢点</li>\\n</ul>\\n</li>\\n</ul>\\n<h3 id=\\\"英语相关api\\\">英语相关API</h3>\\n<h4 id=\\\"语法检查\\\">语法检查</h4>\\n<ul>\\n<li><a href=\\\"https://www.gingersoftware.com/ginger-api/documentations?utm_medium=email&amp;utm_source=link&amp;utm_campaign=api_documentation\\\">Ginger</a></li>\\n<li><a href=\\\"https://www.grammarly.com/\\\">Grammarly</a></li>\\n</ul>\\n<h3 id=\\\"经纬度行政区域查询api\\\">经纬度行政区域查询API</h3>\\n<p><a href=\\\"http://jwd.funnyapi.com/#/index\\\">home</a></p>\\n\";","export default \"<h2 id=\\\"技巧\\\">技巧</h2>\\n<h3 id=\\\"一顿操作-nodejs安装\\\">一顿操作 node.js安装</h3>\\n<h4 id=\\\"small_blue_diamond安装nvm\\\">🔹安装nvm</h4>\\n<ol>\\n<li>首先去 <a href=\\\"https://github.com/coreybutler/nvm-windows\\\">https://github.com/coreybutler/nvm-windows</a> 下载最新的release版本 然后安装即可</li>\\n</ol>\\n<h4 id=\\\"small_blue_diamond使用mvn安装nodejs的多版本\\\">🔹使用mvn安装nodejs的多版本</h4>\\n<pre><code class=\\\"hljs language-bash\\\">$ nvm install 0.10\\n$ nvm install 4\\n$ nvm install 6\\n$ nvm install 8\\n</code></pre>\\n<h4 id=\\\"small_blue_diamond安装全局npm\\\">🔹安装全局npm</h4>\\n<p>可以看到这里安装了4种版本的nodejs, 每个版本都带有自己的npm, 如果要特定使用npm, 则需要先输入</p>\\n<pre><code class=\\\"hljs language-bash\\\">mvn use 8\\n</code></pre>\\n<p>比如上面先use了8版本的node</p>\\n<p>然后再安装全局npm, 不然你找不到npm的环境</p>\\n<hr>\\n<p>Linux下安装nvm</p>\\n<p>看得懂就行啦：<a href=\\\"https://github.com/creationix/nvm#git-install\\\">https://github.com/creationix/nvm#git-install</a></p>\\n<p>参考: \\n<a href=\\\"https://i5ting.github.io/How-to-learn-node-correctly/#10302\\\">https://i5ting.github.io/How-to-learn-node-correctly/#10302</a>\\n<a href=\\\"https://blog.csdn.net/jingtian678/article/details/78422760\\\">https://blog.csdn.net/jingtian678/article/details/78422760</a></p>\\n<h3 id=\\\"regex-匹配换行符匹配尾部空格\\\">Regex 匹配换行符/匹配尾部空格</h3>\\n<pre><code class=\\\"hljs language-regex\\\">([\\\\s\\\\S]*)\\n</code></pre>\\n<pre><code class=\\\"hljs language-regex\\\">\\\\s*$\\n</code></pre>\\n<h3 id=\\\"在windows的右键菜单上增加新建自定义类型文件的选项\\\">在Windows的右键菜单上增加新建自定义类型文件的选项</h3>\\n<p><img src=\\\"https://user-images.githubusercontent.com/23525754/41817005-31258a84-77c5-11e8-9b36-eb7b089def71.png\\\" alt=\\\"image\\\"></p>\\n<p><a href=\\\"https://www.cnblogs.com/zhengye/articles/2304925.html\\\">https://www.cnblogs.com/zhengye/articles/2304925.html</a></p>\\n<h3 id=\\\"git做用户的全局配置的文件夹在哪？\\\">git做用户的全局配置的文件夹在哪？</h3>\\n<p>放在你家</p>\\n<p><img src=\\\"https://user-images.githubusercontent.com/23525754/42872368-59d80c52-8aaf-11e8-8b4a-5f176dbb4d36.png\\\" alt=\\\"image\\\"></p>\\n<p>如图可以配置别名</p>\\n<h3 id=\\\"xss攻击和java处理xss\\\">xss攻击和Java处理xss</h3>\\n<p><a href=\\\"https://www.cnblogs.com/digdeep/p/4695348.html\\\">https://www.cnblogs.com/digdeep/p/4695348.html</a>\\n<a href=\\\"https://blog.csdn.net/woniumenga/article/details/47323829#\\\">https://blog.csdn.net/woniumenga/article/details/47323829#</a></p>\\n<p>Java的html解析器\\n<a href=\\\"https://github.com/jhy/jsoup\\\">https://github.com/jhy/jsoup</a></p>\\n<p>前端xss处理：\\n<a href=\\\"https://jsxss.com/zh/index.html\\\">https://jsxss.com/zh/index.html</a></p>\\n<h3 id=\\\"windows下调试ios网页设备\\\">windows下调试iOS网页设备</h3>\\n<p><a href=\\\"https://www.jianshu.com/p/73715ee54712\\\">https://www.jianshu.com/p/73715ee54712</a></p>\\n<h3 id=\\\"带空格文件名参数传递-xargs\\\">带空格文件名参数传递 xargs</h3>\\n<p><a href=\\\"https://blog.csdn.net/u011085172/article/details/77771173\\\">https://blog.csdn.net/u011085172/article/details/77771173</a></p>\\n<h3 id=\\\"win10-自带录电脑音软件\\\">win10 自带录电脑音软件</h3>\\n<p><img src=\\\"https://user-images.githubusercontent.com/23525754/71551960-fd9bdf80-2a2c-11ea-8049-f9293a6e6198.jpg\\\" alt=\\\"jEHdM1ZoRC\\\">\\n<img src=\\\"https://user-images.githubusercontent.com/23525754/71551963-08567480-2a2d-11ea-9d24-d08dc2e83ef6.png\\\" alt=\\\"image\\\">\\n<img src=\\\"https://user-images.githubusercontent.com/23525754/71551979-8a469d80-2a2d-11ea-82c1-be60e4bca1e3.png\\\" alt=\\\"image\\\"></p>\\n<p>然后打开win10自带的录音软件Voice Recorder</p>\\n<p>​    </p>\\n<h4 id=\\\"mac下的xrun命令错误\\\">Mac下的xrun命令错误</h4>\\n<p>一般可能是系统更新之后会出现，这时候用命令重装一下开发工具就ok</p>\\n<pre><code class=\\\"hljs language-bash\\\"> xcode-select --install\\n</code></pre>\\n\";","export default \"<h2 id=\\\"electron\\\">Electron</h2>\\n<h3 id=\\\"mac下的打包app无法执行命令行的问题\\\">Mac下的打包app无法执行命令行的问题</h3>\\n<p>原因是：<a href=\\\"https://github.com/electron/electron/issues/7688#issuecomment-255339146\\\">https://github.com/electron/electron/issues/7688#issuecomment-255339146</a></p>\\n<blockquote>\\n<p> <strong><a href=\\\"https://github.com/PinkyJie\\\">PinkyJie</a></strong> commented <a href=\\\"https://github.com/electron/electron/issues/7688#issuecomment-255339146\\\">on 21 Oct 2016</a> </p>\\n<p>I found the reason finally, but I still didn&#39;t figure out how to fix it.</p>\\n<p>The root cause is the environment variable of $PATH is wrong inside the packaged app. I run the command <code>process.env.PATH</code> on devtool, it shows <code>/usr/bin:/bin:/usr/sbin:/sbin</code>, which does not contain my <code>node/npm</code> path on my machine.</p>\\n<p>So here comes the question: where does this <code>process.env.PATH</code> come from inside the packaged app? Is there a method to change it?</p>\\n</blockquote>\\n<p>修复：<a href=\\\"https://github.com/sindresorhus/fix-path\\\">https://github.com/sindresorhus/fix-path</a></p>\\n\";","export default \"<h2 id=\\\"网站博客\\\">网站&amp;博客</h2>\\n<h3 id=\\\"sql-刷题网站\\\">SQL 刷题网站</h3>\\n<h4 id=\\\"sqlzoo\\\">SQLZOO</h4>\\n<p><a href=\\\"https://sqlzoo.net/\\\">https://sqlzoo.net/</a></p>\\n<p>这是一个免费的 SQL 学习网站，支持语言：English・日本語・中文（繁体）</p>\\n<p><code>SQLZOO</code> 包括了 SQL 学习的教程和参考资料，支持多国语言，每一个语法配套一个教程、一份数据和一个测验，非常适合初学者使用，因为可以一边通过教程学习语法知识，再通过测验巩固。</p>\\n<p><img src=\\\"https://mmbiz.qpic.cn/mmbiz_png/tXYict40xfLg4d2acUQeibw8gkIrj9B8O0Qz5aH2ibzqqBr5vmOzYxNBSV2psT1va6oGD5mCjZmicJb6bvJaTwA0Ww/640?wx_fmt=png&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1\\\" alt=\\\"img\\\"></p>\\n<p><code>SQLZOO</code> 的教程框架由浅入深，非常推荐给初学者，如果有简体中文的翻译更好了。</p>\\n<h4 id=\\\"xuesql\\\">XUESQL</h4>\\n<p><a href=\\\"http://xuesql.cn/\\\">http://xuesql.cn/</a></p>\\n<p><img src=\\\"https://mmbiz.qpic.cn/mmbiz_png/tXYict40xfLg4d2acUQeibw8gkIrj9B8O08mWJeX5Wam69lTvVKG79WcIO2VoqX0GatK8cZ7lpCjj9lZwSwqUEqQ/640?wx_fmt=png&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1\\\" alt=\\\"img\\\"></p>\\n<p>如果你因为上面介绍的 <code>SQLZOO</code> 可以因为语言问题而劝退，那就推荐你一下中文的网站吧：<code>XUESQL</code>。</p>\\n<p>网站页面的上部分是教程手册，下部分是在线练习。写完 SQL 直接回车就是提交，如果正确会自动进入下一题。</p>\\n<p>另外还有一个加分项，它有自己配套的 B 站视频（同样免费）。</p>\\n<p><img src=\\\"https://mmbiz.qpic.cn/mmbiz_png/tXYict40xfLg4d2acUQeibw8gkIrj9B8O0scXnpOkOlsP3Jmbv6aSeRfm6KEsTTN2NtLonTkIufCd6HmETzswmIQ/640?wx_fmt=png&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1\\\" alt=\\\"img\\\"></p>\\n<p>上面介绍了两个边学习边练习测试的网站，下面再介绍专门刷题的网站吧！</p>\\n<h4 id=\\\"leetcode\\\">LeetCode</h4>\\n<p><a href=\\\"https://leetcode-cn.com/problemset/database/\\\">https://leetcode-cn.com/problemset/database/</a></p>\\n<p>一般大家看到 LeetCode 第一印象是刷算法题的，其实 LeetCode 上也有关于 SQL 的题目</p>\\n<p>我们可以在这里在线刷题，既能让你很直观的看到自己所写的 SQL 的运行速度等，也可以去借鉴别人优化好的 SQL，与自己的对比，将好的用法学会，这样的提升是很快的。</p>\\n<h4 id=\\\"其他\\\">其他</h4>\\n<p>用来刷题网站的题目统计大部分为了统计而统计，缺少业务场景。建议大家合理利用上面推荐的网站来学习，如果想更好的了解业务题目，可以找一些面试题用来练习。</p>\\n<p>另外，还有一些 SQL 在线刷题网站，大家也可以尝试一下：</p>\\n<p><a href=\\\"https://www.w3resource.com/sql-exercises/\\\">https://www.w3resource.com/sql-exercises/</a></p>\\n<p><a href=\\\"https://sqlbolt.com/\\\">https://sqlbolt.com/</a></p>\\n<h3 id=\\\"cmd-相关\\\">cmd 相关</h3>\\n<h4 id=\\\"small_blue_diamond教程\\\">🔹教程</h4>\\n<ul>\\n<li>扫盲：<a href=\\\"https://lellansin.wordpress.com/2012/12/15/cmd%E5%BA%94%E7%94%A8%E5%9F%BA%E7%A1%80-%E6%89%AB%E7%9B%B2%E6%95%99%E7%A8%8B/\\\">https://lellansin.wordpress.com/2012/12/15/cmd%E5%BA%94%E7%94%A8%E5%9F%BA%E7%A1%80-%E6%89%AB%E7%9B%B2%E6%95%99%E7%A8%8B/</a></li>\\n<li>常用 cmd：<a href=\\\"https://blog.csdn.net/hanzheng260561728/article/details/51558990\\\">https://blog.csdn.net/hanzheng260561728/article/details/51558990</a></li>\\n</ul>\\n<h4 id=\\\"small_blue_diamond微软开放命令行文档\\\">🔹微软开放命令行文档</h4>\\n<blockquote>\\n<p>cmd 文档/doc 文档/command line</p>\\n</blockquote>\\n<p><a href=\\\"http://download.microsoft.com/download/5/8/9/58911986-D4AD-4695-BF63-F734CD4DF8F2/ws-commands.pdf\\\">link</a></p>\\n<h3 id=\\\"spring-生命周期详解好文\\\">Spring 生命周期详解好文</h3>\\n<p><a href=\\\"https://blog.csdn.net/lisongjia123/article/details/52091013?utm_source=blogxgwz0\\\">https://blog.csdn.net/lisongjia123/article/details/52091013?utm_source=blogxgwz0</a>\\n<a href=\\\"https://blog.csdn.net/fuzhongmin05/article/details/73389779\\\">https://blog.csdn.net/fuzhongmin05/article/details/73389779</a>\\n<a href=\\\"https://blog.csdn.net/qq_23473123/article/details/76610052\\\">https://blog.csdn.net/qq_23473123/article/details/76610052</a></p>\\n<h3 id=\\\"database-client\\\">Database Client</h3>\\n<p><a href=\\\"https://www.slant.co/topics/53/~best-mysql-client-applications-for-windows\\\">15 个 windows 上好用的 client</a></p>\\n<h3 id=\\\"排序算法图解博客\\\">排序算法图解博客</h3>\\n<p>看到的讲得还阔以的: <a href=\\\"https://www.cnblogs.com/chengxiao/category/880910.html\\\">https://www.cnblogs.com/chengxiao/category/880910.html</a></p>\\n<h3 id=\\\"linux-换行符\\\">linux 换行符</h3>\\n<p><a href=\\\"https://blog.csdn.net/mulangren1988/article/details/54316783\\\">https://blog.csdn.net/mulangren1988/article/details/54316783</a></p>\\n<h3 id=\\\"正则表达式-密码强度\\\">正则表达式 密码强度</h3>\\n<p><a href=\\\"https://www.cnblogs.com/cexm/p/7737538.html\\\">https://www.cnblogs.com/cexm/p/7737538.html</a></p>\\n<h3 id=\\\"数据结构算法可视化网站\\\">数据结构/算法可视化网站</h3>\\n<p><img src=\\\"../../../../public/img/sorting-algorithms.png\\\" alt=\\\"aa\\\">\\n<a href=\\\"https://www.toptal.com/developers/sorting-algorithms\\\">https://www.toptal.com/developers/sorting-algorithms</a></p>\\n<p><img src=\\\"https://user-images.githubusercontent.com/23525754/40883611-f49dc906-6733-11e8-822f-b3f441f11da7.png\\\" alt=\\\"image\\\">\\n<a href=\\\"https://www.cs.usfca.edu/~galles/visualization/Algorithms.html\\\">https://www.cs.usfca.edu/~galles/visualization/Algorithms.html</a></p>\\n<p><img src=\\\"https://user-images.githubusercontent.com/23525754/40886561-d4282520-676c-11e8-8312-223025512f6d.png\\\" alt=\\\"image\\\">\\n<a href=\\\"https://visualgo.net/zh\\\">https://visualgo.net/zh</a></p>\\n<h3 id=\\\"100-多个实用的-javascript-代码片段\\\">100 多个实用的 Javascript 代码片段</h3>\\n<p><a href=\\\"https://1loc.dev/\\\">https://1loc.dev/</a></p>\\n<h3 id=\\\"一个素材网站-devianart\\\">一个素材网站 devianart</h3>\\n<p><a href=\\\"https://www.deviantart.com/\\\">https://www.deviantart.com/</a></p>\\n<h3 id=\\\"chrome-插件开发\\\">chrome 插件开发</h3>\\n<p><a href=\\\"https://www.cnblogs.com/liuxianan/p/chrome-plugin-develop.html#%E6%89%93%E5%8C%85%E4%B8%8E%E5%8F%91%E5%B8%83\\\">https://www.cnblogs.com/liuxianan/p/chrome-plugin-develop.html#%E6%89%93%E5%8C%85%E4%B8%8E%E5%8F%91%E5%B8%83</a></p>\\n\";","export default \"<h2 id=\\\"docker\\\">Docker</h2>\\n<h3 id=\\\"centos-installation\\\">Centos Installation</h3>\\n<p>问题描述：在Centos8系统中，使用docker run时，出现如下报错：\\nEmulate Docker CLI using podman. Create /etc/containers/nodocker to quiet msg.\\nError: open /proc/self/uid_map: no such file or directory</p>\\n<p>解决办法：\\n1，卸载podman软件（可以使用rpm -qa|grep docker）\\nyum remove docker\\n2,下载docker-ce源\\ncurl <a href=\\\"https://download.docker.com/linux/centos/docker-ce.repo\\\">https://download.docker.com/linux/centos/docker-ce.repo</a> -o /etc/yum.repos.d/docker-ce.repo\\n3，安装docker-ce\\nyum install docker-ce -y</p>\\n<p>问题原因分析：\\nCentos 8使用yum install docker -y时，默认安装的是podman-docker软件</p>\\n\";","export default \"<h2 id=\\\"网络\\\">网络</h2>\\n<h3 id=\\\"tcpudp\\\">TCP/UDP</h3>\\n<h4 id=\\\"udp-特点\\\">UDP 特点</h4>\\n<blockquote>\\n<ul>\\n<li>UDP 是<strong>无连接</strong>的</li>\\n<li>UDP 使用尽最大努力交付，但是<strong>不保证可靠交付</strong></li>\\n<li>UDP 是<strong>面向报文</strong>的</li>\\n<li>UDP 没有拥塞控制</li>\\n<li>UDP 支持<strong>一对一，一对多，多对一，多对多</strong>的交互通讯</li>\\n<li>UDP 首部的开销小</li>\\n</ul>\\n</blockquote>\\n<h4 id=\\\"tcp-特点\\\">TCP 特点</h4>\\n<blockquote>\\n<ul>\\n<li>TCP 是<strong>面向连接</strong>的</li>\\n<li>每一条 TCP 连接只能由两个端点，<strong>每一条 TCP 连接只能是点对点的</strong></li>\\n<li>TCP 提供<strong>可靠</strong>交付的服务</li>\\n<li>TCP 提供<strong>全双工通信</strong></li>\\n<li>面向字节流</li>\\n</ul>\\n</blockquote>\\n<h3 id=\\\"tcp-可靠传输保证机制\\\">TCP 可靠传输保证机制</h3>\\n<p><strong>停止等待协议：</strong> 每发完一个分组就停止发送，直到收到上一个分组的确认信息。若超过规定时间没有接收到确认信息，边认为是分组丢失，开始重传。</p>\\n<p><strong>连续 ARQ 协议：</strong> 发送方采用滑动窗口的形式，处于滑动窗口的分组可以直接发送出去；接收方一般采用累积确认的方式，也就是说接受方不必对接收到的每一个分组都进行确认，而是对按序到达的最后一个分组进行确认，而发送方每接收到一个确认，窗口就向前滑动一定距离。</p>\\n<p><strong>流量控制：</strong>协调发送方和接收方的收发速率，利用滑动窗口来协调，使用探测报文来探测当前应该发送的速率，采用<a href=\\\"http://baike.sogou.com/v10500918.htm?fromTitle=Nagle%E7%AE%97%E6%B3%95\\\">Nagle 算法</a></p>\\n<p><strong>拥塞控制：</strong>\\n当网络中某一资源的需求超出了该资源所能提供的可用部分，这时网络的性能就要开始变坏，这种情况就叫做拥塞。而拥塞控制就是为了减少或者避免拥塞对网络性能的影响而做出的一种控制手段。</p>\\n<p><strong>拥塞控制思路：</strong>发送方维持一个叫做<strong>拥塞窗口</strong>的状态变量，拥塞窗口的大小取决于网络的拥塞程度，并且在动态的变化。发送方让自己的发送窗口等于拥塞窗口，如果在考虑接收方的接收能力，一般发送窗口还要小于拥塞窗口。</p>\\n<p><strong>慢开始：</strong>当主机开始发送数据的时候，由小到大的增大发送窗口，也就是由小到大的增大拥塞窗口。接收方接收到一个报文之后就回传一个确认报文，发送方每接收到一个确认报文，就将拥塞窗口加 1，这样每经过一个传输轮次之后，拥塞窗口就增大一倍。</p>\\n<p><strong>拥塞避免：</strong>思路是让拥塞窗口缓慢的增大，即每经过一个往返时间 RTT 就把发送方的拥塞窗口加 1，而不是加倍，这样拥塞窗口就是线性缓慢增加，比慢开始的增长速率缓慢的多。</p>\\n<p><strong>慢开始门限：</strong>为了防止拥塞窗口增长过大引起网络拥塞，还需要设置一个慢开始门限</p>\\n<ul>\\n<li>拥塞窗口&lt;慢开始门限时，使用慢开始算法</li>\\n<li>拥塞窗口&gt;慢开始门限时，使用拥塞避免算法</li>\\n<li>拥塞窗口=慢开始门限时，两种算法都可以</li>\\n</ul>\\n<p><strong>快重传：</strong>要求收到方每收到一个时序的报文段之后就立即发出重复确认，而不要等到自己发送数据时才进行捎带确认。而发送方只要一连收到三个重复确认就应当立即重传对方尚未接受到的报文，而不必等待为报文设置的重传计时器到期。</p>\\n<p><strong>快回复：</strong>与快重传配合使用，当发送方连续收到三个重复确认的时候，就执行“乘法减小”算法，将慢开始门限减半。将拥塞窗口设置为慢开始门限减半之后的值，并开始指向拥塞避免算法。</p>\\n<h3 id=\\\"tcpip-握手\\\">TCP/IP 握手</h3>\\n<h4 id=\\\"建立连接\\\">建立连接</h4>\\n<ol>\\n<li><p><strong>客户端</strong>请求建立连接：SYN=1，seq=x；</p>\\n</li>\\n<li><p><strong>服务器</strong>对<strong>客户端</strong>的请求进行响应：SYN=1，ACK=1，seq=y，ack=x+1；</p>\\n</li>\\n<li><p><strong>客户端</strong>对<strong>服务器端</strong>的响应信息进行回应：ACK=1，seq=x+1，ack=y+1；</p>\\n</li>\\n</ol>\\n<h4 id=\\\"断开连接\\\">断开连接</h4>\\n<ol>\\n<li><strong>客户端</strong>请求断开连接： FIN=1，seq = u；</li>\\n<li><strong>服务端</strong>对<strong>客户端</strong>的请求应答：ACK=1，seq=v，ack=u+1；</li>\\n<li><strong>服务端</strong>请求断开连接：FIN=1，ACK=1，seq=w，ack=u+1；</li>\\n<li><strong>客户端</strong>对<strong>服务端</strong>的请求应答：ACK=1，seq=u+1，ack=w+1；</li>\\n</ol>\\n<p><img src=\\\"../../../../public/img/v2-8720bd64871a5452df583fdab8207d64_1440w.jpg\\\" alt=\\\"img\\\"></p>\\n<h3 id=\\\"对于游戏来说-怎么选择-tcp-和-udp\\\">对于游戏来说 怎么选择 TCP 和 UDP?</h3>\\n<ul>\\n<li><p>如果是由客户端间歇性的发起无状态的查询，并且偶尔发生延迟是可以容忍，那么使用 HTTP/HTTPS 吧。</p>\\n</li>\\n<li><p>如果客户端和服务器都可以独立发包，但是偶尔发生延迟可以容忍（比如：在线的纸牌游戏，许多 MMO 类的游戏），那么使用 TCP 长连接吧。</p>\\n</li>\\n<li><p>如果客户端和服务器都可以独立发包，而且无法忍受延迟（比如：大多数的多人动作类游戏，一些 MMO 类游戏），那么使用 UDP 吧。</p>\\n</li>\\n</ul>\\n<p>转自: <a href=\\\"http://blog.jobbole.com/64638/\\\">http://blog.jobbole.com/64638/</a></p>\\n<h3 id=\\\"osi-七层网络模型\\\">OSI 七层网络模型</h3>\\n<p><img src=\\\"../../../../public/img/20200626085325.png\\\" alt=\\\"\\\"></p>\\n<h3 id=\\\"tcpip-四层模型\\\">TCP/IP 四层模型</h3>\\n<p><img src=\\\"../../../../public/img/20200625181452.png\\\" alt=\\\"\\\"></p>\\n<p><img src=\\\"../../../../public/img/20200625181433.png\\\" alt=\\\"\\\"></p>\\n<h3 id=\\\"arp-与-rarp\\\">ARP 与 RARP</h3>\\n<h4 id=\\\"arp：拿-ip-地址问-mac-地址\\\">ARP：拿 IP 地址问 MAC 地址</h4>\\n<ol>\\n<li>首先，每个主机都会在自己的 ARP 缓冲区中<strong>建立一个 ARP 列表</strong>，以表示 IP 地址和 MAC 地址之间的对应关系；</li>\\n<li>当<strong>源主机要发送数据</strong>时，首先检查 ARP 列表中是否有对应 IP 地址的目的主机的 MAC 地址：<ol>\\n<li>如果有，则直接发送数据；</li>\\n<li>如果没有，就向本网段的所有主机发送 ARP 数据包，该数据包中有：源主机 IP 地址、源主机 MAC 地址、目的主机 IP 地址；</li>\\n</ol>\\n</li>\\n<li>当<strong>本网络的所有主机</strong>收到该 ARP 数据包时，首先<strong>检查数据包中的 IP 地址是否是自己的 IP 地址</strong>，如果不是，则忽略该数据包，如果是，则首先从数据包中取出源主机的 IP 和 MAC 地址写入到 ARP 列表中，如果已经存在，则覆盖，然后将自己的 MAC 地址写入 ARP 响应包中，告诉源主机自己是它想要找的 MAC 地址；</li>\\n<li>源主机收到 ARP 响应包后，<strong>将目的主机的 IP 和 MAC 写入 ARP 列表</strong>，并利用此信息发送数据。如果源主机一直都没有收到 ARP 响应数据包，表示 ARP 查询失败；</li>\\n</ol>\\n<h4 id=\\\"rarp：拿-mac-地址问-ip-地址\\\">RARP：拿 MAC 地址问 IP 地址</h4>\\n<p>作用是完成<strong>硬件地址到 IP 地址的映射</strong>。</p>\\n<p>在网络中配置一台 RARP 服务器，里面保存着 IP 地址和 MAC 地址的映射关系，当无盘工作站启动后：</p>\\n<ol>\\n<li>首先，封装一个 RARP 数据包，里面有其 MAC 地址；</li>\\n<li>其次，广播到网络中去；</li>\\n<li>最后，当服务器收到请求包后，就查找对应的 MAC 地址的 IP 地址装入响应报文中发回给请求者。因为需要广播请求报文，因此 RARP 只能用于具有广播能力的网络；</li>\\n</ol>\\n<h3 id=\\\"dns\\\">DNS</h3>\\n<p>DNS( Domain Name System)是“域名系统”的英文缩写，是一种组织成域层次结构的计算机和网络服务命名系统，它用于 TCP/IP 网络，它所提供的服务是用来将主机名和域名转换为 IP 地址的工作。</p>\\n<p>关于 DNS 的获取流程：\\nDNS 是应用层协议，事实上他是为其他应用层协议工作的，包括不限于 HTTP 和 SMTP 以及 FTP，用于将用户提供的主机名解析为 ip 地址。\\n具体过程如下：</p>\\n<ol>\\n<li>用户主机上运行着 DNS 的客户端，就是我们的 PC 机或者手机客户端运行着 DNS 客户端了</li>\\n<li>浏览器将接收到的 url 中抽取出域名字段，就是访问的主机名，比如并将这个主机名传送给 DNS 应用的客户端</li>\\n<li>DNS 客户机端向 DNS 服务器端发送一份查询报文，报文中包含着要访问的主机名字段（中间包括一些列缓存查询以及分布式 DNS 集群的工作）</li>\\n<li>该 DNS 客户机最终会收到一份回答报文，其中包含有该主机名对应的 IP 地址</li>\\n<li>一旦该浏览器收到来自 DNS 的 IP 地址，就可以向该 IP 地址定位的 HTTP 服务器发起 TCP 连接；</li>\\n</ol>\\n\";","export default \"<h2 id=\\\"算法\\\">算法</h2>\\n<h3 id=\\\"bitmap\\\">BitMap</h3>\\n<p><a href=\\\"http://blog.51cto.com/zengzhaozheng/1404108\\\">http://blog.51cto.com/zengzhaozheng/1404108</a>\\n<a href=\\\"https://blog.csdn.net/hguisu/article/details/7880288\\\">https://blog.csdn.net/hguisu/article/details/7880288</a>\\n<a href=\\\"http://www.ruanyifeng.com/blog/2015/09/git-bitmap.html\\\">http://www.ruanyifeng.com/blog/2015/09/git-bitmap.html</a>\\n编程珠玑</p>\\n<h3 id=\\\"贪心算法和动态规划的区别\\\">贪心算法和动态规划的区别</h3>\\n<blockquote>\\n<p>贪心算法：贪心算法采用的是逐步构造最优解的方法。在每个阶段，都在一定的标准下做出一个看上去最优的决策。决策一旦做出，就不可能再更改。做出这个局部最优决策所依照的标准称为贪心准则。</p>\\n<p>分治算法：分治法的思想是将一个难以直接解决大的问题分解成容易求解的子问题，以便各个击破、分而治之。 </p>\\n<p>动态规划：将待求解的问题分解为若干个子问题，按顺序求解子阶段，前一子问题的解，为后一子问题的求解提供了有用的信息。在求解任一子问题时，列出各种可能的局部解，通过决策保留那些有可能达到最优的局部解，丢弃其他局部解。依次解决各子问题，最后一个子问题就是初始问题的解。 </p>\\n</blockquote>\\n<p>引自：<a href=\\\"https://www.cnblogs.com/codeskiller/p/6477181.html\\\">https://www.cnblogs.com/codeskiller/p/6477181.html</a></p>\\n<h3 id=\\\"三种静态查找算法：顺序、二分折半、索引分块查找\\\">三种静态查找算法：顺序、二分/折半、索引/分块查找</h3>\\n<p>文章：<a href=\\\"https://blog.csdn.net/u011489043/article/details/78683856\\\">https://blog.csdn.net/u011489043/article/details/78683856</a></p>\\n<h3 id=\\\"算法：并查集\\\">算法：并查集</h3>\\n<p><a href=\\\"https://blog.csdn.net/C20180630/article/details/57074623\\\">https://blog.csdn.net/C20180630/article/details/57074623</a>\\n<a href=\\\"https://blog.csdn.net/u013546077/article/details/64509038\\\">https://blog.csdn.net/u013546077/article/details/64509038</a></p>\\n<pre><code class=\\\"hljs language-java\\\"><span class=\\\"hljs-keyword\\\">public</span> <span class=\\\"hljs-keyword\\\">class</span> <span class=\\\"hljs-title class_\\\">UnionFindSetSimple</span> {\\n\\n    <span class=\\\"hljs-keyword\\\">private</span> <span class=\\\"hljs-type\\\">int</span>[] father;\\n    <span class=\\\"hljs-keyword\\\">private</span> <span class=\\\"hljs-type\\\">int</span>[] rank;\\n\\n    <span class=\\\"hljs-keyword\\\">public</span> <span class=\\\"hljs-title function_\\\">UnionFindSetSimple</span><span class=\\\"hljs-params\\\">(<span class=\\\"hljs-type\\\">int</span> N)</span> {\\n        father = <span class=\\\"hljs-keyword\\\">new</span> <span class=\\\"hljs-title class_\\\">int</span>[N];\\n        rank = <span class=\\\"hljs-keyword\\\">new</span> <span class=\\\"hljs-title class_\\\">int</span>[N];\\n        <span class=\\\"hljs-keyword\\\">for</span> (<span class=\\\"hljs-type\\\">int</span> <span class=\\\"hljs-variable\\\">i</span> <span class=\\\"hljs-operator\\\">=</span> <span class=\\\"hljs-number\\\">0</span>; i &lt; N; i++) {\\n            father[i] = i;\\n        }\\n    }\\n\\n    <span class=\\\"hljs-keyword\\\">public</span> <span class=\\\"hljs-keyword\\\">void</span> <span class=\\\"hljs-title function_\\\">merge</span><span class=\\\"hljs-params\\\">(<span class=\\\"hljs-type\\\">int</span> x, <span class=\\\"hljs-type\\\">int</span> y)</span> {\\n        <span class=\\\"hljs-type\\\">int</span> <span class=\\\"hljs-variable\\\">xFather</span> <span class=\\\"hljs-operator\\\">=</span> findFather(x);\\n        <span class=\\\"hljs-type\\\">int</span> <span class=\\\"hljs-variable\\\">yFather</span> <span class=\\\"hljs-operator\\\">=</span> findFather(y);\\n        <span class=\\\"hljs-keyword\\\">if</span> (rank[x] &lt;= rank[y]) {\\n            father[xFather] = yFather;\\n            <span class=\\\"hljs-keyword\\\">if</span> (rank[x] == rank[y] &amp;&amp; x != y) {\\n                rank[y]++;\\n            }            \\n        } <span class=\\\"hljs-keyword\\\">else</span> {\\n            father[yFather] = xFather;\\n        }\\n    }\\n\\n    <span class=\\\"hljs-keyword\\\">public</span> <span class=\\\"hljs-type\\\">int</span> <span class=\\\"hljs-title function_\\\">findFather</span><span class=\\\"hljs-params\\\">(<span class=\\\"hljs-type\\\">int</span> x)</span> {\\n        <span class=\\\"hljs-keyword\\\">return</span> father[x] == x ? x : (father[x] = findFather(father[x]));\\n    }\\n    \\n    <span class=\\\"hljs-keyword\\\">public</span> <span class=\\\"hljs-type\\\">boolean</span> <span class=\\\"hljs-title function_\\\">isRelated</span><span class=\\\"hljs-params\\\">(<span class=\\\"hljs-type\\\">int</span> x, <span class=\\\"hljs-type\\\">int</span> y)</span> {\\n        <span class=\\\"hljs-keyword\\\">return</span> findFather(x) == findFather(y);\\n    }\\n}\\n</code></pre>\\n\";","export default \"<h2 id=\\\"jsnodejs库\\\">JS&amp;Node.js库</h2>\\n<h3 id=\\\"react-native\\\">React Native</h3>\\n<blockquote>\\n<p>可以做桌面应用</p>\\n</blockquote>\\n<p>网址: <a href=\\\"https://proton-native.js.org/#/\\\">https://proton-native.js.org/#/</a></p>\\n<h3 id=\\\"layui\\\">Layui</h3>\\n<blockquote>\\n<p>给后端用的前端框架</p>\\n</blockquote>\\n<p><a href=\\\"http://www.layui.com\\\">官网</a></p>\\n<h3 id=\\\"wangeditor-轻量级前端富文本编辑器\\\">wangEditor 轻量级前端富文本编辑器</h3>\\n<p><img src=\\\"https://user-images.githubusercontent.com/23525754/39693997-65bd7248-5218-11e8-849b-15417cd9dda2.png\\\" alt=\\\"image\\\"></p>\\n<p><a href=\\\"http://www.wangeditor.com/\\\">官网</a></p>\\n<h3 id=\\\"katex-最快的数学公式渲染库\\\">KaTeX 最快的数学公式渲染库</h3>\\n<p>官方link : <a href=\\\"https://khan.github.io/KaTeX/function-support.html\\\">https://khan.github.io/KaTeX/function-support.html</a></p>\\n<p>editor.md的Demo : <a href=\\\"http://pandao.github.io/editor.md/examples/katex.html\\\">http://pandao.github.io/editor.md/examples/katex.html</a></p>\\n<p><img src=\\\"https://user-images.githubusercontent.com/23525754/39822606-93ef96f2-53dd-11e8-9381-d3d607eaf2eb.png\\\" alt=\\\"image\\\"></p>\\n<h3 id=\\\"jquery-日期选择控件\\\">JQuery 日期选择控件</h3>\\n<p>网站：<a href=\\\"https://xdsoft.net/jqplugins/datetimepicker/\\\">https://xdsoft.net/jqplugins/datetimepicker/</a></p>\\n<h3 id=\\\"js-数据可视化\\\">JS 数据可视化</h3>\\n<p>有哪些值得推荐的数据可视化工具？ - 李启方的回答 - 知乎\\n<a href=\\\"https://www.zhihu.com/question/19929609/answer/383055223\\\">https://www.zhihu.com/question/19929609/answer/383055223</a></p>\\n<h3 id=\\\"html2canvas-页面输出为canvas\\\">html2canvas 页面输出为canvas</h3>\\n<p>超级棒的插件：\\n教程和踩坑：<a href=\\\"https://segmentfault.com/a/1190000011478657\\\">https://segmentfault.com/a/1190000011478657</a>\\nhub：<a href=\\\"https://github.com/niklasvh/html2canvas\\\">https://github.com/niklasvh/html2canvas</a></p>\\n<h4 id=\\\"small_blue_diamond生成的canvas没有图片的坑：\\\">🔹生成的canvas没有图片的坑：</h4>\\n<p>要求CDN的图片配置好CORS。CDN配置好后，通过chrome开发者工具可以看到响应头中应含有Access-Control-Allow-Origin的字段。\\n开启html2canvas的useCORS配置项。即作如下设置：\\u2028</p>\\n<pre><code class=\\\"hljs language-javascript\\\"><span class=\\\"hljs-keyword\\\">var</span> opts = {<span class=\\\"hljs-attr\\\">useCORS</span>: <span class=\\\"hljs-literal\\\">true</span>};\\n<span class=\\\"hljs-title function_\\\">html2canvas</span>(element, opts);\\n</code></pre>\\n<h3 id=\\\"js工具库-lodash\\\">JS工具库 lodash</h3>\\n<p><a href=\\\"https://www.lodashjs.com/\\\">https://www.lodashjs.com/</a></p>\\n<p>是一个一致性、模块化、高性能的 JavaScript 实用工具库。</p>\\n<h4 id=\\\"为什么要用lodash？\\\">为什么要用lodash？</h4>\\n<p>Lodash 通过降低 array、number、objects、string 等等的使用难度从而让 JavaScript 变得更简单。Lodash 的模块化方法 非常适用于：</p>\\n<ul>\\n<li>遍历 array、object 和 string</li>\\n<li>对值进行操作和检测</li>\\n<li>创建符合功能的函数</li>\\n</ul>\\n<h3 id=\\\"express\\\">Express</h3>\\n<p><a href=\\\"https://www.expressjs.com.cn/\\\">https://www.expressjs.com.cn/</a></p>\\n<p>基于 Node.js 平台，快速、开放、极简的 Web 开发框架。</p>\\n<h3 id=\\\"systeminformation\\\">systeminformation</h3>\\n<blockquote>\\n<p>Lightweight collection of 40+ functions to retrieve detailed hardware, system and OS information. For Linux, macOS, partial Windows, FreeBSD, OpenBSD, NetBSD and SunOS support</p>\\n</blockquote>\\n<p><a href=\\\"https://systeminformation.io/\\\">https://systeminformation.io/</a></p>\\n<h3 id=\\\"websocket---nodejs\\\">websocket - Node.js</h3>\\n<blockquote>\\n<p>Simple to use, blazing fast and thoroughly tested WebSocket client and server for Node.js</p>\\n</blockquote>\\n<p><a href=\\\"https://github.com/websockets/ws\\\">https://github.com/websockets/ws</a></p>\\n<h3 id=\\\"jieba中文分词---nodejs\\\">jieba中文分词 - Node.js</h3>\\n<h4 id=\\\"介绍\\\">介绍</h4>\\n<p><code>NodeJieba</code>是&quot;结巴&quot;中文分词的 Node.js 版本实现， 由<a href=\\\"https://github.com/yanyiwu/cppjieba.git\\\">CppJieba</a>提供底层分词算法实现， 是兼具高性能和易用性两者的 Node.js 中文分词组件。</p>\\n<h4 id=\\\"特点\\\">特点</h4>\\n<ul>\\n<li>词典载入方式灵活，无需配置词典路径也可使用，需要定制自己的词典路径时也可灵活定制。</li>\\n<li>底层算法实现是C++，性能高效。</li>\\n<li>支持多种分词算法，各种分词算法见<a href=\\\"https://github.com/yanyiwu/cppjieba.git\\\">CppJieba</a>的README.md介绍。</li>\\n<li>支持动态补充词库。</li>\\n</ul>\\n<p>对实现细节感兴趣的请看如下博文：</p>\\n<ul>\\n<li><a href=\\\"http://yanyiwu.com/work/2014/02/22/nodejs-cpp-addon-nodejieba.html\\\">Node.js的C++扩展初体验之NodeJieba</a></li>\\n<li><a href=\\\"http://yanyiwu.com/work/2015/03/21/nodejs-asynchronous-insight.html\\\">由NodeJieba谈谈Node.js异步实现</a></li>\\n</ul>\\n<p><a href=\\\"https://github.com/yanyiwu/nodejieba\\\">https://github.com/yanyiwu/nodejieba</a></p>\\n<h3 id=\\\"文件变动检查库-chokidar\\\">文件变动检查库 chokidar</h3>\\n<p><a href=\\\"https://github.com/paulmillr/chokidar\\\">https://github.com/paulmillr/chokidar</a></p>\\n<h4 id=\\\"why？\\\">Why？</h4>\\n<p>Node.js <code>fs.watch</code>:</p>\\n<ul>\\n<li>Doesn&#39;t report filenames on MacOS.</li>\\n<li>Doesn&#39;t report events at all when using editors like Sublime on MacOS.</li>\\n<li>Often reports events twice.</li>\\n<li>Emits most changes as <code>rename</code>.</li>\\n<li>Does not provide an easy way to recursively watch file trees.</li>\\n</ul>\\n<p>Node.js <code>fs.watchFile</code>:</p>\\n<ul>\\n<li>Almost as bad at event handling.</li>\\n<li>Also does not provide any recursive watching.</li>\\n<li>Results in high CPU utilization.</li>\\n</ul>\\n<p>Chokidar resolves these problems.</p>\\n<p>Initially made for <strong><a href=\\\"https://brunch.io/\\\">Brunch</a></strong> (an ultra-swift web app build tool), it is now used in <a href=\\\"https://github.com/microsoft/vscode\\\">Microsoft&#39;s Visual Studio Code</a>, <a href=\\\"https://github.com/gulpjs/gulp/\\\">gulp</a>, <a href=\\\"https://karma-runner.github.io/\\\">karma</a>, <a href=\\\"https://github.com/Unitech/PM2\\\">PM2</a>, <a href=\\\"http://browserify.org/\\\">browserify</a>, <a href=\\\"https://webpack.github.io/\\\">webpack</a>, <a href=\\\"https://www.browsersync.io/\\\">BrowserSync</a>, and <a href=\\\"https://www.npmjs.com/browse/depended/chokidar\\\">many others</a>. It has proven itself in production environments.</p>\\n<h3 id=\\\"命令行执行库-execa\\\">命令行执行库 execa</h3>\\n<p><a href=\\\"https://github.com/sindresorhus/execa\\\">https://github.com/sindresorhus/execa</a></p>\\n<h4 id=\\\"why？-1\\\">Why？</h4>\\n<p>This package improves <a href=\\\"https://nodejs.org/api/child_process.html\\\"><code>child_process</code></a> methods with:</p>\\n<ul>\\n<li>Promise interface.</li>\\n<li><a href=\\\"https://github.com/sindresorhus/execa#stripfinalnewline\\\">Strips the final newline</a> from the output so you don&#39;t have to do <code>stdout.trim()</code>.</li>\\n<li>Supports <a href=\\\"https://en.wikipedia.org/wiki/Shebang_(Unix)\\\">shebang</a> binaries cross-platform.</li>\\n<li><a href=\\\"https://github.com/IndigoUnited/node-cross-spawn#why\\\">Improved Windows support.</a></li>\\n<li>Higher max buffer. 100 MB instead of 200 KB.</li>\\n<li><a href=\\\"https://github.com/sindresorhus/execa#preferlocal\\\">Executes locally installed binaries by name.</a></li>\\n<li><a href=\\\"https://github.com/sindresorhus/execa#cleanup\\\">Cleans up spawned processes when the parent process dies.</a></li>\\n<li><a href=\\\"https://github.com/sindresorhus/execa#all\\\">Get interleaved output</a> from <code>stdout</code> and <code>stderr</code> similar to what is printed on the terminal. <a href=\\\"https://github.com/sindresorhus/execa#execasyncfile-arguments-options\\\"><em>(Async only)</em></a></li>\\n<li><a href=\\\"https://github.com/sindresorhus/execa#execacommandcommand-options\\\">Can specify file and arguments as a single string without a shell</a></li>\\n<li>More descriptive errors.</li>\\n</ul>\\n<h3 id=\\\"nodemon\\\">nodemon</h3>\\n<p><a href=\\\"https://github.com/remy/nodemon\\\">https://github.com/remy/nodemon</a></p>\\n<blockquote>\\n<p>nodemon is a tool that helps develop node.js based applications by automatically restarting the node application when file changes in the directory are detected.</p>\\n<p>nodemon does <strong>not</strong> require <em>any</em> additional changes to your code or method of development. nodemon is a replacement wrapper for <code>node</code>. To use <code>nodemon</code>, replace the word <code>node</code> on the command line when executing your script.</p>\\n</blockquote>\\n<h3 id=\\\"pm2\\\">pm2</h3>\\n<p><a href=\\\"https://pm2.keymetrics.io/docs/usage/quick-start/\\\">https://pm2.keymetrics.io/docs/usage/quick-start/</a></p>\\n<blockquote>\\n<p>PM2 is a daemon process manager that will help you manage and keep your application online. </p>\\n<p>Getting started with PM2 is straightforward, it is offered as a simple and intuitive CLI, installable via NPM.</p>\\n</blockquote>\\n<h4 id=\\\"windows设置pm2开机启动服务\\\">Windows设置pm2开机启动服务</h4>\\n<p><a href=\\\"https://www.jianshu.com/p/6cb523c0ced8\\\">https://www.jianshu.com/p/6cb523c0ced8</a></p>\\n<p><a href=\\\"https://www.npmjs.com/package/pm2-windows-service\\\">https://www.npmjs.com/package/pm2-windows-service</a></p>\\n<h4 id=\\\"windows下fork模式弹出窗口问题\\\">windows下fork模式弹出窗口问题</h4>\\n<p><a href=\\\"https://github.com/Unitech/pm2/issues/2182#issuecomment-629601292\\\">https://github.com/Unitech/pm2/issues/2182#issuecomment-629601292</a></p>\\n<pre><code class=\\\"hljs language-javascript\\\"><span class=\\\"hljs-variable language_\\\">module</span>.<span class=\\\"hljs-property\\\">exports</span> = {\\n  apps : [{\\n    <span class=\\\"hljs-attr\\\">name</span>: <span class=\\\"hljs-string\\\">&#x27;winmon&#x27;</span>,\\n    <span class=\\\"hljs-attr\\\">script</span>: <span class=\\\"hljs-string\\\">&#x27;index.js&#x27;</span>,\\n    <span class=\\\"hljs-attr\\\">watch</span>: <span class=\\\"hljs-literal\\\">false</span>,\\n    instances  : <span class=\\\"hljs-number\\\">1</span>,\\n    <span class=\\\"hljs-attr\\\">exec_mode</span>: <span class=\\\"hljs-string\\\">&#x27;cluster&#x27;</span>\\n  }],\\n};\\n</code></pre>\\n\";","export default \"<h2 id=\\\"html\\\">HTML</h2>\\n<h3 id=\\\"textarea的字数限制\\\">textarea的字数限制</h3>\\n<pre><code class=\\\"hljs language-html\\\"><span class=\\\"hljs-tag\\\">&lt;<span class=\\\"hljs-name\\\">textarea</span> \\n  <span class=\\\"hljs-attr\\\">rows</span>=<span class=\\\"hljs-string\\\">&quot;5&quot;</span>  \\n  <span class=\\\"hljs-attr\\\">maxlength</span>=<span class=\\\"hljs-string\\\">&quot;200&quot;</span> \\n  <span class=\\\"hljs-attr\\\">onchange</span>=<span class=\\\"hljs-string\\\">&quot;this.value=this.value.substring(0, 200)&quot;</span> \\n  <span class=\\\"hljs-attr\\\">onkeydown</span>=<span class=\\\"hljs-string\\\">&quot;this.value=this.value.substring(0, 200)&quot;</span> \\n  <span class=\\\"hljs-attr\\\">onkeyup</span>=<span class=\\\"hljs-string\\\">&quot;this.value=this.value.substring(0, 200)&quot;</span>&gt;</span>\\n<span class=\\\"hljs-tag\\\">&lt;/<span class=\\\"hljs-name\\\">textarea</span>&gt;</span>\\n</code></pre>\\n<p>事实上，有了maxLength属性，textarea的输入就已经会有限制了</p>\\n<h3 id=\\\"input只允许输入数字\\\">input只允许输入数字</h3>\\n<pre><code class=\\\"hljs language-html\\\"><span class=\\\"hljs-tag\\\">&lt;<span class=\\\"hljs-name\\\">input</span> <span class=\\\"hljs-attr\\\">type</span>=<span class=\\\"hljs-string\\\">&quot;text&quot;</span> <span class=\\\"hljs-attr\\\">oninput</span>=<span class=\\\"hljs-string\\\">&quot;value=value.replace(/[^\\\\d]/g,&#x27;&#x27;)&quot;</span>&gt;</span>\\n</code></pre>\\n<h3 id=\\\"图片禁止拖拽\\\">图片禁止拖拽</h3>\\n<p>在对应标签中添加如下属性即可。</p>\\n<pre><code class=\\\"hljs language-javascript\\\">oncontextmenu = <span class=\\\"hljs-string\\\">&quot;return false;&quot;</span> <span class=\\\"hljs-comment\\\">//禁止鼠标右键</span>\\nondragstart = <span class=\\\"hljs-string\\\">&quot;return false;&quot;</span> <span class=\\\"hljs-comment\\\">//禁止鼠标拖动</span>\\nonselectstart = <span class=\\\"hljs-string\\\">&quot;return false;&quot;</span> <span class=\\\"hljs-comment\\\">//文字禁止鼠标选中</span>\\nonselect = <span class=\\\"hljs-string\\\">&quot;document.selection.empty();&quot;</span> <span class=\\\"hljs-comment\\\">//禁止复制文本</span>\\n</code></pre>\\n<p>例如：</p>\\n<pre><code class=\\\"hljs language-html\\\"><span class=\\\"hljs-tag\\\">&lt;<span class=\\\"hljs-name\\\">img</span> <span class=\\\"hljs-attr\\\">src</span>=<span class=\\\"hljs-string\\\">&quot;img/logo.jpg&quot;</span> <span class=\\\"hljs-attr\\\">ondragstart</span>=<span class=\\\"hljs-string\\\">&quot;return false;&quot;</span> /&gt;</span>\\n</code></pre>\\n<blockquote>\\n<p>作者：祁月笑\\n链接：<a href=\\\"https://www.imooc.com/article/20121?block_id=tuijian_wz\\\">https://www.imooc.com/article/20121?block_id=tuijian_wz</a>\\n来源：慕课网</p>\\n</blockquote>\\n\";","export default \"<h2 id=\\\"js\\\">JS</h2>\\n<h3 id=\\\"js-获取元素样式\\\">JS 获取元素样式</h3>\\n<pre><code class=\\\"hljs language-javascript\\\"><span class=\\\"hljs-comment\\\">/*\\n  此方法兼容IE\\n  获取元素的样式：\\n    参数1：元素\\n    参数2：样式名\\n*/</span>\\n<span class=\\\"hljs-keyword\\\">function</span> <span class=\\\"hljs-title function_\\\">getStyle</span>(<span class=\\\"hljs-params\\\">obj, styleName</span>) {\\n  <span class=\\\"hljs-keyword\\\">var</span> cs = obj.<span class=\\\"hljs-property\\\">currentStyle</span>\\n  <span class=\\\"hljs-keyword\\\">if</span> (cs === <span class=\\\"hljs-literal\\\">undefined</span>) {\\n    <span class=\\\"hljs-keyword\\\">return</span> <span class=\\\"hljs-title function_\\\">getComputedStyle</span>(obj, <span class=\\\"hljs-literal\\\">null</span>)[styleName]\\n  } <span class=\\\"hljs-keyword\\\">else</span> {\\n    <span class=\\\"hljs-keyword\\\">return</span> cs[styleName]\\n  }\\n}\\n</code></pre>\\n<h3 id=\\\"js-事件绑定兼容\\\">JS 事件绑定兼容</h3>\\n<pre><code class=\\\"hljs language-javascript\\\"><span class=\\\"hljs-comment\\\">/*\\n  事件绑定兼容\\n  首先要注意：\\n    addEventListener() 方法中的this是我们绑定的事件\\n    attachedEvent() 方法中的this是window\\n\\n  参数：\\n    1、obj 要绑定的对象\\n    2、eventStr 绑定事件 (不要on)\\n    3、callback 回调函数\\n*/</span>\\n<span class=\\\"hljs-keyword\\\">function</span> <span class=\\\"hljs-title function_\\\">bindev</span>(<span class=\\\"hljs-params\\\">obj, eventStr, callback</span>) {\\n  <span class=\\\"hljs-keyword\\\">if</span> (obj.<span class=\\\"hljs-property\\\">addEventListener</span>) {\\n    <span class=\\\"hljs-comment\\\">// 兼容大部分浏览器</span>\\n    obj.<span class=\\\"hljs-title function_\\\">addEventListener</span>(eventStr, callback, <span class=\\\"hljs-literal\\\">false</span>)\\n  } <span class=\\\"hljs-keyword\\\">else</span> {\\n    <span class=\\\"hljs-comment\\\">/*\\n      this是谁由调用方式决定\\n      由于attachEvent()的默认this是window\\n      为了统一this\\n      我们可以用下面的方式来指定this\\n      callback.apply(obj);\\n    */</span>\\n    <span class=\\\"hljs-comment\\\">// IE</span>\\n    obj.<span class=\\\"hljs-title function_\\\">attachEvent</span>(<span class=\\\"hljs-string\\\">&#x27;on&#x27;</span> + eventStr, <span class=\\\"hljs-keyword\\\">function</span> (<span class=\\\"hljs-params\\\"></span>) {\\n      callback.<span class=\\\"hljs-title function_\\\">apply</span>(obj)\\n    })\\n  }\\n}\\n</code></pre>\\n<h3 id=\\\"js-滚动动画\\\">JS 滚动动画</h3>\\n<pre><code class=\\\"hljs language-javascript\\\"><span class=\\\"hljs-comment\\\">/*\\n  md的滚动条\\n  去到id为elementid的元素位置\\n  速度是 500\\n*/</span>\\n$(<span class=\\\"hljs-string\\\">&#x27;#md&#x27;</span>).<span class=\\\"hljs-title function_\\\">animate</span>({\\n  <span class=\\\"hljs-attr\\\">scrollTop</span>: $(<span class=\\\"hljs-string\\\">&#x27;#elementid&#x27;</span>).<span class=\\\"hljs-title function_\\\">offset</span>().<span class=\\\"hljs-property\\\">top</span>\\n}, <span class=\\\"hljs-number\\\">500</span>);\\n</code></pre>\\n<h3 id=\\\"js-滚动动画改进\\\">JS 滚动动画改进</h3>\\n<pre><code class=\\\"hljs language-javascript\\\"><span class=\\\"hljs-comment\\\">/*\\n  防止到了位置之后再滚动到该元素 而offset改变\\n*/</span>\\n<span class=\\\"hljs-keyword\\\">function</span> <span class=\\\"hljs-title function_\\\">scrolltoelement</span>(<span class=\\\"hljs-params\\\">elementid</span>) {\\n  <span class=\\\"hljs-keyword\\\">if</span> ($(<span class=\\\"hljs-string\\\">&#x27;#&#x27;</span> + elementid)[<span class=\\\"hljs-number\\\">0</span>].<span class=\\\"hljs-property\\\">oset</span> === <span class=\\\"hljs-literal\\\">undefined</span>) {\\n    $(<span class=\\\"hljs-string\\\">&#x27;#&#x27;</span> + elementid)[<span class=\\\"hljs-number\\\">0</span>].<span class=\\\"hljs-property\\\">oset</span> = $(<span class=\\\"hljs-string\\\">&#x27;#&#x27;</span> + elementid).<span class=\\\"hljs-title function_\\\">offset</span>().<span class=\\\"hljs-property\\\">top</span>\\n  }\\n  $(<span class=\\\"hljs-string\\\">&#x27;#md&#x27;</span>).<span class=\\\"hljs-title function_\\\">animate</span>({\\n    <span class=\\\"hljs-attr\\\">scrollTop</span>: $(<span class=\\\"hljs-string\\\">&#x27;#&#x27;</span> + elementid)[<span class=\\\"hljs-number\\\">0</span>].<span class=\\\"hljs-property\\\">oset</span>\\n  }, <span class=\\\"hljs-number\\\">500</span>);\\n}\\n</code></pre>\\n<h3 id=\\\"js-检测页面滚动代码\\\">JS 检测页面滚动代码</h3>\\n<pre><code class=\\\"hljs language-JavaScript\\\">$(<span class=\\\"hljs-variable language_\\\">window</span>).<span class=\\\"hljs-title function_\\\">scroll</span>(<span class=\\\"hljs-keyword\\\">function</span> (<span class=\\\"hljs-params\\\"></span>) {\\n  <span class=\\\"hljs-keyword\\\">var</span> scrollTo = $(<span class=\\\"hljs-variable language_\\\">window</span>).<span class=\\\"hljs-title function_\\\">scrollTop</span>(),\\n  docHeight = $(<span class=\\\"hljs-variable language_\\\">document</span>).<span class=\\\"hljs-title function_\\\">height</span>(),\\n  windowHeight = $(<span class=\\\"hljs-variable language_\\\">window</span>).<span class=\\\"hljs-title function_\\\">height</span>();\\n  scrollPercent = (scrollTo / (docHeight-windowHeight)) * <span class=\\\"hljs-number\\\">100</span>;\\n  percent.<span class=\\\"hljs-property\\\">innerText</span> = scrollPercent\\n})\\n</code></pre>\\n<h3 id=\\\"js-小数\\\">JS 小数</h3>\\n<ol>\\n<li><p>丢弃小数部分,保留整数部分 <code>parseInt(7/2)</code> </p>\\n</li>\\n<li><p>向上取整,有小数就整数部分加1 <code>Math.ceil(7/2) </code></p>\\n</li>\\n<li><p>四舍五入 <code>Math.round(7/2) </code></p>\\n</li>\\n<li><p>向下取整 <code>Math.floor(7/2)</code></p>\\n</li>\\n<li><p>四舍五入 保留位数：</p>\\n<pre><code class=\\\"hljs language-javascript\\\"><span class=\\\"hljs-keyword\\\">var</span> num =<span class=\\\"hljs-number\\\">2.446242342</span>;\\nnum = num.<span class=\\\"hljs-title function_\\\">toFixed</span>(<span class=\\\"hljs-number\\\">2</span>); <span class=\\\"hljs-comment\\\">// 输出结果为 2.45</span>\\n</code></pre>\\n</li>\\n</ol>\\n<h3 id=\\\"js-css-动态添加动画效果\\\">JS CSS 动态添加动画效果</h3>\\n<pre><code class=\\\"hljs language-javascript\\\">  $(<span class=\\\"hljs-string\\\">&#x27;#searchtext&#x27;</span>).<span class=\\\"hljs-title function_\\\">addClass</span>(<span class=\\\"hljs-string\\\">&#x27;getnothing&#x27;</span>)\\n  <span class=\\\"hljs-built_in\\\">setTimeout</span>(<span class=\\\"hljs-keyword\\\">function</span> (<span class=\\\"hljs-params\\\"></span>) {\\n    $(<span class=\\\"hljs-string\\\">&#x27;#searchtext&#x27;</span>).<span class=\\\"hljs-title function_\\\">removeClass</span>(<span class=\\\"hljs-string\\\">&#x27;getnothing&#x27;</span>)\\n  }, <span class=\\\"hljs-number\\\">1100</span>)\\n</code></pre>\\n<pre><code class=\\\"hljs language-css\\\"><span class=\\\"hljs-selector-class\\\">.getnothing</span>{\\n  <span class=\\\"hljs-attribute\\\">animation</span>: getnothing <span class=\\\"hljs-number\\\">1s</span>;\\n}\\n\\n<span class=\\\"hljs-keyword\\\">@keyframes</span> getnothing{\\n  <span class=\\\"hljs-number\\\">50%</span> {\\n    <span class=\\\"hljs-attribute\\\">background-color</span>: <span class=\\\"hljs-built_in\\\">rgba</span>(<span class=\\\"hljs-number\\\">247</span>, <span class=\\\"hljs-number\\\">117</span>, <span class=\\\"hljs-number\\\">117</span>, <span class=\\\"hljs-number\\\">0.534</span>);\\n  }\\n}\\n</code></pre>\\n<h3 id=\\\"js-控制聚焦失焦事件\\\">JS 控制聚焦/失焦事件</h3>\\n<pre><code class=\\\"hljs language-js\\\">  $(<span class=\\\"hljs-string\\\">&#x27;#searchtext&#x27;</span>).<span class=\\\"hljs-title function_\\\">focus</span>(<span class=\\\"hljs-keyword\\\">function</span> (<span class=\\\"hljs-params\\\"></span>) {\\n    $(<span class=\\\"hljs-string\\\">&#x27;#scriptsearcher&#x27;</span>)[<span class=\\\"hljs-number\\\">0</span>].<span class=\\\"hljs-property\\\">style</span>.<span class=\\\"hljs-property\\\">opacity</span> = <span class=\\\"hljs-string\\\">&#x27;1&#x27;</span>\\n  })\\n  $(<span class=\\\"hljs-string\\\">&#x27;#searchtext&#x27;</span>).<span class=\\\"hljs-title function_\\\">blur</span>(<span class=\\\"hljs-keyword\\\">function</span> (<span class=\\\"hljs-params\\\"></span>) {\\n    $(<span class=\\\"hljs-string\\\">&#x27;#scriptsearcher&#x27;</span>)[<span class=\\\"hljs-number\\\">0</span>].<span class=\\\"hljs-property\\\">style</span>.<span class=\\\"hljs-property\\\">opacity</span> = <span class=\\\"hljs-string\\\">&#x27;0.3&#x27;</span>\\n  })\\n</code></pre>\\n<h3 id=\\\"ajax设置请求超时\\\">AJAX设置请求超时</h3>\\n<pre><code class=\\\"hljs language-js\\\"><span class=\\\"hljs-keyword\\\">var</span> ajaxTimeoutTest = $.<span class=\\\"hljs-title function_\\\">ajax</span>({\\n　　<span class=\\\"hljs-attr\\\">url</span>:<span class=\\\"hljs-string\\\">&#x27;&#x27;</span>,  <span class=\\\"hljs-comment\\\">//请求的URL</span>\\n　　timeout : <span class=\\\"hljs-number\\\">1000</span>, <span class=\\\"hljs-comment\\\">//超时时间设置，单位毫秒</span>\\n　　type : <span class=\\\"hljs-string\\\">&#x27;get&#x27;</span>,  <span class=\\\"hljs-comment\\\">//请求方式，get或post</span>\\n　　data :{},  <span class=\\\"hljs-comment\\\">//请求所传参数，json格式</span>\\n　　<span class=\\\"hljs-attr\\\">dataType</span>:<span class=\\\"hljs-string\\\">&#x27;json&#x27;</span>,<span class=\\\"hljs-comment\\\">//返回的数据格式</span>\\n　　<span class=\\\"hljs-attr\\\">success</span>:<span class=\\\"hljs-keyword\\\">function</span>(<span class=\\\"hljs-params\\\">data</span>){ <span class=\\\"hljs-comment\\\">//请求成功的回调函数</span>\\n　　　　<span class=\\\"hljs-title function_\\\">alert</span>(<span class=\\\"hljs-string\\\">&quot;成功&quot;</span>);\\n　　},\\n　　complete : <span class=\\\"hljs-keyword\\\">function</span>(<span class=\\\"hljs-params\\\">XMLHttpRequest,status</span>){ <span class=\\\"hljs-comment\\\">//请求完成后最终执行参数</span>\\n　　　　<span class=\\\"hljs-keyword\\\">if</span>(status==<span class=\\\"hljs-string\\\">&#x27;timeout&#x27;</span>){<span class=\\\"hljs-comment\\\">//超时,status还有success,error等值的情况</span>\\n 　　　　　 ajaxTimeoutTest.<span class=\\\"hljs-title function_\\\">abort</span>();\\n　　　　　  <span class=\\\"hljs-title function_\\\">alert</span>(<span class=\\\"hljs-string\\\">&quot;超时&quot;</span>);\\n　　　　}\\n　　}\\n});\\n</code></pre>\\n<p>函数写在complete中，因为无论success还是error，complete函数都会执行。</p>\\n<h3 id=\\\"async\\\"><a href=\\\"https://github.com/caolan/async\\\">Async</a></h3>\\n<blockquote>\\n<p>JS Ajax JQ 同步请求库</p>\\n</blockquote>\\n<p><a href=\\\"https://segmentfault.com/q/1010000005789740\\\">来源</a></p>\\n<p><a href=\\\"https://blog.csdn.net/marujunyy/article/details/8695205\\\">中文文档</a></p>\\n<h3 id=\\\"js-刷新页面\\\">JS 刷新页面</h3>\\n<h4 id=\\\"small_blue_diamond手动-reload\\\">🔹手动 reload</h4>\\n<pre><code class=\\\"hljs language-js\\\">location.<span class=\\\"hljs-title function_\\\">reload</span>();\\n</code></pre>\\n<h4 id=\\\"small_blue_diamond自动定时刷新\\\">🔹自动定时刷新</h4>\\n<p>页面自动刷新：把如下代码加入<head>区域中</p>\\n<pre><code class=\\\"hljs language-js\\\">&lt;meta http-equiv=<span class=\\\"hljs-string\\\">&quot;refresh&quot;</span> content=<span class=\\\"hljs-string\\\">&quot;5&quot;</span>&gt;\\n</code></pre>\\n<h3 id=\\\"js获取图片原始尺寸\\\">JS获取图片原始尺寸</h3>\\n<p>HTML5提供了一个新属性naturalWidth/naturalHeight可以直接获取图片的原始宽高</p>\\n<pre><code class=\\\"hljs language-javascript\\\">   <span class=\\\"hljs-keyword\\\">let</span> imgw = <span class=\\\"hljs-variable language_\\\">this</span>.<span class=\\\"hljs-property\\\">naturalWidth</span>\\n   <span class=\\\"hljs-keyword\\\">let</span> imgh = <span class=\\\"hljs-variable language_\\\">this</span>.<span class=\\\"hljs-property\\\">naturalHeight</span>\\n</code></pre>\\n<h3 id=\\\"jquery的高级选择器\\\">JQuery的高级选择器</h3>\\n<pre><code class=\\\"hljs language-javascript\\\">jQuery.<span class=\\\"hljs-title function_\\\">parent</span>(expr)           <span class=\\\"hljs-comment\\\">//找父元素</span>\\njQuery.<span class=\\\"hljs-title function_\\\">parents</span>(expr)          <span class=\\\"hljs-comment\\\">//找到所有祖先元素，不限于父元素</span>\\njQuery.<span class=\\\"hljs-title function_\\\">children</span>(expr)        <span class=\\\"hljs-comment\\\">//查找所有子元素，只会找到直接的孩子节点，不会返回所有子孙</span>\\njQuery.<span class=\\\"hljs-title function_\\\">contents</span>()            <span class=\\\"hljs-comment\\\">//查找下面的所有内容，包括节点和文本。</span>\\njQuery.<span class=\\\"hljs-title function_\\\">prev</span>()                <span class=\\\"hljs-comment\\\">//查找上一个兄弟节点，不是所有的兄弟节点</span>\\njQuery.<span class=\\\"hljs-title function_\\\">prevAll</span>()             <span class=\\\"hljs-comment\\\">//查找所有之前的兄弟节点</span>\\njQuery.<span class=\\\"hljs-title function_\\\">next</span>()                <span class=\\\"hljs-comment\\\">//查找下一个兄弟节点，不是所有的兄弟节点</span>\\njQuery.<span class=\\\"hljs-title function_\\\">nextAll</span>()             <span class=\\\"hljs-comment\\\">//查找所有之后的兄弟节点</span>\\njQuery.<span class=\\\"hljs-title function_\\\">siblings</span>()            <span class=\\\"hljs-comment\\\">//查找兄弟节点，不分前后</span>\\njQuery.<span class=\\\"hljs-title function_\\\">find</span>(expr)            <span class=\\\"hljs-comment\\\">/*跟jQuery.filter(expr)完全不一样，jQuery.filter(expr)是从初始的\\n                               jQuery对象集合中筛选出一部分，而jQuery.find()的返回结果，不会有初始集中\\n                               筛选出一部分，而jQuery.find()的返回结果，不会有初始集合中的内容，比如：\\n                               $(&quot;p&quot;).find(&quot;span&quot;)是从元素开始找，等于$(&quot;p span&quot;) */</span>\\n</code></pre>\\n<h3 id=\\\"js取消事件冒泡\\\">js取消事件冒泡</h3>\\n<pre><code class=\\\"hljs language-javascript\\\">$(<span class=\\\"hljs-string\\\">&quot;form&quot;</span>).<span class=\\\"hljs-title function_\\\">bind</span>(<span class=\\\"hljs-string\\\">&quot;submit&quot;</span>, <span class=\\\"hljs-keyword\\\">function</span>(<span class=\\\"hljs-params\\\"></span>) { \\n　　　　<span class=\\\"hljs-keyword\\\">return</span> <span class=\\\"hljs-literal\\\">false</span>;\\n　　 }\\n)\\n</code></pre>\\n<p><a href=\\\"https://www.cnblogs.com/wangking/p/6113024.html#\\\">https://www.cnblogs.com/wangking/p/6113024.html#</a></p>\\n<h3 id=\\\"js判断字符串中是否含有emoji表情\\\">JS判断字符串中是否含有Emoji表情</h3>\\n<p>如果前端的字符串含有Emoji表情，那么在默认的情况下是不能存在MySQL数据库中的，因为编码的问题\\n原因如下：</p>\\n<blockquote>\\n<p>本地数据库的默认编码是utf8，默认保存的是1到3个字节，但是现在的emoji表情采用4个字节保存，所以抛出异常。\\n引自：<a href=\\\"https://blog.csdn.net/wang704987562/article/details/54093979\\\">https://blog.csdn.net/wang704987562/article/details/54093979</a></p>\\n</blockquote>\\n<p>JS判断：</p>\\n<pre><code class=\\\"hljs language-javascript\\\"><span class=\\\"hljs-keyword\\\">function</span> <span class=\\\"hljs-title function_\\\">isEmojiCharacter</span>(<span class=\\\"hljs-params\\\">substring</span>) {  \\n    <span class=\\\"hljs-keyword\\\">for</span> ( <span class=\\\"hljs-keyword\\\">var</span> i = <span class=\\\"hljs-number\\\">0</span>; i &lt; substring.<span class=\\\"hljs-property\\\">length</span>; i++) {  \\n        <span class=\\\"hljs-keyword\\\">var</span> hs = substring.<span class=\\\"hljs-title function_\\\">charCodeAt</span>(i);  \\n        <span class=\\\"hljs-keyword\\\">if</span> (<span class=\\\"hljs-number\\\">0xd800</span> &lt;= hs &amp;&amp; hs &lt;= <span class=\\\"hljs-number\\\">0xdbff</span>) {  \\n            <span class=\\\"hljs-keyword\\\">if</span> (substring.<span class=\\\"hljs-property\\\">length</span> &gt; <span class=\\\"hljs-number\\\">1</span>) {  \\n                <span class=\\\"hljs-keyword\\\">var</span> ls = substring.<span class=\\\"hljs-title function_\\\">charCodeAt</span>(i + <span class=\\\"hljs-number\\\">1</span>);  \\n                <span class=\\\"hljs-keyword\\\">var</span> uc = ((hs - <span class=\\\"hljs-number\\\">0xd800</span>) * <span class=\\\"hljs-number\\\">0x400</span>) + (ls - <span class=\\\"hljs-number\\\">0xdc00</span>) + <span class=\\\"hljs-number\\\">0x10000</span>;  \\n                <span class=\\\"hljs-keyword\\\">if</span> (<span class=\\\"hljs-number\\\">0x1d000</span> &lt;= uc &amp;&amp; uc &lt;= <span class=\\\"hljs-number\\\">0x1f77f</span>) {  \\n                    <span class=\\\"hljs-keyword\\\">return</span> <span class=\\\"hljs-literal\\\">true</span>;  \\n                }  \\n            }  \\n        } <span class=\\\"hljs-keyword\\\">else</span> <span class=\\\"hljs-keyword\\\">if</span> (substring.<span class=\\\"hljs-property\\\">length</span> &gt; <span class=\\\"hljs-number\\\">1</span>) {  \\n            <span class=\\\"hljs-keyword\\\">var</span> ls = substring.<span class=\\\"hljs-title function_\\\">charCodeAt</span>(i + <span class=\\\"hljs-number\\\">1</span>);  \\n            <span class=\\\"hljs-keyword\\\">if</span> (ls == <span class=\\\"hljs-number\\\">0x20e3</span>) {  \\n                <span class=\\\"hljs-keyword\\\">return</span> <span class=\\\"hljs-literal\\\">true</span>;  \\n            }  \\n        } <span class=\\\"hljs-keyword\\\">else</span> {  \\n            <span class=\\\"hljs-keyword\\\">if</span> (<span class=\\\"hljs-number\\\">0x2100</span> &lt;= hs &amp;&amp; hs &lt;= <span class=\\\"hljs-number\\\">0x27ff</span>) {  \\n                <span class=\\\"hljs-keyword\\\">return</span> <span class=\\\"hljs-literal\\\">true</span>;  \\n            } <span class=\\\"hljs-keyword\\\">else</span> <span class=\\\"hljs-keyword\\\">if</span> (<span class=\\\"hljs-number\\\">0x2B05</span> &lt;= hs &amp;&amp; hs &lt;= <span class=\\\"hljs-number\\\">0x2b07</span>) {  \\n                <span class=\\\"hljs-keyword\\\">return</span> <span class=\\\"hljs-literal\\\">true</span>;  \\n            } <span class=\\\"hljs-keyword\\\">else</span> <span class=\\\"hljs-keyword\\\">if</span> (<span class=\\\"hljs-number\\\">0x2934</span> &lt;= hs &amp;&amp; hs &lt;= <span class=\\\"hljs-number\\\">0x2935</span>) {  \\n                <span class=\\\"hljs-keyword\\\">return</span> <span class=\\\"hljs-literal\\\">true</span>;  \\n            } <span class=\\\"hljs-keyword\\\">else</span> <span class=\\\"hljs-keyword\\\">if</span> (<span class=\\\"hljs-number\\\">0x3297</span> &lt;= hs &amp;&amp; hs &lt;= <span class=\\\"hljs-number\\\">0x3299</span>) {  \\n                <span class=\\\"hljs-keyword\\\">return</span> <span class=\\\"hljs-literal\\\">true</span>;  \\n            } <span class=\\\"hljs-keyword\\\">else</span> <span class=\\\"hljs-keyword\\\">if</span> (hs == <span class=\\\"hljs-number\\\">0xa9</span> || hs == <span class=\\\"hljs-number\\\">0xae</span> || hs == <span class=\\\"hljs-number\\\">0x303d</span> || hs == <span class=\\\"hljs-number\\\">0x3030</span>  \\n                    || hs == <span class=\\\"hljs-number\\\">0x2b55</span> || hs == <span class=\\\"hljs-number\\\">0x2b1c</span> || hs == <span class=\\\"hljs-number\\\">0x2b1b</span>  \\n                    || hs == <span class=\\\"hljs-number\\\">0x2b50</span>) {  \\n                <span class=\\\"hljs-keyword\\\">return</span> <span class=\\\"hljs-literal\\\">true</span>;  \\n            }  \\n        }  \\n    }  \\n}\\n</code></pre>\\n<p>引自： <a href=\\\"https://blog.csdn.net/u014520745/article/details/52947466?locationNum=8&amp;fps=1\\\">https://blog.csdn.net/u014520745/article/details/52947466?locationNum=8&amp;fps=1</a></p>\\n<h3 id=\\\"javascript使用字符串作为函数调用语句去调用\\\">Javascript使用字符串作为函数调用语句去调用</h3>\\n<pre><code class=\\\"hljs language-javascript\\\"><span class=\\\"hljs-keyword\\\">function</span> <span class=\\\"hljs-title function_\\\">func_abc</span>(<span class=\\\"hljs-params\\\"></span>){\\n  <span class=\\\"hljs-title function_\\\">alert</span>(<span class=\\\"hljs-string\\\">&#x27;a&#x27;</span>);\\n}\\n<span class=\\\"hljs-keyword\\\">var</span> str = <span class=\\\"hljs-string\\\">&quot;func_abc&quot;</span>;\\n<span class=\\\"hljs-built_in\\\">eval</span>(str+<span class=\\\"hljs-string\\\">&quot;()&quot;</span>);<span class=\\\"hljs-comment\\\">//执行func_abc()函数</span>\\n</code></pre>\\n<p>引自：<a href=\\\"https://blog.csdn.net/qq_26222859/article/details/75285784\\\">https://blog.csdn.net/qq_26222859/article/details/75285784</a></p>\\n<h3 id=\\\"js-数组排序\\\">JS 数组排序</h3>\\n<pre><code class=\\\"hljs language-javascript\\\"><span class=\\\"hljs-keyword\\\">var</span> arr = [<span class=\\\"hljs-number\\\">23</span>, <span class=\\\"hljs-number\\\">9</span>, <span class=\\\"hljs-number\\\">4</span>, <span class=\\\"hljs-number\\\">78</span>, <span class=\\\"hljs-number\\\">3</span>];\\n<span class=\\\"hljs-keyword\\\">var</span> compare = <span class=\\\"hljs-keyword\\\">function</span> (<span class=\\\"hljs-params\\\">x, y</span>) {<span class=\\\"hljs-comment\\\">//比较函数</span>\\n    <span class=\\\"hljs-keyword\\\">if</span> (x &lt; y) {\\n        <span class=\\\"hljs-keyword\\\">return</span> -<span class=\\\"hljs-number\\\">1</span>;\\n    } <span class=\\\"hljs-keyword\\\">else</span> <span class=\\\"hljs-keyword\\\">if</span> (x &gt; y) {\\n        <span class=\\\"hljs-keyword\\\">return</span> <span class=\\\"hljs-number\\\">1</span>;\\n    } <span class=\\\"hljs-keyword\\\">else</span> {\\n        <span class=\\\"hljs-keyword\\\">return</span> <span class=\\\"hljs-number\\\">0</span>;\\n    }\\n}\\n<span class=\\\"hljs-variable language_\\\">console</span>.<span class=\\\"hljs-title function_\\\">log</span>(arr.<span class=\\\"hljs-title function_\\\">sort</span>(compare));    \\n</code></pre>\\n<h3 id=\\\"js-判断浏览器类型\\\">JS 判断浏览器类型</h3>\\n<p>ie那段参考自：<a href=\\\"https://www.cnblogs.com/XCWebLTE/archive/2017/06/15/7017338.html\\\">https://www.cnblogs.com/XCWebLTE/archive/2017/06/15/7017338.html</a></p>\\n<pre><code class=\\\"hljs language-javascript\\\"><span class=\\\"hljs-keyword\\\">var</span> userAgent = navigator.<span class=\\\"hljs-property\\\">userAgent</span>;\\n<span class=\\\"hljs-keyword\\\">var</span> isOpera = userAgent.<span class=\\\"hljs-title function_\\\">indexOf</span>(<span class=\\\"hljs-string\\\">&quot;Opera&quot;</span>) &gt; -<span class=\\\"hljs-number\\\">1</span>;\\n\\n<span class=\\\"hljs-keyword\\\">function</span> <span class=\\\"hljs-title function_\\\">ievertion</span>(<span class=\\\"hljs-params\\\"></span>) {\\n    <span class=\\\"hljs-keyword\\\">var</span> isIE = userAgent.<span class=\\\"hljs-title function_\\\">indexOf</span>(<span class=\\\"hljs-string\\\">&quot;compatible&quot;</span>) &gt; -<span class=\\\"hljs-number\\\">1</span> &amp;&amp; userAgent.<span class=\\\"hljs-title function_\\\">indexOf</span>(<span class=\\\"hljs-string\\\">&quot;MSIE&quot;</span>) &gt; -<span class=\\\"hljs-number\\\">1</span>; <span class=\\\"hljs-comment\\\">//判断是否IE&lt;11浏览器  </span>\\n    <span class=\\\"hljs-keyword\\\">var</span> isEdge = userAgent.<span class=\\\"hljs-title function_\\\">indexOf</span>(<span class=\\\"hljs-string\\\">&quot;Edge&quot;</span>) &gt; -<span class=\\\"hljs-number\\\">1</span> &amp;&amp; !isIE; <span class=\\\"hljs-comment\\\">//判断是否IE的Edge浏览器  </span>\\n    <span class=\\\"hljs-keyword\\\">var</span> isIE11 = userAgent.<span class=\\\"hljs-title function_\\\">indexOf</span>(<span class=\\\"hljs-string\\\">&#x27;Trident&#x27;</span>) &gt; -<span class=\\\"hljs-number\\\">1</span> &amp;&amp; userAgent.<span class=\\\"hljs-title function_\\\">indexOf</span>(<span class=\\\"hljs-string\\\">&quot;rv:11.0&quot;</span>) &gt; -<span class=\\\"hljs-number\\\">1</span>;\\n    <span class=\\\"hljs-keyword\\\">if</span> (isIE) {\\n        <span class=\\\"hljs-keyword\\\">var</span> reIE = <span class=\\\"hljs-keyword\\\">new</span> <span class=\\\"hljs-title class_\\\">RegExp</span>(<span class=\\\"hljs-string\\\">&quot;MSIE (\\\\\\\\d+\\\\\\\\.\\\\\\\\d+);&quot;</span>);\\n        reIE.<span class=\\\"hljs-title function_\\\">test</span>(userAgent);\\n        <span class=\\\"hljs-keyword\\\">var</span> fIEVersion = <span class=\\\"hljs-built_in\\\">parseFloat</span>(<span class=\\\"hljs-title class_\\\">RegExp</span>[<span class=\\\"hljs-string\\\">&quot;$1&quot;</span>]);\\n        <span class=\\\"hljs-keyword\\\">if</span> (fIEVersion == <span class=\\\"hljs-number\\\">7</span>) {\\n            <span class=\\\"hljs-keyword\\\">return</span> <span class=\\\"hljs-number\\\">7</span>;\\n        } <span class=\\\"hljs-keyword\\\">else</span> <span class=\\\"hljs-keyword\\\">if</span> (fIEVersion == <span class=\\\"hljs-number\\\">8</span>) {\\n            <span class=\\\"hljs-keyword\\\">return</span> <span class=\\\"hljs-number\\\">8</span>;\\n        } <span class=\\\"hljs-keyword\\\">else</span> <span class=\\\"hljs-keyword\\\">if</span> (fIEVersion == <span class=\\\"hljs-number\\\">9</span>) {\\n            <span class=\\\"hljs-keyword\\\">return</span> <span class=\\\"hljs-number\\\">9</span>;\\n        } <span class=\\\"hljs-keyword\\\">else</span> <span class=\\\"hljs-keyword\\\">if</span> (fIEVersion == <span class=\\\"hljs-number\\\">10</span>) {\\n            <span class=\\\"hljs-keyword\\\">return</span> <span class=\\\"hljs-number\\\">10</span>;\\n        } <span class=\\\"hljs-keyword\\\">else</span> {\\n            <span class=\\\"hljs-keyword\\\">return</span> <span class=\\\"hljs-number\\\">6</span>; <span class=\\\"hljs-comment\\\">//IE版本&lt;=7</span>\\n        }\\n    } <span class=\\\"hljs-keyword\\\">else</span> <span class=\\\"hljs-keyword\\\">if</span> (isEdge) {\\n        <span class=\\\"hljs-keyword\\\">return</span> <span class=\\\"hljs-string\\\">&#x27;edge&#x27;</span>; <span class=\\\"hljs-comment\\\">//edge</span>\\n    } <span class=\\\"hljs-keyword\\\">else</span> <span class=\\\"hljs-keyword\\\">if</span> (isIE11) {\\n        <span class=\\\"hljs-keyword\\\">return</span> <span class=\\\"hljs-number\\\">11</span>; <span class=\\\"hljs-comment\\\">//IE11  </span>\\n    } <span class=\\\"hljs-keyword\\\">else</span> {\\n        <span class=\\\"hljs-keyword\\\">return</span> -<span class=\\\"hljs-number\\\">1</span>; <span class=\\\"hljs-comment\\\">//不是ie浏览器</span>\\n    }\\n}\\n\\n<span class=\\\"hljs-keyword\\\">function</span> <span class=\\\"hljs-title function_\\\">isSafari</span>(<span class=\\\"hljs-params\\\"></span>) {\\n    <span class=\\\"hljs-keyword\\\">return</span> userAgent.<span class=\\\"hljs-title function_\\\">indexOf</span>(<span class=\\\"hljs-string\\\">&quot;Safari&quot;</span>) &gt; -<span class=\\\"hljs-number\\\">1</span>\\n}\\n\\n<span class=\\\"hljs-keyword\\\">function</span> <span class=\\\"hljs-title function_\\\">isFF</span>(<span class=\\\"hljs-params\\\"></span>) {\\n    <span class=\\\"hljs-keyword\\\">return</span> userAgent.<span class=\\\"hljs-title function_\\\">indexOf</span>(<span class=\\\"hljs-string\\\">&quot;Firefox&quot;</span>) &gt; -<span class=\\\"hljs-number\\\">1</span>\\n}\\n\\n<span class=\\\"hljs-keyword\\\">function</span> <span class=\\\"hljs-title function_\\\">isChrome</span>(<span class=\\\"hljs-params\\\"></span>) {\\n    <span class=\\\"hljs-keyword\\\">return</span> userAgent.<span class=\\\"hljs-title function_\\\">indexOf</span>(<span class=\\\"hljs-string\\\">&quot;Chrome&quot;</span>) &gt; -<span class=\\\"hljs-number\\\">1</span>\\n}\\n</code></pre>\\n<h3 id=\\\"javascript-解除xhr获取header的限制\\\">JavaScript 解除xhr获取header的限制</h3>\\n<p><a href=\\\"http://www.ruanyifeng.com/blog/2016/04/cors.html\\\">http://www.ruanyifeng.com/blog/2016/04/cors.html</a></p>\\n<p>需要后端的配合</p>\\n<h3 id=\\\"js锚点跳转动画\\\">JS锚点跳转动画</h3>\\n<p>一般我们的锚点都长这样</p>\\n<pre><code class=\\\"hljs language-html\\\"><span class=\\\"hljs-tag\\\">&lt;<span class=\\\"hljs-name\\\">a</span> <span class=\\\"hljs-attr\\\">name</span>=<span class=\\\"hljs-string\\\">&quot;xxx&quot;</span> <span class=\\\"hljs-attr\\\">class</span>=<span class=\\\"hljs-string\\\">&quot;reference-link&quot;</span> <span class=\\\"hljs-attr\\\">target</span>=<span class=\\\"hljs-string\\\">&quot;_blank&quot;</span>&gt;</span><span class=\\\"hljs-tag\\\">&lt;/<span class=\\\"hljs-name\\\">a</span>&gt;</span>\\n</code></pre>\\n<p>因此我们就根据name去索引锚点</p>\\n<pre><code class=\\\"hljs language-javascript\\\"><span class=\\\"hljs-keyword\\\">var</span> $root = $(<span class=\\\"hljs-string\\\">&#x27;html, body&#x27;</span>)\\n$(<span class=\\\"hljs-string\\\">&#x27;.markdown-toc a&#x27;</span>).<span class=\\\"hljs-title function_\\\">click</span>(<span class=\\\"hljs-keyword\\\">function</span>(<span class=\\\"hljs-params\\\"></span>) {\\n    $root.<span class=\\\"hljs-title function_\\\">animate</span>({\\n        <span class=\\\"hljs-attr\\\">scrollTop</span>: $(<span class=\\\"hljs-string\\\">&#x27;[name=&quot;xxx&quot;]&#x27;</span>).<span class=\\\"hljs-title function_\\\">offset</span>().<span class=\\\"hljs-property\\\">top</span>\\n    }, <span class=\\\"hljs-number\\\">600</span>)\\n})\\n</code></pre>\\n<h3 id=\\\"js-监听元素任何变化\\\">JS 监听元素任何变化</h3>\\n<p><a href=\\\"http://javascript.ruanyifeng.com/dom/mutationobserver.html\\\">mutationobserver</a>\\n<a href=\\\"https://blog.csdn.net/u010419337/article/details/81474311\\\">csdn blog</a></p>\\n<pre><code class=\\\"hljs language-javascript\\\"><span class=\\\"hljs-keyword\\\">let</span> <span class=\\\"hljs-title class_\\\">MutationObserver</span> = <span class=\\\"hljs-variable language_\\\">window</span>.<span class=\\\"hljs-property\\\">MutationObserver</span> || <span class=\\\"hljs-variable language_\\\">window</span>.<span class=\\\"hljs-property\\\">WebKitMutationObserver</span> || <span class=\\\"hljs-variable language_\\\">window</span>.<span class=\\\"hljs-property\\\">MozMutationObserver</span>\\n<span class=\\\"hljs-keyword\\\">let</span> observer = <span class=\\\"hljs-keyword\\\">new</span> <span class=\\\"hljs-title class_\\\">MutationObserver</span>(<span class=\\\"hljs-keyword\\\">function</span>(<span class=\\\"hljs-params\\\">mutationList</span>) {\\n    <span class=\\\"hljs-built_in\\\">setTimeout</span>(<span class=\\\"hljs-keyword\\\">function</span>(<span class=\\\"hljs-params\\\"></span>) {\\n        <span class=\\\"hljs-comment\\\">// handle change</span>\\n    }, <span class=\\\"hljs-number\\\">250</span>);\\n})\\n<span class=\\\"hljs-keyword\\\">let</span> article = $(<span class=\\\"hljs-string\\\">&#x27;#docpanel&#x27;</span>)[<span class=\\\"hljs-number\\\">0</span>]\\n<span class=\\\"hljs-keyword\\\">let</span> options = {\\n    <span class=\\\"hljs-string\\\">&#x27;attributes&#x27;</span>: <span class=\\\"hljs-literal\\\">true</span>,\\n    <span class=\\\"hljs-string\\\">&#x27;attributeOldValue&#x27;</span>: <span class=\\\"hljs-literal\\\">true</span>\\n};\\nobserver.<span class=\\\"hljs-title function_\\\">observe</span>(article, options);\\n</code></pre>\\n<h3 id=\\\"jquery-ui-拖拽\\\">JQuery UI 拖拽</h3>\\n<p><a href=\\\"https://www.runoob.com/jqueryui/example-draggable.html\\\">https://www.runoob.com/jqueryui/example-draggable.html</a></p>\\n<h3 id=\\\"jquery-gif播放暂停-js-gif库\\\">JQuery GIF播放/暂停 JS-GIF库</h3>\\n<p><a href=\\\"https://www.lanrenzhijia.com/pic/3719.html\\\">https://www.lanrenzhijia.com/pic/3719.html</a>\\n<a href=\\\"https://github.com/buzzfeed/libgif-js\\\">https://github.com/buzzfeed/libgif-js</a></p>\\n<h3 id=\\\"打开新网页\\\">打开新网页</h3>\\n<pre><code class=\\\"hljs language-js\\\"><span class=\\\"hljs-keyword\\\">function</span> <span class=\\\"hljs-title function_\\\">openInNewTab</span>(<span class=\\\"hljs-params\\\">url</span>) {\\n <span class=\\\"hljs-variable language_\\\">window</span>.<span class=\\\"hljs-title function_\\\">open</span>(url, <span class=\\\"hljs-string\\\">&#x27;_blank&#x27;</span>).<span class=\\\"hljs-title function_\\\">focus</span>();\\n}\\n\\n<span class=\\\"hljs-comment\\\">//or just</span>\\n<span class=\\\"hljs-variable language_\\\">window</span>.<span class=\\\"hljs-title function_\\\">open</span>(url, <span class=\\\"hljs-string\\\">&#x27;_blank&#x27;</span>).<span class=\\\"hljs-title function_\\\">focus</span>();\\n</code></pre>\\n<h3 id=\\\"如何在不加载dom的情况下操作dom\\\">如何在不加载dom的情况下操作dom</h3>\\n<pre><code class=\\\"hljs language-js\\\"><span class=\\\"hljs-keyword\\\">const</span> node = <span class=\\\"hljs-keyword\\\">new</span> <span class=\\\"hljs-title class_\\\">DOMParser</span>()\\n    .<span class=\\\"hljs-title function_\\\">parseFromString</span>(html, <span class=\\\"hljs-string\\\">&#x27;text/html&#x27;</span>).<span class=\\\"hljs-property\\\">body</span>.<span class=\\\"hljs-property\\\">firstElementChild</span>;\\n</code></pre>\\n<p><a href=\\\"https://grrr.tech/posts/create-dom-node-from-html-string/\\\">https://grrr.tech/posts/create-dom-node-from-html-string/</a></p>\\n\";","export default \"<h2 id=\\\"software-engineering\\\">Software Engineering</h2>\\n<h3 id=\\\"useful-links\\\">Useful Links</h3>\\n<h4 id=\\\"about-moduling\\\">About Moduling</h4>\\n<ol>\\n<li><a href=\\\"https://www.visual-paradigm.com/guide/agile-software-development/user-story-vs-use-case/\\\">User stories vs. Use Cases</a></li>\\n<li><a href=\\\"https://www.visual-paradigm.com/guide/uml-unified-modeling-language/what-is-use-case-diagram/\\\">What is Use Case Diagram?</a></li>\\n<li><a href=\\\"https://www.geeksforgeeks.org/difference-between-sequence-diagram-and-activity-diagram/\\\">The diff. between Activity Diagram and Sequence Diagram</a></li>\\n</ol>\\n<h4 id=\\\"about-srs\\\">About SRS</h4>\\n<ol>\\n<li><a href=\\\"https://relevant.software/blog/software-requirements-specification-srs-document/\\\">Your 2022 Guide to Writing a Software Requirements Specification (SRS) Document</a></li>\\n<li><a href=\\\"https://www.inflectra.com/ideas/topic/requirements-definition.aspx\\\">What are System Requirements Specifications/Software (SRS)?</a> ✅</li>\\n</ol>\\n<h4 id=\\\"about-concept\\\">About Concept</h4>\\n<ol>\\n<li><a href=\\\"https://www.scaledagileframework.com/agile-release-train/\\\">Agile Release Train</a></li>\\n<li><a href=\\\"https://www.geeksforgeeks.org/software-engineering-comparison-between-agile-model-and-other-models/\\\">Comparison between Agile model and other models</a></li>\\n</ol>\\n<h4 id=\\\"about-user-stories\\\">About User Stories</h4>\\n<ol>\\n<li><p><a href=\\\"https://www.productboard.com/glossary/user-story/?utm_source=google&amp;utm_medium=cpc&amp;utm_campaign=gg_dg_nam_search_trial_generic_dynamic&amp;utm_term=&amp;matchtype=b&amp;utm_content=user_insights&amp;utm_adgroup=132657177788&amp;device=c&amp;gclid=CjwKCAjw_L6LBhBbEiwA4c46ujXIoslCIaME66DFfJ9yxEl6QKytR8w4F3dFxG-9UB15lr3zbNsMFRoCNk4QAvD_BwE\\\">User stories Fomular</a></p>\\n</li>\\n<li><p><a href=\\\"https://www.akendi.com/blog/scenarios-user-stories-and-use-casesoh-my/\\\">SCENARIOS, USER STORIES AND USE CASES</a></p>\\n</li>\\n<li><p><a href=\\\"https://www.quora.com/User-scenarios-user-stories-user-cases-whats-the-difference\\\">User story &amp; User scenario</a></p>\\n<blockquote>\\n<p>I feel like the nomenclature causes confusion and should be rethought. Sharing for the sake of a slightly different perspective.</p>\\n<p>&quot;User Scenario&quot; should be &quot;User Story&quot;; because it tells the reader a &quot;story&quot; about what is happening to the user, high level goals and approaches to achieving the goal. By definition, a &quot;story&quot; is a &quot;narrative&quot;, and a &quot;User Scenario&quot; is also a &quot;narrative&quot;.</p>\\n<p>&quot;User Story&quot; should be something like &quot;User Spec&quot;; because it is a short-form functional requirement that addresses something very specific, ie, a specification. The standard template for a User Story is &quot;As a [data analysts], John can [create a graph from the data table], so that he can [visualize trends in the data]&quot;. That, in my opinion, is not much of a &quot;story&quot;.</p>\\n<p>&quot;Use Case&quot; is appropriate.</p>\\n</blockquote>\\n</li>\\n<li><p><a href=\\\"http://www.inflectra.com/Ideas/Topic/User-Stories.aspx\\\">What are User Stories - User Story Examples from Inflectra</a> ✅</p>\\n</li>\\n</ol>\\n<h4 id=\\\"about-agile-mgmt\\\">About Agile Mgmt.</h4>\\n<ol>\\n<li><a href=\\\"https://www.mountaingoatsoftware.com/blog/handling-work-left-at-the-end-of-a-sprint\\\">Handling Work Left At The End of The Sprint</a></li>\\n</ol>\\n<h4 id=\\\"about-srs-documentation\\\">About SRS Documentation</h4>\\n<ol>\\n<li><a href=\\\"https://medium.com/trailblazer-of-salesforce/software-requirements-specification-srs-document-fd9ab103b18#_Toc77487629\\\">Example1</a></li>\\n<li><a href=\\\"https://krazytech.com/projects/sample-software-requirements-specificationsrs-report-airline-database\\\">Example2</a></li>\\n<li></li>\\n</ol>\\n<h4 id=\\\"asm\\\">ASM</h4>\\n<p><a href=\\\"https://www.cse.sdsmt.edu/lpyeatt/courses/ceng342/slides/Lecture_19_ASM.pdf\\\">https://www.cse.sdsmt.edu/lpyeatt/courses/ceng342/slides/Lecture_19_ASM.pdf</a></p>\\n\";","export default \"<h2 id=\\\"python\\\">Python</h2>\\n<h3 id=\\\"pyenv\\\">Pyenv</h3>\\n<h4 id=\\\"install-and-config\\\">Install and config</h4>\\n<ol>\\n<li><p>follow: <a href=\\\"https://github.com/pyenv/pyenv\\\">https://github.com/pyenv/pyenv</a></p>\\n</li>\\n<li><p>PATH:</p>\\n<pre><code class=\\\"hljs language-zsh\\\">// .zshrc\\n\\nexport PYENV_ROOR=&quot;$HOME/.pyenv&quot;\\nexport PATH=$PYENV_ROOT/shims:$PATH\\neval &quot;$(pyenv init -)&quot;\\neval &quot;$(pyenv virtualenv-init -)&quot;\\n</code></pre>\\n</li>\\n</ol>\\n\";","export default \"<h2 id=\\\"english-termiologies\\\">English Termiologies</h2>\\n<h3 id=\\\"mathmatics\\\">Mathmatics</h3>\\n<h4 id=\\\"floating-point-numbers\\\">Floating Point Numbers</h4>\\n<h5 id=\\\"left--right\\\">Left &amp; Right</h5>\\n<p>There are two <strong>terminologies</strong> that I&#39;m familiar with. Sometimes, the part to the right of the decimal (cents) is called the <em><strong>mantissa</strong></em>, and the part to the left (dollars, in your metaphor), is called the <em><strong>characteristic</strong></em>.</p>\\n<p>But I also like the generic terms <em><strong>integer-part</strong></em> and <em><strong>fractional-part</strong></em>. It&#39;s what I and those with whom I do research call them (who uses the word mantissa routinely? not me, but perhaps someone). Yes, I know the fractional part doesn&#39;t actually have to be a fraction, but that&#39;s just something I toss into my big bag of math vagaries.</p>\\n<p><a href=\\\"https://math.stackexchange.com/questions/64042/what-are-the-numbers-before-and-after-the-decimal-point-referred-to-in-mathemati\\\">reference</a></p>\\n\";","export default \"<h2 id=\\\"操作系统原理\\\">操作系统原理</h2>\\n<h3 id=\\\"进程与线程\\\">进程与线程</h3>\\n<h4 id=\\\"1-进程\\\"><strong>1. 进程</strong></h4>\\n<p>进程是资源分配的基本单位。</p>\\n<p>进程控制块 (Process Control Block, PCB) 描述进程的基本信息和运行状态，所谓的创建进程和撤销进程，都是指对 PCB 的操作。</p>\\n<h4 id=\\\"2-线程\\\"><strong>2. 线程</strong></h4>\\n<p>线程是独立调度的基本单位。</p>\\n<p>一个进程中可以有多个线程，它们共享进程资源。</p>\\n<p>比如QQ和浏览器是两个进程，浏览器进程里面有很多线程，例如 HTTP 请求线程、事件响应线程、渲染线程等等，线程的并发执行使得在浏览器中点击一个新链接从而发起 HTTP 请求时，浏览器还可以响应用户的其它事件。</p>\\n<h4 id=\\\"3-区别\\\"><strong>3. 区别</strong></h4>\\n<ol>\\n<li><p>拥有资源</p>\\n<p>进程是资源分配的基本单位，但是线程不拥有资源，线程可以访问隶属进程的资源。</p>\\n</li>\\n<li><p>调度</p>\\n<p>线程是独立调度的基本单位，在同一进程中，线程的切换不会引起进程切换，从一个进程中的线程切换到另一个进程中的线程时，会引起进程切换。</p>\\n</li>\\n<li><p>系统开销</p>\\n<p>由于创建或撤销进程时，系统都要为之分配或回收资源，如内存空间、I/O 设备等，所付出的开销远大于创建或撤销线程时的开销。类似地，在进行进程切换时，涉及当前执行进程 CPU 环境的保存及新调度进程 CPU 环境的设置，而线程切换时只需保存和设置少量寄存器内容，开销很小。</p>\\n</li>\\n<li><p>通信方面</p>\\n<p>线程间可以通过直接读写同一进程中的数据进行通信，但是进程通信需要借助 IPC。</p>\\n</li>\\n</ol>\\n<h3 id=\\\"进程调度算法\\\"><strong>进程调度算法</strong></h3>\\n<p>不同环境的调度算法目标不同，因此需要针对不同环境来讨论调度算法。</p>\\n<h4 id=\\\"1-批处理系统\\\"><strong>1. 批处理系统</strong></h4>\\n<p>批处理系统没有太多的用户操作，在该系统中，调度算法目标是保证吞吐量和周转时间（从提交到终止的时间）。</p>\\n<h5 id=\\\"11-先来先服务-first-come-first-serverd（fcfs）\\\"><strong>1.1 先来先服务 first-come first-serverd（FCFS）</strong></h5>\\n<p>按照请求的顺序进行调度。</p>\\n<p>有利于长作业，但不利于短作业，因为短作业必须一直等待前面的长作业执行完毕才能执行，而长作业又需要执行很长时间，造成了短作业等待时间过长。</p>\\n<h5 id=\\\"12-短作业优先-shortest-job-first（sjf）\\\"><strong>1.2 短作业优先 shortest job first（SJF）</strong></h5>\\n<p>按估计运行时间最短的顺序进行调度。</p>\\n<p>长作业有可能会饿死，处于一直等待短作业执行完毕的状态。因为如果一直有短作业到来，那么长作业永远得不到调度。</p>\\n<h5 id=\\\"13-最短剩余时间优先-shortest-remaining-time-next（srtn）\\\"><strong>1.3 最短剩余时间优先 shortest remaining time next（SRTN）</strong></h5>\\n<p>按估计剩余时间最短的顺序进行调度。</p>\\n<h4 id=\\\"2-交互式系统\\\"><strong>2. 交互式系统</strong></h4>\\n<p>交互式系统有大量的用户交互操作，在该系统中调度算法的目标是快速地进行响应。</p>\\n<h5 id=\\\"21-时间片轮转\\\"><strong>2.1 时间片轮转</strong></h5>\\n<p>将所有就绪进程按 FCFS 的原则排成一个队列，每次调度时，把 CPU 时间分配给队首进程，该进程可以执行一个时间片。当时间片用完时，由计时器发出时钟中断，调度程序便停止该进程的执行，并将它送往就绪队列的末尾，同时继续把 CPU 时间分配给队首的进程。</p>\\n<p>时间片轮转算法的效率和时间片的大小有很大关系：</p>\\n<ul>\\n<li>因为进程切换都要保存进程的信息并且载入新进程的信息，如果时间片太小，会导致进程切换得太频繁，在进程切换上就会花过多时间。</li>\\n<li>而如果时间片过长，那么实时性就不能得到保证。</li>\\n</ul>\\n<h5 id=\\\"22-优先级调度\\\"><strong>2.2 优先级调度</strong></h5>\\n<p>为每个进程分配一个优先级，按优先级进行调度。</p>\\n<p>为了防止低优先级的进程永远等不到调度，可以随着时间的推移增加等待进程的优先级。</p>\\n<h5 id=\\\"23-多级反馈队列\\\"><strong>2.3 多级反馈队列</strong></h5>\\n<p>一个进程需要执行 100 个时间片，如果采用时间片轮转调度算法，那么需要交换 100 次。</p>\\n<p>多级队列是为这种需要连续执行多个时间片的进程考虑，它设置了多个队列，每个队列时间片大小都不同，例如 1,2,4,8,..。进程在第一个队列没执行完，就会被移到下一个队列。这种方式下，之前的进程只需要交换 7 次。</p>\\n<p>每个队列优先权也不同，最上面的优先权最高。因此只有上一个队列没有进程在排队，才能调度当前队列上的进程。</p>\\n<p>可以将这种调度算法看成是时间片轮转调度算法和优先级调度算法的结合。</p>\\n<h4 id=\\\"3-实时系统\\\"><strong>3. 实时系统</strong></h4>\\n<p>实时系统要求一个请求在一个确定时间内得到响应。</p>\\n<p>分为硬实时和软实时，前者必须满足绝对的截止时间，后者可以容忍一定的超时。</p>\\n<h3 id=\\\"死锁\\\">死锁</h3>\\n<h4 id=\\\"必要条件\\\">必要条件</h4>\\n<ul>\\n<li>互斥：每个资源要么已经分配给了一个进程，要么就是可用的。</li>\\n<li>占有和等待：已经得到了某个资源的进程可以再请求新的资源。</li>\\n<li>不可抢占：已经分配给一个进程的资源不能强制性地被抢占，它只能被占有它的进程显式地释放。</li>\\n<li>环路等待：有两个或者两个以上的进程组成一条环路，该环路中的每个进程都在等待下一个进程所占有的资源。</li>\\n</ul>\\n<h4 id=\\\"处理方法\\\">处理方法</h4>\\n<h5 id=\\\"不管：鸵鸟策略\\\">不管：鸵鸟策略</h5>\\n<p>把头埋在沙子里，假装根本没发生问题。</p>\\n<p>因为解决死锁问题的代价很高，因此鸵鸟策略这种不采取任务措施的方案会获得更高的性能。</p>\\n<p>当发生死锁时不会对用户造成多大影响，或发生死锁的概率很低，可以采用鸵鸟策略。</p>\\n<p>大多数操作系统，包括 Unix，Linux 和 Windows，处理死锁问题的办法仅仅是忽略它。</p>\\n<h5 id=\\\"死锁检测与死锁恢复\\\">死锁检测与死锁恢复</h5>\\n<p>死锁发生时，进行检查，如MySQL的死锁检测就能检测锁请求依赖图，有回路的就代表有循环依赖</p>\\n<p>使用强制抢占、回滚、杀死进程的方式解开死锁</p>\\n<h5 id=\\\"死锁预防\\\">死锁预防</h5>\\n<p>破坏死锁产生的条件：</p>\\n<p><strong>1. 破坏互斥条件</strong></p>\\n<p>例如假脱机打印机技术允许若干个进程同时输出，唯一真正请求物理打印机的进程是打印机守护进程。</p>\\n<p><strong>2. 破坏占有和等待条件</strong></p>\\n<p>一种实现方式是规定所有进程在开始执行前请求所需要的全部资源。</p>\\n<p><strong>3. 破坏不可抢占条件</strong></p>\\n<p><strong>4. 破坏环路等待</strong></p>\\n<p>给资源统一编号，进程只能按编号顺序来请求资源。</p>\\n<h5 id=\\\"死锁避免\\\">死锁避免</h5>\\n<p>使用安全状态、银行家算法来避免</p>\\n\";","export default \"<h2 id=\\\"academic-websites-or-materials\\\">Academic Websites Or Materials</h2>\\n<h3 id=\\\"paper-template-related\\\">Paper Template Related</h3>\\n<ol>\\n<li><a href=\\\"https://www.ctan.org/pkg/acmart\\\">acmart template</a></li>\\n<li><a href=\\\"https://www.acm.org/binaries/content/assets/publications/consolidated-tex-template/acmart.pdf\\\">acmart.pdf</a></li>\\n</ol>\\n<h3 id=\\\"writing-related\\\">Writing Related</h3>\\n<ol>\\n<li><a href=\\\"https://www.wordhippo.com/\\\">wordhippo: good for find alternative word or synonyms</a></li>\\n<li><a href=\\\"https://www.rpi.edu/dept/arc/training/latex/LaTeX_symbols.pdf\\\">Latex math symbol</a></li>\\n<li><a href=\\\"https://muug.ca/mirror/ctan/macros/latex/contrib/threeparttable/threeparttable.pdf\\\">ieee: table footnote</a></li>\\n<li><a href=\\\"https://www.allacronyms.com/controller/abbreviated\\\">find abbreviation</a></li>\\n</ol>\\n\";","export default \"<h2 id=\\\"软件\\\">软件</h2>\\n<h3 id=\\\"icon相关-素材站软件\\\">icon相关 素材站/软件</h3>\\n<h4 id=\\\"small_blue_diamond阿里巴巴矢量图标库\\\">🔹阿里巴巴矢量图标库</h4>\\n<p><img src=\\\"https://user-images.githubusercontent.com/23525754/39858740-10f258c4-546a-11e8-88d2-0382dae3fc15.png\\\" alt=\\\"image\\\"></p>\\n<p>link : <a href=\\\"http://iconfont.cn/\\\">http://iconfont.cn/</a></p>\\n<h4 id=\\\"small_blue_diamondiconstroe\\\">🔹iconstroe</h4>\\n<p><img src=\\\"https://user-images.githubusercontent.com/23525754/39858781-297796b6-546a-11e8-890d-eab6bb371b9d.png\\\" alt=\\\"image\\\"></p>\\n<p>link : <a href=\\\"https://iconstore.co/\\\">https://iconstore.co/</a></p>\\n<h4 id=\\\"small_blue_diamondflaticon\\\">🔹flaticon</h4>\\n<p><img src=\\\"https://user-images.githubusercontent.com/23525754/39859278-e8451b08-546b-11e8-9639-afb2357cd0e0.png\\\" alt=\\\"image\\\"></p>\\n<p>link : <a href=\\\"https://www.flaticon.com/\\\">https://www.flaticon.com/</a></p>\\n<h4 id=\\\"small_blue_diamondnucleo-icon管理工具\\\">🔹Nucleo Icon管理工具</h4>\\n<p><img src=\\\"https://user-images.githubusercontent.com/23525754/39859547-c42d88d0-546c-11e8-9d44-a16a5982fe89.png\\\" alt=\\\"image\\\"></p>\\n<p><a href=\\\"https://nucleoapp.com/\\\">https://nucleoapp.com/</a></p>\\n<h3 id=\\\"软件推介--cmder\\\">软件推介 : cmder</h3>\\n<blockquote>\\n<p>一个高颜值功能强大的的windows终端管理器</p>\\n<p>介绍 : <a href=\\\"https://zhuanlan.zhihu.com/p/28400466\\\">https://zhuanlan.zhihu.com/p/28400466</a></p>\\n</blockquote>\\n<p><img src=\\\"https://user-images.githubusercontent.com/23525754/40038175-47ab3728-5843-11e8-8673-10bd2894ad70.png\\\" alt=\\\"image\\\"></p>\\n<h4 id=\\\"small_blue_diamondtips\\\">🔹Tips:</h4>\\n<p>软件有mini版本, 还有full版本, 前者8MB, 后者100多MB, full其实就是比mini多了git, 但是我们之前肯定就都有git的.</p>\\n<p>但是最好不要用mini, 因为mini会有一些权限的问题, 启动的时候必须要管理员权限, 否则没有权限备份它的配置文件, 这样很坑, 都不能放开机启动, 但是full的版本可以不需要管理员权限就启动.</p>\\n<p>所以我们下载full, 解压在<code>C:\\\\Program Files</code>, 可以发现整个软件大概250MB, 我们从软件目录下的<code>C:\\\\Program Files\\\\cmder\\\\vendor</code>中删去<code>git-for-windows</code>文件夹, 发现这个文件夹就占了230+MB, 删去了之后对软件没有任何的影响.</p>\\n<h3 id=\\\"htop\\\">Htop</h3>\\n<p><a href=\\\"https://www.jianshu.com/p/5629e331f58d\\\">https://www.jianshu.com/p/5629e331f58d</a></p>\\n<p>1.首先，在CentOS 7上启用epel版本。</p>\\n<pre><code class=\\\"hljs language-bash\\\">[root@hk-fa ~]<span class=\\\"hljs-comment\\\"># yum -y install epel-release</span>\\nLoaded plugins: fastestmirror\\nLoading mirror speeds from cached hostfile\\n * base: mirrors.aliyuncs.com\\n * epel: mirrors.aliyuncs.com\\n * extras: mirrors.aliyuncs.com\\n * updates: mirrors.aliyuncs.com\\nResolving Dependencies\\n--&gt; Running transaction check\\n---&gt; Package epel-release.noarch 0:7-9 will be installed\\n--&gt; Finished Dependency Resolution\\n\\nDependencies Resolved\\n\\n==============================================================================================================================================================================================================================================================================\\n Package                                                                Arch                                                             Version                                                         Repository                                                      Size\\n==============================================================================================================================================================================================================================================================================\\nInstalling:\\n epel-release                                                           noarch                                                           7-9                                                             epel                                                            14 k\\n\\nTransaction Summary\\n==============================================================================================================================================================================================================================================================================\\nInstall  1 Package\\n\\nTotal download size: 14 k\\nInstalled size: 24 k\\nDownloading packages:\\nepel-release-7-9.noarch.rpm                                                                                                                                                                                                                            |  14 kB  00:00:00     \\nRunning transaction check\\nRunning transaction <span class=\\\"hljs-built_in\\\">test</span>\\nTransaction <span class=\\\"hljs-built_in\\\">test</span> succeeded\\nRunning transaction\\n  Installing : epel-release-7-9.noarch                                                                                                                                                                                                                                    1/1 \\nwarning: /etc/yum.repos.d/epel.repo created as /etc/yum.repos.d/epel.repo.rpmnew\\n  Verifying  : epel-release-7-9.noarch                                                                                                                                                                                                                                    1/1 \\n\\nInstalled:\\n  epel-release.noarch 0:7-9                                                                                                                                                                                                                                                   \\n\\nComplete!\\n</code></pre>\\n<p>2.使用yum install命令安装CentOS htop</p>\\n<pre><code class=\\\"hljs language-bash\\\">[root@hk-fa ~]<span class=\\\"hljs-comment\\\"># yum -y install htop</span>\\nLoaded plugins: fastestmirror\\nLoading mirror speeds from cached hostfile\\n * base: mirrors.aliyuncs.com\\n * epel: mirrors.aliyuncs.com\\n * extras: mirrors.aliyuncs.com\\n * updates: mirrors.aliyuncs.com\\nResolving Dependencies\\n--&gt; Running transaction check\\n---&gt; Package htop.x86_64 0:2.0.2-1.el7 will be installed\\n--&gt; Finished Dependency Resolution\\n\\nDependencies Resolved\\n\\n==============================================================================================================================================================================================================================================================================\\n Package                                                        Arch                                                             Version                                                                 Repository                                                      Size\\n==============================================================================================================================================================================================================================================================================\\nInstalling:\\n htop                                                           x86_64                                                           2.0.2-1.el7                                                             epel                                                            98 k\\n\\nTransaction Summary\\n==============================================================================================================================================================================================================================================================================\\nInstall  1 Package\\n\\nTotal download size: 98 k\\nInstalled size: 207 k\\nDownloading packages:\\nhtop-2.0.2-1.el7.x86_64.rpm                                                                                                                                                                                                                            |  98 kB  00:00:00     \\nRunning transaction check\\nRunning transaction <span class=\\\"hljs-built_in\\\">test</span>\\nTransaction <span class=\\\"hljs-built_in\\\">test</span> succeeded\\nRunning transaction\\n  Installing : htop-2.0.2-1.el7.x86_64                                                                                                                                                                                                                                    1/1 \\n  Verifying  : htop-2.0.2-1.el7.x86_64                                                                                                                                                                                                                                    1/1 \\n\\nInstalled:\\n  htop.x86_64 0:2.0.2-1.el7                                                                                                                                                                                                                                                   \\n\\nComplete!\\n</code></pre>\\n\";","export default \"<h2 id=\\\"java\\\">Java</h2>\\n<h3 id=\\\"java8系列文章\\\">Java8系列文章</h3>\\n<p><a href=\\\"http://www.importnew.com/11908.html\\\">http://www.importnew.com/11908.html</a></p>\\n<h3 id=\\\"牛客-httpservletrequest-getparameter\\\">牛客 HttpServletRequest. getParameter</h3>\\n<p><img src=\\\"https://user-images.githubusercontent.com/23525754/40235928-620a249c-5ade-11e8-9b07-7dd6254daea3.png\\\" alt=\\\"image\\\"></p>\\n<blockquote>\\n<p> 编码格式由浏览器决定，浏览器根据html中指定的编码格式进行编码，tomcat根据指定的格式进行解码, tomcat默认的解码方式是ISO8859-1</p>\\n</blockquote>\\n<h3 id=\\\"java-spliterator\\\">Java Spliterator</h3>\\n<p>参考1: <a href=\\\"https://segmentfault.com/q/1010000007087438\\\">https://segmentfault.com/q/1010000007087438</a>\\n参考2: <a href=\\\"https://blog.csdn.net/lh513828570/article/details/56673804\\\">https://blog.csdn.net/lh513828570/article/details/56673804</a></p>\\n<h3 id=\\\"牛客-integer的拆箱装箱\\\">牛客 Integer的拆箱装箱</h3>\\n<p><img src=\\\"https://user-images.githubusercontent.com/23525754/40236440-22aec3b4-5ae0-11e8-8c36-740673df8f06.png\\\" alt=\\\"image\\\"></p>\\n<p><img src=\\\"https://user-images.githubusercontent.com/23525754/40236420-137a4490-5ae0-11e8-91ae-c75518a5806c.png\\\" alt=\\\"image\\\"></p>\\n<ul>\\n<li>基本数据类型和包装类==比较的时候, 基本数据类型会拆箱, 所以是值比较</li>\\n<li>valueOf()的取值还有IntegerCached的概念, 在[-127,127]之间的数会从池里面找, 有就返回同样的引用</li>\\n</ul>\\n<h3 id=\\\"牛客-getdeclaredmethods的范围\\\">牛客 getDeclaredMethods()的范围</h3>\\n<p><img src=\\\"https://user-images.githubusercontent.com/23525754/40236595-ae2525f0-5ae0-11e8-89bb-c0649f2ba2b1.png\\\" alt=\\\"image\\\"></p>\\n<p>Doc:</p>\\n<blockquote>\\n<p>public Method[] getDeclaredMethods()</p>\\n<p>Returns an array containing Method objects reflecting all the declared methods of the class or interface represented by this Class object, </p>\\n<p>including public, protected, default (package) access, and private methods, <strong>but excluding inherited methods</strong>.</p>\\n</blockquote>\\n<h3 id=\\\"牛客-sleep和wait\\\">牛客 sleep()和wait()</h3>\\n<p><img src=\\\"https://user-images.githubusercontent.com/23525754/40236826-52947b72-5ae1-11e8-8483-c867082dece0.png\\\" alt=\\\"image\\\"></p>\\n<p><strong>Java中的多线程是一种抢占式的机制，而不是分时机制。抢占式的机制是有多个线程处于可运行状态，但是只有一个线程在运行</strong></p>\\n<h5 id=\\\"small_orange_diamond共同点-：\\\">🔸共同点 ：</h5>\\n<ol>\\n<li>他们都是在多线程的环境下，都可以在程序的调用处阻塞指定的毫秒数，并返回。 </li>\\n<li>wait()和sleep()都可以通过interrupt()方法 打断线程的暂停状态 ，从而使线程立刻抛出InterruptedException\\n如果线程A希望立即结束线程B，则可以对线程B对应的Thread实例调用interrupt方法。如果此刻线程B正在wait/sleep/join，则线程B会立刻抛出InterruptedException，在catch() {} 中直接return即可安全地结束线程。 \\n需要注意的是，InterruptedException是线程自己从内部抛出的，并不是interrupt()方法抛出的。对某一线程调用 interrupt()时，如果该线程正在执行普通的代码，那么该线程根本就不会抛出InterruptedException。但是，一旦该线程进入到 wait()/sleep()/join()后，就会立刻抛出InterruptedException 。</li>\\n</ol>\\n<h5 id=\\\"small_orange_diamond不同点-：\\\">🔸不同点 ：</h5>\\n<ol>\\n<li><p>每个对象都有一个锁来控制同步访问。Synchronized关键字可以和对象的锁交互，来实现线程的同步sleep方法没有释放锁，而wait方法释放了锁，使得其他线程可以使用同步控制块或者方法。 </p>\\n</li>\\n<li><p>wait，notify和notifyAll只能在同步控制方法或者同步控制块里面使用，而sleep可以在任何地方使用</p>\\n</li>\\n<li><p>sleep必须捕获异常，而wait，notify和notifyAll不需要捕获异常 </p>\\n</li>\\n<li><p>sleep是线程类（Thread）的方法，导致此线程暂停执行指定时间，给执行机会给其他线程，但是监控状态依然保持，到时后会自动恢复。调用sleep不会释放对象锁。</p>\\n</li>\\n<li><p>wait是Object类的方法，对此对象调用wait方法导致本线程放弃对象锁，进入等待此对象的等待锁定池，只有针对此对象发出notify方法（或notifyAll）后本线程才进入对象锁定池准备获得对象锁进入运行状态。</p>\\n</li>\\n</ol>\\n<h3 id=\\\"java-static方法中的变量是否存在线程安全问题\\\">Java static方法中的变量是否存在线程安全问题</h3>\\n<p>我们在知道, 静态字段(static field)和静态方法(static method)的调用是通过类来调用。静态方法不对特定的实例操作，只能访问静态成员。实例方法可对特定的实例操作，既能访问静态成员，也能访问实例成员。</p>\\n<p>那么,在多线程中使用静态方法是否有线程安全问题?这要看静态方法是是引起线程安全问题要看在静态方法中是否使用了静态成员。</p>\\n<p>因为，在多线程中使用同一个静态方法时，每个线程使用各自的实例字段(instance field)的副本，而共享一个静态字段(static field)。所以说，如果该静态方法不去操作一个静态成员，只在方法内部使用实例字段(instance field)，不会引起安全性问题。但是，如果该静态方法操作了一个静态字段，则需要静态方法中采用互斥访问的方式进行安全处理。</p>\\n<pre><code class=\\\"hljs language-java\\\"><span class=\\\"hljs-keyword\\\">public</span> <span class=\\\"hljs-keyword\\\">class</span> <span class=\\\"hljs-title class_\\\">Test</span>\\n{\\n   <span class=\\\"hljs-keyword\\\">public</span> <span class=\\\"hljs-keyword\\\">static</span> String <span class=\\\"hljs-title function_\\\">hello</span><span class=\\\"hljs-params\\\">(String str)</span>\\n   {\\n       <span class=\\\"hljs-type\\\">String</span> <span class=\\\"hljs-variable\\\">tmp</span> <span class=\\\"hljs-operator\\\">=</span> <span class=\\\"hljs-string\\\">&quot;&quot;</span>;\\n       tmp = tmp + str;\\n       <span class=\\\"hljs-keyword\\\">return</span> tmp;\\n   }\\n}\\n</code></pre>\\n<p>hello方法会不会有多线程安全问题呢？没有！</p>\\n<blockquote>\\n<p>静态方法如果没有使用静态变量，则没有线程安全问题。</p>\\n<p>为什么呢？因为静态方法内声明的变量，每个线程调用时，都会新创建一份，而不会共用一个存储单元。比如这里的tmp,每个线程都会创建自己的一份，因此不会有线程安全问题。</p>\\n<p>注意:静态变量，由于是在类加载时占用一个存储区，每个线程都是共用这个存储区的，所以如果在静态方法里使用了静态变量，这就会有线程安全问题！</p>\\n</blockquote>\\n<h3 id=\\\"java多线程参考\\\">Java多线程参考</h3>\\n<p><a href=\\\"https://www.cnblogs.com/yjd_hycf_space/p/7526608.html\\\">https://www.cnblogs.com/yjd_hycf_space/p/7526608.html</a>\\n<a href=\\\"http://www.importnew.com/21136.html\\\">http://www.importnew.com/21136.html</a>\\n<a href=\\\"http://www.importnew.com/21089.html\\\">http://www.importnew.com/21089.html</a></p>\\n<h3 id=\\\"java字符串压缩\\\">Java字符串压缩</h3>\\n<pre><code class=\\\"hljs language-java\\\"><span class=\\\"hljs-keyword\\\">public</span> <span class=\\\"hljs-keyword\\\">class</span> <span class=\\\"hljs-title class_\\\">StringCompress</span> {\\n    <span class=\\\"hljs-keyword\\\">public</span> <span class=\\\"hljs-keyword\\\">static</span> <span class=\\\"hljs-keyword\\\">final</span> <span class=\\\"hljs-type\\\">byte</span>[] compress(String paramString) {\\n        <span class=\\\"hljs-keyword\\\">if</span> (paramString == <span class=\\\"hljs-literal\\\">null</span>)\\n            <span class=\\\"hljs-keyword\\\">return</span> <span class=\\\"hljs-literal\\\">null</span>;\\n        <span class=\\\"hljs-type\\\">ByteArrayOutputStream</span> <span class=\\\"hljs-variable\\\">byteArrayOutputStream</span> <span class=\\\"hljs-operator\\\">=</span> <span class=\\\"hljs-literal\\\">null</span>;\\n        <span class=\\\"hljs-type\\\">ZipOutputStream</span> <span class=\\\"hljs-variable\\\">zipOutputStream</span> <span class=\\\"hljs-operator\\\">=</span> <span class=\\\"hljs-literal\\\">null</span>;\\n        <span class=\\\"hljs-type\\\">byte</span>[] arrayOfByte;\\n        <span class=\\\"hljs-keyword\\\">try</span> {\\n            byteArrayOutputStream = <span class=\\\"hljs-keyword\\\">new</span> <span class=\\\"hljs-title class_\\\">ByteArrayOutputStream</span>();\\n            zipOutputStream = <span class=\\\"hljs-keyword\\\">new</span> <span class=\\\"hljs-title class_\\\">ZipOutputStream</span>(byteArrayOutputStream);\\n            zipOutputStream.putNextEntry(<span class=\\\"hljs-keyword\\\">new</span> <span class=\\\"hljs-title class_\\\">ZipEntry</span>(<span class=\\\"hljs-string\\\">&quot;0&quot;</span>));\\n            zipOutputStream.write(paramString.getBytes());\\n            zipOutputStream.closeEntry();\\n            arrayOfByte = byteArrayOutputStream.toByteArray();\\n        } <span class=\\\"hljs-keyword\\\">catch</span> (IOException localIOException5) {\\n            arrayOfByte = <span class=\\\"hljs-literal\\\">null</span>;\\n        } <span class=\\\"hljs-keyword\\\">finally</span> {\\n            <span class=\\\"hljs-keyword\\\">if</span> (zipOutputStream != <span class=\\\"hljs-literal\\\">null</span>)\\n                <span class=\\\"hljs-keyword\\\">try</span> {\\n                    zipOutputStream.close();\\n                } <span class=\\\"hljs-keyword\\\">catch</span> (IOException localIOException6) {\\n            }\\n            <span class=\\\"hljs-keyword\\\">if</span> (byteArrayOutputStream != <span class=\\\"hljs-literal\\\">null</span>)\\n                <span class=\\\"hljs-keyword\\\">try</span> {\\n                    byteArrayOutputStream.close();\\n                } <span class=\\\"hljs-keyword\\\">catch</span> (IOException localIOException7) {\\n            }\\n        }\\n        <span class=\\\"hljs-keyword\\\">return</span> arrayOfByte;\\n    }\\n \\n    <span class=\\\"hljs-meta\\\">@SuppressWarnings(&quot;unused&quot;)</span>\\n    <span class=\\\"hljs-keyword\\\">public</span> <span class=\\\"hljs-keyword\\\">static</span> <span class=\\\"hljs-keyword\\\">final</span> String <span class=\\\"hljs-title function_\\\">decompress</span><span class=\\\"hljs-params\\\">(<span class=\\\"hljs-type\\\">byte</span>[] paramArrayOfByte)</span> {\\n        <span class=\\\"hljs-keyword\\\">if</span> (paramArrayOfByte == <span class=\\\"hljs-literal\\\">null</span>)\\n            <span class=\\\"hljs-keyword\\\">return</span> <span class=\\\"hljs-literal\\\">null</span>;\\n        <span class=\\\"hljs-type\\\">ByteArrayOutputStream</span> <span class=\\\"hljs-variable\\\">byteArrayOutputStream</span> <span class=\\\"hljs-operator\\\">=</span> <span class=\\\"hljs-literal\\\">null</span>;\\n        <span class=\\\"hljs-type\\\">ByteArrayInputStream</span> <span class=\\\"hljs-variable\\\">byteArrayInputStream</span> <span class=\\\"hljs-operator\\\">=</span> <span class=\\\"hljs-literal\\\">null</span>;\\n        <span class=\\\"hljs-type\\\">ZipInputStream</span> <span class=\\\"hljs-variable\\\">zipInputStream</span> <span class=\\\"hljs-operator\\\">=</span> <span class=\\\"hljs-literal\\\">null</span>;\\n        String str;\\n        <span class=\\\"hljs-keyword\\\">try</span> {\\n            byteArrayOutputStream = <span class=\\\"hljs-keyword\\\">new</span> <span class=\\\"hljs-title class_\\\">ByteArrayOutputStream</span>();\\n            byteArrayInputStream = <span class=\\\"hljs-keyword\\\">new</span> <span class=\\\"hljs-title class_\\\">ByteArrayInputStream</span>(paramArrayOfByte);\\n            zipInputStream = <span class=\\\"hljs-keyword\\\">new</span> <span class=\\\"hljs-title class_\\\">ZipInputStream</span>(byteArrayInputStream);\\n            <span class=\\\"hljs-type\\\">ZipEntry</span> <span class=\\\"hljs-variable\\\">localZipEntry</span> <span class=\\\"hljs-operator\\\">=</span> zipInputStream.getNextEntry();\\n            <span class=\\\"hljs-type\\\">byte</span>[] arrayOfByte = <span class=\\\"hljs-keyword\\\">new</span> <span class=\\\"hljs-title class_\\\">byte</span>[<span class=\\\"hljs-number\\\">1024</span>];\\n            <span class=\\\"hljs-type\\\">int</span> <span class=\\\"hljs-variable\\\">i</span> <span class=\\\"hljs-operator\\\">=</span> -<span class=\\\"hljs-number\\\">1</span>;\\n            <span class=\\\"hljs-keyword\\\">while</span> ((i = zipInputStream.read(arrayOfByte)) != -<span class=\\\"hljs-number\\\">1</span>)\\n                byteArrayOutputStream.write(arrayOfByte, <span class=\\\"hljs-number\\\">0</span>, i);\\n            str = byteArrayOutputStream.toString();\\n        } <span class=\\\"hljs-keyword\\\">catch</span> (IOException localIOException7) {\\n            str = <span class=\\\"hljs-literal\\\">null</span>;\\n        } <span class=\\\"hljs-keyword\\\">finally</span> {\\n            <span class=\\\"hljs-keyword\\\">if</span> (zipInputStream != <span class=\\\"hljs-literal\\\">null</span>)\\n                <span class=\\\"hljs-keyword\\\">try</span> {\\n                    zipInputStream.close();\\n                } <span class=\\\"hljs-keyword\\\">catch</span> (IOException localIOException8) {\\n                }\\n            <span class=\\\"hljs-keyword\\\">if</span> (byteArrayInputStream != <span class=\\\"hljs-literal\\\">null</span>)\\n                <span class=\\\"hljs-keyword\\\">try</span> {\\n                    byteArrayInputStream.close();\\n                } <span class=\\\"hljs-keyword\\\">catch</span> (IOException localIOException9) {\\n                }\\n            <span class=\\\"hljs-keyword\\\">if</span> (byteArrayOutputStream != <span class=\\\"hljs-literal\\\">null</span>)\\n                <span class=\\\"hljs-keyword\\\">try</span> {\\n                    byteArrayOutputStream.close();\\n                } <span class=\\\"hljs-keyword\\\">catch</span> (IOException localIOException10) {\\n            }\\n        }\\n        <span class=\\\"hljs-keyword\\\">return</span> str;\\n    }\\n}\\n</code></pre>\\n<p>参考：<a href=\\\"https://blog.csdn.net/isea533/article/details/8199848\\\">https://blog.csdn.net/isea533/article/details/8199848</a></p>\\n<h3 id=\\\"servlet和cgi的区别\\\">Servlet和CGI的区别</h3>\\n<h4 id=\\\"cgi-common-gateway-interface-公共网关接口\\\">CGI (Common Gateway Interface 公共网关接口)</h4>\\n<ol>\\n<li><p>定义：</p>\\n<p>CGI(Common Gateway Interface 公共网关接口)是HTTP服务器与你的或其它机器上的程序进行“交谈”的一种工具，其程序须运行在网络服务器上。</p>\\n</li>\\n<li><p>功能：</p>\\n<p>绝大多数的CGI程序被用来解释处理杰自表单的输入信息，并在服 务器产生相应的处理，或将相应的信息反馈给浏览器。CGI程序使 网页具有交互功能。</p>\\n</li>\\n<li><p>运行环境：</p>\\n<p>CGI程序在UNIX操作系统上CERN或NCSA格式的服务器上运行。 在其它操作系统（如：windows NT及windows95等）的服务器上 也广泛地使用CGI程序，同时它也适用于各种类型机器。</p>\\n</li>\\n<li><p>CGI处理步骤：</p>\\n<ol>\\n<li>通过Internet把用户请求送到服务器。</li>\\n<li>服务器接收用户请求并交给CGI程序处理。</li>\\n<li>CGI程序把处理结果传送给服务器。</li>\\n<li>服务器把结果送回到用户。</li>\\n</ol>\\n</li>\\n</ol>\\n<h4 id=\\\"servlet\\\">Servlet</h4>\\n<p>Servlet是一种服务器端的Java应用程序，具有独立于平台和协议的特性,可以生成动态的Web页面。 它担当客户请求（Web浏览器或其他HTTP客户程序）与服务器响应（HTTP服务器上的数据库或应用程序）的中间层。 Servlet是位于Web 服务器内部的服务器端的Java应用程序，与传统的从命令行启动的Java应用程序不同，Servlet由Web服务器进行加载，该Web服务器必须包含支持Servlet的Java虚拟机。</p>\\n<p>工作模式：客户端发送请求至服务器；服务器启动并调用Servlet，Servlet根据客户端请求生成响应内容并将其传给服务器；服务器将响应返回客户端。</p>\\n<h4 id=\\\"java-servlet与cgi的比较\\\">Java Servlet与CGI的比较</h4>\\n<p>与传统的CGI和许多其他类似CGI的技术相比，Java Servlet具有更高的效率，更容易使用，功能更强大，具有更好的可移植性，更节省投资。在未来的技术发展过程中，Servlet有可能彻底取代CGI。</p>\\n<p>在传统的CGI中，每个请求都要启动一个新的进程，如果CGI程序本身的执行时间较短，启动进程所需要的开销很可能反而超过实际执行时间。而在Servlet中，每个请求由一个轻量级的Java线程处理(而不是重量级的操作系统进程)。</p>\\n<p>在传统CGI中，如果有N个并发的对同一CGI程序的请求，则该CGI程序的代码在内存中重复装载了N次；而对于Servlet，处理请求的是N个线程，只需要一份Servlet类代码。在性能优化方面，Servlet也比CGI有着更多的选择。\\n　　* 方便 　\\n　　Servlet提供了大量的实用工具例程，例如自动地解析和解码HTML表单数据、读取和设置HTTP头、处理Cookie、跟踪会话状态等。\\n　　* 功能强大\\n　　在Servlet中，许多使用传统CGI程序很难完成的任务都可以轻松地完成。例如，Servlet能够直接和Web服务器交互，而普通的CGI程序不能。Servlet还能够在各个程序之间共享数据，使得数据库连接池之类的功能很容易实现。\\n　　* 可移植性好\\nServlet用Java编写，Servlet API具有完善的标准。因此，为IPlanet Enterprise Server写的Servlet无需任何实质上的改动即可移植到Apache、Microsoft IIS或者WebStar。几乎所有的主流服务器都直接或通过插件支持Servlet。</p>\\n<p>转自：<a href=\\\"https://www.cnblogs.com/MuyouSome/p/3938203.html\\\">https://www.cnblogs.com/MuyouSome/p/3938203.html</a></p>\\n<h3 id=\\\"java-hashmap好文\\\">Java HashMap好文</h3>\\n<p>源码解析：</p>\\n<ul>\\n<li><a href=\\\"https://www.cnblogs.com/xrq730/p/5030920.html\\\">https://www.cnblogs.com/xrq730/p/5030920.html</a></li>\\n<li><a href=\\\"http://www.importnew.com/20386.html\\\">http://www.importnew.com/20386.html</a></li>\\n</ul>\\n<p>面试总结：</p>\\n<ul>\\n<li><a href=\\\"https://www.cnblogs.com/lchzls/p/6714474.html\\\">https://www.cnblogs.com/lchzls/p/6714474.html</a></li>\\n<li><a href=\\\"https://www.toutiao.com/a6317489506677309698/?tt_from=mobile_qq&amp;utm_campaign=client_share&amp;app=news_article&amp;utm_source=mobile_qq&amp;iid=5056005857&amp;utm_medium=toutiao_ios\\\">https://www.toutiao.com/a6317489506677309698/?tt_from=mobile_qq&amp;utm_campaign=client_share&amp;app=news_article&amp;utm_source=mobile_qq&amp;iid=5056005857&amp;utm_medium=toutiao_ios</a></li>\\n<li><a href=\\\"https://blog.csdn.net/u012512634/article/details/72735183\\\">https://blog.csdn.net/u012512634/article/details/72735183</a></li>\\n</ul>\\n<h3 id=\\\"fastjson-转时间\\\">fastjson 转时间</h3>\\n<p>在field上加注解，比如转ISO格式的时间</p>\\n<pre><code class=\\\"hljs language-java\\\"><span class=\\\"hljs-meta\\\">@JSONField(format=&quot;yyyy-MM-dd&#x27;T&#x27;HH:mm:ss&#x27;Z&#x27;&quot;)</span>\\n</code></pre>\\n<h3 id=\\\"sunmiscunsafe\\\">sun.misc.Unsafe</h3>\\n<ul>\\n<li><a href=\\\"http://mishadoff.com/blog/java-magic-part-4-sun-dot-misc-dot-unsafe/\\\">http://mishadoff.com/blog/java-magic-part-4-sun-dot-misc-dot-unsafe/</a></li>\\n<li><a href=\\\"https://blog.csdn.net/anLA_/article/details/78631026\\\">https://blog.csdn.net/anLA_/article/details/78631026</a></li>\\n<li><a href=\\\"https://blog.csdn.net/lvbaolin123/article/details/80527598\\\">https://blog.csdn.net/lvbaolin123/article/details/80527598</a></li>\\n</ul>\\n<h3 id=\\\"java-string-pool\\\">Java String pool</h3>\\n<p><a href=\\\"https://stackoverflow.com/questions/4918399/where-does-javas-string-constant-pool-live-the-heap-or-the-stack\\\">Where does Java&#39;s String constant pool live, the heap or the stack?</a></p>\\n<h3 id=\\\"java-静态内部类和非静态内部类\\\">Java 静态内部类和非静态内部类</h3>\\n<p><a href=\\\"https://softwareengineering.stackexchange.com/questions/238782/why-prefer-non-static-inner-classes-over-static-ones\\\">Why prefer non-static inner classes over static ones?</a></p>\\n<blockquote>\\n<p>Joshua Bloch in Item 22 of his book &quot;Effective Java Second Edition&quot; tells when to use which kind of nested class and why. There are some quotes below:</p>\\n<p>One common use of a static member class is as a public helper class, useful only in conjunction with its outer class. For example, consider an enum describing the operations supported by a calculator. The Operation enum should be a public static member class of the <code>Calculator</code> class. Clients of <code>Calculator</code> could then refer to operations using names like <code>Calculator.Operation.PLUS</code> and <code>Calculator.Operation.MINUS</code>.</p>\\n<p>One common use of a nonstatic member class is to define an <em>Adapter</em> that allows an instance of the outer class to be viewed as an instance of some unrelated class. For example, implementations of the <code>Map</code> interface typically use nonstatic member classes to implement their <em>collection views</em>, which are returned by <code>Map</code>’s <code>keySet</code>, <code>entrySet</code>, and <code>values</code> methods. Similarly, implementations of the collection interfaces, such as <code>Set</code> and <code>List</code>, typically use nonstatic member classes to implement their iterators:</p>\\n<pre><code>// Typical use of a nonstatic member class\\npublic class MySet&lt;E&gt; extends AbstractSet&lt;E&gt; {\\n    ... // Bulk of the class omitted\\n\\n    public Iterator&lt;E&gt; iterator() {\\n        return new MyIterator();\\n    }\\n\\n    private class MyIterator implements Iterator&lt;E&gt; {\\n        ...\\n    }\\n}\\n</code></pre>\\n<p>If you declare a member class that does not require access to an enclosing instance, <em>always</em> put the <code>static</code> modifier in its declaration, making it a static rather than a nonstatic member class.</p>\\n</blockquote>\\n<h3 id=\\\"bridge-method\\\">bridge method</h3>\\n<ul>\\n<li><a href=\\\"https://cn.aliyun.com/jiaocheng/330720.html\\\">https://cn.aliyun.com/jiaocheng/330720.html</a></li>\\n<li><a href=\\\"https://docs.oracle.com/javase/tutorial/java/generics/bridgeMethods.html#bridgeMethods\\\">https://docs.oracle.com/javase/tutorial/java/generics/bridgeMethods.html#bridgeMethods</a></li>\\n<li><a href=\\\"https://www.cnblogs.com/zsg88/p/7588929.html\\\">https://www.cnblogs.com/zsg88/p/7588929.html</a></li>\\n<li><a href=\\\"https://www.jianshu.com/p/250030ea9b28\\\">https://www.jianshu.com/p/250030ea9b28</a></li>\\n</ul>\\n<h3 id=\\\"finally--return\\\">finally &amp; return</h3>\\n<p>参考：<a href=\\\"https://www.cnblogs.com/lanxuezaipiao/p/3440471.html\\\">https://www.cnblogs.com/lanxuezaipiao/p/3440471.html</a></p>\\n<blockquote>\\n<ol>\\n<li><p><strong>finally块的语句在try或catch中的return语句执行之后返回之前执行</strong></p>\\n</li>\\n<li><p><strong>finally里的修改语句可能影响也可能不影响try或catch中 return已经确定的返回值</strong></p>\\n</li>\\n<li><p><strong>若finally里也有return语句则覆盖try或catch中的return语句直接返回</strong></p>\\n</li>\\n</ol>\\n</blockquote>\\n<h3 id=\\\"动态代理\\\">动态代理</h3>\\n<h4 id=\\\"jdk动态代理\\\">JDK动态代理</h4>\\n<p>机制：<strong>通过接口</strong></p>\\n<p>流程：</p>\\n<ol>\\n<li>被代理类<code>Subject</code>需要实现包含相应需要做代理处理的方法，这些方法来自被代理类实现的<strong>若干接口</strong>；</li>\\n<li>实例化一个<code>Subject</code>对象；</li>\\n<li>实现JDK的<code>InvocationHandler</code>接口，接口中进行业务代理，这部分逻辑在<code>invoke</code>方法中；</li>\\n<li>实例化一个<code>InvocationHandler</code>对象，并绑定<code>Subject</code>实例；</li>\\n<li>使用JDK的<code>Proxy.newProxyInstance(loader, interfaces, handler); </code>方法生成代理类；<ol>\\n<li>JDK动态代理库通过<strong>若干接口</strong>方法名称锁定被代理类的相关方法；</li>\\n<li>JDK动态代理库通过字节码技术动态生成代理类，代理类重新定义了这些接口方法，并且调用<code>handler</code>对象；</li>\\n</ol>\\n</li>\\n</ol>\\n<pre><code class=\\\"hljs language-java\\\"><span class=\\\"hljs-keyword\\\">interface</span> <span class=\\\"hljs-title class_\\\">AEvent</span>{<span class=\\\"hljs-keyword\\\">void</span> <span class=\\\"hljs-title function_\\\">ActionA</span><span class=\\\"hljs-params\\\">()</span>;}\\n<span class=\\\"hljs-comment\\\">//被代理类</span>\\n<span class=\\\"hljs-keyword\\\">interface</span> <span class=\\\"hljs-title class_\\\">BEvent</span>{<span class=\\\"hljs-keyword\\\">void</span> <span class=\\\"hljs-title function_\\\">ActionB</span><span class=\\\"hljs-params\\\">()</span>;}\\n<span class=\\\"hljs-keyword\\\">class</span> <span class=\\\"hljs-title class_\\\">Me</span> <span class=\\\"hljs-keyword\\\">implements</span> <span class=\\\"hljs-title class_\\\">AEvent</span> ,BEvent{\\n    <span class=\\\"hljs-meta\\\">@Override</span>\\n    <span class=\\\"hljs-keyword\\\">public</span> <span class=\\\"hljs-keyword\\\">void</span> <span class=\\\"hljs-title function_\\\">ActionA</span><span class=\\\"hljs-params\\\">()</span> {System.out.println(<span class=\\\"hljs-string\\\">&quot;事件A&quot;</span>);}\\n    <span class=\\\"hljs-meta\\\">@Override</span>\\n    <span class=\\\"hljs-keyword\\\">public</span> <span class=\\\"hljs-keyword\\\">void</span> <span class=\\\"hljs-title function_\\\">ActionB</span><span class=\\\"hljs-params\\\">()</span> {System.out.println(<span class=\\\"hljs-string\\\">&quot;事件B&quot;</span>);}\\n}\\n<span class=\\\"hljs-keyword\\\">class</span> <span class=\\\"hljs-title class_\\\">MyInvocationHandler</span> <span class=\\\"hljs-keyword\\\">implements</span> <span class=\\\"hljs-title class_\\\">InvocationHandler</span>{\\n    Object object;<span class=\\\"hljs-comment\\\">//实现了接口的被代理类的对象的声明 也是我们要代理的真实对象</span>\\n    <span class=\\\"hljs-comment\\\">//给被代理类的对象实例化</span>\\n    <span class=\\\"hljs-comment\\\">//返回代理类对象</span>\\n    <span class=\\\"hljs-keyword\\\">public</span> Object <span class=\\\"hljs-title function_\\\">blind</span><span class=\\\"hljs-params\\\">(Object o)</span>{\\n        object = o;\\n        <span class=\\\"hljs-keyword\\\">return</span> Proxy.newProxyInstance(object.getClass().getClassLoader(),\\n                o.getClass().getInterfaces(),<span class=\\\"hljs-built_in\\\">this</span>);\\n    }\\n    <span class=\\\"hljs-comment\\\">//当通过代理类对象发起对被重写的方法的调用时 都会转化为对如下的invoke方法的调用</span>\\n    <span class=\\\"hljs-meta\\\">@Override</span>\\n    <span class=\\\"hljs-keyword\\\">public</span> Object <span class=\\\"hljs-title function_\\\">invoke</span><span class=\\\"hljs-params\\\">(Object proxy, Method method, Object[] args)</span> <span class=\\\"hljs-keyword\\\">throws</span> Throwable {\\n        <span class=\\\"hljs-keyword\\\">return</span> method.invoke(object, args);\\n    }\\n}\\n\\n<span class=\\\"hljs-keyword\\\">public</span> <span class=\\\"hljs-keyword\\\">class</span> <span class=\\\"hljs-title class_\\\">test_Dynamic_Proxy</span> {\\n    <span class=\\\"hljs-keyword\\\">public</span> <span class=\\\"hljs-keyword\\\">static</span> <span class=\\\"hljs-keyword\\\">void</span> <span class=\\\"hljs-title function_\\\">main</span><span class=\\\"hljs-params\\\">(String[] args)</span> {\\n        <span class=\\\"hljs-comment\\\">//创建一个实现了InvocationHandler方法的接口的类的对象</span>\\n        <span class=\\\"hljs-type\\\">MyInvocationHandler</span> <span class=\\\"hljs-variable\\\">handler</span> <span class=\\\"hljs-operator\\\">=</span> <span class=\\\"hljs-keyword\\\">new</span> <span class=\\\"hljs-title class_\\\">MyInvocationHandler</span>();\\n        <span class=\\\"hljs-comment\\\">//被代理类对象</span>\\n        <span class=\\\"hljs-type\\\">Me</span> <span class=\\\"hljs-variable\\\">me</span> <span class=\\\"hljs-operator\\\">=</span> <span class=\\\"hljs-keyword\\\">new</span> <span class=\\\"hljs-title class_\\\">Me</span>();\\n        <span class=\\\"hljs-comment\\\">//调用blind()方法 动态返回一个同样实现了real所在类实现的接口的Subject代理类的对象</span>\\n        <span class=\\\"hljs-type\\\">Object</span> <span class=\\\"hljs-variable\\\">object</span> <span class=\\\"hljs-operator\\\">=</span> handler.blind(me);\\n        <span class=\\\"hljs-comment\\\">//subject就是代理类的对象</span>\\n        <span class=\\\"hljs-type\\\">AEvent</span> <span class=\\\"hljs-variable\\\">aEvent</span> <span class=\\\"hljs-operator\\\">=</span> (AEvent) object;\\n        aEvent.ActionA();\\n        System.out.println(<span class=\\\"hljs-string\\\">&quot;----------------&quot;</span>);\\n        <span class=\\\"hljs-type\\\">BEvent</span> <span class=\\\"hljs-variable\\\">bEvent</span> <span class=\\\"hljs-operator\\\">=</span> (BEvent) handler.blind(me);\\n        bEvent.ActionB();\\n    }\\n}\\n</code></pre>\\n<h4 id=\\\"cglib动态代理\\\">Cglib动态代理</h4>\\n<p>机制：<strong>通过继承实现</strong></p>\\n<p>流程：</p>\\n<ol>\\n<li>实现<code>MethodInterceptor </code>，在里面的<code>intercept</code>方法进行代理业务；</li>\\n<li>获取Cglib的<code>Enhancer</code>对象，传入<code>SupperClass</code>，指定代理类，和<code>Callback</code>也就是一个<code>MethodInterceptor </code>实例；</li>\\n</ol>\\n<h3 id=\\\"泛型约束和局限性\\\">泛型约束和局限性</h3>\\n<ol>\\n<li><p>不能把基本数据类型当成类型参数，要用包装类；</p>\\n</li>\\n<li><p>运行时类型检查只适用于原视类型：</p>\\n<pre><code class=\\\"hljs language-java\\\"><span class=\\\"hljs-keyword\\\">if</span> (a instanceOf AClass&lt;BClass&gt;) <span class=\\\"hljs-comment\\\">// 错误</span>\\n<span class=\\\"hljs-keyword\\\">if</span> (a instanceOf AClass) <span class=\\\"hljs-comment\\\">// 只能检查原始类型</span>\\n</code></pre>\\n</li>\\n<li><p>不能<code>new</code>参数化类型数组：</p>\\n<pre><code class=\\\"hljs language-java\\\">AClass&lt;BClass&gt;[] arr = <span class=\\\"hljs-keyword\\\">new</span> <span class=\\\"hljs-title class_\\\">AClass</span>&lt;BClass&gt;[<span class=\\\"hljs-number\\\">10</span>];    <span class=\\\"hljs-comment\\\">// 错误</span>\\n</code></pre>\\n<p>非要用数组结构，那就使用<code>ArrayList&lt;AClass&lt;BClass&gt;&gt; al = new ArrayList&lt;&gt;();</code></p>\\n</li>\\n<li><p>但是给参数个数可变的方法传递泛型类型实例：</p>\\n<pre><code class=\\\"hljs language-java\\\"><span class=\\\"hljs-keyword\\\">public</span> <span class=\\\"hljs-keyword\\\">static</span> &lt;T&gt; <span class=\\\"hljs-keyword\\\">void</span> <span class=\\\"hljs-title function_\\\">addAll</span><span class=\\\"hljs-params\\\">(Collection&lt;T&gt; coll, T... ts)</span>\\n</code></pre>\\n<p>但是编译器会发出警告，你可以使用<code>@SuppressWarnings(&quot;unchecked&quot;)</code>来压制它</p>\\n</li>\\n<li><p>不能在静态域或者方法中引用类型变量；</p>\\n<pre><code class=\\\"hljs language-java\\\"><span class=\\\"hljs-keyword\\\">public</span> <span class=\\\"hljs-keyword\\\">class</span> <span class=\\\"hljs-title class_\\\">AClass</span>&lt;T&gt; {\\n    <span class=\\\"hljs-keyword\\\">private</span> <span class=\\\"hljs-keyword\\\">static</span> T instance;\\n    <span class=\\\"hljs-keyword\\\">public</span> <span class=\\\"hljs-keyword\\\">static</span> T <span class=\\\"hljs-title function_\\\">getInstance</span><span class=\\\"hljs-params\\\">()</span> {\\n        <span class=\\\"hljs-keyword\\\">if</span> (instance == <span class=\\\"hljs-literal\\\">null</span>) <span class=\\\"hljs-comment\\\">//...</span>\\n        <span class=\\\"hljs-keyword\\\">return</span> instance;\\n    }\\n}\\n</code></pre>\\n</li>\\n</ol>\\n<h3 id=\\\"classloader\\\">ClassLoader</h3>\\n<p><a href=\\\"https://www.baeldung.com/java-classloaders\\\">https://www.baeldung.com/java-classloaders</a></p>\\n<h4 id=\\\"bootstrap-class-loader\\\"><strong>Bootstrap Class Loader</strong></h4>\\n<p>Java classes are loaded by an instance of <em>java.lang.ClassLoader</em>. However, class loaders are classes themselves. Hence, the question is, who loads the <em>java.lang.ClassLoader</em> itself*?*</p>\\n<p>This is where the bootstrap or primordial class loader comes into the picture.</p>\\n<p>It&#39;s mainly responsible for loading JDK internal classes, typically <em>rt.jar</em> and other core libraries located in <em>$JAVA_HOME/jre/lib directory</em>. Additionally, <strong>Bootstrap class loader serves as a parent of all the other *ClassLoader* instances</strong>.</p>\\n<p><strong>This bootstrap class loader is part of the core JVM and is written in native code</strong> as pointed out in the above example. Different platforms might have different implementations of this particular class loader.</p>\\n<h4 id=\\\"extension-class-loader\\\"><strong>Extension Class Loader</strong></h4>\\n<p>The <strong>extension class loader is a child of the bootstrap class loader and takes care of loading the extensions of the standard core Java classes</strong> so that it&#39;s available to all applications running on the platform.</p>\\n<p>Extension class loader loads from the JDK extensions directory, usually <em>$JAVA_HOME/lib/ext</em> directory or any other directory mentioned in the <em>java.ext.dirs</em> system property.</p>\\n<h4 id=\\\"system-class-loader\\\"><strong>System Class Loader</strong></h4>\\n<p>The system or application class loader, on the other hand, takes care of loading all the application level classes into the JVM. <strong>It loads files found in the classpath environment variable, *-classpath* or *-cp* command line option</strong>. Also, it&#39;s a child of Extensions classloader.</p>\\n<h3 id=\\\"pojo--javabean\\\">POJO &amp; JavaBean</h3>\\n<p>When we talk about a POJO(<strong>“Plain Old Java Object”</strong>), what we&#39;re describing is a straightforward type with no references to any particular frameworks. <strong>A POJO has no naming convention</strong> for our properties and methods.</p>\\n<p><strong>A JavaBean is still a POJO but introduces a strict set of rules around how we implement it:</strong></p>\\n<ul>\\n<li>Access levels – our properties are private and we expose getters and setters</li>\\n<li>Method names – our getters and setters follow the <em>getX</em> and <em>setX</em> convention (in the case of a boolean, <em>isX</em> can be used for a getter)</li>\\n<li>Default Constructor – a no-argument constructor must be present so an instance can be created without providing arguments, for example during deserialization</li>\\n<li>Serializable – implementing the <em>Serializable</em> interface allows us to store the state</li>\\n</ul>\\n<h3 id=\\\"finall-关键字\\\">Finall 关键字</h3>\\n<ul>\\n<li>修饰类：该类不能被继承；</li>\\n<li>修饰方法：该方法不能被重载；</li>\\n<li>修饰变量：该变量引用不能改变，并且必须在声明时就赋值，并且在编译时就已经赋值完毕，先于本类实例的构造方法；</li>\\n<li>修饰方法参数：该参数在改方法内不能被改变引用；</li>\\n</ul>\\n<h3 id=\\\"异常小记\\\">异常小记</h3>\\n<h4 id=\\\"分类\\\">分类</h4>\\n<pre><code class=\\\"hljs language-graph\\\">              ---&gt; Throwable &lt;--- \\n              |    (checked)    |\\n              |                 |\\n              |                 |\\n       --&gt; Exception          Error\\n       |   (checked)       (unchecked)\\n       |\\nRuntimeException\\n  (unchecked)\\n</code></pre>\\n<ol>\\n<li>受检异常</li>\\n<li>非受检异常/运行时异常</li>\\n<li>错误</li>\\n</ol>\\n<h4 id=\\\"受检异常\\\">受检异常</h4>\\n<p>Java编译器要求我们必须处理的异常，要么显式地往上层调用方法抛出该异常，要么必须原地处理（<code>try-catch</code>）</p>\\n<ul>\\n<li><em>IOException</em> – this exception is typically a way to say that <strong>something on the network, filesystem, or database failed</strong>.</li>\\n<li><em>ServletException</em></li>\\n<li><em>ClassNotFoundException</em> - occurs when an application tries to <strong>load a class through its fully-qualified name</strong> and <strong>can not find its definition on the classpath</strong></li>\\n</ul>\\n<h4 id=\\\"运行时异常\\\">运行时异常</h4>\\n<p>运行时异常即不要求我们处理的异常，因此我们可以不用显式地使用<code>try-catch</code>语句去处理他们</p>\\n<ul>\\n<li><em>ArrayIndexOutOfBoundsException</em> – this exception means that we tried to <strong>access a non-existent array index</strong>, like when trying to get index 5 from an array of length 3.</li>\\n<li><em>ClassCastException –</em> this exception means that we tried to perform <strong>an illegal cast</strong>, like trying to convert a <em>String</em> into a <em>List</em>. We can usually avoid it by performing defensive <em>instanceof</em> checks before casting.</li>\\n<li><em>IllegalArgumentException</em> – this exception is a generic way for us to say that one of the provided method or constructor <strong>parameters is invalid</strong>.</li>\\n<li><em>IllegalStateException</em> – This exception is a generic way for us to say that <strong>our internal state</strong>, like the state of our object, <strong>is invalid</strong>.</li>\\n<li><em>NullPointerException</em> – This exception means we tried to <strong>reference a <em>null</em> object</strong>. We can usually avoid it by either performing defensive <em>null</em> checks or by using <em>Optional.</em></li>\\n<li><em>NumberFormatException</em> – This exception means that we tried to <strong>convert a <em>String</em> into a number, but the string contained illegal</strong> characters, like trying to convert “5f3” into a number.</li>\\n</ul>\\n<h4 id=\\\"错误\\\">错误</h4>\\n<p>错误都是非常严重的情况，比如内存泄露、栈溢出等等，而且我们也不会显示地在某个地方处理这些错误，而是希望它们一直往上抛出</p>\\n<ul>\\n<li><em>StackOverflowError –</em> this exception means that the <strong>stack trace is too big</strong>. This can sometimes happen in massive applications; however, it usually means that we have some <strong>infinite recursion</strong> happening in our code.</li>\\n<li><em>NoClassDefFoundError</em> – this exception means that a class failed to load either due to <strong>not being on the classpath</strong> or <strong>due to failure in static initialization</strong>.</li>\\n<li><em>OutOfMemoryError</em> –  this exception means that the JVM doesn&#39;t have any more memory available to allocate for more objects. Sometimes, this is due to a <strong>memory leak</strong>.</li>\\n</ul>\\n<h4 id=\\\"classnotfoundexception--noclassdeffounderror\\\">ClassNotFoundException &amp; NoClassDefFoundError</h4>\\n<p>前者是受检异常，就是在编译时就没找到这个类，压根就没有加载进classpath里；</p>\\n<p>后者是错误，是编译时没问题，运行时由于类在初始化静态内容的时候出错了，所以这个类也压根没被加载进运行时的classpath里；</p>\\n<h3 id=\\\"metaspace--method-area--perm-gen\\\">Metaspace &amp; Method Area &amp; Perm Gen</h3>\\n<p>理一理这三个之间的关系：</p>\\n<ul>\\n<li>在JDK 7之前，方法区是<code>Perm Gen</code>的一部分；</li>\\n<li>在JDK 7之前<code>interned-string</code>也就是平常说的字符串常量池是存储在<code>Perm Gen</code>的，由于<code>Perm Gen</code>的空间很小，所以经常被爆，于是Java 7先把字符串常量池移到了方法区；</li>\\n<li>从JDK7开始<code>Perm Gen</code>的移除工作，贮存在<code>Perm Gen</code>的一部分数据已经转移到了Java Heap或者是Native Heap。但<code>Perm Gen</code>仍然存在于JDK7，并没有完全的移除：符号引用(Symbols)转移到了native heap；字面量(interned strings)转移到了java heap；类的静态变量(class statics)转移到了java heap；剥离到heap区的内容形成了<code>Method Area</code>；</li>\\n<li><code>Perm Gen</code>在JDK8中被完全的移除了；</li>\\n<li>在JDK 8后，classe metadata被存储在叫做<code>Metaspace</code>的native memory，在系统的直接内存中；</li>\\n<li>在JDK 8后，<code>Method Area</code>承担的数据内容可参考：<a href=\\\"https://docs.oracle.com/javase/specs/jvms/se8/html/jvms-2.html#jvms-2.5.4\\\">https://docs.oracle.com/javase/specs/jvms/se8/html/jvms-2.html#jvms-2.5.4</a></li>\\n</ul>\\n\";","export default \"<h2 id=\\\"概念与思考\\\">概念与思考</h2>\\n<h3 id=\\\"关于-ci\\\">关于 CI</h3>\\n<h4 id=\\\"small_blue_diamond示意图\\\">🔹示意图</h4>\\n<p><img src=\\\"https://user-images.githubusercontent.com/23525754/39740876-26eba2da-52ca-11e8-9403-74ce6686407e.png\\\" alt=\\\"image\\\"></p>\\n<blockquote>\\n<p>文章 <a href=\\\"https://www.mindtheproduct.com/2016/02/what-the-hell-are-ci-cd-and-devops-a-cheatsheet-for-the-rest-of-us/\\\">The Product Managers’ Guide to Continuous Delivery and DevOps</a></p>\\n<p>对「持续集成（Continuous Integration）」、「持续交付（Continuous Delivery）」和「持续部署（Continuous Deployment）」这三个概念有很详细的解释。</p>\\n</blockquote>\\n<h3 id=\\\"对iocdi的理解\\\">对IoC/DI的理解</h3>\\n<h4 id=\\\"small_blue_diamondiocinverse--of-control\\\">🔹Ioc—Inverse  of Control</h4>\\n<p><strong>即“控制反转”，不是什么技术，而是一种设计思想</strong>。在Java开发中，<strong>Ioc意味着将你设计好的对象交给容器控制，而不是传统的在你的对象内部直接控制。</strong> </p>\\n<p>深入分析一下：</p>\\n<ul>\\n<li>谁控制谁，控制什么：传统Java SE程序设计，我们直接在对象内部通过new进行创建对象，是程序主动去创建依赖对象；而IoC是有专门一个容器来创建这些对象，即由Ioc容器来控制对 象的创建；<strong>谁控制谁？当然是IoC 容器控制了对象；控制什么？那就是主要控制了外部资源获取（不只是对象包括比如文件等）。</strong></li>\\n<li>为何是反转，哪些方面反转了：有反转就有正转，传统应用程序是由我们自己在对象中主动控制去直接获取依赖对象，也就是正转；而反转则是由容器来帮忙创建及注入依赖对象；为何是反转？<strong>因为由容器帮我们查找及注入依赖对象，对象只是被动的接受依赖对象，所以是反转；哪些方面反转了？依赖对象的获取被反转了。</strong></li>\\n</ul>\\n<p><strong>举例说明</strong></p>\\n<p>“常规的是，我们程序员<strong>手动new</strong>来给程序的<strong>Service对象</strong>提供所<strong>依赖的DAO对象</strong>，而现在是程序通过IoC容器自己提供<strong>DAO对象</strong>给<strong>Service对象</strong>。”</p>\\n<h4 id=\\\"small_blue_diamonddidependency-injection\\\">🔹DI—Dependency Injection</h4>\\n<p><strong>即“依赖注入”</strong>：<strong>组件之间依赖关系</strong>由容器在运行期决定，形象的说，即<strong>由容器动态的将某个依赖关系注入到组件之中</strong>。</p>\\n<p><strong>依赖注入的目的并非为软件系统带来更多功能，而是为了提升组件重用的频率，并为系统搭建一个灵活、可扩展的平台。</strong>通过依赖注入机制，我们只需要通过简单的配置，而无需任何代码就可指定目标需要的资源，完成自身的业务逻辑，而不需要关心具体的资源来自何处，由谁实现。 </p>\\n<p>深入分析一下：</p>\\n<ul>\\n<li>谁依赖于谁：当然是<strong>应用程序依赖于IoC容器</strong>；</li>\\n<li>为什么需要依赖：<strong>应用程序需要IoC容器来提供对象需要的外部资源</strong>；</li>\\n<li>谁注入谁：很明显是<strong>IoC容器注入应用程序某个对象，应用程序依赖的对象</strong>；</li>\\n<li>注入了什么：就是<strong>注入某个对象所需要的外部资源（包括对象、资源、常量数据）</strong>。</li>\\n</ul>\\n<p><strong>举例说明</strong></p>\\n<p>“<strong>Service对象</strong>依赖于<strong>DAO对象</strong>，IoC容器通过<strong>注解和反射机制</strong>来<strong>注入（Injected）</strong>用户在配置文件中配置好的DAO对象到<strong>Service对象</strong>的对应属性中。”</p>\\n<h4 id=\\\"small_blue_diamond两者关系\\\">🔹两者关系</h4>\\n<p><strong>IoC和DI</strong>由什么<strong>关系</strong>呢？其实它们<strong>是同一个概念的不同角度描述</strong>，由于控制反转概念比较含糊（可能只是理解为容器控制对象这一个层面，很难让人想到谁来维护对象关系），所以2004年大师级人物Martin Fowler又给出了一个新的名字：“依赖注入”，相对IoC 而言，“依赖注入”明确描述了“被注入对象依赖IoC容器配置依赖对象”。 </p>\\n<p>我的理解是：<strong>IoC说的是一种程序过程，而DI说的是注入的动作，DI是IoC的一种实现</strong>。</p>\\n<p><a href=\\\"https://blog.csdn.net/qq_22654611/article/details/52606960\\\">参考</a></p>\\n<h3 id=\\\"oop三大特性\\\">OOP三大特性</h3>\\n<h4 id=\\\"small_blue_diamond封装优点：\\\">🔹封装优点：</h4>\\n<ul>\\n<li><strong>安全：</strong> 只能通过规定的方法访问数据 </li>\\n<li><strong>隐藏细节：</strong> 隐藏类的实例细节，方便修改和实现</li>\\n</ul>\\n<h4 id=\\\"small_blue_diamond继承优点：\\\">🔹继承优点：</h4>\\n<ul>\\n<li><strong>代码复用</strong></li>\\n</ul>\\n<h4 id=\\\"small_blue_diamond多态主要表现：\\\">🔹多态主要表现：</h4>\\n<ul>\\n<li><p><strong>引用多态</strong>　　　</p>\\n<ul>\\n<li>父类的引用可以指向本类的对象；</li>\\n<li>父类的引用可以指向子类的对象；</li>\\n</ul>\\n</li>\\n<li><p><strong>方法多态</strong></p>\\n<p>根据上述创建的两个对象：本类对象和子类对象，同样都是父类的引用，当我们指向不同的对象时，它们调用的方法也是多态的。</p>\\n<ul>\\n<li><p>创建本类对象时，调用的方法为本类方法；</p>\\n</li>\\n<li><p>创建子类对象时，调用的方法为子类重写的方法或者继承的方法；</p>\\n</li>\\n</ul>\\n<p><strong>注意： 继承是多态的基础。</strong></p>\\n</li>\\n</ul>\\n<p>参考: <a href=\\\"https://www.cnblogs.com/hysum/p/7100874.html#_label1\\\">https://www.cnblogs.com/hysum/p/7100874.html#_label1</a></p>\\n<h3 id=\\\"文件头魔数-判断文件类型\\\">文件头魔数 判断文件类型</h3>\\n<p><a href=\\\"https://blog.csdn.net/t894690230/article/details/51242110?winzoom=1\\\">https://blog.csdn.net/t894690230/article/details/51242110?winzoom=1</a></p>\\n<p>但是这种方法比较复杂，在帖子里有前辈提到，文本类型是无法通过魔术去判断的，比如html和txt\\n而且同一种文件类型不同的程序去创建，魔数也可能不一样，比如ZIP可能有多种不同的魔数</p>\\n<p>魔数列表参考如下：\\n<a href=\\\"https://www.garykessler.net/library/file_sigs.html\\\">https://www.garykessler.net/library/file_sigs.html</a></p>\\n<h3 id=\\\"微服务集群分布式\\\">微服务/集群/分布式</h3>\\n<h4 id=\\\"small_blue_diamond微服务好文\\\">🔹微服务好文</h4>\\n<p><a href=\\\"https://blog.csdn.net/ityouknow/article/details/80490926\\\">学习springboot看这一篇就够了</a> 看它的微服务启蒙3篇</p>\\n<h4 id=\\\"small_blue_diamond集群和分布式\\\">🔹集群和分布式</h4>\\n<blockquote>\\n<p>小饭店原来只有一个厨师，切菜洗菜备料炒菜全干。后来客人多了，厨房一个厨师忙不过来，又请了个厨师，两个厨师都能炒一样的菜，这两个厨师的关系是集群。为了让厨师专心炒菜，把菜做到极致，又请了个配菜师负责切菜，备菜，备料，厨师和配菜师的关系是分布式，一个配菜师也忙不过来了，又请了个配菜师，两个配菜师关系是集群</p>\\n<p>作者：张鹏飞\\n链接：<a href=\\\"https://www.zhihu.com/question/20004877/answer/112124929\\\">https://www.zhihu.com/question/20004877/answer/112124929</a>\\n来源：知乎\\n著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。</p>\\n</blockquote>\\n<p>参考：\\n<a href=\\\"https://blog.csdn.net/cutesource/article/details/5811914\\\">https://blog.csdn.net/cutesource/article/details/5811914</a>\\n<a href=\\\"https://www.zhihu.com/question/20004877/answer/61025046\\\">https://www.zhihu.com/question/20004877/answer/61025046</a>\\n<a href=\\\"https://www.cnblogs.com/aspirant/p/5697807.html\\\">https://www.cnblogs.com/aspirant/p/5697807.html</a></p>\\n<h3 id=\\\"什么是为什么要tracing？opentracing的入门铺垫\\\">什么是/为什么要Tracing？Opentracing的入门铺垫</h3>\\n<p><img src=\\\"https://user-images.githubusercontent.com/23525754/46987507-0e617d80-d127-11e8-86b6-ba3a9ccd8f36.png\\\" alt=\\\"image\\\"></p>\\n<p>好文：<a href=\\\"https://yq.aliyun.com/articles/514488\\\">https://yq.aliyun.com/articles/514488</a></p>\\n<h4 id=\\\"small_blue_diamond这个gitbook爆炸推【opentracing的中文文档翻译】：\\\">🔹这个Gitbook爆炸推【Opentracing的中文文档翻译】：</h4>\\n<p><a href=\\\"https://wu-sheng.gitbooks.io/opentracing-io/content/\\\">https://wu-sheng.gitbooks.io/opentracing-io/content/</a></p>\\n<p>Tutorials:</p>\\n<p><a href=\\\"https://github.com/yurishkuro/opentracing-tutorial/tree/master/java\\\">https://github.com/yurishkuro/opentracing-tutorial/tree/master/java</a></p>\\n<h3 id=\\\"什么是为什么要devops？\\\">什么是/为什么要DevOps？</h3>\\n<p><img src=\\\"https://user-images.githubusercontent.com/23525754/46988029-4b2e7400-d129-11e8-943c-81b28b5ac5ec.png\\\" alt=\\\"image\\\"></p>\\n<p><a href=\\\"https://www.cnblogs.com/liufei1983/p/7152013.html\\\">https://www.cnblogs.com/liufei1983/p/7152013.html</a></p>\\n<h3 id=\\\"k8s\\\">k8s</h3>\\n<h4 id=\\\"small_blue_diamond好文\\\">🔹好文</h4>\\n<ul>\\n<li>概念：<a href=\\\"http://www.dockone.io/article/8341?cmd=redirect&amp;arubalp=12345\\\">http://www.dockone.io/article/8341?cmd=redirect&amp;arubalp=12345</a></li>\\n<li>简要介绍：<a href=\\\"http://www.dockone.io/article/8328\\\">http://www.dockone.io/article/8328</a></li>\\n<li>10分钟核心概念了解：<a href=\\\"http://www.dockone.io/article/932\\\">http://www.dockone.io/article/932</a></li>\\n</ul>\\n<h4 id=\\\"small_blue_diamond中文文档\\\">🔹中文文档</h4>\\n<ul>\\n<li>设计理念（概念介绍）：<a href=\\\"http://docs.kubernetes.org.cn/249.html\\\">http://docs.kubernetes.org.cn/249.html</a></li>\\n</ul>\\n<h4 id=\\\"small_blue_diamond配置\\\">🔹配置</h4>\\n<ul>\\n<li>k8s的Dashboard：<a href=\\\"http://blog.51cto.com/ylw6006/2113542\\\">http://blog.51cto.com/ylw6006/2113542</a></li>\\n<li>yaml：<ul>\\n<li>sample: <a href=\\\"https://www.mirantis.com/blog/introduction-to-yaml-creating-a-kubernetes-deployment/\\\">https://www.mirantis.com/blog/introduction-to-yaml-creating-a-kubernetes-deployment/</a></li>\\n<li>offical reference: <a href=\\\"https://kubernetes.io/docs/reference/\\\">https://kubernetes.io/docs/reference/</a> see the api</li>\\n</ul>\\n</li>\\n</ul>\\n<h3 id=\\\"docker\\\">docker</h3>\\n<p>介绍与入门：<a href=\\\"http://www.dockone.io/article/8350\\\">http://www.dockone.io/article/8350</a></p>\\n<h3 id=\\\"grpc--protobuf--swagger\\\">gRPC &amp; protobuf &amp; Swagger</h3>\\n<ul>\\n<li><a href=\\\"https://segmentfault.com/a/1190000013513469\\\">Grpc+Grpc Gateway实践三 Swagger了解一下</a></li>\\n<li><a href=\\\"https://www.cnblogs.com/luoxn28/p/5303517.html\\\">google protobuf安装与使用</a></li>\\n<li><a href=\\\"https://github.com/protocolbuffers/protobuf\\\">protobuf</a></li>\\n<li><a href=\\\"https://www.cnblogs.com/andyidea/archive/2017/03/10/6529900.html\\\">grpc-gateway：grpc转换为http协议对外提供服务</a></li>\\n</ul>\\n<h3 id=\\\"graphql-一种用于-api-的查询语言\\\">GraphQL 一种用于 API 的查询语言</h3>\\n<blockquote>\\n<p>GraphQL 既是一种用于 API 的查询语言也是一个满足你数据查询的运行时。 </p>\\n<p>GraphQL 对你的 API 中的数据提供了一套易于理解的完整描述，使得客户端能够准确地获得它需要的数据，而且没有任何冗余，也让 API 更容易地随着时间推移而演进，还能用于构建强大的开发者工具。</p>\\n</blockquote>\\n<p>中文网 : <a href=\\\"http://graphql.cn/\\\">官网</a>\\n引子 : <a href=\\\"https://segmentfault.com/a/1190000006132986\\\">segmentfault</a>\\n知乎专栏 : <a href=\\\"https://zhuanlan.zhihu.com/p/28077095\\\">面向未来的API —— GitHub GraphQL API 使用介绍</a></p>\\n<blockquote>\\n<p>2018年11月16日 10点04分\\n要构建一个graphql需要的成本太大了 还不如restful来的快</p>\\n</blockquote>\\n<h3 id=\\\"protobuf\\\">Protobuf</h3>\\n<h4 id=\\\"what-are-protocol-buffers\\\">What are protocol buffers?</h4>\\n<p>Protocol buffers are a flexible, efficient, automated mechanism for serializing structured data – think XML, but smaller, faster, and simpler. You define how you want your data to be structured once, then you can use special generated source code to easily write and read your structured data to and from a variety of data streams and using a variety of languages. You can even update your data structure without breaking deployed programs that are compiled against the &quot;old&quot; format.</p>\\n<h4 id=\\\"why-not-just-use-xml\\\">Why not just use XML?</h4>\\n<p>Protocol buffers have many advantages over XML for serializing structured data. Protocol buffers:</p>\\n<ul>\\n<li>are simpler</li>\\n<li>are 3 to 10 times smaller</li>\\n<li>are 20 to 100 times faster</li>\\n<li>are less ambiguous</li>\\n<li>generate data access classes that are easier to use programmatically</li>\\n</ul>\\n<h4 id=\\\"references\\\">References</h4>\\n<ul>\\n<li><a href=\\\"https://www.jianshu.com/p/a24c88c0526a\\\">深入Protobuf</a></li>\\n<li><a href=\\\"https://www.jianshu.com/p/b4b51b99e218\\\">ProtoBuf试用与JSON的比较</a></li>\\n<li><a href=\\\"https://mp.weixin.qq.com/s/yiAhQddl42eGSnM6XpkNZw\\\">在python中使用ProtocolBuffers</a></li>\\n<li><a href=\\\"https://developers.google.com/protocol-buffers/docs/overview\\\">Google Docs</a></li>\\n</ul>\\n<h3 id=\\\"clu--tui\\\">CLU &amp; TUI?</h3>\\n<h4 id=\\\"command-line-utilities\\\">Command-line Utilities</h4>\\n<ul>\\n<li>Accept arguments at invocation, execute, and terminate</li>\\n<li>Examples:<code>ls</code>,<code>grep</code>,<code>git</code></li>\\n<li>Python&#39;s built-in argparse module or Click have this well covered</li>\\n</ul>\\n<h4 id=\\\"text-user-interfaces\\\">Text User Interfaces</h4>\\n<ul>\\n<li>Full-screen applications more like a GUI but in a terminal</li>\\n<li>Examples: <code>vim</code>, <code>emacs</code>, <code>top</code></li>\\n<li>Python&#39;s built-in curses module can be used for this.</li>\\n</ul>\\n<h4 id=\\\"python-tui-libaraies\\\">Python TUI Libaraies</h4>\\n<ul>\\n<li><a href=\\\"https://python-prompt-toolkit.readthedocs.io/en/stable/index.html\\\">Python Prompt ToolKit</a></li>\\n<li><a href=\\\"https://github.com/peterbrittain/asciimatics\\\">asciimatics</a></li>\\n<li><a href=\\\"http://urwid.org/index.html#\\\">Urwid</a></li>\\n</ul>\\n<h3 id=\\\"github\\\">Github</h3>\\n<h4 id=\\\"small_blue_diamond科学获取资源\\\">🔹科学获取资源</h4>\\n<p>1. \\n   在 <a href=\\\"https://site.ip138.com/raw.Githubusercontent.com/\\\">https://site.ip138.com/raw.Githubusercontent.com/</a> 输入raw.githubusercontent.com查询IP地址</p>\\n<p>2. \\n   修改hosts Ubuntu，CentOS及macOS直接在终端输入</p>\\n<pre><code class=\\\"hljs language-bash\\\">sudo vi /etc/hosts\\n</code></pre>\\n<ol start=\\\"3\\\">\\n<li>或者直接使用项目<a href=\\\"https://github.com/521xueweihan/GitHub520\\\">GitHub520</a>，去修改hosts文件</li>\\n</ol>\\n<h3 id=\\\"yarn\\\">Yarn</h3>\\n<h4 id=\\\"设置镜像\\\">设置镜像</h4>\\n<pre><code class=\\\"hljs language-bash\\\">yarn config <span class=\\\"hljs-built_in\\\">set</span> registry https://registry.npm.taobao.org\\n<span class=\\\"hljs-comment\\\"># electron</span>\\nyarn config <span class=\\\"hljs-built_in\\\">set</span> electron_mirror https://npm.taobao.org/mirrors/electron/\\n</code></pre>\\n<h4 id=\\\"让nodejs能够引用yarn的全局模块\\\">让nodejs能够引用yarn的全局模块</h4>\\n<pre><code class=\\\"hljs language-bash\\\"><span class=\\\"hljs-comment\\\"># 在有效的rc文件下</span>\\n<span class=\\\"hljs-built_in\\\">export</span> PATH=<span class=\\\"hljs-string\\\">&quot;<span class=\\\"hljs-variable\\\">$HOME</span>/.yarn/bin:<span class=\\\"hljs-variable\\\">$HOME</span>/.config/yarn/global/node_modules/.bin:<span class=\\\"hljs-variable\\\">$PATH</span>&quot;</span>\\n<span class=\\\"hljs-built_in\\\">export</span> NODE_PATH=<span class=\\\"hljs-string\\\">&quot;<span class=\\\"hljs-variable\\\">$PATH</span>&quot;</span>\\n</code></pre>\\n<h3 id=\\\"项目已知风险的状态与管理\\\">项目已知风险的状态与管理</h3>\\n<h4 id=\\\"对于小项目小团队\\\">对于小项目/小团队</h4>\\n<p>涉及人员：</p>\\n<ul>\\n<li>风险处理方——一线处理风险；</li>\\n<li>风险处理监测方——对处理方的处理过程、结果进行监测；</li>\\n<li>风险负责方——确立风险立项，负责风险管理与处理流程；</li>\\n</ul>\\n<p>风险状态（3种）：</p>\\n<ol>\\n<li><p><strong>任务期内，有X%概率发生，还未发生</strong>——由风险责任方：立项，规划方案，划配资源；</p>\\n</li>\\n<li><p><strong>任务期内，发生</strong>——由风险责任方：启用方案，资源；</p>\\n</li>\\n<li><p><strong>任务期后，仍未发生，标记过期</strong>——由风险处理方独自并同风险处理监测方：双方验收，使失效；</p>\\n<p>失效意味着该风险已经被认为消除或者不会发生，即使客观上该风险再次发生了，也将被认为是新的而未被立项的风险；</p>\\n</li>\\n</ol>\\n<h4 id=\\\"对于大项目大团队\\\">对于大项目/大团队</h4>\\n<p>涉及人员：</p>\\n<ul>\\n<li>原风险处理方——一线处理风险；</li>\\n<li>原风险处理监测方——对处理方的处理过程、结果进行监测；</li>\\n<li>原风险负责方——确立风险立项，负责风险管理与处理流程；</li>\\n<li>时任风险处理方——同；</li>\\n<li>时任风险处理监测方——同；</li>\\n<li>时任风险负责方——同；</li>\\n</ul>\\n<p>风险状态（4种）：</p>\\n<ol>\\n<li><p><strong>任务期内，有X%概率发生，还未发生</strong>——由原风险责任方：立项，规划方案，划配资源；</p>\\n</li>\\n<li><p><strong>任务期内，发生</strong>——由原风险责任方：启用方案，资源；</p>\\n</li>\\n<li><p><strong>任务期后，仍未发生，标记进入例检期</strong>——由原风险处理方并同原风险处理监测方：双方检测，使进入例检；</p>\\n<ul>\\n<li>原风险处理方同原风险处理监测方需规划例检方案；</li>\\n<li>例检意味着该风险即使在风险立项的任务期结束后，也需要例行检查，检查周期可以大于一个任务期，例如3个任务期检查一次；检查周期可以不固定，可以是不定时周期检查，也可以临时抽检；</li>\\n<li>例检无视人员变动，原人员离职就分配新人员时任；</li>\\n</ul>\\n</li>\\n<li><p><strong>例检期内，N次例检后仍未发生，标记消除</strong>——由时任风险处理方，时任风险处理监测方，时任风险责任方：三方共同验收，使失效；</p>\\n</li>\\n</ol>\\n\";","export default \"<h2 id=\\\"ece\\\">ECE</h2>\\n<h3 id=\\\"vhdl\\\">VHDL</h3>\\n<h4 id=\\\"collection\\\">Collection</h4>\\n<ol>\\n<li><a href=\\\"https://www.nandland.com/vhdl/tips/tip-convert-numeric-std-logic-vector-to-integer.html#Numeric-Unsigned-To-Signed\\\">Examples of VHDL Conversions</a></li>\\n<li><a href=\\\"https://www.cse.usf.edu/~haozheng/teach/cda4253/doc/vhdl-stmt.pdf\\\">SEQUENTIAL AND CONCURRENT STATEMENTS IN THE VHDL LANGUAGE</a></li>\\n<li><a href=\\\"https://www.cse.usf.edu/~haozheng/teach/cda4253/\\\">FPGA System Design from USF</a></li>\\n<li><a href=\\\"https://www.nandland.com/vhdl/examples/example-configuration-vhdl.html\\\">VHDL Configuration Example</a></li>\\n<li><a href=\\\"https://www.csee.umbc.edu/portal/help/VHDL/packages/std_logic_1164.vhd\\\">Package STD_LOGIC_1164</a></li>\\n<li><a href=\\\"https://www.csee.umbc.edu/portal/help/VHDL/numeric_std.vhdl\\\">Package numeric_std</a></li>\\n<li><a href=\\\"https://stackoverflow.com/questions/26288447/using-entities-from-another-file-in-vhdl\\\">Using entities from another file in VHDL</a></li>\\n<li><a href=\\\"https://stackoverflow.com/questions/41661495/use-package-in-ghdl\\\">use package in ghdl</a></li>\\n</ol>\\n<h4 id=\\\"code\\\">Code</h4>\\n<ol>\\n<li><a href=\\\"https://stackoverflow.com/questions/35817471/vhdl-integer-to-string\\\">VHDL integer to string</a></li>\\n<li><a href=\\\"https://www.youtube.com/watch?v=BlDoRVJ8bAE\\\">How to print VHDL signal and variables to the simulator console</a></li>\\n<li><a href=\\\"https://www.ics.uci.edu/~jmoorkan/vhdlref/assert.html\\\">vhdl assert</a></li>\\n<li><a href=\\\"https://stackoverflow.com/questions/59520632/how-do-i-use-assert-in-vhdl-correctly\\\">How do I use assert in VHDL correctly?</a></li>\\n<li><a href=\\\"https://stackoverflow.com/questions/32927663/how-to-make-startup-process-in-vhdl\\\">How to make startup process in VHDL</a></li>\\n<li><a href=\\\"https://stackoverflow.com/questions/20428277/twos-complement-vhdl\\\">Two&#39;s complement VHDL</a></li>\\n</ol>\\n<h4 id=\\\"implementation\\\">Implementation</h4>\\n<ol>\\n<li><a href=\\\"https://www.intel.com/content/www/us/en/programmable/quartushelp/13.0/mergedProjects/hdl/vhdl/vhdl_pro_registers.htm\\\">register</a></li>\\n</ol>\\n<h4 id=\\\"simulation\\\">Simulation</h4>\\n<ol>\\n<li><a href=\\\"https://mlg556.github.io/vhdl/2019/02/01/vhdl-sim-workflow-in-macos.html\\\">sim on mac 1</a></li>\\n<li><a href=\\\"https://peterbonnesoeur.medium.com/vhdl-on-your-mac-264ff6cc0600\\\">sim on mac 2</a></li>\\n</ol>\\n<h3 id=\\\"digital-electronics\\\">Digital Electronics</h3>\\n<p>Youtube</p>\\n<p><a href=\\\"https://www.youtube.com/watch?v=RO5alU6PpSU\\\">karnaugh map (k-map)</a></p>\\n\";","export default \"<h3 id=\\\"fe-engineering-related\\\">FE Engineering Related</h3>\\n<hr>\\n<h3 id=\\\"prettier\\\">Prettier</h3>\\n<h4 id=\\\"setting-up-on-vscode\\\">Setting up on vscode</h4>\\n<ol>\\n<li><p>vscode settings:</p>\\n<pre><code class=\\\"hljs language-javascript\\\">{\\n    <span class=\\\"hljs-string\\\">&quot;editor.formatOnSave&quot;</span>: <span class=\\\"hljs-literal\\\">true</span>,\\n    <span class=\\\"hljs-string\\\">&quot;editor.defaultFormatter&quot;</span>: <span class=\\\"hljs-string\\\">&quot;esbenp.prettier-vscode&quot;</span>,\\n}\\n</code></pre>\\n</li>\\n<li><p>Install extension</p>\\n</li>\\n<li><p>Configurations</p>\\n<p><a href=\\\"https://prettier.io/docs/en/options.html\\\">https://prettier.io/docs/en/options.html</a></p>\\n<p>e.g</p>\\n<pre><code class=\\\"hljs language-javascript\\\">{\\n  <span class=\\\"hljs-string\\\">&quot;singleQuote&quot;</span>: <span class=\\\"hljs-literal\\\">true</span>,\\n  <span class=\\\"hljs-string\\\">&quot;arrowParens&quot;</span>: <span class=\\\"hljs-string\\\">&quot;avoid&quot;</span>\\n}\\n</code></pre>\\n</li>\\n</ol>\\n\";","export default \"<h2 id=\\\"vue\\\">Vue</h2>\\n<h3 id=\\\"vue技巧\\\">Vue技巧</h3>\\n<ol>\\n<li><p><a href=\\\"https://juejin.cn/post/6951540864787152927\\\">用了很多动效，介绍 4个很 Nice 的 Vue 路由过渡动效！</a></p>\\n<p>t ransition得用这样的状态</p>\\n<pre><code class=\\\"hljs language-html\\\"><span class=\\\"hljs-tag\\\">&lt;<span class=\\\"hljs-name\\\">transition</span> <span class=\\\"hljs-attr\\\">name</span>=<span class=\\\"hljs-string\\\">&quot;slide-fade&quot;</span> <span class=\\\"hljs-attr\\\">mode</span>=<span class=\\\"hljs-string\\\">&quot;out-in&quot;</span>&gt;</span>\\n  <span class=\\\"hljs-tag\\\">&lt;<span class=\\\"hljs-name\\\">keep-alive</span>&gt;</span>\\n      <span class=\\\"hljs-tag\\\">&lt;<span class=\\\"hljs-name\\\">router-view</span>&gt;</span><span class=\\\"hljs-tag\\\">&lt;/<span class=\\\"hljs-name\\\">router-view</span>&gt;</span>\\n    <span class=\\\"hljs-tag\\\">&lt;/<span class=\\\"hljs-name\\\">keep-alive</span>&gt;</span>\\n<span class=\\\"hljs-tag\\\">&lt;/<span class=\\\"hljs-name\\\">transition</span>&gt;</span>\\n</code></pre>\\n<p>css得用enter</p>\\n<pre><code class=\\\"hljs language-css\\\"><span class=\\\"hljs-selector-class\\\">.fade-enter-active</span>,\\n<span class=\\\"hljs-selector-class\\\">.fade-leave-active</span> {\\n  <span class=\\\"hljs-attribute\\\">transition</span>: opacity <span class=\\\"hljs-number\\\">0.3s</span>;\\n}\\n\\n<span class=\\\"hljs-selector-class\\\">.fade-enter</span>,\\n<span class=\\\"hljs-selector-class\\\">.fade-leave-to</span> {\\n  <span class=\\\"hljs-attribute\\\">opacity</span>: <span class=\\\"hljs-number\\\">0</span>;\\n}\\n\\n<span class=\\\"hljs-selector-class\\\">.slide-fade-enter-active</span> {\\n  <span class=\\\"hljs-attribute\\\">transition</span>: all <span class=\\\"hljs-number\\\">0.3s</span> ease;\\n}\\n<span class=\\\"hljs-selector-class\\\">.slide-fade-leave-active</span> {\\n  <span class=\\\"hljs-attribute\\\">transition</span>: all <span class=\\\"hljs-number\\\">0.3s</span> ease;\\n}\\n<span class=\\\"hljs-selector-class\\\">.slide-fade-enter</span>, <span class=\\\"hljs-selector-class\\\">.slide-fade-leave-to</span>\\n<span class=\\\"hljs-comment\\\">/* .slide-fade-leave-active for below version 2.1.8 */</span> {\\n  <span class=\\\"hljs-attribute\\\">transform</span>: <span class=\\\"hljs-built_in\\\">translateX</span>(<span class=\\\"hljs-number\\\">10px</span>);\\n  <span class=\\\"hljs-attribute\\\">opacity</span>: <span class=\\\"hljs-number\\\">0</span>;\\n}\\n</code></pre>\\n</li>\\n</ol>\\n<h4 id=\\\"vue3-troubleshoot\\\">Vue3 Troubleshoot</h4>\\n<ol>\\n<li><a href=\\\"https://stackoverflow.com/questions/62023604/where-to-find-or-how-to-set-htmlwebpackplugin-options-title-in-project-created-w\\\">where to find or how to set htmlWebpackPlugin.options.title in project created with vue cli 3?</a></li>\\n<li><a href=\\\"https://github.com/Yatoo2018/webpack-chain/tree/zh-cmn-Hans\\\">webpack-chain示例</a></li>\\n</ol>\\n<h3 id=\\\"vue3动态渲染\\\">Vue3动态渲染</h3>\\n<pre><code class=\\\"hljs language-js\\\">&lt;script&gt;\\n<span class=\\\"hljs-comment\\\">/* eslint-disable no-unused-vars */</span>\\n<span class=\\\"hljs-keyword\\\">import</span> imgRouter <span class=\\\"hljs-keyword\\\">from</span> <span class=\\\"hljs-string\\\">&quot;@/plugins/img-router.js&quot;</span>;\\n<span class=\\\"hljs-keyword\\\">import</span> { h, createApp } <span class=\\\"hljs-keyword\\\">from</span> <span class=\\\"hljs-string\\\">&quot;vue&quot;</span>;\\n<span class=\\\"hljs-keyword\\\">import</span> { NImage } <span class=\\\"hljs-keyword\\\">from</span> <span class=\\\"hljs-string\\\">&quot;naive-ui&quot;</span>;\\n\\n<span class=\\\"hljs-keyword\\\">export</span> <span class=\\\"hljs-keyword\\\">default</span> {\\n  <span class=\\\"hljs-attr\\\">components</span>: {},\\n  <span class=\\\"hljs-title function_\\\">render</span>(<span class=\\\"hljs-params\\\"></span>) {\\n    <span class=\\\"hljs-keyword\\\">return</span> <span class=\\\"hljs-title function_\\\">h</span>(<span class=\\\"hljs-string\\\">&quot;div&quot;</span>, {\\n      <span class=\\\"hljs-attr\\\">id</span>: <span class=\\\"hljs-string\\\">&quot;md&quot;</span>,\\n      <span class=\\\"hljs-attr\\\">class</span>: <span class=\\\"hljs-variable language_\\\">this</span>.<span class=\\\"hljs-property\\\">mdClass</span>,\\n      <span class=\\\"hljs-attr\\\">key</span>: <span class=\\\"hljs-variable language_\\\">this</span>.<span class=\\\"hljs-property\\\">key</span>,\\n    });\\n  },\\n  <span class=\\\"hljs-attr\\\">props</span>: [<span class=\\\"hljs-string\\\">&quot;content&quot;</span>, <span class=\\\"hljs-string\\\">&quot;class&quot;</span>, <span class=\\\"hljs-string\\\">&quot;key&quot;</span>],\\n  <span class=\\\"hljs-attr\\\">mounted</span>: <span class=\\\"hljs-keyword\\\">function</span> (<span class=\\\"hljs-params\\\"></span>) {\\n    <span class=\\\"hljs-variable language_\\\">this</span>.<span class=\\\"hljs-title function_\\\">renderMd</span>(<span class=\\\"hljs-variable language_\\\">this</span>.<span class=\\\"hljs-property\\\">content</span>);\\n  },\\n  <span class=\\\"hljs-attr\\\">watch</span>: {\\n    <span class=\\\"hljs-comment\\\">// when the content is load</span>\\n    <span class=\\\"hljs-attr\\\">content</span>: <span class=\\\"hljs-keyword\\\">function</span> (<span class=\\\"hljs-params\\\">nV</span>) {\\n      <span class=\\\"hljs-variable language_\\\">this</span>.<span class=\\\"hljs-title function_\\\">renderMd</span>(nV);\\n    },\\n  },\\n  <span class=\\\"hljs-attr\\\">computed</span>: {\\n    <span class=\\\"hljs-attr\\\">mdClass</span>: <span class=\\\"hljs-keyword\\\">function</span> (<span class=\\\"hljs-params\\\"></span>) {\\n      <span class=\\\"hljs-keyword\\\">if</span> (<span class=\\\"hljs-variable language_\\\">this</span>.<span class=\\\"hljs-property\\\">class</span> !== <span class=\\\"hljs-literal\\\">null</span> &amp;&amp; <span class=\\\"hljs-variable language_\\\">this</span>.<span class=\\\"hljs-property\\\">class</span> !== <span class=\\\"hljs-literal\\\">undefined</span>) {\\n        <span class=\\\"hljs-keyword\\\">return</span> <span class=\\\"hljs-variable language_\\\">this</span>.<span class=\\\"hljs-property\\\">class</span>;\\n      }\\n      <span class=\\\"hljs-keyword\\\">return</span> <span class=\\\"hljs-string\\\">&quot;article markdown-body editormd-html-preview animate__animated animate__fadeIn&quot;</span>;\\n    },\\n  },\\n  <span class=\\\"hljs-attr\\\">methods</span>: {\\n    <span class=\\\"hljs-title function_\\\">imgReplacement</span>(<span class=\\\"hljs-params\\\">innerHTML</span>) {\\n      innerHTML = innerHTML.<span class=\\\"hljs-title function_\\\">replaceAll</span>(<span class=\\\"hljs-string\\\">&quot;&lt;img&quot;</span>, <span class=\\\"hljs-string\\\">&quot;&lt;n-image&quot;</span>);\\n      <span class=\\\"hljs-keyword\\\">var</span> unhandleImageTagStart = innerHTML.<span class=\\\"hljs-title function_\\\">indexOf</span>(<span class=\\\"hljs-string\\\">&quot;&lt;n-image&quot;</span>);\\n      <span class=\\\"hljs-keyword\\\">const</span> unhandleImageTagStringList = [];\\n      <span class=\\\"hljs-keyword\\\">while</span> (unhandleImageTagStart !== -<span class=\\\"hljs-number\\\">1</span>) {\\n        <span class=\\\"hljs-keyword\\\">var</span> unhandleImageTagEnd = innerHTML.<span class=\\\"hljs-title function_\\\">indexOf</span>(\\n          <span class=\\\"hljs-string\\\">&#x27;&quot;&gt;&#x27;</span>,\\n          unhandleImageTagStart + <span class=\\\"hljs-number\\\">8</span>\\n        );\\n        unhandleImageTagStringList.<span class=\\\"hljs-title function_\\\">push</span>(\\n          innerHTML.<span class=\\\"hljs-title function_\\\">substring</span>(unhandleImageTagStart, unhandleImageTagEnd + <span class=\\\"hljs-number\\\">2</span>)\\n        );\\n        unhandleImageTagStart = innerHTML.<span class=\\\"hljs-title function_\\\">indexOf</span>(\\n          <span class=\\\"hljs-string\\\">&quot;&lt;n-image&quot;</span>,\\n          unhandleImageTagEnd + <span class=\\\"hljs-number\\\">2</span>\\n        );\\n      }\\n      <span class=\\\"hljs-keyword\\\">for</span> (<span class=\\\"hljs-keyword\\\">let</span> item <span class=\\\"hljs-keyword\\\">of</span> unhandleImageTagStringList) {\\n        innerHTML = innerHTML.<span class=\\\"hljs-title function_\\\">replaceAll</span>(\\n          item,\\n          item.<span class=\\\"hljs-title function_\\\">substring</span>(<span class=\\\"hljs-number\\\">0</span>, item.<span class=\\\"hljs-property\\\">length</span> - <span class=\\\"hljs-number\\\">1</span>) + <span class=\\\"hljs-string\\\">&quot;/&gt;&quot;</span>\\n        );\\n      }\\n      <span class=\\\"hljs-keyword\\\">return</span> innerHTML;\\n    },\\n    <span class=\\\"hljs-title function_\\\">renderMd</span>(<span class=\\\"hljs-params\\\">c</span>) {\\n      <span class=\\\"hljs-keyword\\\">if</span> (c === <span class=\\\"hljs-literal\\\">null</span>) {\\n        <span class=\\\"hljs-keyword\\\">return</span>;\\n      }\\n      <span class=\\\"hljs-comment\\\">// pre route the img src before they actually render into the real dom</span>\\n      <span class=\\\"hljs-keyword\\\">const</span> node = <span class=\\\"hljs-keyword\\\">new</span> <span class=\\\"hljs-title class_\\\">DOMParser</span>().<span class=\\\"hljs-title function_\\\">parseFromString</span>(c, <span class=\\\"hljs-string\\\">&quot;text/html&quot;</span>);\\n      imgRouter.<span class=\\\"hljs-title function_\\\">routeElements</span>(node.<span class=\\\"hljs-title function_\\\">getElementsByTagName</span>(<span class=\\\"hljs-string\\\">&quot;img&quot;</span>));\\n      <span class=\\\"hljs-keyword\\\">var</span> innerHTML = node.<span class=\\\"hljs-property\\\">children</span>[<span class=\\\"hljs-number\\\">0</span>].<span class=\\\"hljs-property\\\">children</span>[<span class=\\\"hljs-number\\\">1</span>].<span class=\\\"hljs-property\\\">innerHTML</span>;\\n\\n      <span class=\\\"hljs-comment\\\">// replace img with n-image</span>\\n      innerHTML = <span class=\\\"hljs-variable language_\\\">this</span>.<span class=\\\"hljs-title function_\\\">imgReplacement</span>(innerHTML);\\n\\n      <span class=\\\"hljs-comment\\\">// render it</span>\\n      <span class=\\\"hljs-keyword\\\">const</span> body = {\\n        <span class=\\\"hljs-attr\\\">template</span>: innerHTML,\\n        <span class=\\\"hljs-attr\\\">components</span>: {\\n          NImage,\\n        },\\n      };\\n      <span class=\\\"hljs-title function_\\\">createApp</span>(body).<span class=\\\"hljs-title function_\\\">mount</span>(<span class=\\\"hljs-string\\\">&quot;#md&quot;</span>);\\n    },\\n  },\\n};\\n&lt;/script&gt;\\n</code></pre>\\n<p>使用这个组件：</p>\\n<pre><code class=\\\"hljs language-html\\\"><span class=\\\"hljs-tag\\\">&lt;<span class=\\\"hljs-name\\\">template</span>&gt;</span>\\n    <span class=\\\"hljs-tag\\\">&lt;<span class=\\\"hljs-name\\\">markdown-body</span> <span class=\\\"hljs-attr\\\">:content</span>=<span class=\\\"hljs-string\\\">&quot;content&quot;</span> <span class=\\\"hljs-attr\\\">:key</span>=<span class=\\\"hljs-string\\\">&quot;$route.params.articleId&quot;</span> /&gt;</span>\\n<span class=\\\"hljs-tag\\\">&lt;/<span class=\\\"hljs-name\\\">template</span>&gt;</span>\\n</code></pre>\\n<h3 id=\\\"vue监听窗口大小变化\\\">Vue监听窗口大小变化</h3>\\n<pre><code class=\\\"hljs language-js\\\"><span class=\\\"hljs-attr\\\">mounted</span>: <span class=\\\"hljs-keyword\\\">function</span> (<span class=\\\"hljs-params\\\"></span>) {\\n  <span class=\\\"hljs-variable language_\\\">this</span>.<span class=\\\"hljs-property\\\">winHeight</span> = <span class=\\\"hljs-variable language_\\\">this</span>.<span class=\\\"hljs-title function_\\\">getWinHeight</span>();\\n  <span class=\\\"hljs-variable language_\\\">this</span>.<span class=\\\"hljs-property\\\">winWidth</span> = <span class=\\\"hljs-variable language_\\\">this</span>.<span class=\\\"hljs-title function_\\\">getWinWidth</span>();\\n  <span class=\\\"hljs-variable language_\\\">window</span>.<span class=\\\"hljs-property\\\">onresize</span> = <span class=\\\"hljs-function\\\">() =&gt;</span> {\\n    <span class=\\\"hljs-built_in\\\">clearTimeout</span>(<span class=\\\"hljs-variable language_\\\">this</span>.<span class=\\\"hljs-property\\\">timer</span>);\\n    <span class=\\\"hljs-variable language_\\\">this</span>.<span class=\\\"hljs-property\\\">timer</span> = <span class=\\\"hljs-built_in\\\">setTimeout</span>(<span class=\\\"hljs-function\\\">() =&gt;</span> {\\n      <span class=\\\"hljs-variable language_\\\">this</span>.<span class=\\\"hljs-property\\\">winHeight</span> = <span class=\\\"hljs-variable language_\\\">this</span>.<span class=\\\"hljs-title function_\\\">getWinHeight</span>();\\n      <span class=\\\"hljs-variable language_\\\">this</span>.<span class=\\\"hljs-property\\\">winWidth</span> = <span class=\\\"hljs-variable language_\\\">this</span>.<span class=\\\"hljs-title function_\\\">getWinWidth</span>();\\n    }, <span class=\\\"hljs-number\\\">300</span>);\\n  };\\n},\\n</code></pre>\\n<h3 id=\\\"vue-打包体积优化方案和cdn\\\">Vue 打包体积优化方案和CDN</h3>\\n<p><a href=\\\"https://juejin.cn/post/6844904163327868941\\\">https://juejin.cn/post/6844904163327868941</a></p>\\n<h3 id=\\\"vue-spa和githubpages的配合\\\">Vue SPA和GithubPages的配合</h3>\\n<hr>\\n<p>2021 Solution for vue3 &amp; vue-cli:</p>\\n<p>Follow this with &quot;Basic instructions&quot;:</p>\\n<p><a href=\\\"https://github.com/rafgraph/spa-github-pages#usage-instructions\\\">https://github.com/rafgraph/spa-github-pages#usage-instructions</a></p>\\n<p>no need to change <code>var pathSegmentsToKeep = 0;</code> the 404.html.</p>\\n<p>and then in the <code>vue.config.js</code>:</p>\\n<pre><code class=\\\"hljs language-javascript\\\">  <span class=\\\"hljs-comment\\\">// do not use &quot;./dist/&quot;</span>\\n  <span class=\\\"hljs-attr\\\">publicPath</span>: <span class=\\\"hljs-string\\\">&quot;/dist/&quot;</span>,\\n  <span class=\\\"hljs-comment\\\">// make the index.html file place at the root of the repo</span>\\n  <span class=\\\"hljs-attr\\\">indexPath</span>: <span class=\\\"hljs-string\\\">&quot;../index.html&quot;</span>,\\n</code></pre>\\n<p>then the spa is good to go~</p>\\n<hr>\\n<p>在<a href=\\\"https://stackoverflow.com/a/70299225/17094075\\\">stackoverflow</a>上的回答</p>\\n\";","let onceCbs = [];\nconst paramsMap = new WeakMap();\nfunction flushOnceCallbacks() {\n    onceCbs.forEach((cb) => cb(...paramsMap.get(cb)));\n    onceCbs = [];\n}\nfunction beforeNextFrameOnce(cb, ...params) {\n    paramsMap.set(cb, params);\n    if (onceCbs.includes(cb))\n        return;\n    onceCbs.push(cb) === 1 && requestAnimationFrame(flushOnceCallbacks);\n}\nexport { beforeNextFrameOnce };\n","function _arrayLikeToArray(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n\n  for (var i = 0, arr2 = new Array(len); i < len; i++) {\n    arr2[i] = arr[i];\n  }\n\n  return arr2;\n}\n\nmodule.exports = _arrayLikeToArray;\nmodule.exports[\"default\"] = module.exports, module.exports.__esModule = true;","var unsupportedIterableToArray = require(\"./unsupportedIterableToArray.js\");\n\nfunction _createForOfIteratorHelper(o, allowArrayLike) {\n  var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"];\n\n  if (!it) {\n    if (Array.isArray(o) || (it = unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") {\n      if (it) o = it;\n      var i = 0;\n\n      var F = function F() {};\n\n      return {\n        s: F,\n        n: function n() {\n          if (i >= o.length) return {\n            done: true\n          };\n          return {\n            done: false,\n            value: o[i++]\n          };\n        },\n        e: function e(_e) {\n          throw _e;\n        },\n        f: F\n      };\n    }\n\n    throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n  }\n\n  var normalCompletion = true,\n      didErr = false,\n      err;\n  return {\n    s: function s() {\n      it = it.call(o);\n    },\n    n: function n() {\n      var step = it.next();\n      normalCompletion = step.done;\n      return step;\n    },\n    e: function e(_e2) {\n      didErr = true;\n      err = _e2;\n    },\n    f: function f() {\n      try {\n        if (!normalCompletion && it[\"return\"] != null) it[\"return\"]();\n      } finally {\n        if (didErr) throw err;\n      }\n    }\n  };\n}\n\nmodule.exports = _createForOfIteratorHelper;\nmodule.exports[\"default\"] = module.exports, module.exports.__esModule = true;","var arrayLikeToArray = require(\"./arrayLikeToArray.js\");\n\nfunction _unsupportedIterableToArray(o, minLen) {\n  if (!o) return;\n  if (typeof o === \"string\") return arrayLikeToArray(o, minLen);\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n  if (n === \"Object\" && o.constructor) n = o.constructor.name;\n  if (n === \"Map\" || n === \"Set\") return Array.from(o);\n  if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return arrayLikeToArray(o, minLen);\n}\n\nmodule.exports = _unsupportedIterableToArray;\nmodule.exports[\"default\"] = module.exports, module.exports.__esModule = true;","\n    sessionStorage.setItem('postSeries', \"[{\\\"se\\\":\\\"Cron4jDocument_ZH_CN_Translation\\\",\\\"ps\\\":[\\\"Cron4jDocument_ZH_CN_Translation_README===19jo7o1===1525713121000\\\",\\\"Cron4jDocument_ZH_CN_Translation===1ngl1pm===1525713901000\\\"]},{\\\"se\\\":\\\"docker\\\",\\\"ps\\\":[\\\"Docker Orientation&Setup===1ei198o===1542203411000\\\",\\\"Docker Containers&Dockerfile===uh480l===1542380711000\\\",\\\"Docker Service&Composefile===zkr55u===1543321142000\\\",\\\"Docker Swarm&ClusterSetup===1toixsk===1543439163000\\\",\\\"Docker Stack===u7sd0w===1543509960000\\\",\\\"Docker ConceptReview===rx7jt4===1543754349000\\\",\\\"Docker Persist Data Overview===lt42s8===1543916673000\\\",\\\"Docker Volumes===1ae6lng===1544005389000\\\"]},{\\\"se\\\":\\\"electron\\\",\\\"ps\\\":[\\\"Electron_一个HelloWorld===a08lib===1511388323000\\\",\\\"Electron_打包你的HelloWorld为exe===1q1lo3l===1511442141000\\\",\\\"Electron_上手铺垫===11zuc81===1570142121000\\\",\\\"Electron_配置相关与对象===1y7ozg8===1570698201000\\\",\\\"Electron_UI===kimeni===1570707861000\\\"]},{\\\"se\\\":\\\"express\\\",\\\"ps\\\":[\\\"Express Routing===1n8vn13===1570109880000\\\",\\\"Express Middleware===1tzsbbu===1570120260000\\\"]},{\\\"se\\\":\\\"Interesting Math\\\",\\\"ps\\\":[\\\"Interesting Math - Prime Number===1jy4sem===1587026619000\\\"]},{\\\"se\\\":\\\"并发\\\",\\\"ps\\\":[\\\"Java并发编程第一坎===bu9klx===1528236540000\\\",\\\"Java并发编程第二坎===1clnpuk===1531652002000\\\",\\\"Java并发编程第三坎===1h1ww1y===1531923322000\\\",\\\"Java并发编程第四坎===db3vx3===1531923408000\\\",\\\"Java并发编程第五坎===1xo3tpx===1532201628000\\\",\\\"Java并发编程第六坎===139027a===1532554428000\\\",\\\"Java并发编程第七坎===7kdfk8===1545776568000\\\",\\\"Java并发编程第七坎-2===u4sgci===1546174728000\\\",\\\"Java并发编程第八坎===1u7rv30===1546901208000\\\"]},{\\\"se\\\":\\\"jenkins\\\",\\\"ps\\\":[\\\"Jenkins Introductions&Setup===1arzjog===1542639060000\\\"]},{\\\"se\\\":\\\"JettyDocument_ZH_CN_Translation\\\",\\\"ps\\\":[\\\"JettyDocument_ZH_CN_Translation_README===n8gsoq===1525714201000\\\",\\\"JettyDocument_ZH_CN_Translation_Part4-23===1cei7aq===1525714201000\\\",\\\"JettyDocument_ZH_CN_Translation_Part4-21===18rke1===1525714201000\\\",\\\"JettyDocument_ZH_CN_Translation_Part3-13===cc3kmk===1525714201000\\\",\\\"JettyDocument_ZH_CN_Translation_Part1===17hjlts===1525714201000\\\"]},{\\\"se\\\":\\\"leetcode\\\",\\\"ps\\\":[\\\"Leetcode-1~5===pn2ezr===1549137060000\\\",\\\"Leetcode-6~10===t1f0vq===1550409480000\\\",\\\"Leetcode-11~15===2gps3g===1551303720000\\\",\\\"Leetcode-16~20===3yl2hx===1551903180000\\\",\\\"Leetcode-21~25===1hrw4sv===1551907020000\\\",\\\"Leetcode-26~30===448jer===1552148460000\\\",\\\"Leetcode-31~35===dbne5d===1552772760000\\\",\\\"Leetcode-36~40===v6ei19===1553111160000\\\",\\\"Leetcode-41~45===11z93zc===1553112180000\\\",\\\"Leetcode-46~50===jywoys===1553672340000\\\",\\\"Leetcode-51~55===xmbex2===1553914620000\\\",\\\"Leetcode-56~60===1kv61wq===1553951760000\\\",\\\"Leetcode-61~65===1cu6q2d===1554185880000\\\",\\\"Leetcode-66~70===z9pvg9===1554216000000\\\",\\\"Leetcode-71~75===i9becb===1554363300000\\\"]},{\\\"se\\\":\\\"Log4j2\\\",\\\"ps\\\":[\\\"Log4j2_HelloWorld===en4hhw===1510935201000\\\",\\\"Log4j2_Appenders===nff3ic===1510936638000\\\",\\\"Log4j2_Layouts===yvgzwi===1512743956000\\\",\\\"Log4j2_Filters===3fjm8j===1512823280000\\\",\\\"Log4j2_Lookups===3zxt7z===1512833295000\\\"]},{\\\"se\\\":\\\"《MySQL技术内幕：InnoDB存储引擎》笔记\\\",\\\"ps\\\":[\\\"MySQL InnoDB引擎概述===xfjqry===1591902734000\\\",\\\"MySQL InnoDB索引概述===a0p0f4===1592157644000\\\",\\\"MySQL InnoDB事务概述===tx6g0p===1592318726000\\\",\\\"MySQL InnoDB锁概述===dc5shg===1592402935000\\\"]},{\\\"se\\\":\\\"Python Note\\\",\\\"ps\\\":[\\\"The Basic Grammar Of Python (AB)===t3owl3===1588971615000\\\",\\\"The Basic Grammar Of Python (CD)===1ba9tuk===1589120354000\\\",\\\"The Basic Grammar Of Python (EF)===1xentt===1589728247000\\\",\\\"Python - Threading===2acnhf===1590005083000\\\"]},{\\\"se\\\":\\\"《Mastering Regular Expression(Third Edition)》\\\",\\\"ps\\\":[\\\"RegExp_1_overview===1k4djcz===1510876856000\\\",\\\"RegExp_2_metacharacters===huiysg===1510876926000\\\"]},{\\\"se\\\":\\\"从头到尾读\\\",\\\"ps\\\":[\\\"从头到尾读Collection===faxga5===1526404646000\\\",\\\"从头到尾读Iterable与Iterator===1kakozs===1526404934000\\\",\\\"从头到尾读ArrayList===rku8jh===1528187481000\\\",\\\"把HashMap安排得明明白白===ofa68o===1534421541000\\\"]},{\\\"se\\\":\\\"JVM\\\",\\\"ps\\\":[\\\"关于JVM的运行时数据区===rikltc===1527979680000\\\",\\\"关于JVM的对象创建与访问===18669ga===1542231900000\\\",\\\"关于JVM的运行时数据区上的GC===d5ykz8===1542235500000\\\",\\\"关于JVM的GC行为和内存分配===jhpq7e===1542468900000\\\"]},{\\\"se\\\":\\\"深入MySQL亿点点\\\",\\\"ps\\\":[\\\"再聊InnoDB索引===1lvzuh7===1592842893000\\\"]},{\\\"se\\\":\\\"《计算机网络》\\\",\\\"ps\\\":[\\\"计算机网络-谢希仁-1===1k7g0p3===1530354513000\\\",\\\"计算机网络-谢希仁-2===1nz333d===1530650673000\\\"]}]\");\n    sessionStorage.setItem('postMetadata', \"[{\\\"title\\\":\\\"Connecting ModelSIM with Vscode & XQuartz on Mac\\\",\\\"categories\\\":[\\\"concordia\\\",\\\"coen6501\\\"],\\\"tags\\\":[\\\"nottag\\\"],\\\"date\\\":\\\"2021-10-5 19:22:5\\\",\\\"char_count\\\":1829,\\\"short_content\\\":\\\"\\\\n\\\\n\\\\n\\\\n\\\\n\\\\n### XQuartz setup\\\\n\\\\nhttps://www.xquartz.org/\\\\n\\\\n\\\",\\\"abbrlink\\\":\\\"xqh6xg\\\"},{\\\"title\\\":\\\"了解前缀树\\\",\\\"categories\\\":[\\\"algorithm\\\",\\\"searching\\\"],\\\"tags\\\":[\\\"trie\\\",\\\"leetcode\\\"],\\\"date\\\":\\\"2020-07-14T11:39:55.000Z\\\",\\\"char_count\\\":11987,\\\"short_content\\\":\\\"\\\\n\\\\n本篇主要介绍一个用于字符串前后缀快速搜索的数据结构——前缀树，这篇也是在 Leetcode 里的一个数据结构[专题](https://leetcode-cn.com/explore/learn/card/trie/)，专题里已经把前缀树的实现方式以及实际应用都介绍了一下，这里稍微整理一下这个专题\\\\n\\\\n关于前缀树的概念，可以参考：[什么是前缀树？](https://leetcode-cn.com/explore/learn/card/trie/165/introduction-to-trie/641/)\\\\n\\\\n关于前缀树的表示，可以参考：[如何表示一个前缀树？](https://leetcode-cn.com/explore/learn/card/trie/165/introduction-to-trie/642/)\\\\n\\\\n我们一般使用数组的方式去表示前缀树，虽然它会多占用一些空间，但是在查找的执行效率上，要比 HashMap 快上不少\\\\n\\\\n\\\",\\\"abbrlink\\\":\\\"ooqfkn\\\"},{\\\"title\\\":\\\"带状态机的DP\\\",\\\"categories\\\":[\\\"algorithm\\\",\\\"dp\\\"],\\\"tags\\\":[\\\"dp\\\"],\\\"date\\\":\\\"2020-07-10T11:51:57.000Z\\\",\\\"char_count\\\":10071,\\\"short_content\\\":\\\"\\\\n\\\\n前几天碰到一套经典的题，《买卖股票》系列，其中最简单那道题我之前还在字节碰到过，然而当时我菜得连最简单的题都没做出来\\\\n\\\\n这个系列从简到难思路变化还挺大，但有趣的是中等难度之后的题开始涉及到状态机的思路，我觉得可以整理一下\\\\n\\\\n本篇所有的思路都是整理自**官方题解**以及[liweiwei1419](https://leetcode-cn.com/problems/best-time-to-buy-and-sell-stock-iii/solution/dong-tai-gui-hua-by-liweiwei1419-7/)同学的思路\\\\n\\\\n### Ⅰ\\\\n\\\\n\\\",\\\"abbrlink\\\":\\\"f40uwq\\\"},{\\\"title\\\":\\\"再聊InnoDB索引\\\",\\\"categories\\\":[\\\"db\\\",\\\"mysql\\\",\\\"index\\\"],\\\"tags\\\":[\\\"mysql-index\\\",\\\"mys\\\"],\\\"series\\\":\\\"深入MySQL亿点点\\\",\\\"date\\\":\\\"2020-06-22T16:21:33.000Z\\\",\\\"char_count\\\":28426,\\\"short_content\\\":\\\"\\\\n\\\\n\\\\n\\\\n\\\\n\\\\n本篇主要是再来聊聊MySQL中InnoDB的索引的细节，主要聊到引擎是如何利用B+树去检索数据的\\\\n\\\\n以及整理一些关于索引的问题与回答，所以本篇的形式还是以问题点为驱动，回答一个个的问题\\\\n\\\\n\\\",\\\"abbrlink\\\":\\\"1lvzuh7\\\"},{\\\"title\\\":\\\"MySQL InnoDB锁概述\\\",\\\"categories\\\":[\\\"db\\\",\\\"mysql\\\",\\\"lock\\\"],\\\"tags\\\":[\\\"mysql-lock\\\"],\\\"series\\\":\\\"《MySQL技术内幕：InnoDB存储引擎》笔记\\\",\\\"date\\\":\\\"2020-6-17 10:8:55\\\",\\\"char_count\\\":6072,\\\"short_content\\\":\\\"\\\\n\\\\n\\\\n\\\\n### 概述\\\\n\\\\n本篇主要介绍InnoDB中的锁，以及它与隔离级别之间的关系。从锁的算法、锁的等级、锁解决的问题来为MySQL的InnoDB锁做一个概述\\\\n\\\\n我们能够轻易地想到，对数据库的数据进行操作的时候，为了保证数据一致性和持久性，我们会对这些操作上锁，但数据库中并不只有这些情况会上锁，其他地方也会有锁，比如缓冲池中页的增删改查的时候\\\\n\\\\n\\\",\\\"abbrlink\\\":\\\"dc5shg\\\"},{\\\"title\\\":\\\"MySQL InnoDB事务概述\\\",\\\"categories\\\":[\\\"db\\\",\\\"mysql\\\",\\\"transaction\\\"],\\\"tags\\\":[\\\"db-transaction\\\",\\\"mvcc\\\"],\\\"series\\\":\\\"《MySQL技术内幕：InnoDB存储引擎》笔记\\\",\\\"date\\\":\\\"2020-06-16T14:45:26.000Z\\\",\\\"char_count\\\":4963,\\\"short_content\\\":\\\"\\\\n\\\\n本篇介绍内容：\\\\n\\\\n- 数据库系统中事务的相关概念；\\\\n- SQL 隔离级别要解决的问题；\\\\n- InnoDB 中的隔离级别；\\\\n- InnoDB 支持什么样的事务以及如何支持事务；\\\\n\\\\n### 事务相关概述\\\\n\\\",\\\"abbrlink\\\":\\\"tx6g0p\\\"},{\\\"title\\\":\\\"MySQL InnoDB索引概述\\\",\\\"categories\\\":[\\\"db\\\",\\\"mysql\\\",\\\"index\\\"],\\\"tags\\\":[\\\"mysql\\\",\\\"mysql-index\\\"],\\\"series\\\":\\\"《MySQL技术内幕：InnoDB存储引擎》笔记\\\",\\\"date\\\":\\\"2020-6-14 14:0:44\\\",\\\"char_count\\\":11756,\\\"short_content\\\":\\\"\\\\n\\\\n本篇开始了解 MySQL 中 InnoDB 引擎的索引，索引是 MySQL 里非常重要的部分，它的出现极大地提升了 MySQL 处理数据的性能，而且索引使用的好坏也决定着一个系统的执行效率\\\\n\\\\n因此，想要高效地使用 MySQL 数据库，合理地创建索引，甚至是合理地编写 SQL 语句，都需要先了解索引在 MySQL 中的行为以及原理\\\\n\\\\nInnoDB 的索引常见的有：B+树索引、全文索引、哈希索引\\\\n\\\\n之前我们说过哈希索引，它是引擎自适应的，所以我们并不需要关心该索引的管理；而 B+树索引是引擎使用地最多的索引数据结构，其构造类似于二叉树，根据键值快速找到数据，但是要理解它我们要注意两个问题：\\\\n\\\\n\\\",\\\"abbrlink\\\":\\\"a0p0f4\\\"},{\\\"title\\\":\\\"优先队列&二叉堆（2-heap）\\\",\\\"categories\\\":[\\\"data structures\\\",\\\"heap\\\"],\\\"tags\\\":[\\\"queue\\\",\\\"priority-queue\\\",\\\"heap\\\",\\\"2-heap\\\"],\\\"date\\\":\\\"2020-6-13 12:8:2\\\",\\\"char_count\\\":6465,\\\"short_content\\\":\\\"\\\\n\\\\n\\\\n\\\\n### Introduction\\\\n\\\\n在排序算法中有堆排序，而要理解好堆排序，首先我们得先理解好堆的概念，一般在数据结构上，我们把优先队列的数据结构称为堆，那什么是有限队列呢？它能应用在哪些场景呢？这些是本篇要介绍的重点\\\\n\\\\n\\\\n\\\\n\\\",\\\"abbrlink\\\":\\\"2t44ld\\\"},{\\\"title\\\":\\\"MySQL InnoDB引擎概述\\\",\\\"categories\\\":[\\\"db\\\",\\\"mysql\\\",\\\"engines\\\"],\\\"tags\\\":[\\\"mysql-engins\\\",\\\"innodb\\\"],\\\"series\\\":\\\"《MySQL技术内幕：InnoDB存储引擎》笔记\\\",\\\"date\\\":\\\"2020-06-11T19:12:14.000Z\\\",\\\"char_count\\\":6746,\\\"short_content\\\":\\\"\\\\n\\\\n### 介绍\\\\n\\\\n本篇主要介绍了 MySQL 系统的核心引擎之一：**_InnoDB_**，本系列所有的内容是基于姜承尧老师所著*《MySQL 技术内幕：InnoDB 存储引擎》*再加上整理的网络笔记、MySQL5.7 的[官方文档](https://dev.mysql.com/doc/refman/5.7/en/)和自己的一些理解\\\\n\\\\n### InnoDB 引擎\\\\n\\\\nMySQL5.5.8 以后的默认引擎，支持事务、行锁设计、外键、全文索引、非锁定读（默认读操作不会产生锁）；\\\\n\\\\n\\\",\\\"abbrlink\\\":\\\"xfjqry\\\"},{\\\"title\\\":\\\"Python - Threading\\\",\\\"categories\\\":[\\\"python\\\",\\\"concurrency\\\"],\\\"tags\\\":[\\\"python\\\",\\\"thread\\\"],\\\"series\\\":\\\"Python Note\\\",\\\"date\\\":\\\"2020-5-20 16:4:43\\\",\\\"char_count\\\":17088,\\\"short_content\\\":\\\"\\\\n\\\\n\\\\n\\\\n\\\\n\\\\nIntroduce how to use multi-thread tech with python, refer to: https://docs.python.org/3/library/threading.html\\\\n\\\\n### Lib - threading\\\\n\\\\n\\\",\\\"abbrlink\\\":\\\"2acnhf\\\"},{\\\"title\\\":\\\"The Basic Grammar Of Python (EF)\\\",\\\"categories\\\":[\\\"python\\\",\\\"grammar\\\"],\\\"tags\\\":[\\\"python\\\",\\\"grammar\\\"],\\\"series\\\":\\\"Python Note\\\",\\\"date\\\":\\\"2020-05-17T15:10:47.000Z\\\",\\\"char_count\\\":25166,\\\"short_content\\\":\\\"\\\\n\\\\n\\\\n\\\\n\\\\n\\\\n\\\\n\\\\nData Structures, Classes and Errors & Exceptions.\\\\n\\\\n\\\",\\\"abbrlink\\\":\\\"1xentt\\\"},{\\\"title\\\":\\\"The Basic Grammar Of Python (CD)\\\",\\\"categories\\\":[\\\"python\\\",\\\"grammar\\\"],\\\"tags\\\":[\\\"python\\\",\\\"grammar\\\"],\\\"series\\\":\\\"Python Note\\\",\\\"date\\\":\\\"2020-05-10T14:19:14.000Z\\\",\\\"char_count\\\":15622,\\\"short_content\\\":\\\"\\\\n\\\\n\\\\n\\\\nFlow control syntax, Function definition, Modules.\\\\n\\\\n## C\\\\n\\\\n### Flow Control\\\\n#### `if` statement\\\\n\\\",\\\"abbrlink\\\":\\\"1ba9tuk\\\"},{\\\"title\\\":\\\"The Basic Grammar Of Python (AB)\\\",\\\"categories\\\":[\\\"python\\\",\\\"grammar\\\"],\\\"tags\\\":[\\\"python\\\",\\\"grammar\\\"],\\\"series\\\":\\\"Python Note\\\",\\\"date\\\":\\\"2020-5-8 17:0:15\\\",\\\"char_count\\\":15915,\\\"short_content\\\":\\\"\\\\n\\\\n\\\\n\\\\nThe series of \\\\\\\\<Python Note\\\\\\\\> is talking about some basic grammar rules of python, for quick search while I might use python.\\\\n\\\\nThe first article will introduces  `print()` and `input()`, the comment syntax, variables assignment and some basic types in python.\\\\n\\\\n## A\\\\n\\\\n\\\",\\\"abbrlink\\\":\\\"t3owl3\\\"},{\\\"title\\\":\\\"Make Your Raspberry Pi Broadcasting TV News Every Morning\\\",\\\"categories\\\":[\\\"essay\\\"],\\\"tags\\\":[\\\"raspberry pi\\\"],\\\"date\\\":\\\"2020-04-23T22:46:59.000Z\\\",\\\"char_count\\\":7544,\\\"short_content\\\":\\\"\\\\n\\\\n### Preface\\\\n\\\\nI can't get up early recently, and yesterday I suddenly thought about why can't I use my idle raspberry pi to broadcast TV news every 7:00 a.m and wake me up?\\\\n\\\\nAnd how am I going to achieve that? There are some factors I should count in:\\\\n\\\\n- a cron to set timing task at 7:00 a.m;\\\\n- tools to control the mouse action;\\\\n\\\",\\\"abbrlink\\\":\\\"1xemds8\\\"},{\\\"title\\\":\\\"Interesting Math - Prime Number\\\",\\\"categories\\\":[\\\"mathematics\\\"],\\\"tags\\\":[\\\"prime\\\",\\\"math\\\"],\\\"series\\\":\\\"Interesting Math\\\",\\\"date\\\":\\\"2020-04-16T08:43:39.000Z\\\",\\\"char_count\\\":13058,\\\"short_content\\\":\\\"\\\\n\\\\n### Preface\\\\n\\\\nPrime number is important for computer science, especially in cryptography such as [public-key cryptography](https://en.wikipedia.org/wiki/Public-key_cryptography), which relies on the difficulty of [factoring](https://en.wikipedia.org/wiki/Integer_factorization) large numbers into their prime factors.\\\\n\\\\nSo I planed to summarize some concepts and algorithm of prime number.\\\\n\\\\n### Basic Concepts\\\\n\\\\n\\\",\\\"abbrlink\\\":\\\"1jy4sem\\\"},{\\\"title\\\":\\\"微信小程序支付后台接入\\\",\\\"categories\\\":[\\\"note\\\",\\\"project\\\"],\\\"tags\\\":[\\\"wechat\\\"],\\\"date\\\":\\\"2020-04-02T13:51:57.000Z\\\",\\\"char_count\\\":6211,\\\"short_content\\\":\\\"\\\\n\\\\n\\\\n\\\\n### 前言\\\\n\\\\n2月份的时候，疫情原因，学校实验室和学院要开发一款帮助小区居民批量采购的小程序，实验室团队人手不足，说是少后台开发，所以我就上了，看着微信的文档还有学长的帮助，也就吭哧吭哧写上线了\\\\n\\\\n### 操作流程\\\\n\\\\n\\\",\\\"abbrlink\\\":\\\"1csh4qm\\\"},{\\\"title\\\":\\\"一次博客的改版和升级\\\",\\\"categories\\\":[\\\"essay\\\"],\\\"comments\\\":true,\\\"date\\\":\\\"2020-03-13T11:23:00.000Z\\\",\\\"tags\\\":[\\\"blog\\\"],\\\"char_count\\\":8691,\\\"short_content\\\":\\\"\\\\n\\\\n\\\\n\\\\n### 前提\\\\n\\\\n当年玩上博客的时候，整过很多活儿，什么Hexo，WP甚至Jekyll都来了，还搭到服务器上用nginx，然后各种域名、备案、CNAME各种乱搞\\\\n\\\\n后面累了，不想折腾了，直接挂github pages，然后就还是用hexo\\\\n\\\\n\\\",\\\"abbrlink\\\":\\\"3rmqph\\\"},{\\\"title\\\":\\\"字符编码笔记\\\",\\\"categories\\\":[\\\"reprinted\\\"],\\\"tags\\\":[\\\"encoding\\\"],\\\"date\\\":\\\"2020-02-14T19:34:01.000Z\\\",\\\"char_count\\\":21763,\\\"short_content\\\":\\\"\\\\r\\\\n\\\\r\\\\n> 转自：[yaoxuannn-字符编码笔记](https://yaoxuannn.com/2017/12/12/%E5%AD%97%E7%AC%A6%E7%BC%96%E7%A0%81%E7%AC%94%E8%AE%B0/)\\\\r\\\\n\\\\r\\\\n想来想去终于决定写一个关于计算机字符编码的笔记了( 应该说终于愿意去学了..(๑•ᴗ•๑)), 原本的目的只是搞清楚Unicode的, 考虑到字符编码问题是一个有趣, 在开发中经常会遇到并且稍微有点麻烦和棘手的问题, 但是在网络上却很难找到将这个说的比较细致和成体系的文章, 所以我决定倾尽精力去写这篇笔记, 我会尽量的去查资料和参考他人的文章和博客, 将关于计算机编码的问题捣鼓清楚.\\\\r\\\\n\\\\r\\\\n在笔记的后半部分, 我也会针对Python3的Unicode做一些说明, 并且当说到Unicode的时候, 我会尝试说明一些关于UTF-8 with BOM在Linux/Unix内核中的一些矛盾.\\\\r\\\\n\\\\r\\\\n**关于我搜寻和参考的资料, 都会贴在文章的最后.**\\\\r\\\\n\\\\r\\\\n\\\",\\\"abbrlink\\\":\\\"1w60zyo\\\"},{\\\"title\\\":\\\"Electron_UI\\\",\\\"categories\\\":[\\\"front-end\\\",\\\"electron\\\"],\\\"comments\\\":true,\\\"tags\\\":[\\\"electron\\\"],\\\"series\\\":\\\"electron\\\",\\\"date\\\":\\\"2019-10-10T11:44:21.000Z\\\",\\\"char_count\\\":6470,\\\"short_content\\\":\\\"\\\\n\\\\n### 对话框\\\\n\\\\n> 显示用于打开和保存文件、警报等的本机系统对话框。\\\\n\\\\n线程：[主线程](https://electronjs.org/docs/glossary#main-process)\\\\n\\\\n显示用于选择多个文件和目录的对话框的示例:\\\\n\\\\n\\\",\\\"abbrlink\\\":\\\"kimeni\\\"},{\\\"title\\\":\\\"Electron_配置相关与对象\\\",\\\"categories\\\":[\\\"front-end\\\",\\\"electron\\\"],\\\"comments\\\":true,\\\"tags\\\":[\\\"electron\\\"],\\\"series\\\":\\\"electron\\\",\\\"date\\\":\\\"2019-10-10T09:03:21.000Z\\\",\\\"char_count\\\":19831,\\\"short_content\\\":\\\"\\\\n\\\\n\\\\n\\\\n### Introduction\\\\n\\\\n有了一些铺垫之后，我们就能开始了解一下Electron的主体功能都提供了什么东西，具体的列表可以看：https://electronjs.org/docs/api\\\\n\\\\n- 配置相关与对象\\\\n  - app：整个应用程序生命周期相关的api和事件\\\\n\\\",\\\"abbrlink\\\":\\\"1y7ozg8\\\"},{\\\"title\\\":\\\"Electron_上手铺垫\\\",\\\"categories\\\":[\\\"front-end\\\",\\\"electron\\\"],\\\"comments\\\":true,\\\"tags\\\":[\\\"electron\\\"],\\\"series\\\":\\\"electron\\\",\\\"date\\\":\\\"2019-10-03T22:35:21.000Z\\\",\\\"char_count\\\":7274,\\\"short_content\\\":\\\"\\\\n\\\\n\\\\n\\\\n## Introduction\\\\n\\\\n官方指南不叫指南，叫document，于是乎开始无教程纯瞎子摸石头，于是想着把整个官方指南都看一遍，然后梳理梳理。\\\\n\\\\n- 关于electron的命名空间\\\\n- 主进程和渲染进程\\\\n\\\",\\\"abbrlink\\\":\\\"11zuc81\\\"},{\\\"title\\\":\\\"Express Middleware\\\",\\\"categories\\\":[\\\"front-end\\\",\\\"nodejs\\\"],\\\"tags\\\":[\\\"express\\\",\\\"nodejs\\\"],\\\"series\\\":\\\"express\\\",\\\"date\\\":\\\"2019-10-03T16:31:00.000Z\\\",\\\"char_count\\\":2372,\\\"short_content\\\":\\\"\\\\n\\\\n{% cq %}\\\\n\\\\n翻译自官方文档\\\\n\\\\n{% endcq %}\\\\n\\\\n## Writing Middleware\\\\n\\\\n\\\",\\\"abbrlink\\\":\\\"1tzsbbu\\\"},{\\\"title\\\":\\\"Express Routing\\\",\\\"categories\\\":[\\\"front-end\\\",\\\"nodejs\\\",\\\"express\\\"],\\\"tags\\\":[\\\"express\\\",\\\"nodejs\\\"],\\\"series\\\":\\\"express\\\",\\\"date\\\":\\\"2019-10-03T13:38:00.000Z\\\",\\\"char_count\\\":8714,\\\"short_content\\\":\\\"\\\\n\\\\n\\\\n\\\\n{% cq %}\\\\n\\\\n翻译自官方文档\\\\n\\\\n{% endcq %}\\\\n\\\\n\\\",\\\"abbrlink\\\":\\\"1n8vn13\\\"},{\\\"title\\\":\\\"Understanding the nodejs' event loop\\\",\\\"categories\\\":[\\\"reprinted\\\"],\\\"tags\\\":[\\\"nodejs\\\"],\\\"date\\\":\\\"2019-10-02T15:47:20.000Z\\\",\\\"char_count\\\":6700,\\\"short_content\\\":\\\"\\\\n\\\\n> 转载自：http://blog.mixu.net/2011/02/01/understanding-the-node-js-event-loop/\\\\n\\\\n### Understanding the nodejs' event loop\\\\n\\\\nThe first basic thesis of node.js is that I/O is expensive:\\\\n\\\\n\\\\n\\\\n\\\",\\\"abbrlink\\\":\\\"1w97yet\\\"},{\\\"title\\\":\\\"GC Algorithm Implementation\\\",\\\"categories\\\":[\\\"java\\\",\\\"jvm\\\",\\\"gc\\\"],\\\"tags\\\":[\\\"gc\\\",\\\"gc-algorithm\\\"],\\\"date\\\":\\\"2019-04-05T05:11:00.000Z\\\",\\\"char_count\\\":16053,\\\"short_content\\\":\\\"\\\\n\\\\n\\\\n\\\\n### Introduction\\\\n\\\\n前面说了挺多关于GC的算法思路，接下来这篇说说在JVM里实际实现的GC算法，翻译、参考自[plumbr.io](https://plumbr.io/handbook/garbage-collection-algorithms-implementations)\\\\n\\\\n我们首先要清楚地认识到一个事情：除了G1回收器以外，垃圾回收算法分为**“针对新生代”**，**“针对老年代”**两种\\\\n\\\\n\\\",\\\"abbrlink\\\":\\\"1jvfs4t\\\"},{\\\"title\\\":\\\"Leetcode-71~75\\\",\\\"categories\\\":[\\\"algorithm\\\",\\\"leetcode\\\"],\\\"tags\\\":[\\\"leetcode\\\",\\\"mysqrt\\\",\\\"binary-question\\\"],\\\"date\\\":\\\"2019-04-04T07:35:00.000Z\\\",\\\"series\\\":\\\"leetcode\\\",\\\"char_count\\\":8871,\\\"short_content\\\":\\\"\\\\n\\\\n\\\\n\\\\n### 71. SimplifyPath(Medium)\\\\n\\\\nGiven an **absolute path** for a file (Unix-style), simplify it. Or in other words, convert it to the **canonical path**.\\\\n\\\\nIn a UNIX-style file system, a period `.` refers to the current directory. Furthermore, a double period `..` moves the directory up a level. For more information, see: [Absolute path vs relative path in Linux/Unix](https://www.linuxnix.com/abslute-path-vs-relative-path-in-linuxunix/)\\\\n\\\\n\\\",\\\"abbrlink\\\":\\\"i9becb\\\"},{\\\"title\\\":\\\"Leetcode-66~70\\\",\\\"categories\\\":[\\\"algorithm\\\",\\\"leetcode\\\"],\\\"tags\\\":[\\\"leetcode\\\",\\\"mysqrt\\\",\\\"binary-question\\\"],\\\"date\\\":\\\"2019-04-02T14:40:00.000Z\\\",\\\"series\\\":\\\"leetcode\\\",\\\"char_count\\\":8710,\\\"short_content\\\":\\\"\\\\n\\\\n\\\\n\\\\n### 66.Plus One(Easy)\\\\n\\\\nGiven a **non-empty** array of digits representing a non-negative integer, plus one to the integer.\\\\n\\\\nThe digits are stored such that the most significant digit is at the head of the list, and each element in the array contain a single digit.\\\\n\\\\n\\\",\\\"abbrlink\\\":\\\"z9pvg9\\\"},{\\\"title\\\":\\\"Leetcode-61~65\\\",\\\"categories\\\":[\\\"algorithm\\\",\\\"leetcode\\\"],\\\"tags\\\":[\\\"leetcode\\\"],\\\"date\\\":\\\"2019-04-02T06:18:00.000Z\\\",\\\"series\\\":\\\"leetcode\\\",\\\"char_count\\\":5624,\\\"short_content\\\":\\\"\\\\n\\\\n\\\\n\\\\n### 61.Rotate List(Medium)\\\\n\\\\nGiven a linked list, rotate the list to the right by *k* places, where *k* is non-negative.\\\\n\\\\n**Example 1:**\\\\n\\\\n\\\",\\\"abbrlink\\\":\\\"1cu6q2d\\\"},{\\\"title\\\":\\\"Leetcode-56~60\\\",\\\"categories\\\":[\\\"algorithm\\\",\\\"leetcode\\\"],\\\"tags\\\":[\\\"leetcode\\\",\\\"n-queens\\\",\\\"backtrack\\\"],\\\"date\\\":\\\"2019-03-30T13:16:00.000Z\\\",\\\"series\\\":\\\"leetcode\\\",\\\"char_count\\\":7029,\\\"short_content\\\":\\\"\\\\n\\\\n\\\\n\\\\n### 56.Merge Intervals(Medium)\\\\n\\\\nGiven a collection of intervals, merge all overlapping intervals.\\\\n\\\\n**Example 1:**\\\\n\\\\n\\\",\\\"abbrlink\\\":\\\"1kv61wq\\\"},{\\\"title\\\":\\\"Leetcode-51~55\\\",\\\"categories\\\":[\\\"algorithm\\\",\\\"leetcode\\\"],\\\"tags\\\":[\\\"leetcode\\\",\\\"n-queens\\\",\\\"backtrack\\\"],\\\"date\\\":\\\"2019-03-30T02:57:00.000Z\\\",\\\"series\\\":\\\"leetcode\\\",\\\"char_count\\\":11884,\\\"short_content\\\":\\\"\\\\n\\\\n\\\\n\\\\n### 51. N-Queens(Hard)\\\\n\\\\nThe *n*-queens puzzle is the problem of placing *n* queens on an *n*×*n* chessboard such that no two queens attack each other.\\\\n\\\\n\\\\n\\\\n\\\",\\\"abbrlink\\\":\\\"xmbex2\\\"},{\\\"title\\\":\\\"Leetcode-46~50\\\",\\\"categories\\\":[\\\"algorithm\\\",\\\"leetcode\\\"],\\\"tags\\\":[\\\"leetcode\\\",\\\"permutation\\\",\\\"backtrack\\\",\\\"mypow\\\"],\\\"date\\\":\\\"2019-03-27T07:39:00.000Z\\\",\\\"series\\\":\\\"leetcode\\\",\\\"char_count\\\":6440,\\\"short_content\\\":\\\"\\\\n\\\\n\\\\n\\\\n### 46. Permutation(Medium)\\\\n\\\\nGiven a collection of **distinct** integers, return all possible permutations.\\\\n\\\\n**Example:**\\\\n\\\\n\\\",\\\"abbrlink\\\":\\\"jywoys\\\"},{\\\"title\\\":\\\"Some Backtracking Problem In Leetcode\\\",\\\"categories\\\":[\\\"algorithm\\\",\\\"backtracking\\\"],\\\"tags\\\":[\\\"leetcode\\\",\\\"backtracking\\\"],\\\"date\\\":\\\"2019-03-24T08:26:00.000Z\\\",\\\"char_count\\\":10792,\\\"short_content\\\":\\\"\\\\n\\\\n\\\\n\\\\n### Introduction\\\\n\\\\n在Leetcode上做到某些题的时候，会发现这些题的解法大致都是差不多，将**ans容器**传递到某个方法中，这个方法一般有`dfs`，`backtracking`，`bfs`，等命名，然后方法中会有递归调用，然后到达某一个出口的时候，就会将当前的**tmp答案**放置到**ans容器**中，于是达到探索所有解的目的\\\\n\\\\n这篇大概也是各个题的题解，只是在评论区里看到有人[整理](https://leetcode.com/problems/permutations/discuss/18239/A-general-approach-to-backtracking-questions-in-Java-(Subsets-Permutations-Combination-Sum-Palindrome-Partioning))了，我就一起整理下来分析分析\\\\n\\\\n\\\",\\\"abbrlink\\\":\\\"1x7azit\\\"},{\\\"title\\\":\\\"DP Again\\\",\\\"categories\\\":[\\\"algorithm\\\",\\\"dp\\\"],\\\"tags\\\":[\\\"dp\\\"],\\\"date\\\":\\\"2019-03-22T06:14:00.000Z\\\",\\\"char_count\\\":18172,\\\"short_content\\\":\\\"\\\\n\\\\n\\\\n\\\\n### Introduction\\\\n\\\\n我们先分析Leetcode的55题，是从45题Jump Game II 跳过来的，因为这题比II要简单一点，只需要判断序列是否能jump到终点就行，而45题是要找最小的jump次数；\\\\n\\\\n为什么这题要拿出篇幅来分析？因为这题包含了很多东西： \\\\n\\\\n\\\",\\\"abbrlink\\\":\\\"1flo1c0\\\"},{\\\"title\\\":\\\"Leetcode-41~45\\\",\\\"categories\\\":[\\\"algorithm\\\",\\\"leetcode\\\"],\\\"tags\\\":[\\\"leetcode\\\"],\\\"date\\\":\\\"2019-03-20T20:03:00.000Z\\\",\\\"series\\\":\\\"leetcode\\\",\\\"char_count\\\":10695,\\\"short_content\\\":\\\"\\\\n\\\\n\\\\n\\\\n### 41. First Missing Postive(Hard)\\\\n\\\\nGiven an unsorted integer array, find the smallest missing positive integer.\\\\n\\\\n**Example 1:**\\\\n\\\\n\\\",\\\"abbrlink\\\":\\\"11z93zc\\\"},{\\\"title\\\":\\\"Leetcode-36~40\\\",\\\"categories\\\":[\\\"algorithm\\\",\\\"leetcode\\\"],\\\"tags\\\":[\\\"leetcode\\\",\\\"sudoku\\\",\\\"combination-sum\\\"],\\\"date\\\":\\\"2019-03-20T19:46:00.000Z\\\",\\\"series\\\":\\\"leetcode\\\",\\\"char_count\\\":8096,\\\"short_content\\\":\\\"\\\\n\\\\n\\\\n\\\\n### 36. Valid Sudoku(Medium)\\\\n\\\\nDetermine if a 9x9 Sudoku board is valid. Only the filled cells need to be validated **according to the following rules**:\\\\n\\\\n1. Each row must contain the digits `1-9` without repetition.\\\\n2. Each column must contain the digits `1-9` without repetition.\\\\n\\\",\\\"abbrlink\\\":\\\"v6ei19\\\"},{\\\"title\\\":\\\"再谈对象分代和GC事件\\\",\\\"categories\\\":[\\\"java\\\",\\\"jvm\\\",\\\"memory\\\"],\\\"tags\\\":[\\\"gc\\\",\\\"gc-event\\\",\\\"generation-type\\\"],\\\"date\\\":\\\"2019-03-18T20:46:00.000Z\\\",\\\"char_count\\\":2424,\\\"short_content\\\":\\\"\\\\n\\\\n### Introduction\\\\n\\\\n之前在搜 OOM 的时候，无意中发现了[https://plumbr.io/](https://plumbr.io/)这个网站，它们的产品就是做内存监控工具之类的，于是官网上也有很多关于 JVM 的 GC 方面的技术博客，简直和挖到宝藏了一样- -\\\\n\\\\n本篇主要是针对对象在堆上的分代和 GC 事件再做一些细致的了解，主要也是参考网站里的内容\\\\n\\\\n### Object Generation\\\\n\\\\n\\\",\\\"abbrlink\\\":\\\"wlvrl9\\\"},{\\\"title\\\":\\\"字节跳动2019-03-16后端笔试\\\",\\\"categories\\\":[\\\"algorithm\\\",\\\"notes\\\"],\\\"tags\\\":[\\\"笔试\\\"],\\\"date\\\":\\\"2019-03-16T22:22:00.000Z\\\",\\\"char_count\\\":6307,\\\"short_content\\\":\\\"\\\\n\\\\n\\\\n\\\\n### Introduction\\\\n\\\\n就A了签到题，我觉得这次笔试很简单了，可是后面3题没过一个case，题目不难，各种各样的失误8，说到底菜才是原罪，还是得多刷题\\\\n\\\\n和leecode不一样的是：\\\\n\\\\n\\\",\\\"abbrlink\\\":\\\"djlqql\\\"},{\\\"title\\\":\\\"Leetcode-31~35\\\",\\\"categories\\\":[\\\"algorithm\\\",\\\"leetcode\\\"],\\\"tags\\\":[\\\"leetcode\\\"],\\\"date\\\":\\\"2019-03-16T21:46:00.000Z\\\",\\\"series\\\":\\\"leetcode\\\",\\\"char_count\\\":7919,\\\"short_content\\\":\\\"\\\\n\\\\n\\\\n\\\\n### 31. Next Permutation(Medium)\\\\n\\\\nImplement **next permutation**, which rearranges numbers into the lexicographically next greater permutation of numbers.\\\\n\\\\nIf such arrangement is not possible, it must rearrange it as the lowest possible order (ie, sorted in ascending order).\\\\n\\\\n\\\",\\\"abbrlink\\\":\\\"dbne5d\\\"},{\\\"title\\\":\\\"Leetcode-26~30\\\",\\\"categories\\\":[\\\"algorithm\\\",\\\"leetcode\\\"],\\\"tags\\\":[\\\"leetcode\\\"],\\\"date\\\":\\\"2019-03-09T16:21:00.000Z\\\",\\\"series\\\":\\\"leetcode\\\",\\\"char_count\\\":12579,\\\"short_content\\\":\\\"\\\\n\\\\n\\\\n\\\\n### 26. Remove Duplicated From Sorted Array(Easy)\\\\n\\\\nGiven a sorted array *nums*, remove the duplicates [**in-place**](https://en.wikipedia.org/wiki/In-place_algorithm) such that each element appear only *once* and return the new length.\\\\n\\\\nDo not allocate extra space for another array, you must do this by **modifying the input array in-place** with O(1) extra memory.\\\\n\\\\n\\\",\\\"abbrlink\\\":\\\"448jer\\\"},{\\\"title\\\":\\\"Leetcode-21~25\\\",\\\"categories\\\":[\\\"algorithm\\\",\\\"leetcode\\\"],\\\"tags\\\":[\\\"leetcode\\\"],\\\"date\\\":\\\"2019-03-06T21:17:00.000Z\\\",\\\"series\\\":\\\"leetcode\\\",\\\"char_count\\\":10031,\\\"short_content\\\":\\\"\\\\n\\\\n\\\\n\\\\n### 21. Merge Two Sorted Lists(Easy)\\\\n\\\\nMerge two sorted linked lists and return it as a new list. The new list should be made by splicing together the nodes of the first two lists.\\\\n\\\\n**Example:**\\\\n\\\\n\\\",\\\"abbrlink\\\":\\\"1hrw4sv\\\"},{\\\"title\\\":\\\"Leetcode-16~20\\\",\\\"categories\\\":[\\\"algorithm\\\",\\\"leetcode\\\"],\\\"tags\\\":[\\\"leetcode\\\"],\\\"date\\\":\\\"2019-03-06T20:13:00.000Z\\\",\\\"series\\\":\\\"leetcode\\\",\\\"char_count\\\":8964,\\\"short_content\\\":\\\"\\\\n\\\\n\\\\n\\\\n### 16.3SumClosest(Medium)\\\\n\\\\nGiven an array `nums` of *n* integers and an integer `target`, find three integers in `nums` such that the sum is closest to `target`. Return the sum of the three integers. You may assume that each input would have exactly one solution.\\\\n\\\\n**Example:**\\\\n\\\\n\\\",\\\"abbrlink\\\":\\\"3yl2hx\\\"},{\\\"title\\\":\\\"Help GC A Favor & JIT Introduction\\\",\\\"categories\\\":[\\\"java\\\",\\\"jvm\\\",\\\"gc\\\"],\\\"tags\\\":[\\\"JVM\\\",\\\"GC\\\",\\\"JIT\\\",\\\"OOM\\\"],\\\"date\\\":\\\"2019-03-04T04:19:00.000Z\\\",\\\"char_count\\\":9173,\\\"short_content\\\":\\\"\\\\n\\\\n### Introduction\\\\n\\\\n之前我们了解过 GC 的很多行为和特点了，也大致知道 OOM 发生的地点和原因，然后还深入了解了 Java 中的 Reference\\\\n\\\\n接下来我们简单说一下如何避免 OOM，帮 GCor 们一个小忙\\\\n\\\\n### Help GC\\\\n\\\\n\\\",\\\"abbrlink\\\":\\\"12iaggv\\\"},{\\\"title\\\":\\\"Java's Refernece\\\",\\\"categories\\\":[\\\"java\\\",\\\"grammar\\\"],\\\"tags\\\":[\\\"reference-type\\\"],\\\"date\\\":\\\"2019-03-02T21:08:00.000Z\\\",\\\"char_count\\\":7461,\\\"short_content\\\":\\\"\\\\n\\\\n\\\\n\\\\n### Introduction\\\\n\\\\n本篇主要内容：\\\\n\\\\n1. Java 到底是值传递还是引用传递\\\\n2. Java 中的引用类型详解以其应用场景\\\\n\\\",\\\"abbrlink\\\":\\\"13tt0au\\\"},{\\\"title\\\":\\\"The Revelation of Java String\\\",\\\"categories\\\":[\\\"java\\\",\\\"jvm\\\",\\\"memory\\\"],\\\"tags\\\":[\\\"java-string\\\",\\\"string-pool\\\"],\\\"date\\\":\\\"2019-03-02T13:50:00.000Z\\\",\\\"char_count\\\":15597,\\\"short_content\\\":\\\"\\\\n\\\\n### Introduction\\\\n\\\\nJava 中的`String`其实有很多东西可以深入的，比如最快拼接效率，比如常量池，比如老生常谈的`==`问题\\\\n\\\\n研究它们的时候我们始终要记住，`String`是不可变的**（immutable）**\\\\n\\\\n还有比如它的本质是一个`char[]`数组这些事实就简单带过了\\\\n\\\\n\\\",\\\"abbrlink\\\":\\\"46bhg0\\\"},{\\\"title\\\":\\\"Leetcode-11~15\\\",\\\"categories\\\":[\\\"algorithm\\\",\\\"leetcode\\\"],\\\"tags\\\":[\\\"leetcode\\\"],\\\"date\\\":\\\"2019-02-27T21:42:00.000Z\\\",\\\"series\\\":\\\"leetcode\\\",\\\"char_count\\\":9913,\\\"short_content\\\":\\\"\\\\n\\\\n### 11. Container With Most Water(Medium)\\\\n\\\\nGiven _n_ non-negative integers _a1_, _a2_, ..., _an_ , where each represents a point at coordinate (_i_, _ai_). _n_ vertical lines are drawn such that the two endpoints of line _i_ is at (_i_, _ai_) and (_i_, 0). Find two lines, which together with x-axis forms a container, such that the container contains the most water.\\\\n\\\\n**Note:** You may not slant the container and _n_ is at least 2.\\\\n\\\\n\\\\n\\\\n\\\",\\\"abbrlink\\\":\\\"2gps3g\\\"},{\\\"title\\\":\\\"最近点对及其相关问题\\\",\\\"categories\\\":[\\\"algorithm\\\",\\\"notes\\\"],\\\"comments\\\":true,\\\"date\\\":\\\"2019-02-26T23:04:00.000Z\\\",\\\"tags\\\":[\\\"algorithm\\\",\\\"twopoint\\\"],\\\"char_count\\\":5984,\\\"short_content\\\":\\\"\\\\n\\\\n### Introduction\\\\n\\\\n二维坐标中有一堆点集，记为 P，假设 P 中至少有 2 个点，那么求出 P 中距离最近的两个点；\\\\n\\\\n首先为了问题准备好点和求两点距离的方法，其中如果两点距离的输入只有一个点，那么它的距离代表无穷大，它表示没有解\\\\n\\\\n```java\\\\nclass Point {\\\\n```\\\\n\\\",\\\"abbrlink\\\":\\\"1d9upzt\\\"},{\\\"title\\\":\\\"Leetcode-6~10\\\",\\\"categories\\\":[\\\"algorithm\\\",\\\"leetcode\\\"],\\\"tags\\\":[\\\"leetcode\\\"],\\\"date\\\":\\\"2019-02-17T13:18:00.000Z\\\",\\\"series\\\":\\\"leetcode\\\",\\\"char_count\\\":16445,\\\"short_content\\\":\\\"\\\\n\\\\n\\\\n\\\\n### 6. ZigZag Conversion(Medium)\\\\n\\\\nThe string `\\\\\\\"PAYPALISHIRING\\\\\\\"` is written in a zigzag pattern on a given number of rows like this: (you may want to display this pattern in a fixed font for better legibility)\\\\n\\\\n```graph\\\\nP   A   H   N\\\\n```\\\\n\\\",\\\"abbrlink\\\":\\\"t1f0vq\\\"},{\\\"title\\\":\\\"Hashing\\\",\\\"categories\\\":[\\\"data structures\\\",\\\"hash\\\"],\\\"tags\\\":[\\\"algorithm\\\",\\\"hash\\\"],\\\"date\\\":\\\"2019-02-02T20:40:00.000Z\\\",\\\"char_count\\\":5419,\\\"short_content\\\":\\\"\\\\n\\\\n\\\\n\\\\n### What is HashTable\\\\n\\\\nOf all structure we learn before like \\\\\\\"array\\\\\\\" or \\\\\\\"stack\\\\\\\", the element's position on their structure is not absolute, it's uncertain which means there is no pattern on it.  \\\\n\\\\nSo the searching operation was always base on \\\\\\\"comparing\\\\\\\",  the searching efficiency of them were dependence on the times they perform compare.\\\\n\\\\n\\\",\\\"abbrlink\\\":\\\"1f3qusx\\\"},{\\\"title\\\":\\\"Leetcode-1~5\\\",\\\"categories\\\":[\\\"algorithm\\\",\\\"leetcode\\\"],\\\"tags\\\":[\\\"leetcode\\\"],\\\"date\\\":\\\"2019-02-02T19:51:00.000Z\\\",\\\"series\\\":\\\"leetcode\\\",\\\"char_count\\\":19301,\\\"short_content\\\":\\\"\\\\n\\\\n\\\\n\\\\n### 1. TwoSum(Easy)\\\\n\\\\nGiven an array of integers, return **indices** of the two numbers such that they add up to a specific target.\\\\n\\\\nYou may assume that each input would have **exactly** one solution, and you may not use the *same* element twice.\\\\n\\\\n\\\",\\\"abbrlink\\\":\\\"pn2ezr\\\"},{\\\"title\\\":\\\"Tree Binary Tree\\\",\\\"categories\\\":[\\\"data structures\\\",\\\"tree\\\"],\\\"tags\\\":[\\\"algorithm\\\",\\\"binary-tree\\\",\\\"tree\\\",\\\"dfs\\\",\\\"bfs\\\"],\\\"date\\\":\\\"2019-01-30T21:36:20.000Z\\\",\\\"char_count\\\":4608,\\\"short_content\\\":\\\"\\\\n\\\\n\\\\n\\\\n### Basic Algorithm In Binary Tree\\\\n\\\\n#### Traverse\\\\n\\\\nA Tree is typically traversed in two ways:\\\\n\\\\n\\\",\\\"abbrlink\\\":\\\"1aew5v7\\\"},{\\\"title\\\":\\\"Tree Introduction\\\",\\\"categories\\\":[\\\"data structures\\\",\\\"tree\\\"],\\\"tags\\\":[\\\"algorithm\\\",\\\"binary-tree\\\"],\\\"date\\\":\\\"2019-01-28T15:11:00.000Z\\\",\\\"char_count\\\":5333,\\\"short_content\\\":\\\"\\\\n\\\\n\\\\n\\\\n### Should have a PLAN!\\\\n\\\\nI was asked a tree problem when I was having a face to face interview at *PayPal* last Friday, and I might failed on this question.\\\\n\\\\nIt's been too long that I'm almost forgot the knowledge of TREE, and I've never truly go over it and it's time to get it done.\\\\n\\\\n\\\",\\\"abbrlink\\\":\\\"1qvt6fv\\\"},{\\\"title\\\":\\\"Java并发编程第八坎\\\",\\\"categories\\\":[\\\"java\\\",\\\"concurrency\\\",\\\"《艺术》与《技术》\\\"],\\\"comments\\\":true,\\\"tags\\\":[\\\"java\\\",\\\"thread\\\",\\\"Lock-Api\\\",\\\"reentrantLock\\\",\\\"reentrantReadWriteLock\\\"],\\\"date\\\":\\\"2019-01-07T22:46:48.000Z\\\",\\\"series\\\":\\\"并发\\\",\\\"char_count\\\":15613,\\\"short_content\\\":\\\"\\\\n\\\\n\\\\n\\\\n### Introduction\\\\n\\\\n我们对Lock和AQS有了一定的了解了之后，可以尝试着接触一些Lock+AQS的基本实现了，本篇会了解到最基本的同步组件`ReentrantLock`和`ReentrantReadWriteLock`，前者提供了排他锁的实现，并且支持重入，后者在前者的基础上，支持锁的分级，写锁排他读锁共享。特别的，重入锁的获取还有公平和非公平之分，我们先从这部分入手。\\\\n\\\\n#### Fair Lock & Nonfair Lock\\\\n\\\\n\\\",\\\"abbrlink\\\":\\\"1u7rv30\\\"},{\\\"title\\\":\\\"CLH Lock Queue\\\",\\\"categories\\\":[\\\"data structures\\\",\\\"list\\\"],\\\"tags\\\":[\\\"algorithm\\\",\\\"clh-lock-queue\\\"],\\\"date\\\":\\\"2018-12-30T16:35:00.000Z\\\",\\\"char_count\\\":4711,\\\"short_content\\\":\\\"\\\\n\\\\n\\\\n\\\\n### Introduction\\\\n\\\\n在学习Java并发中的同步器源码的时候，注释中有提到过AQS的Node结构是参考CLH的一种变体：\\\\n\\\\n> The wait queue is a variant of a \\\\\\\"CLH\\\\\\\" (Craig, Landin, and Hagersten) lock queue. \\\\n>\\\\n\\\",\\\"abbrlink\\\":\\\"vywf17\\\"},{\\\"title\\\":\\\"Java并发编程第七坎-2\\\",\\\"categories\\\":[\\\"java\\\",\\\"concurrency\\\",\\\"《艺术》与《技术》\\\"],\\\"comments\\\":true,\\\"tags\\\":[\\\"java\\\",\\\"thread\\\",\\\"AQS\\\"],\\\"date\\\":\\\"2018-12-30T12:58:48.000Z\\\",\\\"series\\\":\\\"并发\\\",\\\"char_count\\\":19385,\\\"short_content\\\":\\\"\\\\n\\\\n\\\\n\\\\n### Introduction\\\\n\\\\n上节我们介绍了Java并发编程的一个新的阶段——Java并发包中的`Lock`接口以及`AbstractQueuedSynchronizer`的配合使用\\\\n\\\\n并且尝试实现了一个简单的独占锁Mutex，借此我们了解到，并发编程还能如此灵活与优雅\\\\n\\\\n\\\",\\\"abbrlink\\\":\\\"u4sgci\\\"},{\\\"title\\\":\\\"Java并发编程第七坎\\\",\\\"categories\\\":[\\\"java\\\",\\\"concurrency\\\",\\\"《艺术》与《技术》\\\"],\\\"comments\\\":true,\\\"tags\\\":[\\\"java\\\",\\\"thread\\\",\\\"AQS\\\",\\\"Lock-Api\\\"],\\\"date\\\":\\\"2018-12-25T22:22:48.000Z\\\",\\\"series\\\":\\\"并发\\\",\\\"char_count\\\":9004,\\\"short_content\\\":\\\"\\\\n\\\\n\\\\n\\\\n\\\\n\\\\n### Introduction\\\\n\\\\n> 事前吐槽：*Doug Lea*老爷子的注释可真难读，也许是我英语太菜鸡了- -（本来还挺自信的，现在哭着学英语）\\\\n\\\\n\\\",\\\"abbrlink\\\":\\\"7kdfk8\\\"},{\\\"title\\\":\\\"Docker Volumes\\\",\\\"categories\\\":[\\\"docker\\\",\\\"notes\\\"],\\\"tags\\\":[\\\"docker\\\",\\\"volume\\\"],\\\"date\\\":\\\"2018-12-05T10:23:09.000Z\\\",\\\"series\\\":\\\"docker\\\",\\\"char_count\\\":8431,\\\"short_content\\\":\\\"\\\\n\\\\n\\\\n\\\\n### Introduction\\\\n\\\\n> **Volumes are the preferred mechanism for persisting data generated by and used by Docker containers.** While [bind mounts](https://docs.docker.com/storage/bind-mounts/) are dependent on the directory structure of the host machine, **volumes are completely managed by Docker**. Volumes have several advantages over bind mounts:\\\\n>\\\\n> - Volumes are easier to back up or migrate than bind mounts.\\\\n> - You can manage volumes using Docker CLI commands or the Docker API.\\\\n\\\",\\\"abbrlink\\\":\\\"1ae6lng\\\"},{\\\"title\\\":\\\"Docker Persist Data Overview\\\",\\\"categories\\\":[\\\"docker\\\",\\\"notes\\\"],\\\"tags\\\":[\\\"docker\\\",\\\"volume\\\"],\\\"date\\\":\\\"2018-12-04T09:44:33.000Z\\\",\\\"series\\\":\\\"docker\\\",\\\"char_count\\\":7276,\\\"short_content\\\":\\\"\\\\n\\\\n\\\\n\\\\n### Introduction\\\\n\\\\nBy default all files created inside a container are stored on a writable container layer.\\\\n\\\\nThat means that the data doesn't persist when that container no longer exists, and it can be difficult to get the data out of the container if another process needs it.\\\\n\\\\n\\\",\\\"abbrlink\\\":\\\"lt42s8\\\"},{\\\"title\\\":\\\"Docker ConceptReview\\\",\\\"categories\\\":[\\\"docker\\\",\\\"notes\\\"],\\\"tags\\\":[\\\"docker\\\"],\\\"date\\\":\\\"2018-12-02T12:39:09.000Z\\\",\\\"series\\\":\\\"docker\\\",\\\"char_count\\\":7660,\\\"short_content\\\":\\\"\\\\n\\\\n\\\\n\\\\n### Introduction\\\\n\\\\nIn this section, we will go through all the main concepts of docker technologies such as : **Docker Engine**, **Docker Architecture**, **Docker underlying technology**.\\\\n\\\\nBasically reprinted from: https://docs.docker.com/engine/docker-overview, but I will make some adjustment for better understanding.\\\\n\\\\n\\\",\\\"abbrlink\\\":\\\"rx7jt4\\\"},{\\\"title\\\":\\\"Docker Stack\\\",\\\"categories\\\":[\\\"docker\\\",\\\"notes\\\"],\\\"tags\\\":[\\\"docker\\\"],\\\"date\\\":\\\"2018-11-29T16:46:00.000Z\\\",\\\"series\\\":\\\"docker\\\",\\\"char_count\\\":6260,\\\"short_content\\\":\\\"\\\\n\\\\n### Introduction\\\\n\\\\nAt the part of \\\\\\\"Container\\\\\\\", we've know we can define a `docker-compose.yaml` to deploy a service on our swarm so it can run on multiple machine.\\\\n\\\\nAs we practice before, our service just contains one container: a python app that provide web service with Flask.\\\\n\\\\nBut did you remember that sentence ? **Services are really just \\\\\\\"Containers in Production\\\\\\\"**\\\\n\\\\n\\\",\\\"abbrlink\\\":\\\"u7sd0w\\\"},{\\\"title\\\":\\\"Docker Swarm&ClusterSetup\\\",\\\"categories\\\":[\\\"docker\\\",\\\"notes\\\"],\\\"tags\\\":[\\\"docker\\\",\\\"cluster\\\",\\\"swarm\\\"],\\\"date\\\":\\\"2018-11-28T21:06:03.000Z\\\",\\\"series\\\":\\\"docker\\\",\\\"char_count\\\":10989,\\\"short_content\\\":\\\"\\\\n\\\\n\\\\n\\\\n### Introduction\\\\n\\\\nIn the last post, we discussed the relationship between Application and Service. \\\\n\\\\nSo they say: **Services are really just \\\\\\\"Containers in Production\\\\\\\".**\\\\n\\\\n\\\",\\\"abbrlink\\\":\\\"1toixsk\\\"},{\\\"title\\\":\\\"Docker Service&Composefile\\\",\\\"categories\\\":[\\\"docker\\\",\\\"notes\\\"],\\\"tags\\\":[\\\"docker\\\",\\\"compose-file\\\"],\\\"date\\\":\\\"2018-11-27T12:19:02.000Z\\\",\\\"series\\\":\\\"docker\\\",\\\"char_count\\\":5865,\\\"short_content\\\":\\\"\\\\n\\\\n\\\\n\\\\n### Service\\\\n\\\\nIn a distributed application, different pieces of the app are called “services.” For example, if you imagine a video sharing site, it probably includes **[1]a service for storing application data in a database**, **[2]a service for video transcoding in the background after a user uploads something**, **[3]a service for the front-end**, and so on.\\\\n\\\\nServices are really just “containers in production.” A service only runs one image, but it codifies the way that image runs:\\\\n\\\\n\\\",\\\"abbrlink\\\":\\\"zkr55u\\\"},{\\\"title\\\":\\\"Jenkins Introductions&Setup\\\",\\\"categories\\\":[\\\"jenkins\\\",\\\"notes\\\"],\\\"tags\\\":[\\\"setup\\\",\\\"jenkins\\\"],\\\"date\\\":\\\"2018-11-19T14:51:00.000Z\\\",\\\"series\\\":\\\"jenkins\\\",\\\"char_count\\\":4106,\\\"short_content\\\":\\\"\\\\n\\\\n### Introductions\\\\n\\\\n首先 Jenkins 要吐槽一下，Jenkins 的 Logo 真的是太丑了，虽然很明显是一个管家形象- -\\\\n\\\\n\\\\n\\\\nJenkins 的默认 UI 也有点丑，还不如官网的 UI 好看\\\\n\\\\n\\\",\\\"abbrlink\\\":\\\"1arzjog\\\"},{\\\"title\\\":\\\"写在21岁的最后一天\\\",\\\"categories\\\":[\\\"essay\\\"],\\\"date\\\":\\\"2018-11-17T15:53:00.000Z\\\",\\\"char_count\\\":3466,\\\"short_content\\\":\\\"\\\\n\\\\n\\\\n\\\\n#### 0. 特定的时刻\\\\n\\\\n我是完全不过生日的, 不要礼物不要钱, 不请朋友大鱼大肉也不买蛋糕许愿望更不拉帮结派开party, 过生日我只会想家人想妈妈\\\\n\\\\n但是今年这个生日有点特殊吧\\\\n\\\\n\\\",\\\"abbrlink\\\":\\\"1xetsy3\\\"},{\\\"title\\\":\\\"关于JVM的GC行为和内存分配\\\",\\\"categories\\\":[\\\"java\\\",\\\"jvm\\\",\\\"gc\\\"],\\\"comments\\\":true,\\\"date\\\":\\\"2018-11-17T15:35:00.000Z\\\",\\\"tags\\\":[\\\"jvm\\\",\\\"generation-type\\\",\\\"gc\\\",\\\"gc算法\\\",\\\"root-point\\\",\\\"saft-point\\\",\\\"safe-area\\\"],\\\"series\\\":\\\"JVM\\\",\\\"char_count\\\":6519,\\\"short_content\\\":\\\"\\\\n\\\\n### 对象分代和朝生夕灭\\\\n\\\\n对象所在的内存区按照对象存活的时间长久会简单分为：新生代、老年代\\\\n\\\\n**Garbage Collector**的行为和对象内存所在的区域有很大关系，所以在分析**Collector**之前，我们得先了解一下对象内存的分区\\\\n\\\\n我们需要清楚的是，Java 中**98%**的对象都是**朝生夕灭**的，所以新生代区往往是 GC 要重点照顾的区域\\\\n\\\\n\\\",\\\"abbrlink\\\":\\\"jhpq7e\\\"},{\\\"title\\\":\\\"Docker Containers&Dockerfile\\\",\\\"categories\\\":[\\\"docker\\\",\\\"notes\\\"],\\\"tags\\\":[\\\"docker\\\"],\\\"date\\\":\\\"2018-11-16T15:05:11.000Z\\\",\\\"series\\\":\\\"docker\\\",\\\"char_count\\\":9082,\\\"short_content\\\":\\\"\\\\n\\\\n### Introduction\\\\n\\\\n本篇主要介绍Docker里面Containers的概念，以及它的定义\\\\n\\\\n还有就是如何分享你创建的Containers到hub上面\\\\n\\\\n需要注意的是，containers的定义其实就是image的定义\\\\n\\\\n\\\",\\\"abbrlink\\\":\\\"uh480l\\\"},{\\\"title\\\":\\\"Tess login on Jenkins\\\",\\\"categories\\\":[\\\"eBay\\\"],\\\"tags\\\":[\\\"tess\\\"],\\\"date\\\":\\\"2018-11-16T14:10:08.000Z\\\",\\\"char_count\\\":6842,\\\"short_content\\\":\\\"\\\\n\\\\n\\\\n\\\\n### Tess login on Jenkins\\\\n\\\\n#### Use tess with Rheos tess-base agent\\\\n\\\\nAssume that you are at \\\\\\\"Job Configure\\\\\\\" panel now.\\\\n\\\\n\\\",\\\"abbrlink\\\":\\\"1gukab6\\\"},{\\\"title\\\":\\\"Introductions of eBay Tess\\\",\\\"categories\\\":[\\\"eBay\\\"],\\\"tags\\\":[\\\"eBay\\\",\\\"tess\\\"],\\\"date\\\":\\\"2018-11-15T16:18:00.000Z\\\",\\\"char_count\\\":6118,\\\"short_content\\\":\\\"\\\\n\\\\n### Tess\\\\n\\\\n#### 0. What is Tess?\\\\n\\\\nTess.IO is eBay’s cluster manager, with a vision of ensuring a world-class **build, ship and run** experience for eBay’s applications at scale, while ensuring high efficiency, security, and agility to the developers. Tess.IO leverages Kubernetes under its hood. Kubernetes (commonly referred to as “k8s”) is an open source container cluster manager that aims to provide a “platform for automating deployment, scaling, and operations of application containers across clusters of hosts.”\\\\n\\\\nTess makes DevOps a breeze.\\\\n\\\\n\\\",\\\"abbrlink\\\":\\\"2032k5\\\"},{\\\"title\\\":\\\"关于JVM的运行时数据区上的GC\\\",\\\"categories\\\":[\\\"java\\\",\\\"jvm\\\",\\\"gc\\\"],\\\"comments\\\":true,\\\"date\\\":\\\"2018-11-14T22:45:00.000Z\\\",\\\"tags\\\":[\\\"jvm\\\",\\\"gc\\\",\\\"reference-type\\\",\\\"finalize\\\"],\\\"series\\\":\\\"JVM\\\",\\\"char_count\\\":2770,\\\"short_content\\\":\\\"\\\\n\\\\n\\\\n\\\\n### Introduction\\\\n\\\\n本篇主要介绍什么是GC，GC一般发生在哪里，GC在这些地方都干些什么\\\\n\\\\n顺带简单提一下四种**引用类型**以及`finalize()`方法\\\\n\\\\n\\\",\\\"abbrlink\\\":\\\"d5ykz8\\\"},{\\\"title\\\":\\\"关于JVM的对象创建与访问\\\",\\\"categories\\\":[\\\"java\\\",\\\"jvm\\\",\\\"memory\\\"],\\\"comments\\\":true,\\\"date\\\":\\\"2018-11-14T21:45:00.000Z\\\",\\\"tags\\\":[\\\"jvm\\\",\\\"jvm对象创建\\\"],\\\"series\\\":\\\"JVM\\\",\\\"char_count\\\":3028,\\\"short_content\\\":\\\"\\\\n\\\\n### HotSpot 虚拟机对象内存\\\\n\\\\n深入讨论 HotSpot 虚拟机在 Java 堆中的对象分配、内存布局和对象访问的过程\\\\n\\\\n#### 对象创建流程\\\\n\\\\n##### 过程\\\\n\\\\n\\\",\\\"abbrlink\\\":\\\"18669ga\\\"},{\\\"title\\\":\\\"Docker Orientation&Setup\\\",\\\"categories\\\":[\\\"docker\\\",\\\"notes\\\"],\\\"tags\\\":[\\\"docker\\\"],\\\"date\\\":\\\"2018-11-14T13:50:11.000Z\\\",\\\"series\\\":\\\"docker\\\",\\\"char_count\\\":7510,\\\"short_content\\\":\\\"\\\\n\\\\n### Docker concepts\\\\n\\\\nDocker is a platform for developers and sysadmins to **develop, deploy, and run** applications with containers. The use of Linux containers to deploy applications is called _containerization_. Containers are not new, but their use for easily deploying applications is.\\\\n\\\\nContainerization is increasingly popular because containers are:\\\\n\\\\n- Flexible: Even the most complex applications can be containerized.\\\\n- Lightweight: Containers leverage and share the host kernel.\\\\n\\\",\\\"abbrlink\\\":\\\"1ei198o\\\"},{\\\"title\\\":\\\"kafka-topic-storage-detail\\\",\\\"categories\\\":[\\\"kafka\\\",\\\"notes\\\"],\\\"tags\\\":[\\\"kafka\\\"],\\\"date\\\":\\\"2018-11-06T16:34:00.000Z\\\",\\\"char_count\\\":6330,\\\"short_content\\\":\\\"\\\\n\\\\n### Topic & Partition\\\\n\\\\nkafka 中的 Message 以 topic 为分类去组织的，每个 topic 又可以分为不同的 partition 去存储：\\\\n\\\\n\\\\n\\\\n我们引用官方的 Introduction 中的一节，看官方是怎么解释的：\\\\n\\\\n\\\",\\\"abbrlink\\\":\\\"1ro5m3y\\\"},{\\\"title\\\":\\\"kafka-helloworld-concept\\\",\\\"categories\\\":[\\\"kafka\\\",\\\"notes\\\"],\\\"tags\\\":[\\\"kafka\\\"],\\\"date\\\":\\\"2018-11-06T15:39:00.000Z\\\",\\\"char_count\\\":6890,\\\"short_content\\\":\\\"\\\\n\\\\n### 前言\\\\n\\\\n因为Intern Job的原因，要接触到kafka和Microservice，虽然目前接触的不是很多，对于kafka的场景还不是很熟悉，但是总觉得这个东西是必学的，也是很重要的一种趋势\\\\n\\\\n于是前几天给帖老板写的Graduation Design里写的就是kafka+springboot+opentracing的tracing监控系统\\\\n\\\\n难度还是有的，springboot刚上手，opentracing的api在前一个月的工作里面也算是熟悉了，关键就是kafka以及如何把这几个玩意整合起来\\\\n\\\\n\\\",\\\"abbrlink\\\":\\\"u28b7l\\\"},{\\\"title\\\":\\\"微服务架构理论基础-康威定律\\\",\\\"categories\\\":[\\\"reprinted\\\"],\\\"date\\\":\\\"2018-11-06T10:44:01.000Z\\\",\\\"char_count\\\":6981,\\\"short_content\\\":\\\"\\\\n\\\\n### 前言\\\\n\\\\n> 可能出乎很多人意料之外的一个事实是，微服务很多核心理念其实在半个世纪前的一篇文章中就被阐述过了，而且这篇文章中的很多论点在软件开发飞速发展的这半个世纪中竟然一再被验证，这就是康威定律。\\\\n\\\\n### 概述\\\\n\\\\n微服务是最近非常火热的新概念，大家都在追，也都觉得很对，但是似乎没有很充足的理论基础说明这是正确的，给人的感觉是 **不明觉厉** 。前段时间看了Mike Amundsen [《远距离条件下的康威定律——分布式世界中实现团队构建》](http://www.infoq.com/cn/presentations/team-building-implementation-in-distributed-world)（是Design RESTful API的作者）在InfoQ上的一个分享，觉得很有帮助，结合自己的一些思考，整理了该演讲的内容。\\\\n\\\\n\\\",\\\"abbrlink\\\":\\\"pjff39\\\"},{\\\"title\\\":\\\"微服务（Microservice）那点事\\\",\\\"categories\\\":[\\\"reprinted\\\"],\\\"date\\\":\\\"2018-11-06T10:21:00.000Z\\\",\\\"char_count\\\":7793,\\\"short_content\\\":\\\"\\\\n\\\\n### 前言\\\\n\\\\n> 微服务架构被提出很短的时间内，就被越来越多的开发人员推崇，简单来说其主要的目的是有效的拆分应用，实现敏捷开发和部署 。\\\\n>\\\\n> 本分享即尝试介绍微服务架构的一些实施细节和要求，探询微服务架构的由来，并最终提供我们团队内部的一些实践总结，希望对大家有帮助。\\\\n\\\\n### WHAT - 什么是微服务\\\\n\\\\n\\\",\\\"abbrlink\\\":\\\"1kb6gry\\\"},{\\\"title\\\":\\\"Graduation Design\\\",\\\"categories\\\":[\\\"essay\\\"],\\\"comments\\\":true,\\\"date\\\":\\\"2018-11-02T21:56:10.000Z\\\",\\\"char_count\\\":1754,\\\"short_content\\\":\\\"\\\\n\\\\n#### Graduation Design\\\\n\\\\n- Title：Tracing Monitoring System of Kafka-Cluster with Opentracing API\\\\n- Framework：B/S\\\\n- Technology stack：\\\\n\\\\n  - back-end：\\\\n\\\\n\\\",\\\"abbrlink\\\":\\\"q0aas8\\\"},{\\\"title\\\":\\\"地痞（DP）成长记\\\",\\\"categories\\\":[\\\"algorithm\\\",\\\"dp\\\"],\\\"comments\\\":true,\\\"tags\\\":[\\\"algorithm\\\",\\\"dp\\\"],\\\"date\\\":\\\"2018-08-30T20:58:01.000Z\\\",\\\"char_count\\\":19492,\\\"short_content\\\":\\\"\\\\n\\\\n\\\\n\\\\n### 大声BB\\\\n\\\\n为了以后看到一道我知道是用DP但是不知道如何去DP的问题再也不会束手无策\\\\n\\\\n决心做一个地痞，至少下次看到一个DP不会再被它DP\\\\n\\\\n\\\",\\\"abbrlink\\\":\\\"188zp6j\\\"},{\\\"title\\\":\\\"AVL树和红黑树\\\",\\\"categories\\\":[\\\"data structures\\\",\\\"tree\\\"],\\\"comments\\\":true,\\\"date\\\":\\\"2018-08-27T15:05:00.000Z\\\",\\\"tags\\\":[\\\"BST\\\",\\\"AVL\\\",\\\"RBT\\\",\\\"algorithm\\\",\\\"tree\\\"],\\\"char_count\\\":8694,\\\"short_content\\\":\\\"\\\\n\\\\n### 小声 BB\\\\n\\\\n本篇尽量不 po 代码，仅仅过一遍 AVL 树和红黑树\\\\n\\\\n其中红黑树更是在 HashMap 中大展身手，肯定要研究一下为什么他们要用到 RBT\\\\n\\\\n---\\\\n\\\\n\\\",\\\"abbrlink\\\":\\\"wji6g0\\\"},{\\\"title\\\":\\\"查找大礼包\\\",\\\"categories\\\":[\\\"algorithm\\\",\\\"searching\\\"],\\\"comments\\\":true,\\\"date\\\":\\\"2018-08-22T13:10:00.000Z\\\",\\\"tags\\\":[\\\"algorithm\\\",\\\"search\\\"],\\\"char_count\\\":13106,\\\"short_content\\\":\\\"\\\\n\\\\n\\\\n\\\\n#### 小声BB\\\\n\\\\n整理一波查找相关的东西\\\\n\\\\n- 几个元素查找算法如：\\\\n  - 顺序查找\\\\n\\\",\\\"abbrlink\\\":\\\"bg6w8m\\\"},{\\\"title\\\":\\\"把HashMap安排得明明白白\\\",\\\"categories\\\":[\\\"java\\\",\\\"collections-framework\\\"],\\\"comments\\\":true,\\\"date\\\":\\\"2018-08-16T12:12:21.000Z\\\",\\\"tags\\\":[\\\"hashmap\\\",\\\"collections-framework\\\"],\\\"series\\\":\\\"从头到尾读\\\",\\\"char_count\\\":24270,\\\"short_content\\\":\\\"\\\\n\\\\n### 前言\\\\n\\\\n一言难尽 直接开始吧 时间有限 就不一一解读接口了\\\\n\\\\n这篇是逐行级别的`HashMap`的**“基础操作”**源码解读，仅仅分析一些核心的**单元素基础操作（CRUD）**，尽可能从大框架思路去分析实现思路，一些太细的变量和无关操作，就不分析太多了\\\\n\\\\n本篇因为时间和精力有限，也跳过了一些很底层的分析如 hash 计算，比特位计算等，网上还有好多大神对于这个分析的比我好得多\\\\n\\\\n\\\",\\\"abbrlink\\\":\\\"ofa68o\\\"},{\\\"title\\\":\\\"算法回收站\\\",\\\"categories\\\":[\\\"algorithm\\\",\\\"notes\\\"],\\\"comments\\\":true,\\\"date\\\":\\\"2018-08-11T13:41:10.000Z\\\",\\\"tags\\\":[\\\"algorithm\\\"],\\\"char_count\\\":2124,\\\"short_content\\\":\\\"\\\\n\\\\n### 前言\\\\n\\\\n这篇记录下从今天开始，复习到、新遇到的所有算法题\\\\n\\\\n- 栈相关\\\\n- 数学逻辑相关\\\\n\\\\n---\\\\n\\\",\\\"abbrlink\\\":\\\"8lcrnu\\\"},{\\\"title\\\":\\\"记一次设计模式之旅\\\",\\\"categories\\\":[\\\"design-pattern\\\"],\\\"comments\\\":true,\\\"date\\\":\\\"2018-08-09T15:21:33.000Z\\\",\\\"tags\\\":[\\\"design-pattern\\\"],\\\"char_count\\\":18508,\\\"short_content\\\":\\\"\\\\n\\\\n\\\\n\\\\n### 前言\\\\n\\\\n我\\\\n\\\\n面试（大约两个月前）\\\\n\\\\n\\\",\\\"abbrlink\\\":\\\"9h3hmp\\\"},{\\\"title\\\":\\\"Java并发编程第六坎\\\",\\\"categories\\\":[\\\"java\\\",\\\"concurrency\\\",\\\"《艺术》与《技术》\\\"],\\\"comments\\\":true,\\\"tags\\\":[\\\"java\\\",\\\"thread\\\",\\\"dead-lock\\\",\\\"wait/notify\\\",\\\"consumer/producer\\\",\\\"double-check-singleton\\\"],\\\"date\\\":\\\"2018-07-25T21:33:48.000Z\\\",\\\"series\\\":\\\"并发\\\",\\\"char_count\\\":11132,\\\"short_content\\\":\\\"\\\\n\\\\n\\\\n### 前言\\\\n\\\\n不知不觉写到第六坎了，前面刀剑磨刀石内功心法都有了，感觉自己应该很厉害了，其实不是，这一个月因为考试末尾和实习，断断续续的看，反反复复的看，越看越精神，越看越心虚。\\\\n\\\\n无论怎么说，短板还是得慢慢补上来，保持谦逊，虚心学习。\\\\n\\\\n回到整体，前面由内到外说了Java并发中很基本的几件事：\\\\n\\\",\\\"abbrlink\\\":\\\"139027a\\\"},{\\\"title\\\":\\\"Java并发编程第五坎\\\",\\\"categories\\\":[\\\"java\\\",\\\"concurrency\\\",\\\"《艺术》与《技术》\\\"],\\\"comments\\\":true,\\\"tags\\\":[\\\"java\\\",\\\"thread\\\",\\\"JMM\\\",\\\"happens-before\\\",\\\"volatile语义\\\",\\\"锁语义\\\"],\\\"date\\\":\\\"2018-07-21T19:33:48.000Z\\\",\\\"series\\\":\\\"并发\\\",\\\"char_count\\\":9926,\\\"short_content\\\":\\\"\\\\n\\\\n### 前言\\\\n\\\\n前面说了好多好多刀枪剑，还说了一些最前置的内功心法，这回说说更深层的内功心法——**JMM，Java Memory Model，Java 内存模型！**\\\\n\\\\nJava 线程之间的通信对程序员是完全透明的（你是很难感知得到的），所以内存可见性问题经常称为并发的通病之一，这坎说的内存模型，是让你更好地去感知，去推断线程内存通信的有力武器。\\\\n\\\\n这坎基本就是*《核心》*的第三章内容，我就这书总结一下，然后调一下排版，主要说的内容：\\\\n\\\\n\\\",\\\"abbrlink\\\":\\\"1xo3tpx\\\"},{\\\"title\\\":\\\"Java并发编程第四坎\\\",\\\"categories\\\":[\\\"java\\\",\\\"concurrency\\\",\\\"《艺术》与《技术》\\\"],\\\"comments\\\":true,\\\"tags\\\":[\\\"java\\\",\\\"thread\\\",\\\"volatile\\\",\\\"synchronized\\\"],\\\"date\\\":\\\"2018-07-18T14:16:48.000Z\\\",\\\"series\\\":\\\"并发\\\",\\\"char_count\\\":11853,\\\"short_content\\\":\\\"\\\\n\\\\n### 前言\\\\n\\\\n这回说说 Java 并发编程第四坎，最常用的**volatile 和 synchronized 关键字**，这两个关键字是理解 java 同步编程的第一步，特别是**synchronized 关键字**\\\\n\\\\n而在*《Java 多线程编程核心技术》*的第 2.1 节中，作者不经意的道出了**线程同步的真谛之一：避免脏读**\\\\n\\\\n- **关键字的解说**\\\\n  - **volatile 的含义、底层实现和使用**\\\\n\\\",\\\"abbrlink\\\":\\\"db3vx3\\\"},{\\\"title\\\":\\\"Java并发编程第三坎\\\",\\\"categories\\\":[\\\"java\\\",\\\"concurrency\\\",\\\"《艺术》与《技术》\\\"],\\\"comments\\\":true,\\\"tags\\\":[\\\"java\\\",\\\"thread\\\",\\\"CAS\\\",\\\"锁分类\\\"],\\\"date\\\":\\\"2018-07-18T14:15:22.000Z\\\",\\\"series\\\":\\\"并发\\\",\\\"char_count\\\":4267,\\\"short_content\\\":\\\"\\\\n\\\\n\\\\n\\\\n### 前言\\\\n\\\\n前两篇基本说了线程的基本概念和基本使用，这回说说Java并发编程第三坎，关于锁的好多基本概念的提前了解\\\\n\\\\n在讲锁之前，我们还需要介绍一个很重要的原理——CAS（Compare And Swap）操作，这个操作是保证并发过程中每个操作具有**“原子性”**的利器\\\\n\\\\n\\\",\\\"abbrlink\\\":\\\"1h1ww1y\\\"},{\\\"title\\\":\\\"Java并发编程第二坎\\\",\\\"categories\\\":[\\\"java\\\",\\\"concurrency\\\",\\\"《艺术》与《技术》\\\"],\\\"comments\\\":true,\\\"tags\\\":[\\\"java\\\",\\\"thread\\\",\\\"interrupt\\\",\\\"stop&suspend&resume\\\"],\\\"date\\\":\\\"2018-07-15T10:53:22.000Z\\\",\\\"series\\\":\\\"并发\\\",\\\"char_count\\\":12405,\\\"short_content\\\":\\\"\\\\n\\\\n\\\\n\\\\n### 前言\\\\n\\\\n前一篇基本说了线程的基本概念和如何创建一个线程，以及非常基本的几个线程方法，接下来我们说说线程的前几个控制相关的方法，包括和暂停一个线程（PAUSE）、让暂停的线程恢复（RESUME）、让线程终止（STOP）\\\\n\\\\n这篇我们但是这几个方法不能直接去用，因为这些方法都**过期了**！下面就着Java官方的文档解释，说说为什么过期这几个方法，以及贴出官方给的模板方法去实现这几个过期方法，具体的实现会在后面有例子\\\\n\\\\n\\\",\\\"abbrlink\\\":\\\"1clnpuk\\\"},{\\\"title\\\":\\\"计算机网络-谢希仁-2\\\",\\\"categories\\\":[\\\"booknotes\\\",\\\"计算机网络\\\"],\\\"comments\\\":true,\\\"date\\\":\\\"2018-07-03T20:44:33.000Z\\\",\\\"tags\\\":[\\\"计算机网络\\\"],\\\"series\\\":\\\"《计算机网络》\\\",\\\"char_count\\\":3044,\\\"short_content\\\":\\\"\\\\n\\\\n### Chapter2-物理层\\\\n\\\\n物理层是计网体系结构中的最下面一层，本章主要介绍：\\\\n\\\\n1. 物理层的基本任务\\\\n2. 几种常用的信道复用技术\\\\n3. 几种常用的宽带接入技术\\\\n\\\\n\\\",\\\"abbrlink\\\":\\\"1nz333d\\\"},{\\\"title\\\":\\\"计算机网络-谢希仁-1\\\",\\\"categories\\\":[\\\"booknotes\\\",\\\"计算机网络\\\"],\\\"comments\\\":true,\\\"date\\\":\\\"2018-06-30T10:28:33.000Z\\\",\\\"tags\\\":[\\\"计算机网络\\\"],\\\"series\\\":\\\"《计算机网络》\\\",\\\"char_count\\\":7267,\\\"short_content\\\":\\\"\\\\n\\\\n### 前言\\\\n\\\\n一周前考完了计算机网络，不得不说，计算机网络确实是一个精妙而繁杂的体系产物，虽然民大的考试都很水，但是计网这门课我是认认真真复习好了的，并不是当作考试去复习，每个点都看了，书上的课后习题都大概刷了 80%（谢希仁前辈出的这本书，习题量很多），基本上每个点都吃透了一遍。\\\\n\\\\n虽然后面还有两门考试，但很容易就过，也不需要准备，主要的复习科目也考完了，所以趁热打铁，马上进行计网的笔记整理和复习。\\\\n\\\\n因为学时有限，学校上的课程只教到第五章运输层，后面的没教，我准备先把前五章的笔记都整理下来，再继续看后面的内容，看完再整理。\\\\n\\\\n\\\",\\\"abbrlink\\\":\\\"1k7g0p3\\\"},{\\\"title\\\":\\\"Java并发编程第一坎\\\",\\\"categories\\\":[\\\"java\\\",\\\"concurrency\\\",\\\"《艺术》与《技术》\\\"],\\\"comments\\\":true,\\\"tags\\\":[\\\"java\\\",\\\"thread\\\",\\\"wait/notify\\\"],\\\"date\\\":\\\"2018-06-05T22:09:00.000Z\\\",\\\"series\\\":\\\"并发\\\",\\\"char_count\\\":13559,\\\"short_content\\\":\\\"\\\\n\\\\n### 前言\\\\n\\\\n本**系列**文章主要是为 Java 并发入门做铺垫，集中清点：\\\\n\\\\n- **Thread 的基本概念**\\\\n- **生命周期**\\\\n- **创建和使用**\\\\n- **线程的魅力所在**\\\\n\\\",\\\"abbrlink\\\":\\\"bu9klx\\\"},{\\\"title\\\":\\\"从头到尾读ArrayList\\\",\\\"categories\\\":[\\\"java\\\",\\\"collections-framework\\\"],\\\"comments\\\":true,\\\"date\\\":\\\"2018-06-05T08:31:21.000Z\\\",\\\"tags\\\":[\\\"arraylist\\\",\\\"collections-framework\\\"],\\\"series\\\":\\\"从头到尾读\\\",\\\"char_count\\\":15573,\\\"short_content\\\":\\\"\\\\n\\\\n#### ArrayList类\\\\n\\\\n对终于要正式开始读**ArrayList**的源码了，虽然**ArrayList**的源码价值并不是那么地大，但作为集合框架源码阅读的第一站来说，我选择了在这里站稳脚跟\\\\n\\\\n这个计划搁置了很久，大概有15天，中间跑去面试了一个星期，面试下来发现自己的基础已经忘的差不多了，决定回来好好沉淀一段时间，暑期实习offer有没有已经不重要了，**剑指秋招！**\\\\n\\\\n为什么要读它，因为线性表几乎是数据结构的基础必备，昨晚花了将近1小时手撸了一个ArrayList的自实现，再搭配源码来看**自己在基础方法上有哪些没考虑到的点**，以及**实际投入使用的ArrayList到底优秀在哪里**\\\\n\\\\n\\\",\\\"abbrlink\\\":\\\"rku8jh\\\"},{\\\"title\\\":\\\"自实现ArrayList\\\",\\\"categories\\\":[\\\"java\\\",\\\"collections-framework\\\"],\\\"comments\\\":true,\\\"date\\\":\\\"2018-06-04T22:47:12.000Z\\\",\\\"tags\\\":[\\\"arraylist\\\"],\\\"char_count\\\":4849,\\\"short_content\\\":\\\"\\\\n\\\\n\\\\n\\\\n#### 前言\\\\n\\\\n最近在复习**数据结构**和**算法**，这两个玩意也是被称之为**“程序员的基本素养”**，我最近比较想干的一件事就是读集合框架的源码\\\\n\\\\n基于这个伟大目标，我开启了源码阅读的**“从头到尾读”**系列，目前只完成了**Collection接口、Iterable接口、Iterator接口**这三个章节，正打算开始读**ArrayList**的源码\\\\n\\\\n\\\",\\\"abbrlink\\\":\\\"1gfw5vx\\\"},{\\\"title\\\":\\\"Java运算符知多少\\\",\\\"categories\\\":[\\\"java\\\",\\\"grammar\\\"],\\\"comments\\\":true,\\\"tags\\\":[\\\"java\\\",\\\"operator\\\"],\\\"date\\\":\\\"2018-06-03T21:28:00.000Z\\\",\\\"char_count\\\":9591,\\\"short_content\\\":\\\"\\\\n\\\\n\\\\n\\\\n{% cq %}\\\\n\\\\n小心点，一不小心你就栽跟头了 :ghost:\\\\n\\\\n{% endcq%}\\\\n\\\\n\\\",\\\"abbrlink\\\":\\\"1e5xy16\\\"},{\\\"title\\\":\\\"关于JVM的运行时数据区\\\",\\\"categories\\\":[\\\"java\\\",\\\"jvm\\\",\\\"memory\\\"],\\\"comments\\\":true,\\\"date\\\":\\\"2018-06-02T22:48:00.000Z\\\",\\\"tags\\\":[\\\"jvm\\\",\\\"运行时数据区\\\"],\\\"series\\\":\\\"JVM\\\",\\\"char_count\\\":3037,\\\"short_content\\\":\\\"\\\\n\\\\n### 前言\\\\n\\\\n本书第二版为止，其实还是针对于 Java SE 7 Specification（后简称 Spec），然而到了 Java8，情况又有很大的不同，比如最出名的 Permanent Generation，就在 8 中被 HotSpot 虚拟机移除掉了，所以这一系列的文章，我后续还需要慢慢地研究和重写\\\\n\\\\n然后是一篇关于 Java SE 7 Spec 的[好文](http://blog.jamesdbloom.com/JVMInternals.html#threads)\\\\n\\\\n### JVM 运行时数据区\\\\n\\\\n\\\",\\\"abbrlink\\\":\\\"rikltc\\\"},{\\\"title\\\":\\\"排序大礼包\\\",\\\"categories\\\":[\\\"algorithm\\\",\\\"sort\\\"],\\\"comments\\\":true,\\\"date\\\":\\\"2018-06-02T18:50:00.000Z\\\",\\\"tags\\\":[\\\"algorithm\\\",\\\"sort\\\"],\\\"char_count\\\":16074,\\\"short_content\\\":\\\"\\\\n\\\\n\\\\n\\\\n### 术语\\\\n\\\\n**稳定性：**算法排序前后，相同值的元素的相对位置是否不变，变了就不稳定\\\\n\\\\n**在位性：**算法排序是否要借助额外的内存空间，需要就不在位\\\\n\\\\n\\\",\\\"abbrlink\\\":\\\"1b0rp9e\\\"},{\\\"title\\\":\\\"这，就是Lambda！\\\",\\\"categories\\\":[\\\"java\\\",\\\"grammar\\\"],\\\"comments\\\":true,\\\"date\\\":\\\"2018-06-02T10:52:00.000Z\\\",\\\"tags\\\":[\\\"lambda\\\",\\\"java8\\\"],\\\"char_count\\\":8596,\\\"short_content\\\":\\\"\\\\n\\\\n### HelloWorld\\\\n\\\\n昨天的小米笔试题: **请用Lambda写一个将int数组[1,2,3]转换为String数组[\\\\\\\"1\\\\\\\",\\\\\\\"2\\\\\\\",\\\\\\\"3\\\\\\\"]**\\\\n\\\\n当时没写完整，就这个为例作为开始吧, 完整代码如下:\\\\n\\\\n``` java\\\\n  int[] si = {1, 2, 3};\\\\n```\\\\n\\\",\\\"abbrlink\\\":\\\"n0hez3\\\"},{\\\"title\\\":\\\"从头到尾读Iterable与Iterator\\\",\\\"categories\\\":[\\\"java\\\",\\\"collections-framework\\\"],\\\"comments\\\":true,\\\"date\\\":\\\"2018-05-15T17:22:14.000Z\\\",\\\"tags\\\":[\\\"iterable\\\",\\\"iterator\\\",\\\"collections-framework\\\"],\\\"series\\\":\\\"从头到尾读\\\",\\\"char_count\\\":2385,\\\"short_content\\\":\\\"\\\\n\\\\n\\\\n\\\\n### Iterable接口\\\\n\\\\n含义: 这个接口的含义是, 容器的元素是否支持**迭代器**访问\\\\n\\\\n#### 源码\\\\n\\\\n\\\",\\\"abbrlink\\\":\\\"1kakozs\\\"},{\\\"title\\\":\\\"从头到尾读Collection\\\",\\\"categories\\\":[\\\"java\\\",\\\"collections-framework\\\"],\\\"comments\\\":true,\\\"date\\\":\\\"2018-05-15T17:17:26.000Z\\\",\\\"tags\\\":[\\\"collection\\\",\\\"collections-framework\\\"],\\\"series\\\":\\\"从头到尾读\\\",\\\"char_count\\\":4653,\\\"short_content\\\":\\\"\\\\n\\\\n### Collection接口\\\\n\\\\n### 源代码解读\\\\n\\\\n#### 头部\\\\n\\\\n``` java\\\\npublic interface Collection<E> extends Iterable<E> {\\\\n```\\\\n\\\",\\\"abbrlink\\\":\\\"faxga5\\\"},{\\\"title\\\":\\\"初探Java8之方法引用\\\",\\\"categories\\\":[\\\"java\\\",\\\"grammar\\\"],\\\"comments\\\":true,\\\"date\\\":\\\"2018-05-15T10:40:00.000Z\\\",\\\"tags\\\":[\\\"java8\\\",\\\"方法引用\\\"],\\\"char_count\\\":3828,\\\"short_content\\\":\\\"\\\\n\\\\n{% cq %}\\\\n\\\\n本文从为知笔记迁移过来, 本文的写作时间是 : 2016/10/18 下午1:41:28, 两年前的文章, 言语难免幼稚, 思维难免浅显, 多多包含.\\\\n\\\\n{% endcq %}\\\\n\\\\n > 在学习这个东西的时候，找了很多资料，网上说的也都很笼统，找不到一个比较容易上手的例子，直到我看到一篇文章，作者在整体讲述Java5-8的新特性，其中讲完Java8的lambda表达式之后，马上就讲方法引用这个特性，我才更加清楚的意识到，方法引用其实是比lambda更加简洁的一个语法糖（不知道我这样理解对不对），但是，常识告诉我们，越简单的技术，限制条件就越多，为什么网上的关于方法引用的讲解都很散，因为方法引用的使用条件有点多。\\\\n\\\\n\\\",\\\"abbrlink\\\":\\\"1bhsyh3\\\"},{\\\"title\\\":\\\"初探Java8之lambda\\\",\\\"categories\\\":[\\\"java\\\",\\\"grammar\\\"],\\\"comments\\\":true,\\\"date\\\":\\\"2018-05-15T10:05:00.000Z\\\",\\\"tags\\\":[\\\"java8\\\",\\\"lambda\\\"],\\\"char_count\\\":6126,\\\"short_content\\\":\\\"\\\\n\\\\n{% cq %}\\\\n\\\\n本文从为知笔记迁移过来, 本文的写作时间是 : 2016/10/17 下午12:28:14, 两年前的文章, 言语难免幼稚, 思维难免浅显, 多多包含.\\\\n\\\\n{% endcq %}\\\\n\\\\n### 引例\\\\n\\\\n\\\",\\\"abbrlink\\\":\\\"nr7s9o\\\"},{\\\"title\\\":\\\"对持续集成(CI)的一些理解\\\",\\\"tags\\\":[\\\"CI\\\"],\\\"categories\\\":[\\\"thinking\\\"],\\\"date\\\":\\\"2018-05-08T15:53:01.000Z\\\",\\\"char_count\\\":1430,\\\"short_content\\\":\\\"\\\\n\\\\n### 什么是CI\\\\n\\\\n**持续集成（Continuous integration）** 不是什么新概念\\\\n\\\\n> _持续集成是一种软件开发实践，即团队开发成员经常集成他们的工作，通过每个成员每天至少集成一次，也就意味着每天可能会发生多次集成。每次集成都通过自动化的构建（包括编译，发布，自动化测试）来验证，从而尽早地发现集成错误。_\\\\n\\\\n以上引自百度百科的定义。\\\\n\\\\n\\\",\\\"abbrlink\\\":\\\"14k0uek\\\"},{\\\"title\\\":\\\"JettyDocument_ZH_CN_Translation_README\\\",\\\"tags\\\":[\\\"jetty\\\",\\\"document\\\",\\\"readme\\\"],\\\"categories\\\":[\\\"translation\\\"],\\\"series\\\":\\\"JettyDocument_ZH_CN_Translation\\\",\\\"date\\\":\\\"2018-05-07T17:30:01.000Z\\\",\\\"char_count\\\":2895,\\\"short_content\\\":\\\"\\\\n\\\\n# Jetty : Servlet Engine and HTTP server\\\\n创立时间：2017年8月25日16:13:49\\\\n\\\\n官方文档地址：http://www.eclipse.org/jetty/documentation/9.4.6.v20170531/\\\\n- - -\\\\nMaven依赖：\\\\n```\\\\n<properties>\\\\n```\\\\n\\\",\\\"abbrlink\\\":\\\"n8gsoq\\\"},{\\\"title\\\":\\\"JettyDocument_ZH_CN_Translation_Part4-23\\\",\\\"tags\\\":[\\\"jetty\\\",\\\"document\\\"],\\\"categories\\\":[\\\"translation\\\"],\\\"series\\\":\\\"JettyDocument_ZH_CN_Translation\\\",\\\"date\\\":\\\"2018-05-07T17:30:01.000Z\\\",\\\"char_count\\\":16093,\\\"short_content\\\":\\\"\\\\n\\\\n<span id=\\\\\\\"top\\\\\\\"></span>\\\\n### Ⅳ. Jetty开发指南-23.Jetty和Maven\\\\n- 23. [Jetty和Maven](#23jetty和maven)\\\\n  - [使用Maven](#231使用maven)\\\\n    - [使用Maven做嵌入式Jetty开发](#2311使用maven做嵌入式jetty开发)\\\\n    - [使用Maven开发标准的WebApp](#2321使用maven开发标准的wabapp)\\\\n  - [配置Jetty的Maven插件](#232配置jetty的maven插件)\\\\n    - [快速开始](#2321快速开始)\\\\n\\\",\\\"abbrlink\\\":\\\"1cei7aq\\\"},{\\\"title\\\":\\\"JettyDocument_ZH_CN_Translation_Part4-21\\\",\\\"tags\\\":[\\\"jetty\\\",\\\"document\\\"],\\\"categories\\\":[\\\"translation\\\"],\\\"series\\\":\\\"JettyDocument_ZH_CN_Translation\\\",\\\"date\\\":\\\"2018-05-07T17:30:01.000Z\\\",\\\"char_count\\\":35483,\\\"short_content\\\":\\\"\\\\n\\\\n<span id=\\\\\\\"top\\\\\\\"></span>\\\\n### Ⅳ. Jetty开发指南-21.嵌入式开发\\\\n  - 21. [嵌入式开发](#21嵌入式开发)\\\\n    - [Jetty的嵌入式Hello World](#211jetty的嵌入式hello-world)\\\\n      - [下载Jar包](#2111下载jar包)\\\\n      - [Hello World栗子](#2112hello-world栗子)\\\\n      - [编译Hello World栗子](#2113编译hello-world栗子)\\\\n      - [运行Handler和Server](#2114运行handler和server)\\\\n\\\",\\\"abbrlink\\\":\\\"18rke1\\\"},{\\\"title\\\":\\\"JettyDocument_ZH_CN_Translation_Part3-13\\\",\\\"tags\\\":[\\\"jetty\\\",\\\"document\\\"],\\\"categories\\\":[\\\"translation\\\"],\\\"series\\\":\\\"JettyDocument_ZH_CN_Translation\\\",\\\"date\\\":\\\"2018-05-07T17:30:01.000Z\\\",\\\"char_count\\\":14125,\\\"short_content\\\":\\\"\\\\n\\\\n<span id=\\\\\\\"top\\\\\\\"></span>\\\\n### Ⅲ. Jetty管理者指南-13.注释\\\\n  - 13. [注解](#13注解)\\\\n    - [快速设置](#131快速设置)\\\\n      - [关于Jetty发行版](#1311关于jetty发行版)\\\\n      - [关于Jetty Maven Plugin](#1312关于jetty-maven-plugin)\\\\n      - [关于嵌入式](#1313关于嵌入式)\\\\n    - [使用注解](#132使用注解)\\\\n\\\",\\\"abbrlink\\\":\\\"cc3kmk\\\"},{\\\"title\\\":\\\"JettyDocument_ZH_CN_Translation_Part1\\\",\\\"tags\\\":[\\\"jetty\\\",\\\"document\\\"],\\\"categories\\\":[\\\"translation\\\"],\\\"series\\\":\\\"JettyDocument_ZH_CN_Translation\\\",\\\"date\\\":\\\"2018-05-07T17:30:01.000Z\\\",\\\"char_count\\\":24839,\\\"short_content\\\":\\\"\\\\n\\\\n### Ⅰ.开始使用Jetty\\\\n<span id=\\\\\\\"top\\\\\\\"></span>\\\\n  - 1. [关于Jetty的介绍](#1关于jetty的介绍)\\\\n    - [什么是Jetty](#11什么是jetty)\\\\n    - [我应该使用哪个版本](#12我应该使用哪个版本)\\\\n    - [Jetty和JavaEE的Web规范](#13jetty和javaee的web规范)\\\\n    - [在Maven里面找到Jetty](#14在maven里面找到jetty)\\\\n  - 2. [使用Jetty](#2使用jetty)\\\\n\\\",\\\"abbrlink\\\":\\\"17hjlts\\\"},{\\\"title\\\":\\\"Cron4jDocument_ZH_CN_Translation\\\",\\\"categories\\\":[\\\"translation\\\"],\\\"tags\\\":[\\\"cron4j\\\",\\\"scheduler\\\"],\\\"series\\\":\\\"Cron4jDocument_ZH_CN_Translation\\\",\\\"date\\\":\\\"2018-05-07T17:25:01.000Z\\\",\\\"char_count\\\":19297,\\\"short_content\\\":\\\"\\\\n\\\\n# Cron4j\\\\n \\\\n一些必要的单词解释：\\\\n1. schedule 安排、调度（安排在有主语的时候使用 调用在没主语的时候使用）\\\\n2. scheduler 调度器\\\\n3. scheduling pattern 调度模式\\\\n4. reschedule 重新调度、安排\\\\n5. action/task 动作/任务\\\\n\\\",\\\"abbrlink\\\":\\\"1ngl1pm\\\"},{\\\"title\\\":\\\"Cron4jDocument_ZH_CN_Translation_README\\\",\\\"categories\\\":[\\\"translation\\\"],\\\"tags\\\":[\\\"cron4j\\\",\\\"scheduler\\\",\\\"readme\\\"],\\\"series\\\":\\\"Cron4jDocument_ZH_CN_Translation\\\",\\\"date\\\":\\\"2018-05-07T17:12:01.000Z\\\",\\\"char_count\\\":2323,\\\"short_content\\\":\\\"\\\\n\\\\n# Cron4j : A pure Java cron-like scheduler\\\\n创立时间：2017年8月20日13:35:01\\\\n\\\\n官方文档地址：http://www.sauronsoftware.it/projects/cron4j/\\\\n- - -\\\\nMaven依赖：\\\\n```\\\\n<dependency>\\\\n```\\\\n\\\",\\\"abbrlink\\\":\\\"19jo7o1\\\"},{\\\"title\\\":\\\"Linux安装MySql\\\",\\\"categories\\\":[\\\"reprinted\\\"],\\\"tags\\\":[\\\"mysql\\\",\\\"linux\\\"],\\\"date\\\":\\\"2018-05-03T16:05:01.000Z\\\",\\\"char_count\\\":3195,\\\"short_content\\\":\\\"\\\\n\\\\n\\\\n\\\\n# Linux安装MySql\\\\n一位哲人说过，只会用 FTP 工具的人都是傻子。\\\\n## 原料\\\\n去 [Mysql官网](https://www.mysql.com/downloads/) 下载\\\\nmysql-5.7.19-linux-glibc2.12x86_64.tar.gz。\\\\n## 步骤\\\\n\\\",\\\"abbrlink\\\":\\\"spovqu\\\"},{\\\"title\\\":\\\"蓝桥杯Java一夜暴富\\\",\\\"categories\\\":[\\\"note\\\"],\\\"comments\\\":false,\\\"tags\\\":[\\\"蓝桥杯\\\"],\\\"date\\\":\\\"2018-03-30T16:59:43.000Z\\\",\\\"char_count\\\":13539,\\\"short_content\\\":\\\"\\\\n\\\\n#### 目录\\\\n\\\\n- eclipse 快捷键\\\\n- 数组的使用\\\\n- 初始化\\\\n- for-each 遍历\\\\n- 使用底层 API 快速复制\\\\n- 搭配 Arrays 类进行二分查找和排序\\\\n\\\",\\\"abbrlink\\\":\\\"mtg94p\\\"},{\\\"title\\\":\\\"CentOS7下安装Pillow并使用osm-bundler生成图点模型\\\",\\\"categories\\\":[\\\"note\\\",\\\"project\\\"],\\\"comments\\\":true,\\\"tags\\\":[\\\"centos7\\\",\\\"python\\\",\\\"Pillow\\\",\\\"osm-bundler\\\",\\\"pip\\\"],\\\"date\\\":\\\"2018-01-21T11:50:30.000Z\\\",\\\"char_count\\\":5619,\\\"short_content\\\":\\\"\\\\n\\\\n{% cq %}\\\\n前言：之前留下的 17 大创项目总得做点什么，马上就要结题了，我们做的 AR 留影需要将用户照下来的照片生成点云然后合成模型。由此 Escnqh[link:gayhub]找到了使用 PIL+osm-bundler 的解决方案。\\\\n{% endcq %}\\\\n\\\\n<!-- more -->\\\\n\\\\n### Python Photogrammetry ToolKit（PPT）\\\\n\\\\n\\\",\\\"abbrlink\\\":\\\"1ox3j6i\\\"},{\\\"title\\\":\\\"Log4j2_Lookups\\\",\\\"categories\\\":[\\\"java\\\",\\\"lib\\\",\\\"log4j\\\"],\\\"comments\\\":true,\\\"tags\\\":[\\\"log4j2\\\",\\\"learning\\\"],\\\"date\\\":\\\"2017-12-09T15:28:15.000Z\\\",\\\"series\\\":\\\"Log4j2\\\",\\\"char_count\\\":1520,\\\"short_content\\\":\\\"\\\\n\\\\n{% cq %}\\\\n\\\\nLookups：让你的配置更灵活\\\\n\\\\n{% endcq %}\\\\n\\\\n<!-- more -->\\\\n\\\\n\\\",\\\"abbrlink\\\":\\\"3zxt7z\\\"},{\\\"title\\\":\\\"Log4j2_Filters\\\",\\\"categories\\\":[\\\"java\\\",\\\"lib\\\",\\\"log4j\\\"],\\\"comments\\\":true,\\\"tags\\\":[\\\"log4j2\\\",\\\"learning\\\"],\\\"date\\\":\\\"2017-12-09T12:41:20.000Z\\\",\\\"series\\\":\\\"Log4j2\\\",\\\"char_count\\\":2384,\\\"short_content\\\":\\\"\\\\n\\\\n{% cq %}\\\\n\\\\nFilters：过滤你的日志信息\\\\n\\\\n{% endcq %}\\\\n\\\\n<!-- more -->\\\\n\\\\n\\\",\\\"abbrlink\\\":\\\"3fjm8j\\\"},{\\\"title\\\":\\\"Log4j2_Layouts\\\",\\\"categories\\\":[\\\"java\\\",\\\"lib\\\",\\\"log4j\\\"],\\\"comments\\\":true,\\\"tags\\\":[\\\"log4j2\\\"],\\\"date\\\":\\\"2017-12-08T14:39:16.000Z\\\",\\\"series\\\":\\\"Log4j2\\\",\\\"char_count\\\":1187,\\\"short_content\\\":\\\"\\\\n\\\\n{% cq %}\\\\n\\\\nLayout：定制你的输出模式\\\\n\\\\n{% endcq %}\\\\n\\\\n<!-- more -->\\\\n\\\\n\\\",\\\"abbrlink\\\":\\\"yvgzwi\\\"},{\\\"title\\\":\\\"我认为的规范的git commit msg\\\",\\\"top\\\":true,\\\"categories\\\":[\\\"thinking\\\"],\\\"comments\\\":true,\\\"tags\\\":[\\\"tips\\\",\\\"github\\\",\\\"git\\\"],\\\"date\\\":\\\"2017-11-29T18:30:01.000Z\\\",\\\"char_count\\\":2664,\\\"short_content\\\":\\\"\\\\n\\\\n{% cq %}\\\\n\\\\n其实必要的时候使用`git commit -m \\\\\\\"xxxxx\\\\\\\"`也木有关系 但你也别每条都这样写\\\\n\\\\n{% endcq %}\\\\n\\\\n<!-- more -->\\\\n\\\\n\\\",\\\"abbrlink\\\":\\\"a9wle2\\\"},{\\\"title\\\":\\\"Electron_打包你的HelloWorld为exe\\\",\\\"categories\\\":[\\\"front-end\\\",\\\"electron\\\"],\\\"comments\\\":true,\\\"tags\\\":[\\\"electron\\\",\\\"helloworld\\\"],\\\"series\\\":\\\"electron\\\",\\\"date\\\":\\\"2017-11-23T13:02:21.000Z\\\",\\\"char_count\\\":5464,\\\"short_content\\\":\\\"\\\\n\\\\n{% cq %}\\\\n\\\\nEXE 什么的，看着就忍不住要双击它！\\\\n\\\\n{% endcq %}\\\\n\\\\n### Introduction\\\\n\\\\n\\\",\\\"abbrlink\\\":\\\"1q1lo3l\\\"},{\\\"title\\\":\\\"Electron_一个HelloWorld\\\",\\\"categories\\\":[\\\"front-end\\\",\\\"electron\\\"],\\\"comments\\\":true,\\\"tags\\\":[\\\"electron\\\",\\\"helloworld\\\"],\\\"series\\\":\\\"electron\\\",\\\"date\\\":\\\"2017-11-22T22:05:23.000Z\\\",\\\"char_count\\\":4803,\\\"short_content\\\":\\\"\\\\n\\\\n{% cq %}\\\\n\\\\n惊！仅用前端技术就可以打造跨平台桌面应用！\\\\n\\\\n{% endcq %}\\\\n\\\\n### 快速入门\\\\n\\\\n\\\",\\\"abbrlink\\\":\\\"a08lib\\\"},{\\\"title\\\":\\\"Log4j2_Appenders\\\",\\\"comments\\\":true,\\\"tags\\\":[\\\"log4j\\\"],\\\"categories\\\":[\\\"java\\\",\\\"lib\\\",\\\"log4j\\\"],\\\"date\\\":\\\"2017-11-17T16:37:18.000Z\\\",\\\"series\\\":\\\"Log4j2\\\",\\\"char_count\\\":6004,\\\"short_content\\\":\\\"\\\\n\\\\n{% cq %}\\\\n\\\\n上篇介绍了使用Log4j2之前的准备工作和简单介绍了一个HelloWorld\\\\n\\\\n现在我们来了解配置中的第一个关键配置：Appenders\\\\n\\\\n{% endcq %}\\\\n\\\\n\\\",\\\"abbrlink\\\":\\\"nff3ic\\\"},{\\\"title\\\":\\\"Log4j2_HelloWorld\\\",\\\"tags\\\":[\\\"log4j2\\\"],\\\"categories\\\":[\\\"java\\\",\\\"lib\\\",\\\"log4j\\\"],\\\"comments\\\":true,\\\"date\\\":\\\"2017-11-17T16:13:21.000Z\\\",\\\"series\\\":\\\"Log4j2\\\",\\\"char_count\\\":3621,\\\"short_content\\\":\\\"\\\\n\\\\n{% cq %}\\\\n\\\\nLo4j2是啥就不解释了，之前无论是使用log4j还是log4j2，同样只是简单的各种百度然后复制粘贴没有系统的总结一下，今天把一个小小的Ajax的测试程序放服务器上面都不知道怎么查错，然后想写一下log来看看哪错了吧，发现还是不会独立配置log4j，于是想总结一波。基本的思路是总结官方文档和官方推荐的中文文档，尽量简洁表达出原理以及应用。\\\\n\\\\n{% endcq %}\\\\n\\\\n<!-- more -->\\\\n\\\\n\\\",\\\"abbrlink\\\":\\\"en4hhw\\\"},{\\\"title\\\":\\\"RegExp_2_metacharacters\\\",\\\"categories\\\":[\\\"booknotes\\\",\\\"Mastering Regular Expression\\\"],\\\"comments\\\":true,\\\"tags\\\":[\\\"regular-expression\\\"],\\\"date\\\":\\\"2017-11-17T00:02:06.000Z\\\",\\\"series\\\":\\\"《Mastering Regular Expression(Third Edition)》\\\",\\\"char_count\\\":2336,\\\"short_content\\\":\\\"\\\\n\\\\n{% cq %}\\\\n\\\\nMetacharacters：元字符\\\\n\\\\n{% endcq %}\\\\n\\\\n<!-- more -->\\\\n\\\\n\\\",\\\"abbrlink\\\":\\\"huiysg\\\"},{\\\"title\\\":\\\"RegExp_1_overview\\\",\\\"tags\\\":[\\\"regular-expression\\\"],\\\"categories\\\":[\\\"booknotes\\\",\\\"Mastering Regular Expression\\\"],\\\"comments\\\":true,\\\"date\\\":\\\"2017-11-17T00:00:56.000Z\\\",\\\"series\\\":\\\"《Mastering Regular Expression(Third Edition)》\\\",\\\"char_count\\\":1284,\\\"short_content\\\":\\\"\\\\n\\\\n*自接触计算机编程以来，无数次碰到过这个名词“正则表达式”，刚开始肯定是不懂，但是听到“表达式”三个字就发现事情并不简单。*\\\\n\\\\n<!-- more -->\\\\n\\\\n第一次接触到它还是在我进NTJ2EE的招新机试的时候，机试题有一道题：“有一个字符串，其中包含中文字符、英文字符和数字字符，请统计和打印出各个字符的个数。”，当时只会用取字符对照ascii的方法来做这道题，然后正好学长看了我的做法，他说还有种东西叫做“正则表达式”，然后他给我打开了在线的JDK-1.6的API，找到了里面介绍正则表达式的页，然后还百度了一篇正则表达式的教程给我看（对，就是那个通篇斜杠写反的那盘），然后我就头皮发麻了。\\\\n\\\\n在之后无论是正式学习还是运用到实际当中，我的处理都是：百度——ctrl+c——ctrl+v，然后下次碰到另一个字符串处理问题的时候还是这样做，毫无意义，甚至还不能完全匹配我的应用场景。然后这次的工程中心项目，我负责写前端，对输入框需要用到字符串过滤的需求，就这么简单的一个功能我都实现不了，感觉非常丢人，我不想再复制粘贴了，所以开始以blog的形式记录我学习`regular-expression`的过程。\\\\n\\\\n\\\",\\\"abbrlink\\\":\\\"1k4djcz\\\"},{\\\"title\\\":\\\"5 Useful Tips For A Better Commit Message\\\",\\\"categories\\\":[\\\"reprinted\\\"],\\\"comments\\\":true,\\\"tags\\\":[\\\"tips\\\",\\\"github\\\",\\\"git\\\"],\\\"date\\\":\\\"2017-11-15T16:59:00.000Z\\\",\\\"char_count\\\":3603,\\\"short_content\\\":\\\"\\\\n\\\\nYou’re already writing decent commit messages. Let’s see if we can level you up to awesome. Other developers, especially you-in-two-weeks and you-from-next-year, will thank you for your forethought and verbosity when they run git blame to see why that conditional is there.\\\\n\\\\n<!-- more -->\\\\n\\\\n1. The first line should always be <u>50 characters</u> or less and that it should be followed by a blank line. Vim ships with syntax, indent, and filetype plugins for Git commits which can help here.\\\\n\\\\n1. Add this line to your `~/.vimrc` to add spell checking and automatic wrapping at the recommended 72 columns to you commit messages.\\\\n\\\\n\\\",\\\"abbrlink\\\":\\\"1h187i6\\\"}]\");\n    sessionStorage.setItem('postOrder', \"[\\\"Connecting ModelSIM with Vscode & XQuartz on Mac<=>xqh6xg\\\",\\\"了解前缀树<=>ooqfkn\\\",\\\"带状态机的DP<=>f40uwq\\\",\\\"再聊InnoDB索引<=>1lvzuh7\\\",\\\"MySQL InnoDB锁概述<=>dc5shg\\\",\\\"MySQL InnoDB事务概述<=>tx6g0p\\\",\\\"MySQL InnoDB索引概述<=>a0p0f4\\\",\\\"优先队列&二叉堆（2-heap）<=>2t44ld\\\",\\\"MySQL InnoDB引擎概述<=>xfjqry\\\",\\\"Python - Threading<=>2acnhf\\\",\\\"The Basic Grammar Of Python (EF)<=>1xentt\\\",\\\"The Basic Grammar Of Python (CD)<=>1ba9tuk\\\",\\\"The Basic Grammar Of Python (AB)<=>t3owl3\\\",\\\"Make Your Raspberry Pi Broadcasting TV News Every Morning<=>1xemds8\\\",\\\"Interesting Math - Prime Number<=>1jy4sem\\\",\\\"微信小程序支付后台接入<=>1csh4qm\\\",\\\"一次博客的改版和升级<=>3rmqph\\\",\\\"字符编码笔记<=>1w60zyo\\\",\\\"Electron_UI<=>kimeni\\\",\\\"Electron_配置相关与对象<=>1y7ozg8\\\",\\\"Electron_上手铺垫<=>11zuc81\\\",\\\"Express Middleware<=>1tzsbbu\\\",\\\"Express Routing<=>1n8vn13\\\",\\\"Understanding the nodejs' event loop<=>1w97yet\\\",\\\"GC Algorithm Implementation<=>1jvfs4t\\\",\\\"Leetcode-71~75<=>i9becb\\\",\\\"Leetcode-66~70<=>z9pvg9\\\",\\\"Leetcode-61~65<=>1cu6q2d\\\",\\\"Leetcode-56~60<=>1kv61wq\\\",\\\"Leetcode-51~55<=>xmbex2\\\",\\\"Leetcode-46~50<=>jywoys\\\",\\\"Some Backtracking Problem In Leetcode<=>1x7azit\\\",\\\"DP Again<=>1flo1c0\\\",\\\"Leetcode-41~45<=>11z93zc\\\",\\\"Leetcode-36~40<=>v6ei19\\\",\\\"再谈对象分代和GC事件<=>wlvrl9\\\",\\\"字节跳动2019-03-16后端笔试<=>djlqql\\\",\\\"Leetcode-31~35<=>dbne5d\\\",\\\"Leetcode-26~30<=>448jer\\\",\\\"Leetcode-21~25<=>1hrw4sv\\\",\\\"Leetcode-16~20<=>3yl2hx\\\",\\\"Help GC A Favor & JIT Introduction<=>12iaggv\\\",\\\"Java's Refernece<=>13tt0au\\\",\\\"The Revelation of Java String<=>46bhg0\\\",\\\"Leetcode-11~15<=>2gps3g\\\",\\\"最近点对及其相关问题<=>1d9upzt\\\",\\\"Leetcode-6~10<=>t1f0vq\\\",\\\"Hashing<=>1f3qusx\\\",\\\"Leetcode-1~5<=>pn2ezr\\\",\\\"Tree Binary Tree<=>1aew5v7\\\",\\\"Tree Introduction<=>1qvt6fv\\\",\\\"Java并发编程第八坎<=>1u7rv30\\\",\\\"CLH Lock Queue<=>vywf17\\\",\\\"Java并发编程第七坎-2<=>u4sgci\\\",\\\"Java并发编程第七坎<=>7kdfk8\\\",\\\"Docker Volumes<=>1ae6lng\\\",\\\"Docker Persist Data Overview<=>lt42s8\\\",\\\"Docker ConceptReview<=>rx7jt4\\\",\\\"Docker Stack<=>u7sd0w\\\",\\\"Docker Swarm&ClusterSetup<=>1toixsk\\\",\\\"Docker Service&Composefile<=>zkr55u\\\",\\\"Jenkins Introductions&Setup<=>1arzjog\\\",\\\"写在21岁的最后一天<=>1xetsy3\\\",\\\"关于JVM的GC行为和内存分配<=>jhpq7e\\\",\\\"Docker Containers&Dockerfile<=>uh480l\\\",\\\"Tess login on Jenkins<=>1gukab6\\\",\\\"Introductions of eBay Tess<=>2032k5\\\",\\\"关于JVM的运行时数据区上的GC<=>d5ykz8\\\",\\\"关于JVM的对象创建与访问<=>18669ga\\\",\\\"Docker Orientation&Setup<=>1ei198o\\\",\\\"kafka-topic-storage-detail<=>1ro5m3y\\\",\\\"kafka-helloworld-concept<=>u28b7l\\\",\\\"微服务架构理论基础-康威定律<=>pjff39\\\",\\\"微服务（Microservice）那点事<=>1kb6gry\\\",\\\"Graduation Design<=>q0aas8\\\",\\\"地痞（DP）成长记<=>188zp6j\\\",\\\"AVL树和红黑树<=>wji6g0\\\",\\\"查找大礼包<=>bg6w8m\\\",\\\"把HashMap安排得明明白白<=>ofa68o\\\",\\\"算法回收站<=>8lcrnu\\\",\\\"记一次设计模式之旅<=>9h3hmp\\\",\\\"Java并发编程第六坎<=>139027a\\\",\\\"Java并发编程第五坎<=>1xo3tpx\\\",\\\"Java并发编程第四坎<=>db3vx3\\\",\\\"Java并发编程第三坎<=>1h1ww1y\\\",\\\"Java并发编程第二坎<=>1clnpuk\\\",\\\"计算机网络-谢希仁-2<=>1nz333d\\\",\\\"计算机网络-谢希仁-1<=>1k7g0p3\\\",\\\"Java并发编程第一坎<=>bu9klx\\\",\\\"从头到尾读ArrayList<=>rku8jh\\\",\\\"自实现ArrayList<=>1gfw5vx\\\",\\\"Java运算符知多少<=>1e5xy16\\\",\\\"关于JVM的运行时数据区<=>rikltc\\\",\\\"排序大礼包<=>1b0rp9e\\\",\\\"这，就是Lambda！<=>n0hez3\\\",\\\"从头到尾读Iterable与Iterator<=>1kakozs\\\",\\\"从头到尾读Collection<=>faxga5\\\",\\\"初探Java8之方法引用<=>1bhsyh3\\\",\\\"初探Java8之lambda<=>nr7s9o\\\",\\\"对持续集成(CI)的一些理解<=>14k0uek\\\",\\\"JettyDocument_ZH_CN_Translation_README<=>n8gsoq\\\",\\\"JettyDocument_ZH_CN_Translation_Part4-23<=>1cei7aq\\\",\\\"JettyDocument_ZH_CN_Translation_Part4-21<=>18rke1\\\",\\\"JettyDocument_ZH_CN_Translation_Part3-13<=>cc3kmk\\\",\\\"JettyDocument_ZH_CN_Translation_Part1<=>17hjlts\\\",\\\"Cron4jDocument_ZH_CN_Translation<=>1ngl1pm\\\",\\\"Cron4jDocument_ZH_CN_Translation_README<=>19jo7o1\\\",\\\"Linux安装MySql<=>spovqu\\\",\\\"蓝桥杯Java一夜暴富<=>mtg94p\\\",\\\"CentOS7下安装Pillow并使用osm-bundler生成图点模型<=>1ox3j6i\\\",\\\"Log4j2_Lookups<=>3zxt7z\\\",\\\"Log4j2_Filters<=>3fjm8j\\\",\\\"Log4j2_Layouts<=>yvgzwi\\\",\\\"我认为的规范的git commit msg<=>a9wle2\\\",\\\"Electron_打包你的HelloWorld为exe<=>1q1lo3l\\\",\\\"Electron_一个HelloWorld<=>a08lib\\\",\\\"Log4j2_Appenders<=>nff3ic\\\",\\\"Log4j2_HelloWorld<=>en4hhw\\\",\\\"RegExp_2_metacharacters<=>huiysg\\\",\\\"RegExp_1_overview<=>1k4djcz\\\",\\\"5 Useful Tips For A Better Commit Message<=>1h187i6\\\"]\");\n    sessionStorage.setItem('scriptsMds', \"{\\\"Academic Website\\\":\\\"cb48f8a4\\\",\\\"CSS\\\":\\\"365a1777\\\",\\\"Docker\\\":\\\"8c6a1638\\\",\\\"ECE\\\":\\\"f5916bab\\\",\\\"Electron\\\":\\\"79da6013\\\",\\\"English Termiologies\\\":\\\"befb463a\\\",\\\"FE Engineering Related\\\":\\\"fbc08f90\\\",\\\"HTML\\\":\\\"a4690ebd\\\",\\\"JS&Node.js库\\\":\\\"9b96de31\\\",\\\"JS\\\":\\\"a586ccf8\\\",\\\"Java\\\":\\\"e3e877fe\\\",\\\"LaTeX\\\":\\\"56fa014a\\\",\\\"Linux\\\":\\\"26535a\\\",\\\"MAC\\\":\\\"4669e57a\\\",\\\"MySQL\\\":\\\"58be3d4b\\\",\\\"Open API\\\":\\\"76024c57\\\",\\\"Python\\\":\\\"b3001d81\\\",\\\"Software Engineering\\\":\\\"b09cec40\\\",\\\"Vue\\\":\\\"fe80f986\\\",\\\"坑\\\":\\\"737e95b3\\\",\\\"技巧\\\":\\\"79453be7\\\",\\\"操作系统原理\\\":\\\"c72c09e6\\\",\\\"概念与思考\\\":\\\"edefab81\\\",\\\"算法\\\":\\\"984d050c\\\",\\\"网站&博客\\\":\\\"7d0d4b58\\\",\\\"网络\\\":\\\"8f8dd110\\\",\\\"软件\\\":\\\"e173fd3a\\\"}\");\n","/* eslint-disable no-unused-vars */\nvar resourcesList = [\"cache-fjqett.js\"];\nmodule.exports.list = resourcesList\n  ","function routeElements(elements) {\n  for (let imgEl of elements) {\n    //   just route img src on this site\n    if (imgEl.outerHTML.indexOf(\"../../../public/img/\") !== -1) {\n      const split = imgEl.src.split(\"/\");\n      imgEl.src = route(split[split.length - 1]);\n    }\n  }\n}\n\nfunction route(filename) {\n  return process.env.NODE_ENV === \"production\"\n    ? `https://cdn.jsdelivr.net/gh/youyinnn/youyinnn.github.io@master/public/img/${filename}`\n    : `../img/${filename}`;\n}\n\nmodule.exports.routeElements = routeElements;\n","const warnedMessages = new Set();\nexport function warnOnce(location, message) {\n    const mergedMessage = `[vdirs/${location}]: ${message}`;\n    if (warnedMessages.has(mergedMessage))\n        return;\n    warnedMessages.add(mergedMessage);\n}\nexport function warn(location, message) {\n    console.error(`[vdirs/${location}]: ${message}`);\n}\n","import { warn } from '../utils';\nclass ZIndexManager {\n    constructor() {\n        this.elementZIndex = new Map();\n        this.nextZIndex = 2000;\n    }\n    get elementCount() {\n        return this.elementZIndex.size;\n    }\n    ensureZIndex(el, zIndex) {\n        const { elementZIndex } = this;\n        if (zIndex !== undefined) {\n            el.style.zIndex = `${zIndex}`;\n            elementZIndex.delete(el);\n            return;\n        }\n        const { nextZIndex } = this;\n        if (elementZIndex.has(el)) {\n            const currentZIndex = elementZIndex.get(el);\n            if (currentZIndex + 1 === this.nextZIndex)\n                return;\n        }\n        el.style.zIndex = `${nextZIndex}`;\n        elementZIndex.set(el, nextZIndex);\n        this.nextZIndex = nextZIndex + 1;\n        this.squashState();\n    }\n    unregister(el) {\n        const { elementZIndex } = this;\n        if (elementZIndex.has(el)) {\n            elementZIndex.delete(el);\n        }\n        else {\n            warn('vdirs/z-index-manager/unregister-element', 'Element not found when unregistering.');\n        }\n        this.squashState();\n    }\n    squashState() {\n        const { elementCount } = this;\n        if (!elementCount) {\n            this.nextZIndex = 2000;\n        }\n        if (this.nextZIndex - elementCount > 2500)\n            this.rearrange();\n    }\n    rearrange() {\n        const elementZIndexPair = Array.from(this.elementZIndex.entries());\n        elementZIndexPair.sort((pair1, pair2) => {\n            return pair1[1] - pair2[1];\n        });\n        this.nextZIndex = 2000;\n        elementZIndexPair.forEach(pair => {\n            const el = pair[0];\n            const zIndex = this.nextZIndex++;\n            if (`${zIndex}` !== el.style.zIndex)\n                el.style.zIndex = `${zIndex}`;\n        });\n    }\n}\nexport default new ZIndexManager();\n","import zIndexManager from './z-index-manager';\nconst ctx = '@@ziContext';\nconst zindexable = {\n    mounted(el, bindings) {\n        const { value = {} } = bindings;\n        const { zIndex, enabled } = value;\n        zIndexManager.ensureZIndex(el, zIndex);\n        el[ctx] = {\n            enabled\n        };\n    },\n    updated(el, bindings) {\n        const { value = {} } = bindings;\n        const { zIndex, enabled } = value;\n        const cachedEnabled = el[ctx].enabled;\n        if (enabled && !cachedEnabled) {\n            zIndexManager.ensureZIndex(el, zIndex);\n        }\n        el[ctx].enabled = enabled;\n    },\n    unmounted(el) {\n        zIndexManager.unregister(el);\n    }\n};\nexport default zindexable;\n","import { ref, readonly, watch } from 'vue';\nexport default function useFalseUntilTruthy(originalRef) {\n    const currentRef = ref(!!originalRef.value);\n    if (currentRef.value)\n        return readonly(currentRef);\n    const stop = watch(originalRef, (value) => {\n        if (value) {\n            currentRef.value = true;\n            stop();\n        }\n    });\n    return readonly(currentRef);\n}\n","import { Teleport, h, toRef, computed, defineComponent } from 'vue';\nimport { useFalseUntilTruthy } from 'vooks';\nimport { getSlot } from '../../shared/v-node';\nexport default defineComponent({\n    name: 'LazyTeleport',\n    props: {\n        to: {\n            type: [String, Object],\n            default: undefined\n        },\n        disabled: Boolean,\n        show: {\n            type: Boolean,\n            required: true\n        }\n    },\n    setup(props) {\n        return {\n            showTeleport: useFalseUntilTruthy(toRef(props, 'show')),\n            mergedTo: computed(() => {\n                const { to } = props;\n                return to !== null && to !== void 0 ? to : 'body';\n            })\n        };\n    },\n    render() {\n        return this.showTeleport\n            ? this.disabled\n                ? getSlot(this.$slots)\n                : h(Teleport, {\n                    disabled: this.disabled,\n                    to: this.mergedTo\n                }, getSlot(this.$slots))\n            : null;\n    }\n});\n","export function getSlot(slots, slotName = 'default') {\n    const slot = slots[slotName];\n    if (slot === undefined) {\n        throw new Error(`[vueuc/binder]: slot[${slotName}] is empty.`);\n    }\n    return slot();\n}\nexport function getFirstVNode(slots, slotName = 'default') {\n    const slot = slots[slotName];\n    if (slot === undefined) {\n        throw new Error(`[vueuc/binder]: slot[${slotName}] is empty.`);\n    }\n    const content = slot();\n    // vue will normalize the slot, so slot must be an array\n    if (content.length === 1) {\n        return content[0];\n    }\n    else {\n        throw new Error(`[vueuc/binder]: slot[${slotName}] should have exactly one child.`);\n    }\n}\n","var map = {\n\t\"./11z93zc.htm\": 46281,\n\t\"./11zuc81.htm\": 58219,\n\t\"./12iaggv.htm\": 25394,\n\t\"./139027a.htm\": 34677,\n\t\"./13tt0au.htm\": 49928,\n\t\"./14k0uek.htm\": 20194,\n\t\"./17hjlts.htm\": 20960,\n\t\"./18669ga.htm\": 58462,\n\t\"./188zp6j.htm\": 13064,\n\t\"./18rke1.htm\": 49295,\n\t\"./19jo7o1.htm\": 95843,\n\t\"./1ae6lng.htm\": 9811,\n\t\"./1aew5v7.htm\": 67049,\n\t\"./1arzjog.htm\": 93872,\n\t\"./1b0rp9e.htm\": 11238,\n\t\"./1ba9tuk.htm\": 67728,\n\t\"./1bhsyh3.htm\": 8170,\n\t\"./1cei7aq.htm\": 10018,\n\t\"./1clnpuk.htm\": 35072,\n\t\"./1csh4qm.htm\": 68068,\n\t\"./1cu6q2d.htm\": 37828,\n\t\"./1d9upzt.htm\": 49059,\n\t\"./1e5xy16.htm\": 32992,\n\t\"./1ei198o.htm\": 49346,\n\t\"./1f3qusx.htm\": 34578,\n\t\"./1flo1c0.htm\": 62740,\n\t\"./1gfw5vx.htm\": 68488,\n\t\"./1gukab6.htm\": 24862,\n\t\"./1h187i6.htm\": 73173,\n\t\"./1h1ww1y.htm\": 59214,\n\t\"./1hrw4sv.htm\": 53794,\n\t\"./1jvfs4t.htm\": 28623,\n\t\"./1jy4sem.htm\": 84032,\n\t\"./1k4djcz.htm\": 70303,\n\t\"./1k7g0p3.htm\": 4612,\n\t\"./1kakozs.htm\": 19623,\n\t\"./1kb6gry.htm\": 50830,\n\t\"./1kv61wq.htm\": 53932,\n\t\"./1lvzuh7.htm\": 60394,\n\t\"./1n8vn13.htm\": 20665,\n\t\"./1ngl1pm.htm\": 53003,\n\t\"./1nz333d.htm\": 63788,\n\t\"./1ox3j6i.htm\": 51669,\n\t\"./1q1lo3l.htm\": 71464,\n\t\"./1qvt6fv.htm\": 71422,\n\t\"./1ro5m3y.htm\": 7188,\n\t\"./1toixsk.htm\": 6442,\n\t\"./1tzsbbu.htm\": 89908,\n\t\"./1u7rv30.htm\": 40255,\n\t\"./1w60zyo.htm\": 21198,\n\t\"./1w97yet.htm\": 52754,\n\t\"./1x7azit.htm\": 48051,\n\t\"./1xemds8.htm\": 7492,\n\t\"./1xentt.htm\": 36108,\n\t\"./1xetsy3.htm\": 26284,\n\t\"./1xo3tpx.htm\": 1758,\n\t\"./1y7ozg8.htm\": 25733,\n\t\"./2032k5.htm\": 19948,\n\t\"./2acnhf.htm\": 26442,\n\t\"./2gps3g.htm\": 1746,\n\t\"./2t44ld.htm\": 18982,\n\t\"./3fjm8j.htm\": 16759,\n\t\"./3rmqph.htm\": 44013,\n\t\"./3yl2hx.htm\": 36971,\n\t\"./3zxt7z.htm\": 89568,\n\t\"./448jer.htm\": 62396,\n\t\"./46bhg0.htm\": 82158,\n\t\"./7kdfk8.htm\": 51563,\n\t\"./8lcrnu.htm\": 81126,\n\t\"./9h3hmp.htm\": 44200,\n\t\"./a08lib.htm\": 79531,\n\t\"./a0p0f4.htm\": 12682,\n\t\"./a9wle2.htm\": 68037,\n\t\"./bg6w8m.htm\": 64730,\n\t\"./bu9klx.htm\": 61875,\n\t\"./cc3kmk.htm\": 97053,\n\t\"./d5ykz8.htm\": 86909,\n\t\"./db3vx3.htm\": 35299,\n\t\"./dbne5d.htm\": 37718,\n\t\"./dc5shg.htm\": 96071,\n\t\"./djlqql.htm\": 21291,\n\t\"./en4hhw.htm\": 47213,\n\t\"./f40uwq.htm\": 45630,\n\t\"./faxga5.htm\": 19731,\n\t\"./huiysg.htm\": 13695,\n\t\"./i9becb.htm\": 20778,\n\t\"./jhpq7e.htm\": 16299,\n\t\"./jywoys.htm\": 76625,\n\t\"./kimeni.htm\": 27683,\n\t\"./lt42s8.htm\": 53190,\n\t\"./mtg94p.htm\": 34438,\n\t\"./n0hez3.htm\": 94574,\n\t\"./n8gsoq.htm\": 79366,\n\t\"./nff3ic.htm\": 54495,\n\t\"./nr7s9o.htm\": 8167,\n\t\"./ofa68o.htm\": 18134,\n\t\"./ooqfkn.htm\": 88591,\n\t\"./pjff39.htm\": 1818,\n\t\"./pn2ezr.htm\": 51449,\n\t\"./q0aas8.htm\": 79490,\n\t\"./rikltc.htm\": 58935,\n\t\"./rku8jh.htm\": 28148,\n\t\"./rx7jt4.htm\": 44099,\n\t\"./spovqu.htm\": 68369,\n\t\"./t1f0vq.htm\": 14446,\n\t\"./t3owl3.htm\": 34421,\n\t\"./tx6g0p.htm\": 97608,\n\t\"./u28b7l.htm\": 40229,\n\t\"./u4sgci.htm\": 3211,\n\t\"./u7sd0w.htm\": 1555,\n\t\"./uh480l.htm\": 66291,\n\t\"./v6ei19.htm\": 3403,\n\t\"./vywf17.htm\": 40206,\n\t\"./wji6g0.htm\": 11047,\n\t\"./wlvrl9.htm\": 39448,\n\t\"./xfjqry.htm\": 73103,\n\t\"./xmbex2.htm\": 65681,\n\t\"./xqh6xg.htm\": 92343,\n\t\"./yvgzwi.htm\": 16487,\n\t\"./z9pvg9.htm\": 64797,\n\t\"./zkr55u.htm\": 27020\n};\n\n\nfunction webpackContext(req) {\n\tvar id = webpackContextResolve(req);\n\treturn __webpack_require__(id);\n}\nfunction webpackContextResolve(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t}\n\treturn map[req];\n}\nwebpackContext.keys = function webpackContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackContext.resolve = webpackContextResolve;\nmodule.exports = webpackContext;\nwebpackContext.id = 55259;","var map = {\n\t\"./11z93zc.htm.toc.json\": 48753,\n\t\"./11zuc81.htm.toc.json\": 75631,\n\t\"./12iaggv.htm.toc.json\": 54457,\n\t\"./139027a.htm.toc.json\": 66719,\n\t\"./13tt0au.htm.toc.json\": 83106,\n\t\"./14k0uek.htm.toc.json\": 22147,\n\t\"./17hjlts.htm.toc.json\": 70451,\n\t\"./18669ga.htm.toc.json\": 42816,\n\t\"./188zp6j.htm.toc.json\": 56132,\n\t\"./18rke1.htm.toc.json\": 25570,\n\t\"./19jo7o1.htm.toc.json\": 6135,\n\t\"./1ae6lng.htm.toc.json\": 32590,\n\t\"./1aew5v7.htm.toc.json\": 2565,\n\t\"./1arzjog.htm.toc.json\": 75948,\n\t\"./1b0rp9e.htm.toc.json\": 84835,\n\t\"./1ba9tuk.htm.toc.json\": 74759,\n\t\"./1bhsyh3.htm.toc.json\": 77972,\n\t\"./1cei7aq.htm.toc.json\": 77810,\n\t\"./1clnpuk.htm.toc.json\": 33465,\n\t\"./1csh4qm.htm.toc.json\": 44063,\n\t\"./1cu6q2d.htm.toc.json\": 37223,\n\t\"./1d9upzt.htm.toc.json\": 21526,\n\t\"./1e5xy16.htm.toc.json\": 92728,\n\t\"./1ei198o.htm.toc.json\": 12702,\n\t\"./1f3qusx.htm.toc.json\": 95475,\n\t\"./1flo1c0.htm.toc.json\": 67842,\n\t\"./1gfw5vx.htm.toc.json\": 95013,\n\t\"./1gukab6.htm.toc.json\": 49740,\n\t\"./1h1ww1y.htm.toc.json\": 77028,\n\t\"./1hrw4sv.htm.toc.json\": 61368,\n\t\"./1jvfs4t.htm.toc.json\": 91205,\n\t\"./1jy4sem.htm.toc.json\": 58869,\n\t\"./1k4djcz.htm.toc.json\": 82650,\n\t\"./1k7g0p3.htm.toc.json\": 18438,\n\t\"./1kakozs.htm.toc.json\": 3029,\n\t\"./1kb6gry.htm.toc.json\": 42525,\n\t\"./1kv61wq.htm.toc.json\": 37415,\n\t\"./1lvzuh7.htm.toc.json\": 19916,\n\t\"./1n8vn13.htm.toc.json\": 96444,\n\t\"./1ngl1pm.htm.toc.json\": 53008,\n\t\"./1nz333d.htm.toc.json\": 7285,\n\t\"./1ox3j6i.htm.toc.json\": 6743,\n\t\"./1q1lo3l.htm.toc.json\": 8568,\n\t\"./1qvt6fv.htm.toc.json\": 13571,\n\t\"./1ro5m3y.htm.toc.json\": 75152,\n\t\"./1toixsk.htm.toc.json\": 69697,\n\t\"./1tzsbbu.htm.toc.json\": 57308,\n\t\"./1u7rv30.htm.toc.json\": 60589,\n\t\"./1w60zyo.htm.toc.json\": 76648,\n\t\"./1w97yet.htm.toc.json\": 300,\n\t\"./1x7azit.htm.toc.json\": 78680,\n\t\"./1xemds8.htm.toc.json\": 22357,\n\t\"./1xentt.htm.toc.json\": 17059,\n\t\"./1xetsy3.htm.toc.json\": 33768,\n\t\"./1xo3tpx.htm.toc.json\": 59919,\n\t\"./1y7ozg8.htm.toc.json\": 22019,\n\t\"./2032k5.htm.toc.json\": 81983,\n\t\"./2acnhf.htm.toc.json\": 81267,\n\t\"./2gps3g.htm.toc.json\": 97459,\n\t\"./2t44ld.htm.toc.json\": 96202,\n\t\"./3fjm8j.htm.toc.json\": 9260,\n\t\"./3rmqph.htm.toc.json\": 24121,\n\t\"./3yl2hx.htm.toc.json\": 76638,\n\t\"./3zxt7z.htm.toc.json\": 79516,\n\t\"./448jer.htm.toc.json\": 51679,\n\t\"./46bhg0.htm.toc.json\": 65588,\n\t\"./7kdfk8.htm.toc.json\": 89128,\n\t\"./8lcrnu.htm.toc.json\": 88210,\n\t\"./9h3hmp.htm.toc.json\": 19858,\n\t\"./a08lib.htm.toc.json\": 31846,\n\t\"./a0p0f4.htm.toc.json\": 13586,\n\t\"./a9wle2.htm.toc.json\": 15529,\n\t\"./bg6w8m.htm.toc.json\": 849,\n\t\"./bu9klx.htm.toc.json\": 29637,\n\t\"./cc3kmk.htm.toc.json\": 21459,\n\t\"./d5ykz8.htm.toc.json\": 77634,\n\t\"./db3vx3.htm.toc.json\": 95274,\n\t\"./dbne5d.htm.toc.json\": 46843,\n\t\"./dc5shg.htm.toc.json\": 60089,\n\t\"./djlqql.htm.toc.json\": 67071,\n\t\"./en4hhw.htm.toc.json\": 77854,\n\t\"./f40uwq.htm.toc.json\": 24095,\n\t\"./faxga5.htm.toc.json\": 79844,\n\t\"./huiysg.htm.toc.json\": 29698,\n\t\"./i9becb.htm.toc.json\": 34840,\n\t\"./jhpq7e.htm.toc.json\": 75279,\n\t\"./jywoys.htm.toc.json\": 67756,\n\t\"./kimeni.htm.toc.json\": 66918,\n\t\"./lt42s8.htm.toc.json\": 4063,\n\t\"./mtg94p.htm.toc.json\": 3499,\n\t\"./n0hez3.htm.toc.json\": 41970,\n\t\"./n8gsoq.htm.toc.json\": 45478,\n\t\"./nff3ic.htm.toc.json\": 58273,\n\t\"./nr7s9o.htm.toc.json\": 30326,\n\t\"./ofa68o.htm.toc.json\": 52118,\n\t\"./ooqfkn.htm.toc.json\": 87625,\n\t\"./pjff39.htm.toc.json\": 64138,\n\t\"./pn2ezr.htm.toc.json\": 28176,\n\t\"./q0aas8.htm.toc.json\": 72739,\n\t\"./rikltc.htm.toc.json\": 17948,\n\t\"./rku8jh.htm.toc.json\": 81740,\n\t\"./rx7jt4.htm.toc.json\": 18953,\n\t\"./spovqu.htm.toc.json\": 62233,\n\t\"./t1f0vq.htm.toc.json\": 26501,\n\t\"./t3owl3.htm.toc.json\": 28505,\n\t\"./tx6g0p.htm.toc.json\": 52583,\n\t\"./u28b7l.htm.toc.json\": 40749,\n\t\"./u4sgci.htm.toc.json\": 21062,\n\t\"./u7sd0w.htm.toc.json\": 99982,\n\t\"./uh480l.htm.toc.json\": 7169,\n\t\"./v6ei19.htm.toc.json\": 63218,\n\t\"./vywf17.htm.toc.json\": 54330,\n\t\"./wji6g0.htm.toc.json\": 65983,\n\t\"./wlvrl9.htm.toc.json\": 94164,\n\t\"./xfjqry.htm.toc.json\": 49382,\n\t\"./xmbex2.htm.toc.json\": 733,\n\t\"./xqh6xg.htm.toc.json\": 94521,\n\t\"./yvgzwi.htm.toc.json\": 32008,\n\t\"./z9pvg9.htm.toc.json\": 5065,\n\t\"./zkr55u.htm.toc.json\": 32549\n};\n\n\nfunction webpackContext(req) {\n\tvar id = webpackContextResolve(req);\n\treturn __webpack_require__(id);\n}\nfunction webpackContextResolve(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t}\n\treturn map[req];\n}\nwebpackContext.keys = function webpackContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackContext.resolve = webpackContextResolve;\nmodule.exports = webpackContext;\nwebpackContext.id = 88107;","var map = {\n\t\"./cache-fjqett\": 57108,\n\t\"./cache-fjqett.js\": 57108,\n\t\"./resources\": 25217,\n\t\"./resources.js\": 25217\n};\n\n\nfunction webpackContext(req) {\n\tvar id = webpackContextResolve(req);\n\treturn __webpack_require__(id);\n}\nfunction webpackContextResolve(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t}\n\treturn map[req];\n}\nwebpackContext.keys = function webpackContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackContext.resolve = webpackContextResolve;\nmodule.exports = webpackContext;\nwebpackContext.id = 23052;","var map = {\n\t\"./26535a.htm\": 94560,\n\t\"./365a1777.htm\": 95281,\n\t\"./4669e57a.htm\": 16766,\n\t\"./56fa014a.htm\": 430,\n\t\"./58be3d4b.htm\": 34236,\n\t\"./737e95b3.htm\": 89869,\n\t\"./76024c57.htm\": 70484,\n\t\"./79453be7.htm\": 99768,\n\t\"./79da6013.htm\": 75478,\n\t\"./7d0d4b58.htm\": 1954,\n\t\"./8c6a1638.htm\": 50093,\n\t\"./8f8dd110.htm\": 66557,\n\t\"./984d050c.htm\": 83919,\n\t\"./9b96de31.htm\": 36034,\n\t\"./a4690ebd.htm\": 81581,\n\t\"./a586ccf8.htm\": 72646,\n\t\"./b09cec40.htm\": 2294,\n\t\"./b3001d81.htm\": 41279,\n\t\"./befb463a.htm\": 99558,\n\t\"./c72c09e6.htm\": 27868,\n\t\"./cb48f8a4.htm\": 7388,\n\t\"./e173fd3a.htm\": 4423,\n\t\"./e3e877fe.htm\": 11234,\n\t\"./edefab81.htm\": 41587,\n\t\"./f5916bab.htm\": 32391,\n\t\"./fbc08f90.htm\": 93801,\n\t\"./fe80f986.htm\": 30380\n};\n\n\nfunction webpackContext(req) {\n\tvar id = webpackContextResolve(req);\n\treturn __webpack_require__(id);\n}\nfunction webpackContextResolve(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t}\n\treturn map[req];\n}\nwebpackContext.keys = function webpackContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackContext.resolve = webpackContextResolve;\nmodule.exports = webpackContext;\nwebpackContext.id = 35149;","var map = {\n\t\"./26535a.htm.toc.json\": 3871,\n\t\"./365a1777.htm.toc.json\": 35666,\n\t\"./4669e57a.htm.toc.json\": 45488,\n\t\"./56fa014a.htm.toc.json\": 81682,\n\t\"./58be3d4b.htm.toc.json\": 14847,\n\t\"./737e95b3.htm.toc.json\": 51786,\n\t\"./76024c57.htm.toc.json\": 12467,\n\t\"./79453be7.htm.toc.json\": 25157,\n\t\"./79da6013.htm.toc.json\": 23771,\n\t\"./7d0d4b58.htm.toc.json\": 39615,\n\t\"./8c6a1638.htm.toc.json\": 58206,\n\t\"./8f8dd110.htm.toc.json\": 43640,\n\t\"./984d050c.htm.toc.json\": 58851,\n\t\"./9b96de31.htm.toc.json\": 50533,\n\t\"./a4690ebd.htm.toc.json\": 63774,\n\t\"./a586ccf8.htm.toc.json\": 50760,\n\t\"./b09cec40.htm.toc.json\": 87065,\n\t\"./b3001d81.htm.toc.json\": 39307,\n\t\"./befb463a.htm.toc.json\": 70525,\n\t\"./c72c09e6.htm.toc.json\": 60102,\n\t\"./cb48f8a4.htm.toc.json\": 20861,\n\t\"./e173fd3a.htm.toc.json\": 59290,\n\t\"./e3e877fe.htm.toc.json\": 50846,\n\t\"./edefab81.htm.toc.json\": 84514,\n\t\"./f5916bab.htm.toc.json\": 92458,\n\t\"./fbc08f90.htm.toc.json\": 28919,\n\t\"./fe80f986.htm.toc.json\": 54223\n};\n\n\nfunction webpackContext(req) {\n\tvar id = webpackContextResolve(req);\n\treturn __webpack_require__(id);\n}\nfunction webpackContextResolve(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t}\n\treturn map[req];\n}\nwebpackContext.keys = function webpackContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackContext.resolve = webpackContextResolve;\nmodule.exports = webpackContext;\nwebpackContext.id = 19530;","export default function _arrayLikeToArray(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n\n  for (var i = 0, arr2 = new Array(len); i < len; i++) {\n    arr2[i] = arr[i];\n  }\n\n  return arr2;\n}","import arrayLikeToArray from \"./arrayLikeToArray.js\";\nexport default function _unsupportedIterableToArray(o, minLen) {\n  if (!o) return;\n  if (typeof o === \"string\") return arrayLikeToArray(o, minLen);\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n  if (n === \"Object\" && o.constructor) n = o.constructor.name;\n  if (n === \"Map\" || n === \"Set\") return Array.from(o);\n  if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return arrayLikeToArray(o, minLen);\n}","import unsupportedIterableToArray from \"./unsupportedIterableToArray.js\";\nexport default function _createForOfIteratorHelper(o, allowArrayLike) {\n  var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"];\n\n  if (!it) {\n    if (Array.isArray(o) || (it = unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") {\n      if (it) o = it;\n      var i = 0;\n\n      var F = function F() {};\n\n      return {\n        s: F,\n        n: function n() {\n          if (i >= o.length) return {\n            done: true\n          };\n          return {\n            done: false,\n            value: o[i++]\n          };\n        },\n        e: function e(_e) {\n          throw _e;\n        },\n        f: F\n      };\n    }\n\n    throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n  }\n\n  var normalCompletion = true,\n      didErr = false,\n      err;\n  return {\n    s: function s() {\n      it = it.call(o);\n    },\n    n: function n() {\n      var step = it.next();\n      normalCompletion = step.done;\n      return step;\n    },\n    e: function e(_e2) {\n      didErr = true;\n      err = _e2;\n    },\n    f: function f() {\n      try {\n        if (!normalCompletion && it[\"return\"] != null) it[\"return\"]();\n      } finally {\n        if (didErr) throw err;\n      }\n    }\n  };\n}"],"names":["replaceable","h","viewBox","fill","xmlns","d","iconColor","imageLight","name","common","self","prevIcon","nextIcon","closeIcon","c","cB","defineComponent","props","showToolbar","Boolean","onNext","Function","onPrev","clsPrefix","type","String","required","setup","themeRef","toRef","thumbnailEl","previewRef","ref","previewWrapperRef","previewSrcRef","undefined","showRef","displayedRef","syncTransformOrigin","value","previewWrapper","style","tbox","getBoundingClientRect","tx","left","width","ty","top","height","transformOrigin","handleKeyup","e","_a","_b","code","call","toggleShow","watch","on","document","startX","startY","offsetX","offsetY","startOffsetX","startOffsetY","mouseDownClientX","mouseDownClientY","dragging","handleMouseMove","clientX","clientY","derivePreviewStyle","getMoveStrategy","opts","mouseUpClientX","mouseUpClientY","deltaHorizontal","deltaVertical","moveVerticalDirection","moveHorizontalDirection","getDerivedOffset","moveStrategy","preview","pbox","nextOffsetX","nextOffsetY","window","innerWidth","right","Math","min","max","innerHeight","bottom","handleMouseUp","offset","handlePreviewMousedown","handlePreviewDblclick","scale","rotate","handleSwitchPrev","handleSwitchNext","rotateCounterclockwise","rotateClockwise","zoomIn","zoomOut","transition","transformStyle","cssText","offsetHeight","exposedMethods","setPreviewSrc","src","setThumbnailEl","el","Object","assign","previewSrc","show","appear","displayed","handleAfterLeave","handleDragStart","preventDefault","cssVars","computed","cubicBezierEaseInOut","render","this","Fragment","renderSlot","$slots","default","withDirectives","class","Transition","onClick","RotateCounterclockwise","RotateClockwise","ZoomOut","ZoomIn","onAfterLeave","onEnter","onBeforeLeave","draggable","onMousedown","onDblclick","key","onDragstart","vShow","zindexable","enabled","createId","length","random","toString","slice","imageGroupInjectionKey","Symbol","imageGroupProps","currentSrc","mergedClsPrefixRef","groupId","vm","getCurrentInstance","previewInstRef","go","step","proxy","container","$el","parentElement","imgs","querySelectorAll","index","Array","from","findIndex","img","dataset","provide","mergedClsPrefix","next","prev","imageProps","alt","Number","imgProps","objectFit","fallbackSrc","previewDisabled","loadDescription","onError","onLoad","inheritAttrs","imageRef","showErrorRef","imgPropsRef","imageGroupHandle","inject","click","mergedPreviewSrc","previewInst","watchEffect","showError","mergedOnError","imgPropsOnError","mergedOnLoad","imgPropsOnLoad","imgWrapperNode","mergeProps","$attrs","role","components","failedToLoadImg","id","mdClass","mounted","renderMd","content","nV","methods","imgReplacement","innerHTML","replaceAll","unhandleImageTagStart","indexOf","unhandleImageTagStringList","unhandleImageTagEnd","push","substring","item","node","DOMParser","parseFromString","getElementsByTagName","children","body","template","NImage","createApp","mount","__exports__","mode","winWidth","bound","winHeight","computedTocList","toc","title","href","unwrapElement","target","querySelector","getScrollTop","HTMLElement","scrollTop","scrollY","getRect","cM","position","affixProps","listenTo","triggerTop","triggerBottom","offsetTop","validator","offsetBottom","affixPropKeys","keysOf","scrollTarget","stickToTopRef","stickToBottomRef","bottomAffixedTriggerScrollTopRef","topAffixedTriggerScrollTopRef","affixedRef","mergedOffsetTopRef","mergedTopRef","mergedBottomRef","mergedOffsetBottomRef","selfRef","init","getScrollTarget","addEventListener","handleScroll","_handleScroll","selfEl","containerRect","affixRect","pxToTop","pxToBottom","mergedOffsetTop","mergedOffsetBottom","onMounted","onBeforeUnmount","removeEventListener","affixed","mergedstyle","cE","backgroundColor","isIos","test","navigator","platform","maxTouchPoints","MSStream","useIsIos","pointerEvents","scrollbarProps","size","duration","scrollable","xScrollable","containerStyle","contentClass","contentStyle","horizontalRailStyle","verticalRailStyle","onScroll","onWheel","onResize","internalOnUpdateScrollLeft","Scrollbar","wrapperRef","containerRef","contentRef","yRailRef","xRailRef","contentHeightRef","contentWidthRef","containerHeightRef","containerWidthRef","yRailSizeRef","xRailSizeRef","containerScrollTopRef","containerScrollLeftRef","isShowXBarRef","isShowYBarRef","xBarVanishTimerId","yBarVanishTimerId","yBarPressed","xBarPressed","memoYTop","memoXLeft","memoMouseX","memoMouseY","yBarSizeRef","containerHeight","contentHeight","yRailSize","yBarSizePxRef","xBarSizeRef","containerWidth","contentWidth","xRailSize","xBarSizePxRef","yBarTopRef","containerScrollTop","yBarTopPxRef","xBarLeftRef","containerScrollLeft","xBarLeftPxRef","needYBarRef","needXBarRef","mergedContainerRef","mergedContentRef","handleContentResize","sync","handleContainerResize","scrollTo","options","y","scrollToPosition","elSize","behavior","debounce","MAX_SAFE_INTEGER","handleMouseEnterWrapper","showXBar","showYBar","handleMouseLeaveWrapper","hideBar","hideYBar","hideXBar","clearTimeout","setTimeout","syncScrollState","scrollLeft","syncPositionState","offsetWidth","xRailEl","yRailEl","isMouseUpAway","contains","handleXScrollMouseDown","stopPropagation","handleXScrollMouseMove","handleXScrollMouseUp","xBarSize","dX","dScrollLeft","toScrollLeftUpperBound","toScrollLeft","handleYScrollMouseDown","handleYScrollMouseMove","handleYScrollMouseUp","yBarSize","dY","dScrollTop","toScrollTopUpperBound","toScrollTop","needXBar","needYBar","classList","remove","add","yBarSizePx","xBarSizePx","yBarTopPx","xBarLeftPx","isShowXBar","isShowYBar","scrollbarBorderRadius","scrollbarHeight","scrollbarWidth","color","colorHover","createChildren","onMouseenter","onMouseleave","VResizeObserver","getTitleAttribute","anchorInjectionKey","anchorLinkProps","slots","titleRef","NAnchor","hrefRef","activeRef","activeHref","handleClick","setActiveHref","updateBarPosition","getOffset","elTop","scrollTargetTop","baseAnchorProps","showRail","showBackground","internalScrollable","ignoreGap","offsetTarget","baseAnchorPropKeys","collectedLinkHrefs","titleEls","activeHrefRef","slotRef","barRef","isBlockTypeRef","mergedShowRailRef","disableTransitionOneTick","barEl","slotEl","forEach","titleEl","nextTick","nextBarEl","nextSlotEl","linkTitleEl","linkTitleClientTop","linkTitleClientLeft","anchorClientTop","anchorClientLeft","offsetLeft","maxWidth","idMatchResult","exec","linkEl","getElementById","scrollIntoView","throttle","links","sort","a","b","currentActiveHref","activeLink","reduce","prevLink","link","location","hash","isBlockType","mergedShowRail","Anchor","anchorProps","affix","anchorRef","cssVarsRef","railColor","linkColor","railColorActive","linkTextColor","linkTextColorHover","linkTextColorPressed","linkTextColorActive","linkFontSize","railWidth","linkPadding","borderRadius","renderAnchor","keep","NAnchorLink","data","resizeTimer","getWinHeight","getWinWidth","adjustTocRight","onresize","$props","getLeft","clientWidth","clientHeight","MarkdownBody","loading","text","repeat","postMetadata","dayjs","date","format","daybefore","$route","params","articleId","vars","heightSmall","heightMedium","heightLarge","colorEnd","skeletonLight","skeletonProps","round","circle","animated","sharp","theme","selfThemeVars","sizeHeight","mergedWidth","mergedHeight","display","verticalAlign","animation","child","apply","map","_","borderColor","dividerProps","titlePlacement","dashed","vertical","textColor","fontWeight","NSkeleton","NDivider","Toc","aId","tocSrc","resourceList","resources","list","rs","postMetadatas","JSON","parse","sessionStorage","abbrlink","pastdayjs","now","set","before","diff","hour","ceil","goto","element","postMetadataLength","goToPage","listProps","bordered","listInjectionKey","fontSize","colorModal","colorPopover","borderColorModal","borderColorPopover","header","footer","listInjection","prefix","suffix","NList","NListItem","$router","catch","cols","span","menuValid","activeKey","onMenuItemClick","menuOptions","toArray","arg","isArray","TRAVERSE_COMMAND","STOP","traverseWithCb","treeNode","callback","command","childNode","getNonLeafKeys","treeNodes","preserveGroup","keys","cb","isLeaf","traverse","isGroup","nodes","rawNode","getChildren","defaultGetChildren","defaultGetKey","isIgnored","isShallowLoaded","isDisabled","disabled","isExpilicitlyNotLoaded","unwrapCheckedKeys","result","checkedKeys","unwrapIndeterminateKeys","indeterminateKeys","merge","originalKeys","keysToAdd","Set","has","minus","keysToRemove","delete","SubtreeNotLoadedError","Error","constructor","super","message","getExtendedCheckedKeySetAfterCheck","checkKeys","currentCheckedKeys","treeMate","getExtendedCheckedKeySet","concat","getAvailableAscendantNodeSet","uncheckedKeys","visitedKeys","uncheckedKey","uncheckedTreeNode","treeNodeMap","get","nodeCursor","parent","getExtendedCheckedKeySetAfterUncheck","extendedCheckedKeySet","extendedKeySetToUncheck","ascendantKeySet","getCheckedKeys","keysToCheck","keysToUncheck","cascade","leafOnly","checkStrategy","levelTreeNodeMap","checkStrategyIsParent","checkStrategyIsChild","syntheticCheckedKeySet","syntheticIndeterminateKeySet","maxLevel","level","levelIsZero","levelTreeNodes","levelTreeNode","levelTreeNodeKey","shallowLoaded","v","fullyChecked","partialChecked","allDisabled","childKey","isUnchecking","visitedKeySet","extendedKeySet","checkedKey","checkedTreeNode","getPath","includeGroup","includeSelf","mergedPath","keyPath","treeNodePath","ignored","reverse","pop","getFirstAvailableNode","getNext","rawGetNext","loop","sibs","siblings","l","move","fromNode","dir","includeDisabled","iterate","rawGetPrev","getChildOptions","meet","endNode","getChild","nextNode","rawGetParent","start","end","delta","i","childInGroup","moveMethods","getParent","getPrev","flatten","expandedKeys","expandedKeySet","flattenedNodes","parentKey","createTreeNodes","rawNodes","nodeProto","create","isFirstChild","isLastChild","rawChildren","createTreeMate","Map","getDisabled","getIgnored","getIsGroup","getKey","_getChildren","ignoreEmptyChildren","getNode","tmNode","_getNode","treemate","getFlattenedNodes","check","uncheck","useKeyboard","enabledRef","state","reactive","ctrl","win","shift","tab","keydown","keyup","keydownHandler","handler","stop","prevent","keyupHandler","onBeforeMount","readonly","viewMeasurer","ensureViewBoundingRect","createElement","visibility","appendChild","getPointRect","x","viewRect","elRect","getParentNode","nodeType","parentNode","getScrollParent","overflow","overflowX","overflowY","getComputedStyle","Binder","syncTargetWithParent","syncTarget","VBinder","targetRef","setTargetRef","scrollableNodes","ensureScrollListener","cursor","removeScrollListeners","followerScrollListeners","addScrollListener","listener","removeScrollListener","onScrollRaf","followerResizeListeners","addResizeListener","removeResizeListener","setTargetDirective","updated","modalBodyInjectionKey","drawerBodyInjectionKey","popoverBodyInjectionKey","internalSelectionMenuBodyInjectionKey","teleportDisabled","useAdjustedTo","modal","drawer","popover","selectMenu","to","tdkey","propTo","getFirstSlotVNode","slotName","slot","warn","slotContent","oppositionPositions","oppositeAligns","center","propToCompare","transformOrigins","overlapTransformOrigin","oppositeAlignCssPositionProps","cssPositionToOppositeAlign","getPlacementAndOffsetOfFollower","placement","targetRect","followerRect","flipLevel","flip","overlap","align","split","properAlign","oppositeAlignCssPositionProp","currentAlignCssPositionProp","oppositeAlignCssSizeProp","followerOverTargetSize","possibleAlternativeAlignCssPositionProp1","possibleAlternativeAlignCssPositionProp2","alternativeAlignCssSizeProp","properPosition","getProperTransformOrigin","offsetRect","offsetTopToStandardPlacement","offsetLeftToStandardPlacement","transform","zIndex","syncTrigger","minWidth","containerClass","mergedEnabledRef","followerRef","offsetContainerRef","ensureListeners","includes","syncPosition","removeListeners","ssrAdapter","head","ssr","follower","setAttribute","removeAttribute","offsetContainerRect","properPlacement","properTransformOrigin","syncOnNextTick","then","console","error","prop","isMountedRef","mergedToRef","mergedEnabled","mergedTo","vNode","ctxKey","clickoutside","ctx","unmounted","mousemoveoutside","oppositePlacement","placementStyle","arrowStyleLiteral","sizeStyle","popoverBodyProps","trigger","showArrow","delay","raw","arrowStyle","displayDirective","onClickoutside","renderArrow","attrs","namespaceRef","NPopover","bodyRef","followerEnabledRef","directivesRef","directives","positionManuallyRef","positionManually","handleClickOutside","handleMouseMoveOutside","styleRef","cubicBezierEaseIn","cubicBezierEaseOut","space","spaceArrow","padding","dividerColor","boxShadow","arrowHeight","arrowOffset","arrowOffsetVertical","handleMouseEnter","handleMouseLeave","getTriggerElement","renderContentNode","contentNode","internalRenderBodyRef","renderBody","extraClass","extraClassRef","setBodyInstance","namespace","isMounted","zIndexRef","adjustedTo","followerEnabled","bodyPropKeys","triggerEventMap","focus","hover","manual","nested","appendEvents","events","eventName","originalHandler","args","textVNodeType","createTextVNode","popoverBaseProps","defaultShow","internalExtraClass","onUpdateShow","internalSyncTargetWithParent","internalInheritedEventHandlers","onShow","onHide","arrow","popoverProps","internalRenderBody","__popover__","binderInstRef","controlledShowRef","uncontrolledShowRef","mergedShowWithoutDisabledRef","mergedShowConsideringDisabledPropRef","getMergedDisabled","getMergedShow","compatibleShowArrowRef","mergedShowArrowRef","bodyInstance","showTimerIdRef","hideTimerIdRef","doUpdateShow","_onUpdateShow","clearShowTimer","showTimerId","clearHideTimer","hideTimerId","handleFocus","mergedDisabled","handleBlur","delayCallback","delayedCallback","nextShow","setShow","mergedShowConsideringDisabledProp","uncontrolledShow","mergedShowArrow","triggerVNode","popoverInside","activator","cloneVNode","handlers","onFocus","onBlur","ascendantAndCurrentHandlers","mergedHandlers","_handlers","mergedShow","createRefSetter","inst","isSubmenuNode","childrenField","isGroupNode","isDividerNode","isRenderNode","happensIn","dataSetPropName","dropdownOptionInjectionKey","NDropdown","dropdownInjectionKey","hoverKeyRef","keyboardKeyRef","lastToggledSubmenuKeyRef","pendingKeyPathRef","activeKeyPathRef","animatedRef","mergedShowRef","renderLabelRef","renderIconRef","labelFieldRef","childrenFieldRef","NDropdownOption","NDropdownMenu","dropdownMenuInjectionKey","rawNodeRef","hasSubmenuRef","mergedDisabledRef","showSubmenuRef","hoverKey","keyboardKey","lastToggledSubmenuKey","pendingKeyPath","shouldDelayRef","deferredShowSubmenuRef","parentEnteringSubmenuRef","enteringSubmenuRef","handleSubmenuBeforeEnter","handleSubmenuAfterEnter","relatedTarget","hasSubmenu","doSelect","labelField","renderLabel","renderIcon","siblingHasIcon","showIconRef","siblingHasSubmenu","mergedShowSubmenu","pending","childActive","activeKeyPath","k","active","submenuVNode","tmNodes","builtinProps","onMousemove","icon","ChevronRight","onBeforeEnter","onAfterEnter","showIcon","some","rawChild","opacity","whiteSpace","flex","dropdownBaseProps","keyboard","inverted","onSelect","keyField","popoverPropKeys","dropdownProps","treemateRef","tmNodesRef","pendingKeyRef","_c","keyboardEnabledRef","ArrowUp","handleKeyDownUp","ArrowRight","handleKeyDownRight","ArrowDown","handleKeyDownDown","ArrowLeft","handleKeyDownLeft","Escape","handleKeyDownEsc","Enter","handleKeyUpEnter","clearPendingState","handleKeyDown","pendingNode","getPendingNode","pendingKey","direction","nextKeyboardKey","firstNode","currentNode","mergedTheme","optionOpacityDisabled","optionIconSuffixWidth","optionSuffixWidth","optionIconPrefixWidth","optionPrefixWidth","optionHeight","optionIconSize","colorInverted","optionColorHoverInverted","optionColorActiveInverted","optionTextColorInverted","optionTextColorHoverInverted","optionTextColorActiveInverted","optionTextColorChildActiveInverted","prefixColorInverted","suffixColorInverted","groupHeaderTextColorInverted","optionColorHover","optionColorActive","optionTextColor","optionTextColorHover","optionTextColorActive","optionTextColorChildActive","prefixColor","suffixColor","groupHeaderTextColor","renderPopoverBody","className","peers","Popover","themeOverrides","peerOverrides","collapsed","extra","paddingLeft","maxIconSize","activeIconSize","iconMarginRight","menuProps","menuInjectionKey","iconStyle","marginRight","renderExtra","expandIcon","ariaHidden","ChevronDownFilled","useMenuChildProps","internalKey","root","submenuProps","submenuInjectionKey","MenuChild","useMenuChild","NMenu","NSubmenu","mergedCollapsedRef","dropdownShowRef","doClick","toggleExpand","handlePopoverShowChange","paddingLeftRef","menuItemGroupInjectionKey","invertedRef","isHorizontal","isHorizontalRef","dropdownPlacement","dropdownShow","mergedValue","mergedValueRef","activePathRef","mergedExpandedKeysRef","dropdownEnabled","createSubmenuItem","createSubmenuChildren","itemRenderer","builtinThemeOverrides","fontSizeLarge","optionIconSizeLarge","ICON_MARGIN_RIGHT","NMenuOptionGroup","horizontalRef","dropdownPlacementRef","maxIconSizeRef","collapsedIconSize","iconSize","activeIconSizeRef","collapsedWidth","indent","rootIndent","mergedRootIndent","iconMarginRightRef","menuItemGroupProps","tooltipProps","popoverRef","tooltipExposedMethod","popoverThemeOverrides","menuItemProps","submenuDisabledRef","mergedThemeRef","selected","Tooltip","groupPropKeys","itemPropKeys","submenuPropKeys","isIgnoredNode","titleExtra","originalTransition","leavingDelay","foldPadding","enterToProps","leaveToProps","enterClass","leaveClass","marginTop","marginBottom","paddingTop","paddingBottom","margin","borderBottom","hoverStyle","layoutSiderInjectionKey","defaultExpandAll","defaultExpandedKeys","defaultValue","watchProps","onUpdateExpandedKeys","onUpdateValue","accordion","items","onOpenNamesChange","onExpandedNamesChange","expandedNames","defaultExpandedNames","layoutSider","collapseModeRef","collapsedRef","treeMateRef","treeKeysLevelOneRef","uncontrolledValueRef","controlledValueRef","uncontrolledExpandedKeysRef","initUncontrolledExpandedKeys","controlledExpandedKeysRef","_onUpdateValue","doUpdateExpandedKeys","_onUpdateExpandedKeys","currentExpandedKeys","expanededKey","splice","closeKeyIndex","controlledExpandedKeys","uncontrolledExpanededKeys","mergedExpandedKeys","uncontrolledValue","activePath","mergedCollapsed","borderColorHorizontal","itemHeight","groupTextColorInverted","itemTextColorInverted","arrowColorInverted","arrowColorHoverInverted","arrowColorActiveInverted","arrowColorChildActiveInverted","itemIconColorInverted","itemTextColorHoverInverted","itemIconColorHoverInverted","itemTextColorActiveInverted","itemIconColorActiveInverted","itemIconColorCollapsedInverted","itemColorActiveInverted","itemColorActiveCollapsedInverted","itemTextColorChildActiveInverted","itemIconColorChildActiveInverted","groupTextColor","itemTextColor","arrowColor","arrowColorHover","arrowColorActive","arrowColorChildActive","itemIconColor","itemTextColorHover","itemIconColorHover","itemTextColorActive","itemIconColorActive","itemIconColorCollapsed","itemColorActive","itemColorActiveCollapsed","itemTextColorChildActive","itemIconColorChildActive","defaultBreakpointOptions","xs","s","m","xl","createMediaQuery","screenWidth","mqlMap","useBreakpoints","screens","matchMedia","breakpointStatusRef","breakpoints","updateBreakpoints","breakpointName","matches","breakpointValue","mql","cbs","addListener","breakpoint","filter","parseResponsiveProp","reponsiveProp","pairLiteral","parseResponsivePropValue","activeKeyOrSize","classObj","activeValue","keyAsNum","isNaN","defaultBreakpoints","xxl","defaultSpan","gridItemProps","privateOffset","privateSpan","privateColStart","privateShow","__GRID_ITEM__","alias","xGapRef","itemStyleRef","overflowRef","gridInjectionKey","itemStyle","deriveStyle","vnode","xGap","mergedXGap","gridColumn","marginLeft","defaultCols","gridProps","responsive","itemResponsive","collapsedRows","yGap","NConfigProvider","numRegex","widthRef","breakpointsRef","mergedBreakpointsRef","isResponsiveRef","responsiveQueryRef","responsiveColsRef","responsiveXGapRef","responsiveYGapRef","handleResize","entry","contentRect","handleResizeRaf","handleResizeRef","gridTemplateColumns","columnGap","rowGap","isResponsive","responsiveQuery","responsiveCols","renderContent","_d","_e","_f","childrenAndRawSpan","clonedChild","rawChildSpan","suffixSpan","maybeSuffixNode","suffixPropValue","spanCounter","done","childOffset","childSpan","remainder","NGrid","NGi","scriptChangeAnimate","scriptSections","scriptsMds","sectionName","label","scriptId","showContent","routeTo","charAt","module","exports","S","unicode","global","bind","toObject","callWithSafeIterationClosing","isArrayIteratorMethod","isConstructor","lengthOfArrayLike","createProperty","getIterator","getIteratorMethod","arrayLike","O","IS_CONSTRUCTOR","argumentsLength","arguments","mapfn","mapping","iterator","iteratorMethod","uncurryThis","IndexedObject","arraySpeciesCreate","createMethod","TYPE","IS_MAP","IS_FILTER","IS_SOME","IS_EVERY","IS_FIND_INDEX","IS_FILTER_REJECT","NO_HOLES","$this","callbackfn","that","specificCreate","boundFunction","every","find","filterReject","fails","wellKnownSymbol","V8_VERSION","SPECIES","METHOD_NAME","array","foo","toAbsoluteIndex","fin","n","isObject","originalArray","C","prototype","arraySpeciesConstructor","anObject","iteratorClose","fn","ENTRIES","toPropertyKey","definePropertyModule","createPropertyDescriptor","object","propertyKey","f","path","hasOwn","wrappedWellKnownSymbolModule","defineProperty","NAME","redefine","regexpExec","createNonEnumerableProperty","RegExpPrototype","RegExp","KEY","FORCED","SHAM","SYMBOL","DELEGATES_TO_SYMBOL","DELEGATES_TO_EXEC","execCalled","re","flags","uncurriedNativeRegExpMethod","nativeMethod","regexp","str","arg2","forceStringMethod","uncurriedNativeMethod","$exec","floor","replace","stringSlice","SUBSTITUTION_SYMBOLS","SUBSTITUTION_SYMBOLS_NO_NAMED","matched","captures","namedCaptures","replacement","tailPos","symbols","match","ch","capture","classof","argument","toIndexedObject","$getOwnPropertyNames","arraySlice","windowNames","getOwnPropertyNames","getWindowNames","it","isCallable","TypeError","R","regexpFlags","stickyHelpers","shared","getInternalState","UNSUPPORTED_DOT_ALL","UNSUPPORTED_NCG","nativeReplace","nativeExec","patchedExec","UPDATES_LAST_INDEX_WRONG","re1","re2","lastIndex","UNSUPPORTED_Y","BROKEN_CARET","NPCG_INCLUDED","PATCH","string","reCopy","group","groups","sticky","source","charsAdded","strCopy","multiline","input","ignoreCase","dotAll","$RegExp","MISSED_STICKY","$","checkCorrectnessOfIteration","INCORRECT_ITERATION","iterable","stat","forced","arrayMethodHasSpeciesSupport","un$Slice","HAS_SPECIES_SUPPORT","proto","Constructor","un$Test","requireObjectCoercible","isRegExp","getMethod","regExpFlags","getSubstitution","IS_PURE","REPLACE","getFlags","stringIndexOf","searchValue","fromIndex","replaceValue","IS_REG_EXP","replacer","searchString","functionalReplace","searchLength","advanceBy","endOfLastMatch","fixRegExpWellKnownSymbolLogic","toIntegerOrInfinity","toLength","advanceStringIndex","regExpExec","maybeToString","REPLACE_KEEPS_$0","REGEXP_REPLACE_SUBSTITUTES_UNDEFINED_CAPTURE","REPLACE_SUPPORTS_NAMED_GROUPS","maybeCallNative","UNSAFE_SUBSTITUTE","rx","res","fullUnicode","results","matchStr","accumulatedResult","nextSourcePosition","j","replacerArgs","speciesConstructor","callRegExpExec","MAX_UINT32","$push","SPLIT_WORKS_WITH_OVERWRITTEN_EXEC","originalExec","SPLIT","nativeSplit","internalSplit","separator","limit","lim","lastLength","output","lastLastIndex","separatorCopy","splitter","unicodeMatching","p","q","A","z","DESCRIPTORS","isPrototypeOf","copyConstructorProperties","NativeSymbol","SymbolPrototype","description","EmptyStringDescriptionStore","SymbolWrapper","NATIVE_SYMBOL","symbolToString","symbolValueOf","valueOf","configurable","symbol","desc","defineWellKnownSymbol","getBuiltIn","isSymbol","$toString","nativeObjectCreate","objectKeys","getOwnPropertyNamesModule","getOwnPropertyNamesExternal","getOwnPropertySymbolsModule","getOwnPropertyDescriptorModule","propertyIsEnumerableModule","sharedKey","hiddenKeys","uid","setToStringTag","InternalStateModule","$forEach","HIDDEN","PROTOTYPE","TO_PRIMITIVE","setInternalState","getterFor","ObjectPrototype","$Symbol","QObject","$stringify","nativeGetOwnPropertyDescriptor","nativeDefineProperty","nativeGetOwnPropertyNames","nativePropertyIsEnumerable","AllSymbols","ObjectPrototypeSymbols","StringToSymbolRegistry","SymbolToStringRegistry","WellKnownSymbolsStore","USE_SETTER","findChild","setSymbolDescriptor","P","Attributes","ObjectPrototypeDescriptor","wrap","tag","$defineProperty","enumerable","$defineProperties","Properties","properties","$getOwnPropertySymbols","$propertyIsEnumerable","$create","V","$getOwnPropertyDescriptor","descriptor","names","IS_OBJECT_PROTOTYPE","setter","unsafe","sham","keyFor","sym","useSetter","useSimple","defineProperties","getOwnPropertyDescriptor","getOwnPropertySymbols","FORCED_JSON_STRINGIFY","stringify","$replacer","hint","t","r","u","o","M","weekdays","months","join","g","utcOffset","abs","year","month","clone","w","D","ms","Q","toLowerCase","locale","$L","utc","$u","$x","$offset","$d","Date","NaN","UTC","$y","getFullYear","$M","getMonth","$D","getDate","$W","getDay","$H","getHours","$m","getMinutes","$s","getSeconds","$ms","getMilliseconds","$utils","isValid","isSame","startOf","endOf","isAfter","isBefore","$g","unix","getTime","toDate","$locale","weekStart","$set","daysInMonth","subtract","invalidDate","substr","meridiem","YY","YYYY","MM","MMM","monthsShort","MMMM","DD","dd","weekdaysMin","ddd","weekdaysShort","dddd","H","HH","hh","mm","ss","SSS","Z","getTimezoneOffset","toJSON","toISOString","toUTCString","extend","$i","isDayjs","en","Ls","traps","WeakMap","createTrapHandler","moveHandler","mousemove","touchstart","mouseDownOutside","downHandler","upHanlder","mousedown","mouseup","touchend","ensureTrapHandlers","elHandlers","trapHandler","trapOn","trapHandlers","trapOff","off","createDelegate","propagationStopped","immediatePropagationStopped","trackPropagation","trackImmediate","spy","event","propName","unspy","Event","currentTargets","currentTargetDescriptor","getCurrentTarget","defineCurrentTarget","getter","phaseToTypeToElToHandlers","bubble","typeToWindowEventHandlers","createUnifiedHandler","delegeteHandler","eventPhase","bubbles","phase","captureElToHandlers","bubbleElToHandlers","bubbleHandlers","displayName","createUnifiedWindowEventHandler","delegateHandler","unifiedHandler","unfiendWindowEventHandler","ensureElToHandlers","phaseHandlers","ensureWindowEventHandlers","windowEventHandlers","ensureHandlers","elToHandlers","handlerExist","windowEventHandlerExist","mergedHandler","once","trapped","mirrorPhase","transformDebounceScale","enterScale","originalTransform","enterDuration","leaveDuration","enterCubicBezier","leaveCubicBezier","useInjectionCollection","injectionName","collectionKey","valueRef","injection","prevValue","collectionArray","collectionValue","useInjectionElementCollection","getElement","collectionElement","useDeferredTrue","delayedRef","timerId","rest","keepedObject","onceCbs","paramsMap","flushOnceCallbacks","beforeNextFrameOnce","requestAnimationFrame","_arrayLikeToArray","arr","len","arr2","__esModule","unsupportedIterableToArray","require","_createForOfIteratorHelper","allowArrayLike","F","err","normalCompletion","didErr","_e2","arrayLikeToArray","_unsupportedIterableToArray","minLen","setItem","resourcesList","routeElements","elements","imgEl","outerHTML","route","filename","ZIndexManager","elementZIndex","nextZIndex","elementCount","ensureZIndex","currentZIndex","squashState","unregister","rearrange","elementZIndexPair","entries","pair1","pair2","pair","bindings","cachedEnabled","useFalseUntilTruthy","originalRef","currentRef","showTeleport","Teleport","getSlot","getFirstVNode","webpackContext","req","webpackContextResolve","__webpack_require__","resolve"],"sourceRoot":""}