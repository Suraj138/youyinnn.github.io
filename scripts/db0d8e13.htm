
          <h2 class="zip-tran"id="db0d8e13">JS</h2>
          <h3 class="zip-tran"id="e56333e6">JS 获取元素样式</h3><sb class="hide-script-block"><pre><code class="language-javascript">/*
  此方法兼容IE
  获取元素的样式：
    参数1：元素
    参数2：样式名
*/
function getStyle(obj, styleName) {
  var cs = obj.currentStyle
  if (cs === undefined) {
    return getComputedStyle(obj, null)[styleName]
  } else {
    return cs[styleName]
  }
}</code></pre>

          </sb><h3 class="zip-tran"id="31f5dddc">JS 事件绑定兼容</h3><sb class="hide-script-block"><pre><code class="language-javascript">/*
  事件绑定兼容
  首先要注意：
    addEventListener() 方法中的this是我们绑定的事件
    attachedEvent() 方法中的this是window

  参数：
    1、obj 要绑定的对象
    2、eventStr 绑定事件 (不要on)
    3、callback 回调函数
*/
function bindev(obj, eventStr, callback) {
  if (obj.addEventListener) {
    // 兼容大部分浏览器
    obj.addEventListener(eventStr, callback, false)
  } else {
    /*
      this是谁由调用方式决定
      由于attachEvent()的默认this是window
      为了统一this
      我们可以用下面的方式来指定this
      callback.apply(obj);
    */
    // IE
    obj.attachEvent(&#39;on&#39; + eventStr, function () {
      callback.apply(obj)
    })
  }
}</code></pre>

          </sb><h3 class="zip-tran"id="a8e120f2">JS 滚动动画</h3><sb class="hide-script-block"><pre><code class="language-javascript">/*
  md的滚动条
  去到id为elementid的元素位置
  速度是 500
*/
$(&#39;#md&#39;).animate({
  scrollTop: $(&#39;#elementid&#39;).offset().top
}, 500);</code></pre>

          </sb><h3 class="zip-tran"id="386ecdf">JS 滚动动画改进</h3><sb class="hide-script-block"><pre><code class="language-javascript">/*
  防止到了位置之后再滚动到该元素 而offset改变
*/
function scrolltoelement(elementid) {
  if ($(&#39;#&#39; + elementid)[0].oset === undefined) {
    $(&#39;#&#39; + elementid)[0].oset = $(&#39;#&#39; + elementid).offset().top
  }
  $(&#39;#md&#39;).animate({
    scrollTop: $(&#39;#&#39; + elementid)[0].oset
  }, 500);
}</code></pre>

          </sb><h3 class="zip-tran"id="3ac1cc36">JS 检测页面滚动代码</h3><sb class="hide-script-block"><pre><code class="language-JavaScript">$(window).scroll(function () {
  var scrollTo = $(window).scrollTop(),
  docHeight = $(document).height(),
  windowHeight = $(window).height();
  scrollPercent = (scrollTo / (docHeight-windowHeight)) * 100;
  percent.innerText = scrollPercent
})</code></pre>

          </sb><h3 class="zip-tran"id="f386f62d">JS 小数</h3><sb class="hide-script-block"><ol>
<li><p>丢弃小数部分,保留整数部分 <code>parseInt(7/2)</code> </p>
</li>
<li><p>向上取整,有小数就整数部分加1 <code>Math.ceil(7/2)</code></p>
</li>
<li><p>四舍五入 <code>Math.round(7/2)</code></p>
</li>
<li><p>向下取整 <code>Math.floor(7/2)</code></p>
</li>
<li><p>四舍五入 保留位数：</p>
<pre><code class="language-javascript">var num =2.446242342;
num = num.toFixed(2); // 输出结果为 2.45</code></pre>
</li>
</ol>

          </sb><h3 class="zip-tran"id="58f57d8f">JS CSS 动态添加动画效果</h3><sb class="hide-script-block"><pre><code class="language-javascript">  $(&#39;#searchtext&#39;).addClass(&#39;getnothing&#39;)
  setTimeout(function () {
    $(&#39;#searchtext&#39;).removeClass(&#39;getnothing&#39;)
  }, 1100)</code></pre>
<pre><code class="language-css">.getnothing{
  animation: getnothing 1s;
}

@keyframes getnothing{
  50% {
    background-color: rgba(247, 117, 117, 0.534);
  }
}</code></pre>

          </sb><h3 class="zip-tran"id="31f85e50">JS 控制聚焦/失焦事件</h3><sb class="hide-script-block"><pre><code class="language-js">  $(&#39;#searchtext&#39;).focus(function () {
    $(&#39;#scriptsearcher&#39;)[0].style.opacity = &#39;1&#39;
  })
  $(&#39;#searchtext&#39;).blur(function () {
    $(&#39;#scriptsearcher&#39;)[0].style.opacity = &#39;0.3&#39;
  })</code></pre>

          </sb><h3 class="zip-tran"id="5e7342ba">AJAX设置请求超时</h3><sb class="hide-script-block"><pre><code class="language-js">var ajaxTimeoutTest = $.ajax({
　　url:&#39;&#39;,  //请求的URL
　　timeout : 1000, //超时时间设置，单位毫秒
　　type : &#39;get&#39;,  //请求方式，get或post
　　data :{},  //请求所传参数，json格式
　　dataType:&#39;json&#39;,//返回的数据格式
　　success:function(data){ //请求成功的回调函数
　　　　alert(&quot;成功&quot;);
　　},
　　complete : function(XMLHttpRequest,status){ //请求完成后最终执行参数
　　　　if(status==&#39;timeout&#39;){//超时,status还有success,error等值的情况
 　　　　　 ajaxTimeoutTest.abort();
　　　　　  alert(&quot;超时&quot;);
　　　　}
　　}
});</code></pre>
<p>函数写在complete中，因为无论success还是error，complete函数都会执行。</p>

          </sb><h3 class="zip-tran"id="6ecab23b">Async</h3><sb class="hide-script-block"><blockquote>
<p>JS Ajax JQ 同步请求库</p>
</blockquote>
<p><a href="https://segmentfault.com/q/1010000005789740">来源</a></p>
<p><a href="https://blog.csdn.net/marujunyy/article/details/8695205">中文文档</a></p>

          </sb><h3 class="zip-tran"id="73bc63f6">JS 刷新页面</h3><sb class="hide-script-block">
          <h4 id="440ec73c">🔹手动 reload</h4><pre><code class="language-js">location.reload();</code></pre>

          <h4 id="4e562348">🔹自动定时刷新</h4><p>页面自动刷新：把如下代码加入<head>区域中</p>
<pre><code class="language-js">&lt;meta http-equiv=&quot;refresh&quot; content=&quot;5&quot;&gt;</code></pre>

          </sb><h3 class="zip-tran"id="7f4ae2eb">JS获取图片原始尺寸</h3><sb class="hide-script-block"><p>HTML5提供了一个新属性naturalWidth/naturalHeight可以直接获取图片的原始宽高</p>
<pre><code class="language-javascript">   let imgw = this.naturalWidth
   let imgh = this.naturalHeight</code></pre>

          </sb><h3 class="zip-tran"id="183db2f1">JQuery的高级选择器</h3><sb class="hide-script-block"><pre><code class="language-javascript">jQuery.parent(expr)           //找父元素
jQuery.parents(expr)          //找到所有祖先元素，不限于父元素
jQuery.children(expr)        //查找所有子元素，只会找到直接的孩子节点，不会返回所有子孙
jQuery.contents()            //查找下面的所有内容，包括节点和文本。
jQuery.prev()                //查找上一个兄弟节点，不是所有的兄弟节点
jQuery.prevAll()             //查找所有之前的兄弟节点
jQuery.next()                //查找下一个兄弟节点，不是所有的兄弟节点
jQuery.nextAll()             //查找所有之后的兄弟节点
jQuery.siblings()            //查找兄弟节点，不分前后
jQuery.find(expr)            /*跟jQuery.filter(expr)完全不一样，jQuery.filter(expr)是从初始的
                               jQuery对象集合中筛选出一部分，而jQuery.find()的返回结果，不会有初始集中
                               筛选出一部分，而jQuery.find()的返回结果，不会有初始集合中的内容，比如：
                               $(&quot;p&quot;).find(&quot;span&quot;)是从元素开始找，等于$(&quot;p span&quot;) */</code></pre>

          </sb><h3 class="zip-tran"id="76a8a4de">js取消事件冒泡</h3><sb class="hide-script-block"><pre><code class="language-javascript">$(&quot;form&quot;).bind(&quot;submit&quot;, function() { 
　　　　return false;
　　 }
)</code></pre>
<p><a href="https://www.cnblogs.com/wangking/p/6113024.html#">https://www.cnblogs.com/wangking/p/6113024.html#</a></p>

          </sb><h3 class="zip-tran"id="7d38bc67">JS判断字符串中是否含有Emoji表情</h3><sb class="hide-script-block"><p>如果前端的字符串含有Emoji表情，那么在默认的情况下是不能存在MySQL数据库中的，因为编码的问题<br>原因如下：</p>
<blockquote>
<p>本地数据库的默认编码是utf8，默认保存的是1到3个字节，但是现在的emoji表情采用4个字节保存，所以抛出异常。<br>引自：<a href="https://blog.csdn.net/wang704987562/article/details/54093979">https://blog.csdn.net/wang704987562/article/details/54093979</a></p>
</blockquote>
<p>JS判断：</p>
<pre><code class="language-javascript">function isEmojiCharacter(substring) {  
    for ( var i = 0; i &lt; substring.length; i++) {  
        var hs = substring.charCodeAt(i);  
        if (0xd800 &lt;= hs &amp;&amp; hs &lt;= 0xdbff) {  
            if (substring.length &gt; 1) {  
                var ls = substring.charCodeAt(i + 1);  
                var uc = ((hs - 0xd800) * 0x400) + (ls - 0xdc00) + 0x10000;  
                if (0x1d000 &lt;= uc &amp;&amp; uc &lt;= 0x1f77f) {  
                    return true;  
                }  
            }  
        } else if (substring.length &gt; 1) {  
            var ls = substring.charCodeAt(i + 1);  
            if (ls == 0x20e3) {  
                return true;  
            }  
        } else {  
            if (0x2100 &lt;= hs &amp;&amp; hs &lt;= 0x27ff) {  
                return true;  
            } else if (0x2B05 &lt;= hs &amp;&amp; hs &lt;= 0x2b07) {  
                return true;  
            } else if (0x2934 &lt;= hs &amp;&amp; hs &lt;= 0x2935) {  
                return true;  
            } else if (0x3297 &lt;= hs &amp;&amp; hs &lt;= 0x3299) {  
                return true;  
            } else if (hs == 0xa9 || hs == 0xae || hs == 0x303d || hs == 0x3030  
                    || hs == 0x2b55 || hs == 0x2b1c || hs == 0x2b1b  
                    || hs == 0x2b50) {  
                return true;  
            }  
        }  
    }  
}</code></pre>
<p>引自： <a href="https://blog.csdn.net/u014520745/article/details/52947466?locationNum=8&amp;fps=1">https://blog.csdn.net/u014520745/article/details/52947466?locationNum=8&amp;fps=1</a></p>

          </sb><h3 class="zip-tran"id="bfeba059">Javascript使用字符串作为函数调用语句去调用</h3><sb class="hide-script-block"><pre><code class="language-javascript">function func_abc(){
  alert(&#39;a&#39;);
}
var str = &quot;func_abc&quot;;
eval(str+&quot;()&quot;);//执行func_abc()函数</code></pre>
<p>引自：<a href="https://blog.csdn.net/qq_26222859/article/details/75285784">https://blog.csdn.net/qq_26222859/article/details/75285784</a></p>

          </sb><h3 class="zip-tran"id="ccac24c8">JS 数组排序</h3><sb class="hide-script-block"><pre><code class="language-javascript">var arr = [23, 9, 4, 78, 3];
var compare = function (x, y) {//比较函数
    if (x &lt; y) {
        return -1;
    } else if (x &gt; y) {
        return 1;
    } else {
        return 0;
    }
}
console.log(arr.sort(compare));    </code></pre>

          </sb><h3 class="zip-tran"id="4f50ce2f">JS 判断浏览器类型</h3><sb class="hide-script-block"><p>ie那段参考自：<a href="https://www.cnblogs.com/XCWebLTE/archive/2017/06/15/7017338.html">https://www.cnblogs.com/XCWebLTE/archive/2017/06/15/7017338.html</a></p>
<pre><code class="language-javascript">var userAgent = navigator.userAgent;
var isOpera = userAgent.indexOf(&quot;Opera&quot;) &gt; -1;

function ievertion() {
    var isIE = userAgent.indexOf(&quot;compatible&quot;) &gt; -1 &amp;&amp; userAgent.indexOf(&quot;MSIE&quot;) &gt; -1; //判断是否IE&lt;11浏览器  
    var isEdge = userAgent.indexOf(&quot;Edge&quot;) &gt; -1 &amp;&amp; !isIE; //判断是否IE的Edge浏览器  
    var isIE11 = userAgent.indexOf(&#39;Trident&#39;) &gt; -1 &amp;&amp; userAgent.indexOf(&quot;rv:11.0&quot;) &gt; -1;
    if (isIE) {
        var reIE = new RegExp(&quot;MSIE (\\d+\\.\\d+);&quot;);
        reIE.test(userAgent);
        var fIEVersion = parseFloat(RegExp[&quot;$1&quot;]);
        if (fIEVersion == 7) {
            return 7;
        } else if (fIEVersion == 8) {
            return 8;
        } else if (fIEVersion == 9) {
            return 9;
        } else if (fIEVersion == 10) {
            return 10;
        } else {
            return 6; //IE版本&lt;=7
        }
    } else if (isEdge) {
        return &#39;edge&#39;; //edge
    } else if (isIE11) {
        return 11; //IE11  
    } else {
        return -1; //不是ie浏览器
    }
}

function isSafari() {
    return userAgent.indexOf(&quot;Safari&quot;) &gt; -1
}

function isFF() {
    return userAgent.indexOf(&quot;Firefox&quot;) &gt; -1
}

function isChrome() {
    return userAgent.indexOf(&quot;Chrome&quot;) &gt; -1
}</code></pre>

          </sb><h3 class="zip-tran"id="ce9a464">JavaScript 解除xhr获取header的限制</h3><sb class="hide-script-block"><p><a href="http://www.ruanyifeng.com/blog/2016/04/cors.html">http://www.ruanyifeng.com/blog/2016/04/cors.html</a></p>
<p>需要后端的配合</p>

          </sb><h3 class="zip-tran"id="38727d80">JS锚点跳转动画</h3><sb class="hide-script-block"><p>一般我们的锚点都长这样</p>
<pre><code class="language-html">&lt;a name=&quot;xxx&quot; class=&quot;reference-link&quot; target=&quot;_blank&quot;&gt;&lt;/a&gt;</code></pre>
<p>因此我们就根据name去索引锚点</p>
<pre><code class="language-javascript">var $root = $(&#39;html, body&#39;)
$(&#39;.markdown-toc a&#39;).click(function() {
    $root.animate({
        scrollTop: $(&#39;[name=&quot;xxx&quot;]&#39;).offset().top
    }, 600)
})</code></pre>

          </sb><h3 class="zip-tran"id="74ce5d81">JS 监听元素任何变化</h3><sb class="hide-script-block"><p><a href="http://javascript.ruanyifeng.com/dom/mutationobserver.html">mutationobserver</a><br><a href="https://blog.csdn.net/u010419337/article/details/81474311">csdn blog</a></p>
<pre><code class="language-javascript">let MutationObserver = window.MutationObserver || window.WebKitMutationObserver || window.MozMutationObserver
let observer = new MutationObserver(function(mutationList) {
    setTimeout(function() {
        // handle change
    }, 250);
})
let article = $(&#39;#docpanel&#39;)[0]
let options = {
    &#39;attributes&#39;: true,
    &#39;attributeOldValue&#39;: true
};
observer.observe(article, options);</code></pre>

          </sb><h3 class="zip-tran"id="76320e1d">JQuery UI 拖拽</h3><sb class="hide-script-block"><p><a href="https://www.runoob.com/jqueryui/example-draggable.html">https://www.runoob.com/jqueryui/example-draggable.html</a></p>

          </sb><h3 class="zip-tran"id="82211645">JQuery GIF播放/暂停 JS-GIF库</h3><sb class="hide-script-block"><p><a href="https://www.lanrenzhijia.com/pic/3719.html">https://www.lanrenzhijia.com/pic/3719.html</a><br><a href="https://github.com/buzzfeed/libgif-js">https://github.com/buzzfeed/libgif-js</a></p>
</sb>