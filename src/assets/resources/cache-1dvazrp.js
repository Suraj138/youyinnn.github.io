
    sessionStorage.setItem('pseries', "[{\"se\":\"并发\",\"ps\":[\"Java并发编程第七坎-2===u4sgci===1546174728000\",\"Java并发编程第八坎===1u7rv30===1546901208000\"]},{\"se\":\"JettyDocument_ZH_CN_Translation\",\"ps\":[\"JettyDocument_ZH_CN_Translation_Part1===17hjlts===1525714201000\"]},{\"se\":\"leetcode\",\"ps\":[\"Leetcode-31~35===dbne5d===1552772760000\",\"Leetcode-51~55===xmbex2===1553914620000\"]}]");
    sessionStorage.setItem('pcbl', "[{\"title\":\"Leetcode-51~55\",\"categories\":[\"algorithm\",\"leetcode\"],\"tags\":[\"leetcode\",\"n-queens\",\"backtrack\"],\"date\":\"2019-03-30T02:57:00.000Z\",\"series\":\"leetcode\",\"char_count\":11884,\"short_content\":\"\\n          <h3 id=\\\"6eeef492\\\">51. N-Queens(Hard)</h3><p>The <em>n</em>-queens puzzle is the problem of placing <em>n</em> queens on an <em>n</em>×<em>n</em> chessboard such that no two queens attack each other.</p>\\n\",\"abbrlink\":\"xmbex2\"},{\"title\":\"Leetcode-31~35\",\"categories\":[\"algorithm\",\"leetcode\"],\"tags\":[\"leetcode\"],\"date\":\"2019-03-16T21:46:00.000Z\",\"series\":\"leetcode\",\"char_count\":7919,\"short_content\":\"\\n          <h3 id=\\\"111f5fe1\\\">31. Next Permutation(Medium)</h3><p>Implement <strong>next permutation</strong>, which rearranges numbers into the lexicographically next greater permutation of numbers.</p>\\n<p>If such arrangement is not possible, it must rearrange it as the lowest possible order (ie, sorted in ascending order).</p>\\n\",\"abbrlink\":\"dbne5d\"},{\"title\":\"Java并发编程第八坎\",\"categories\":[\"java\",\"concurrency\",\"《艺术》与《技术》\"],\"comments\":true,\"tags\":[\"java\",\"thread\",\"Lock-Api\",\"reentrantLock\",\"reentrantReadWriteLock\"],\"date\":\"2019-01-07T22:46:48.000Z\",\"series\":\"并发\",\"char_count\":15613,\"short_content\":\"\\n          <h3 id=\\\"e25a21eb\\\">Introduction</h3><p>我们对Lock和AQS有了一定的了解了之后，可以尝试着接触一些Lock+AQS的基本实现了，本篇会了解到最基本的同步组件<code>ReentrantLock</code>和<code>ReentrantReadWriteLock</code>，前者提供了排他锁的实现，并且支持重入，后者在前者的基础上，支持锁的分级，写锁排他读锁共享。特别的，重入锁的获取还有公平和非公平之分，我们先从这部分入手。</p>\\n\\n          <h4 id=\\\"a54a5ee\\\">Fair Lock &amp; Nonfair Lock</h4>\",\"abbrlink\":\"1u7rv30\"},{\"title\":\"CLH Lock Queue\",\"categories\":[\"data structures\",\"list\"],\"tags\":[\"algorithm\",\"clh-lock-queue\"],\"date\":\"2018-12-30T16:35:00.000Z\",\"char_count\":4711,\"short_content\":\"\\n          <h3 id=\\\"e25a21eb\\\">Introduction</h3><p>在学习Java并发中的同步器源码的时候，注释中有提到过AQS的Node结构是参考CLH的一种变体：</p>\\n<blockquote>\\n<p>The wait queue is a variant of a &quot;CLH&quot; (Craig, Landin, and Hagersten) lock queue. </p>\\n</blockquote>\\n\",\"abbrlink\":\"vywf17\"},{\"title\":\"Java并发编程第七坎-2\",\"categories\":[\"java\",\"concurrency\",\"《艺术》与《技术》\"],\"comments\":true,\"tags\":[\"java\",\"thread\",\"AQS\"],\"date\":\"2018-12-30T12:58:48.000Z\",\"series\":\"并发\",\"char_count\":19385,\"short_content\":\"\\n          <h3 id=\\\"e25a21eb\\\">Introduction</h3><p>上节我们介绍了Java并发编程的一个新的阶段——Java并发包中的<code>Lock</code>接口以及<code>AbstractQueuedSynchronizer</code>的配合使用</p>\\n<p>并且尝试实现了一个简单的独占锁Mutex，借此我们了解到，并发编程还能如此灵活与优雅</p>\\n\",\"abbrlink\":\"u4sgci\"},{\"title\":\"AVL树和红黑树\",\"categories\":[\"data structures\",\"tree\"],\"comments\":true,\"date\":\"2018-08-27T15:05:00.000Z\",\"tags\":[\"BST\",\"AVL\",\"RBT\",\"algorithm\",\"tree\"],\"char_count\":8649,\"short_content\":\"\\n          <h3 id=\\\"5cfda864\\\">小声BB</h3><p>本篇尽量不po代码，仅仅过一遍AVL树和红黑树</p>\\n<p>其中红黑树更是在HashMap中大展身手，肯定要研究一下为什么他们要用到RBT</p>\\n<hr>\\n\",\"abbrlink\":\"wji6g0\"},{\"title\":\"JettyDocument_ZH_CN_Translation_Part1\",\"tags\":[\"jetty\",\"document\"],\"categories\":[\"translation\"],\"series\":\"JettyDocument_ZH_CN_Translation\",\"date\":\"2018-05-07T17:30:01.000Z\",\"char_count\":24839,\"short_content\":\"\\n          <h3 id=\\\"6b9671b7\\\">Ⅰ.开始使用Jetty</h3><p><span id=\\\"top\\\"></span></p>\\n<ul>\\n<li><ol>\\n<li><a href=\\\"#1%E5%85%B3%E4%BA%8Ejetty%E7%9A%84%E4%BB%8B%E7%BB%8D\\\">关于Jetty的介绍</a></li>\\n</ol>\\n<ul>\\n<li><a href=\\\"#11%E4%BB%80%E4%B9%88%E6%98%AFjetty\\\">什么是Jetty</a></li>\\n<li><a href=\\\"#12%E6%88%91%E5%BA%94%E8%AF%A5%E4%BD%BF%E7%94%A8%E5%93%AA%E4%B8%AA%E7%89%88%E6%9C%AC\\\">我应该使用哪个版本</a></li>\\n<li><a href=\\\"#13jetty%E5%92%8Cjavaee%E7%9A%84web%E8%A7%84%E8%8C%83\\\">Jetty和JavaEE的Web规范</a></li>\\n<li><a href=\\\"#14%E5%9C%A8maven%E9%87%8C%E9%9D%A2%E6%89%BE%E5%88%B0jetty\\\">在Maven里面找到Jetty</a></li>\\n</ul>\\n</li>\\n<li><ol start=\\\"2\\\">\\n<li><a href=\\\"#2%E4%BD%BF%E7%94%A8jetty\\\">使用Jetty</a></li>\\n</ol>\\n</li>\\n</ul>\\n\",\"abbrlink\":\"17hjlts\"},{\"title\":\"CentOS7下安装Pillow并使用osm-bundler生成图点模型\",\"categories\":[\"note\",\"project\"],\"comments\":true,\"tags\":[\"centos7\",\"python\",\"Pillow\",\"osm-bundler\",\"pip\"],\"date\":\"2018-01-21T11:50:30.000Z\",\"char_count\":5474,\"short_content\":\"<p><div class=\\\"saying mb-4\\\"><div class=\\\"saying-quote saying-left-quote\\\">“</div><div class=\\\"saying-quote saying-right-quote\\\">”</div><br>前言：之前留下的17大创项目总得做点什么，马上就要结题了，我们做的AR留影需要将用户照下来的照片生成点云然后合成模型。由此Escnqh[link:gayhub]找到了使用PIL+osm-bundler的解决方案。<br></div></p>\\n<!-- more -->\\n\\n\\n          <h3 id=\\\"fc823621\\\">Python Photogrammetry ToolKit（PPT）</h3>\",\"abbrlink\":\"1ox3j6i\"},{\"title\":\"5 Useful Tips For A Better Commit Message\",\"categories\":[\"reprinted\"],\"comments\":true,\"tags\":[\"tips\",\"github\",\"git\"],\"date\":\"2017-11-15T16:59:00.000Z\",\"char_count\":3660,\"short_content\":\"<p>You’re already writing decent commit messages. Let’s see if we can level you up to awesome. Other developers, especially you-in-two-weeks and you-from-next-year, will thank you for your forethought and verbosity when they run git blame to see why that conditional is there.</p>\\n<!-- more -->\\n\\n<ol>\\n<li><p>The first line should always be <u>50 characters</u> or less and that it should be followed by a blank line. Vim ships with syntax, indent, and filetype plugins for Git commits which can help here.</p>\\n</li>\\n<li><p>Add this line to your <code>~/.vimrc</code> to add spell checking and automatic wrapping at the recommended 72 columns to you commit messages.</p>\\n</li>\\n</ol>\\n\",\"abbrlink\":\"1h187i6\"}]");
    sessionStorage.setItem('pod', "[\"Leetcode-51~55<=>xmbex2\",\"Leetcode-31~35<=>dbne5d\",\"Java并发编程第八坎<=>1u7rv30\",\"CLH Lock Queue<=>vywf17\",\"Java并发编程第七坎-2<=>u4sgci\",\"AVL树和红黑树<=>wji6g0\",\"JettyDocument_ZH_CN_Translation_Part1<=>17hjlts\",\"CentOS7下安装Pillow并使用osm-bundler生成图点模型<=>1ox3j6i\",\"5 Useful Tips For A Better Commit Message<=>1h187i6\"]");
