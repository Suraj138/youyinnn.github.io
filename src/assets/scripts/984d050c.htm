<h2 id="算法">算法</h2>
<h3 id="bitmap">BitMap</h3>
<p><a href="http://blog.51cto.com/zengzhaozheng/1404108">http://blog.51cto.com/zengzhaozheng/1404108</a>
<a href="https://blog.csdn.net/hguisu/article/details/7880288">https://blog.csdn.net/hguisu/article/details/7880288</a>
<a href="http://www.ruanyifeng.com/blog/2015/09/git-bitmap.html">http://www.ruanyifeng.com/blog/2015/09/git-bitmap.html</a>
编程珠玑</p>
<h3 id="贪心算法和动态规划的区别">贪心算法和动态规划的区别</h3>
<blockquote>
<p>贪心算法：贪心算法采用的是逐步构造最优解的方法。在每个阶段，都在一定的标准下做出一个看上去最优的决策。决策一旦做出，就不可能再更改。做出这个局部最优决策所依照的标准称为贪心准则。</p>
<p>分治算法：分治法的思想是将一个难以直接解决大的问题分解成容易求解的子问题，以便各个击破、分而治之。 </p>
<p>动态规划：将待求解的问题分解为若干个子问题，按顺序求解子阶段，前一子问题的解，为后一子问题的求解提供了有用的信息。在求解任一子问题时，列出各种可能的局部解，通过决策保留那些有可能达到最优的局部解，丢弃其他局部解。依次解决各子问题，最后一个子问题就是初始问题的解。 </p>
</blockquote>
<p>引自：<a href="https://www.cnblogs.com/codeskiller/p/6477181.html">https://www.cnblogs.com/codeskiller/p/6477181.html</a></p>
<h3 id="三种静态查找算法：顺序、二分折半、索引分块查找">三种静态查找算法：顺序、二分/折半、索引/分块查找</h3>
<p>文章：<a href="https://blog.csdn.net/u011489043/article/details/78683856">https://blog.csdn.net/u011489043/article/details/78683856</a></p>
<h3 id="算法：并查集">算法：并查集</h3>
<p><a href="https://blog.csdn.net/C20180630/article/details/57074623">https://blog.csdn.net/C20180630/article/details/57074623</a>
<a href="https://blog.csdn.net/u013546077/article/details/64509038">https://blog.csdn.net/u013546077/article/details/64509038</a></p>
<pre><code class="hljs language-java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UnionFindSetSimple</span> {

    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span>[] father;
    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span>[] rank;

    <span class="hljs-keyword">public</span> <span class="hljs-title function_">UnionFindSetSimple</span><span class="hljs-params">(<span class="hljs-type">int</span> N)</span> {
        father = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[N];
        rank = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[N];
        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; N; i++) {
            father[i] = i;
        }
    }

    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">merge</span><span class="hljs-params">(<span class="hljs-type">int</span> x, <span class="hljs-type">int</span> y)</span> {
        <span class="hljs-type">int</span> <span class="hljs-variable">xFather</span> <span class="hljs-operator">=</span> findFather(x);
        <span class="hljs-type">int</span> <span class="hljs-variable">yFather</span> <span class="hljs-operator">=</span> findFather(y);
        <span class="hljs-keyword">if</span> (rank[x] &lt;= rank[y]) {
            father[xFather] = yFather;
            <span class="hljs-keyword">if</span> (rank[x] == rank[y] &amp;&amp; x != y) {
                rank[y]++;
            }            
        } <span class="hljs-keyword">else</span> {
            father[yFather] = xFather;
        }
    }

    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">findFather</span><span class="hljs-params">(<span class="hljs-type">int</span> x)</span> {
        <span class="hljs-keyword">return</span> father[x] == x ? x : (father[x] = findFather(father[x]));
    }
    
    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">isRelated</span><span class="hljs-params">(<span class="hljs-type">int</span> x, <span class="hljs-type">int</span> y)</span> {
        <span class="hljs-keyword">return</span> findFather(x) == findFather(y);
    }
}
</code></pre>
